
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800b6d0  0800b6d0  0001b6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc1c  0800bc1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc1c  0800bc1c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc1c  0800bc1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc20  0800bc20  0001bc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bc24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000024c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000042c  2000042c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013251  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002baf  00000000  00000000  00033461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00036fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe21  00000000  00000000  00037e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014926  00000000  00000000  00057c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb4bd  00000000  00000000  0006c55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127a1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005688  00000000  00000000  00127a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6b4 	.word	0x0800b6b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b6b4 	.word	0x0800b6b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_CAN_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_CAN_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d16:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d1a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000d1e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_CAN_Init+0x64>)
 8000d46:	f000 ff7b 	bl	8001c40 <HAL_CAN_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 fba0 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200001fc 	.word	0x200001fc
 8000d5c:	40006400 	.word	0x40006400

08000d60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <HAL_CAN_MspInit+0xa0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d139      	bne.n	8000df6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000db2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f001 ffe1 	bl	8002d98 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2013      	movs	r0, #19
 8000ddc:	f001 fd7b 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000de0:	2013      	movs	r0, #19
 8000de2:	f001 fd94 	bl	800290e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2014      	movs	r0, #20
 8000dec:	f001 fd73 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000df0:	2014      	movs	r0, #20
 8000df2:	f001 fd8c 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40006400 	.word	0x40006400
 8000e04:	40021000 	.word	0x40021000

08000e08 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x104) << 5;
 8000e1a:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000e1e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x105) << 5;
 8000e20:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8000e24:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;
 8000e2c:	f242 0320 	movw	r3, #8224	; 0x2020
 8000e30:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <CAN_Filter_Init+0x64>)
 8000e44:	f000 fff7 	bl	8001e36 <HAL_CAN_ConfigFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <CAN_Filter_Init+0x4a>
  {
    Error_Handler();
 8000e4e:	f000 fb21 	bl	8001494 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000e52:	2102      	movs	r1, #2
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <CAN_Filter_Init+0x64>)
 8000e56:	f001 fa0e 	bl	8002276 <HAL_CAN_ActivateNotification>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <CAN_Filter_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 fb18 	bl	8001494 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001fc 	.word	0x200001fc

08000e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_DMA_Init+0x38>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <MX_DMA_Init+0x38>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_DMA_Init+0x38>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200e      	movs	r0, #14
 8000e94:	f001 fd1f 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f001 fd38 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b55      	ldr	r3, [pc, #340]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a54      	ldr	r2, [pc, #336]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b52      	ldr	r3, [pc, #328]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee4:	6153      	str	r3, [r2, #20]
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a48      	ldr	r2, [pc, #288]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a42      	ldr	r2, [pc, #264]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f28:	483c      	ldr	r0, [pc, #240]	; (800101c <MX_GPIO_Init+0x170>)
 8000f2a:	f002 f8c7 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	21c1      	movs	r1, #193	; 0xc1
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 f8c1 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTALAPTER_OUT_Pin|PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f246 0144 	movw	r1, #24644	; 0x6044
 8000f40:	4837      	ldr	r0, [pc, #220]	; (8001020 <MX_GPIO_Init+0x174>)
 8000f42:	f002 f8bb 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 8000f46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	482f      	ldr	r0, [pc, #188]	; (800101c <MX_GPIO_Init+0x170>)
 8000f60:	f001 ff1a 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 8000f64:	23c1      	movs	r3, #193	; 0xc1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 ff0b 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 fefe 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTALAPTER_OUT_Pin|PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 8000f9c:	f246 0344 	movw	r3, #24644	; 0x6044
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <MX_GPIO_Init+0x174>)
 8000fb6:	f001 feef 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 8000fba:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_GPIO_Init+0x174>)
 8000fd0:	f001 fee2 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fec:	f001 fed4 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ff0:	2338      	movs	r3, #56	; 0x38
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001000:	2305      	movs	r3, #5
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_GPIO_Init+0x174>)
 800100c:	f001 fec4 	bl	8002d98 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400

08001024 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <_write+0x24>)
 800103a:	f004 fb8f 	bl	800575c <HAL_UART_Transmit_DMA>
	return len;
 800103e:	687b      	ldr	r3, [r7, #4]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002cc 	.word	0x200002cc

0800104c <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0};
volatile bool uart_rx_flag = false,uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0,uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_UART_RxCpltCallback+0x5c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10d      	bne.n	800107a <HAL_UART_RxCpltCallback+0x2e>
		uart_rx_flag = true;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_UART_RxCpltCallback+0x60>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		uart_rx_cnt++;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_UART_RxCpltCallback+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_UART_RxCpltCallback+0x64>)
 800106c:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	4910      	ldr	r1, [pc, #64]	; (80010b4 <HAL_UART_RxCpltCallback+0x68>)
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <HAL_UART_RxCpltCallback+0x6c>)
 8001074:	f004 fb24 	bl	80056c0 <HAL_UART_Receive_IT>
	}else if(huart->Instance == USART3){
		uart3_rx_flag = true;
		uart3_rx_cnt++;
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
	}
}
 8001078:	e011      	b.n	800109e <HAL_UART_RxCpltCallback+0x52>
	}else if(huart->Instance == USART3){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_UART_RxCpltCallback+0x70>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d10c      	bne.n	800109e <HAL_UART_RxCpltCallback+0x52>
		uart3_rx_flag = true;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_UART_RxCpltCallback+0x74>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
		uart3_rx_cnt++;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_UART_RxCpltCallback+0x78>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <HAL_UART_RxCpltCallback+0x78>)
 8001092:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <HAL_UART_RxCpltCallback+0x7c>)
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_UART_RxCpltCallback+0x80>)
 800109a:	f004 fb11 	bl	80056c0 <HAL_UART_Receive_IT>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40013800 	.word	0x40013800
 80010ac:	2000023a 	.word	0x2000023a
 80010b0:	2000023c 	.word	0x2000023c
 80010b4:	20000224 	.word	0x20000224
 80010b8:	200002cc 	.word	0x200002cc
 80010bc:	40004800 	.word	0x40004800
 80010c0:	2000023b 	.word	0x2000023b
 80010c4:	20000240 	.word	0x20000240
 80010c8:	20000230 	.word	0x20000230
 80010cc:	20000350 	.word	0x20000350

080010d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
int servo_timeout_cnt = 0,dribbler_timeout_cnt = 0;
uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 ffb7 	bl	8002052 <HAL_CAN_GetRxMessage>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 80010ea:	f000 f9d3 	bl	8001494 <Error_Handler>
	}

	can_rx_cnt++;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80010f6:	6013      	str	r3, [r2, #0]
	switch (can_rx_header.StdId)
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001100:	d020      	beq.n	8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8001102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001106:	d81f      	bhi.n	8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 8001108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800110c:	d004      	beq.n	8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800110e:	f240 1205 	movw	r2, #261	; 0x105
 8001112:	4293      	cmp	r3, r2
 8001114:	d00e      	beq.n	8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>


	case 0x300:
		break;
	default:
		break;
 8001116:	e017      	b.n	8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		dribbler_timeout_cnt = 0;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
		dribbler_speed = can_rx_buf.speed/100;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001132:	e00a      	b.n	800114a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		servo_timeout_cnt = 0;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
		serv_angle = can_rx_buf.speed;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001140:	6013      	str	r3, [r2, #0]
		break;
 8001142:	e002      	b.n	800114a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		break;
 8001148:	bf00      	nop
	}
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000258 	.word	0x20000258
 8001158:	20000260 	.word	0x20000260
 800115c:	20000254 	.word	0x20000254
 8001160:	20000250 	.word	0x20000250
 8001164:	42c80000 	.word	0x42c80000
 8001168:	20000248 	.word	0x20000248
 800116c:	2000024c 	.word	0x2000024c
 8001170:	20000244 	.word	0x20000244

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b08b      	sub	sp, #44	; 0x2c
 8001178:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fcd7 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f92d 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f7ff fe93 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f7ff fe73 	bl	8000e70 <MX_DMA_Init>
  MX_CAN_Init();
 800118a:	f7ff fdb3 	bl	8000cf4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800118e:	f000 fb77 	bl	8001880 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001192:	f000 fba5 	bl	80018e0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001196:	f000 fab5 	bl	8001704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0426!!\n");
 800119a:	487d      	ldr	r0, [pc, #500]	; (8001390 <main+0x21c>)
 800119c:	f006 fc8c 	bl	8007ab8 <puts>
	HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	497c      	ldr	r1, [pc, #496]	; (8001394 <main+0x220>)
 80011a4:	487c      	ldr	r0, [pc, #496]	; (8001398 <main+0x224>)
 80011a6:	f004 fa8b 	bl	80056c0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	497b      	ldr	r1, [pc, #492]	; (800139c <main+0x228>)
 80011ae:	487c      	ldr	r0, [pc, #496]	; (80013a0 <main+0x22c>)
 80011b0:	f004 fa86 	bl	80056c0 <HAL_UART_Receive_IT>
	CAN_Filter_Init();
 80011b4:	f7ff fe28 	bl	8000e08 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 80011b8:	487a      	ldr	r0, [pc, #488]	; (80013a4 <main+0x230>)
 80011ba:	f000 ff06 	bl	8001fca <HAL_CAN_Start>

	HAL_TIM_PWM_Init(&htim3);
 80011be:	487a      	ldr	r0, [pc, #488]	; (80013a8 <main+0x234>)
 80011c0:	f003 fbb8 	bl	8004934 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011c4:	2108      	movs	r1, #8
 80011c6:	4878      	ldr	r0, [pc, #480]	; (80013a8 <main+0x234>)
 80011c8:	f003 fc0c 	bl	80049e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80011cc:	210c      	movs	r1, #12
 80011ce:	4876      	ldr	r0, [pc, #472]	; (80013a8 <main+0x234>)
 80011d0:	f003 fc08 	bl	80049e4 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR3 = 0;
 80011d4:	4b74      	ldr	r3, [pc, #464]	; (80013a8 <main+0x234>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 0;
 80011dc:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <main+0x234>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
	servo_timeout_cnt = 0;
 80011e4:	4b71      	ldr	r3, [pc, #452]	; (80013ac <main+0x238>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	dribbler_timeout_cnt = 0;
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <main+0x23c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

	uint32_t print_interval = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f000 fcff 	bl	8001bf8 <HAL_Delay>
		print_interval++;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
		if(print_interval >= 10){
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b09      	cmp	r3, #9
 8001204:	d9f6      	bls.n	80011f4 <main+0x80>
			print_interval = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
			printf("can rx %3ld uart rx %4d %4d dribbler %6.3f servo %6.3f timeout %4ld %4ld\n",can_rx_cnt,uart_rx_cnt,uart3_rx_cnt,dribbler_speed,serv_angle,dribbler_timeout_cnt,servo_timeout_cnt);
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <main+0x240>)
 800120c:	681e      	ldr	r6, [r3, #0]
 800120e:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <main+0x244>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b69      	ldr	r3, [pc, #420]	; (80013bc <main+0x248>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <main+0x24c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f992 	bl	8000548 <__aeabi_f2d>
 8001224:	4604      	mov	r4, r0
 8001226:	460d      	mov	r5, r1
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <main+0x250>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f98b 	bl	8000548 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	495e      	ldr	r1, [pc, #376]	; (80013b0 <main+0x23c>)
 8001238:	6809      	ldr	r1, [r1, #0]
 800123a:	485c      	ldr	r0, [pc, #368]	; (80013ac <main+0x238>)
 800123c:	6800      	ldr	r0, [r0, #0]
 800123e:	9005      	str	r0, [sp, #20]
 8001240:	9104      	str	r1, [sp, #16]
 8001242:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001246:	e9cd 4500 	strd	r4, r5, [sp]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4631      	mov	r1, r6
 8001250:	485d      	ldr	r0, [pc, #372]	; (80013c8 <main+0x254>)
 8001252:	f006 fbab 	bl	80079ac <iprintf>


			// TEL (LED0,PA3)
			if(uart3_rx_cnt > 0){
 8001256:	4b59      	ldr	r3, [pc, #356]	; (80013bc <main+0x248>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <main+0xf8>
			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001264:	4859      	ldr	r0, [pc, #356]	; (80013cc <main+0x258>)
 8001266:	f001 ff29 	bl	80030bc <HAL_GPIO_WritePin>
 800126a:	e005      	b.n	8001278 <main+0x104>
			}else{

			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001272:	4856      	ldr	r0, [pc, #344]	; (80013cc <main+0x258>)
 8001274:	f001 ff22 	bl	80030bc <HAL_GPIO_WritePin>
			}

			// RX (can rx,LED2,PA5)
			if(can_rx_cnt > 0){
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <main+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <main+0x11a>

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	4851      	ldr	r0, [pc, #324]	; (80013cc <main+0x258>)
 8001288:	f001 ff18 	bl	80030bc <HAL_GPIO_WritePin>
 800128c:	e005      	b.n	800129a <main+0x126>
			}else{

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001294:	484d      	ldr	r0, [pc, #308]	; (80013cc <main+0x258>)
 8001296:	f001 ff11 	bl	80030bc <HAL_GPIO_WritePin>
			}

			if(dribbler_speed != 0){
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <main+0x24c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	d006      	beq.n	80012b8 <main+0x144>
			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	4846      	ldr	r0, [pc, #280]	; (80013cc <main+0x258>)
 80012b2:	f001 ff03 	bl	80030bc <HAL_GPIO_WritePin>
 80012b6:	e005      	b.n	80012c4 <main+0x150>
			}else{

			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4843      	ldr	r0, [pc, #268]	; (80013cc <main+0x258>)
 80012c0:	f001 fefc 	bl	80030bc <HAL_GPIO_WritePin>
			}


			can_rx_cnt = 0;
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <main+0x240>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
			uart_rx_cnt = 0;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <main+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 80012d0:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <main+0x248>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f001 fed5 	bl	800308c <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d112      	bne.n	800130e <main+0x19a>
				htim3.Instance->CCR3 = 1500 + 600*dribbler_speed;	// esc
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <main+0x24c>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80013d0 <main+0x25c>
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80013d4 <main+0x260>
 80012fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <main+0x234>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c
 800130c:	e004      	b.n	8001318 <main+0x1a4>
			}else{
				htim3.Instance->CCR3 = 1500 + 300;	// esc
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <main+0x234>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <main+0x264>)
 800131e:	f001 feb5 	bl	800308c <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d112      	bne.n	800134e <main+0x1da>
				htim3.Instance->CCR4 = 1500 + 600*serv_angle;	// servo
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <main+0x250>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80013d0 <main+0x25c>
 8001332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001336:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80013d4 <main+0x260>
 800133a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <main+0x234>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001346:	ee17 2a90 	vmov	r2, s15
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
 800134c:	e004      	b.n	8001358 <main+0x1e4>
			}else{
				htim3.Instance->CCR4 = 1500 + 300;	// servo
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <main+0x234>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
			}


			dribbler_timeout_cnt++;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x23c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <main+0x23c>)
 8001360:	6013      	str	r3, [r2, #0]
			servo_timeout_cnt++;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <main+0x238>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <main+0x238>)
 800136a:	6013      	str	r3, [r2, #0]
			if(dribbler_timeout_cnt > 50){
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <main+0x23c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b32      	cmp	r3, #50	; 0x32
 8001372:	dd03      	ble.n	800137c <main+0x208>
				dribbler_speed = 0;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <main+0x24c>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			}
			if(servo_timeout_cnt > 50){
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <main+0x238>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b32      	cmp	r3, #50	; 0x32
 8001382:	f77f af37 	ble.w	80011f4 <main+0x80>
				serv_angle = 0;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <main+0x250>)
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 800138e:	e731      	b.n	80011f4 <main+0x80>
 8001390:	0800b6d0 	.word	0x0800b6d0
 8001394:	20000230 	.word	0x20000230
 8001398:	20000350 	.word	0x20000350
 800139c:	20000224 	.word	0x20000224
 80013a0:	200002cc 	.word	0x200002cc
 80013a4:	200001fc 	.word	0x200001fc
 80013a8:	20000280 	.word	0x20000280
 80013ac:	2000024c 	.word	0x2000024c
 80013b0:	20000250 	.word	0x20000250
 80013b4:	20000254 	.word	0x20000254
 80013b8:	2000023c 	.word	0x2000023c
 80013bc:	20000240 	.word	0x20000240
 80013c0:	20000248 	.word	0x20000248
 80013c4:	20000244 	.word	0x20000244
 80013c8:	0800b6e8 	.word	0x0800b6e8
 80013cc:	48000800 	.word	0x48000800
 80013d0:	44160000 	.word	0x44160000
 80013d4:	44bb8000 	.word	0x44bb8000
 80013d8:	48000400 	.word	0x48000400

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09e      	sub	sp, #120	; 0x78
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013e6:	2228      	movs	r2, #40	; 0x28
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fc5c 	bl	8006ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	223c      	movs	r2, #60	; 0x3c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f005 fc4e 	bl	8006ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001426:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001428:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800142c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fe5a 	bl	80030ec <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800143e:	f000 f829 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2302      	movs	r3, #2
 8001448:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001458:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fe82 	bl	8004168 <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800146a:	f000 f813 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 800146e:	2305      	movs	r3, #5
 8001470:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f8a9 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001488:	f000 f804 	bl	8001494 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3778      	adds	r7, #120	; 0x78
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x44>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_MspInit+0x44>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_MspInit+0x44>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x44>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 fb40 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA1_Channel4_IRQHandler+0x10>)
 8001542:	f001 fb1b 	bl	8002b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003d4 	.word	0x200003d4

08001550 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8001556:	f000 feb4 	bl	80022c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001fc 	.word	0x200001fc

08001564 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800156a:	f000 feaa 	bl	80022c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001fc 	.word	0x200001fc

08001578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART1_IRQHandler+0x10>)
 800157e:	f004 f97d 	bl	800587c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002cc 	.word	0x200002cc

0800158c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_kill>:

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a6:	f005 fb55 	bl	8006c54 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2216      	movs	r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
	return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
	}

return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:
	}
	return len;
}

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f005 fad6 	bl	8006c54 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20008000 	.word	0x20008000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	2000027c 	.word	0x2000027c
 80016dc:	20000430 	.word	0x20000430

080016e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <MX_TIM3_Init+0xc4>)
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <MX_TIM3_Init+0xc8>)
 800172c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_TIM3_Init+0xc4>)
 8001730:	2248      	movs	r2, #72	; 0x48
 8001732:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <MX_TIM3_Init+0xc4>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_TIM3_Init+0xc4>)
 800173c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001740:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_TIM3_Init+0xc4>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM3_Init+0xc4>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800174e:	481e      	ldr	r0, [pc, #120]	; (80017c8 <MX_TIM3_Init+0xc4>)
 8001750:	f003 f8f0 	bl	8004934 <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800175a:	f7ff fe9b 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <MX_TIM3_Init+0xc4>)
 800176e:	f003 fed9 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001778:	f7ff fe8c 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177c:	2360      	movs	r3, #96	; 0x60
 800177e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8001780:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001784:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	2208      	movs	r2, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM3_Init+0xc4>)
 8001796:	f003 fa25 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80017a0:	f7ff fe78 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	220c      	movs	r2, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM3_Init+0xc4>)
 80017ac:	f003 fa1a 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80017b6:	f7ff fe6d 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM3_Init+0xc4>)
 80017bc:	f000 f828 	bl	8001810 <HAL_TIM_MspPostInit>

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000280 	.word	0x20000280
 80017cc:	40000400 	.word	0x40000400

080017d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_TIM_PWM_MspInit+0x38>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10b      	bne.n	80017fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_TIM_PWM_MspInit+0x3c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_TIM_PWM_MspInit+0x3c>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_TIM_PWM_MspInit+0x3c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40000400 	.word	0x40000400
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_TIM_MspPostInit+0x64>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d11b      	bne.n	800186a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800184a:	2303      	movs	r3, #3
 800184c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185a:	2302      	movs	r3, #2
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_TIM_MspPostInit+0x6c>)
 8001866:	f001 fa97 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40000400 	.word	0x40000400
 8001878:	40021000 	.word	0x40021000
 800187c:	48000400 	.word	0x48000400

08001880 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <MX_USART1_UART_Init+0x58>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_USART1_UART_Init+0x5c>)
 800188e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018a4:	220c      	movs	r2, #12
 80018a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_USART1_UART_Init+0x54>)
 80018c2:	f003 feaf 	bl	8005624 <HAL_UART_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80018cc:	f7ff fde2 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200002cc 	.word	0x200002cc
 80018d8:	40013800 	.word	0x40013800
 80018dc:	001e8480 	.word	0x001e8480

080018e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART3_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART3_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART3_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART3_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART3_UART_Init+0x58>)
 8001924:	f003 fe7e 	bl	8005624 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f7ff fdb1 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000350 	.word	0x20000350
 800193c:	40004800 	.word	0x40004800

08001940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_UART_MspInit+0x180>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d16a      	bne.n	8001a38 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6153      	str	r3, [r2, #20]
 8001986:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a4:	2307      	movs	r3, #7
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f001 f9f1 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c8:	2307      	movs	r3, #7
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d6:	f001 f9df 	bl	8002d98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_UART_MspInit+0x18c>)
 80019de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e0:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a0a:	482f      	ldr	r0, [pc, #188]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 8001a0c:	f000 ff99 	bl	8002942 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001a16:	f7ff fd3d 	bl	8001494 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 8001a1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a20:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_UART_MspInit+0x188>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2025      	movs	r0, #37	; 0x25
 8001a2c:	f000 ff53 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a30:	2025      	movs	r0, #37	; 0x25
 8001a32:	f000 ff6c 	bl	800290e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a36:	e03e      	b.n	8001ab6 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_UART_MspInit+0x190>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d139      	bne.n	8001ab6 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0x184>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0x194>)
 8001a90:	f001 f982 	bl	8002d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <HAL_UART_MspInit+0x194>)
 8001ab2:	f001 f971 	bl	8002d98 <HAL_GPIO_Init>
}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	; 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	200003d4 	.word	0x200003d4
 8001acc:	40020044 	.word	0x40020044
 8001ad0:	40004800 	.word	0x40004800
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af4:	4c0b      	ldr	r4, [pc, #44]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b02:	f7ff fded 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f005 f8ab 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff fb33 	bl	8001174 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b1c:	0800bc24 	.word	0x0800bc24
  ldr r2, =_sbss
 8001b20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b24:	2000042c 	.word	0x2000042c

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 febf 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fcaa 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fed7 	bl	800292a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 fe9f 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000418 	.word	0x20000418

08001be0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000418 	.word	0x20000418

08001bf8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0ed      	b.n	8001e2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f87e 	bl	8000d60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c74:	f7ff ffb4 	bl	8001be0 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c7a:	e012      	b.n	8001ca2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c7c:	f7ff ffb0 	bl	8001be0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b0a      	cmp	r3, #10
 8001c88:	d90b      	bls.n	8001ca2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2205      	movs	r2, #5
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0c5      	b.n	8001e2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0e5      	beq.n	8001c7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0202 	bic.w	r2, r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc0:	f7ff ff8e 	bl	8001be0 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cc6:	e012      	b.n	8001cee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc8:	f7ff ff8a 	bl	8001be0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d90b      	bls.n	8001cee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e09f      	b.n	8001e2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e5      	bne.n	8001cc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e1b      	ldrb	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d108      	bne.n	8001d16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e007      	b.n	8001d26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7e5b      	ldrb	r3, [r3, #25]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e007      	b.n	8001d50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e9b      	ldrb	r3, [r3, #26]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d108      	bne.n	8001d6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0220 	bic.w	r2, r2, #32
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7edb      	ldrb	r3, [r3, #27]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d108      	bne.n	8001d94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0210 	bic.w	r2, r2, #16
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0210 	orr.w	r2, r2, #16
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f1b      	ldrb	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d108      	bne.n	8001dbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0208 	orr.w	r2, r2, #8
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e007      	b.n	8001dce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7f5b      	ldrb	r3, [r3, #29]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0204 	orr.w	r2, r2, #4
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e007      	b.n	8001df8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0204 	bic.w	r2, r2, #4
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	ea42 0103 	orr.w	r1, r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d003      	beq.n	8001e5c <HAL_CAN_ConfigFilter+0x26>
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	f040 80aa 	bne.w	8001fb0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2201      	movs	r2, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d123      	bne.n	8001ede <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3248      	adds	r2, #72	; 0x48
 8001ebe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	3348      	adds	r3, #72	; 0x48
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d122      	bne.n	8001f2c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3248      	adds	r2, #72	; 0x48
 8001f0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	3348      	adds	r3, #72	; 0x48
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e006      	b.n	8001fbe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d12e      	bne.n	800203c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ff6:	f7ff fdf3 	bl	8001be0 <HAL_GetTick>
 8001ffa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ffc:	e012      	b.n	8002024 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ffe:	f7ff fdef 	bl	8001be0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b0a      	cmp	r3, #10
 800200a:	d90b      	bls.n	8002024 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2205      	movs	r2, #5
 800201c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e012      	b.n	800204a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e5      	bne.n	8001ffe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e006      	b.n	800204a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
  }
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002052:	b480      	push	{r7}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d003      	beq.n	8002076 <HAL_CAN_GetRxMessage+0x24>
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	2b02      	cmp	r3, #2
 8002072:	f040 80f3 	bne.w	800225c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10e      	bne.n	800209a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0e7      	b.n	800226a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d8      	b.n	800226a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	331b      	adds	r3, #27
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0204 	and.w	r2, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	331b      	adds	r3, #27
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0d5b      	lsrs	r3, r3, #21
 80020e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	331b      	adds	r3, #27
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331b      	adds	r3, #27
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0202 	and.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	331b      	adds	r3, #27
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	331b      	adds	r3, #27
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	331b      	adds	r3, #27
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0a1a      	lsrs	r2, r3, #8
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0c1a      	lsrs	r2, r3, #16
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	3302      	adds	r3, #2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e1a      	lsrs	r2, r3, #24
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	3303      	adds	r3, #3
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3304      	adds	r3, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0a1a      	lsrs	r2, r3, #8
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	3305      	adds	r3, #5
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0c1a      	lsrs	r2, r3, #16
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3306      	adds	r3, #6
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	4413      	add	r3, r2
 8002220:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0e1a      	lsrs	r2, r3, #24
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	3307      	adds	r3, #7
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e007      	b.n	8002258 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0220 	orr.w	r2, r2, #32
 8002256:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e006      	b.n	800226a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d002      	beq.n	8002294 <HAL_CAN_ActivateNotification+0x1e>
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d109      	bne.n	80022a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6959      	ldr	r1, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e006      	b.n	80022b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d07c      	beq.n	8002402 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f983 	bl	8002630 <HAL_CAN_TxMailbox0CompleteCallback>
 800232a:	e016      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e00c      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e002      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f989 	bl	800266c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d024      	beq.n	80023ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f963 	bl	8002644 <HAL_CAN_TxMailbox1CompleteCallback>
 800237e:	e016      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e00c      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e002      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f969 	bl	8002680 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d024      	beq.n	8002402 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f943 	bl	8002658 <HAL_CAN_TxMailbox2CompleteCallback>
 80023d2:	e016      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e00c      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e002      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f949 	bl	8002694 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2208      	movs	r2, #8
 8002440:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f930 	bl	80026a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe fe35 	bl	80010d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f912 	bl	80026d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8f9 	bl	80026bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2210      	movs	r2, #16
 80024e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8fc 	bl	80026e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8f5 	bl	80026f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d07b      	beq.n	8002610 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d072      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d043      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03e      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d02b      	beq.n	80025ec <HAL_CAN_IRQHandler+0x32a>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d82e      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d022      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x320>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d82a      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d019      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x316>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d826      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d010      	beq.n	80025ce <HAL_CAN_IRQHandler+0x30c>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d822      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d002      	beq.n	80025ba <HAL_CAN_IRQHandler+0x2f8>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d005      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025b8:	e01d      	b.n	80025f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c2:	e019      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025cc:	e014      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f043 0320 	orr.w	r3, r3, #32
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d6:	e00f      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e0:	e00a      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ea:	e005      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f4:	e000      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80025f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002606:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2204      	movs	r2, #4
 800260e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f872 	bl	800270c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff29 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff3e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff31 	bl	8002784 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e037      	b.n	80029c8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800296e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800297c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9b8 	bl	8002d20 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}  
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_DMA_Start_IT+0x20>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e04a      	b.n	8002a86 <HAL_DMA_Start_IT+0xb6>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d13a      	bne.n	8002a78 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f94b 	bl	8002cc2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 020e 	orr.w	r2, r2, #14
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e00f      	b.n	8002a66 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 020a 	orr.w	r2, r2, #10
 8002a54:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0204 	bic.w	r2, r2, #4
 8002a64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e005      	b.n	8002a84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d008      	beq.n	8002ab2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e020      	b.n	8002af4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 020e 	bic.w	r2, r2, #14
 8002ac0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d005      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e027      	b.n	8002b72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 020e 	bic.w	r2, r2, #14
 8002b30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
    } 
  }
  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2204      	movs	r2, #4
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d024      	beq.n	8002bee <HAL_DMA_IRQHandler+0x72>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01f      	beq.n	8002bee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bda:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d06a      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	e065      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02c      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xdc>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d027      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 020a 	bic.w	r2, r2, #10
 8002c24:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2102      	movs	r1, #2
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d035      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c56:	e030      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d028      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 020e 	bic.w	r2, r2, #14
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
    }
  }
}  
 8002cb8:	e7ff      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d108      	bne.n	8002d02 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d00:	e007      	b.n	8002d12 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <DMA_CalcBaseAndBitshift+0x60>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d80f      	bhi.n	8002d54 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <DMA_CalcBaseAndBitshift+0x64>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <DMA_CalcBaseAndBitshift+0x68>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <DMA_CalcBaseAndBitshift+0x6c>)
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d52:	e00e      	b.n	8002d72 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <DMA_CalcBaseAndBitshift+0x70>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <DMA_CalcBaseAndBitshift+0x68>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <DMA_CalcBaseAndBitshift+0x74>)
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40020407 	.word	0x40020407
 8002d84:	bffdfff8 	.word	0xbffdfff8
 8002d88:	cccccccd 	.word	0xcccccccd
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	bffdfbf8 	.word	0xbffdfbf8
 8002d94:	40020400 	.word	0x40020400

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e154      	b.n	8003052 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2101      	movs	r1, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8146 	beq.w	800304c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d005      	beq.n	8002dd8 <HAL_GPIO_Init+0x40>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d130      	bne.n	8002e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e0e:	2201      	movs	r2, #1
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0201 	and.w	r2, r3, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d017      	beq.n	8002e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d123      	bne.n	8002eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0203 	and.w	r2, r3, #3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a0 	beq.w	800304c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_GPIO_Init+0x2d8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_GPIO_Init+0x2d8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_GPIO_Init+0x2d8>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f24:	4a53      	ldr	r2, [pc, #332]	; (8003074 <HAL_GPIO_Init+0x2dc>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f4e:	d019      	beq.n	8002f84 <HAL_GPIO_Init+0x1ec>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_GPIO_Init+0x2e0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1e8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_GPIO_Init+0x2e4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1e4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_GPIO_Init+0x2e8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	; (8003084 <HAL_GPIO_Init+0x2ec>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1dc>
 8002f70:	2304      	movs	r3, #4
 8002f72:	e008      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f74:	2305      	movs	r3, #5
 8002f76:	e006      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e004      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f84:	2300      	movs	r3, #0
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	f002 0203 	and.w	r2, r2, #3
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f96:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_GPIO_Init+0x2dc>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fc8:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ff2:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	f47f aea3 	bne.w	8002da8 <HAL_GPIO_Init+0x10>
  }
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40021000 	.word	0x40021000
 8003074:	40010000 	.word	0x40010000
 8003078:	48000400 	.word	0x48000400
 800307c:	48000800 	.word	0x48000800
 8003080:	48000c00 	.word	0x48000c00
 8003084:	48001000 	.word	0x48001000
 8003088:	40010400 	.word	0x40010400

0800308c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e001      	b.n	80030ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f001 b823 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 817d 	beq.w	8003422 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003128:	4bbc      	ldr	r3, [pc, #752]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003134:	4bb9      	ldr	r3, [pc, #740]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d15c      	bne.n	80031fa <HAL_RCC_OscConfig+0x10e>
 8003140:	4bb6      	ldr	r3, [pc, #728]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d155      	bne.n	80031fa <HAL_RCC_OscConfig+0x10e>
 800314e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003152:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003162:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0x94>
 800317a:	4ba8      	ldr	r3, [pc, #672]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e015      	b.n	80031ac <HAL_RCC_OscConfig+0xc0>
 8003180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003184:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003198:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800319c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80031a8:	4b9c      	ldr	r3, [pc, #624]	; (800341c <HAL_RCC_OscConfig+0x330>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80031b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80031c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 811f 	beq.w	8003420 <HAL_RCC_OscConfig+0x334>
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 8116 	bne.w	8003420 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f000 bfaf 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x12e>
 800320c:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a82      	ldr	r2, [pc, #520]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e036      	b.n	8003288 <HAL_RCC_OscConfig+0x19c>
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x158>
 800322a:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7b      	ldr	r2, [pc, #492]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b79      	ldr	r3, [pc, #484]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a78      	ldr	r2, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e021      	b.n	8003288 <HAL_RCC_OscConfig+0x19c>
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x184>
 8003256:	4b71      	ldr	r3, [pc, #452]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a70      	ldr	r2, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b6e      	ldr	r3, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6d      	ldr	r2, [pc, #436]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0x19c>
 8003270:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a69      	ldr	r2, [pc, #420]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a66      	ldr	r2, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f023 020f 	bic.w	r2, r3, #15
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	495f      	ldr	r1, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d059      	beq.n	8003366 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fc95 	bl	8001be0 <HAL_GetTick>
 80032b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fc90 	bl	8001be0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	; 0x64
 80032ca:	d902      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	f000 bf43 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 80032d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_OscConfig+0x218>
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e015      	b.n	8003330 <HAL_RCC_OscConfig+0x244>
 8003304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003308:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003320:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x330>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003334:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003338:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800333c:	fa92 f2a2 	rbit	r2, r2
 8003340:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003344:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f042 0220 	orr.w	r2, r2, #32
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f002 021f 	and.w	r2, r2, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ab      	beq.n	80032bc <HAL_RCC_OscConfig+0x1d0>
 8003364:	e05d      	b.n	8003422 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fc3b 	bl	8001be0 <HAL_GetTick>
 800336a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fc36 	bl	8001be0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b64      	cmp	r3, #100	; 0x64
 800337e:	d902      	bls.n	8003386 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	f000 bee9 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 8003386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800339a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2cc>
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x330>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	e015      	b.n	80033e4 <HAL_RCC_OscConfig+0x2f8>
 80033b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_OscConfig+0x330>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033e8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033f0:	fa92 f2a2 	rbit	r2, r2
 80033f4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033fc:	fab2 f282 	clz	r2, r2
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	f042 0220 	orr.w	r2, r2, #32
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f002 021f 	and.w	r2, r2, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f202 	lsl.w	r2, r1, r2
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ab      	bne.n	8003370 <HAL_RCC_OscConfig+0x284>
 8003418:	e003      	b.n	8003422 <HAL_RCC_OscConfig+0x336>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 817d 	beq.w	8003732 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003438:	4ba6      	ldr	r3, [pc, #664]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003444:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d172      	bne.n	8003536 <HAL_RCC_OscConfig+0x44a>
 8003450:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d16c      	bne.n	8003536 <HAL_RCC_OscConfig+0x44a>
 800345c:	2302      	movs	r3, #2
 800345e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800346e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x3a0>
 8003486:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e013      	b.n	80034b4 <HAL_RCC_OscConfig+0x3c8>
 800348c:	2302      	movs	r3, #2
 800348e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800349e:	2302      	movs	r3, #2
 80034a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034b0:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2202      	movs	r2, #2
 80034b6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80034ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034be:	fa92 f2a2 	rbit	r2, r2
 80034c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80034c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f002 021f 	and.w	r2, r2, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCC_OscConfig+0x410>
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f000 be2e 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b75      	ldr	r3, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	21f8      	movs	r1, #248	; 0xf8
 8003512:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800351a:	fa91 f1a1 	rbit	r1, r1
 800351e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003522:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003526:	fab1 f181 	clz	r1, r1
 800352a:	b2c9      	uxtb	r1, r1
 800352c:	408b      	lsls	r3, r1
 800352e:	4969      	ldr	r1, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003534:	e0fd      	b.n	8003732 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8088 	beq.w	8003658 <HAL_RCC_OscConfig+0x56c>
 8003548:	2301      	movs	r3, #1
 800354a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800355a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	461a      	mov	r2, r3
 8003570:	2301      	movs	r3, #1
 8003572:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe fb34 	bl	8001be0 <HAL_GetTick>
 8003578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe fb2f 	bl	8001be0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	f000 bde2 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 8003594:	2302      	movs	r3, #2
 8003596:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80035a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4d8>
 80035be:	4b45      	ldr	r3, [pc, #276]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e013      	b.n	80035ec <HAL_RCC_OscConfig+0x500>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035d6:	2302      	movs	r3, #2
 80035d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2202      	movs	r2, #2
 80035ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035f6:	fa92 f2a2 	rbit	r2, r2
 80035fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003602:	fab2 f282 	clz	r2, r2
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f042 0220 	orr.w	r2, r2, #32
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 021f 	and.w	r2, r2, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0af      	beq.n	800357e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	21f8      	movs	r1, #248	; 0xf8
 8003634:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800363c:	fa91 f1a1 	rbit	r1, r1
 8003640:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003644:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003648:	fab1 f181 	clz	r1, r1
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	408b      	lsls	r3, r1
 8003650:	4920      	ldr	r1, [pc, #128]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e06c      	b.n	8003732 <HAL_RCC_OscConfig+0x646>
 8003658:	2301      	movs	r3, #1
 800365a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800366a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe faac 	bl	8001be0 <HAL_GetTick>
 8003688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe faa7 	bl	8001be0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	f000 bd5a 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80036b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d104      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5ec>
 80036ce:	4b01      	ldr	r3, [pc, #4]	; (80036d4 <HAL_RCC_OscConfig+0x5e8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	e015      	b.n	8003700 <HAL_RCC_OscConfig+0x614>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	2302      	movs	r3, #2
 80036da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036ea:	2302      	movs	r3, #2
 80036ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036fc:	4bc8      	ldr	r3, [pc, #800]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2202      	movs	r2, #2
 8003702:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003706:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003712:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ad      	bne.n	800368e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8110 	beq.w	8003968 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d079      	beq.n	800384c <HAL_RCC_OscConfig+0x760>
 8003758:	2301      	movs	r3, #1
 800375a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800376a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	4bab      	ldr	r3, [pc, #684]	; (8003a24 <HAL_RCC_OscConfig+0x938>)
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	461a      	mov	r2, r3
 800377e:	2301      	movs	r3, #1
 8003780:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fa2d 	bl	8001be0 <HAL_GetTick>
 8003786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe fa28 	bl	8001be0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	f000 bcdb 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 80037a2:	2302      	movs	r3, #2
 80037a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	fa93 f2a3 	rbit	r2, r3
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 80037fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003808:	2102      	movs	r1, #2
 800380a:	6019      	str	r1, [r3, #0]
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	fa93 f1a3 	rbit	r1, r3
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003822:	6019      	str	r1, [r3, #0]
  return result;
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2101      	movs	r1, #1
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0a0      	beq.n	800378c <HAL_RCC_OscConfig+0x6a0>
 800384a:	e08d      	b.n	8003968 <HAL_RCC_OscConfig+0x87c>
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800386e:	601a      	str	r2, [r3, #0]
  return result;
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003878:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4b68      	ldr	r3, [pc, #416]	; (8003a24 <HAL_RCC_OscConfig+0x938>)
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	461a      	mov	r2, r3
 800388a:	2300      	movs	r3, #0
 800388c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe f9a7 	bl	8001be0 <HAL_GetTick>
 8003892:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe f9a2 	bl	8001be0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d902      	bls.n	80038ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	f000 bc55 	b.w	8004158 <HAL_RCC_OscConfig+0x106c>
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038b6:	2202      	movs	r2, #2
 80038b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038fe:	2202      	movs	r2, #2
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003918:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 800391c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003926:	2102      	movs	r1, #2
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f1a3 	rbit	r1, r3
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003940:	6019      	str	r1, [r3, #0]
  return result;
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d197      	bne.n	8003898 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 81a1 	beq.w	8003cc0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d116      	bne.n	80039be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	61d3      	str	r3, [r2, #28]
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_OscConfig+0x93c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_RCC_OscConfig+0x93c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_RCC_OscConfig+0x93c>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe f903 	bl	8001be0 <HAL_GetTick>
 80039da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	e009      	b.n	80039f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7fe f8fe 	bl	8001be0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e3b1      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCC_OscConfig+0x93c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ef      	beq.n	80039e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCC_OscConfig+0x940>
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCC_OscConfig+0x934>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	e03c      	b.n	8003a98 <HAL_RCC_OscConfig+0x9ac>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	10908120 	.word	0x10908120
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x96a>
 8003a3c:	4bc1      	ldr	r3, [pc, #772]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4ac0      	ldr	r2, [pc, #768]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	4bbe      	ldr	r3, [pc, #760]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4abd      	ldr	r2, [pc, #756]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a4e:	f023 0304 	bic.w	r3, r3, #4
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e020      	b.n	8003a98 <HAL_RCC_OscConfig+0x9ac>
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x994>
 8003a66:	4bb7      	ldr	r3, [pc, #732]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4ab6      	ldr	r2, [pc, #728]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4bb4      	ldr	r3, [pc, #720]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4ab3      	ldr	r2, [pc, #716]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0x9ac>
 8003a80:	4bb0      	ldr	r3, [pc, #704]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4aaf      	ldr	r2, [pc, #700]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	4bad      	ldr	r3, [pc, #692]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4aac      	ldr	r2, [pc, #688]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8081 	beq.w	8003bac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe f899 	bl	8001be0 <HAL_GetTick>
 8003aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe f894 	bl	8001be0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e345      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003af8:	2202      	movs	r2, #2
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b12:	601a      	str	r2, [r3, #0]
  return result;
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_OscConfig+0xa4c>
 8003b32:	4b84      	ldr	r3, [pc, #528]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	e013      	b.n	8003b60 <HAL_RCC_OscConfig+0xa74>
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b40:	2202      	movs	r2, #2
 8003b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f2a3 	rbit	r2, r3
 8003b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b68:	2102      	movs	r1, #2
 8003b6a:	6011      	str	r1, [r2, #0]
 8003b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	fa92 f1a2 	rbit	r1, r2
 8003b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b82:	6011      	str	r1, [r2, #0]
  return result;
 8003b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b88:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	fab2 f282 	clz	r2, r2
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f002 021f 	and.w	r2, r2, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d084      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x9c8>
 8003baa:	e07f      	b.n	8003cac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bac:	f7fe f818 	bl	8001be0 <HAL_GetTick>
 8003bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe f813 	bl	8001be0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e2c4      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c14:	601a      	str	r2, [r3, #0]
  return result;
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0xb4e>
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	e013      	b.n	8003c62 <HAL_RCC_OscConfig+0xb76>
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	fa92 f1a2 	rbit	r1, r2
 8003c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c80:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c84:	6011      	str	r1, [r2, #0]
  return result;
 8003c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c8a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	fab2 f282 	clz	r2, r2
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f002 021f 	and.w	r2, r2, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d184      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8242 	beq.w	8004156 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_RCC_OscConfig+0xc58>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	f000 8213 	beq.w	8004106 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	f040 8162 	bne.w	8003fb6 <HAL_RCC_OscConfig+0xeca>
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d04:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	fa93 f2a3 	rbit	r2, r3
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d16:	601a      	str	r2, [r3, #0]
  return result;
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fd ff52 	bl	8001be0 <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	e00c      	b.n	8003d5c <HAL_RCC_OscConfig+0xc70>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd ff4a 	bl	8001be0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e1fd      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d80:	601a      	str	r2, [r3, #0]
  return result;
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_OscConfig+0xcba>
 8003da0:	4bb0      	ldr	r3, [pc, #704]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e027      	b.n	8003df6 <HAL_RCC_OscConfig+0xd0a>
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fa93 f2a3 	rbit	r2, r3
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	4b9c      	ldr	r3, [pc, #624]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dfe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e02:	6011      	str	r1, [r2, #0]
 8003e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e08:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	fa92 f1a2 	rbit	r1, r2
 8003e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e16:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e1a:	6011      	str	r1, [r2, #0]
  return result;
 8003e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	fab2 f282 	clz	r2, r2
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	f042 0220 	orr.w	r2, r2, #32
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f002 021f 	and.w	r2, r2, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d182      	bne.n	8003d48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	497f      	ldr	r1, [pc, #508]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	fa93 f2a3 	rbit	r2, r3
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e8e:	601a      	str	r2, [r3, #0]
  return result;
 8003e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e94:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2301      	movs	r3, #1
 8003eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fe96 	bl	8001be0 <HAL_GetTick>
 8003eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb8:	e009      	b.n	8003ece <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd fe91 	bl	8001be0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e144      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ef2:	601a      	str	r2, [r3, #0]
  return result;
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe2c>
 8003f12:	4b54      	ldr	r3, [pc, #336]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	e027      	b.n	8003f68 <HAL_RCC_OscConfig+0xe7c>
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f50:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	fa92 f1a2 	rbit	r1, r2
 8003f84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f88:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f8c:	6011      	str	r1, [r2, #0]
  return result;
 8003f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f92:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	fab2 f282 	clz	r2, r2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	f042 0220 	orr.w	r2, r2, #32
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f002 021f 	and.w	r2, r2, #31
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f202 	lsl.w	r2, r1, r2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d082      	beq.n	8003eba <HAL_RCC_OscConfig+0xdce>
 8003fb4:	e0cf      	b.n	8004156 <HAL_RCC_OscConfig+0x106a>
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fda:	601a      	str	r2, [r3, #0]
  return result;
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fe4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fdf0 	bl	8001be0 <HAL_GetTick>
 8004000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004004:	e009      	b.n	800401a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004006:	f7fd fdeb 	bl	8001be0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e09e      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f2a3 	rbit	r2, r3
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800403e:	601a      	str	r2, [r3, #0]
  return result;
 8004040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004044:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004048:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d104      	bne.n	8004068 <HAL_RCC_OscConfig+0xf7c>
 800405e:	4b01      	ldr	r3, [pc, #4]	; (8004064 <HAL_RCC_OscConfig+0xf78>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e029      	b.n	80040b8 <HAL_RCC_OscConfig+0xfcc>
 8004064:	40021000 	.word	0x40021000
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fa93 f2a3 	rbit	r2, r3
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	fa93 f2a3 	rbit	r2, r3
 80040aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_RCC_OscConfig+0x1078>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040bc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	fa92 f1a2 	rbit	r1, r2
 80040d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040d8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040dc:	6011      	str	r1, [r2, #0]
  return result;
 80040de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	fab2 f282 	clz	r2, r2
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	f042 0220 	orr.w	r2, r2, #32
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f002 021f 	and.w	r2, r2, #31
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d180      	bne.n	8004006 <HAL_RCC_OscConfig+0xf1a>
 8004104:	e027      	b.n	8004156 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01e      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_RCC_OscConfig+0x1078>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004122:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004126:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	429a      	cmp	r2, r3
 8004138:	d10b      	bne.n	8004152 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800413a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800413e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b09e      	sub	sp, #120	; 0x78
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e162      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b90      	ldr	r3, [pc, #576]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d910      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 0207 	bic.w	r2, r3, #7
 8004196:	498b      	ldr	r1, [pc, #556]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e14a      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	497f      	ldr	r1, [pc, #508]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80dc 	beq.w	8004394 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d13c      	bne.n	800425e <HAL_RCC_ClockConfig+0xf6>
 80041e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d102      	bne.n	800420e <HAL_RCC_ClockConfig+0xa6>
 8004208:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	e00f      	b.n	800422e <HAL_RCC_ClockConfig+0xc6>
 800420e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004212:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	667b      	str	r3, [r7, #100]	; 0x64
 800421c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004220:	663b      	str	r3, [r7, #96]	; 0x60
 8004222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422a:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004232:	65ba      	str	r2, [r7, #88]	; 0x58
 8004234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004236:	fa92 f2a2 	rbit	r2, r2
 800423a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800423c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800423e:	fab2 f282 	clz	r2, r2
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	f042 0220 	orr.w	r2, r2, #32
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f002 021f 	and.w	r2, r2, #31
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f202 	lsl.w	r2, r1, r2
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d17b      	bne.n	8004352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0f3      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d13c      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x178>
 8004266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <HAL_RCC_ClockConfig+0x128>
 800428a:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	e00f      	b.n	80042b0 <HAL_RCC_ClockConfig+0x148>
 8004290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004294:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	643b      	str	r3, [r7, #64]	; 0x40
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ac:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042b8:	fa92 f2a2 	rbit	r2, r2
 80042bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c0:	fab2 f282 	clz	r2, r2
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f042 0220 	orr.w	r2, r2, #32
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f002 021f 	and.w	r2, r2, #31
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d13a      	bne.n	8004352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b2      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
 80042e0:	2302      	movs	r3, #2
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_RCC_ClockConfig+0x1a0>
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	e00d      	b.n	8004324 <HAL_RCC_ClockConfig+0x1bc>
 8004308:	2302      	movs	r3, #2
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	2302      	movs	r3, #2
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2202      	movs	r2, #2
 8004326:	61ba      	str	r2, [r7, #24]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	fa92 f2a2 	rbit	r2, r2
 800432e:	617a      	str	r2, [r7, #20]
  return result;
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	fab2 f282 	clz	r2, r2
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	f042 0220 	orr.w	r2, r2, #32
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	f002 021f 	and.w	r2, r2, #31
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f202 	lsl.w	r2, r1, r2
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e079      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	491a      	ldr	r1, [pc, #104]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004364:	f7fd fc3c 	bl	8001be0 <HAL_GetTick>
 8004368:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fd fc38 	bl	8001be0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e061      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_ClockConfig+0x260>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d214      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 0207 	bic.w	r2, r3, #7
 80043aa:	4906      	ldr	r1, [pc, #24]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <HAL_RCC_ClockConfig+0x25c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e040      	b.n	8004446 <HAL_RCC_ClockConfig+0x2de>
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCC_ClockConfig+0x2e8>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	491a      	ldr	r1, [pc, #104]	; (8004450 <HAL_RCC_ClockConfig+0x2e8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_RCC_ClockConfig+0x2e8>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4912      	ldr	r1, [pc, #72]	; (8004450 <HAL_RCC_ClockConfig+0x2e8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800440a:	f000 f829 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800440e:	4601      	mov	r1, r0
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCC_ClockConfig+0x2e8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004418:	22f0      	movs	r2, #240	; 0xf0
 800441a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	fa92 f2a2 	rbit	r2, r2
 8004422:	60fa      	str	r2, [r7, #12]
  return result;
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	fab2 f282 	clz	r2, r2
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	40d3      	lsrs	r3, r2
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x2ec>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	fa21 f303 	lsr.w	r3, r1, r3
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_RCC_ClockConfig+0x2f0>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_RCC_ClockConfig+0x2f4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd fb8a 	bl	8001b58 <HAL_InitTick>
  
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3778      	adds	r7, #120	; 0x78
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	0800b734 	.word	0x0800b734
 8004458:	20000000 	.word	0x20000000
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	b08b      	sub	sp, #44	; 0x2c
 8004464:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800447a:	4b29      	ldr	r3, [pc, #164]	; (8004520 <HAL_RCC_GetSysClockFreq+0xc0>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b04      	cmp	r3, #4
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x30>
 800448a:	2b08      	cmp	r3, #8
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x36>
 800448e:	e03c      	b.n	800450a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004492:	623b      	str	r3, [r7, #32]
      break;
 8004494:	e03c      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800449c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	fa92 f2a2 	rbit	r2, r2
 80044a8:	607a      	str	r2, [r7, #4]
  return result;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	fab2 f282 	clz	r2, r2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	40d3      	lsrs	r3, r2
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	220f      	movs	r2, #15
 80044c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	fa92 f2a2 	rbit	r2, r2
 80044cc:	60fa      	str	r2, [r7, #12]
  return result;
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	40d3      	lsrs	r3, r2
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <HAL_RCC_GetSysClockFreq+0xcc>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044e8:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	e004      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	623b      	str	r3, [r7, #32]
      break;
 8004508:	e002      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_GetSysClockFreq+0xc4>)
 800450c:	623b      	str	r3, [r7, #32]
      break;
 800450e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004510:	6a3b      	ldr	r3, [r7, #32]
}
 8004512:	4618      	mov	r0, r3
 8004514:	372c      	adds	r7, #44	; 0x2c
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	007a1200 	.word	0x007a1200
 8004528:	0800b74c 	.word	0x0800b74c
 800452c:	0800b75c 	.word	0x0800b75c
 8004530:	003d0900 	.word	0x003d0900

08004534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004552:	f7ff ffef 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004556:	4601      	mov	r1, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004560:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	fa92 f2a2 	rbit	r2, r2
 800456c:	603a      	str	r2, [r7, #0]
  return result;
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	fab2 f282 	clz	r2, r2
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	40d3      	lsrs	r3, r2
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <HAL_RCC_GetPCLK1Freq+0x40>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800b744 	.word	0x0800b744

08004590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004596:	f7ff ffcd 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	fa92 f2a2 	rbit	r2, r2
 80045b0:	603a      	str	r2, [r7, #0]
  return result;
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	fab2 f282 	clz	r2, r2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	40d3      	lsrs	r3, r2
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800b744 	.word	0x0800b744

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	; 0x48
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80d4 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10e      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460e:	61d3      	str	r3, [r2, #28]
 8004610:	4b48      	ldr	r3, [pc, #288]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	4b45      	ldr	r3, [pc, #276]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d118      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a41      	ldr	r2, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fd fad1 	bl	8001be0 <HAL_GetTick>
 800463e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7fd facd 	bl	8001be0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b64      	cmp	r3, #100	; 0x64
 800464e:	d901      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e169      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004654:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004660:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8084 	beq.w	800477a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800467c:	429a      	cmp	r2, r3
 800467e:	d07c      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	461a      	mov	r2, r3
 80046aa:	2301      	movs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e2:	f7fd fa7d 	bl	8001be0 <HAL_GetTick>
 80046e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd fa79 	bl	8001be0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e113      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004700:	2302      	movs	r3, #2
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
 800470c:	2302      	movs	r3, #2
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	61fb      	str	r3, [r7, #28]
  return result;
 8004718:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d108      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800472e:	4b01      	ldr	r3, [pc, #4]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	e00d      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
 800473c:	10908100 	.word	0x10908100
 8004740:	2302      	movs	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2202      	movs	r2, #2
 8004752:	613a      	str	r2, [r7, #16]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	fa92 f2a2 	rbit	r2, r2
 800475a:	60fa      	str	r2, [r7, #12]
  return result;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	fab2 f282 	clz	r2, r2
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f002 021f 	and.w	r2, r2, #31
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f202 	lsl.w	r2, r1, r2
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0b7      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	496a      	ldr	r1, [pc, #424]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800478c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ac:	4b60      	ldr	r3, [pc, #384]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f023 0203 	bic.w	r2, r3, #3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	495d      	ldr	r1, [pc, #372]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ca:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	4956      	ldr	r1, [pc, #344]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047e8:	4b51      	ldr	r3, [pc, #324]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	494e      	ldr	r1, [pc, #312]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004806:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f023 0210 	bic.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4947      	ldr	r1, [pc, #284]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	493f      	ldr	r1, [pc, #252]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f023 0220 	bic.w	r2, r3, #32
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4938      	ldr	r1, [pc, #224]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004850:	4313      	orrs	r3, r2
 8004852:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004860:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	4930      	ldr	r1, [pc, #192]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	4929      	ldr	r1, [pc, #164]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4921      	ldr	r1, [pc, #132]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	491a      	ldr	r1, [pc, #104]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	4912      	ldr	r1, [pc, #72]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	490b      	ldr	r1, [pc, #44]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3748      	adds	r7, #72	; 0x48
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e049      	b.n	80049da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc ff38 	bl	80017d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fa4a 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x24>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e03c      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d109      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x3e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e02f      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x58>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e022      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d109      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x72>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e015      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start+0x8c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e008      	b.n	8004a82 <HAL_TIM_PWM_Start+0x9e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e097      	b.n	8004bba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xb6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	e023      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xc6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xd6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xe6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xf6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xfe>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fcf4 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <HAL_TIM_PWM_Start+0x1e0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x13e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <HAL_TIM_PWM_Start+0x1e4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x13e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <HAL_TIM_PWM_Start+0x1e8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x13e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <HAL_TIM_PWM_Start+0x1ec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x13e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <HAL_TIM_PWM_Start+0x1f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x142>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_TIM_PWM_Start+0x144>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_TIM_PWM_Start+0x1e0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIM_PWM_Start+0x194>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIM_PWM_Start+0x194>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIM_PWM_Start+0x194>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <HAL_TIM_PWM_Start+0x1f8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIM_PWM_Start+0x194>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_TIM_PWM_Start+0x1e4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_PWM_Start+0x194>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <HAL_TIM_PWM_Start+0x1e8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d115      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d015      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x1d2>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d011      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e008      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	00010007 	.word	0x00010007

08004be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e0ff      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b14      	cmp	r3, #20
 8004c0e:	f200 80f0 	bhi.w	8004df2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c6d 	.word	0x08004c6d
 8004c1c:	08004df3 	.word	0x08004df3
 8004c20:	08004df3 	.word	0x08004df3
 8004c24:	08004df3 	.word	0x08004df3
 8004c28:	08004cad 	.word	0x08004cad
 8004c2c:	08004df3 	.word	0x08004df3
 8004c30:	08004df3 	.word	0x08004df3
 8004c34:	08004df3 	.word	0x08004df3
 8004c38:	08004cef 	.word	0x08004cef
 8004c3c:	08004df3 	.word	0x08004df3
 8004c40:	08004df3 	.word	0x08004df3
 8004c44:	08004df3 	.word	0x08004df3
 8004c48:	08004d2f 	.word	0x08004d2f
 8004c4c:	08004df3 	.word	0x08004df3
 8004c50:	08004df3 	.word	0x08004df3
 8004c54:	08004df3 	.word	0x08004df3
 8004c58:	08004d71 	.word	0x08004d71
 8004c5c:	08004df3 	.word	0x08004df3
 8004c60:	08004df3 	.word	0x08004df3
 8004c64:	08004df3 	.word	0x08004df3
 8004c68:	08004db1 	.word	0x08004db1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f95a 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6999      	ldr	r1, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	619a      	str	r2, [r3, #24]
      break;
 8004caa:	e0a5      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f9ca 	bl	800504c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      break;
 8004cec:	e084      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa33 	bl	8005160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0204 	bic.w	r2, r2, #4
 8004d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69d9      	ldr	r1, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
      break;
 8004d2c:	e064      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fa9b 	bl	8005270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	61da      	str	r2, [r3, #28]
      break;
 8004d6e:	e043      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fae4 	bl	8005344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dae:	e023      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fb28 	bl	800540c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
      break;
 8004df6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3c      	ldr	r2, [pc, #240]	; (8004f10 <TIM_Base_SetConfig+0x104>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <TIM_Base_SetConfig+0x108>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <TIM_Base_SetConfig+0x10c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a37      	ldr	r2, [pc, #220]	; (8004f1c <TIM_Base_SetConfig+0x110>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2d      	ldr	r2, [pc, #180]	; (8004f10 <TIM_Base_SetConfig+0x104>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01b      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d017      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <TIM_Base_SetConfig+0x108>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a29      	ldr	r2, [pc, #164]	; (8004f18 <TIM_Base_SetConfig+0x10c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <TIM_Base_SetConfig+0x110>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <TIM_Base_SetConfig+0x118>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a25      	ldr	r2, [pc, #148]	; (8004f28 <TIM_Base_SetConfig+0x11c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <TIM_Base_SetConfig+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0xe8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <TIM_Base_SetConfig+0x110>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0xe8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a10      	ldr	r2, [pc, #64]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0xe8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <TIM_Base_SetConfig+0x118>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0xe8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <TIM_Base_SetConfig+0x11c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <TIM_OC1_SetConfig+0x10c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00f      	beq.n	8004fac <TIM_OC1_SetConfig+0x80>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a2b      	ldr	r2, [pc, #172]	; (800503c <TIM_OC1_SetConfig+0x110>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_OC1_SetConfig+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <TIM_OC1_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_OC1_SetConfig+0x80>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <TIM_OC1_SetConfig+0x118>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC1_SetConfig+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <TIM_OC1_SetConfig+0x11c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <TIM_OC1_SetConfig+0x10c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_OC1_SetConfig+0xc2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	; (800503c <TIM_OC1_SetConfig+0x110>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_OC1_SetConfig+0xc2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <TIM_OC1_SetConfig+0x114>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_OC1_SetConfig+0xc2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <TIM_OC1_SetConfig+0x118>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC1_SetConfig+0xc2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a17      	ldr	r2, [pc, #92]	; (8005048 <TIM_OC1_SetConfig+0x11c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d111      	bne.n	8005012 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40013400 	.word	0x40013400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800

0800504c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0210 	bic.w	r2, r3, #16
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a28      	ldr	r2, [pc, #160]	; (800514c <TIM_OC2_SetConfig+0x100>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0x6c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a27      	ldr	r2, [pc, #156]	; (8005150 <TIM_OC2_SetConfig+0x104>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10d      	bne.n	80050d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	; (800514c <TIM_OC2_SetConfig+0x100>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00f      	beq.n	80050fc <TIM_OC2_SetConfig+0xb0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <TIM_OC2_SetConfig+0x104>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_OC2_SetConfig+0xb0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <TIM_OC2_SetConfig+0x108>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_OC2_SetConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <TIM_OC2_SetConfig+0x10c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC2_SetConfig+0xb0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a19      	ldr	r2, [pc, #100]	; (800515c <TIM_OC2_SetConfig+0x110>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d113      	bne.n	8005124 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005102:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800

08005160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a27      	ldr	r2, [pc, #156]	; (800525c <TIM_OC3_SetConfig+0xfc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC3_SetConfig+0x6a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a26      	ldr	r2, [pc, #152]	; (8005260 <TIM_OC3_SetConfig+0x100>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10d      	bne.n	80051e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <TIM_OC3_SetConfig+0xfc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00f      	beq.n	800520e <TIM_OC3_SetConfig+0xae>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <TIM_OC3_SetConfig+0x100>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_OC3_SetConfig+0xae>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_OC3_SetConfig+0x104>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_OC3_SetConfig+0xae>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_OC3_SetConfig+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC3_SetConfig+0xae>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <TIM_OC3_SetConfig+0x10c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d113      	bne.n	8005236 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	621a      	str	r2, [r3, #32]
}
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40013400 	.word	0x40013400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a18      	ldr	r2, [pc, #96]	; (8005330 <TIM_OC4_SetConfig+0xc0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_OC4_SetConfig+0x84>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a17      	ldr	r2, [pc, #92]	; (8005334 <TIM_OC4_SetConfig+0xc4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_OC4_SetConfig+0x84>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <TIM_OC4_SetConfig+0xc8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_OC4_SetConfig+0x84>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <TIM_OC4_SetConfig+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC4_SetConfig+0x84>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <TIM_OC4_SetConfig+0xd0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d109      	bne.n	8005308 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <TIM_OC5_SetConfig+0xb4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00f      	beq.n	80053be <TIM_OC5_SetConfig+0x7a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <TIM_OC5_SetConfig+0xb8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_OC5_SetConfig+0x7a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a15      	ldr	r2, [pc, #84]	; (8005400 <TIM_OC5_SetConfig+0xbc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_OC5_SetConfig+0x7a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a14      	ldr	r2, [pc, #80]	; (8005404 <TIM_OC5_SetConfig+0xc0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_OC5_SetConfig+0x7a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a13      	ldr	r2, [pc, #76]	; (8005408 <TIM_OC5_SetConfig+0xc4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d109      	bne.n	80053d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	051b      	lsls	r3, r3, #20
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <TIM_OC6_SetConfig+0xb8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <TIM_OC6_SetConfig+0x7c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <TIM_OC6_SetConfig+0xbc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_OC6_SetConfig+0x7c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC6_SetConfig+0xc0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_OC6_SetConfig+0x7c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC6_SetConfig+0xc4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_OC6_SetConfig+0x7c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC6_SetConfig+0xc8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d109      	bne.n	800549c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e063      	b.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d018      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d013      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a12      	ldr	r2, [pc, #72]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e040      	b.n	80056b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc f97a 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc12 	bl	8005e8c <UART_SetConfig>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e022      	b.n	80056b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fddc 	bl	8006238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fe63 	bl	800637c <UART_CheckIdleState>
 80056b6:	4603      	mov	r3, r0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d13d      	bne.n	8005752 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_UART_Receive_IT+0x22>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e036      	b.n	8005754 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UART_Receive_IT+0x34>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e02f      	b.n	8005754 <HAL_UART_Receive_IT+0x94>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d018      	beq.n	8005742 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	623b      	str	r3, [r7, #32]
 8005730:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	61bb      	str	r3, [r7, #24]
   return(result);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	461a      	mov	r2, r3
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 ff25 	bl	8006598 <UART_Start_Receive_IT>
 800574e:	4603      	mov	r3, r0
 8005750:	e000      	b.n	8005754 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576e:	2b20      	cmp	r3, #32
 8005770:	d178      	bne.n	8005864 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_UART_Transmit_DMA+0x22>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e071      	b.n	8005866 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit_DMA+0x34>
 800578c:	2302      	movs	r3, #2
 800578e:	e06a      	b.n	8005866 <HAL_UART_Transmit_DMA+0x10a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02b      	beq.n	800581c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	4a29      	ldr	r2, [pc, #164]	; (8005870 <HAL_UART_Transmit_DMA+0x114>)
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d0:	4a28      	ldr	r2, [pc, #160]	; (8005874 <HAL_UART_Transmit_DMA+0x118>)
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d8:	4a27      	ldr	r2, [pc, #156]	; (8005878 <HAL_UART_Transmit_DMA+0x11c>)
 80057da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e0:	2200      	movs	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ec:	4619      	mov	r1, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3328      	adds	r3, #40	; 0x28
 80057f4:	461a      	mov	r2, r3
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	f7fd f8ea 	bl	80029d0 <HAL_DMA_Start_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2210      	movs	r2, #16
 8005806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e024      	b.n	8005866 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2240      	movs	r2, #64	; 0x40
 8005822:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	613b      	str	r3, [r7, #16]
   return(result);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	623a      	str	r2, [r7, #32]
 800584e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	61bb      	str	r3, [r7, #24]
   return(result);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e5      	bne.n	800582c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3728      	adds	r7, #40	; 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	080067db 	.word	0x080067db
 8005874:	0800686f 	.word	0x0800686f
 8005878:	0800688b 	.word	0x0800688b

0800587c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b0ba      	sub	sp, #232	; 0xe8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80058aa:	4013      	ands	r3, r2
 80058ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d115      	bne.n	80058e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00f      	beq.n	80058e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 82a3 	beq.w	8005e20 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
      }
      return;
 80058e2:	e29d      	b.n	8005e20 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8117 	beq.w	8005b1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058fe:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_UART_IRQHandler+0x298>)
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 810a 	beq.w	8005b1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d011      	beq.n	8005938 <HAL_UART_IRQHandler+0xbc>
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2201      	movs	r2, #1
 8005926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d011      	beq.n	8005968 <HAL_UART_IRQHandler+0xec>
 8005944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2202      	movs	r2, #2
 8005956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d011      	beq.n	8005998 <HAL_UART_IRQHandler+0x11c>
 8005974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2204      	movs	r2, #4
 8005986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598e:	f043 0202 	orr.w	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ca:	f043 0208 	orr.w	r2, r3, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <HAL_UART_IRQHandler+0x18a>
 80059e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8209 	beq.w	8005e24 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d04f      	beq.n	8005afe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fe58 	bl	8006714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d141      	bne.n	8005af6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d9      	bne.n	8005a72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <HAL_UART_IRQHandler+0x29c>)
 8005acc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fd f814 	bl	8002b00 <HAL_DMA_Abort_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d017      	beq.n	8005b0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e00f      	b.n	8005b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9b6 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	e00b      	b.n	8005b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9b2 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e007      	b.n	8005b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9ae 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b0c:	e18a      	b.n	8005e24 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	bf00      	nop
    return;
 8005b10:	e188      	b.n	8005e24 <HAL_UART_IRQHandler+0x5a8>
 8005b12:	bf00      	nop
 8005b14:	04000120 	.word	0x04000120
 8005b18:	08006907 	.word	0x08006907

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 8143 	bne.w	8005dac <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 813c 	beq.w	8005dac <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8135 	beq.w	8005dac <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2210      	movs	r2, #16
 8005b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	f040 80b1 	bne.w	8005cbc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 815c 	beq.w	8005e28 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	f080 8154 	bcs.w	8005e28 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	f000 8085 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bc4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1da      	bne.n	8005b96 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e1      	bne.n	8005be0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e3      	bne.n	8005c1c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	f023 0310 	bic.w	r3, r3, #16
 8005c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e4      	bne.n	8005c60 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fc fef7 	bl	8002a8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f8dd 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cba:	e0b5      	b.n	8005e28 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a7 	beq.w	8005e2c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80a2 	beq.w	8005e2c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e4      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d42:	633a      	str	r2, [r7, #48]	; 0x30
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e3      	bne.n	8005d1e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	617b      	str	r3, [r7, #20]
   return(result);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e4      	bne.n	8005d68 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f865 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005daa:	e03f      	b.n	8005e2c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x55a>
 8005db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 ff35 	bl	8006c3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dd4:	e02d      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00e      	beq.n	8005e00 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01c      	beq.n	8005e30 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
    }
    return;
 8005dfe:	e017      	b.n	8005e30 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d012      	beq.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00c      	beq.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd8a 	bl	8006932 <UART_EndTransmit_IT>
    return;
 8005e1e:	e008      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e20:	bf00      	nop
 8005e22:	e006      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e24:	bf00      	nop
 8005e26:	e004      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e28:	bf00      	nop
 8005e2a:	e002      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e2c:	bf00      	nop
 8005e2e:	e000      	b.n	8005e32 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e30:	bf00      	nop
  }

}
 8005e32:	37e8      	adds	r7, #232	; 0xe8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005eba:	f023 030c 	bic.w	r3, r3, #12
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4aa8      	ldr	r2, [pc, #672]	; (80061a8 <UART_SetConfig+0x31c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d120      	bne.n	8005f4e <UART_SetConfig+0xc2>
 8005f0c:	4ba7      	ldr	r3, [pc, #668]	; (80061ac <UART_SetConfig+0x320>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d817      	bhi.n	8005f48 <UART_SetConfig+0xbc>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x94>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f43 	.word	0x08005f43
 8005f2c:	08005f37 	.word	0x08005f37
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e0b5      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f36:	2302      	movs	r3, #2
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e0b2      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e0af      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f42:	2308      	movs	r3, #8
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e0ac      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e0a9      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a97      	ldr	r2, [pc, #604]	; (80061b0 <UART_SetConfig+0x324>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d124      	bne.n	8005fa2 <UART_SetConfig+0x116>
 8005f58:	4b94      	ldr	r3, [pc, #592]	; (80061ac <UART_SetConfig+0x320>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f64:	d011      	beq.n	8005f8a <UART_SetConfig+0xfe>
 8005f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f6a:	d817      	bhi.n	8005f9c <UART_SetConfig+0x110>
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f70:	d011      	beq.n	8005f96 <UART_SetConfig+0x10a>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f76:	d811      	bhi.n	8005f9c <UART_SetConfig+0x110>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <UART_SetConfig+0xf8>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d006      	beq.n	8005f90 <UART_SetConfig+0x104>
 8005f82:	e00b      	b.n	8005f9c <UART_SetConfig+0x110>
 8005f84:	2300      	movs	r3, #0
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e08b      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e088      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f90:	2304      	movs	r3, #4
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e085      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f96:	2308      	movs	r3, #8
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e082      	b.n	80060a2 <UART_SetConfig+0x216>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e07f      	b.n	80060a2 <UART_SetConfig+0x216>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a83      	ldr	r2, [pc, #524]	; (80061b4 <UART_SetConfig+0x328>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d124      	bne.n	8005ff6 <UART_SetConfig+0x16a>
 8005fac:	4b7f      	ldr	r3, [pc, #508]	; (80061ac <UART_SetConfig+0x320>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fb8:	d011      	beq.n	8005fde <UART_SetConfig+0x152>
 8005fba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fbe:	d817      	bhi.n	8005ff0 <UART_SetConfig+0x164>
 8005fc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fc4:	d011      	beq.n	8005fea <UART_SetConfig+0x15e>
 8005fc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fca:	d811      	bhi.n	8005ff0 <UART_SetConfig+0x164>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <UART_SetConfig+0x14c>
 8005fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd4:	d006      	beq.n	8005fe4 <UART_SetConfig+0x158>
 8005fd6:	e00b      	b.n	8005ff0 <UART_SetConfig+0x164>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e061      	b.n	80060a2 <UART_SetConfig+0x216>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e05e      	b.n	80060a2 <UART_SetConfig+0x216>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e05b      	b.n	80060a2 <UART_SetConfig+0x216>
 8005fea:	2308      	movs	r3, #8
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e058      	b.n	80060a2 <UART_SetConfig+0x216>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e055      	b.n	80060a2 <UART_SetConfig+0x216>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6f      	ldr	r2, [pc, #444]	; (80061b8 <UART_SetConfig+0x32c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d124      	bne.n	800604a <UART_SetConfig+0x1be>
 8006000:	4b6a      	ldr	r3, [pc, #424]	; (80061ac <UART_SetConfig+0x320>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800600c:	d011      	beq.n	8006032 <UART_SetConfig+0x1a6>
 800600e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006012:	d817      	bhi.n	8006044 <UART_SetConfig+0x1b8>
 8006014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006018:	d011      	beq.n	800603e <UART_SetConfig+0x1b2>
 800601a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601e:	d811      	bhi.n	8006044 <UART_SetConfig+0x1b8>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <UART_SetConfig+0x1a0>
 8006024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006028:	d006      	beq.n	8006038 <UART_SetConfig+0x1ac>
 800602a:	e00b      	b.n	8006044 <UART_SetConfig+0x1b8>
 800602c:	2300      	movs	r3, #0
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e037      	b.n	80060a2 <UART_SetConfig+0x216>
 8006032:	2302      	movs	r3, #2
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e034      	b.n	80060a2 <UART_SetConfig+0x216>
 8006038:	2304      	movs	r3, #4
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e031      	b.n	80060a2 <UART_SetConfig+0x216>
 800603e:	2308      	movs	r3, #8
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e02e      	b.n	80060a2 <UART_SetConfig+0x216>
 8006044:	2310      	movs	r3, #16
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e02b      	b.n	80060a2 <UART_SetConfig+0x216>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a5b      	ldr	r2, [pc, #364]	; (80061bc <UART_SetConfig+0x330>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d124      	bne.n	800609e <UART_SetConfig+0x212>
 8006054:	4b55      	ldr	r3, [pc, #340]	; (80061ac <UART_SetConfig+0x320>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800605c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006060:	d011      	beq.n	8006086 <UART_SetConfig+0x1fa>
 8006062:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006066:	d817      	bhi.n	8006098 <UART_SetConfig+0x20c>
 8006068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606c:	d011      	beq.n	8006092 <UART_SetConfig+0x206>
 800606e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006072:	d811      	bhi.n	8006098 <UART_SetConfig+0x20c>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <UART_SetConfig+0x1f4>
 8006078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607c:	d006      	beq.n	800608c <UART_SetConfig+0x200>
 800607e:	e00b      	b.n	8006098 <UART_SetConfig+0x20c>
 8006080:	2300      	movs	r3, #0
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e00d      	b.n	80060a2 <UART_SetConfig+0x216>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e00a      	b.n	80060a2 <UART_SetConfig+0x216>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e007      	b.n	80060a2 <UART_SetConfig+0x216>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e004      	b.n	80060a2 <UART_SetConfig+0x216>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e001      	b.n	80060a2 <UART_SetConfig+0x216>
 800609e:	2310      	movs	r3, #16
 80060a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060aa:	d15c      	bne.n	8006166 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80060ac:	7ffb      	ldrb	r3, [r7, #31]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d827      	bhi.n	8006102 <UART_SetConfig+0x276>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x22c>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	08006103 	.word	0x08006103
 80060d0:	08006103 	.word	0x08006103
 80060d4:	08006103 	.word	0x08006103
 80060d8:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7fe fa36 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 80060e0:	61b8      	str	r0, [r7, #24]
        break;
 80060e2:	e013      	b.n	800610c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe fa54 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 80060e8:	61b8      	str	r0, [r7, #24]
        break;
 80060ea:	e00f      	b.n	800610c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <UART_SetConfig+0x334>)
 80060ee:	61bb      	str	r3, [r7, #24]
        break;
 80060f0:	e00c      	b.n	800610c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe f9b5 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80060f6:	61b8      	str	r0, [r7, #24]
        break;
 80060f8:	e008      	b.n	800610c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e004      	b.n	800610c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	77bb      	strb	r3, [r7, #30]
        break;
 800610a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8084 	beq.w	800621c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	005a      	lsls	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b0f      	cmp	r3, #15
 8006130:	d916      	bls.n	8006160 <UART_SetConfig+0x2d4>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d212      	bcs.n	8006160 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f023 030f 	bic.w	r3, r3, #15
 8006142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	b29a      	uxth	r2, r3
 8006150:	89fb      	ldrh	r3, [r7, #14]
 8006152:	4313      	orrs	r3, r2
 8006154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	89fa      	ldrh	r2, [r7, #14]
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	e05d      	b.n	800621c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	77bb      	strb	r3, [r7, #30]
 8006164:	e05a      	b.n	800621c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d836      	bhi.n	80061da <UART_SetConfig+0x34e>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x2e8>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006199 	.word	0x08006199
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061c5 	.word	0x080061c5
 8006180:	080061db 	.word	0x080061db
 8006184:	080061cb 	.word	0x080061cb
 8006188:	080061db 	.word	0x080061db
 800618c:	080061db 	.word	0x080061db
 8006190:	080061db 	.word	0x080061db
 8006194:	080061d3 	.word	0x080061d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fe f9d8 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 800619c:	61b8      	str	r0, [r7, #24]
        break;
 800619e:	e021      	b.n	80061e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a0:	f7fe f9f6 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 80061a4:	61b8      	str	r0, [r7, #24]
        break;
 80061a6:	e01d      	b.n	80061e4 <UART_SetConfig+0x358>
 80061a8:	40013800 	.word	0x40013800
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40004400 	.word	0x40004400
 80061b4:	40004800 	.word	0x40004800
 80061b8:	40004c00 	.word	0x40004c00
 80061bc:	40005000 	.word	0x40005000
 80061c0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c4:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <UART_SetConfig+0x3a8>)
 80061c6:	61bb      	str	r3, [r7, #24]
        break;
 80061c8:	e00c      	b.n	80061e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ca:	f7fe f949 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80061ce:	61b8      	str	r0, [r7, #24]
        break;
 80061d0:	e008      	b.n	80061e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d6:	61bb      	str	r3, [r7, #24]
        break;
 80061d8:	e004      	b.n	80061e4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	77bb      	strb	r3, [r7, #30]
        break;
 80061e2:	bf00      	nop
    }

    if (pclk != 0U)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d018      	beq.n	800621c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	085a      	lsrs	r2, r3, #1
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	441a      	add	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d908      	bls.n	8006218 <UART_SetConfig+0x38c>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620c:	d204      	bcs.n	8006218 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e001      	b.n	800621c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006228:	7fbb      	ldrb	r3, [r7, #30]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	007a1200 	.word	0x007a1200

08006238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006336:	d10a      	bne.n	800634e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800638c:	f7fb fc28 	bl	8001be0 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10e      	bne.n	80063be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f82d 	bl	800640e <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e023      	b.n	8006406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d10e      	bne.n	80063ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f817 	bl	800640e <UART_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e00d      	b.n	8006406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b09c      	sub	sp, #112	; 0x70
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4613      	mov	r3, r2
 800641c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641e:	e0a5      	b.n	800656c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	f000 80a1 	beq.w	800656c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7fb fbd9 	bl	8001be0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <UART_WaitOnFlagUntilTimeout+0x32>
 800643a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643c:	2b00      	cmp	r3, #0
 800643e:	d13e      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800644e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006450:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006454:	667b      	str	r3, [r7, #100]	; 0x64
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800645e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006460:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006464:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800646c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	663b      	str	r3, [r7, #96]	; 0x60
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006492:	64ba      	str	r2, [r7, #72]	; 0x48
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e5      	bne.n	8006472 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e067      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d04f      	beq.n	800656c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d147      	bne.n	800656c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	613b      	str	r3, [r7, #16]
   return(result);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006538:	623a      	str	r2, [r7, #32]
 800653a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	61bb      	str	r3, [r7, #24]
   return(result);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e010      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4013      	ands	r3, r2
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	bf0c      	ite	eq
 800657c:	2301      	moveq	r3, #1
 800657e:	2300      	movne	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	429a      	cmp	r2, r3
 8006588:	f43f af4a 	beq.w	8006420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3770      	adds	r7, #112	; 0x70
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006598:	b480      	push	{r7}
 800659a:	b091      	sub	sp, #68	; 0x44
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d10e      	bne.n	80065ea <UART_Start_Receive_IT+0x52>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <UART_Start_Receive_IT+0x48>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065de:	e01a      	b.n	8006616 <UART_Start_Receive_IT+0x7e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	22ff      	movs	r2, #255	; 0xff
 80065e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e8:	e015      	b.n	8006616 <UART_Start_Receive_IT+0x7e>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <UART_Start_Receive_IT+0x76>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <UART_Start_Receive_IT+0x6c>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	22ff      	movs	r2, #255	; 0xff
 80065fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006602:	e008      	b.n	8006616 <UART_Start_Receive_IT+0x7e>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	227f      	movs	r2, #127	; 0x7f
 8006608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800660c:	e003      	b.n	8006616 <UART_Start_Receive_IT+0x7e>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2222      	movs	r2, #34	; 0x22
 8006622:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006644:	637a      	str	r2, [r7, #52]	; 0x34
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800664a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006660:	d107      	bne.n	8006672 <UART_Start_Receive_IT+0xda>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <UART_Start_Receive_IT+0x128>)
 800666e:	665a      	str	r2, [r3, #100]	; 0x64
 8006670:	e002      	b.n	8006678 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <UART_Start_Receive_IT+0x12c>)
 8006676:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	613b      	str	r3, [r7, #16]
   return(result);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	69f9      	ldr	r1, [r7, #28]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3744      	adds	r7, #68	; 0x44
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	08006ae3 	.word	0x08006ae3
 80066c4:	08006987 	.word	0x08006987

080066c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	; 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	613b      	str	r3, [r7, #16]
   return(result);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006708:	bf00      	nop
 800670a:	3724      	adds	r7, #36	; 0x24
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b095      	sub	sp, #84	; 0x54
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673a:	643b      	str	r3, [r7, #64]	; 0x40
 800673c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e6      	bne.n	800671c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	61fb      	str	r3, [r7, #28]
   return(result);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	2b01      	cmp	r3, #1
 8006788:	d118      	bne.n	80067bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	60bb      	str	r3, [r7, #8]
   return(result);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0310 	bic.w	r3, r3, #16
 800679e:	647b      	str	r3, [r7, #68]	; 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e6      	bne.n	800678a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067ce:	bf00      	nop
 80067d0:	3754      	adds	r7, #84	; 0x54
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b090      	sub	sp, #64	; 0x40
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d037      	beq.n	8006860 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	623b      	str	r3, [r7, #32]
   return(result);
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006818:	633a      	str	r2, [r7, #48]	; 0x30
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800681e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	60fb      	str	r3, [r7, #12]
   return(result);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	617b      	str	r3, [r7, #20]
   return(result);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800685e:	e002      	b.n	8006866 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006860:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006862:	f7ff fae9 	bl	8005e38 <HAL_UART_TxCpltCallback>
}
 8006866:	bf00      	nop
 8006868:	3740      	adds	r7, #64	; 0x40
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fae5 	bl	8005e4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d109      	bne.n	80068c6 <UART_DMAError+0x3c>
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b21      	cmp	r3, #33	; 0x21
 80068b6:	d106      	bne.n	80068c6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f7ff ff01 	bl	80066c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d109      	bne.n	80068e8 <UART_DMAError+0x5e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b22      	cmp	r3, #34	; 0x22
 80068d8:	d106      	bne.n	80068e8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80068e2:	6978      	ldr	r0, [r7, #20]
 80068e4:	f7ff ff16 	bl	8006714 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ee:	f043 0210 	orr.w	r2, r3, #16
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f7ff fab1 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fa9b 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	60bb      	str	r3, [r7, #8]
   return(result);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6979      	ldr	r1, [r7, #20]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	613b      	str	r3, [r7, #16]
   return(result);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e6      	bne.n	800693a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fa5d 	bl	8005e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697e:	bf00      	nop
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b096      	sub	sp, #88	; 0x58
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006994:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699c:	2b22      	cmp	r3, #34	; 0x22
 800699e:	f040 8094 	bne.w	8006aca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069b0:	b2d9      	uxtb	r1, r3
 80069b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	400a      	ands	r2, r1
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d177      	bne.n	8006ada <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a08:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3308      	adds	r3, #8
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d12e      	bne.n	8006ac2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0310 	bic.w	r3, r3, #16
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	69b9      	ldr	r1, [r7, #24]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	617b      	str	r3, [r7, #20]
   return(result);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d103      	bne.n	8006ab2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2210      	movs	r2, #16
 8006ab0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff f9da 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac0:	e00b      	b.n	8006ada <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa fac2 	bl	800104c <HAL_UART_RxCpltCallback>
}
 8006ac8:	e007      	b.n	8006ada <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	619a      	str	r2, [r3, #24]
}
 8006ada:	bf00      	nop
 8006adc:	3758      	adds	r7, #88	; 0x58
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b096      	sub	sp, #88	; 0x58
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af8:	2b22      	cmp	r3, #34	; 0x22
 8006afa:	f040 8094 	bne.w	8006c26 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b16:	4013      	ands	r3, r2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d177      	bne.n	8006c36 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	643b      	str	r3, [r7, #64]	; 0x40
 8006b66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d12e      	bne.n	8006c1e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f023 0310 	bic.w	r3, r3, #16
 8006bda:	647b      	str	r3, [r7, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d103      	bne.n	8006c0e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f92c 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c1c:	e00b      	b.n	8006c36 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fa fa14 	bl	800104c <HAL_UART_RxCpltCallback>
}
 8006c24:	e007      	b.n	8006c36 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0208 	orr.w	r2, r2, #8
 8006c34:	619a      	str	r2, [r3, #24]
}
 8006c36:	bf00      	nop
 8006c38:	3758      	adds	r7, #88	; 0x58
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <__errno>:
 8006c54:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <__errno+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	2000000c 	.word	0x2000000c

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4d0d      	ldr	r5, [pc, #52]	; (8006c98 <__libc_init_array+0x38>)
 8006c64:	4c0d      	ldr	r4, [pc, #52]	; (8006c9c <__libc_init_array+0x3c>)
 8006c66:	1b64      	subs	r4, r4, r5
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	42a6      	cmp	r6, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	4d0b      	ldr	r5, [pc, #44]	; (8006ca0 <__libc_init_array+0x40>)
 8006c72:	4c0c      	ldr	r4, [pc, #48]	; (8006ca4 <__libc_init_array+0x44>)
 8006c74:	f004 fd1e 	bl	800b6b4 <_init>
 8006c78:	1b64      	subs	r4, r4, r5
 8006c7a:	10a4      	asrs	r4, r4, #2
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	42a6      	cmp	r6, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c88:	4798      	blx	r3
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c92:	4798      	blx	r3
 8006c94:	3601      	adds	r6, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	0800bc1c 	.word	0x0800bc1c
 8006c9c:	0800bc1c 	.word	0x0800bc1c
 8006ca0:	0800bc1c 	.word	0x0800bc1c
 8006ca4:	0800bc20 	.word	0x0800bc20

08006ca8 <memset>:
 8006ca8:	4402      	add	r2, r0
 8006caa:	4603      	mov	r3, r0
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <memset+0xa>
 8006cb0:	4770      	bx	lr
 8006cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb6:	e7f9      	b.n	8006cac <memset+0x4>

08006cb8 <__cvt>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	ec55 4b10 	vmov	r4, r5, d0
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	460e      	mov	r6, r1
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	bfbb      	ittet	lt
 8006cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cce:	461d      	movlt	r5, r3
 8006cd0:	2300      	movge	r3, #0
 8006cd2:	232d      	movlt	r3, #45	; 0x2d
 8006cd4:	700b      	strb	r3, [r1, #0]
 8006cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cdc:	4691      	mov	r9, r2
 8006cde:	f023 0820 	bic.w	r8, r3, #32
 8006ce2:	bfbc      	itt	lt
 8006ce4:	4622      	movlt	r2, r4
 8006ce6:	4614      	movlt	r4, r2
 8006ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cec:	d005      	beq.n	8006cfa <__cvt+0x42>
 8006cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cf2:	d100      	bne.n	8006cf6 <__cvt+0x3e>
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	e000      	b.n	8006cfc <__cvt+0x44>
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	ab03      	add	r3, sp, #12
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	ab02      	add	r3, sp, #8
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	ec45 4b10 	vmov	d0, r4, r5
 8006d08:	4653      	mov	r3, sl
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	f001 fefc 	bl	8008b08 <_dtoa_r>
 8006d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d14:	4607      	mov	r7, r0
 8006d16:	d102      	bne.n	8006d1e <__cvt+0x66>
 8006d18:	f019 0f01 	tst.w	r9, #1
 8006d1c:	d022      	beq.n	8006d64 <__cvt+0xac>
 8006d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d22:	eb07 0906 	add.w	r9, r7, r6
 8006d26:	d110      	bne.n	8006d4a <__cvt+0x92>
 8006d28:	783b      	ldrb	r3, [r7, #0]
 8006d2a:	2b30      	cmp	r3, #48	; 0x30
 8006d2c:	d10a      	bne.n	8006d44 <__cvt+0x8c>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d3a:	b918      	cbnz	r0, 8006d44 <__cvt+0x8c>
 8006d3c:	f1c6 0601 	rsb	r6, r6, #1
 8006d40:	f8ca 6000 	str.w	r6, [sl]
 8006d44:	f8da 3000 	ldr.w	r3, [sl]
 8006d48:	4499      	add	r9, r3
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d56:	b108      	cbz	r0, 8006d5c <__cvt+0xa4>
 8006d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d5c:	2230      	movs	r2, #48	; 0x30
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	454b      	cmp	r3, r9
 8006d62:	d307      	bcc.n	8006d74 <__cvt+0xbc>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d68:	1bdb      	subs	r3, r3, r7
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	b004      	add	sp, #16
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	9103      	str	r1, [sp, #12]
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e7f0      	b.n	8006d5e <__cvt+0xa6>

08006d7c <__exponent>:
 8006d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2900      	cmp	r1, #0
 8006d82:	bfb8      	it	lt
 8006d84:	4249      	neglt	r1, r1
 8006d86:	f803 2b02 	strb.w	r2, [r3], #2
 8006d8a:	bfb4      	ite	lt
 8006d8c:	222d      	movlt	r2, #45	; 0x2d
 8006d8e:	222b      	movge	r2, #43	; 0x2b
 8006d90:	2909      	cmp	r1, #9
 8006d92:	7042      	strb	r2, [r0, #1]
 8006d94:	dd2a      	ble.n	8006dec <__exponent+0x70>
 8006d96:	f10d 0407 	add.w	r4, sp, #7
 8006d9a:	46a4      	mov	ip, r4
 8006d9c:	270a      	movs	r7, #10
 8006d9e:	46a6      	mov	lr, r4
 8006da0:	460a      	mov	r2, r1
 8006da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006da6:	fb07 1516 	mls	r5, r7, r6, r1
 8006daa:	3530      	adds	r5, #48	; 0x30
 8006dac:	2a63      	cmp	r2, #99	; 0x63
 8006dae:	f104 34ff 	add.w	r4, r4, #4294967295
 8006db2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006db6:	4631      	mov	r1, r6
 8006db8:	dcf1      	bgt.n	8006d9e <__exponent+0x22>
 8006dba:	3130      	adds	r1, #48	; 0x30
 8006dbc:	f1ae 0502 	sub.w	r5, lr, #2
 8006dc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dc4:	1c44      	adds	r4, r0, #1
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4561      	cmp	r1, ip
 8006dca:	d30a      	bcc.n	8006de2 <__exponent+0x66>
 8006dcc:	f10d 0209 	add.w	r2, sp, #9
 8006dd0:	eba2 020e 	sub.w	r2, r2, lr
 8006dd4:	4565      	cmp	r5, ip
 8006dd6:	bf88      	it	hi
 8006dd8:	2200      	movhi	r2, #0
 8006dda:	4413      	add	r3, r2
 8006ddc:	1a18      	subs	r0, r3, r0
 8006dde:	b003      	add	sp, #12
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dea:	e7ed      	b.n	8006dc8 <__exponent+0x4c>
 8006dec:	2330      	movs	r3, #48	; 0x30
 8006dee:	3130      	adds	r1, #48	; 0x30
 8006df0:	7083      	strb	r3, [r0, #2]
 8006df2:	70c1      	strb	r1, [r0, #3]
 8006df4:	1d03      	adds	r3, r0, #4
 8006df6:	e7f1      	b.n	8006ddc <__exponent+0x60>

08006df8 <_printf_float>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	b08d      	sub	sp, #52	; 0x34
 8006e02:	460c      	mov	r4, r1
 8006e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e08:	4616      	mov	r6, r2
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	f003 f98f 	bl	800a130 <_localeconv_r>
 8006e12:	f8d0 a000 	ldr.w	sl, [r0]
 8006e16:	4650      	mov	r0, sl
 8006e18:	f7f9 f9da 	bl	80001d0 <strlen>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	f8d8 3000 	ldr.w	r3, [r8]
 8006e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	f103 0208 	add.w	r2, r3, #8
 8006e36:	f8c8 2000 	str.w	r2, [r8]
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e4a:	9307      	str	r3, [sp, #28]
 8006e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e50:	ee08 0a10 	vmov	s16, r0
 8006e54:	4b9f      	ldr	r3, [pc, #636]	; (80070d4 <_printf_float+0x2dc>)
 8006e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	f7f9 fe65 	bl	8000b2c <__aeabi_dcmpun>
 8006e62:	bb88      	cbnz	r0, 8006ec8 <_printf_float+0xd0>
 8006e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e68:	4b9a      	ldr	r3, [pc, #616]	; (80070d4 <_printf_float+0x2dc>)
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	f7f9 fe3f 	bl	8000af0 <__aeabi_dcmple>
 8006e72:	bb48      	cbnz	r0, 8006ec8 <_printf_float+0xd0>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f7f9 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8006e80:	b110      	cbz	r0, 8006e88 <_printf_float+0x90>
 8006e82:	232d      	movs	r3, #45	; 0x2d
 8006e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e88:	4b93      	ldr	r3, [pc, #588]	; (80070d8 <_printf_float+0x2e0>)
 8006e8a:	4894      	ldr	r0, [pc, #592]	; (80070dc <_printf_float+0x2e4>)
 8006e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e90:	bf94      	ite	ls
 8006e92:	4698      	movls	r8, r3
 8006e94:	4680      	movhi	r8, r0
 8006e96:	2303      	movs	r3, #3
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	f023 0204 	bic.w	r2, r3, #4
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	f04f 0900 	mov.w	r9, #0
 8006ea6:	9700      	str	r7, [sp, #0]
 8006ea8:	4633      	mov	r3, r6
 8006eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006eac:	4621      	mov	r1, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f9d8 	bl	8007264 <_printf_common>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f040 8090 	bne.w	8006fda <_printf_float+0x1e2>
 8006eba:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebe:	b00d      	add	sp, #52	; 0x34
 8006ec0:	ecbd 8b02 	vpop	{d8}
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 fe2c 	bl	8000b2c <__aeabi_dcmpun>
 8006ed4:	b140      	cbz	r0, 8006ee8 <_printf_float+0xf0>
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bfbc      	itt	lt
 8006edc:	232d      	movlt	r3, #45	; 0x2d
 8006ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ee2:	487f      	ldr	r0, [pc, #508]	; (80070e0 <_printf_float+0x2e8>)
 8006ee4:	4b7f      	ldr	r3, [pc, #508]	; (80070e4 <_printf_float+0x2ec>)
 8006ee6:	e7d1      	b.n	8006e8c <_printf_float+0x94>
 8006ee8:	6863      	ldr	r3, [r4, #4]
 8006eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eee:	9206      	str	r2, [sp, #24]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	d13f      	bne.n	8006f74 <_printf_float+0x17c>
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	6861      	ldr	r1, [r4, #4]
 8006efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f00:	2300      	movs	r3, #0
 8006f02:	9303      	str	r3, [sp, #12]
 8006f04:	ab0a      	add	r3, sp, #40	; 0x28
 8006f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f0a:	ab09      	add	r3, sp, #36	; 0x24
 8006f0c:	ec49 8b10 	vmov	d0, r8, r9
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7ff fecd 	bl	8006cb8 <__cvt>
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f22:	2b47      	cmp	r3, #71	; 0x47
 8006f24:	4680      	mov	r8, r0
 8006f26:	d108      	bne.n	8006f3a <_printf_float+0x142>
 8006f28:	1cc8      	adds	r0, r1, #3
 8006f2a:	db02      	blt.n	8006f32 <_printf_float+0x13a>
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	dd41      	ble.n	8006fb6 <_printf_float+0x1be>
 8006f32:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f36:	fa5f fb8b 	uxtb.w	fp, fp
 8006f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f3e:	d820      	bhi.n	8006f82 <_printf_float+0x18a>
 8006f40:	3901      	subs	r1, #1
 8006f42:	465a      	mov	r2, fp
 8006f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f48:	9109      	str	r1, [sp, #36]	; 0x24
 8006f4a:	f7ff ff17 	bl	8006d7c <__exponent>
 8006f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f50:	1813      	adds	r3, r2, r0
 8006f52:	2a01      	cmp	r2, #1
 8006f54:	4681      	mov	r9, r0
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	dc02      	bgt.n	8006f60 <_printf_float+0x168>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	07d2      	lsls	r2, r2, #31
 8006f5e:	d501      	bpl.n	8006f64 <_printf_float+0x16c>
 8006f60:	3301      	adds	r3, #1
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d09c      	beq.n	8006ea6 <_printf_float+0xae>
 8006f6c:	232d      	movs	r3, #45	; 0x2d
 8006f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f72:	e798      	b.n	8006ea6 <_printf_float+0xae>
 8006f74:	9a06      	ldr	r2, [sp, #24]
 8006f76:	2a47      	cmp	r2, #71	; 0x47
 8006f78:	d1be      	bne.n	8006ef8 <_printf_float+0x100>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1bc      	bne.n	8006ef8 <_printf_float+0x100>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e7b9      	b.n	8006ef6 <_printf_float+0xfe>
 8006f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f86:	d118      	bne.n	8006fba <_printf_float+0x1c2>
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	dd0b      	ble.n	8006fa6 <_printf_float+0x1ae>
 8006f8e:	6121      	str	r1, [r4, #16]
 8006f90:	b913      	cbnz	r3, 8006f98 <_printf_float+0x1a0>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	07d0      	lsls	r0, r2, #31
 8006f96:	d502      	bpl.n	8006f9e <_printf_float+0x1a6>
 8006f98:	3301      	adds	r3, #1
 8006f9a:	440b      	add	r3, r1
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fa0:	f04f 0900 	mov.w	r9, #0
 8006fa4:	e7de      	b.n	8006f64 <_printf_float+0x16c>
 8006fa6:	b913      	cbnz	r3, 8006fae <_printf_float+0x1b6>
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	07d2      	lsls	r2, r2, #31
 8006fac:	d501      	bpl.n	8006fb2 <_printf_float+0x1ba>
 8006fae:	3302      	adds	r3, #2
 8006fb0:	e7f4      	b.n	8006f9c <_printf_float+0x1a4>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e7f2      	b.n	8006f9c <_printf_float+0x1a4>
 8006fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	db05      	blt.n	8006fcc <_printf_float+0x1d4>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	6121      	str	r1, [r4, #16]
 8006fc4:	07d8      	lsls	r0, r3, #31
 8006fc6:	d5ea      	bpl.n	8006f9e <_printf_float+0x1a6>
 8006fc8:	1c4b      	adds	r3, r1, #1
 8006fca:	e7e7      	b.n	8006f9c <_printf_float+0x1a4>
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	bfd4      	ite	le
 8006fd0:	f1c1 0202 	rsble	r2, r1, #2
 8006fd4:	2201      	movgt	r2, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	e7e0      	b.n	8006f9c <_printf_float+0x1a4>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	055a      	lsls	r2, r3, #21
 8006fde:	d407      	bmi.n	8006ff0 <_printf_float+0x1f8>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	d12c      	bne.n	8007048 <_printf_float+0x250>
 8006fee:	e764      	b.n	8006eba <_printf_float+0xc2>
 8006ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ff4:	f240 80e0 	bls.w	80071b8 <_printf_float+0x3c0>
 8006ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2300      	movs	r3, #0
 8007000:	f7f9 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	d034      	beq.n	8007072 <_printf_float+0x27a>
 8007008:	4a37      	ldr	r2, [pc, #220]	; (80070e8 <_printf_float+0x2f0>)
 800700a:	2301      	movs	r3, #1
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f af51 	beq.w	8006eba <_printf_float+0xc2>
 8007018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701c:	429a      	cmp	r2, r3
 800701e:	db02      	blt.n	8007026 <_printf_float+0x22e>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	07d8      	lsls	r0, r3, #31
 8007024:	d510      	bpl.n	8007048 <_printf_float+0x250>
 8007026:	ee18 3a10 	vmov	r3, s16
 800702a:	4652      	mov	r2, sl
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f af41 	beq.w	8006eba <_printf_float+0xc2>
 8007038:	f04f 0800 	mov.w	r8, #0
 800703c:	f104 091a 	add.w	r9, r4, #26
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	3b01      	subs	r3, #1
 8007044:	4543      	cmp	r3, r8
 8007046:	dc09      	bgt.n	800705c <_printf_float+0x264>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	079b      	lsls	r3, r3, #30
 800704c:	f100 8105 	bmi.w	800725a <_printf_float+0x462>
 8007050:	68e0      	ldr	r0, [r4, #12]
 8007052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007054:	4298      	cmp	r0, r3
 8007056:	bfb8      	it	lt
 8007058:	4618      	movlt	r0, r3
 800705a:	e730      	b.n	8006ebe <_printf_float+0xc6>
 800705c:	2301      	movs	r3, #1
 800705e:	464a      	mov	r2, r9
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	f43f af27 	beq.w	8006eba <_printf_float+0xc2>
 800706c:	f108 0801 	add.w	r8, r8, #1
 8007070:	e7e6      	b.n	8007040 <_printf_float+0x248>
 8007072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	dc39      	bgt.n	80070ec <_printf_float+0x2f4>
 8007078:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <_printf_float+0x2f0>)
 800707a:	2301      	movs	r3, #1
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af19 	beq.w	8006eba <_printf_float+0xc2>
 8007088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800708c:	4313      	orrs	r3, r2
 800708e:	d102      	bne.n	8007096 <_printf_float+0x29e>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d5d8      	bpl.n	8007048 <_printf_float+0x250>
 8007096:	ee18 3a10 	vmov	r3, s16
 800709a:	4652      	mov	r2, sl
 800709c:	4631      	mov	r1, r6
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	f43f af09 	beq.w	8006eba <_printf_float+0xc2>
 80070a8:	f04f 0900 	mov.w	r9, #0
 80070ac:	f104 0a1a 	add.w	sl, r4, #26
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	425b      	negs	r3, r3
 80070b4:	454b      	cmp	r3, r9
 80070b6:	dc01      	bgt.n	80070bc <_printf_float+0x2c4>
 80070b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ba:	e792      	b.n	8006fe2 <_printf_float+0x1ea>
 80070bc:	2301      	movs	r3, #1
 80070be:	4652      	mov	r2, sl
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f aef7 	beq.w	8006eba <_printf_float+0xc2>
 80070cc:	f109 0901 	add.w	r9, r9, #1
 80070d0:	e7ee      	b.n	80070b0 <_printf_float+0x2b8>
 80070d2:	bf00      	nop
 80070d4:	7fefffff 	.word	0x7fefffff
 80070d8:	0800b770 	.word	0x0800b770
 80070dc:	0800b774 	.word	0x0800b774
 80070e0:	0800b77c 	.word	0x0800b77c
 80070e4:	0800b778 	.word	0x0800b778
 80070e8:	0800b780 	.word	0x0800b780
 80070ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bfa8      	it	ge
 80070f4:	461a      	movge	r2, r3
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	4691      	mov	r9, r2
 80070fa:	dc37      	bgt.n	800716c <_printf_float+0x374>
 80070fc:	f04f 0b00 	mov.w	fp, #0
 8007100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007104:	f104 021a 	add.w	r2, r4, #26
 8007108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	eba3 0309 	sub.w	r3, r3, r9
 8007110:	455b      	cmp	r3, fp
 8007112:	dc33      	bgt.n	800717c <_printf_float+0x384>
 8007114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007118:	429a      	cmp	r2, r3
 800711a:	db3b      	blt.n	8007194 <_printf_float+0x39c>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	07da      	lsls	r2, r3, #31
 8007120:	d438      	bmi.n	8007194 <_printf_float+0x39c>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	9a05      	ldr	r2, [sp, #20]
 8007126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007128:	1a9a      	subs	r2, r3, r2
 800712a:	eba3 0901 	sub.w	r9, r3, r1
 800712e:	4591      	cmp	r9, r2
 8007130:	bfa8      	it	ge
 8007132:	4691      	movge	r9, r2
 8007134:	f1b9 0f00 	cmp.w	r9, #0
 8007138:	dc35      	bgt.n	80071a6 <_printf_float+0x3ae>
 800713a:	f04f 0800 	mov.w	r8, #0
 800713e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007142:	f104 0a1a 	add.w	sl, r4, #26
 8007146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	eba3 0309 	sub.w	r3, r3, r9
 8007150:	4543      	cmp	r3, r8
 8007152:	f77f af79 	ble.w	8007048 <_printf_float+0x250>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f aeaa 	beq.w	8006eba <_printf_float+0xc2>
 8007166:	f108 0801 	add.w	r8, r8, #1
 800716a:	e7ec      	b.n	8007146 <_printf_float+0x34e>
 800716c:	4613      	mov	r3, r2
 800716e:	4631      	mov	r1, r6
 8007170:	4642      	mov	r2, r8
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	d1c0      	bne.n	80070fc <_printf_float+0x304>
 800717a:	e69e      	b.n	8006eba <_printf_float+0xc2>
 800717c:	2301      	movs	r3, #1
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	9205      	str	r2, [sp, #20]
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	f43f ae97 	beq.w	8006eba <_printf_float+0xc2>
 800718c:	9a05      	ldr	r2, [sp, #20]
 800718e:	f10b 0b01 	add.w	fp, fp, #1
 8007192:	e7b9      	b.n	8007108 <_printf_float+0x310>
 8007194:	ee18 3a10 	vmov	r3, s16
 8007198:	4652      	mov	r2, sl
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1be      	bne.n	8007122 <_printf_float+0x32a>
 80071a4:	e689      	b.n	8006eba <_printf_float+0xc2>
 80071a6:	9a05      	ldr	r2, [sp, #20]
 80071a8:	464b      	mov	r3, r9
 80071aa:	4442      	add	r2, r8
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	d1c1      	bne.n	800713a <_printf_float+0x342>
 80071b6:	e680      	b.n	8006eba <_printf_float+0xc2>
 80071b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ba:	2a01      	cmp	r2, #1
 80071bc:	dc01      	bgt.n	80071c2 <_printf_float+0x3ca>
 80071be:	07db      	lsls	r3, r3, #31
 80071c0:	d538      	bpl.n	8007234 <_printf_float+0x43c>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4642      	mov	r2, r8
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f ae74 	beq.w	8006eba <_printf_float+0xc2>
 80071d2:	ee18 3a10 	vmov	r3, s16
 80071d6:	4652      	mov	r2, sl
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f ae6b 	beq.w	8006eba <_printf_float+0xc2>
 80071e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e8:	2200      	movs	r2, #0
 80071ea:	2300      	movs	r3, #0
 80071ec:	f7f9 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071f0:	b9d8      	cbnz	r0, 800722a <_printf_float+0x432>
 80071f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f4:	f108 0201 	add.w	r2, r8, #1
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	d10e      	bne.n	8007222 <_printf_float+0x42a>
 8007204:	e659      	b.n	8006eba <_printf_float+0xc2>
 8007206:	2301      	movs	r3, #1
 8007208:	4652      	mov	r2, sl
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae52 	beq.w	8006eba <_printf_float+0xc2>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721c:	3b01      	subs	r3, #1
 800721e:	4543      	cmp	r3, r8
 8007220:	dcf1      	bgt.n	8007206 <_printf_float+0x40e>
 8007222:	464b      	mov	r3, r9
 8007224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007228:	e6dc      	b.n	8006fe4 <_printf_float+0x1ec>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	f104 0a1a 	add.w	sl, r4, #26
 8007232:	e7f2      	b.n	800721a <_printf_float+0x422>
 8007234:	2301      	movs	r3, #1
 8007236:	4642      	mov	r2, r8
 8007238:	e7df      	b.n	80071fa <_printf_float+0x402>
 800723a:	2301      	movs	r3, #1
 800723c:	464a      	mov	r2, r9
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae38 	beq.w	8006eba <_printf_float+0xc2>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	4543      	cmp	r3, r8
 8007256:	dcf0      	bgt.n	800723a <_printf_float+0x442>
 8007258:	e6fa      	b.n	8007050 <_printf_float+0x258>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	f104 0919 	add.w	r9, r4, #25
 8007262:	e7f4      	b.n	800724e <_printf_float+0x456>

08007264 <_printf_common>:
 8007264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	4616      	mov	r6, r2
 800726a:	4699      	mov	r9, r3
 800726c:	688a      	ldr	r2, [r1, #8]
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007274:	4293      	cmp	r3, r2
 8007276:	bfb8      	it	lt
 8007278:	4613      	movlt	r3, r2
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007280:	4607      	mov	r7, r0
 8007282:	460c      	mov	r4, r1
 8007284:	b10a      	cbz	r2, 800728a <_printf_common+0x26>
 8007286:	3301      	adds	r3, #1
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	0699      	lsls	r1, r3, #26
 800728e:	bf42      	ittt	mi
 8007290:	6833      	ldrmi	r3, [r6, #0]
 8007292:	3302      	addmi	r3, #2
 8007294:	6033      	strmi	r3, [r6, #0]
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	f015 0506 	ands.w	r5, r5, #6
 800729c:	d106      	bne.n	80072ac <_printf_common+0x48>
 800729e:	f104 0a19 	add.w	sl, r4, #25
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	6832      	ldr	r2, [r6, #0]
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dc26      	bgt.n	80072fa <_printf_common+0x96>
 80072ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b0:	1e13      	subs	r3, r2, #0
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	bf18      	it	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	0692      	lsls	r2, r2, #26
 80072ba:	d42b      	bmi.n	8007314 <_printf_common+0xb0>
 80072bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d01e      	beq.n	8007308 <_printf_common+0xa4>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	68e5      	ldr	r5, [r4, #12]
 80072ce:	6832      	ldr	r2, [r6, #0]
 80072d0:	f003 0306 	and.w	r3, r3, #6
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	bf08      	it	eq
 80072d8:	1aad      	subeq	r5, r5, r2
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	bf0c      	ite	eq
 80072e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e4:	2500      	movne	r5, #0
 80072e6:	4293      	cmp	r3, r2
 80072e8:	bfc4      	itt	gt
 80072ea:	1a9b      	subgt	r3, r3, r2
 80072ec:	18ed      	addgt	r5, r5, r3
 80072ee:	2600      	movs	r6, #0
 80072f0:	341a      	adds	r4, #26
 80072f2:	42b5      	cmp	r5, r6
 80072f4:	d11a      	bne.n	800732c <_printf_common+0xc8>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e008      	b.n	800730c <_printf_common+0xa8>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4649      	mov	r1, r9
 8007300:	4638      	mov	r0, r7
 8007302:	47c0      	blx	r8
 8007304:	3001      	adds	r0, #1
 8007306:	d103      	bne.n	8007310 <_printf_common+0xac>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	3501      	adds	r5, #1
 8007312:	e7c6      	b.n	80072a2 <_printf_common+0x3e>
 8007314:	18e1      	adds	r1, r4, r3
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	2030      	movs	r0, #48	; 0x30
 800731a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800731e:	4422      	add	r2, r4
 8007320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007328:	3302      	adds	r3, #2
 800732a:	e7c7      	b.n	80072bc <_printf_common+0x58>
 800732c:	2301      	movs	r3, #1
 800732e:	4622      	mov	r2, r4
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d0e6      	beq.n	8007308 <_printf_common+0xa4>
 800733a:	3601      	adds	r6, #1
 800733c:	e7d9      	b.n	80072f2 <_printf_common+0x8e>
	...

08007340 <_printf_i>:
 8007340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	7e0f      	ldrb	r7, [r1, #24]
 8007346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007348:	2f78      	cmp	r7, #120	; 0x78
 800734a:	4691      	mov	r9, r2
 800734c:	4680      	mov	r8, r0
 800734e:	460c      	mov	r4, r1
 8007350:	469a      	mov	sl, r3
 8007352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007356:	d807      	bhi.n	8007368 <_printf_i+0x28>
 8007358:	2f62      	cmp	r7, #98	; 0x62
 800735a:	d80a      	bhi.n	8007372 <_printf_i+0x32>
 800735c:	2f00      	cmp	r7, #0
 800735e:	f000 80d8 	beq.w	8007512 <_printf_i+0x1d2>
 8007362:	2f58      	cmp	r7, #88	; 0x58
 8007364:	f000 80a3 	beq.w	80074ae <_printf_i+0x16e>
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007370:	e03a      	b.n	80073e8 <_printf_i+0xa8>
 8007372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007376:	2b15      	cmp	r3, #21
 8007378:	d8f6      	bhi.n	8007368 <_printf_i+0x28>
 800737a:	a101      	add	r1, pc, #4	; (adr r1, 8007380 <_printf_i+0x40>)
 800737c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073ed 	.word	0x080073ed
 8007388:	08007369 	.word	0x08007369
 800738c:	08007369 	.word	0x08007369
 8007390:	08007369 	.word	0x08007369
 8007394:	08007369 	.word	0x08007369
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007369 	.word	0x08007369
 80073a0:	08007369 	.word	0x08007369
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	080074f9 	.word	0x080074f9
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	080074db 	.word	0x080074db
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	0800751b 	.word	0x0800751b
 80073c4:	08007369 	.word	0x08007369
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074e3 	.word	0x080074e3
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e8:	2301      	movs	r3, #1
 80073ea:	e0a3      	b.n	8007534 <_printf_i+0x1f4>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	6829      	ldr	r1, [r5, #0]
 80073f0:	0606      	lsls	r6, r0, #24
 80073f2:	f101 0304 	add.w	r3, r1, #4
 80073f6:	d50a      	bpl.n	800740e <_printf_i+0xce>
 80073f8:	680e      	ldr	r6, [r1, #0]
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	da03      	bge.n	8007408 <_printf_i+0xc8>
 8007400:	232d      	movs	r3, #45	; 0x2d
 8007402:	4276      	negs	r6, r6
 8007404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007408:	485e      	ldr	r0, [pc, #376]	; (8007584 <_printf_i+0x244>)
 800740a:	230a      	movs	r3, #10
 800740c:	e019      	b.n	8007442 <_printf_i+0x102>
 800740e:	680e      	ldr	r6, [r1, #0]
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007416:	bf18      	it	ne
 8007418:	b236      	sxthne	r6, r6
 800741a:	e7ef      	b.n	80073fc <_printf_i+0xbc>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	6029      	str	r1, [r5, #0]
 8007424:	0601      	lsls	r1, r0, #24
 8007426:	d501      	bpl.n	800742c <_printf_i+0xec>
 8007428:	681e      	ldr	r6, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0xf2>
 800742c:	0646      	lsls	r6, r0, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0xe8>
 8007430:	881e      	ldrh	r6, [r3, #0]
 8007432:	4854      	ldr	r0, [pc, #336]	; (8007584 <_printf_i+0x244>)
 8007434:	2f6f      	cmp	r7, #111	; 0x6f
 8007436:	bf0c      	ite	eq
 8007438:	2308      	moveq	r3, #8
 800743a:	230a      	movne	r3, #10
 800743c:	2100      	movs	r1, #0
 800743e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007442:	6865      	ldr	r5, [r4, #4]
 8007444:	60a5      	str	r5, [r4, #8]
 8007446:	2d00      	cmp	r5, #0
 8007448:	bfa2      	ittt	ge
 800744a:	6821      	ldrge	r1, [r4, #0]
 800744c:	f021 0104 	bicge.w	r1, r1, #4
 8007450:	6021      	strge	r1, [r4, #0]
 8007452:	b90e      	cbnz	r6, 8007458 <_printf_i+0x118>
 8007454:	2d00      	cmp	r5, #0
 8007456:	d04d      	beq.n	80074f4 <_printf_i+0x1b4>
 8007458:	4615      	mov	r5, r2
 800745a:	fbb6 f1f3 	udiv	r1, r6, r3
 800745e:	fb03 6711 	mls	r7, r3, r1, r6
 8007462:	5dc7      	ldrb	r7, [r0, r7]
 8007464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007468:	4637      	mov	r7, r6
 800746a:	42bb      	cmp	r3, r7
 800746c:	460e      	mov	r6, r1
 800746e:	d9f4      	bls.n	800745a <_printf_i+0x11a>
 8007470:	2b08      	cmp	r3, #8
 8007472:	d10b      	bne.n	800748c <_printf_i+0x14c>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	07de      	lsls	r6, r3, #31
 8007478:	d508      	bpl.n	800748c <_printf_i+0x14c>
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	6861      	ldr	r1, [r4, #4]
 800747e:	4299      	cmp	r1, r3
 8007480:	bfde      	ittt	le
 8007482:	2330      	movle	r3, #48	; 0x30
 8007484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800748c:	1b52      	subs	r2, r2, r5
 800748e:	6122      	str	r2, [r4, #16]
 8007490:	f8cd a000 	str.w	sl, [sp]
 8007494:	464b      	mov	r3, r9
 8007496:	aa03      	add	r2, sp, #12
 8007498:	4621      	mov	r1, r4
 800749a:	4640      	mov	r0, r8
 800749c:	f7ff fee2 	bl	8007264 <_printf_common>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d14c      	bne.n	800753e <_printf_i+0x1fe>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	b004      	add	sp, #16
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ae:	4835      	ldr	r0, [pc, #212]	; (8007584 <_printf_i+0x244>)
 80074b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074bc:	6029      	str	r1, [r5, #0]
 80074be:	061d      	lsls	r5, r3, #24
 80074c0:	d514      	bpl.n	80074ec <_printf_i+0x1ac>
 80074c2:	07df      	lsls	r7, r3, #31
 80074c4:	bf44      	itt	mi
 80074c6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ca:	6023      	strmi	r3, [r4, #0]
 80074cc:	b91e      	cbnz	r6, 80074d6 <_printf_i+0x196>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f023 0320 	bic.w	r3, r3, #32
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	2310      	movs	r3, #16
 80074d8:	e7b0      	b.n	800743c <_printf_i+0xfc>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	2378      	movs	r3, #120	; 0x78
 80074e4:	4828      	ldr	r0, [pc, #160]	; (8007588 <_printf_i+0x248>)
 80074e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ea:	e7e3      	b.n	80074b4 <_printf_i+0x174>
 80074ec:	0659      	lsls	r1, r3, #25
 80074ee:	bf48      	it	mi
 80074f0:	b2b6      	uxthmi	r6, r6
 80074f2:	e7e6      	b.n	80074c2 <_printf_i+0x182>
 80074f4:	4615      	mov	r5, r2
 80074f6:	e7bb      	b.n	8007470 <_printf_i+0x130>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	6826      	ldr	r6, [r4, #0]
 80074fc:	6961      	ldr	r1, [r4, #20]
 80074fe:	1d18      	adds	r0, r3, #4
 8007500:	6028      	str	r0, [r5, #0]
 8007502:	0635      	lsls	r5, r6, #24
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	d501      	bpl.n	800750c <_printf_i+0x1cc>
 8007508:	6019      	str	r1, [r3, #0]
 800750a:	e002      	b.n	8007512 <_printf_i+0x1d2>
 800750c:	0670      	lsls	r0, r6, #25
 800750e:	d5fb      	bpl.n	8007508 <_printf_i+0x1c8>
 8007510:	8019      	strh	r1, [r3, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	4615      	mov	r5, r2
 8007518:	e7ba      	b.n	8007490 <_printf_i+0x150>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	2100      	movs	r1, #0
 8007526:	4628      	mov	r0, r5
 8007528:	f7f8 fe5a 	bl	80001e0 <memchr>
 800752c:	b108      	cbz	r0, 8007532 <_printf_i+0x1f2>
 800752e:	1b40      	subs	r0, r0, r5
 8007530:	6060      	str	r0, [r4, #4]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	2300      	movs	r3, #0
 8007538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753c:	e7a8      	b.n	8007490 <_printf_i+0x150>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	462a      	mov	r2, r5
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d0ab      	beq.n	80074a4 <_printf_i+0x164>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	079b      	lsls	r3, r3, #30
 8007550:	d413      	bmi.n	800757a <_printf_i+0x23a>
 8007552:	68e0      	ldr	r0, [r4, #12]
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	4298      	cmp	r0, r3
 8007558:	bfb8      	it	lt
 800755a:	4618      	movlt	r0, r3
 800755c:	e7a4      	b.n	80074a8 <_printf_i+0x168>
 800755e:	2301      	movs	r3, #1
 8007560:	4632      	mov	r2, r6
 8007562:	4649      	mov	r1, r9
 8007564:	4640      	mov	r0, r8
 8007566:	47d0      	blx	sl
 8007568:	3001      	adds	r0, #1
 800756a:	d09b      	beq.n	80074a4 <_printf_i+0x164>
 800756c:	3501      	adds	r5, #1
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	9903      	ldr	r1, [sp, #12]
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	42ab      	cmp	r3, r5
 8007576:	dcf2      	bgt.n	800755e <_printf_i+0x21e>
 8007578:	e7eb      	b.n	8007552 <_printf_i+0x212>
 800757a:	2500      	movs	r5, #0
 800757c:	f104 0619 	add.w	r6, r4, #25
 8007580:	e7f5      	b.n	800756e <_printf_i+0x22e>
 8007582:	bf00      	nop
 8007584:	0800b782 	.word	0x0800b782
 8007588:	0800b793 	.word	0x0800b793

0800758c <_scanf_float>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	b087      	sub	sp, #28
 8007592:	4617      	mov	r7, r2
 8007594:	9303      	str	r3, [sp, #12]
 8007596:	688b      	ldr	r3, [r1, #8]
 8007598:	1e5a      	subs	r2, r3, #1
 800759a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800759e:	bf83      	ittte	hi
 80075a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075a4:	195b      	addhi	r3, r3, r5
 80075a6:	9302      	strhi	r3, [sp, #8]
 80075a8:	2300      	movls	r3, #0
 80075aa:	bf86      	itte	hi
 80075ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075b0:	608b      	strhi	r3, [r1, #8]
 80075b2:	9302      	strls	r3, [sp, #8]
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	468b      	mov	fp, r1
 80075b8:	2500      	movs	r5, #0
 80075ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075be:	f84b 3b1c 	str.w	r3, [fp], #28
 80075c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075c6:	4680      	mov	r8, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	465e      	mov	r6, fp
 80075cc:	46aa      	mov	sl, r5
 80075ce:	46a9      	mov	r9, r5
 80075d0:	9501      	str	r5, [sp, #4]
 80075d2:	68a2      	ldr	r2, [r4, #8]
 80075d4:	b152      	cbz	r2, 80075ec <_scanf_float+0x60>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b4e      	cmp	r3, #78	; 0x4e
 80075dc:	d864      	bhi.n	80076a8 <_scanf_float+0x11c>
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d83c      	bhi.n	800765c <_scanf_float+0xd0>
 80075e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075e6:	b2c8      	uxtb	r0, r1
 80075e8:	280e      	cmp	r0, #14
 80075ea:	d93a      	bls.n	8007662 <_scanf_float+0xd6>
 80075ec:	f1b9 0f00 	cmp.w	r9, #0
 80075f0:	d003      	beq.n	80075fa <_scanf_float+0x6e>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075fe:	f1ba 0f01 	cmp.w	sl, #1
 8007602:	f200 8113 	bhi.w	800782c <_scanf_float+0x2a0>
 8007606:	455e      	cmp	r6, fp
 8007608:	f200 8105 	bhi.w	8007816 <_scanf_float+0x28a>
 800760c:	2501      	movs	r5, #1
 800760e:	4628      	mov	r0, r5
 8007610:	b007      	add	sp, #28
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800761a:	2a0d      	cmp	r2, #13
 800761c:	d8e6      	bhi.n	80075ec <_scanf_float+0x60>
 800761e:	a101      	add	r1, pc, #4	; (adr r1, 8007624 <_scanf_float+0x98>)
 8007620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007624:	08007763 	.word	0x08007763
 8007628:	080075ed 	.word	0x080075ed
 800762c:	080075ed 	.word	0x080075ed
 8007630:	080075ed 	.word	0x080075ed
 8007634:	080077c3 	.word	0x080077c3
 8007638:	0800779b 	.word	0x0800779b
 800763c:	080075ed 	.word	0x080075ed
 8007640:	080075ed 	.word	0x080075ed
 8007644:	08007771 	.word	0x08007771
 8007648:	080075ed 	.word	0x080075ed
 800764c:	080075ed 	.word	0x080075ed
 8007650:	080075ed 	.word	0x080075ed
 8007654:	080075ed 	.word	0x080075ed
 8007658:	08007729 	.word	0x08007729
 800765c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007660:	e7db      	b.n	800761a <_scanf_float+0x8e>
 8007662:	290e      	cmp	r1, #14
 8007664:	d8c2      	bhi.n	80075ec <_scanf_float+0x60>
 8007666:	a001      	add	r0, pc, #4	; (adr r0, 800766c <_scanf_float+0xe0>)
 8007668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800766c:	0800771b 	.word	0x0800771b
 8007670:	080075ed 	.word	0x080075ed
 8007674:	0800771b 	.word	0x0800771b
 8007678:	080077af 	.word	0x080077af
 800767c:	080075ed 	.word	0x080075ed
 8007680:	080076c9 	.word	0x080076c9
 8007684:	08007705 	.word	0x08007705
 8007688:	08007705 	.word	0x08007705
 800768c:	08007705 	.word	0x08007705
 8007690:	08007705 	.word	0x08007705
 8007694:	08007705 	.word	0x08007705
 8007698:	08007705 	.word	0x08007705
 800769c:	08007705 	.word	0x08007705
 80076a0:	08007705 	.word	0x08007705
 80076a4:	08007705 	.word	0x08007705
 80076a8:	2b6e      	cmp	r3, #110	; 0x6e
 80076aa:	d809      	bhi.n	80076c0 <_scanf_float+0x134>
 80076ac:	2b60      	cmp	r3, #96	; 0x60
 80076ae:	d8b2      	bhi.n	8007616 <_scanf_float+0x8a>
 80076b0:	2b54      	cmp	r3, #84	; 0x54
 80076b2:	d077      	beq.n	80077a4 <_scanf_float+0x218>
 80076b4:	2b59      	cmp	r3, #89	; 0x59
 80076b6:	d199      	bne.n	80075ec <_scanf_float+0x60>
 80076b8:	2d07      	cmp	r5, #7
 80076ba:	d197      	bne.n	80075ec <_scanf_float+0x60>
 80076bc:	2508      	movs	r5, #8
 80076be:	e029      	b.n	8007714 <_scanf_float+0x188>
 80076c0:	2b74      	cmp	r3, #116	; 0x74
 80076c2:	d06f      	beq.n	80077a4 <_scanf_float+0x218>
 80076c4:	2b79      	cmp	r3, #121	; 0x79
 80076c6:	e7f6      	b.n	80076b6 <_scanf_float+0x12a>
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	05c8      	lsls	r0, r1, #23
 80076cc:	d51a      	bpl.n	8007704 <_scanf_float+0x178>
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076d4:	6021      	str	r1, [r4, #0]
 80076d6:	f109 0901 	add.w	r9, r9, #1
 80076da:	b11b      	cbz	r3, 80076e4 <_scanf_float+0x158>
 80076dc:	3b01      	subs	r3, #1
 80076de:	3201      	adds	r2, #1
 80076e0:	9302      	str	r3, [sp, #8]
 80076e2:	60a2      	str	r2, [r4, #8]
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	60a3      	str	r3, [r4, #8]
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	3301      	adds	r3, #1
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	f340 8084 	ble.w	8007804 <_scanf_float+0x278>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	e766      	b.n	80075d2 <_scanf_float+0x46>
 8007704:	eb1a 0f05 	cmn.w	sl, r5
 8007708:	f47f af70 	bne.w	80075ec <_scanf_float+0x60>
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007712:	6022      	str	r2, [r4, #0]
 8007714:	f806 3b01 	strb.w	r3, [r6], #1
 8007718:	e7e4      	b.n	80076e4 <_scanf_float+0x158>
 800771a:	6822      	ldr	r2, [r4, #0]
 800771c:	0610      	lsls	r0, r2, #24
 800771e:	f57f af65 	bpl.w	80075ec <_scanf_float+0x60>
 8007722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007726:	e7f4      	b.n	8007712 <_scanf_float+0x186>
 8007728:	f1ba 0f00 	cmp.w	sl, #0
 800772c:	d10e      	bne.n	800774c <_scanf_float+0x1c0>
 800772e:	f1b9 0f00 	cmp.w	r9, #0
 8007732:	d10e      	bne.n	8007752 <_scanf_float+0x1c6>
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800773a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800773e:	d108      	bne.n	8007752 <_scanf_float+0x1c6>
 8007740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	f04f 0a01 	mov.w	sl, #1
 800774a:	e7e3      	b.n	8007714 <_scanf_float+0x188>
 800774c:	f1ba 0f02 	cmp.w	sl, #2
 8007750:	d055      	beq.n	80077fe <_scanf_float+0x272>
 8007752:	2d01      	cmp	r5, #1
 8007754:	d002      	beq.n	800775c <_scanf_float+0x1d0>
 8007756:	2d04      	cmp	r5, #4
 8007758:	f47f af48 	bne.w	80075ec <_scanf_float+0x60>
 800775c:	3501      	adds	r5, #1
 800775e:	b2ed      	uxtb	r5, r5
 8007760:	e7d8      	b.n	8007714 <_scanf_float+0x188>
 8007762:	f1ba 0f01 	cmp.w	sl, #1
 8007766:	f47f af41 	bne.w	80075ec <_scanf_float+0x60>
 800776a:	f04f 0a02 	mov.w	sl, #2
 800776e:	e7d1      	b.n	8007714 <_scanf_float+0x188>
 8007770:	b97d      	cbnz	r5, 8007792 <_scanf_float+0x206>
 8007772:	f1b9 0f00 	cmp.w	r9, #0
 8007776:	f47f af3c 	bne.w	80075f2 <_scanf_float+0x66>
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007780:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007784:	f47f af39 	bne.w	80075fa <_scanf_float+0x6e>
 8007788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	2501      	movs	r5, #1
 8007790:	e7c0      	b.n	8007714 <_scanf_float+0x188>
 8007792:	2d03      	cmp	r5, #3
 8007794:	d0e2      	beq.n	800775c <_scanf_float+0x1d0>
 8007796:	2d05      	cmp	r5, #5
 8007798:	e7de      	b.n	8007758 <_scanf_float+0x1cc>
 800779a:	2d02      	cmp	r5, #2
 800779c:	f47f af26 	bne.w	80075ec <_scanf_float+0x60>
 80077a0:	2503      	movs	r5, #3
 80077a2:	e7b7      	b.n	8007714 <_scanf_float+0x188>
 80077a4:	2d06      	cmp	r5, #6
 80077a6:	f47f af21 	bne.w	80075ec <_scanf_float+0x60>
 80077aa:	2507      	movs	r5, #7
 80077ac:	e7b2      	b.n	8007714 <_scanf_float+0x188>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	0591      	lsls	r1, r2, #22
 80077b2:	f57f af1b 	bpl.w	80075ec <_scanf_float+0x60>
 80077b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077ba:	6022      	str	r2, [r4, #0]
 80077bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80077c0:	e7a8      	b.n	8007714 <_scanf_float+0x188>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077cc:	d006      	beq.n	80077dc <_scanf_float+0x250>
 80077ce:	0550      	lsls	r0, r2, #21
 80077d0:	f57f af0c 	bpl.w	80075ec <_scanf_float+0x60>
 80077d4:	f1b9 0f00 	cmp.w	r9, #0
 80077d8:	f43f af0f 	beq.w	80075fa <_scanf_float+0x6e>
 80077dc:	0591      	lsls	r1, r2, #22
 80077de:	bf58      	it	pl
 80077e0:	9901      	ldrpl	r1, [sp, #4]
 80077e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077e6:	bf58      	it	pl
 80077e8:	eba9 0101 	subpl.w	r1, r9, r1
 80077ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077f0:	bf58      	it	pl
 80077f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	f04f 0900 	mov.w	r9, #0
 80077fc:	e78a      	b.n	8007714 <_scanf_float+0x188>
 80077fe:	f04f 0a03 	mov.w	sl, #3
 8007802:	e787      	b.n	8007714 <_scanf_float+0x188>
 8007804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007808:	4639      	mov	r1, r7
 800780a:	4640      	mov	r0, r8
 800780c:	4798      	blx	r3
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f aedf 	beq.w	80075d2 <_scanf_float+0x46>
 8007814:	e6ea      	b.n	80075ec <_scanf_float+0x60>
 8007816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800781a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800781e:	463a      	mov	r2, r7
 8007820:	4640      	mov	r0, r8
 8007822:	4798      	blx	r3
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	3b01      	subs	r3, #1
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	e6ec      	b.n	8007606 <_scanf_float+0x7a>
 800782c:	1e6b      	subs	r3, r5, #1
 800782e:	2b06      	cmp	r3, #6
 8007830:	d825      	bhi.n	800787e <_scanf_float+0x2f2>
 8007832:	2d02      	cmp	r5, #2
 8007834:	d836      	bhi.n	80078a4 <_scanf_float+0x318>
 8007836:	455e      	cmp	r6, fp
 8007838:	f67f aee8 	bls.w	800760c <_scanf_float+0x80>
 800783c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007844:	463a      	mov	r2, r7
 8007846:	4640      	mov	r0, r8
 8007848:	4798      	blx	r3
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	3b01      	subs	r3, #1
 800784e:	6123      	str	r3, [r4, #16]
 8007850:	e7f1      	b.n	8007836 <_scanf_float+0x2aa>
 8007852:	9802      	ldr	r0, [sp, #8]
 8007854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007858:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	463a      	mov	r2, r7
 8007860:	4640      	mov	r0, r8
 8007862:	4798      	blx	r3
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	3b01      	subs	r3, #1
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800786e:	fa5f fa8a 	uxtb.w	sl, sl
 8007872:	f1ba 0f02 	cmp.w	sl, #2
 8007876:	d1ec      	bne.n	8007852 <_scanf_float+0x2c6>
 8007878:	3d03      	subs	r5, #3
 800787a:	b2ed      	uxtb	r5, r5
 800787c:	1b76      	subs	r6, r6, r5
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	05da      	lsls	r2, r3, #23
 8007882:	d52f      	bpl.n	80078e4 <_scanf_float+0x358>
 8007884:	055b      	lsls	r3, r3, #21
 8007886:	d510      	bpl.n	80078aa <_scanf_float+0x31e>
 8007888:	455e      	cmp	r6, fp
 800788a:	f67f aebf 	bls.w	800760c <_scanf_float+0x80>
 800788e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007896:	463a      	mov	r2, r7
 8007898:	4640      	mov	r0, r8
 800789a:	4798      	blx	r3
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	3b01      	subs	r3, #1
 80078a0:	6123      	str	r3, [r4, #16]
 80078a2:	e7f1      	b.n	8007888 <_scanf_float+0x2fc>
 80078a4:	46aa      	mov	sl, r5
 80078a6:	9602      	str	r6, [sp, #8]
 80078a8:	e7df      	b.n	800786a <_scanf_float+0x2de>
 80078aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	2965      	cmp	r1, #101	; 0x65
 80078b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80078b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	d00c      	beq.n	80078d8 <_scanf_float+0x34c>
 80078be:	2945      	cmp	r1, #69	; 0x45
 80078c0:	d00a      	beq.n	80078d8 <_scanf_float+0x34c>
 80078c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078c6:	463a      	mov	r2, r7
 80078c8:	4640      	mov	r0, r8
 80078ca:	4798      	blx	r3
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	1eb5      	subs	r5, r6, #2
 80078d6:	6123      	str	r3, [r4, #16]
 80078d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078dc:	463a      	mov	r2, r7
 80078de:	4640      	mov	r0, r8
 80078e0:	4798      	blx	r3
 80078e2:	462e      	mov	r6, r5
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	f015 0510 	ands.w	r5, r5, #16
 80078ea:	d159      	bne.n	80079a0 <_scanf_float+0x414>
 80078ec:	7035      	strb	r5, [r6, #0]
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f8:	d11b      	bne.n	8007932 <_scanf_float+0x3a6>
 80078fa:	9b01      	ldr	r3, [sp, #4]
 80078fc:	454b      	cmp	r3, r9
 80078fe:	eba3 0209 	sub.w	r2, r3, r9
 8007902:	d123      	bne.n	800794c <_scanf_float+0x3c0>
 8007904:	2200      	movs	r2, #0
 8007906:	4659      	mov	r1, fp
 8007908:	4640      	mov	r0, r8
 800790a:	f000 ff27 	bl	800875c <_strtod_r>
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	f012 0f02 	tst.w	r2, #2
 8007916:	ec57 6b10 	vmov	r6, r7, d0
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	d021      	beq.n	8007962 <_scanf_float+0x3d6>
 800791e:	9903      	ldr	r1, [sp, #12]
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	600a      	str	r2, [r1, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	e9c3 6700 	strd	r6, r7, [r3]
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	60e3      	str	r3, [r4, #12]
 8007930:	e66d      	b.n	800760e <_scanf_float+0x82>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0e5      	beq.n	8007904 <_scanf_float+0x378>
 8007938:	9905      	ldr	r1, [sp, #20]
 800793a:	230a      	movs	r3, #10
 800793c:	462a      	mov	r2, r5
 800793e:	3101      	adds	r1, #1
 8007940:	4640      	mov	r0, r8
 8007942:	f000 ff93 	bl	800886c <_strtol_r>
 8007946:	9b04      	ldr	r3, [sp, #16]
 8007948:	9e05      	ldr	r6, [sp, #20]
 800794a:	1ac2      	subs	r2, r0, r3
 800794c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007950:	429e      	cmp	r6, r3
 8007952:	bf28      	it	cs
 8007954:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007958:	4912      	ldr	r1, [pc, #72]	; (80079a4 <_scanf_float+0x418>)
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f8ba 	bl	8007ad4 <siprintf>
 8007960:	e7d0      	b.n	8007904 <_scanf_float+0x378>
 8007962:	9903      	ldr	r1, [sp, #12]
 8007964:	f012 0f04 	tst.w	r2, #4
 8007968:	f103 0204 	add.w	r2, r3, #4
 800796c:	600a      	str	r2, [r1, #0]
 800796e:	d1d9      	bne.n	8007924 <_scanf_float+0x398>
 8007970:	f8d3 8000 	ldr.w	r8, [r3]
 8007974:	ee10 2a10 	vmov	r2, s0
 8007978:	ee10 0a10 	vmov	r0, s0
 800797c:	463b      	mov	r3, r7
 800797e:	4639      	mov	r1, r7
 8007980:	f7f9 f8d4 	bl	8000b2c <__aeabi_dcmpun>
 8007984:	b128      	cbz	r0, 8007992 <_scanf_float+0x406>
 8007986:	4808      	ldr	r0, [pc, #32]	; (80079a8 <_scanf_float+0x41c>)
 8007988:	f000 f89e 	bl	8007ac8 <nanf>
 800798c:	ed88 0a00 	vstr	s0, [r8]
 8007990:	e7cb      	b.n	800792a <_scanf_float+0x39e>
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f9 f927 	bl	8000be8 <__aeabi_d2f>
 800799a:	f8c8 0000 	str.w	r0, [r8]
 800799e:	e7c4      	b.n	800792a <_scanf_float+0x39e>
 80079a0:	2500      	movs	r5, #0
 80079a2:	e634      	b.n	800760e <_scanf_float+0x82>
 80079a4:	0800b7a4 	.word	0x0800b7a4
 80079a8:	0800bc18 	.word	0x0800bc18

080079ac <iprintf>:
 80079ac:	b40f      	push	{r0, r1, r2, r3}
 80079ae:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <iprintf+0x2c>)
 80079b0:	b513      	push	{r0, r1, r4, lr}
 80079b2:	681c      	ldr	r4, [r3, #0]
 80079b4:	b124      	cbz	r4, 80079c0 <iprintf+0x14>
 80079b6:	69a3      	ldr	r3, [r4, #24]
 80079b8:	b913      	cbnz	r3, 80079c0 <iprintf+0x14>
 80079ba:	4620      	mov	r0, r4
 80079bc:	f001 ffac 	bl	8009918 <__sinit>
 80079c0:	ab05      	add	r3, sp, #20
 80079c2:	9a04      	ldr	r2, [sp, #16]
 80079c4:	68a1      	ldr	r1, [r4, #8]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f003 fb83 	bl	800b0d4 <_vfiprintf_r>
 80079ce:	b002      	add	sp, #8
 80079d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d4:	b004      	add	sp, #16
 80079d6:	4770      	bx	lr
 80079d8:	2000000c 	.word	0x2000000c

080079dc <_puts_r>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	460e      	mov	r6, r1
 80079e0:	4605      	mov	r5, r0
 80079e2:	b118      	cbz	r0, 80079ec <_puts_r+0x10>
 80079e4:	6983      	ldr	r3, [r0, #24]
 80079e6:	b90b      	cbnz	r3, 80079ec <_puts_r+0x10>
 80079e8:	f001 ff96 	bl	8009918 <__sinit>
 80079ec:	69ab      	ldr	r3, [r5, #24]
 80079ee:	68ac      	ldr	r4, [r5, #8]
 80079f0:	b913      	cbnz	r3, 80079f8 <_puts_r+0x1c>
 80079f2:	4628      	mov	r0, r5
 80079f4:	f001 ff90 	bl	8009918 <__sinit>
 80079f8:	4b2c      	ldr	r3, [pc, #176]	; (8007aac <_puts_r+0xd0>)
 80079fa:	429c      	cmp	r4, r3
 80079fc:	d120      	bne.n	8007a40 <_puts_r+0x64>
 80079fe:	686c      	ldr	r4, [r5, #4]
 8007a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a02:	07db      	lsls	r3, r3, #31
 8007a04:	d405      	bmi.n	8007a12 <_puts_r+0x36>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	0598      	lsls	r0, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_puts_r+0x36>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f002 fb94 	bl	800a13a <__retarget_lock_acquire_recursive>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	0719      	lsls	r1, r3, #28
 8007a16:	d51d      	bpl.n	8007a54 <_puts_r+0x78>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	b1db      	cbz	r3, 8007a54 <_puts_r+0x78>
 8007a1c:	3e01      	subs	r6, #1
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a24:	3b01      	subs	r3, #1
 8007a26:	60a3      	str	r3, [r4, #8]
 8007a28:	bb39      	cbnz	r1, 8007a7a <_puts_r+0x9e>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da38      	bge.n	8007aa0 <_puts_r+0xc4>
 8007a2e:	4622      	mov	r2, r4
 8007a30:	210a      	movs	r1, #10
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 ff1c 	bl	8008870 <__swbuf_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d011      	beq.n	8007a60 <_puts_r+0x84>
 8007a3c:	250a      	movs	r5, #10
 8007a3e:	e011      	b.n	8007a64 <_puts_r+0x88>
 8007a40:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <_puts_r+0xd4>)
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d101      	bne.n	8007a4a <_puts_r+0x6e>
 8007a46:	68ac      	ldr	r4, [r5, #8]
 8007a48:	e7da      	b.n	8007a00 <_puts_r+0x24>
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <_puts_r+0xd8>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	bf08      	it	eq
 8007a50:	68ec      	ldreq	r4, [r5, #12]
 8007a52:	e7d5      	b.n	8007a00 <_puts_r+0x24>
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 ff5c 	bl	8008914 <__swsetup_r>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d0dd      	beq.n	8007a1c <_puts_r+0x40>
 8007a60:	f04f 35ff 	mov.w	r5, #4294967295
 8007a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a66:	07da      	lsls	r2, r3, #31
 8007a68:	d405      	bmi.n	8007a76 <_puts_r+0x9a>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	059b      	lsls	r3, r3, #22
 8007a6e:	d402      	bmi.n	8007a76 <_puts_r+0x9a>
 8007a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a72:	f002 fb63 	bl	800a13c <__retarget_lock_release_recursive>
 8007a76:	4628      	mov	r0, r5
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da04      	bge.n	8007a88 <_puts_r+0xac>
 8007a7e:	69a2      	ldr	r2, [r4, #24]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	dc06      	bgt.n	8007a92 <_puts_r+0xb6>
 8007a84:	290a      	cmp	r1, #10
 8007a86:	d004      	beq.n	8007a92 <_puts_r+0xb6>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	6022      	str	r2, [r4, #0]
 8007a8e:	7019      	strb	r1, [r3, #0]
 8007a90:	e7c5      	b.n	8007a1e <_puts_r+0x42>
 8007a92:	4622      	mov	r2, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 feeb 	bl	8008870 <__swbuf_r>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d1bf      	bne.n	8007a1e <_puts_r+0x42>
 8007a9e:	e7df      	b.n	8007a60 <_puts_r+0x84>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	250a      	movs	r5, #10
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	701d      	strb	r5, [r3, #0]
 8007aaa:	e7db      	b.n	8007a64 <_puts_r+0x88>
 8007aac:	0800b9b4 	.word	0x0800b9b4
 8007ab0:	0800b9d4 	.word	0x0800b9d4
 8007ab4:	0800b994 	.word	0x0800b994

08007ab8 <puts>:
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <puts+0xc>)
 8007aba:	4601      	mov	r1, r0
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	f7ff bf8d 	b.w	80079dc <_puts_r>
 8007ac2:	bf00      	nop
 8007ac4:	2000000c 	.word	0x2000000c

08007ac8 <nanf>:
 8007ac8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ad0 <nanf+0x8>
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	7fc00000 	.word	0x7fc00000

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f003 f9c2 	bl	800ae80 <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	2000000c 	.word	0x2000000c
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <sulp>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	ec45 4b10 	vmov	d0, r4, r5
 8007b1e:	4616      	mov	r6, r2
 8007b20:	f002 ff0c 	bl	800a93c <__ulp>
 8007b24:	ec51 0b10 	vmov	r0, r1, d0
 8007b28:	b17e      	cbz	r6, 8007b4a <sulp+0x36>
 8007b2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dd09      	ble.n	8007b4a <sulp+0x36>
 8007b36:	051b      	lsls	r3, r3, #20
 8007b38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b3c:	2400      	movs	r4, #0
 8007b3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b42:	4622      	mov	r2, r4
 8007b44:	462b      	mov	r3, r5
 8007b46:	f7f8 fd57 	bl	80005f8 <__aeabi_dmul>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	0000      	movs	r0, r0
	...

08007b50 <_strtod_l>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b02 	vpush	{d8}
 8007b58:	b09d      	sub	sp, #116	; 0x74
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9318      	str	r3, [sp, #96]	; 0x60
 8007b60:	4ba2      	ldr	r3, [pc, #648]	; (8007dec <_strtod_l+0x29c>)
 8007b62:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	9305      	str	r3, [sp, #20]
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	4688      	mov	r8, r1
 8007b6e:	f7f8 fb2f 	bl	80001d0 <strlen>
 8007b72:	f04f 0a00 	mov.w	sl, #0
 8007b76:	4605      	mov	r5, r0
 8007b78:	f04f 0b00 	mov.w	fp, #0
 8007b7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	2a2b      	cmp	r2, #43	; 0x2b
 8007b86:	d04e      	beq.n	8007c26 <_strtod_l+0xd6>
 8007b88:	d83b      	bhi.n	8007c02 <_strtod_l+0xb2>
 8007b8a:	2a0d      	cmp	r2, #13
 8007b8c:	d834      	bhi.n	8007bf8 <_strtod_l+0xa8>
 8007b8e:	2a08      	cmp	r2, #8
 8007b90:	d834      	bhi.n	8007bfc <_strtod_l+0xac>
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d03e      	beq.n	8007c14 <_strtod_l+0xc4>
 8007b96:	2300      	movs	r3, #0
 8007b98:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007b9c:	7833      	ldrb	r3, [r6, #0]
 8007b9e:	2b30      	cmp	r3, #48	; 0x30
 8007ba0:	f040 80b0 	bne.w	8007d04 <_strtod_l+0x1b4>
 8007ba4:	7873      	ldrb	r3, [r6, #1]
 8007ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007baa:	2b58      	cmp	r3, #88	; 0x58
 8007bac:	d168      	bne.n	8007c80 <_strtod_l+0x130>
 8007bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	ab18      	add	r3, sp, #96	; 0x60
 8007bb4:	9702      	str	r7, [sp, #8]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4a8d      	ldr	r2, [pc, #564]	; (8007df0 <_strtod_l+0x2a0>)
 8007bba:	ab19      	add	r3, sp, #100	; 0x64
 8007bbc:	a917      	add	r1, sp, #92	; 0x5c
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f001 ffae 	bl	8009b20 <__gethex>
 8007bc4:	f010 0707 	ands.w	r7, r0, #7
 8007bc8:	4605      	mov	r5, r0
 8007bca:	d005      	beq.n	8007bd8 <_strtod_l+0x88>
 8007bcc:	2f06      	cmp	r7, #6
 8007bce:	d12c      	bne.n	8007c2a <_strtod_l+0xda>
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 8590 	bne.w	8008700 <_strtod_l+0xbb0>
 8007be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be2:	b1eb      	cbz	r3, 8007c20 <_strtod_l+0xd0>
 8007be4:	4652      	mov	r2, sl
 8007be6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bea:	ec43 2b10 	vmov	d0, r2, r3
 8007bee:	b01d      	add	sp, #116	; 0x74
 8007bf0:	ecbd 8b02 	vpop	{d8}
 8007bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf8:	2a20      	cmp	r2, #32
 8007bfa:	d1cc      	bne.n	8007b96 <_strtod_l+0x46>
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c00:	e7be      	b.n	8007b80 <_strtod_l+0x30>
 8007c02:	2a2d      	cmp	r2, #45	; 0x2d
 8007c04:	d1c7      	bne.n	8007b96 <_strtod_l+0x46>
 8007c06:	2201      	movs	r2, #1
 8007c08:	920a      	str	r2, [sp, #40]	; 0x28
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1c2      	bne.n	8007b9a <_strtod_l+0x4a>
 8007c14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f040 856e 	bne.w	80086fc <_strtod_l+0xbac>
 8007c20:	4652      	mov	r2, sl
 8007c22:	465b      	mov	r3, fp
 8007c24:	e7e1      	b.n	8007bea <_strtod_l+0x9a>
 8007c26:	2200      	movs	r2, #0
 8007c28:	e7ee      	b.n	8007c08 <_strtod_l+0xb8>
 8007c2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c2c:	b13a      	cbz	r2, 8007c3e <_strtod_l+0xee>
 8007c2e:	2135      	movs	r1, #53	; 0x35
 8007c30:	a81a      	add	r0, sp, #104	; 0x68
 8007c32:	f002 ff8e 	bl	800ab52 <__copybits>
 8007c36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f002 fb4d 	bl	800a2d8 <_Bfree>
 8007c3e:	3f01      	subs	r7, #1
 8007c40:	2f04      	cmp	r7, #4
 8007c42:	d806      	bhi.n	8007c52 <_strtod_l+0x102>
 8007c44:	e8df f007 	tbb	[pc, r7]
 8007c48:	1714030a 	.word	0x1714030a
 8007c4c:	0a          	.byte	0x0a
 8007c4d:	00          	.byte	0x00
 8007c4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007c52:	0728      	lsls	r0, r5, #28
 8007c54:	d5c0      	bpl.n	8007bd8 <_strtod_l+0x88>
 8007c56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c5a:	e7bd      	b.n	8007bd8 <_strtod_l+0x88>
 8007c5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007c60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c6e:	e7f0      	b.n	8007c52 <_strtod_l+0x102>
 8007c70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007df4 <_strtod_l+0x2a4>
 8007c74:	e7ed      	b.n	8007c52 <_strtod_l+0x102>
 8007c76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007c7a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c7e:	e7e8      	b.n	8007c52 <_strtod_l+0x102>
 8007c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b30      	cmp	r3, #48	; 0x30
 8007c8a:	d0f9      	beq.n	8007c80 <_strtod_l+0x130>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0a3      	beq.n	8007bd8 <_strtod_l+0x88>
 8007c90:	2301      	movs	r3, #1
 8007c92:	f04f 0900 	mov.w	r9, #0
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c9a:	9308      	str	r3, [sp, #32]
 8007c9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ca0:	464f      	mov	r7, r9
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ca6:	7806      	ldrb	r6, [r0, #0]
 8007ca8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007cac:	b2d9      	uxtb	r1, r3
 8007cae:	2909      	cmp	r1, #9
 8007cb0:	d92a      	bls.n	8007d08 <_strtod_l+0x1b8>
 8007cb2:	9905      	ldr	r1, [sp, #20]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	f003 fb9a 	bl	800b3ee <strncmp>
 8007cba:	b398      	cbz	r0, 8007d24 <_strtod_l+0x1d4>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	463d      	mov	r5, r7
 8007cc2:	9005      	str	r0, [sp, #20]
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2a65      	cmp	r2, #101	; 0x65
 8007cc8:	d001      	beq.n	8007cce <_strtod_l+0x17e>
 8007cca:	2a45      	cmp	r2, #69	; 0x45
 8007ccc:	d118      	bne.n	8007d00 <_strtod_l+0x1b0>
 8007cce:	b91d      	cbnz	r5, 8007cd8 <_strtod_l+0x188>
 8007cd0:	9a04      	ldr	r2, [sp, #16]
 8007cd2:	4302      	orrs	r2, r0
 8007cd4:	d09e      	beq.n	8007c14 <_strtod_l+0xc4>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007cdc:	f108 0201 	add.w	r2, r8, #1
 8007ce0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ce2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007ce6:	2a2b      	cmp	r2, #43	; 0x2b
 8007ce8:	d075      	beq.n	8007dd6 <_strtod_l+0x286>
 8007cea:	2a2d      	cmp	r2, #45	; 0x2d
 8007cec:	d07b      	beq.n	8007de6 <_strtod_l+0x296>
 8007cee:	f04f 0c00 	mov.w	ip, #0
 8007cf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007cf6:	2909      	cmp	r1, #9
 8007cf8:	f240 8082 	bls.w	8007e00 <_strtod_l+0x2b0>
 8007cfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d00:	2600      	movs	r6, #0
 8007d02:	e09d      	b.n	8007e40 <_strtod_l+0x2f0>
 8007d04:	2300      	movs	r3, #0
 8007d06:	e7c4      	b.n	8007c92 <_strtod_l+0x142>
 8007d08:	2f08      	cmp	r7, #8
 8007d0a:	bfd8      	it	le
 8007d0c:	9907      	ldrle	r1, [sp, #28]
 8007d0e:	f100 0001 	add.w	r0, r0, #1
 8007d12:	bfda      	itte	le
 8007d14:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d18:	9307      	strle	r3, [sp, #28]
 8007d1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007d1e:	3701      	adds	r7, #1
 8007d20:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d22:	e7bf      	b.n	8007ca4 <_strtod_l+0x154>
 8007d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d26:	195a      	adds	r2, r3, r5
 8007d28:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d2a:	5d5a      	ldrb	r2, [r3, r5]
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	d037      	beq.n	8007da0 <_strtod_l+0x250>
 8007d30:	9005      	str	r0, [sp, #20]
 8007d32:	463d      	mov	r5, r7
 8007d34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d912      	bls.n	8007d62 <_strtod_l+0x212>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e7c2      	b.n	8007cc6 <_strtod_l+0x176>
 8007d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	3001      	adds	r0, #1
 8007d4a:	2a30      	cmp	r2, #48	; 0x30
 8007d4c:	d0f8      	beq.n	8007d40 <_strtod_l+0x1f0>
 8007d4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	f200 84d9 	bhi.w	800870a <_strtod_l+0xbba>
 8007d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d5a:	9005      	str	r0, [sp, #20]
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	9308      	str	r3, [sp, #32]
 8007d60:	4605      	mov	r5, r0
 8007d62:	3a30      	subs	r2, #48	; 0x30
 8007d64:	f100 0301 	add.w	r3, r0, #1
 8007d68:	d014      	beq.n	8007d94 <_strtod_l+0x244>
 8007d6a:	9905      	ldr	r1, [sp, #20]
 8007d6c:	4419      	add	r1, r3
 8007d6e:	9105      	str	r1, [sp, #20]
 8007d70:	462b      	mov	r3, r5
 8007d72:	eb00 0e05 	add.w	lr, r0, r5
 8007d76:	210a      	movs	r1, #10
 8007d78:	4573      	cmp	r3, lr
 8007d7a:	d113      	bne.n	8007da4 <_strtod_l+0x254>
 8007d7c:	182b      	adds	r3, r5, r0
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	f105 0501 	add.w	r5, r5, #1
 8007d84:	4405      	add	r5, r0
 8007d86:	dc1c      	bgt.n	8007dc2 <_strtod_l+0x272>
 8007d88:	9907      	ldr	r1, [sp, #28]
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	fb03 2301 	mla	r3, r3, r1, r2
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	2300      	movs	r3, #0
 8007d94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d96:	1c51      	adds	r1, r2, #1
 8007d98:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d9a:	7852      	ldrb	r2, [r2, #1]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	e7c9      	b.n	8007d34 <_strtod_l+0x1e4>
 8007da0:	4638      	mov	r0, r7
 8007da2:	e7d2      	b.n	8007d4a <_strtod_l+0x1fa>
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	dc04      	bgt.n	8007db2 <_strtod_l+0x262>
 8007da8:	9e07      	ldr	r6, [sp, #28]
 8007daa:	434e      	muls	r6, r1
 8007dac:	9607      	str	r6, [sp, #28]
 8007dae:	3301      	adds	r3, #1
 8007db0:	e7e2      	b.n	8007d78 <_strtod_l+0x228>
 8007db2:	f103 0c01 	add.w	ip, r3, #1
 8007db6:	f1bc 0f10 	cmp.w	ip, #16
 8007dba:	bfd8      	it	le
 8007dbc:	fb01 f909 	mulle.w	r9, r1, r9
 8007dc0:	e7f5      	b.n	8007dae <_strtod_l+0x25e>
 8007dc2:	2d10      	cmp	r5, #16
 8007dc4:	bfdc      	itt	le
 8007dc6:	230a      	movle	r3, #10
 8007dc8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007dcc:	e7e1      	b.n	8007d92 <_strtod_l+0x242>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e77c      	b.n	8007cd0 <_strtod_l+0x180>
 8007dd6:	f04f 0c00 	mov.w	ip, #0
 8007dda:	f108 0202 	add.w	r2, r8, #2
 8007dde:	9217      	str	r2, [sp, #92]	; 0x5c
 8007de0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007de4:	e785      	b.n	8007cf2 <_strtod_l+0x1a2>
 8007de6:	f04f 0c01 	mov.w	ip, #1
 8007dea:	e7f6      	b.n	8007dda <_strtod_l+0x28a>
 8007dec:	0800ba5c 	.word	0x0800ba5c
 8007df0:	0800b7ac 	.word	0x0800b7ac
 8007df4:	7ff00000 	.word	0x7ff00000
 8007df8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007dfa:	1c51      	adds	r1, r2, #1
 8007dfc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007dfe:	7852      	ldrb	r2, [r2, #1]
 8007e00:	2a30      	cmp	r2, #48	; 0x30
 8007e02:	d0f9      	beq.n	8007df8 <_strtod_l+0x2a8>
 8007e04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e08:	2908      	cmp	r1, #8
 8007e0a:	f63f af79 	bhi.w	8007d00 <_strtod_l+0x1b0>
 8007e0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007e12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e14:	9206      	str	r2, [sp, #24]
 8007e16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e18:	1c51      	adds	r1, r2, #1
 8007e1a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e1c:	7852      	ldrb	r2, [r2, #1]
 8007e1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007e22:	2e09      	cmp	r6, #9
 8007e24:	d937      	bls.n	8007e96 <_strtod_l+0x346>
 8007e26:	9e06      	ldr	r6, [sp, #24]
 8007e28:	1b89      	subs	r1, r1, r6
 8007e2a:	2908      	cmp	r1, #8
 8007e2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007e30:	dc02      	bgt.n	8007e38 <_strtod_l+0x2e8>
 8007e32:	4576      	cmp	r6, lr
 8007e34:	bfa8      	it	ge
 8007e36:	4676      	movge	r6, lr
 8007e38:	f1bc 0f00 	cmp.w	ip, #0
 8007e3c:	d000      	beq.n	8007e40 <_strtod_l+0x2f0>
 8007e3e:	4276      	negs	r6, r6
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	d14d      	bne.n	8007ee0 <_strtod_l+0x390>
 8007e44:	9904      	ldr	r1, [sp, #16]
 8007e46:	4301      	orrs	r1, r0
 8007e48:	f47f aec6 	bne.w	8007bd8 <_strtod_l+0x88>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f aee1 	bne.w	8007c14 <_strtod_l+0xc4>
 8007e52:	2a69      	cmp	r2, #105	; 0x69
 8007e54:	d027      	beq.n	8007ea6 <_strtod_l+0x356>
 8007e56:	dc24      	bgt.n	8007ea2 <_strtod_l+0x352>
 8007e58:	2a49      	cmp	r2, #73	; 0x49
 8007e5a:	d024      	beq.n	8007ea6 <_strtod_l+0x356>
 8007e5c:	2a4e      	cmp	r2, #78	; 0x4e
 8007e5e:	f47f aed9 	bne.w	8007c14 <_strtod_l+0xc4>
 8007e62:	499f      	ldr	r1, [pc, #636]	; (80080e0 <_strtod_l+0x590>)
 8007e64:	a817      	add	r0, sp, #92	; 0x5c
 8007e66:	f002 f8b3 	bl	8009fd0 <__match>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aed2 	beq.w	8007c14 <_strtod_l+0xc4>
 8007e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b28      	cmp	r3, #40	; 0x28
 8007e76:	d12d      	bne.n	8007ed4 <_strtod_l+0x384>
 8007e78:	499a      	ldr	r1, [pc, #616]	; (80080e4 <_strtod_l+0x594>)
 8007e7a:	aa1a      	add	r2, sp, #104	; 0x68
 8007e7c:	a817      	add	r0, sp, #92	; 0x5c
 8007e7e:	f002 f8bb 	bl	8009ff8 <__hexnan>
 8007e82:	2805      	cmp	r0, #5
 8007e84:	d126      	bne.n	8007ed4 <_strtod_l+0x384>
 8007e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007e8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e94:	e6a0      	b.n	8007bd8 <_strtod_l+0x88>
 8007e96:	210a      	movs	r1, #10
 8007e98:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007e9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ea0:	e7b9      	b.n	8007e16 <_strtod_l+0x2c6>
 8007ea2:	2a6e      	cmp	r2, #110	; 0x6e
 8007ea4:	e7db      	b.n	8007e5e <_strtod_l+0x30e>
 8007ea6:	4990      	ldr	r1, [pc, #576]	; (80080e8 <_strtod_l+0x598>)
 8007ea8:	a817      	add	r0, sp, #92	; 0x5c
 8007eaa:	f002 f891 	bl	8009fd0 <__match>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f43f aeb0 	beq.w	8007c14 <_strtod_l+0xc4>
 8007eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eb6:	498d      	ldr	r1, [pc, #564]	; (80080ec <_strtod_l+0x59c>)
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	a817      	add	r0, sp, #92	; 0x5c
 8007ebc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ebe:	f002 f887 	bl	8009fd0 <__match>
 8007ec2:	b910      	cbnz	r0, 8007eca <_strtod_l+0x37a>
 8007ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007eca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80080fc <_strtod_l+0x5ac>
 8007ece:	f04f 0a00 	mov.w	sl, #0
 8007ed2:	e681      	b.n	8007bd8 <_strtod_l+0x88>
 8007ed4:	4886      	ldr	r0, [pc, #536]	; (80080f0 <_strtod_l+0x5a0>)
 8007ed6:	f003 fa2f 	bl	800b338 <nan>
 8007eda:	ec5b ab10 	vmov	sl, fp, d0
 8007ede:	e67b      	b.n	8007bd8 <_strtod_l+0x88>
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	9807      	ldr	r0, [sp, #28]
 8007ee4:	1af3      	subs	r3, r6, r3
 8007ee6:	2f00      	cmp	r7, #0
 8007ee8:	bf08      	it	eq
 8007eea:	462f      	moveq	r7, r5
 8007eec:	2d10      	cmp	r5, #16
 8007eee:	9306      	str	r3, [sp, #24]
 8007ef0:	46a8      	mov	r8, r5
 8007ef2:	bfa8      	it	ge
 8007ef4:	f04f 0810 	movge.w	r8, #16
 8007ef8:	f7f8 fb04 	bl	8000504 <__aeabi_ui2d>
 8007efc:	2d09      	cmp	r5, #9
 8007efe:	4682      	mov	sl, r0
 8007f00:	468b      	mov	fp, r1
 8007f02:	dd13      	ble.n	8007f2c <_strtod_l+0x3dc>
 8007f04:	4b7b      	ldr	r3, [pc, #492]	; (80080f4 <_strtod_l+0x5a4>)
 8007f06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f0e:	f7f8 fb73 	bl	80005f8 <__aeabi_dmul>
 8007f12:	4682      	mov	sl, r0
 8007f14:	4648      	mov	r0, r9
 8007f16:	468b      	mov	fp, r1
 8007f18:	f7f8 faf4 	bl	8000504 <__aeabi_ui2d>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4650      	mov	r0, sl
 8007f22:	4659      	mov	r1, fp
 8007f24:	f7f8 f9b2 	bl	800028c <__adddf3>
 8007f28:	4682      	mov	sl, r0
 8007f2a:	468b      	mov	fp, r1
 8007f2c:	2d0f      	cmp	r5, #15
 8007f2e:	dc38      	bgt.n	8007fa2 <_strtod_l+0x452>
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f43f ae50 	beq.w	8007bd8 <_strtod_l+0x88>
 8007f38:	dd24      	ble.n	8007f84 <_strtod_l+0x434>
 8007f3a:	2b16      	cmp	r3, #22
 8007f3c:	dc0b      	bgt.n	8007f56 <_strtod_l+0x406>
 8007f3e:	496d      	ldr	r1, [pc, #436]	; (80080f4 <_strtod_l+0x5a4>)
 8007f40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f48:	4652      	mov	r2, sl
 8007f4a:	465b      	mov	r3, fp
 8007f4c:	f7f8 fb54 	bl	80005f8 <__aeabi_dmul>
 8007f50:	4682      	mov	sl, r0
 8007f52:	468b      	mov	fp, r1
 8007f54:	e640      	b.n	8007bd8 <_strtod_l+0x88>
 8007f56:	9a06      	ldr	r2, [sp, #24]
 8007f58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	db20      	blt.n	8007fa2 <_strtod_l+0x452>
 8007f60:	4c64      	ldr	r4, [pc, #400]	; (80080f4 <_strtod_l+0x5a4>)
 8007f62:	f1c5 050f 	rsb	r5, r5, #15
 8007f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	465b      	mov	r3, fp
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	1b5d      	subs	r5, r3, r5
 8007f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f82:	e7e3      	b.n	8007f4c <_strtod_l+0x3fc>
 8007f84:	9b06      	ldr	r3, [sp, #24]
 8007f86:	3316      	adds	r3, #22
 8007f88:	db0b      	blt.n	8007fa2 <_strtod_l+0x452>
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	1b9e      	subs	r6, r3, r6
 8007f8e:	4b59      	ldr	r3, [pc, #356]	; (80080f4 <_strtod_l+0x5a4>)
 8007f90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007f94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f98:	4650      	mov	r0, sl
 8007f9a:	4659      	mov	r1, fp
 8007f9c:	f7f8 fc56 	bl	800084c <__aeabi_ddiv>
 8007fa0:	e7d6      	b.n	8007f50 <_strtod_l+0x400>
 8007fa2:	9b06      	ldr	r3, [sp, #24]
 8007fa4:	eba5 0808 	sub.w	r8, r5, r8
 8007fa8:	4498      	add	r8, r3
 8007faa:	f1b8 0f00 	cmp.w	r8, #0
 8007fae:	dd74      	ble.n	800809a <_strtod_l+0x54a>
 8007fb0:	f018 030f 	ands.w	r3, r8, #15
 8007fb4:	d00a      	beq.n	8007fcc <_strtod_l+0x47c>
 8007fb6:	494f      	ldr	r1, [pc, #316]	; (80080f4 <_strtod_l+0x5a4>)
 8007fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	465b      	mov	r3, fp
 8007fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	4682      	mov	sl, r0
 8007fca:	468b      	mov	fp, r1
 8007fcc:	f038 080f 	bics.w	r8, r8, #15
 8007fd0:	d04f      	beq.n	8008072 <_strtod_l+0x522>
 8007fd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fd6:	dd22      	ble.n	800801e <_strtod_l+0x4ce>
 8007fd8:	2500      	movs	r5, #0
 8007fda:	462e      	mov	r6, r5
 8007fdc:	9507      	str	r5, [sp, #28]
 8007fde:	9505      	str	r5, [sp, #20]
 8007fe0:	2322      	movs	r3, #34	; 0x22
 8007fe2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80080fc <_strtod_l+0x5ac>
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	f04f 0a00 	mov.w	sl, #0
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f43f adf2 	beq.w	8007bd8 <_strtod_l+0x88>
 8007ff4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f002 f96e 	bl	800a2d8 <_Bfree>
 8007ffc:	9905      	ldr	r1, [sp, #20]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f002 f96a 	bl	800a2d8 <_Bfree>
 8008004:	4631      	mov	r1, r6
 8008006:	4620      	mov	r0, r4
 8008008:	f002 f966 	bl	800a2d8 <_Bfree>
 800800c:	9907      	ldr	r1, [sp, #28]
 800800e:	4620      	mov	r0, r4
 8008010:	f002 f962 	bl	800a2d8 <_Bfree>
 8008014:	4629      	mov	r1, r5
 8008016:	4620      	mov	r0, r4
 8008018:	f002 f95e 	bl	800a2d8 <_Bfree>
 800801c:	e5dc      	b.n	8007bd8 <_strtod_l+0x88>
 800801e:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <_strtod_l+0x5a8>)
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	2300      	movs	r3, #0
 8008024:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008028:	4650      	mov	r0, sl
 800802a:	4659      	mov	r1, fp
 800802c:	4699      	mov	r9, r3
 800802e:	f1b8 0f01 	cmp.w	r8, #1
 8008032:	dc21      	bgt.n	8008078 <_strtod_l+0x528>
 8008034:	b10b      	cbz	r3, 800803a <_strtod_l+0x4ea>
 8008036:	4682      	mov	sl, r0
 8008038:	468b      	mov	fp, r1
 800803a:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <_strtod_l+0x5a8>)
 800803c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008040:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	e9d9 0100 	ldrd	r0, r1, [r9]
 800804c:	f7f8 fad4 	bl	80005f8 <__aeabi_dmul>
 8008050:	4b2a      	ldr	r3, [pc, #168]	; (80080fc <_strtod_l+0x5ac>)
 8008052:	460a      	mov	r2, r1
 8008054:	400b      	ands	r3, r1
 8008056:	492a      	ldr	r1, [pc, #168]	; (8008100 <_strtod_l+0x5b0>)
 8008058:	428b      	cmp	r3, r1
 800805a:	4682      	mov	sl, r0
 800805c:	d8bc      	bhi.n	8007fd8 <_strtod_l+0x488>
 800805e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008062:	428b      	cmp	r3, r1
 8008064:	bf86      	itte	hi
 8008066:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008104 <_strtod_l+0x5b4>
 800806a:	f04f 3aff 	movhi.w	sl, #4294967295
 800806e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008072:	2300      	movs	r3, #0
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	e084      	b.n	8008182 <_strtod_l+0x632>
 8008078:	f018 0f01 	tst.w	r8, #1
 800807c:	d005      	beq.n	800808a <_strtod_l+0x53a>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	2301      	movs	r3, #1
 800808a:	9a04      	ldr	r2, [sp, #16]
 800808c:	3208      	adds	r2, #8
 800808e:	f109 0901 	add.w	r9, r9, #1
 8008092:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008096:	9204      	str	r2, [sp, #16]
 8008098:	e7c9      	b.n	800802e <_strtod_l+0x4de>
 800809a:	d0ea      	beq.n	8008072 <_strtod_l+0x522>
 800809c:	f1c8 0800 	rsb	r8, r8, #0
 80080a0:	f018 020f 	ands.w	r2, r8, #15
 80080a4:	d00a      	beq.n	80080bc <_strtod_l+0x56c>
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <_strtod_l+0x5a4>)
 80080a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ac:	4650      	mov	r0, sl
 80080ae:	4659      	mov	r1, fp
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 fbca 	bl	800084c <__aeabi_ddiv>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080c0:	d0d7      	beq.n	8008072 <_strtod_l+0x522>
 80080c2:	f1b8 0f1f 	cmp.w	r8, #31
 80080c6:	dd1f      	ble.n	8008108 <_strtod_l+0x5b8>
 80080c8:	2500      	movs	r5, #0
 80080ca:	462e      	mov	r6, r5
 80080cc:	9507      	str	r5, [sp, #28]
 80080ce:	9505      	str	r5, [sp, #20]
 80080d0:	2322      	movs	r3, #34	; 0x22
 80080d2:	f04f 0a00 	mov.w	sl, #0
 80080d6:	f04f 0b00 	mov.w	fp, #0
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	e786      	b.n	8007fec <_strtod_l+0x49c>
 80080de:	bf00      	nop
 80080e0:	0800b77d 	.word	0x0800b77d
 80080e4:	0800b7c0 	.word	0x0800b7c0
 80080e8:	0800b775 	.word	0x0800b775
 80080ec:	0800b904 	.word	0x0800b904
 80080f0:	0800bc18 	.word	0x0800bc18
 80080f4:	0800baf8 	.word	0x0800baf8
 80080f8:	0800bad0 	.word	0x0800bad0
 80080fc:	7ff00000 	.word	0x7ff00000
 8008100:	7ca00000 	.word	0x7ca00000
 8008104:	7fefffff 	.word	0x7fefffff
 8008108:	f018 0310 	ands.w	r3, r8, #16
 800810c:	bf18      	it	ne
 800810e:	236a      	movne	r3, #106	; 0x6a
 8008110:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80084c0 <_strtod_l+0x970>
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	4650      	mov	r0, sl
 8008118:	4659      	mov	r1, fp
 800811a:	2300      	movs	r3, #0
 800811c:	f018 0f01 	tst.w	r8, #1
 8008120:	d004      	beq.n	800812c <_strtod_l+0x5dc>
 8008122:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008126:	f7f8 fa67 	bl	80005f8 <__aeabi_dmul>
 800812a:	2301      	movs	r3, #1
 800812c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008130:	f109 0908 	add.w	r9, r9, #8
 8008134:	d1f2      	bne.n	800811c <_strtod_l+0x5cc>
 8008136:	b10b      	cbz	r3, 800813c <_strtod_l+0x5ec>
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	9b04      	ldr	r3, [sp, #16]
 800813e:	b1c3      	cbz	r3, 8008172 <_strtod_l+0x622>
 8008140:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008144:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008148:	2b00      	cmp	r3, #0
 800814a:	4659      	mov	r1, fp
 800814c:	dd11      	ble.n	8008172 <_strtod_l+0x622>
 800814e:	2b1f      	cmp	r3, #31
 8008150:	f340 8124 	ble.w	800839c <_strtod_l+0x84c>
 8008154:	2b34      	cmp	r3, #52	; 0x34
 8008156:	bfde      	ittt	le
 8008158:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800815c:	f04f 33ff 	movle.w	r3, #4294967295
 8008160:	fa03 f202 	lslle.w	r2, r3, r2
 8008164:	f04f 0a00 	mov.w	sl, #0
 8008168:	bfcc      	ite	gt
 800816a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800816e:	ea02 0b01 	andle.w	fp, r2, r1
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	4650      	mov	r0, sl
 8008178:	4659      	mov	r1, fp
 800817a:	f7f8 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800817e:	2800      	cmp	r0, #0
 8008180:	d1a2      	bne.n	80080c8 <_strtod_l+0x578>
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	9908      	ldr	r1, [sp, #32]
 8008188:	462b      	mov	r3, r5
 800818a:	463a      	mov	r2, r7
 800818c:	4620      	mov	r0, r4
 800818e:	f002 f90b 	bl	800a3a8 <__s2b>
 8008192:	9007      	str	r0, [sp, #28]
 8008194:	2800      	cmp	r0, #0
 8008196:	f43f af1f 	beq.w	8007fd8 <_strtod_l+0x488>
 800819a:	9b05      	ldr	r3, [sp, #20]
 800819c:	1b9e      	subs	r6, r3, r6
 800819e:	9b06      	ldr	r3, [sp, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bfb4      	ite	lt
 80081a4:	4633      	movlt	r3, r6
 80081a6:	2300      	movge	r3, #0
 80081a8:	930c      	str	r3, [sp, #48]	; 0x30
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	2500      	movs	r5, #0
 80081ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081b2:	9312      	str	r3, [sp, #72]	; 0x48
 80081b4:	462e      	mov	r6, r5
 80081b6:	9b07      	ldr	r3, [sp, #28]
 80081b8:	4620      	mov	r0, r4
 80081ba:	6859      	ldr	r1, [r3, #4]
 80081bc:	f002 f84c 	bl	800a258 <_Balloc>
 80081c0:	9005      	str	r0, [sp, #20]
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f43f af0c 	beq.w	8007fe0 <_strtod_l+0x490>
 80081c8:	9b07      	ldr	r3, [sp, #28]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	3202      	adds	r2, #2
 80081ce:	f103 010c 	add.w	r1, r3, #12
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	300c      	adds	r0, #12
 80081d6:	f002 f831 	bl	800a23c <memcpy>
 80081da:	ec4b ab10 	vmov	d0, sl, fp
 80081de:	aa1a      	add	r2, sp, #104	; 0x68
 80081e0:	a919      	add	r1, sp, #100	; 0x64
 80081e2:	4620      	mov	r0, r4
 80081e4:	f002 fc26 	bl	800aa34 <__d2b>
 80081e8:	ec4b ab18 	vmov	d8, sl, fp
 80081ec:	9018      	str	r0, [sp, #96]	; 0x60
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f aef6 	beq.w	8007fe0 <_strtod_l+0x490>
 80081f4:	2101      	movs	r1, #1
 80081f6:	4620      	mov	r0, r4
 80081f8:	f002 f970 	bl	800a4dc <__i2b>
 80081fc:	4606      	mov	r6, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	f43f aeee 	beq.w	8007fe0 <_strtod_l+0x490>
 8008204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008206:	9904      	ldr	r1, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfab      	itete	ge
 800820c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800820e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008210:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008212:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008216:	bfac      	ite	ge
 8008218:	eb03 0902 	addge.w	r9, r3, r2
 800821c:	1ad7      	sublt	r7, r2, r3
 800821e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008220:	eba3 0801 	sub.w	r8, r3, r1
 8008224:	4490      	add	r8, r2
 8008226:	4ba1      	ldr	r3, [pc, #644]	; (80084ac <_strtod_l+0x95c>)
 8008228:	f108 38ff 	add.w	r8, r8, #4294967295
 800822c:	4598      	cmp	r8, r3
 800822e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008232:	f280 80c7 	bge.w	80083c4 <_strtod_l+0x874>
 8008236:	eba3 0308 	sub.w	r3, r3, r8
 800823a:	2b1f      	cmp	r3, #31
 800823c:	eba2 0203 	sub.w	r2, r2, r3
 8008240:	f04f 0101 	mov.w	r1, #1
 8008244:	f300 80b1 	bgt.w	80083aa <_strtod_l+0x85a>
 8008248:	fa01 f303 	lsl.w	r3, r1, r3
 800824c:	930d      	str	r3, [sp, #52]	; 0x34
 800824e:	2300      	movs	r3, #0
 8008250:	9308      	str	r3, [sp, #32]
 8008252:	eb09 0802 	add.w	r8, r9, r2
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	45c1      	cmp	r9, r8
 800825a:	4417      	add	r7, r2
 800825c:	441f      	add	r7, r3
 800825e:	464b      	mov	r3, r9
 8008260:	bfa8      	it	ge
 8008262:	4643      	movge	r3, r8
 8008264:	42bb      	cmp	r3, r7
 8008266:	bfa8      	it	ge
 8008268:	463b      	movge	r3, r7
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfc2      	ittt	gt
 800826e:	eba8 0803 	subgt.w	r8, r8, r3
 8008272:	1aff      	subgt	r7, r7, r3
 8008274:	eba9 0903 	subgt.w	r9, r9, r3
 8008278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd17      	ble.n	80082ae <_strtod_l+0x75e>
 800827e:	4631      	mov	r1, r6
 8008280:	461a      	mov	r2, r3
 8008282:	4620      	mov	r0, r4
 8008284:	f002 f9ea 	bl	800a65c <__pow5mult>
 8008288:	4606      	mov	r6, r0
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f aea8 	beq.w	8007fe0 <_strtod_l+0x490>
 8008290:	4601      	mov	r1, r0
 8008292:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008294:	4620      	mov	r0, r4
 8008296:	f002 f937 	bl	800a508 <__multiply>
 800829a:	900b      	str	r0, [sp, #44]	; 0x2c
 800829c:	2800      	cmp	r0, #0
 800829e:	f43f ae9f 	beq.w	8007fe0 <_strtod_l+0x490>
 80082a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082a4:	4620      	mov	r0, r4
 80082a6:	f002 f817 	bl	800a2d8 <_Bfree>
 80082aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ac:	9318      	str	r3, [sp, #96]	; 0x60
 80082ae:	f1b8 0f00 	cmp.w	r8, #0
 80082b2:	f300 808c 	bgt.w	80083ce <_strtod_l+0x87e>
 80082b6:	9b06      	ldr	r3, [sp, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dd08      	ble.n	80082ce <_strtod_l+0x77e>
 80082bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082be:	9905      	ldr	r1, [sp, #20]
 80082c0:	4620      	mov	r0, r4
 80082c2:	f002 f9cb 	bl	800a65c <__pow5mult>
 80082c6:	9005      	str	r0, [sp, #20]
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f43f ae89 	beq.w	8007fe0 <_strtod_l+0x490>
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	dd08      	ble.n	80082e4 <_strtod_l+0x794>
 80082d2:	9905      	ldr	r1, [sp, #20]
 80082d4:	463a      	mov	r2, r7
 80082d6:	4620      	mov	r0, r4
 80082d8:	f002 fa1a 	bl	800a710 <__lshift>
 80082dc:	9005      	str	r0, [sp, #20]
 80082de:	2800      	cmp	r0, #0
 80082e0:	f43f ae7e 	beq.w	8007fe0 <_strtod_l+0x490>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	dd08      	ble.n	80082fc <_strtod_l+0x7ac>
 80082ea:	4631      	mov	r1, r6
 80082ec:	464a      	mov	r2, r9
 80082ee:	4620      	mov	r0, r4
 80082f0:	f002 fa0e 	bl	800a710 <__lshift>
 80082f4:	4606      	mov	r6, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f ae72 	beq.w	8007fe0 <_strtod_l+0x490>
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008300:	4620      	mov	r0, r4
 8008302:	f002 fa91 	bl	800a828 <__mdiff>
 8008306:	4605      	mov	r5, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f ae69 	beq.w	8007fe0 <_strtod_l+0x490>
 800830e:	68c3      	ldr	r3, [r0, #12]
 8008310:	930b      	str	r3, [sp, #44]	; 0x2c
 8008312:	2300      	movs	r3, #0
 8008314:	60c3      	str	r3, [r0, #12]
 8008316:	4631      	mov	r1, r6
 8008318:	f002 fa6a 	bl	800a7f0 <__mcmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	da60      	bge.n	80083e2 <_strtod_l+0x892>
 8008320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008322:	ea53 030a 	orrs.w	r3, r3, sl
 8008326:	f040 8082 	bne.w	800842e <_strtod_l+0x8de>
 800832a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832e:	2b00      	cmp	r3, #0
 8008330:	d17d      	bne.n	800842e <_strtod_l+0x8de>
 8008332:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008336:	0d1b      	lsrs	r3, r3, #20
 8008338:	051b      	lsls	r3, r3, #20
 800833a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800833e:	d976      	bls.n	800842e <_strtod_l+0x8de>
 8008340:	696b      	ldr	r3, [r5, #20]
 8008342:	b913      	cbnz	r3, 800834a <_strtod_l+0x7fa>
 8008344:	692b      	ldr	r3, [r5, #16]
 8008346:	2b01      	cmp	r3, #1
 8008348:	dd71      	ble.n	800842e <_strtod_l+0x8de>
 800834a:	4629      	mov	r1, r5
 800834c:	2201      	movs	r2, #1
 800834e:	4620      	mov	r0, r4
 8008350:	f002 f9de 	bl	800a710 <__lshift>
 8008354:	4631      	mov	r1, r6
 8008356:	4605      	mov	r5, r0
 8008358:	f002 fa4a 	bl	800a7f0 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	dd66      	ble.n	800842e <_strtod_l+0x8de>
 8008360:	9904      	ldr	r1, [sp, #16]
 8008362:	4a53      	ldr	r2, [pc, #332]	; (80084b0 <_strtod_l+0x960>)
 8008364:	465b      	mov	r3, fp
 8008366:	2900      	cmp	r1, #0
 8008368:	f000 8081 	beq.w	800846e <_strtod_l+0x91e>
 800836c:	ea02 010b 	and.w	r1, r2, fp
 8008370:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008374:	dc7b      	bgt.n	800846e <_strtod_l+0x91e>
 8008376:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800837a:	f77f aea9 	ble.w	80080d0 <_strtod_l+0x580>
 800837e:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <_strtod_l+0x964>)
 8008380:	4650      	mov	r0, sl
 8008382:	4659      	mov	r1, fp
 8008384:	2200      	movs	r2, #0
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	460b      	mov	r3, r1
 800838c:	4303      	orrs	r3, r0
 800838e:	bf08      	it	eq
 8008390:	2322      	moveq	r3, #34	; 0x22
 8008392:	4682      	mov	sl, r0
 8008394:	468b      	mov	fp, r1
 8008396:	bf08      	it	eq
 8008398:	6023      	streq	r3, [r4, #0]
 800839a:	e62b      	b.n	8007ff4 <_strtod_l+0x4a4>
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	fa02 f303 	lsl.w	r3, r2, r3
 80083a4:	ea03 0a0a 	and.w	sl, r3, sl
 80083a8:	e6e3      	b.n	8008172 <_strtod_l+0x622>
 80083aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80083ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80083b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80083b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80083ba:	fa01 f308 	lsl.w	r3, r1, r8
 80083be:	9308      	str	r3, [sp, #32]
 80083c0:	910d      	str	r1, [sp, #52]	; 0x34
 80083c2:	e746      	b.n	8008252 <_strtod_l+0x702>
 80083c4:	2300      	movs	r3, #0
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	2301      	movs	r3, #1
 80083ca:	930d      	str	r3, [sp, #52]	; 0x34
 80083cc:	e741      	b.n	8008252 <_strtod_l+0x702>
 80083ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083d0:	4642      	mov	r2, r8
 80083d2:	4620      	mov	r0, r4
 80083d4:	f002 f99c 	bl	800a710 <__lshift>
 80083d8:	9018      	str	r0, [sp, #96]	; 0x60
 80083da:	2800      	cmp	r0, #0
 80083dc:	f47f af6b 	bne.w	80082b6 <_strtod_l+0x766>
 80083e0:	e5fe      	b.n	8007fe0 <_strtod_l+0x490>
 80083e2:	465f      	mov	r7, fp
 80083e4:	d16e      	bne.n	80084c4 <_strtod_l+0x974>
 80083e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ec:	b342      	cbz	r2, 8008440 <_strtod_l+0x8f0>
 80083ee:	4a32      	ldr	r2, [pc, #200]	; (80084b8 <_strtod_l+0x968>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d128      	bne.n	8008446 <_strtod_l+0x8f6>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	4651      	mov	r1, sl
 80083f8:	b1eb      	cbz	r3, 8008436 <_strtod_l+0x8e6>
 80083fa:	4b2d      	ldr	r3, [pc, #180]	; (80084b0 <_strtod_l+0x960>)
 80083fc:	403b      	ands	r3, r7
 80083fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008402:	f04f 32ff 	mov.w	r2, #4294967295
 8008406:	d819      	bhi.n	800843c <_strtod_l+0x8ec>
 8008408:	0d1b      	lsrs	r3, r3, #20
 800840a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	4299      	cmp	r1, r3
 8008414:	d117      	bne.n	8008446 <_strtod_l+0x8f6>
 8008416:	4b29      	ldr	r3, [pc, #164]	; (80084bc <_strtod_l+0x96c>)
 8008418:	429f      	cmp	r7, r3
 800841a:	d102      	bne.n	8008422 <_strtod_l+0x8d2>
 800841c:	3101      	adds	r1, #1
 800841e:	f43f addf 	beq.w	8007fe0 <_strtod_l+0x490>
 8008422:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <_strtod_l+0x960>)
 8008424:	403b      	ands	r3, r7
 8008426:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800842a:	f04f 0a00 	mov.w	sl, #0
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1a4      	bne.n	800837e <_strtod_l+0x82e>
 8008434:	e5de      	b.n	8007ff4 <_strtod_l+0x4a4>
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	e7ea      	b.n	8008412 <_strtod_l+0x8c2>
 800843c:	4613      	mov	r3, r2
 800843e:	e7e8      	b.n	8008412 <_strtod_l+0x8c2>
 8008440:	ea53 030a 	orrs.w	r3, r3, sl
 8008444:	d08c      	beq.n	8008360 <_strtod_l+0x810>
 8008446:	9b08      	ldr	r3, [sp, #32]
 8008448:	b1db      	cbz	r3, 8008482 <_strtod_l+0x932>
 800844a:	423b      	tst	r3, r7
 800844c:	d0ef      	beq.n	800842e <_strtod_l+0x8de>
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	9a04      	ldr	r2, [sp, #16]
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	b1c3      	cbz	r3, 800848a <_strtod_l+0x93a>
 8008458:	f7ff fb5c 	bl	8007b14 <sulp>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	ec51 0b18 	vmov	r0, r1, d8
 8008464:	f7f7 ff12 	bl	800028c <__adddf3>
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	e7df      	b.n	800842e <_strtod_l+0x8de>
 800846e:	4013      	ands	r3, r2
 8008470:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008474:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008478:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800847c:	f04f 3aff 	mov.w	sl, #4294967295
 8008480:	e7d5      	b.n	800842e <_strtod_l+0x8de>
 8008482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008484:	ea13 0f0a 	tst.w	r3, sl
 8008488:	e7e0      	b.n	800844c <_strtod_l+0x8fc>
 800848a:	f7ff fb43 	bl	8007b14 <sulp>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	ec51 0b18 	vmov	r0, r1, d8
 8008496:	f7f7 fef7 	bl	8000288 <__aeabi_dsub>
 800849a:	2200      	movs	r2, #0
 800849c:	2300      	movs	r3, #0
 800849e:	4682      	mov	sl, r0
 80084a0:	468b      	mov	fp, r1
 80084a2:	f7f8 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d0c1      	beq.n	800842e <_strtod_l+0x8de>
 80084aa:	e611      	b.n	80080d0 <_strtod_l+0x580>
 80084ac:	fffffc02 	.word	0xfffffc02
 80084b0:	7ff00000 	.word	0x7ff00000
 80084b4:	39500000 	.word	0x39500000
 80084b8:	000fffff 	.word	0x000fffff
 80084bc:	7fefffff 	.word	0x7fefffff
 80084c0:	0800b7d8 	.word	0x0800b7d8
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	f002 fb10 	bl	800aaec <__ratio>
 80084cc:	ec59 8b10 	vmov	r8, r9, d0
 80084d0:	ee10 0a10 	vmov	r0, s0
 80084d4:	2200      	movs	r2, #0
 80084d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084da:	4649      	mov	r1, r9
 80084dc:	f7f8 fb08 	bl	8000af0 <__aeabi_dcmple>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d07a      	beq.n	80085da <_strtod_l+0xa8a>
 80084e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d04a      	beq.n	8008580 <_strtod_l+0xa30>
 80084ea:	4b95      	ldr	r3, [pc, #596]	; (8008740 <_strtod_l+0xbf0>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008740 <_strtod_l+0xbf0>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	4b92      	ldr	r3, [pc, #584]	; (8008744 <_strtod_l+0xbf4>)
 80084fc:	403b      	ands	r3, r7
 80084fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008502:	4b91      	ldr	r3, [pc, #580]	; (8008748 <_strtod_l+0xbf8>)
 8008504:	429a      	cmp	r2, r3
 8008506:	f040 80b0 	bne.w	800866a <_strtod_l+0xb1a>
 800850a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800850e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008512:	ec4b ab10 	vmov	d0, sl, fp
 8008516:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800851a:	f002 fa0f 	bl	800a93c <__ulp>
 800851e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008522:	ec53 2b10 	vmov	r2, r3, d0
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	4652      	mov	r2, sl
 800852c:	465b      	mov	r3, fp
 800852e:	f7f7 fead 	bl	800028c <__adddf3>
 8008532:	460b      	mov	r3, r1
 8008534:	4983      	ldr	r1, [pc, #524]	; (8008744 <_strtod_l+0xbf4>)
 8008536:	4a85      	ldr	r2, [pc, #532]	; (800874c <_strtod_l+0xbfc>)
 8008538:	4019      	ands	r1, r3
 800853a:	4291      	cmp	r1, r2
 800853c:	4682      	mov	sl, r0
 800853e:	d960      	bls.n	8008602 <_strtod_l+0xab2>
 8008540:	ee18 3a90 	vmov	r3, s17
 8008544:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008548:	4293      	cmp	r3, r2
 800854a:	d104      	bne.n	8008556 <_strtod_l+0xa06>
 800854c:	ee18 3a10 	vmov	r3, s16
 8008550:	3301      	adds	r3, #1
 8008552:	f43f ad45 	beq.w	8007fe0 <_strtod_l+0x490>
 8008556:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008758 <_strtod_l+0xc08>
 800855a:	f04f 3aff 	mov.w	sl, #4294967295
 800855e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008560:	4620      	mov	r0, r4
 8008562:	f001 feb9 	bl	800a2d8 <_Bfree>
 8008566:	9905      	ldr	r1, [sp, #20]
 8008568:	4620      	mov	r0, r4
 800856a:	f001 feb5 	bl	800a2d8 <_Bfree>
 800856e:	4631      	mov	r1, r6
 8008570:	4620      	mov	r0, r4
 8008572:	f001 feb1 	bl	800a2d8 <_Bfree>
 8008576:	4629      	mov	r1, r5
 8008578:	4620      	mov	r0, r4
 800857a:	f001 fead 	bl	800a2d8 <_Bfree>
 800857e:	e61a      	b.n	80081b6 <_strtod_l+0x666>
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	d11b      	bne.n	80085be <_strtod_l+0xa6e>
 8008586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800858a:	b9f3      	cbnz	r3, 80085ca <_strtod_l+0xa7a>
 800858c:	4b6c      	ldr	r3, [pc, #432]	; (8008740 <_strtod_l+0xbf0>)
 800858e:	2200      	movs	r2, #0
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f8 faa2 	bl	8000adc <__aeabi_dcmplt>
 8008598:	b9d0      	cbnz	r0, 80085d0 <_strtod_l+0xa80>
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	4b6c      	ldr	r3, [pc, #432]	; (8008750 <_strtod_l+0xc00>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	4680      	mov	r8, r0
 80085a8:	4689      	mov	r9, r1
 80085aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80085b2:	9315      	str	r3, [sp, #84]	; 0x54
 80085b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80085b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085bc:	e79d      	b.n	80084fa <_strtod_l+0x9aa>
 80085be:	f1ba 0f01 	cmp.w	sl, #1
 80085c2:	d102      	bne.n	80085ca <_strtod_l+0xa7a>
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	f43f ad83 	beq.w	80080d0 <_strtod_l+0x580>
 80085ca:	4b62      	ldr	r3, [pc, #392]	; (8008754 <_strtod_l+0xc04>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	e78e      	b.n	80084ee <_strtod_l+0x99e>
 80085d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008750 <_strtod_l+0xc00>
 80085d4:	f04f 0800 	mov.w	r8, #0
 80085d8:	e7e7      	b.n	80085aa <_strtod_l+0xa5a>
 80085da:	4b5d      	ldr	r3, [pc, #372]	; (8008750 <_strtod_l+0xc00>)
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	2200      	movs	r2, #0
 80085e2:	f7f8 f809 	bl	80005f8 <__aeabi_dmul>
 80085e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e8:	4680      	mov	r8, r0
 80085ea:	4689      	mov	r9, r1
 80085ec:	b933      	cbnz	r3, 80085fc <_strtod_l+0xaac>
 80085ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085f2:	900e      	str	r0, [sp, #56]	; 0x38
 80085f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80085fa:	e7dd      	b.n	80085b8 <_strtod_l+0xa68>
 80085fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008600:	e7f9      	b.n	80085f6 <_strtod_l+0xaa6>
 8008602:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008606:	9b04      	ldr	r3, [sp, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1a8      	bne.n	800855e <_strtod_l+0xa0e>
 800860c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008612:	0d1b      	lsrs	r3, r3, #20
 8008614:	051b      	lsls	r3, r3, #20
 8008616:	429a      	cmp	r2, r3
 8008618:	d1a1      	bne.n	800855e <_strtod_l+0xa0e>
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f8 fb33 	bl	8000c88 <__aeabi_d2lz>
 8008622:	f7f7 ffbb 	bl	800059c <__aeabi_l2d>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008638:	ea43 030a 	orr.w	r3, r3, sl
 800863c:	4313      	orrs	r3, r2
 800863e:	4680      	mov	r8, r0
 8008640:	4689      	mov	r9, r1
 8008642:	d055      	beq.n	80086f0 <_strtod_l+0xba0>
 8008644:	a336      	add	r3, pc, #216	; (adr r3, 8008720 <_strtod_l+0xbd0>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f8 fa47 	bl	8000adc <__aeabi_dcmplt>
 800864e:	2800      	cmp	r0, #0
 8008650:	f47f acd0 	bne.w	8007ff4 <_strtod_l+0x4a4>
 8008654:	a334      	add	r3, pc, #208	; (adr r3, 8008728 <_strtod_l+0xbd8>)
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f8 fa5b 	bl	8000b18 <__aeabi_dcmpgt>
 8008662:	2800      	cmp	r0, #0
 8008664:	f43f af7b 	beq.w	800855e <_strtod_l+0xa0e>
 8008668:	e4c4      	b.n	8007ff4 <_strtod_l+0x4a4>
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	b333      	cbz	r3, 80086bc <_strtod_l+0xb6c>
 800866e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008670:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008674:	d822      	bhi.n	80086bc <_strtod_l+0xb6c>
 8008676:	a32e      	add	r3, pc, #184	; (adr r3, 8008730 <_strtod_l+0xbe0>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f8 fa36 	bl	8000af0 <__aeabi_dcmple>
 8008684:	b1a0      	cbz	r0, 80086b0 <_strtod_l+0xb60>
 8008686:	4649      	mov	r1, r9
 8008688:	4640      	mov	r0, r8
 800868a:	f7f8 fa8d 	bl	8000ba8 <__aeabi_d2uiz>
 800868e:	2801      	cmp	r0, #1
 8008690:	bf38      	it	cc
 8008692:	2001      	movcc	r0, #1
 8008694:	f7f7 ff36 	bl	8000504 <__aeabi_ui2d>
 8008698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869a:	4680      	mov	r8, r0
 800869c:	4689      	mov	r9, r1
 800869e:	bb23      	cbnz	r3, 80086ea <_strtod_l+0xb9a>
 80086a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086a4:	9010      	str	r0, [sp, #64]	; 0x40
 80086a6:	9311      	str	r3, [sp, #68]	; 0x44
 80086a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	9309      	str	r3, [sp, #36]	; 0x24
 80086bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086c0:	eeb0 0a48 	vmov.f32	s0, s16
 80086c4:	eef0 0a68 	vmov.f32	s1, s17
 80086c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086cc:	f002 f936 	bl	800a93c <__ulp>
 80086d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086d4:	ec53 2b10 	vmov	r2, r3, d0
 80086d8:	f7f7 ff8e 	bl	80005f8 <__aeabi_dmul>
 80086dc:	ec53 2b18 	vmov	r2, r3, d8
 80086e0:	f7f7 fdd4 	bl	800028c <__adddf3>
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	e78d      	b.n	8008606 <_strtod_l+0xab6>
 80086ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80086ee:	e7db      	b.n	80086a8 <_strtod_l+0xb58>
 80086f0:	a311      	add	r3, pc, #68	; (adr r3, 8008738 <_strtod_l+0xbe8>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f8 f9f1 	bl	8000adc <__aeabi_dcmplt>
 80086fa:	e7b2      	b.n	8008662 <_strtod_l+0xb12>
 80086fc:	2300      	movs	r3, #0
 80086fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	f7ff ba6b 	b.w	8007be0 <_strtod_l+0x90>
 800870a:	2a65      	cmp	r2, #101	; 0x65
 800870c:	f43f ab5f 	beq.w	8007dce <_strtod_l+0x27e>
 8008710:	2a45      	cmp	r2, #69	; 0x45
 8008712:	f43f ab5c 	beq.w	8007dce <_strtod_l+0x27e>
 8008716:	2301      	movs	r3, #1
 8008718:	f7ff bb94 	b.w	8007e44 <_strtod_l+0x2f4>
 800871c:	f3af 8000 	nop.w
 8008720:	94a03595 	.word	0x94a03595
 8008724:	3fdfffff 	.word	0x3fdfffff
 8008728:	35afe535 	.word	0x35afe535
 800872c:	3fe00000 	.word	0x3fe00000
 8008730:	ffc00000 	.word	0xffc00000
 8008734:	41dfffff 	.word	0x41dfffff
 8008738:	94a03595 	.word	0x94a03595
 800873c:	3fcfffff 	.word	0x3fcfffff
 8008740:	3ff00000 	.word	0x3ff00000
 8008744:	7ff00000 	.word	0x7ff00000
 8008748:	7fe00000 	.word	0x7fe00000
 800874c:	7c9fffff 	.word	0x7c9fffff
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	bff00000 	.word	0xbff00000
 8008758:	7fefffff 	.word	0x7fefffff

0800875c <_strtod_r>:
 800875c:	4b01      	ldr	r3, [pc, #4]	; (8008764 <_strtod_r+0x8>)
 800875e:	f7ff b9f7 	b.w	8007b50 <_strtod_l>
 8008762:	bf00      	nop
 8008764:	20000074 	.word	0x20000074

08008768 <_strtol_l.constprop.0>:
 8008768:	2b01      	cmp	r3, #1
 800876a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876e:	d001      	beq.n	8008774 <_strtol_l.constprop.0+0xc>
 8008770:	2b24      	cmp	r3, #36	; 0x24
 8008772:	d906      	bls.n	8008782 <_strtol_l.constprop.0+0x1a>
 8008774:	f7fe fa6e 	bl	8006c54 <__errno>
 8008778:	2316      	movs	r3, #22
 800877a:	6003      	str	r3, [r0, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008868 <_strtol_l.constprop.0+0x100>
 8008786:	460d      	mov	r5, r1
 8008788:	462e      	mov	r6, r5
 800878a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800878e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008792:	f017 0708 	ands.w	r7, r7, #8
 8008796:	d1f7      	bne.n	8008788 <_strtol_l.constprop.0+0x20>
 8008798:	2c2d      	cmp	r4, #45	; 0x2d
 800879a:	d132      	bne.n	8008802 <_strtol_l.constprop.0+0x9a>
 800879c:	782c      	ldrb	r4, [r5, #0]
 800879e:	2701      	movs	r7, #1
 80087a0:	1cb5      	adds	r5, r6, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d05b      	beq.n	800885e <_strtol_l.constprop.0+0xf6>
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d109      	bne.n	80087be <_strtol_l.constprop.0+0x56>
 80087aa:	2c30      	cmp	r4, #48	; 0x30
 80087ac:	d107      	bne.n	80087be <_strtol_l.constprop.0+0x56>
 80087ae:	782c      	ldrb	r4, [r5, #0]
 80087b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087b4:	2c58      	cmp	r4, #88	; 0x58
 80087b6:	d14d      	bne.n	8008854 <_strtol_l.constprop.0+0xec>
 80087b8:	786c      	ldrb	r4, [r5, #1]
 80087ba:	2310      	movs	r3, #16
 80087bc:	3502      	adds	r5, #2
 80087be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80087c6:	f04f 0c00 	mov.w	ip, #0
 80087ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80087ce:	4666      	mov	r6, ip
 80087d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80087d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087d8:	f1be 0f09 	cmp.w	lr, #9
 80087dc:	d816      	bhi.n	800880c <_strtol_l.constprop.0+0xa4>
 80087de:	4674      	mov	r4, lr
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	dd24      	ble.n	800882e <_strtol_l.constprop.0+0xc6>
 80087e4:	f1bc 0f00 	cmp.w	ip, #0
 80087e8:	db1e      	blt.n	8008828 <_strtol_l.constprop.0+0xc0>
 80087ea:	45b1      	cmp	r9, r6
 80087ec:	d31c      	bcc.n	8008828 <_strtol_l.constprop.0+0xc0>
 80087ee:	d101      	bne.n	80087f4 <_strtol_l.constprop.0+0x8c>
 80087f0:	45a2      	cmp	sl, r4
 80087f2:	db19      	blt.n	8008828 <_strtol_l.constprop.0+0xc0>
 80087f4:	fb06 4603 	mla	r6, r6, r3, r4
 80087f8:	f04f 0c01 	mov.w	ip, #1
 80087fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008800:	e7e8      	b.n	80087d4 <_strtol_l.constprop.0+0x6c>
 8008802:	2c2b      	cmp	r4, #43	; 0x2b
 8008804:	bf04      	itt	eq
 8008806:	782c      	ldrbeq	r4, [r5, #0]
 8008808:	1cb5      	addeq	r5, r6, #2
 800880a:	e7ca      	b.n	80087a2 <_strtol_l.constprop.0+0x3a>
 800880c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008810:	f1be 0f19 	cmp.w	lr, #25
 8008814:	d801      	bhi.n	800881a <_strtol_l.constprop.0+0xb2>
 8008816:	3c37      	subs	r4, #55	; 0x37
 8008818:	e7e2      	b.n	80087e0 <_strtol_l.constprop.0+0x78>
 800881a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800881e:	f1be 0f19 	cmp.w	lr, #25
 8008822:	d804      	bhi.n	800882e <_strtol_l.constprop.0+0xc6>
 8008824:	3c57      	subs	r4, #87	; 0x57
 8008826:	e7db      	b.n	80087e0 <_strtol_l.constprop.0+0x78>
 8008828:	f04f 3cff 	mov.w	ip, #4294967295
 800882c:	e7e6      	b.n	80087fc <_strtol_l.constprop.0+0x94>
 800882e:	f1bc 0f00 	cmp.w	ip, #0
 8008832:	da05      	bge.n	8008840 <_strtol_l.constprop.0+0xd8>
 8008834:	2322      	movs	r3, #34	; 0x22
 8008836:	6003      	str	r3, [r0, #0]
 8008838:	4646      	mov	r6, r8
 800883a:	b942      	cbnz	r2, 800884e <_strtol_l.constprop.0+0xe6>
 800883c:	4630      	mov	r0, r6
 800883e:	e79e      	b.n	800877e <_strtol_l.constprop.0+0x16>
 8008840:	b107      	cbz	r7, 8008844 <_strtol_l.constprop.0+0xdc>
 8008842:	4276      	negs	r6, r6
 8008844:	2a00      	cmp	r2, #0
 8008846:	d0f9      	beq.n	800883c <_strtol_l.constprop.0+0xd4>
 8008848:	f1bc 0f00 	cmp.w	ip, #0
 800884c:	d000      	beq.n	8008850 <_strtol_l.constprop.0+0xe8>
 800884e:	1e69      	subs	r1, r5, #1
 8008850:	6011      	str	r1, [r2, #0]
 8008852:	e7f3      	b.n	800883c <_strtol_l.constprop.0+0xd4>
 8008854:	2430      	movs	r4, #48	; 0x30
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1b1      	bne.n	80087be <_strtol_l.constprop.0+0x56>
 800885a:	2308      	movs	r3, #8
 800885c:	e7af      	b.n	80087be <_strtol_l.constprop.0+0x56>
 800885e:	2c30      	cmp	r4, #48	; 0x30
 8008860:	d0a5      	beq.n	80087ae <_strtol_l.constprop.0+0x46>
 8008862:	230a      	movs	r3, #10
 8008864:	e7ab      	b.n	80087be <_strtol_l.constprop.0+0x56>
 8008866:	bf00      	nop
 8008868:	0800b801 	.word	0x0800b801

0800886c <_strtol_r>:
 800886c:	f7ff bf7c 	b.w	8008768 <_strtol_l.constprop.0>

08008870 <__swbuf_r>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	460e      	mov	r6, r1
 8008874:	4614      	mov	r4, r2
 8008876:	4605      	mov	r5, r0
 8008878:	b118      	cbz	r0, 8008882 <__swbuf_r+0x12>
 800887a:	6983      	ldr	r3, [r0, #24]
 800887c:	b90b      	cbnz	r3, 8008882 <__swbuf_r+0x12>
 800887e:	f001 f84b 	bl	8009918 <__sinit>
 8008882:	4b21      	ldr	r3, [pc, #132]	; (8008908 <__swbuf_r+0x98>)
 8008884:	429c      	cmp	r4, r3
 8008886:	d12b      	bne.n	80088e0 <__swbuf_r+0x70>
 8008888:	686c      	ldr	r4, [r5, #4]
 800888a:	69a3      	ldr	r3, [r4, #24]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	071a      	lsls	r2, r3, #28
 8008892:	d52f      	bpl.n	80088f4 <__swbuf_r+0x84>
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	b36b      	cbz	r3, 80088f4 <__swbuf_r+0x84>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	6820      	ldr	r0, [r4, #0]
 800889c:	1ac0      	subs	r0, r0, r3
 800889e:	6963      	ldr	r3, [r4, #20]
 80088a0:	b2f6      	uxtb	r6, r6
 80088a2:	4283      	cmp	r3, r0
 80088a4:	4637      	mov	r7, r6
 80088a6:	dc04      	bgt.n	80088b2 <__swbuf_r+0x42>
 80088a8:	4621      	mov	r1, r4
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 ffa0 	bl	80097f0 <_fflush_r>
 80088b0:	bb30      	cbnz	r0, 8008900 <__swbuf_r+0x90>
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	60a3      	str	r3, [r4, #8]
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	701e      	strb	r6, [r3, #0]
 80088c0:	6963      	ldr	r3, [r4, #20]
 80088c2:	3001      	adds	r0, #1
 80088c4:	4283      	cmp	r3, r0
 80088c6:	d004      	beq.n	80088d2 <__swbuf_r+0x62>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	07db      	lsls	r3, r3, #31
 80088cc:	d506      	bpl.n	80088dc <__swbuf_r+0x6c>
 80088ce:	2e0a      	cmp	r6, #10
 80088d0:	d104      	bne.n	80088dc <__swbuf_r+0x6c>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 ff8b 	bl	80097f0 <_fflush_r>
 80088da:	b988      	cbnz	r0, 8008900 <__swbuf_r+0x90>
 80088dc:	4638      	mov	r0, r7
 80088de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <__swbuf_r+0x9c>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d101      	bne.n	80088ea <__swbuf_r+0x7a>
 80088e6:	68ac      	ldr	r4, [r5, #8]
 80088e8:	e7cf      	b.n	800888a <__swbuf_r+0x1a>
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <__swbuf_r+0xa0>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	bf08      	it	eq
 80088f0:	68ec      	ldreq	r4, [r5, #12]
 80088f2:	e7ca      	b.n	800888a <__swbuf_r+0x1a>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f80c 	bl	8008914 <__swsetup_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d0cb      	beq.n	8008898 <__swbuf_r+0x28>
 8008900:	f04f 37ff 	mov.w	r7, #4294967295
 8008904:	e7ea      	b.n	80088dc <__swbuf_r+0x6c>
 8008906:	bf00      	nop
 8008908:	0800b9b4 	.word	0x0800b9b4
 800890c:	0800b9d4 	.word	0x0800b9d4
 8008910:	0800b994 	.word	0x0800b994

08008914 <__swsetup_r>:
 8008914:	4b32      	ldr	r3, [pc, #200]	; (80089e0 <__swsetup_r+0xcc>)
 8008916:	b570      	push	{r4, r5, r6, lr}
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	4606      	mov	r6, r0
 800891c:	460c      	mov	r4, r1
 800891e:	b125      	cbz	r5, 800892a <__swsetup_r+0x16>
 8008920:	69ab      	ldr	r3, [r5, #24]
 8008922:	b913      	cbnz	r3, 800892a <__swsetup_r+0x16>
 8008924:	4628      	mov	r0, r5
 8008926:	f000 fff7 	bl	8009918 <__sinit>
 800892a:	4b2e      	ldr	r3, [pc, #184]	; (80089e4 <__swsetup_r+0xd0>)
 800892c:	429c      	cmp	r4, r3
 800892e:	d10f      	bne.n	8008950 <__swsetup_r+0x3c>
 8008930:	686c      	ldr	r4, [r5, #4]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008938:	0719      	lsls	r1, r3, #28
 800893a:	d42c      	bmi.n	8008996 <__swsetup_r+0x82>
 800893c:	06dd      	lsls	r5, r3, #27
 800893e:	d411      	bmi.n	8008964 <__swsetup_r+0x50>
 8008940:	2309      	movs	r3, #9
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	e03e      	b.n	80089ce <__swsetup_r+0xba>
 8008950:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <__swsetup_r+0xd4>)
 8008952:	429c      	cmp	r4, r3
 8008954:	d101      	bne.n	800895a <__swsetup_r+0x46>
 8008956:	68ac      	ldr	r4, [r5, #8]
 8008958:	e7eb      	b.n	8008932 <__swsetup_r+0x1e>
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <__swsetup_r+0xd8>)
 800895c:	429c      	cmp	r4, r3
 800895e:	bf08      	it	eq
 8008960:	68ec      	ldreq	r4, [r5, #12]
 8008962:	e7e6      	b.n	8008932 <__swsetup_r+0x1e>
 8008964:	0758      	lsls	r0, r3, #29
 8008966:	d512      	bpl.n	800898e <__swsetup_r+0x7a>
 8008968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896a:	b141      	cbz	r1, 800897e <__swsetup_r+0x6a>
 800896c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <__swsetup_r+0x66>
 8008974:	4630      	mov	r0, r6
 8008976:	f002 f947 	bl	800ac08 <_free_r>
 800897a:	2300      	movs	r3, #0
 800897c:	6363      	str	r3, [r4, #52]	; 0x34
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	2300      	movs	r3, #0
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0308 	orr.w	r3, r3, #8
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b94b      	cbnz	r3, 80089ae <__swsetup_r+0x9a>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a4:	d003      	beq.n	80089ae <__swsetup_r+0x9a>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4630      	mov	r0, r6
 80089aa:	f001 fbed 	bl	800a188 <__smakebuf_r>
 80089ae:	89a0      	ldrh	r0, [r4, #12]
 80089b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b4:	f010 0301 	ands.w	r3, r0, #1
 80089b8:	d00a      	beq.n	80089d0 <__swsetup_r+0xbc>
 80089ba:	2300      	movs	r3, #0
 80089bc:	60a3      	str	r3, [r4, #8]
 80089be:	6963      	ldr	r3, [r4, #20]
 80089c0:	425b      	negs	r3, r3
 80089c2:	61a3      	str	r3, [r4, #24]
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	b943      	cbnz	r3, 80089da <__swsetup_r+0xc6>
 80089c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089cc:	d1ba      	bne.n	8008944 <__swsetup_r+0x30>
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	0781      	lsls	r1, r0, #30
 80089d2:	bf58      	it	pl
 80089d4:	6963      	ldrpl	r3, [r4, #20]
 80089d6:	60a3      	str	r3, [r4, #8]
 80089d8:	e7f4      	b.n	80089c4 <__swsetup_r+0xb0>
 80089da:	2000      	movs	r0, #0
 80089dc:	e7f7      	b.n	80089ce <__swsetup_r+0xba>
 80089de:	bf00      	nop
 80089e0:	2000000c 	.word	0x2000000c
 80089e4:	0800b9b4 	.word	0x0800b9b4
 80089e8:	0800b9d4 	.word	0x0800b9d4
 80089ec:	0800b994 	.word	0x0800b994

080089f0 <quorem>:
 80089f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	6903      	ldr	r3, [r0, #16]
 80089f6:	690c      	ldr	r4, [r1, #16]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	4607      	mov	r7, r0
 80089fc:	f2c0 8081 	blt.w	8008b02 <quorem+0x112>
 8008a00:	3c01      	subs	r4, #1
 8008a02:	f101 0814 	add.w	r8, r1, #20
 8008a06:	f100 0514 	add.w	r5, r0, #20
 8008a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a28:	d331      	bcc.n	8008a8e <quorem+0x9e>
 8008a2a:	f04f 0e00 	mov.w	lr, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	46ac      	mov	ip, r5
 8008a32:	46f2      	mov	sl, lr
 8008a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a38:	b293      	uxth	r3, r2
 8008a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ebaa 0303 	sub.w	r3, sl, r3
 8008a48:	f8dc a000 	ldr.w	sl, [ip]
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a52:	fb06 e202 	mla	r2, r6, r2, lr
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a6c:	4581      	cmp	r9, r0
 8008a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a72:	f84c 3b04 	str.w	r3, [ip], #4
 8008a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a7a:	d2db      	bcs.n	8008a34 <quorem+0x44>
 8008a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a80:	b92b      	cbnz	r3, 8008a8e <quorem+0x9e>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	3b04      	subs	r3, #4
 8008a86:	429d      	cmp	r5, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	d32e      	bcc.n	8008aea <quorem+0xfa>
 8008a8c:	613c      	str	r4, [r7, #16]
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f001 feae 	bl	800a7f0 <__mcmp>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	db24      	blt.n	8008ae2 <quorem+0xf2>
 8008a98:	3601      	adds	r6, #1
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8008aa8:	b293      	uxth	r3, r2
 8008aaa:	ebac 0303 	sub.w	r3, ip, r3
 8008aae:	0c12      	lsrs	r2, r2, #16
 8008ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac2:	45c1      	cmp	r9, r8
 8008ac4:	f840 3b04 	str.w	r3, [r0], #4
 8008ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008acc:	d2e8      	bcs.n	8008aa0 <quorem+0xb0>
 8008ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	b922      	cbnz	r2, 8008ae2 <quorem+0xf2>
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d30a      	bcc.n	8008af6 <quorem+0x106>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	3b04      	subs	r3, #4
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1cc      	bne.n	8008a8c <quorem+0x9c>
 8008af2:	3c01      	subs	r4, #1
 8008af4:	e7c7      	b.n	8008a86 <quorem+0x96>
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1f0      	bne.n	8008ae0 <quorem+0xf0>
 8008afe:	3c01      	subs	r4, #1
 8008b00:	e7eb      	b.n	8008ada <quorem+0xea>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e7ee      	b.n	8008ae4 <quorem+0xf4>
	...

08008b08 <_dtoa_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ed2d 8b04 	vpush	{d8-d9}
 8008b10:	ec57 6b10 	vmov	r6, r7, d0
 8008b14:	b093      	sub	sp, #76	; 0x4c
 8008b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b1c:	9106      	str	r1, [sp, #24]
 8008b1e:	ee10 aa10 	vmov	sl, s0
 8008b22:	4604      	mov	r4, r0
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	930c      	str	r3, [sp, #48]	; 0x30
 8008b28:	46bb      	mov	fp, r7
 8008b2a:	b975      	cbnz	r5, 8008b4a <_dtoa_r+0x42>
 8008b2c:	2010      	movs	r0, #16
 8008b2e:	f001 fb6b 	bl	800a208 <malloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6260      	str	r0, [r4, #36]	; 0x24
 8008b36:	b920      	cbnz	r0, 8008b42 <_dtoa_r+0x3a>
 8008b38:	4ba7      	ldr	r3, [pc, #668]	; (8008dd8 <_dtoa_r+0x2d0>)
 8008b3a:	21ea      	movs	r1, #234	; 0xea
 8008b3c:	48a7      	ldr	r0, [pc, #668]	; (8008ddc <_dtoa_r+0x2d4>)
 8008b3e:	f002 fc89 	bl	800b454 <__assert_func>
 8008b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b46:	6005      	str	r5, [r0, #0]
 8008b48:	60c5      	str	r5, [r0, #12]
 8008b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	b151      	cbz	r1, 8008b66 <_dtoa_r+0x5e>
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	604a      	str	r2, [r1, #4]
 8008b54:	2301      	movs	r3, #1
 8008b56:	4093      	lsls	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 fbbc 	bl	800a2d8 <_Bfree>
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	1e3b      	subs	r3, r7, #0
 8008b68:	bfaa      	itet	ge
 8008b6a:	2300      	movge	r3, #0
 8008b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b70:	f8c8 3000 	strge.w	r3, [r8]
 8008b74:	4b9a      	ldr	r3, [pc, #616]	; (8008de0 <_dtoa_r+0x2d8>)
 8008b76:	bfbc      	itt	lt
 8008b78:	2201      	movlt	r2, #1
 8008b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b7e:	ea33 030b 	bics.w	r3, r3, fp
 8008b82:	d11b      	bne.n	8008bbc <_dtoa_r+0xb4>
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	4333      	orrs	r3, r6
 8008b92:	f000 8592 	beq.w	80096ba <_dtoa_r+0xbb2>
 8008b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b98:	b963      	cbnz	r3, 8008bb4 <_dtoa_r+0xac>
 8008b9a:	4b92      	ldr	r3, [pc, #584]	; (8008de4 <_dtoa_r+0x2dc>)
 8008b9c:	e022      	b.n	8008be4 <_dtoa_r+0xdc>
 8008b9e:	4b92      	ldr	r3, [pc, #584]	; (8008de8 <_dtoa_r+0x2e0>)
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	b013      	add	sp, #76	; 0x4c
 8008bac:	ecbd 8b04 	vpop	{d8-d9}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	4b8b      	ldr	r3, [pc, #556]	; (8008de4 <_dtoa_r+0x2dc>)
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x9c>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	f7f7 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc8:	ec4b ab19 	vmov	d9, sl, fp
 8008bcc:	4680      	mov	r8, r0
 8008bce:	b158      	cbz	r0, 8008be8 <_dtoa_r+0xe0>
 8008bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 856b 	beq.w	80096b4 <_dtoa_r+0xbac>
 8008bde:	4883      	ldr	r0, [pc, #524]	; (8008dec <_dtoa_r+0x2e4>)
 8008be0:	6018      	str	r0, [r3, #0]
 8008be2:	1e43      	subs	r3, r0, #1
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	e7df      	b.n	8008ba8 <_dtoa_r+0xa0>
 8008be8:	ec4b ab10 	vmov	d0, sl, fp
 8008bec:	aa10      	add	r2, sp, #64	; 0x40
 8008bee:	a911      	add	r1, sp, #68	; 0x44
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 ff1f 	bl	800aa34 <__d2b>
 8008bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bfa:	ee08 0a10 	vmov	s16, r0
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f000 8084 	beq.w	8008d0c <_dtoa_r+0x204>
 8008c04:	ee19 3a90 	vmov	r3, s19
 8008c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c10:	4656      	mov	r6, sl
 8008c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c1e:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <_dtoa_r+0x2e8>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fb2f 	bl	8000288 <__aeabi_dsub>
 8008c2a:	a365      	add	r3, pc, #404	; (adr r3, 8008dc0 <_dtoa_r+0x2b8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <_dtoa_r+0x2c0>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb27 	bl	800028c <__adddf3>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	4628      	mov	r0, r5
 8008c42:	460f      	mov	r7, r1
 8008c44:	f7f7 fc6e 	bl	8000524 <__aeabi_i2d>
 8008c48:	a361      	add	r3, pc, #388	; (adr r3, 8008dd0 <_dtoa_r+0x2c8>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fb17 	bl	800028c <__adddf3>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f7f7 ff79 	bl	8000b58 <__aeabi_d2iz>
 8008c66:	2200      	movs	r2, #0
 8008c68:	9000      	str	r0, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 ff34 	bl	8000adc <__aeabi_dcmplt>
 8008c74:	b150      	cbz	r0, 8008c8c <_dtoa_r+0x184>
 8008c76:	9800      	ldr	r0, [sp, #0]
 8008c78:	f7f7 fc54 	bl	8000524 <__aeabi_i2d>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f7f7 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c84:	b910      	cbnz	r0, 8008c8c <_dtoa_r+0x184>
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	2b16      	cmp	r3, #22
 8008c90:	d85a      	bhi.n	8008d48 <_dtoa_r+0x240>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <_dtoa_r+0x2ec>)
 8008c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ca2:	f7f7 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d050      	beq.n	8008d4c <_dtoa_r+0x244>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	1b5d      	subs	r5, r3, r5
 8008cb8:	1e6b      	subs	r3, r5, #1
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	bf45      	ittet	mi
 8008cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cc2:	9304      	strmi	r3, [sp, #16]
 8008cc4:	2300      	movpl	r3, #0
 8008cc6:	2300      	movmi	r3, #0
 8008cc8:	bf4c      	ite	mi
 8008cca:	9305      	strmi	r3, [sp, #20]
 8008ccc:	9304      	strpl	r3, [sp, #16]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db3d      	blt.n	8008d50 <_dtoa_r+0x248>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	9a00      	ldr	r2, [sp, #0]
 8008cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cda:	4413      	add	r3, r2
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9307      	str	r3, [sp, #28]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	f200 8089 	bhi.w	8008dfc <_dtoa_r+0x2f4>
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	bfc4      	itt	gt
 8008cee:	3b04      	subgt	r3, #4
 8008cf0:	9306      	strgt	r3, [sp, #24]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf8:	bfcc      	ite	gt
 8008cfa:	2500      	movgt	r5, #0
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	f200 8087 	bhi.w	8008e12 <_dtoa_r+0x30a>
 8008d04:	e8df f003 	tbb	[pc, r3]
 8008d08:	59383a2d 	.word	0x59383a2d
 8008d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d10:	441d      	add	r5, r3
 8008d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	bfc1      	itttt	gt
 8008d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d2a:	bfda      	itte	le
 8008d2c:	f1c3 0320 	rsble	r3, r3, #32
 8008d30:	fa06 f003 	lslle.w	r0, r6, r3
 8008d34:	4318      	orrgt	r0, r3
 8008d36:	f7f7 fbe5 	bl	8000504 <__aeabi_ui2d>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d42:	3d01      	subs	r5, #1
 8008d44:	930e      	str	r3, [sp, #56]	; 0x38
 8008d46:	e76a      	b.n	8008c1e <_dtoa_r+0x116>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b2      	b.n	8008cb2 <_dtoa_r+0x1aa>
 8008d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4e:	e7b1      	b.n	8008cb4 <_dtoa_r+0x1ac>
 8008d50:	9b04      	ldr	r3, [sp, #16]
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	4253      	negs	r3, r2
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d60:	e7bf      	b.n	8008ce2 <_dtoa_r+0x1da>
 8008d62:	2300      	movs	r3, #0
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc55      	bgt.n	8008e18 <_dtoa_r+0x310>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d72:	461a      	mov	r2, r3
 8008d74:	9209      	str	r2, [sp, #36]	; 0x24
 8008d76:	e00c      	b.n	8008d92 <_dtoa_r+0x28a>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7f3      	b.n	8008d64 <_dtoa_r+0x25c>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	bfb8      	it	lt
 8008d90:	2301      	movlt	r3, #1
 8008d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	6042      	str	r2, [r0, #4]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f102 0614 	add.w	r6, r2, #20
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	d93d      	bls.n	8008e20 <_dtoa_r+0x318>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f001 fa57 	bl	800a258 <_Balloc>
 8008daa:	9001      	str	r0, [sp, #4]
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d13b      	bne.n	8008e28 <_dtoa_r+0x320>
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <_dtoa_r+0x2f0>)
 8008db2:	4602      	mov	r2, r0
 8008db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008db8:	e6c0      	b.n	8008b3c <_dtoa_r+0x34>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7df      	b.n	8008d7e <_dtoa_r+0x276>
 8008dbe:	bf00      	nop
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800b90e 	.word	0x0800b90e
 8008ddc:	0800b925 	.word	0x0800b925
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800b90a 	.word	0x0800b90a
 8008de8:	0800b901 	.word	0x0800b901
 8008dec:	0800b781 	.word	0x0800b781
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800baf8 	.word	0x0800baf8
 8008df8:	0800b980 	.word	0x0800b980
 8008dfc:	2501      	movs	r5, #1
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9306      	str	r3, [sp, #24]
 8008e02:	9508      	str	r5, [sp, #32]
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2312      	movs	r3, #18
 8008e10:	e7b0      	b.n	8008d74 <_dtoa_r+0x26c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	e7f5      	b.n	8008e04 <_dtoa_r+0x2fc>
 8008e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1e:	e7b8      	b.n	8008d92 <_dtoa_r+0x28a>
 8008e20:	3101      	adds	r1, #1
 8008e22:	6041      	str	r1, [r0, #4]
 8008e24:	0052      	lsls	r2, r2, #1
 8008e26:	e7b8      	b.n	8008d9a <_dtoa_r+0x292>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b0e      	cmp	r3, #14
 8008e32:	f200 809d 	bhi.w	8008f70 <_dtoa_r+0x468>
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f000 809a 	beq.w	8008f70 <_dtoa_r+0x468>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd32      	ble.n	8008ea8 <_dtoa_r+0x3a0>
 8008e42:	4ab7      	ldr	r2, [pc, #732]	; (8009120 <_dtoa_r+0x618>)
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	05d8      	lsls	r0, r3, #23
 8008e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e58:	d516      	bpl.n	8008e88 <_dtoa_r+0x380>
 8008e5a:	4bb2      	ldr	r3, [pc, #712]	; (8009124 <_dtoa_r+0x61c>)
 8008e5c:	ec51 0b19 	vmov	r0, r1, d9
 8008e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e64:	f7f7 fcf2 	bl	800084c <__aeabi_ddiv>
 8008e68:	f007 070f 	and.w	r7, r7, #15
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2503      	movs	r5, #3
 8008e72:	4eac      	ldr	r6, [pc, #688]	; (8009124 <_dtoa_r+0x61c>)
 8008e74:	b957      	cbnz	r7, 8008e8c <_dtoa_r+0x384>
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f7f7 fce5 	bl	800084c <__aeabi_ddiv>
 8008e82:	4682      	mov	sl, r0
 8008e84:	468b      	mov	fp, r1
 8008e86:	e028      	b.n	8008eda <_dtoa_r+0x3d2>
 8008e88:	2502      	movs	r5, #2
 8008e8a:	e7f2      	b.n	8008e72 <_dtoa_r+0x36a>
 8008e8c:	07f9      	lsls	r1, r7, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_dtoa_r+0x39a>
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e98:	f7f7 fbae 	bl	80005f8 <__aeabi_dmul>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	107f      	asrs	r7, r7, #1
 8008ea4:	3608      	adds	r6, #8
 8008ea6:	e7e5      	b.n	8008e74 <_dtoa_r+0x36c>
 8008ea8:	f000 809b 	beq.w	8008fe2 <_dtoa_r+0x4da>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	4f9d      	ldr	r7, [pc, #628]	; (8009124 <_dtoa_r+0x61c>)
 8008eb0:	425e      	negs	r6, r3
 8008eb2:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <_dtoa_r+0x618>)
 8008eb4:	f006 020f 	and.w	r2, r6, #15
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	ec51 0b19 	vmov	r0, r1, d9
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	1136      	asrs	r6, r6, #4
 8008eca:	4682      	mov	sl, r0
 8008ecc:	468b      	mov	fp, r1
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d17a      	bne.n	8008fcc <_dtoa_r+0x4c4>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d3      	bne.n	8008e82 <_dtoa_r+0x37a>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8082 	beq.w	8008fe6 <_dtoa_r+0x4de>
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <_dtoa_r+0x620>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d079      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d076      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dd36      	ble.n	8008f6c <_dtoa_r+0x464>
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	1e5f      	subs	r7, r3, #1
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b88      	ldr	r3, [pc, #544]	; (800912c <_dtoa_r+0x624>)
 8008f0a:	f7f7 fb75 	bl	80005f8 <__aeabi_dmul>
 8008f0e:	9e02      	ldr	r6, [sp, #8]
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	3501      	adds	r5, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 fb04 	bl	8000524 <__aeabi_i2d>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	4b82      	ldr	r3, [pc, #520]	; (8009130 <_dtoa_r+0x628>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 f9b0 	bl	800028c <__adddf3>
 8008f2c:	46d0      	mov	r8, sl
 8008f2e:	46d9      	mov	r9, fp
 8008f30:	4682      	mov	sl, r0
 8008f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d158      	bne.n	8008fec <_dtoa_r+0x4e4>
 8008f3a:	4b7e      	ldr	r3, [pc, #504]	; (8009134 <_dtoa_r+0x62c>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 f9a1 	bl	8000288 <__aeabi_dsub>
 8008f46:	4652      	mov	r2, sl
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	f7f7 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f040 8295 	bne.w	8009482 <_dtoa_r+0x97a>
 8008f58:	4652      	mov	r2, sl
 8008f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f040 8289 	bne.w	800947e <_dtoa_r+0x976>
 8008f6c:	ec5b ab19 	vmov	sl, fp, d9
 8008f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f2c0 8148 	blt.w	8009208 <_dtoa_r+0x700>
 8008f78:	9a00      	ldr	r2, [sp, #0]
 8008f7a:	2a0e      	cmp	r2, #14
 8008f7c:	f300 8144 	bgt.w	8009208 <_dtoa_r+0x700>
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <_dtoa_r+0x618>)
 8008f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f280 80d5 	bge.w	800913c <_dtoa_r+0x634>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f300 80d1 	bgt.w	800913c <_dtoa_r+0x634>
 8008f9a:	f040 826f 	bne.w	800947c <_dtoa_r+0x974>
 8008f9e:	4b65      	ldr	r3, [pc, #404]	; (8009134 <_dtoa_r+0x62c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	f7f7 fda9 	bl	8000b04 <__aeabi_dcmpge>
 8008fb2:	9e03      	ldr	r6, [sp, #12]
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8245 	bne.w	8009446 <_dtoa_r+0x93e>
 8008fbc:	9d01      	ldr	r5, [sp, #4]
 8008fbe:	2331      	movs	r3, #49	; 0x31
 8008fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	e240      	b.n	800944e <_dtoa_r+0x946>
 8008fcc:	07f2      	lsls	r2, r6, #31
 8008fce:	d505      	bpl.n	8008fdc <_dtoa_r+0x4d4>
 8008fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	3501      	adds	r5, #1
 8008fda:	2301      	movs	r3, #1
 8008fdc:	1076      	asrs	r6, r6, #1
 8008fde:	3708      	adds	r7, #8
 8008fe0:	e777      	b.n	8008ed2 <_dtoa_r+0x3ca>
 8008fe2:	2502      	movs	r5, #2
 8008fe4:	e779      	b.n	8008eda <_dtoa_r+0x3d2>
 8008fe6:	9f00      	ldr	r7, [sp, #0]
 8008fe8:	9e03      	ldr	r6, [sp, #12]
 8008fea:	e794      	b.n	8008f16 <_dtoa_r+0x40e>
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <_dtoa_r+0x618>)
 8008ff0:	4431      	add	r1, r6
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	9908      	ldr	r1, [sp, #32]
 8008ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d043      	beq.n	800908a <_dtoa_r+0x582>
 8009002:	494d      	ldr	r1, [pc, #308]	; (8009138 <_dtoa_r+0x630>)
 8009004:	2000      	movs	r0, #0
 8009006:	f7f7 fc21 	bl	800084c <__aeabi_ddiv>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 f93b 	bl	8000288 <__aeabi_dsub>
 8009012:	9d01      	ldr	r5, [sp, #4]
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	f7f7 fd9c 	bl	8000b58 <__aeabi_d2iz>
 8009020:	4606      	mov	r6, r0
 8009022:	f7f7 fa7f 	bl	8000524 <__aeabi_i2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f92b 	bl	8000288 <__aeabi_dsub>
 8009032:	3630      	adds	r6, #48	; 0x30
 8009034:	f805 6b01 	strb.w	r6, [r5], #1
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	f7f7 fd4c 	bl	8000adc <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d163      	bne.n	8009110 <_dtoa_r+0x608>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4936      	ldr	r1, [pc, #216]	; (8009128 <_dtoa_r+0x620>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f91a 	bl	8000288 <__aeabi_dsub>
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	f7f7 fd40 	bl	8000adc <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b5 	bne.w	80091cc <_dtoa_r+0x6c4>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	429d      	cmp	r5, r3
 8009066:	d081      	beq.n	8008f6c <_dtoa_r+0x464>
 8009068:	4b30      	ldr	r3, [pc, #192]	; (800912c <_dtoa_r+0x624>)
 800906a:	2200      	movs	r2, #0
 800906c:	4650      	mov	r0, sl
 800906e:	4659      	mov	r1, fp
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <_dtoa_r+0x624>)
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	e7c6      	b.n	8009018 <_dtoa_r+0x510>
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 fab3 	bl	80005f8 <__aeabi_dmul>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	9d01      	ldr	r5, [sp, #4]
 8009096:	930f      	str	r3, [sp, #60]	; 0x3c
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	4649      	mov	r1, r9
 800909e:	4640      	mov	r0, r8
 80090a0:	f7f7 fd5a 	bl	8000b58 <__aeabi_d2iz>
 80090a4:	4606      	mov	r6, r0
 80090a6:	f7f7 fa3d 	bl	8000524 <__aeabi_i2d>
 80090aa:	3630      	adds	r6, #48	; 0x30
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f8e8 	bl	8000288 <__aeabi_dsub>
 80090b8:	f805 6b01 	strb.w	r6, [r5], #1
 80090bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090be:	429d      	cmp	r5, r3
 80090c0:	4680      	mov	r8, r0
 80090c2:	4689      	mov	r9, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	d124      	bne.n	8009114 <_dtoa_r+0x60c>
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <_dtoa_r+0x630>)
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d173      	bne.n	80091cc <_dtoa_r+0x6c4>
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4913      	ldr	r1, [pc, #76]	; (8009138 <_dtoa_r+0x630>)
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7f7 f8cc 	bl	8000288 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f af35 	beq.w	8008f6c <_dtoa_r+0x464>
 8009102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009104:	1e6b      	subs	r3, r5, #1
 8009106:	930f      	str	r3, [sp, #60]	; 0x3c
 8009108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800910c:	2b30      	cmp	r3, #48	; 0x30
 800910e:	d0f8      	beq.n	8009102 <_dtoa_r+0x5fa>
 8009110:	9700      	str	r7, [sp, #0]
 8009112:	e049      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_dtoa_r+0x624>)
 8009116:	f7f7 fa6f 	bl	80005f8 <__aeabi_dmul>
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	e7bd      	b.n	800909c <_dtoa_r+0x594>
 8009120:	0800baf8 	.word	0x0800baf8
 8009124:	0800bad0 	.word	0x0800bad0
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	40240000 	.word	0x40240000
 8009130:	401c0000 	.word	0x401c0000
 8009134:	40140000 	.word	0x40140000
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	4656      	mov	r6, sl
 8009140:	465f      	mov	r7, fp
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 fb7f 	bl	800084c <__aeabi_ddiv>
 800914e:	f7f7 fd03 	bl	8000b58 <__aeabi_d2iz>
 8009152:	4682      	mov	sl, r0
 8009154:	f7f7 f9e6 	bl	8000524 <__aeabi_i2d>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800916c:	f7f7 f88c 	bl	8000288 <__aeabi_dsub>
 8009170:	f805 6b01 	strb.w	r6, [r5], #1
 8009174:	9e01      	ldr	r6, [sp, #4]
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	1bae      	subs	r6, r5, r6
 800917a:	42b7      	cmp	r7, r6
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	d135      	bne.n	80091ee <_dtoa_r+0x6e6>
 8009182:	f7f7 f883 	bl	800028c <__adddf3>
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	f7f7 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8009192:	b9d0      	cbnz	r0, 80091ca <_dtoa_r+0x6c2>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a0:	b110      	cbz	r0, 80091a8 <_dtoa_r+0x6a0>
 80091a2:	f01a 0f01 	tst.w	sl, #1
 80091a6:	d110      	bne.n	80091ca <_dtoa_r+0x6c2>
 80091a8:	4620      	mov	r0, r4
 80091aa:	ee18 1a10 	vmov	r1, s16
 80091ae:	f001 f893 	bl	800a2d8 <_Bfree>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9800      	ldr	r0, [sp, #0]
 80091b6:	702b      	strb	r3, [r5, #0]
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	3001      	adds	r0, #1
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f43f acf1 	beq.w	8008ba8 <_dtoa_r+0xa0>
 80091c6:	601d      	str	r5, [r3, #0]
 80091c8:	e4ee      	b.n	8008ba8 <_dtoa_r+0xa0>
 80091ca:	9f00      	ldr	r7, [sp, #0]
 80091cc:	462b      	mov	r3, r5
 80091ce:	461d      	mov	r5, r3
 80091d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d4:	2a39      	cmp	r2, #57	; 0x39
 80091d6:	d106      	bne.n	80091e6 <_dtoa_r+0x6de>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d1f7      	bne.n	80091ce <_dtoa_r+0x6c6>
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	2230      	movs	r2, #48	; 0x30
 80091e2:	3701      	adds	r7, #1
 80091e4:	700a      	strb	r2, [r1, #0]
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	3201      	adds	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e790      	b.n	8009110 <_dtoa_r+0x608>
 80091ee:	4ba6      	ldr	r3, [pc, #664]	; (8009488 <_dtoa_r+0x980>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa01 	bl	80005f8 <__aeabi_dmul>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	f7f7 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d09d      	beq.n	8009142 <_dtoa_r+0x63a>
 8009206:	e7cf      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009208:	9a08      	ldr	r2, [sp, #32]
 800920a:	2a00      	cmp	r2, #0
 800920c:	f000 80d7 	beq.w	80093be <_dtoa_r+0x8b6>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2a01      	cmp	r2, #1
 8009214:	f300 80ba 	bgt.w	800938c <_dtoa_r+0x884>
 8009218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80b2 	beq.w	8009384 <_dtoa_r+0x87c>
 8009220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009224:	9e07      	ldr	r6, [sp, #28]
 8009226:	9d04      	ldr	r5, [sp, #16]
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	441a      	add	r2, r3
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	2101      	movs	r1, #1
 8009232:	441a      	add	r2, r3
 8009234:	4620      	mov	r0, r4
 8009236:	9205      	str	r2, [sp, #20]
 8009238:	f001 f950 	bl	800a4dc <__i2b>
 800923c:	4607      	mov	r7, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	dd0c      	ble.n	800925c <_dtoa_r+0x754>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd09      	ble.n	800925c <_dtoa_r+0x754>
 8009248:	42ab      	cmp	r3, r5
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	bfa8      	it	ge
 800924e:	462b      	movge	r3, r5
 8009250:	1ad2      	subs	r2, r2, r3
 8009252:	9204      	str	r2, [sp, #16]
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	1aed      	subs	r5, r5, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	b31b      	cbz	r3, 80092a8 <_dtoa_r+0x7a0>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80af 	beq.w	80093c6 <_dtoa_r+0x8be>
 8009268:	2e00      	cmp	r6, #0
 800926a:	dd13      	ble.n	8009294 <_dtoa_r+0x78c>
 800926c:	4639      	mov	r1, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4620      	mov	r0, r4
 8009272:	f001 f9f3 	bl	800a65c <__pow5mult>
 8009276:	ee18 2a10 	vmov	r2, s16
 800927a:	4601      	mov	r1, r0
 800927c:	4607      	mov	r7, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f001 f942 	bl	800a508 <__multiply>
 8009284:	ee18 1a10 	vmov	r1, s16
 8009288:	4680      	mov	r8, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f001 f824 	bl	800a2d8 <_Bfree>
 8009290:	ee08 8a10 	vmov	s16, r8
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	1b9a      	subs	r2, r3, r6
 8009298:	d006      	beq.n	80092a8 <_dtoa_r+0x7a0>
 800929a:	ee18 1a10 	vmov	r1, s16
 800929e:	4620      	mov	r0, r4
 80092a0:	f001 f9dc 	bl	800a65c <__pow5mult>
 80092a4:	ee08 0a10 	vmov	s16, r0
 80092a8:	2101      	movs	r1, #1
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 f916 	bl	800a4dc <__i2b>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	4606      	mov	r6, r0
 80092b6:	f340 8088 	ble.w	80093ca <_dtoa_r+0x8c2>
 80092ba:	461a      	mov	r2, r3
 80092bc:	4601      	mov	r1, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	f001 f9cc 	bl	800a65c <__pow5mult>
 80092c4:	9b06      	ldr	r3, [sp, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	4606      	mov	r6, r0
 80092ca:	f340 8081 	ble.w	80093d0 <_dtoa_r+0x8c8>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	6933      	ldr	r3, [r6, #16]
 80092d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f001 f8af 	bl	800a43c <__hi0bits>
 80092de:	f1c0 0020 	rsb	r0, r0, #32
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	4418      	add	r0, r3
 80092e6:	f010 001f 	ands.w	r0, r0, #31
 80092ea:	f000 8092 	beq.w	8009412 <_dtoa_r+0x90a>
 80092ee:	f1c0 0320 	rsb	r3, r0, #32
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	f340 808a 	ble.w	800940c <_dtoa_r+0x904>
 80092f8:	f1c0 001c 	rsb	r0, r0, #28
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4403      	add	r3, r0
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4403      	add	r3, r0
 8009306:	4405      	add	r5, r0
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd07      	ble.n	8009320 <_dtoa_r+0x818>
 8009310:	ee18 1a10 	vmov	r1, s16
 8009314:	461a      	mov	r2, r3
 8009316:	4620      	mov	r0, r4
 8009318:	f001 f9fa 	bl	800a710 <__lshift>
 800931c:	ee08 0a10 	vmov	s16, r0
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd05      	ble.n	8009332 <_dtoa_r+0x82a>
 8009326:	4631      	mov	r1, r6
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f001 f9f0 	bl	800a710 <__lshift>
 8009330:	4606      	mov	r6, r0
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d06e      	beq.n	8009416 <_dtoa_r+0x90e>
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	4631      	mov	r1, r6
 800933e:	f001 fa57 	bl	800a7f0 <__mcmp>
 8009342:	2800      	cmp	r0, #0
 8009344:	da67      	bge.n	8009416 <_dtoa_r+0x90e>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	220a      	movs	r2, #10
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	f000 ffe1 	bl	800a31c <__multadd>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 81b1 	beq.w	80096c8 <_dtoa_r+0xbc0>
 8009366:	2300      	movs	r3, #0
 8009368:	4639      	mov	r1, r7
 800936a:	220a      	movs	r2, #10
 800936c:	4620      	mov	r0, r4
 800936e:	f000 ffd5 	bl	800a31c <__multadd>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	4607      	mov	r7, r0
 8009378:	f300 808e 	bgt.w	8009498 <_dtoa_r+0x990>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b02      	cmp	r3, #2
 8009380:	dc51      	bgt.n	8009426 <_dtoa_r+0x91e>
 8009382:	e089      	b.n	8009498 <_dtoa_r+0x990>
 8009384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800938a:	e74b      	b.n	8009224 <_dtoa_r+0x71c>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	1e5e      	subs	r6, r3, #1
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	42b3      	cmp	r3, r6
 8009394:	bfbf      	itttt	lt
 8009396:	9b07      	ldrlt	r3, [sp, #28]
 8009398:	9607      	strlt	r6, [sp, #28]
 800939a:	1af2      	sublt	r2, r6, r3
 800939c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800939e:	bfb6      	itet	lt
 80093a0:	189b      	addlt	r3, r3, r2
 80093a2:	1b9e      	subge	r6, r3, r6
 80093a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	bfb8      	it	lt
 80093aa:	2600      	movlt	r6, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bfb7      	itett	lt
 80093b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093b8:	1a9d      	sublt	r5, r3, r2
 80093ba:	2300      	movlt	r3, #0
 80093bc:	e734      	b.n	8009228 <_dtoa_r+0x720>
 80093be:	9e07      	ldr	r6, [sp, #28]
 80093c0:	9d04      	ldr	r5, [sp, #16]
 80093c2:	9f08      	ldr	r7, [sp, #32]
 80093c4:	e73b      	b.n	800923e <_dtoa_r+0x736>
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	e767      	b.n	800929a <_dtoa_r+0x792>
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dc18      	bgt.n	8009402 <_dtoa_r+0x8fa>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d115      	bne.n	8009402 <_dtoa_r+0x8fa>
 80093d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093da:	b993      	cbnz	r3, 8009402 <_dtoa_r+0x8fa>
 80093dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	b183      	cbz	r3, 8009408 <_dtoa_r+0x900>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f04f 0801 	mov.w	r8, #1
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af6a 	bne.w	80092d2 <_dtoa_r+0x7ca>
 80093fe:	2001      	movs	r0, #1
 8009400:	e76f      	b.n	80092e2 <_dtoa_r+0x7da>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	e7f6      	b.n	80093f6 <_dtoa_r+0x8ee>
 8009408:	4698      	mov	r8, r3
 800940a:	e7f4      	b.n	80093f6 <_dtoa_r+0x8ee>
 800940c:	f43f af7d 	beq.w	800930a <_dtoa_r+0x802>
 8009410:	4618      	mov	r0, r3
 8009412:	301c      	adds	r0, #28
 8009414:	e772      	b.n	80092fc <_dtoa_r+0x7f4>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc37      	bgt.n	800948c <_dtoa_r+0x984>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dd34      	ble.n	800948c <_dtoa_r+0x984>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	b96b      	cbnz	r3, 8009446 <_dtoa_r+0x93e>
 800942a:	4631      	mov	r1, r6
 800942c:	2205      	movs	r2, #5
 800942e:	4620      	mov	r0, r4
 8009430:	f000 ff74 	bl	800a31c <__multadd>
 8009434:	4601      	mov	r1, r0
 8009436:	4606      	mov	r6, r0
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	f001 f9d8 	bl	800a7f0 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	f73f adbb 	bgt.w	8008fbc <_dtoa_r+0x4b4>
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	9d01      	ldr	r5, [sp, #4]
 800944a:	43db      	mvns	r3, r3
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	4631      	mov	r1, r6
 8009454:	4620      	mov	r0, r4
 8009456:	f000 ff3f 	bl	800a2d8 <_Bfree>
 800945a:	2f00      	cmp	r7, #0
 800945c:	f43f aea4 	beq.w	80091a8 <_dtoa_r+0x6a0>
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d005      	beq.n	8009472 <_dtoa_r+0x96a>
 8009466:	45b8      	cmp	r8, r7
 8009468:	d003      	beq.n	8009472 <_dtoa_r+0x96a>
 800946a:	4641      	mov	r1, r8
 800946c:	4620      	mov	r0, r4
 800946e:	f000 ff33 	bl	800a2d8 <_Bfree>
 8009472:	4639      	mov	r1, r7
 8009474:	4620      	mov	r0, r4
 8009476:	f000 ff2f 	bl	800a2d8 <_Bfree>
 800947a:	e695      	b.n	80091a8 <_dtoa_r+0x6a0>
 800947c:	2600      	movs	r6, #0
 800947e:	4637      	mov	r7, r6
 8009480:	e7e1      	b.n	8009446 <_dtoa_r+0x93e>
 8009482:	9700      	str	r7, [sp, #0]
 8009484:	4637      	mov	r7, r6
 8009486:	e599      	b.n	8008fbc <_dtoa_r+0x4b4>
 8009488:	40240000 	.word	0x40240000
 800948c:	9b08      	ldr	r3, [sp, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 80ca 	beq.w	8009628 <_dtoa_r+0xb20>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x9a0>
 800949c:	4639      	mov	r1, r7
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f001 f935 	bl	800a710 <__lshift>
 80094a6:	4607      	mov	r7, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d05b      	beq.n	8009566 <_dtoa_r+0xa5e>
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fed1 	bl	800a258 <_Balloc>
 80094b6:	4605      	mov	r5, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <_dtoa_r+0x9be>
 80094ba:	4b87      	ldr	r3, [pc, #540]	; (80096d8 <_dtoa_r+0xbd0>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094c2:	f7ff bb3b 	b.w	8008b3c <_dtoa_r+0x34>
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	f107 010c 	add.w	r1, r7, #12
 80094d0:	300c      	adds	r0, #12
 80094d2:	f000 feb3 	bl	800a23c <memcpy>
 80094d6:	2201      	movs	r2, #1
 80094d8:	4629      	mov	r1, r5
 80094da:	4620      	mov	r0, r4
 80094dc:	f001 f918 	bl	800a710 <__lshift>
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	f103 0901 	add.w	r9, r3, #1
 80094e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	f00a 0301 	and.w	r3, sl, #1
 80094f2:	46b8      	mov	r8, r7
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	4607      	mov	r7, r0
 80094f8:	4631      	mov	r1, r6
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f7ff fa77 	bl	80089f0 <quorem>
 8009502:	4641      	mov	r1, r8
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	f001 f96f 	bl	800a7f0 <__mcmp>
 8009512:	463a      	mov	r2, r7
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	4631      	mov	r1, r6
 8009518:	4620      	mov	r0, r4
 800951a:	f001 f985 	bl	800a828 <__mdiff>
 800951e:	68c2      	ldr	r2, [r0, #12]
 8009520:	f109 3bff 	add.w	fp, r9, #4294967295
 8009524:	4605      	mov	r5, r0
 8009526:	bb02      	cbnz	r2, 800956a <_dtoa_r+0xa62>
 8009528:	4601      	mov	r1, r0
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f001 f95f 	bl	800a7f0 <__mcmp>
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	f000 fecd 	bl	800a2d8 <_Bfree>
 800953e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009542:	ea43 0102 	orr.w	r1, r3, r2
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	430b      	orrs	r3, r1
 800954a:	464d      	mov	r5, r9
 800954c:	d10f      	bne.n	800956e <_dtoa_r+0xa66>
 800954e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009552:	d02a      	beq.n	80095aa <_dtoa_r+0xaa2>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd02      	ble.n	8009560 <_dtoa_r+0xa58>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009560:	f88b a000 	strb.w	sl, [fp]
 8009564:	e775      	b.n	8009452 <_dtoa_r+0x94a>
 8009566:	4638      	mov	r0, r7
 8009568:	e7ba      	b.n	80094e0 <_dtoa_r+0x9d8>
 800956a:	2201      	movs	r2, #1
 800956c:	e7e2      	b.n	8009534 <_dtoa_r+0xa2c>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db04      	blt.n	800957e <_dtoa_r+0xa76>
 8009574:	9906      	ldr	r1, [sp, #24]
 8009576:	430b      	orrs	r3, r1
 8009578:	9904      	ldr	r1, [sp, #16]
 800957a:	430b      	orrs	r3, r1
 800957c:	d122      	bne.n	80095c4 <_dtoa_r+0xabc>
 800957e:	2a00      	cmp	r2, #0
 8009580:	ddee      	ble.n	8009560 <_dtoa_r+0xa58>
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	2201      	movs	r2, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f001 f8c1 	bl	800a710 <__lshift>
 800958e:	4631      	mov	r1, r6
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	f001 f92c 	bl	800a7f0 <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	dc03      	bgt.n	80095a4 <_dtoa_r+0xa9c>
 800959c:	d1e0      	bne.n	8009560 <_dtoa_r+0xa58>
 800959e:	f01a 0f01 	tst.w	sl, #1
 80095a2:	d0dd      	beq.n	8009560 <_dtoa_r+0xa58>
 80095a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095a8:	d1d7      	bne.n	800955a <_dtoa_r+0xa52>
 80095aa:	2339      	movs	r3, #57	; 0x39
 80095ac:	f88b 3000 	strb.w	r3, [fp]
 80095b0:	462b      	mov	r3, r5
 80095b2:	461d      	mov	r5, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ba:	2a39      	cmp	r2, #57	; 0x39
 80095bc:	d071      	beq.n	80096a2 <_dtoa_r+0xb9a>
 80095be:	3201      	adds	r2, #1
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e746      	b.n	8009452 <_dtoa_r+0x94a>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0xad0>
 80095c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095cc:	d0ed      	beq.n	80095aa <_dtoa_r+0xaa2>
 80095ce:	f10a 0301 	add.w	r3, sl, #1
 80095d2:	f88b 3000 	strb.w	r3, [fp]
 80095d6:	e73c      	b.n	8009452 <_dtoa_r+0x94a>
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095de:	4599      	cmp	r9, r3
 80095e0:	d047      	beq.n	8009672 <_dtoa_r+0xb6a>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fe96 	bl	800a31c <__multadd>
 80095f0:	45b8      	cmp	r8, r7
 80095f2:	ee08 0a10 	vmov	s16, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4620      	mov	r0, r4
 8009602:	d106      	bne.n	8009612 <_dtoa_r+0xb0a>
 8009604:	f000 fe8a 	bl	800a31c <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4607      	mov	r7, r0
 800960c:	f109 0901 	add.w	r9, r9, #1
 8009610:	e772      	b.n	80094f8 <_dtoa_r+0x9f0>
 8009612:	f000 fe83 	bl	800a31c <__multadd>
 8009616:	4639      	mov	r1, r7
 8009618:	4680      	mov	r8, r0
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fe7c 	bl	800a31c <__multadd>
 8009624:	4607      	mov	r7, r0
 8009626:	e7f1      	b.n	800960c <_dtoa_r+0xb04>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	9d01      	ldr	r5, [sp, #4]
 800962e:	ee18 0a10 	vmov	r0, s16
 8009632:	4631      	mov	r1, r6
 8009634:	f7ff f9dc 	bl	80089f0 <quorem>
 8009638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f805 ab01 	strb.w	sl, [r5], #1
 8009642:	1aea      	subs	r2, r5, r3
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	4293      	cmp	r3, r2
 8009648:	dd09      	ble.n	800965e <_dtoa_r+0xb56>
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	2300      	movs	r3, #0
 8009650:	220a      	movs	r2, #10
 8009652:	4620      	mov	r0, r4
 8009654:	f000 fe62 	bl	800a31c <__multadd>
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	e7e7      	b.n	800962e <_dtoa_r+0xb26>
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfc8      	it	gt
 8009664:	461d      	movgt	r5, r3
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	bfd8      	it	le
 800966a:	2501      	movle	r5, #1
 800966c:	441d      	add	r5, r3
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f001 f849 	bl	800a710 <__lshift>
 800967e:	4631      	mov	r1, r6
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	f001 f8b4 	bl	800a7f0 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dc91      	bgt.n	80095b0 <_dtoa_r+0xaa8>
 800968c:	d102      	bne.n	8009694 <_dtoa_r+0xb8c>
 800968e:	f01a 0f01 	tst.w	sl, #1
 8009692:	d18d      	bne.n	80095b0 <_dtoa_r+0xaa8>
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a30      	cmp	r2, #48	; 0x30
 800969e:	d0fa      	beq.n	8009696 <_dtoa_r+0xb8e>
 80096a0:	e6d7      	b.n	8009452 <_dtoa_r+0x94a>
 80096a2:	9a01      	ldr	r2, [sp, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d184      	bne.n	80095b2 <_dtoa_r+0xaaa>
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2331      	movs	r3, #49	; 0x31
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e6ce      	b.n	8009452 <_dtoa_r+0x94a>
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_dtoa_r+0xbd4>)
 80096b6:	f7ff ba95 	b.w	8008be4 <_dtoa_r+0xdc>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f aa6e 	bne.w	8008b9e <_dtoa_r+0x96>
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <_dtoa_r+0xbd8>)
 80096c4:	f7ff ba8e 	b.w	8008be4 <_dtoa_r+0xdc>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dcae      	bgt.n	800962c <_dtoa_r+0xb24>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f73f aea8 	bgt.w	8009426 <_dtoa_r+0x91e>
 80096d6:	e7a9      	b.n	800962c <_dtoa_r+0xb24>
 80096d8:	0800b980 	.word	0x0800b980
 80096dc:	0800b780 	.word	0x0800b780
 80096e0:	0800b901 	.word	0x0800b901

080096e4 <__sflush_r>:
 80096e4:	898a      	ldrh	r2, [r1, #12]
 80096e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	4605      	mov	r5, r0
 80096ec:	0710      	lsls	r0, r2, #28
 80096ee:	460c      	mov	r4, r1
 80096f0:	d458      	bmi.n	80097a4 <__sflush_r+0xc0>
 80096f2:	684b      	ldr	r3, [r1, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dc05      	bgt.n	8009704 <__sflush_r+0x20>
 80096f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dc02      	bgt.n	8009704 <__sflush_r+0x20>
 80096fe:	2000      	movs	r0, #0
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009706:	2e00      	cmp	r6, #0
 8009708:	d0f9      	beq.n	80096fe <__sflush_r+0x1a>
 800970a:	2300      	movs	r3, #0
 800970c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009710:	682f      	ldr	r7, [r5, #0]
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	d032      	beq.n	800977c <__sflush_r+0x98>
 8009716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	075a      	lsls	r2, r3, #29
 800971c:	d505      	bpl.n	800972a <__sflush_r+0x46>
 800971e:	6863      	ldr	r3, [r4, #4]
 8009720:	1ac0      	subs	r0, r0, r3
 8009722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009724:	b10b      	cbz	r3, 800972a <__sflush_r+0x46>
 8009726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009728:	1ac0      	subs	r0, r0, r3
 800972a:	2300      	movs	r3, #0
 800972c:	4602      	mov	r2, r0
 800972e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009730:	6a21      	ldr	r1, [r4, #32]
 8009732:	4628      	mov	r0, r5
 8009734:	47b0      	blx	r6
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	d106      	bne.n	800974a <__sflush_r+0x66>
 800973c:	6829      	ldr	r1, [r5, #0]
 800973e:	291d      	cmp	r1, #29
 8009740:	d82c      	bhi.n	800979c <__sflush_r+0xb8>
 8009742:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <__sflush_r+0x108>)
 8009744:	40ca      	lsrs	r2, r1
 8009746:	07d6      	lsls	r6, r2, #31
 8009748:	d528      	bpl.n	800979c <__sflush_r+0xb8>
 800974a:	2200      	movs	r2, #0
 800974c:	6062      	str	r2, [r4, #4]
 800974e:	04d9      	lsls	r1, r3, #19
 8009750:	6922      	ldr	r2, [r4, #16]
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	d504      	bpl.n	8009760 <__sflush_r+0x7c>
 8009756:	1c42      	adds	r2, r0, #1
 8009758:	d101      	bne.n	800975e <__sflush_r+0x7a>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	b903      	cbnz	r3, 8009760 <__sflush_r+0x7c>
 800975e:	6560      	str	r0, [r4, #84]	; 0x54
 8009760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009762:	602f      	str	r7, [r5, #0]
 8009764:	2900      	cmp	r1, #0
 8009766:	d0ca      	beq.n	80096fe <__sflush_r+0x1a>
 8009768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800976c:	4299      	cmp	r1, r3
 800976e:	d002      	beq.n	8009776 <__sflush_r+0x92>
 8009770:	4628      	mov	r0, r5
 8009772:	f001 fa49 	bl	800ac08 <_free_r>
 8009776:	2000      	movs	r0, #0
 8009778:	6360      	str	r0, [r4, #52]	; 0x34
 800977a:	e7c1      	b.n	8009700 <__sflush_r+0x1c>
 800977c:	6a21      	ldr	r1, [r4, #32]
 800977e:	2301      	movs	r3, #1
 8009780:	4628      	mov	r0, r5
 8009782:	47b0      	blx	r6
 8009784:	1c41      	adds	r1, r0, #1
 8009786:	d1c7      	bne.n	8009718 <__sflush_r+0x34>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0c4      	beq.n	8009718 <__sflush_r+0x34>
 800978e:	2b1d      	cmp	r3, #29
 8009790:	d001      	beq.n	8009796 <__sflush_r+0xb2>
 8009792:	2b16      	cmp	r3, #22
 8009794:	d101      	bne.n	800979a <__sflush_r+0xb6>
 8009796:	602f      	str	r7, [r5, #0]
 8009798:	e7b1      	b.n	80096fe <__sflush_r+0x1a>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	e7ad      	b.n	8009700 <__sflush_r+0x1c>
 80097a4:	690f      	ldr	r7, [r1, #16]
 80097a6:	2f00      	cmp	r7, #0
 80097a8:	d0a9      	beq.n	80096fe <__sflush_r+0x1a>
 80097aa:	0793      	lsls	r3, r2, #30
 80097ac:	680e      	ldr	r6, [r1, #0]
 80097ae:	bf08      	it	eq
 80097b0:	694b      	ldreq	r3, [r1, #20]
 80097b2:	600f      	str	r7, [r1, #0]
 80097b4:	bf18      	it	ne
 80097b6:	2300      	movne	r3, #0
 80097b8:	eba6 0807 	sub.w	r8, r6, r7
 80097bc:	608b      	str	r3, [r1, #8]
 80097be:	f1b8 0f00 	cmp.w	r8, #0
 80097c2:	dd9c      	ble.n	80096fe <__sflush_r+0x1a>
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097c8:	4643      	mov	r3, r8
 80097ca:	463a      	mov	r2, r7
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b0      	blx	r6
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dc06      	bgt.n	80097e2 <__sflush_r+0xfe>
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	e78e      	b.n	8009700 <__sflush_r+0x1c>
 80097e2:	4407      	add	r7, r0
 80097e4:	eba8 0800 	sub.w	r8, r8, r0
 80097e8:	e7e9      	b.n	80097be <__sflush_r+0xda>
 80097ea:	bf00      	nop
 80097ec:	20400001 	.word	0x20400001

080097f0 <_fflush_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	690b      	ldr	r3, [r1, #16]
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b913      	cbnz	r3, 8009800 <_fflush_r+0x10>
 80097fa:	2500      	movs	r5, #0
 80097fc:	4628      	mov	r0, r5
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	b118      	cbz	r0, 800980a <_fflush_r+0x1a>
 8009802:	6983      	ldr	r3, [r0, #24]
 8009804:	b90b      	cbnz	r3, 800980a <_fflush_r+0x1a>
 8009806:	f000 f887 	bl	8009918 <__sinit>
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <_fflush_r+0x6c>)
 800980c:	429c      	cmp	r4, r3
 800980e:	d11b      	bne.n	8009848 <_fflush_r+0x58>
 8009810:	686c      	ldr	r4, [r5, #4]
 8009812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0ef      	beq.n	80097fa <_fflush_r+0xa>
 800981a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800981c:	07d0      	lsls	r0, r2, #31
 800981e:	d404      	bmi.n	800982a <_fflush_r+0x3a>
 8009820:	0599      	lsls	r1, r3, #22
 8009822:	d402      	bmi.n	800982a <_fflush_r+0x3a>
 8009824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009826:	f000 fc88 	bl	800a13a <__retarget_lock_acquire_recursive>
 800982a:	4628      	mov	r0, r5
 800982c:	4621      	mov	r1, r4
 800982e:	f7ff ff59 	bl	80096e4 <__sflush_r>
 8009832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009834:	07da      	lsls	r2, r3, #31
 8009836:	4605      	mov	r5, r0
 8009838:	d4e0      	bmi.n	80097fc <_fflush_r+0xc>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	059b      	lsls	r3, r3, #22
 800983e:	d4dd      	bmi.n	80097fc <_fflush_r+0xc>
 8009840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009842:	f000 fc7b 	bl	800a13c <__retarget_lock_release_recursive>
 8009846:	e7d9      	b.n	80097fc <_fflush_r+0xc>
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <_fflush_r+0x70>)
 800984a:	429c      	cmp	r4, r3
 800984c:	d101      	bne.n	8009852 <_fflush_r+0x62>
 800984e:	68ac      	ldr	r4, [r5, #8]
 8009850:	e7df      	b.n	8009812 <_fflush_r+0x22>
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <_fflush_r+0x74>)
 8009854:	429c      	cmp	r4, r3
 8009856:	bf08      	it	eq
 8009858:	68ec      	ldreq	r4, [r5, #12]
 800985a:	e7da      	b.n	8009812 <_fflush_r+0x22>
 800985c:	0800b9b4 	.word	0x0800b9b4
 8009860:	0800b9d4 	.word	0x0800b9d4
 8009864:	0800b994 	.word	0x0800b994

08009868 <std>:
 8009868:	2300      	movs	r3, #0
 800986a:	b510      	push	{r4, lr}
 800986c:	4604      	mov	r4, r0
 800986e:	e9c0 3300 	strd	r3, r3, [r0]
 8009872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009876:	6083      	str	r3, [r0, #8]
 8009878:	8181      	strh	r1, [r0, #12]
 800987a:	6643      	str	r3, [r0, #100]	; 0x64
 800987c:	81c2      	strh	r2, [r0, #14]
 800987e:	6183      	str	r3, [r0, #24]
 8009880:	4619      	mov	r1, r3
 8009882:	2208      	movs	r2, #8
 8009884:	305c      	adds	r0, #92	; 0x5c
 8009886:	f7fd fa0f 	bl	8006ca8 <memset>
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <std+0x38>)
 800988c:	6263      	str	r3, [r4, #36]	; 0x24
 800988e:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <std+0x3c>)
 8009890:	62a3      	str	r3, [r4, #40]	; 0x28
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <std+0x40>)
 8009894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <std+0x44>)
 8009898:	6224      	str	r4, [r4, #32]
 800989a:	6323      	str	r3, [r4, #48]	; 0x30
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	0800b369 	.word	0x0800b369
 80098a4:	0800b38b 	.word	0x0800b38b
 80098a8:	0800b3c3 	.word	0x0800b3c3
 80098ac:	0800b3e7 	.word	0x0800b3e7

080098b0 <_cleanup_r>:
 80098b0:	4901      	ldr	r1, [pc, #4]	; (80098b8 <_cleanup_r+0x8>)
 80098b2:	f000 b8af 	b.w	8009a14 <_fwalk_reent>
 80098b6:	bf00      	nop
 80098b8:	080097f1 	.word	0x080097f1

080098bc <__sfmoreglue>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	2268      	movs	r2, #104	; 0x68
 80098c0:	1e4d      	subs	r5, r1, #1
 80098c2:	4355      	muls	r5, r2
 80098c4:	460e      	mov	r6, r1
 80098c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098ca:	f001 fa09 	bl	800ace0 <_malloc_r>
 80098ce:	4604      	mov	r4, r0
 80098d0:	b140      	cbz	r0, 80098e4 <__sfmoreglue+0x28>
 80098d2:	2100      	movs	r1, #0
 80098d4:	e9c0 1600 	strd	r1, r6, [r0]
 80098d8:	300c      	adds	r0, #12
 80098da:	60a0      	str	r0, [r4, #8]
 80098dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098e0:	f7fd f9e2 	bl	8006ca8 <memset>
 80098e4:	4620      	mov	r0, r4
 80098e6:	bd70      	pop	{r4, r5, r6, pc}

080098e8 <__sfp_lock_acquire>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__sfp_lock_acquire+0x8>)
 80098ea:	f000 bc26 	b.w	800a13a <__retarget_lock_acquire_recursive>
 80098ee:	bf00      	nop
 80098f0:	2000041d 	.word	0x2000041d

080098f4 <__sfp_lock_release>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__sfp_lock_release+0x8>)
 80098f6:	f000 bc21 	b.w	800a13c <__retarget_lock_release_recursive>
 80098fa:	bf00      	nop
 80098fc:	2000041d 	.word	0x2000041d

08009900 <__sinit_lock_acquire>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__sinit_lock_acquire+0x8>)
 8009902:	f000 bc1a 	b.w	800a13a <__retarget_lock_acquire_recursive>
 8009906:	bf00      	nop
 8009908:	2000041e 	.word	0x2000041e

0800990c <__sinit_lock_release>:
 800990c:	4801      	ldr	r0, [pc, #4]	; (8009914 <__sinit_lock_release+0x8>)
 800990e:	f000 bc15 	b.w	800a13c <__retarget_lock_release_recursive>
 8009912:	bf00      	nop
 8009914:	2000041e 	.word	0x2000041e

08009918 <__sinit>:
 8009918:	b510      	push	{r4, lr}
 800991a:	4604      	mov	r4, r0
 800991c:	f7ff fff0 	bl	8009900 <__sinit_lock_acquire>
 8009920:	69a3      	ldr	r3, [r4, #24]
 8009922:	b11b      	cbz	r3, 800992c <__sinit+0x14>
 8009924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009928:	f7ff bff0 	b.w	800990c <__sinit_lock_release>
 800992c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009930:	6523      	str	r3, [r4, #80]	; 0x50
 8009932:	4b13      	ldr	r3, [pc, #76]	; (8009980 <__sinit+0x68>)
 8009934:	4a13      	ldr	r2, [pc, #76]	; (8009984 <__sinit+0x6c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	62a2      	str	r2, [r4, #40]	; 0x28
 800993a:	42a3      	cmp	r3, r4
 800993c:	bf04      	itt	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	61a3      	streq	r3, [r4, #24]
 8009942:	4620      	mov	r0, r4
 8009944:	f000 f820 	bl	8009988 <__sfp>
 8009948:	6060      	str	r0, [r4, #4]
 800994a:	4620      	mov	r0, r4
 800994c:	f000 f81c 	bl	8009988 <__sfp>
 8009950:	60a0      	str	r0, [r4, #8]
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f818 	bl	8009988 <__sfp>
 8009958:	2200      	movs	r2, #0
 800995a:	60e0      	str	r0, [r4, #12]
 800995c:	2104      	movs	r1, #4
 800995e:	6860      	ldr	r0, [r4, #4]
 8009960:	f7ff ff82 	bl	8009868 <std>
 8009964:	68a0      	ldr	r0, [r4, #8]
 8009966:	2201      	movs	r2, #1
 8009968:	2109      	movs	r1, #9
 800996a:	f7ff ff7d 	bl	8009868 <std>
 800996e:	68e0      	ldr	r0, [r4, #12]
 8009970:	2202      	movs	r2, #2
 8009972:	2112      	movs	r1, #18
 8009974:	f7ff ff78 	bl	8009868 <std>
 8009978:	2301      	movs	r3, #1
 800997a:	61a3      	str	r3, [r4, #24]
 800997c:	e7d2      	b.n	8009924 <__sinit+0xc>
 800997e:	bf00      	nop
 8009980:	0800b76c 	.word	0x0800b76c
 8009984:	080098b1 	.word	0x080098b1

08009988 <__sfp>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	4607      	mov	r7, r0
 800998c:	f7ff ffac 	bl	80098e8 <__sfp_lock_acquire>
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <__sfp+0x84>)
 8009992:	681e      	ldr	r6, [r3, #0]
 8009994:	69b3      	ldr	r3, [r6, #24]
 8009996:	b913      	cbnz	r3, 800999e <__sfp+0x16>
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffbd 	bl	8009918 <__sinit>
 800999e:	3648      	adds	r6, #72	; 0x48
 80099a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	d503      	bpl.n	80099b0 <__sfp+0x28>
 80099a8:	6833      	ldr	r3, [r6, #0]
 80099aa:	b30b      	cbz	r3, 80099f0 <__sfp+0x68>
 80099ac:	6836      	ldr	r6, [r6, #0]
 80099ae:	e7f7      	b.n	80099a0 <__sfp+0x18>
 80099b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099b4:	b9d5      	cbnz	r5, 80099ec <__sfp+0x64>
 80099b6:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <__sfp+0x88>)
 80099b8:	60e3      	str	r3, [r4, #12]
 80099ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099be:	6665      	str	r5, [r4, #100]	; 0x64
 80099c0:	f000 fbba 	bl	800a138 <__retarget_lock_init_recursive>
 80099c4:	f7ff ff96 	bl	80098f4 <__sfp_lock_release>
 80099c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099d0:	6025      	str	r5, [r4, #0]
 80099d2:	61a5      	str	r5, [r4, #24]
 80099d4:	2208      	movs	r2, #8
 80099d6:	4629      	mov	r1, r5
 80099d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099dc:	f7fd f964 	bl	8006ca8 <memset>
 80099e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099e8:	4620      	mov	r0, r4
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ec:	3468      	adds	r4, #104	; 0x68
 80099ee:	e7d9      	b.n	80099a4 <__sfp+0x1c>
 80099f0:	2104      	movs	r1, #4
 80099f2:	4638      	mov	r0, r7
 80099f4:	f7ff ff62 	bl	80098bc <__sfmoreglue>
 80099f8:	4604      	mov	r4, r0
 80099fa:	6030      	str	r0, [r6, #0]
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1d5      	bne.n	80099ac <__sfp+0x24>
 8009a00:	f7ff ff78 	bl	80098f4 <__sfp_lock_release>
 8009a04:	230c      	movs	r3, #12
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	e7ee      	b.n	80099e8 <__sfp+0x60>
 8009a0a:	bf00      	nop
 8009a0c:	0800b76c 	.word	0x0800b76c
 8009a10:	ffff0001 	.word	0xffff0001

08009a14 <_fwalk_reent>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	4606      	mov	r6, r0
 8009a1a:	4688      	mov	r8, r1
 8009a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a20:	2700      	movs	r7, #0
 8009a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a26:	f1b9 0901 	subs.w	r9, r9, #1
 8009a2a:	d505      	bpl.n	8009a38 <_fwalk_reent+0x24>
 8009a2c:	6824      	ldr	r4, [r4, #0]
 8009a2e:	2c00      	cmp	r4, #0
 8009a30:	d1f7      	bne.n	8009a22 <_fwalk_reent+0xe>
 8009a32:	4638      	mov	r0, r7
 8009a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a38:	89ab      	ldrh	r3, [r5, #12]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d907      	bls.n	8009a4e <_fwalk_reent+0x3a>
 8009a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a42:	3301      	adds	r3, #1
 8009a44:	d003      	beq.n	8009a4e <_fwalk_reent+0x3a>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4630      	mov	r0, r6
 8009a4a:	47c0      	blx	r8
 8009a4c:	4307      	orrs	r7, r0
 8009a4e:	3568      	adds	r5, #104	; 0x68
 8009a50:	e7e9      	b.n	8009a26 <_fwalk_reent+0x12>

08009a52 <rshift>:
 8009a52:	6903      	ldr	r3, [r0, #16]
 8009a54:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a60:	f100 0414 	add.w	r4, r0, #20
 8009a64:	dd45      	ble.n	8009af2 <rshift+0xa0>
 8009a66:	f011 011f 	ands.w	r1, r1, #31
 8009a6a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a6e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a72:	d10c      	bne.n	8009a8e <rshift+0x3c>
 8009a74:	f100 0710 	add.w	r7, r0, #16
 8009a78:	4629      	mov	r1, r5
 8009a7a:	42b1      	cmp	r1, r6
 8009a7c:	d334      	bcc.n	8009ae8 <rshift+0x96>
 8009a7e:	1a9b      	subs	r3, r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	1eea      	subs	r2, r5, #3
 8009a84:	4296      	cmp	r6, r2
 8009a86:	bf38      	it	cc
 8009a88:	2300      	movcc	r3, #0
 8009a8a:	4423      	add	r3, r4
 8009a8c:	e015      	b.n	8009aba <rshift+0x68>
 8009a8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a92:	f1c1 0820 	rsb	r8, r1, #32
 8009a96:	40cf      	lsrs	r7, r1
 8009a98:	f105 0e04 	add.w	lr, r5, #4
 8009a9c:	46a1      	mov	r9, r4
 8009a9e:	4576      	cmp	r6, lr
 8009aa0:	46f4      	mov	ip, lr
 8009aa2:	d815      	bhi.n	8009ad0 <rshift+0x7e>
 8009aa4:	1a9a      	subs	r2, r3, r2
 8009aa6:	0092      	lsls	r2, r2, #2
 8009aa8:	3a04      	subs	r2, #4
 8009aaa:	3501      	adds	r5, #1
 8009aac:	42ae      	cmp	r6, r5
 8009aae:	bf38      	it	cc
 8009ab0:	2200      	movcc	r2, #0
 8009ab2:	18a3      	adds	r3, r4, r2
 8009ab4:	50a7      	str	r7, [r4, r2]
 8009ab6:	b107      	cbz	r7, 8009aba <rshift+0x68>
 8009ab8:	3304      	adds	r3, #4
 8009aba:	1b1a      	subs	r2, r3, r4
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ac2:	bf08      	it	eq
 8009ac4:	2300      	moveq	r3, #0
 8009ac6:	6102      	str	r2, [r0, #16]
 8009ac8:	bf08      	it	eq
 8009aca:	6143      	streq	r3, [r0, #20]
 8009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	f8dc c000 	ldr.w	ip, [ip]
 8009ad4:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ad8:	ea4c 0707 	orr.w	r7, ip, r7
 8009adc:	f849 7b04 	str.w	r7, [r9], #4
 8009ae0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ae4:	40cf      	lsrs	r7, r1
 8009ae6:	e7da      	b.n	8009a9e <rshift+0x4c>
 8009ae8:	f851 cb04 	ldr.w	ip, [r1], #4
 8009aec:	f847 cf04 	str.w	ip, [r7, #4]!
 8009af0:	e7c3      	b.n	8009a7a <rshift+0x28>
 8009af2:	4623      	mov	r3, r4
 8009af4:	e7e1      	b.n	8009aba <rshift+0x68>

08009af6 <__hexdig_fun>:
 8009af6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	d802      	bhi.n	8009b04 <__hexdig_fun+0xe>
 8009afe:	3820      	subs	r0, #32
 8009b00:	b2c0      	uxtb	r0, r0
 8009b02:	4770      	bx	lr
 8009b04:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b08:	2b05      	cmp	r3, #5
 8009b0a:	d801      	bhi.n	8009b10 <__hexdig_fun+0x1a>
 8009b0c:	3847      	subs	r0, #71	; 0x47
 8009b0e:	e7f7      	b.n	8009b00 <__hexdig_fun+0xa>
 8009b10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b14:	2b05      	cmp	r3, #5
 8009b16:	d801      	bhi.n	8009b1c <__hexdig_fun+0x26>
 8009b18:	3827      	subs	r0, #39	; 0x27
 8009b1a:	e7f1      	b.n	8009b00 <__hexdig_fun+0xa>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	4770      	bx	lr

08009b20 <__gethex>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	ed2d 8b02 	vpush	{d8}
 8009b28:	b089      	sub	sp, #36	; 0x24
 8009b2a:	ee08 0a10 	vmov	s16, r0
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	4bb4      	ldr	r3, [pc, #720]	; (8009e04 <__gethex+0x2e4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	4618      	mov	r0, r3
 8009b38:	468b      	mov	fp, r1
 8009b3a:	4690      	mov	r8, r2
 8009b3c:	f7f6 fb48 	bl	80001d0 <strlen>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	f8db 2000 	ldr.w	r2, [fp]
 8009b46:	4403      	add	r3, r0
 8009b48:	4682      	mov	sl, r0
 8009b4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	1c93      	adds	r3, r2, #2
 8009b52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b5a:	32fe      	adds	r2, #254	; 0xfe
 8009b5c:	18d1      	adds	r1, r2, r3
 8009b5e:	461f      	mov	r7, r3
 8009b60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b64:	9100      	str	r1, [sp, #0]
 8009b66:	2830      	cmp	r0, #48	; 0x30
 8009b68:	d0f8      	beq.n	8009b5c <__gethex+0x3c>
 8009b6a:	f7ff ffc4 	bl	8009af6 <__hexdig_fun>
 8009b6e:	4604      	mov	r4, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d13a      	bne.n	8009bea <__gethex+0xca>
 8009b74:	9901      	ldr	r1, [sp, #4]
 8009b76:	4652      	mov	r2, sl
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f001 fc38 	bl	800b3ee <strncmp>
 8009b7e:	4605      	mov	r5, r0
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d168      	bne.n	8009c56 <__gethex+0x136>
 8009b84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b88:	eb07 060a 	add.w	r6, r7, sl
 8009b8c:	f7ff ffb3 	bl	8009af6 <__hexdig_fun>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d062      	beq.n	8009c5a <__gethex+0x13a>
 8009b94:	4633      	mov	r3, r6
 8009b96:	7818      	ldrb	r0, [r3, #0]
 8009b98:	2830      	cmp	r0, #48	; 0x30
 8009b9a:	461f      	mov	r7, r3
 8009b9c:	f103 0301 	add.w	r3, r3, #1
 8009ba0:	d0f9      	beq.n	8009b96 <__gethex+0x76>
 8009ba2:	f7ff ffa8 	bl	8009af6 <__hexdig_fun>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	fab0 f480 	clz	r4, r0
 8009bac:	0964      	lsrs	r4, r4, #5
 8009bae:	4635      	mov	r5, r6
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4616      	mov	r6, r2
 8009bb6:	3201      	adds	r2, #1
 8009bb8:	7830      	ldrb	r0, [r6, #0]
 8009bba:	f7ff ff9c 	bl	8009af6 <__hexdig_fun>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d1f8      	bne.n	8009bb4 <__gethex+0x94>
 8009bc2:	9901      	ldr	r1, [sp, #4]
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f001 fc11 	bl	800b3ee <strncmp>
 8009bcc:	b980      	cbnz	r0, 8009bf0 <__gethex+0xd0>
 8009bce:	b94d      	cbnz	r5, 8009be4 <__gethex+0xc4>
 8009bd0:	eb06 050a 	add.w	r5, r6, sl
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4616      	mov	r6, r2
 8009bd8:	3201      	adds	r2, #1
 8009bda:	7830      	ldrb	r0, [r6, #0]
 8009bdc:	f7ff ff8b 	bl	8009af6 <__hexdig_fun>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d1f8      	bne.n	8009bd6 <__gethex+0xb6>
 8009be4:	1bad      	subs	r5, r5, r6
 8009be6:	00ad      	lsls	r5, r5, #2
 8009be8:	e004      	b.n	8009bf4 <__gethex+0xd4>
 8009bea:	2400      	movs	r4, #0
 8009bec:	4625      	mov	r5, r4
 8009bee:	e7e0      	b.n	8009bb2 <__gethex+0x92>
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	d1f7      	bne.n	8009be4 <__gethex+0xc4>
 8009bf4:	7833      	ldrb	r3, [r6, #0]
 8009bf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bfa:	2b50      	cmp	r3, #80	; 0x50
 8009bfc:	d13b      	bne.n	8009c76 <__gethex+0x156>
 8009bfe:	7873      	ldrb	r3, [r6, #1]
 8009c00:	2b2b      	cmp	r3, #43	; 0x2b
 8009c02:	d02c      	beq.n	8009c5e <__gethex+0x13e>
 8009c04:	2b2d      	cmp	r3, #45	; 0x2d
 8009c06:	d02e      	beq.n	8009c66 <__gethex+0x146>
 8009c08:	1c71      	adds	r1, r6, #1
 8009c0a:	f04f 0900 	mov.w	r9, #0
 8009c0e:	7808      	ldrb	r0, [r1, #0]
 8009c10:	f7ff ff71 	bl	8009af6 <__hexdig_fun>
 8009c14:	1e43      	subs	r3, r0, #1
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b18      	cmp	r3, #24
 8009c1a:	d82c      	bhi.n	8009c76 <__gethex+0x156>
 8009c1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c24:	f7ff ff67 	bl	8009af6 <__hexdig_fun>
 8009c28:	1e43      	subs	r3, r0, #1
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b18      	cmp	r3, #24
 8009c2e:	d91d      	bls.n	8009c6c <__gethex+0x14c>
 8009c30:	f1b9 0f00 	cmp.w	r9, #0
 8009c34:	d000      	beq.n	8009c38 <__gethex+0x118>
 8009c36:	4252      	negs	r2, r2
 8009c38:	4415      	add	r5, r2
 8009c3a:	f8cb 1000 	str.w	r1, [fp]
 8009c3e:	b1e4      	cbz	r4, 8009c7a <__gethex+0x15a>
 8009c40:	9b00      	ldr	r3, [sp, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bf14      	ite	ne
 8009c46:	2700      	movne	r7, #0
 8009c48:	2706      	moveq	r7, #6
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	b009      	add	sp, #36	; 0x24
 8009c4e:	ecbd 8b02 	vpop	{d8}
 8009c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c56:	463e      	mov	r6, r7
 8009c58:	4625      	mov	r5, r4
 8009c5a:	2401      	movs	r4, #1
 8009c5c:	e7ca      	b.n	8009bf4 <__gethex+0xd4>
 8009c5e:	f04f 0900 	mov.w	r9, #0
 8009c62:	1cb1      	adds	r1, r6, #2
 8009c64:	e7d3      	b.n	8009c0e <__gethex+0xee>
 8009c66:	f04f 0901 	mov.w	r9, #1
 8009c6a:	e7fa      	b.n	8009c62 <__gethex+0x142>
 8009c6c:	230a      	movs	r3, #10
 8009c6e:	fb03 0202 	mla	r2, r3, r2, r0
 8009c72:	3a10      	subs	r2, #16
 8009c74:	e7d4      	b.n	8009c20 <__gethex+0x100>
 8009c76:	4631      	mov	r1, r6
 8009c78:	e7df      	b.n	8009c3a <__gethex+0x11a>
 8009c7a:	1bf3      	subs	r3, r6, r7
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	4621      	mov	r1, r4
 8009c80:	2b07      	cmp	r3, #7
 8009c82:	dc0b      	bgt.n	8009c9c <__gethex+0x17c>
 8009c84:	ee18 0a10 	vmov	r0, s16
 8009c88:	f000 fae6 	bl	800a258 <_Balloc>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	b940      	cbnz	r0, 8009ca2 <__gethex+0x182>
 8009c90:	4b5d      	ldr	r3, [pc, #372]	; (8009e08 <__gethex+0x2e8>)
 8009c92:	4602      	mov	r2, r0
 8009c94:	21de      	movs	r1, #222	; 0xde
 8009c96:	485d      	ldr	r0, [pc, #372]	; (8009e0c <__gethex+0x2ec>)
 8009c98:	f001 fbdc 	bl	800b454 <__assert_func>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	105b      	asrs	r3, r3, #1
 8009ca0:	e7ee      	b.n	8009c80 <__gethex+0x160>
 8009ca2:	f100 0914 	add.w	r9, r0, #20
 8009ca6:	f04f 0b00 	mov.w	fp, #0
 8009caa:	f1ca 0301 	rsb	r3, sl, #1
 8009cae:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cb2:	f8cd b000 	str.w	fp, [sp]
 8009cb6:	9306      	str	r3, [sp, #24]
 8009cb8:	42b7      	cmp	r7, r6
 8009cba:	d340      	bcc.n	8009d3e <__gethex+0x21e>
 8009cbc:	9802      	ldr	r0, [sp, #8]
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	f840 3b04 	str.w	r3, [r0], #4
 8009cc4:	eba0 0009 	sub.w	r0, r0, r9
 8009cc8:	1080      	asrs	r0, r0, #2
 8009cca:	0146      	lsls	r6, r0, #5
 8009ccc:	6120      	str	r0, [r4, #16]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fbb4 	bl	800a43c <__hi0bits>
 8009cd4:	1a30      	subs	r0, r6, r0
 8009cd6:	f8d8 6000 	ldr.w	r6, [r8]
 8009cda:	42b0      	cmp	r0, r6
 8009cdc:	dd63      	ble.n	8009da6 <__gethex+0x286>
 8009cde:	1b87      	subs	r7, r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 ff58 	bl	800ab98 <__any_on>
 8009ce8:	4682      	mov	sl, r0
 8009cea:	b1a8      	cbz	r0, 8009d18 <__gethex+0x1f8>
 8009cec:	1e7b      	subs	r3, r7, #1
 8009cee:	1159      	asrs	r1, r3, #5
 8009cf0:	f003 021f 	and.w	r2, r3, #31
 8009cf4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cf8:	f04f 0a01 	mov.w	sl, #1
 8009cfc:	fa0a f202 	lsl.w	r2, sl, r2
 8009d00:	420a      	tst	r2, r1
 8009d02:	d009      	beq.n	8009d18 <__gethex+0x1f8>
 8009d04:	4553      	cmp	r3, sl
 8009d06:	dd05      	ble.n	8009d14 <__gethex+0x1f4>
 8009d08:	1eb9      	subs	r1, r7, #2
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 ff44 	bl	800ab98 <__any_on>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d145      	bne.n	8009da0 <__gethex+0x280>
 8009d14:	f04f 0a02 	mov.w	sl, #2
 8009d18:	4639      	mov	r1, r7
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff fe99 	bl	8009a52 <rshift>
 8009d20:	443d      	add	r5, r7
 8009d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d26:	42ab      	cmp	r3, r5
 8009d28:	da4c      	bge.n	8009dc4 <__gethex+0x2a4>
 8009d2a:	ee18 0a10 	vmov	r0, s16
 8009d2e:	4621      	mov	r1, r4
 8009d30:	f000 fad2 	bl	800a2d8 <_Bfree>
 8009d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d36:	2300      	movs	r3, #0
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	27a3      	movs	r7, #163	; 0xa3
 8009d3c:	e785      	b.n	8009c4a <__gethex+0x12a>
 8009d3e:	1e73      	subs	r3, r6, #1
 8009d40:	9a05      	ldr	r2, [sp, #20]
 8009d42:	9303      	str	r3, [sp, #12]
 8009d44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d019      	beq.n	8009d80 <__gethex+0x260>
 8009d4c:	f1bb 0f20 	cmp.w	fp, #32
 8009d50:	d107      	bne.n	8009d62 <__gethex+0x242>
 8009d52:	9b02      	ldr	r3, [sp, #8]
 8009d54:	9a00      	ldr	r2, [sp, #0]
 8009d56:	f843 2b04 	str.w	r2, [r3], #4
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	469b      	mov	fp, r3
 8009d62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d66:	f7ff fec6 	bl	8009af6 <__hexdig_fun>
 8009d6a:	9b00      	ldr	r3, [sp, #0]
 8009d6c:	f000 000f 	and.w	r0, r0, #15
 8009d70:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d74:	4303      	orrs	r3, r0
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	f10b 0b04 	add.w	fp, fp, #4
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	e00d      	b.n	8009d9c <__gethex+0x27c>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	4413      	add	r3, r2
 8009d86:	42bb      	cmp	r3, r7
 8009d88:	d3e0      	bcc.n	8009d4c <__gethex+0x22c>
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	9901      	ldr	r1, [sp, #4]
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	4652      	mov	r2, sl
 8009d92:	f001 fb2c 	bl	800b3ee <strncmp>
 8009d96:	9b07      	ldr	r3, [sp, #28]
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1d7      	bne.n	8009d4c <__gethex+0x22c>
 8009d9c:	461e      	mov	r6, r3
 8009d9e:	e78b      	b.n	8009cb8 <__gethex+0x198>
 8009da0:	f04f 0a03 	mov.w	sl, #3
 8009da4:	e7b8      	b.n	8009d18 <__gethex+0x1f8>
 8009da6:	da0a      	bge.n	8009dbe <__gethex+0x29e>
 8009da8:	1a37      	subs	r7, r6, r0
 8009daa:	4621      	mov	r1, r4
 8009dac:	ee18 0a10 	vmov	r0, s16
 8009db0:	463a      	mov	r2, r7
 8009db2:	f000 fcad 	bl	800a710 <__lshift>
 8009db6:	1bed      	subs	r5, r5, r7
 8009db8:	4604      	mov	r4, r0
 8009dba:	f100 0914 	add.w	r9, r0, #20
 8009dbe:	f04f 0a00 	mov.w	sl, #0
 8009dc2:	e7ae      	b.n	8009d22 <__gethex+0x202>
 8009dc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009dc8:	42a8      	cmp	r0, r5
 8009dca:	dd72      	ble.n	8009eb2 <__gethex+0x392>
 8009dcc:	1b45      	subs	r5, r0, r5
 8009dce:	42ae      	cmp	r6, r5
 8009dd0:	dc36      	bgt.n	8009e40 <__gethex+0x320>
 8009dd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d02a      	beq.n	8009e30 <__gethex+0x310>
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d02c      	beq.n	8009e38 <__gethex+0x318>
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d11c      	bne.n	8009e1c <__gethex+0x2fc>
 8009de2:	42ae      	cmp	r6, r5
 8009de4:	d11a      	bne.n	8009e1c <__gethex+0x2fc>
 8009de6:	2e01      	cmp	r6, #1
 8009de8:	d112      	bne.n	8009e10 <__gethex+0x2f0>
 8009dea:	9a04      	ldr	r2, [sp, #16]
 8009dec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	2301      	movs	r3, #1
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	f8c9 3000 	str.w	r3, [r9]
 8009dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dfc:	2762      	movs	r7, #98	; 0x62
 8009dfe:	601c      	str	r4, [r3, #0]
 8009e00:	e723      	b.n	8009c4a <__gethex+0x12a>
 8009e02:	bf00      	nop
 8009e04:	0800ba5c 	.word	0x0800ba5c
 8009e08:	0800b980 	.word	0x0800b980
 8009e0c:	0800b9f4 	.word	0x0800b9f4
 8009e10:	1e71      	subs	r1, r6, #1
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fec0 	bl	800ab98 <__any_on>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d1e6      	bne.n	8009dea <__gethex+0x2ca>
 8009e1c:	ee18 0a10 	vmov	r0, s16
 8009e20:	4621      	mov	r1, r4
 8009e22:	f000 fa59 	bl	800a2d8 <_Bfree>
 8009e26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	2750      	movs	r7, #80	; 0x50
 8009e2e:	e70c      	b.n	8009c4a <__gethex+0x12a>
 8009e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1f2      	bne.n	8009e1c <__gethex+0x2fc>
 8009e36:	e7d8      	b.n	8009dea <__gethex+0x2ca>
 8009e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1d5      	bne.n	8009dea <__gethex+0x2ca>
 8009e3e:	e7ed      	b.n	8009e1c <__gethex+0x2fc>
 8009e40:	1e6f      	subs	r7, r5, #1
 8009e42:	f1ba 0f00 	cmp.w	sl, #0
 8009e46:	d131      	bne.n	8009eac <__gethex+0x38c>
 8009e48:	b127      	cbz	r7, 8009e54 <__gethex+0x334>
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 fea3 	bl	800ab98 <__any_on>
 8009e52:	4682      	mov	sl, r0
 8009e54:	117b      	asrs	r3, r7, #5
 8009e56:	2101      	movs	r1, #1
 8009e58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e5c:	f007 071f 	and.w	r7, r7, #31
 8009e60:	fa01 f707 	lsl.w	r7, r1, r7
 8009e64:	421f      	tst	r7, r3
 8009e66:	4629      	mov	r1, r5
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bf18      	it	ne
 8009e6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e70:	1b76      	subs	r6, r6, r5
 8009e72:	f7ff fdee 	bl	8009a52 <rshift>
 8009e76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e7a:	2702      	movs	r7, #2
 8009e7c:	f1ba 0f00 	cmp.w	sl, #0
 8009e80:	d048      	beq.n	8009f14 <__gethex+0x3f4>
 8009e82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d015      	beq.n	8009eb6 <__gethex+0x396>
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d017      	beq.n	8009ebe <__gethex+0x39e>
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d109      	bne.n	8009ea6 <__gethex+0x386>
 8009e92:	f01a 0f02 	tst.w	sl, #2
 8009e96:	d006      	beq.n	8009ea6 <__gethex+0x386>
 8009e98:	f8d9 0000 	ldr.w	r0, [r9]
 8009e9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ea0:	f01a 0f01 	tst.w	sl, #1
 8009ea4:	d10e      	bne.n	8009ec4 <__gethex+0x3a4>
 8009ea6:	f047 0710 	orr.w	r7, r7, #16
 8009eaa:	e033      	b.n	8009f14 <__gethex+0x3f4>
 8009eac:	f04f 0a01 	mov.w	sl, #1
 8009eb0:	e7d0      	b.n	8009e54 <__gethex+0x334>
 8009eb2:	2701      	movs	r7, #1
 8009eb4:	e7e2      	b.n	8009e7c <__gethex+0x35c>
 8009eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb8:	f1c3 0301 	rsb	r3, r3, #1
 8009ebc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0f0      	beq.n	8009ea6 <__gethex+0x386>
 8009ec4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ec8:	f104 0314 	add.w	r3, r4, #20
 8009ecc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ed0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ed4:	f04f 0c00 	mov.w	ip, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ede:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ee2:	d01c      	beq.n	8009f1e <__gethex+0x3fe>
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	6002      	str	r2, [r0, #0]
 8009ee8:	2f02      	cmp	r7, #2
 8009eea:	f104 0314 	add.w	r3, r4, #20
 8009eee:	d13f      	bne.n	8009f70 <__gethex+0x450>
 8009ef0:	f8d8 2000 	ldr.w	r2, [r8]
 8009ef4:	3a01      	subs	r2, #1
 8009ef6:	42b2      	cmp	r2, r6
 8009ef8:	d10a      	bne.n	8009f10 <__gethex+0x3f0>
 8009efa:	1171      	asrs	r1, r6, #5
 8009efc:	2201      	movs	r2, #1
 8009efe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f02:	f006 061f 	and.w	r6, r6, #31
 8009f06:	fa02 f606 	lsl.w	r6, r2, r6
 8009f0a:	421e      	tst	r6, r3
 8009f0c:	bf18      	it	ne
 8009f0e:	4617      	movne	r7, r2
 8009f10:	f047 0720 	orr.w	r7, r7, #32
 8009f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f16:	601c      	str	r4, [r3, #0]
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	601d      	str	r5, [r3, #0]
 8009f1c:	e695      	b.n	8009c4a <__gethex+0x12a>
 8009f1e:	4299      	cmp	r1, r3
 8009f20:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f24:	d8d8      	bhi.n	8009ed8 <__gethex+0x3b8>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	459b      	cmp	fp, r3
 8009f2a:	db19      	blt.n	8009f60 <__gethex+0x440>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	ee18 0a10 	vmov	r0, s16
 8009f32:	3101      	adds	r1, #1
 8009f34:	f000 f990 	bl	800a258 <_Balloc>
 8009f38:	4681      	mov	r9, r0
 8009f3a:	b918      	cbnz	r0, 8009f44 <__gethex+0x424>
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <__gethex+0x488>)
 8009f3e:	4602      	mov	r2, r0
 8009f40:	2184      	movs	r1, #132	; 0x84
 8009f42:	e6a8      	b.n	8009c96 <__gethex+0x176>
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	3202      	adds	r2, #2
 8009f48:	f104 010c 	add.w	r1, r4, #12
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	300c      	adds	r0, #12
 8009f50:	f000 f974 	bl	800a23c <memcpy>
 8009f54:	4621      	mov	r1, r4
 8009f56:	ee18 0a10 	vmov	r0, s16
 8009f5a:	f000 f9bd 	bl	800a2d8 <_Bfree>
 8009f5e:	464c      	mov	r4, r9
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f68:	6122      	str	r2, [r4, #16]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	615a      	str	r2, [r3, #20]
 8009f6e:	e7bb      	b.n	8009ee8 <__gethex+0x3c8>
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	455a      	cmp	r2, fp
 8009f74:	dd0b      	ble.n	8009f8e <__gethex+0x46e>
 8009f76:	2101      	movs	r1, #1
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7ff fd6a 	bl	8009a52 <rshift>
 8009f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f82:	3501      	adds	r5, #1
 8009f84:	42ab      	cmp	r3, r5
 8009f86:	f6ff aed0 	blt.w	8009d2a <__gethex+0x20a>
 8009f8a:	2701      	movs	r7, #1
 8009f8c:	e7c0      	b.n	8009f10 <__gethex+0x3f0>
 8009f8e:	f016 061f 	ands.w	r6, r6, #31
 8009f92:	d0fa      	beq.n	8009f8a <__gethex+0x46a>
 8009f94:	4453      	add	r3, sl
 8009f96:	f1c6 0620 	rsb	r6, r6, #32
 8009f9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f9e:	f000 fa4d 	bl	800a43c <__hi0bits>
 8009fa2:	42b0      	cmp	r0, r6
 8009fa4:	dbe7      	blt.n	8009f76 <__gethex+0x456>
 8009fa6:	e7f0      	b.n	8009f8a <__gethex+0x46a>
 8009fa8:	0800b980 	.word	0x0800b980

08009fac <L_shift>:
 8009fac:	f1c2 0208 	rsb	r2, r2, #8
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	b570      	push	{r4, r5, r6, lr}
 8009fb4:	f1c2 0620 	rsb	r6, r2, #32
 8009fb8:	6843      	ldr	r3, [r0, #4]
 8009fba:	6804      	ldr	r4, [r0, #0]
 8009fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8009fc0:	432c      	orrs	r4, r5
 8009fc2:	40d3      	lsrs	r3, r2
 8009fc4:	6004      	str	r4, [r0, #0]
 8009fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fca:	4288      	cmp	r0, r1
 8009fcc:	d3f4      	bcc.n	8009fb8 <L_shift+0xc>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}

08009fd0 <__match>:
 8009fd0:	b530      	push	{r4, r5, lr}
 8009fd2:	6803      	ldr	r3, [r0, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fda:	b914      	cbnz	r4, 8009fe2 <__match+0x12>
 8009fdc:	6003      	str	r3, [r0, #0]
 8009fde:	2001      	movs	r0, #1
 8009fe0:	bd30      	pop	{r4, r5, pc}
 8009fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fea:	2d19      	cmp	r5, #25
 8009fec:	bf98      	it	ls
 8009fee:	3220      	addls	r2, #32
 8009ff0:	42a2      	cmp	r2, r4
 8009ff2:	d0f0      	beq.n	8009fd6 <__match+0x6>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7f3      	b.n	8009fe0 <__match+0x10>

08009ff8 <__hexnan>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	680b      	ldr	r3, [r1, #0]
 8009ffe:	115e      	asrs	r6, r3, #5
 800a000:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a004:	f013 031f 	ands.w	r3, r3, #31
 800a008:	b087      	sub	sp, #28
 800a00a:	bf18      	it	ne
 800a00c:	3604      	addne	r6, #4
 800a00e:	2500      	movs	r5, #0
 800a010:	1f37      	subs	r7, r6, #4
 800a012:	4690      	mov	r8, r2
 800a014:	6802      	ldr	r2, [r0, #0]
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	4682      	mov	sl, r0
 800a01a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a01e:	46b9      	mov	r9, r7
 800a020:	463c      	mov	r4, r7
 800a022:	9502      	str	r5, [sp, #8]
 800a024:	46ab      	mov	fp, r5
 800a026:	7851      	ldrb	r1, [r2, #1]
 800a028:	1c53      	adds	r3, r2, #1
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	b341      	cbz	r1, 800a080 <__hexnan+0x88>
 800a02e:	4608      	mov	r0, r1
 800a030:	9205      	str	r2, [sp, #20]
 800a032:	9104      	str	r1, [sp, #16]
 800a034:	f7ff fd5f 	bl	8009af6 <__hexdig_fun>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d14f      	bne.n	800a0dc <__hexnan+0xe4>
 800a03c:	9904      	ldr	r1, [sp, #16]
 800a03e:	9a05      	ldr	r2, [sp, #20]
 800a040:	2920      	cmp	r1, #32
 800a042:	d818      	bhi.n	800a076 <__hexnan+0x7e>
 800a044:	9b02      	ldr	r3, [sp, #8]
 800a046:	459b      	cmp	fp, r3
 800a048:	dd13      	ble.n	800a072 <__hexnan+0x7a>
 800a04a:	454c      	cmp	r4, r9
 800a04c:	d206      	bcs.n	800a05c <__hexnan+0x64>
 800a04e:	2d07      	cmp	r5, #7
 800a050:	dc04      	bgt.n	800a05c <__hexnan+0x64>
 800a052:	462a      	mov	r2, r5
 800a054:	4649      	mov	r1, r9
 800a056:	4620      	mov	r0, r4
 800a058:	f7ff ffa8 	bl	8009fac <L_shift>
 800a05c:	4544      	cmp	r4, r8
 800a05e:	d950      	bls.n	800a102 <__hexnan+0x10a>
 800a060:	2300      	movs	r3, #0
 800a062:	f1a4 0904 	sub.w	r9, r4, #4
 800a066:	f844 3c04 	str.w	r3, [r4, #-4]
 800a06a:	f8cd b008 	str.w	fp, [sp, #8]
 800a06e:	464c      	mov	r4, r9
 800a070:	461d      	mov	r5, r3
 800a072:	9a03      	ldr	r2, [sp, #12]
 800a074:	e7d7      	b.n	800a026 <__hexnan+0x2e>
 800a076:	2929      	cmp	r1, #41	; 0x29
 800a078:	d156      	bne.n	800a128 <__hexnan+0x130>
 800a07a:	3202      	adds	r2, #2
 800a07c:	f8ca 2000 	str.w	r2, [sl]
 800a080:	f1bb 0f00 	cmp.w	fp, #0
 800a084:	d050      	beq.n	800a128 <__hexnan+0x130>
 800a086:	454c      	cmp	r4, r9
 800a088:	d206      	bcs.n	800a098 <__hexnan+0xa0>
 800a08a:	2d07      	cmp	r5, #7
 800a08c:	dc04      	bgt.n	800a098 <__hexnan+0xa0>
 800a08e:	462a      	mov	r2, r5
 800a090:	4649      	mov	r1, r9
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff ff8a 	bl	8009fac <L_shift>
 800a098:	4544      	cmp	r4, r8
 800a09a:	d934      	bls.n	800a106 <__hexnan+0x10e>
 800a09c:	f1a8 0204 	sub.w	r2, r8, #4
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0aa:	429f      	cmp	r7, r3
 800a0ac:	d2f9      	bcs.n	800a0a2 <__hexnan+0xaa>
 800a0ae:	1b3b      	subs	r3, r7, r4
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	3401      	adds	r4, #1
 800a0b8:	3e03      	subs	r6, #3
 800a0ba:	42b4      	cmp	r4, r6
 800a0bc:	bf88      	it	hi
 800a0be:	2304      	movhi	r3, #4
 800a0c0:	4443      	add	r3, r8
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f843 2b04 	str.w	r2, [r3], #4
 800a0c8:	429f      	cmp	r7, r3
 800a0ca:	d2fb      	bcs.n	800a0c4 <__hexnan+0xcc>
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	b91b      	cbnz	r3, 800a0d8 <__hexnan+0xe0>
 800a0d0:	4547      	cmp	r7, r8
 800a0d2:	d127      	bne.n	800a124 <__hexnan+0x12c>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	2005      	movs	r0, #5
 800a0da:	e026      	b.n	800a12a <__hexnan+0x132>
 800a0dc:	3501      	adds	r5, #1
 800a0de:	2d08      	cmp	r5, #8
 800a0e0:	f10b 0b01 	add.w	fp, fp, #1
 800a0e4:	dd06      	ble.n	800a0f4 <__hexnan+0xfc>
 800a0e6:	4544      	cmp	r4, r8
 800a0e8:	d9c3      	bls.n	800a072 <__hexnan+0x7a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0f0:	2501      	movs	r5, #1
 800a0f2:	3c04      	subs	r4, #4
 800a0f4:	6822      	ldr	r2, [r4, #0]
 800a0f6:	f000 000f 	and.w	r0, r0, #15
 800a0fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a0fe:	6022      	str	r2, [r4, #0]
 800a100:	e7b7      	b.n	800a072 <__hexnan+0x7a>
 800a102:	2508      	movs	r5, #8
 800a104:	e7b5      	b.n	800a072 <__hexnan+0x7a>
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0df      	beq.n	800a0cc <__hexnan+0xd4>
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295
 800a110:	f1c3 0320 	rsb	r3, r3, #32
 800a114:	fa22 f303 	lsr.w	r3, r2, r3
 800a118:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a11c:	401a      	ands	r2, r3
 800a11e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a122:	e7d3      	b.n	800a0cc <__hexnan+0xd4>
 800a124:	3f04      	subs	r7, #4
 800a126:	e7d1      	b.n	800a0cc <__hexnan+0xd4>
 800a128:	2004      	movs	r0, #4
 800a12a:	b007      	add	sp, #28
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a130 <_localeconv_r>:
 800a130:	4800      	ldr	r0, [pc, #0]	; (800a134 <_localeconv_r+0x4>)
 800a132:	4770      	bx	lr
 800a134:	20000164 	.word	0x20000164

0800a138 <__retarget_lock_init_recursive>:
 800a138:	4770      	bx	lr

0800a13a <__retarget_lock_acquire_recursive>:
 800a13a:	4770      	bx	lr

0800a13c <__retarget_lock_release_recursive>:
 800a13c:	4770      	bx	lr

0800a13e <__swhatbuf_r>:
 800a13e:	b570      	push	{r4, r5, r6, lr}
 800a140:	460e      	mov	r6, r1
 800a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a146:	2900      	cmp	r1, #0
 800a148:	b096      	sub	sp, #88	; 0x58
 800a14a:	4614      	mov	r4, r2
 800a14c:	461d      	mov	r5, r3
 800a14e:	da08      	bge.n	800a162 <__swhatbuf_r+0x24>
 800a150:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	602a      	str	r2, [r5, #0]
 800a158:	061a      	lsls	r2, r3, #24
 800a15a:	d410      	bmi.n	800a17e <__swhatbuf_r+0x40>
 800a15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a160:	e00e      	b.n	800a180 <__swhatbuf_r+0x42>
 800a162:	466a      	mov	r2, sp
 800a164:	f001 f9b6 	bl	800b4d4 <_fstat_r>
 800a168:	2800      	cmp	r0, #0
 800a16a:	dbf1      	blt.n	800a150 <__swhatbuf_r+0x12>
 800a16c:	9a01      	ldr	r2, [sp, #4]
 800a16e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a176:	425a      	negs	r2, r3
 800a178:	415a      	adcs	r2, r3
 800a17a:	602a      	str	r2, [r5, #0]
 800a17c:	e7ee      	b.n	800a15c <__swhatbuf_r+0x1e>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	2000      	movs	r0, #0
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	b016      	add	sp, #88	; 0x58
 800a186:	bd70      	pop	{r4, r5, r6, pc}

0800a188 <__smakebuf_r>:
 800a188:	898b      	ldrh	r3, [r1, #12]
 800a18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a18c:	079d      	lsls	r5, r3, #30
 800a18e:	4606      	mov	r6, r0
 800a190:	460c      	mov	r4, r1
 800a192:	d507      	bpl.n	800a1a4 <__smakebuf_r+0x1c>
 800a194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2301      	movs	r3, #1
 800a19e:	6163      	str	r3, [r4, #20]
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	ab01      	add	r3, sp, #4
 800a1a6:	466a      	mov	r2, sp
 800a1a8:	f7ff ffc9 	bl	800a13e <__swhatbuf_r>
 800a1ac:	9900      	ldr	r1, [sp, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 fd95 	bl	800ace0 <_malloc_r>
 800a1b6:	b948      	cbnz	r0, 800a1cc <__smakebuf_r+0x44>
 800a1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1bc:	059a      	lsls	r2, r3, #22
 800a1be:	d4ef      	bmi.n	800a1a0 <__smakebuf_r+0x18>
 800a1c0:	f023 0303 	bic.w	r3, r3, #3
 800a1c4:	f043 0302 	orr.w	r3, r3, #2
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	e7e3      	b.n	800a194 <__smakebuf_r+0xc>
 800a1cc:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <__smakebuf_r+0x7c>)
 800a1ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	6020      	str	r0, [r4, #0]
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	6163      	str	r3, [r4, #20]
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	6120      	str	r0, [r4, #16]
 800a1e2:	b15b      	cbz	r3, 800a1fc <__smakebuf_r+0x74>
 800a1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f001 f985 	bl	800b4f8 <_isatty_r>
 800a1ee:	b128      	cbz	r0, 800a1fc <__smakebuf_r+0x74>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	89a0      	ldrh	r0, [r4, #12]
 800a1fe:	4305      	orrs	r5, r0
 800a200:	81a5      	strh	r5, [r4, #12]
 800a202:	e7cd      	b.n	800a1a0 <__smakebuf_r+0x18>
 800a204:	080098b1 	.word	0x080098b1

0800a208 <malloc>:
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <malloc+0xc>)
 800a20a:	4601      	mov	r1, r0
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f000 bd67 	b.w	800ace0 <_malloc_r>
 800a212:	bf00      	nop
 800a214:	2000000c 	.word	0x2000000c

0800a218 <__ascii_mbtowc>:
 800a218:	b082      	sub	sp, #8
 800a21a:	b901      	cbnz	r1, 800a21e <__ascii_mbtowc+0x6>
 800a21c:	a901      	add	r1, sp, #4
 800a21e:	b142      	cbz	r2, 800a232 <__ascii_mbtowc+0x1a>
 800a220:	b14b      	cbz	r3, 800a236 <__ascii_mbtowc+0x1e>
 800a222:	7813      	ldrb	r3, [r2, #0]
 800a224:	600b      	str	r3, [r1, #0]
 800a226:	7812      	ldrb	r2, [r2, #0]
 800a228:	1e10      	subs	r0, r2, #0
 800a22a:	bf18      	it	ne
 800a22c:	2001      	movne	r0, #1
 800a22e:	b002      	add	sp, #8
 800a230:	4770      	bx	lr
 800a232:	4610      	mov	r0, r2
 800a234:	e7fb      	b.n	800a22e <__ascii_mbtowc+0x16>
 800a236:	f06f 0001 	mvn.w	r0, #1
 800a23a:	e7f8      	b.n	800a22e <__ascii_mbtowc+0x16>

0800a23c <memcpy>:
 800a23c:	440a      	add	r2, r1
 800a23e:	4291      	cmp	r1, r2
 800a240:	f100 33ff 	add.w	r3, r0, #4294967295
 800a244:	d100      	bne.n	800a248 <memcpy+0xc>
 800a246:	4770      	bx	lr
 800a248:	b510      	push	{r4, lr}
 800a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a252:	4291      	cmp	r1, r2
 800a254:	d1f9      	bne.n	800a24a <memcpy+0xe>
 800a256:	bd10      	pop	{r4, pc}

0800a258 <_Balloc>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a25c:	4604      	mov	r4, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	b976      	cbnz	r6, 800a280 <_Balloc+0x28>
 800a262:	2010      	movs	r0, #16
 800a264:	f7ff ffd0 	bl	800a208 <malloc>
 800a268:	4602      	mov	r2, r0
 800a26a:	6260      	str	r0, [r4, #36]	; 0x24
 800a26c:	b920      	cbnz	r0, 800a278 <_Balloc+0x20>
 800a26e:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <_Balloc+0x78>)
 800a270:	4818      	ldr	r0, [pc, #96]	; (800a2d4 <_Balloc+0x7c>)
 800a272:	2166      	movs	r1, #102	; 0x66
 800a274:	f001 f8ee 	bl	800b454 <__assert_func>
 800a278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a27c:	6006      	str	r6, [r0, #0]
 800a27e:	60c6      	str	r6, [r0, #12]
 800a280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a282:	68f3      	ldr	r3, [r6, #12]
 800a284:	b183      	cbz	r3, 800a2a8 <_Balloc+0x50>
 800a286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a28e:	b9b8      	cbnz	r0, 800a2c0 <_Balloc+0x68>
 800a290:	2101      	movs	r1, #1
 800a292:	fa01 f605 	lsl.w	r6, r1, r5
 800a296:	1d72      	adds	r2, r6, #5
 800a298:	0092      	lsls	r2, r2, #2
 800a29a:	4620      	mov	r0, r4
 800a29c:	f000 fc9d 	bl	800abda <_calloc_r>
 800a2a0:	b160      	cbz	r0, 800a2bc <_Balloc+0x64>
 800a2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2a6:	e00e      	b.n	800a2c6 <_Balloc+0x6e>
 800a2a8:	2221      	movs	r2, #33	; 0x21
 800a2aa:	2104      	movs	r1, #4
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fc94 	bl	800abda <_calloc_r>
 800a2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b4:	60f0      	str	r0, [r6, #12]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e4      	bne.n	800a286 <_Balloc+0x2e>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	6802      	ldr	r2, [r0, #0]
 800a2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2cc:	e7f7      	b.n	800a2be <_Balloc+0x66>
 800a2ce:	bf00      	nop
 800a2d0:	0800b90e 	.word	0x0800b90e
 800a2d4:	0800ba70 	.word	0x0800ba70

0800a2d8 <_Bfree>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b976      	cbnz	r6, 800a300 <_Bfree+0x28>
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	f7ff ff90 	bl	800a208 <malloc>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800a2ec:	b920      	cbnz	r0, 800a2f8 <_Bfree+0x20>
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <_Bfree+0x3c>)
 800a2f0:	4809      	ldr	r0, [pc, #36]	; (800a318 <_Bfree+0x40>)
 800a2f2:	218a      	movs	r1, #138	; 0x8a
 800a2f4:	f001 f8ae 	bl	800b454 <__assert_func>
 800a2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2fc:	6006      	str	r6, [r0, #0]
 800a2fe:	60c6      	str	r6, [r0, #12]
 800a300:	b13c      	cbz	r4, 800a312 <_Bfree+0x3a>
 800a302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a304:	6862      	ldr	r2, [r4, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a30c:	6021      	str	r1, [r4, #0]
 800a30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a312:	bd70      	pop	{r4, r5, r6, pc}
 800a314:	0800b90e 	.word	0x0800b90e
 800a318:	0800ba70 	.word	0x0800ba70

0800a31c <__multadd>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	690d      	ldr	r5, [r1, #16]
 800a322:	4607      	mov	r7, r0
 800a324:	460c      	mov	r4, r1
 800a326:	461e      	mov	r6, r3
 800a328:	f101 0c14 	add.w	ip, r1, #20
 800a32c:	2000      	movs	r0, #0
 800a32e:	f8dc 3000 	ldr.w	r3, [ip]
 800a332:	b299      	uxth	r1, r3
 800a334:	fb02 6101 	mla	r1, r2, r1, r6
 800a338:	0c1e      	lsrs	r6, r3, #16
 800a33a:	0c0b      	lsrs	r3, r1, #16
 800a33c:	fb02 3306 	mla	r3, r2, r6, r3
 800a340:	b289      	uxth	r1, r1
 800a342:	3001      	adds	r0, #1
 800a344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a348:	4285      	cmp	r5, r0
 800a34a:	f84c 1b04 	str.w	r1, [ip], #4
 800a34e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a352:	dcec      	bgt.n	800a32e <__multadd+0x12>
 800a354:	b30e      	cbz	r6, 800a39a <__multadd+0x7e>
 800a356:	68a3      	ldr	r3, [r4, #8]
 800a358:	42ab      	cmp	r3, r5
 800a35a:	dc19      	bgt.n	800a390 <__multadd+0x74>
 800a35c:	6861      	ldr	r1, [r4, #4]
 800a35e:	4638      	mov	r0, r7
 800a360:	3101      	adds	r1, #1
 800a362:	f7ff ff79 	bl	800a258 <_Balloc>
 800a366:	4680      	mov	r8, r0
 800a368:	b928      	cbnz	r0, 800a376 <__multadd+0x5a>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <__multadd+0x84>)
 800a36e:	480d      	ldr	r0, [pc, #52]	; (800a3a4 <__multadd+0x88>)
 800a370:	21b5      	movs	r1, #181	; 0xb5
 800a372:	f001 f86f 	bl	800b454 <__assert_func>
 800a376:	6922      	ldr	r2, [r4, #16]
 800a378:	3202      	adds	r2, #2
 800a37a:	f104 010c 	add.w	r1, r4, #12
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	300c      	adds	r0, #12
 800a382:	f7ff ff5b 	bl	800a23c <memcpy>
 800a386:	4621      	mov	r1, r4
 800a388:	4638      	mov	r0, r7
 800a38a:	f7ff ffa5 	bl	800a2d8 <_Bfree>
 800a38e:	4644      	mov	r4, r8
 800a390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a394:	3501      	adds	r5, #1
 800a396:	615e      	str	r6, [r3, #20]
 800a398:	6125      	str	r5, [r4, #16]
 800a39a:	4620      	mov	r0, r4
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	0800b980 	.word	0x0800b980
 800a3a4:	0800ba70 	.word	0x0800ba70

0800a3a8 <__s2b>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	461f      	mov	r7, r3
 800a3b2:	2209      	movs	r2, #9
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3bc:	2100      	movs	r1, #0
 800a3be:	2201      	movs	r2, #1
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	db09      	blt.n	800a3d8 <__s2b+0x30>
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f7ff ff47 	bl	800a258 <_Balloc>
 800a3ca:	b940      	cbnz	r0, 800a3de <__s2b+0x36>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	4b19      	ldr	r3, [pc, #100]	; (800a434 <__s2b+0x8c>)
 800a3d0:	4819      	ldr	r0, [pc, #100]	; (800a438 <__s2b+0x90>)
 800a3d2:	21ce      	movs	r1, #206	; 0xce
 800a3d4:	f001 f83e 	bl	800b454 <__assert_func>
 800a3d8:	0052      	lsls	r2, r2, #1
 800a3da:	3101      	adds	r1, #1
 800a3dc:	e7f0      	b.n	800a3c0 <__s2b+0x18>
 800a3de:	9b08      	ldr	r3, [sp, #32]
 800a3e0:	6143      	str	r3, [r0, #20]
 800a3e2:	2d09      	cmp	r5, #9
 800a3e4:	f04f 0301 	mov.w	r3, #1
 800a3e8:	6103      	str	r3, [r0, #16]
 800a3ea:	dd16      	ble.n	800a41a <__s2b+0x72>
 800a3ec:	f104 0909 	add.w	r9, r4, #9
 800a3f0:	46c8      	mov	r8, r9
 800a3f2:	442c      	add	r4, r5
 800a3f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	3b30      	subs	r3, #48	; 0x30
 800a3fc:	220a      	movs	r2, #10
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7ff ff8c 	bl	800a31c <__multadd>
 800a404:	45a0      	cmp	r8, r4
 800a406:	d1f5      	bne.n	800a3f4 <__s2b+0x4c>
 800a408:	f1a5 0408 	sub.w	r4, r5, #8
 800a40c:	444c      	add	r4, r9
 800a40e:	1b2d      	subs	r5, r5, r4
 800a410:	1963      	adds	r3, r4, r5
 800a412:	42bb      	cmp	r3, r7
 800a414:	db04      	blt.n	800a420 <__s2b+0x78>
 800a416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a41a:	340a      	adds	r4, #10
 800a41c:	2509      	movs	r5, #9
 800a41e:	e7f6      	b.n	800a40e <__s2b+0x66>
 800a420:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a424:	4601      	mov	r1, r0
 800a426:	3b30      	subs	r3, #48	; 0x30
 800a428:	220a      	movs	r2, #10
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7ff ff76 	bl	800a31c <__multadd>
 800a430:	e7ee      	b.n	800a410 <__s2b+0x68>
 800a432:	bf00      	nop
 800a434:	0800b980 	.word	0x0800b980
 800a438:	0800ba70 	.word	0x0800ba70

0800a43c <__hi0bits>:
 800a43c:	0c03      	lsrs	r3, r0, #16
 800a43e:	041b      	lsls	r3, r3, #16
 800a440:	b9d3      	cbnz	r3, 800a478 <__hi0bits+0x3c>
 800a442:	0400      	lsls	r0, r0, #16
 800a444:	2310      	movs	r3, #16
 800a446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a44a:	bf04      	itt	eq
 800a44c:	0200      	lsleq	r0, r0, #8
 800a44e:	3308      	addeq	r3, #8
 800a450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a454:	bf04      	itt	eq
 800a456:	0100      	lsleq	r0, r0, #4
 800a458:	3304      	addeq	r3, #4
 800a45a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a45e:	bf04      	itt	eq
 800a460:	0080      	lsleq	r0, r0, #2
 800a462:	3302      	addeq	r3, #2
 800a464:	2800      	cmp	r0, #0
 800a466:	db05      	blt.n	800a474 <__hi0bits+0x38>
 800a468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a46c:	f103 0301 	add.w	r3, r3, #1
 800a470:	bf08      	it	eq
 800a472:	2320      	moveq	r3, #32
 800a474:	4618      	mov	r0, r3
 800a476:	4770      	bx	lr
 800a478:	2300      	movs	r3, #0
 800a47a:	e7e4      	b.n	800a446 <__hi0bits+0xa>

0800a47c <__lo0bits>:
 800a47c:	6803      	ldr	r3, [r0, #0]
 800a47e:	f013 0207 	ands.w	r2, r3, #7
 800a482:	4601      	mov	r1, r0
 800a484:	d00b      	beq.n	800a49e <__lo0bits+0x22>
 800a486:	07da      	lsls	r2, r3, #31
 800a488:	d423      	bmi.n	800a4d2 <__lo0bits+0x56>
 800a48a:	0798      	lsls	r0, r3, #30
 800a48c:	bf49      	itett	mi
 800a48e:	085b      	lsrmi	r3, r3, #1
 800a490:	089b      	lsrpl	r3, r3, #2
 800a492:	2001      	movmi	r0, #1
 800a494:	600b      	strmi	r3, [r1, #0]
 800a496:	bf5c      	itt	pl
 800a498:	600b      	strpl	r3, [r1, #0]
 800a49a:	2002      	movpl	r0, #2
 800a49c:	4770      	bx	lr
 800a49e:	b298      	uxth	r0, r3
 800a4a0:	b9a8      	cbnz	r0, 800a4ce <__lo0bits+0x52>
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	2010      	movs	r0, #16
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	b90a      	cbnz	r2, 800a4ae <__lo0bits+0x32>
 800a4aa:	3008      	adds	r0, #8
 800a4ac:	0a1b      	lsrs	r3, r3, #8
 800a4ae:	071a      	lsls	r2, r3, #28
 800a4b0:	bf04      	itt	eq
 800a4b2:	091b      	lsreq	r3, r3, #4
 800a4b4:	3004      	addeq	r0, #4
 800a4b6:	079a      	lsls	r2, r3, #30
 800a4b8:	bf04      	itt	eq
 800a4ba:	089b      	lsreq	r3, r3, #2
 800a4bc:	3002      	addeq	r0, #2
 800a4be:	07da      	lsls	r2, r3, #31
 800a4c0:	d403      	bmi.n	800a4ca <__lo0bits+0x4e>
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	f100 0001 	add.w	r0, r0, #1
 800a4c8:	d005      	beq.n	800a4d6 <__lo0bits+0x5a>
 800a4ca:	600b      	str	r3, [r1, #0]
 800a4cc:	4770      	bx	lr
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	e7e9      	b.n	800a4a6 <__lo0bits+0x2a>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	4770      	bx	lr
 800a4d6:	2020      	movs	r0, #32
 800a4d8:	4770      	bx	lr
	...

0800a4dc <__i2b>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	f7ff feb9 	bl	800a258 <_Balloc>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	b928      	cbnz	r0, 800a4f6 <__i2b+0x1a>
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <__i2b+0x24>)
 800a4ec:	4805      	ldr	r0, [pc, #20]	; (800a504 <__i2b+0x28>)
 800a4ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4f2:	f000 ffaf 	bl	800b454 <__assert_func>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	6144      	str	r4, [r0, #20]
 800a4fa:	6103      	str	r3, [r0, #16]
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	bf00      	nop
 800a500:	0800b980 	.word	0x0800b980
 800a504:	0800ba70 	.word	0x0800ba70

0800a508 <__multiply>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	4691      	mov	r9, r2
 800a50e:	690a      	ldr	r2, [r1, #16]
 800a510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a514:	429a      	cmp	r2, r3
 800a516:	bfb8      	it	lt
 800a518:	460b      	movlt	r3, r1
 800a51a:	460c      	mov	r4, r1
 800a51c:	bfbc      	itt	lt
 800a51e:	464c      	movlt	r4, r9
 800a520:	4699      	movlt	r9, r3
 800a522:	6927      	ldr	r7, [r4, #16]
 800a524:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	6861      	ldr	r1, [r4, #4]
 800a52c:	eb07 060a 	add.w	r6, r7, sl
 800a530:	42b3      	cmp	r3, r6
 800a532:	b085      	sub	sp, #20
 800a534:	bfb8      	it	lt
 800a536:	3101      	addlt	r1, #1
 800a538:	f7ff fe8e 	bl	800a258 <_Balloc>
 800a53c:	b930      	cbnz	r0, 800a54c <__multiply+0x44>
 800a53e:	4602      	mov	r2, r0
 800a540:	4b44      	ldr	r3, [pc, #272]	; (800a654 <__multiply+0x14c>)
 800a542:	4845      	ldr	r0, [pc, #276]	; (800a658 <__multiply+0x150>)
 800a544:	f240 115d 	movw	r1, #349	; 0x15d
 800a548:	f000 ff84 	bl	800b454 <__assert_func>
 800a54c:	f100 0514 	add.w	r5, r0, #20
 800a550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a554:	462b      	mov	r3, r5
 800a556:	2200      	movs	r2, #0
 800a558:	4543      	cmp	r3, r8
 800a55a:	d321      	bcc.n	800a5a0 <__multiply+0x98>
 800a55c:	f104 0314 	add.w	r3, r4, #20
 800a560:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a564:	f109 0314 	add.w	r3, r9, #20
 800a568:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a56c:	9202      	str	r2, [sp, #8]
 800a56e:	1b3a      	subs	r2, r7, r4
 800a570:	3a15      	subs	r2, #21
 800a572:	f022 0203 	bic.w	r2, r2, #3
 800a576:	3204      	adds	r2, #4
 800a578:	f104 0115 	add.w	r1, r4, #21
 800a57c:	428f      	cmp	r7, r1
 800a57e:	bf38      	it	cc
 800a580:	2204      	movcc	r2, #4
 800a582:	9201      	str	r2, [sp, #4]
 800a584:	9a02      	ldr	r2, [sp, #8]
 800a586:	9303      	str	r3, [sp, #12]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d80c      	bhi.n	800a5a6 <__multiply+0x9e>
 800a58c:	2e00      	cmp	r6, #0
 800a58e:	dd03      	ble.n	800a598 <__multiply+0x90>
 800a590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a594:	2b00      	cmp	r3, #0
 800a596:	d05a      	beq.n	800a64e <__multiply+0x146>
 800a598:	6106      	str	r6, [r0, #16]
 800a59a:	b005      	add	sp, #20
 800a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a0:	f843 2b04 	str.w	r2, [r3], #4
 800a5a4:	e7d8      	b.n	800a558 <__multiply+0x50>
 800a5a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5aa:	f1ba 0f00 	cmp.w	sl, #0
 800a5ae:	d024      	beq.n	800a5fa <__multiply+0xf2>
 800a5b0:	f104 0e14 	add.w	lr, r4, #20
 800a5b4:	46a9      	mov	r9, r5
 800a5b6:	f04f 0c00 	mov.w	ip, #0
 800a5ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5be:	f8d9 1000 	ldr.w	r1, [r9]
 800a5c2:	fa1f fb82 	uxth.w	fp, r2
 800a5c6:	b289      	uxth	r1, r1
 800a5c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5d4:	4461      	add	r1, ip
 800a5d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5da:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5e2:	b289      	uxth	r1, r1
 800a5e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5e8:	4577      	cmp	r7, lr
 800a5ea:	f849 1b04 	str.w	r1, [r9], #4
 800a5ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5f2:	d8e2      	bhi.n	800a5ba <__multiply+0xb2>
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	f845 c002 	str.w	ip, [r5, r2]
 800a5fa:	9a03      	ldr	r2, [sp, #12]
 800a5fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a600:	3304      	adds	r3, #4
 800a602:	f1b9 0f00 	cmp.w	r9, #0
 800a606:	d020      	beq.n	800a64a <__multiply+0x142>
 800a608:	6829      	ldr	r1, [r5, #0]
 800a60a:	f104 0c14 	add.w	ip, r4, #20
 800a60e:	46ae      	mov	lr, r5
 800a610:	f04f 0a00 	mov.w	sl, #0
 800a614:	f8bc b000 	ldrh.w	fp, [ip]
 800a618:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a61c:	fb09 220b 	mla	r2, r9, fp, r2
 800a620:	4492      	add	sl, r2
 800a622:	b289      	uxth	r1, r1
 800a624:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a628:	f84e 1b04 	str.w	r1, [lr], #4
 800a62c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a630:	f8be 1000 	ldrh.w	r1, [lr]
 800a634:	0c12      	lsrs	r2, r2, #16
 800a636:	fb09 1102 	mla	r1, r9, r2, r1
 800a63a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a63e:	4567      	cmp	r7, ip
 800a640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a644:	d8e6      	bhi.n	800a614 <__multiply+0x10c>
 800a646:	9a01      	ldr	r2, [sp, #4]
 800a648:	50a9      	str	r1, [r5, r2]
 800a64a:	3504      	adds	r5, #4
 800a64c:	e79a      	b.n	800a584 <__multiply+0x7c>
 800a64e:	3e01      	subs	r6, #1
 800a650:	e79c      	b.n	800a58c <__multiply+0x84>
 800a652:	bf00      	nop
 800a654:	0800b980 	.word	0x0800b980
 800a658:	0800ba70 	.word	0x0800ba70

0800a65c <__pow5mult>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	4615      	mov	r5, r2
 800a662:	f012 0203 	ands.w	r2, r2, #3
 800a666:	4606      	mov	r6, r0
 800a668:	460f      	mov	r7, r1
 800a66a:	d007      	beq.n	800a67c <__pow5mult+0x20>
 800a66c:	4c25      	ldr	r4, [pc, #148]	; (800a704 <__pow5mult+0xa8>)
 800a66e:	3a01      	subs	r2, #1
 800a670:	2300      	movs	r3, #0
 800a672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a676:	f7ff fe51 	bl	800a31c <__multadd>
 800a67a:	4607      	mov	r7, r0
 800a67c:	10ad      	asrs	r5, r5, #2
 800a67e:	d03d      	beq.n	800a6fc <__pow5mult+0xa0>
 800a680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a682:	b97c      	cbnz	r4, 800a6a4 <__pow5mult+0x48>
 800a684:	2010      	movs	r0, #16
 800a686:	f7ff fdbf 	bl	800a208 <malloc>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6270      	str	r0, [r6, #36]	; 0x24
 800a68e:	b928      	cbnz	r0, 800a69c <__pow5mult+0x40>
 800a690:	4b1d      	ldr	r3, [pc, #116]	; (800a708 <__pow5mult+0xac>)
 800a692:	481e      	ldr	r0, [pc, #120]	; (800a70c <__pow5mult+0xb0>)
 800a694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a698:	f000 fedc 	bl	800b454 <__assert_func>
 800a69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6a0:	6004      	str	r4, [r0, #0]
 800a6a2:	60c4      	str	r4, [r0, #12]
 800a6a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6ac:	b94c      	cbnz	r4, 800a6c2 <__pow5mult+0x66>
 800a6ae:	f240 2171 	movw	r1, #625	; 0x271
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7ff ff12 	bl	800a4dc <__i2b>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6be:	4604      	mov	r4, r0
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	f04f 0900 	mov.w	r9, #0
 800a6c6:	07eb      	lsls	r3, r5, #31
 800a6c8:	d50a      	bpl.n	800a6e0 <__pow5mult+0x84>
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f7ff ff1a 	bl	800a508 <__multiply>
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7ff fdfd 	bl	800a2d8 <_Bfree>
 800a6de:	4647      	mov	r7, r8
 800a6e0:	106d      	asrs	r5, r5, #1
 800a6e2:	d00b      	beq.n	800a6fc <__pow5mult+0xa0>
 800a6e4:	6820      	ldr	r0, [r4, #0]
 800a6e6:	b938      	cbnz	r0, 800a6f8 <__pow5mult+0x9c>
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff ff0b 	bl	800a508 <__multiply>
 800a6f2:	6020      	str	r0, [r4, #0]
 800a6f4:	f8c0 9000 	str.w	r9, [r0]
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	e7e4      	b.n	800a6c6 <__pow5mult+0x6a>
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a702:	bf00      	nop
 800a704:	0800bbc0 	.word	0x0800bbc0
 800a708:	0800b90e 	.word	0x0800b90e
 800a70c:	0800ba70 	.word	0x0800ba70

0800a710 <__lshift>:
 800a710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a714:	460c      	mov	r4, r1
 800a716:	6849      	ldr	r1, [r1, #4]
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	4607      	mov	r7, r0
 800a722:	4691      	mov	r9, r2
 800a724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a728:	f108 0601 	add.w	r6, r8, #1
 800a72c:	42b3      	cmp	r3, r6
 800a72e:	db0b      	blt.n	800a748 <__lshift+0x38>
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff fd91 	bl	800a258 <_Balloc>
 800a736:	4605      	mov	r5, r0
 800a738:	b948      	cbnz	r0, 800a74e <__lshift+0x3e>
 800a73a:	4602      	mov	r2, r0
 800a73c:	4b2a      	ldr	r3, [pc, #168]	; (800a7e8 <__lshift+0xd8>)
 800a73e:	482b      	ldr	r0, [pc, #172]	; (800a7ec <__lshift+0xdc>)
 800a740:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a744:	f000 fe86 	bl	800b454 <__assert_func>
 800a748:	3101      	adds	r1, #1
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	e7ee      	b.n	800a72c <__lshift+0x1c>
 800a74e:	2300      	movs	r3, #0
 800a750:	f100 0114 	add.w	r1, r0, #20
 800a754:	f100 0210 	add.w	r2, r0, #16
 800a758:	4618      	mov	r0, r3
 800a75a:	4553      	cmp	r3, sl
 800a75c:	db37      	blt.n	800a7ce <__lshift+0xbe>
 800a75e:	6920      	ldr	r0, [r4, #16]
 800a760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a764:	f104 0314 	add.w	r3, r4, #20
 800a768:	f019 091f 	ands.w	r9, r9, #31
 800a76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a770:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a774:	d02f      	beq.n	800a7d6 <__lshift+0xc6>
 800a776:	f1c9 0e20 	rsb	lr, r9, #32
 800a77a:	468a      	mov	sl, r1
 800a77c:	f04f 0c00 	mov.w	ip, #0
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	fa02 f209 	lsl.w	r2, r2, r9
 800a786:	ea42 020c 	orr.w	r2, r2, ip
 800a78a:	f84a 2b04 	str.w	r2, [sl], #4
 800a78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a792:	4298      	cmp	r0, r3
 800a794:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a798:	d8f2      	bhi.n	800a780 <__lshift+0x70>
 800a79a:	1b03      	subs	r3, r0, r4
 800a79c:	3b15      	subs	r3, #21
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	f104 0215 	add.w	r2, r4, #21
 800a7a8:	4290      	cmp	r0, r2
 800a7aa:	bf38      	it	cc
 800a7ac:	2304      	movcc	r3, #4
 800a7ae:	f841 c003 	str.w	ip, [r1, r3]
 800a7b2:	f1bc 0f00 	cmp.w	ip, #0
 800a7b6:	d001      	beq.n	800a7bc <__lshift+0xac>
 800a7b8:	f108 0602 	add.w	r6, r8, #2
 800a7bc:	3e01      	subs	r6, #1
 800a7be:	4638      	mov	r0, r7
 800a7c0:	612e      	str	r6, [r5, #16]
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f7ff fd88 	bl	800a2d8 <_Bfree>
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	e7c1      	b.n	800a75a <__lshift+0x4a>
 800a7d6:	3904      	subs	r1, #4
 800a7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7e0:	4298      	cmp	r0, r3
 800a7e2:	d8f9      	bhi.n	800a7d8 <__lshift+0xc8>
 800a7e4:	e7ea      	b.n	800a7bc <__lshift+0xac>
 800a7e6:	bf00      	nop
 800a7e8:	0800b980 	.word	0x0800b980
 800a7ec:	0800ba70 	.word	0x0800ba70

0800a7f0 <__mcmp>:
 800a7f0:	b530      	push	{r4, r5, lr}
 800a7f2:	6902      	ldr	r2, [r0, #16]
 800a7f4:	690c      	ldr	r4, [r1, #16]
 800a7f6:	1b12      	subs	r2, r2, r4
 800a7f8:	d10e      	bne.n	800a818 <__mcmp+0x28>
 800a7fa:	f100 0314 	add.w	r3, r0, #20
 800a7fe:	3114      	adds	r1, #20
 800a800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a80c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a810:	42a5      	cmp	r5, r4
 800a812:	d003      	beq.n	800a81c <__mcmp+0x2c>
 800a814:	d305      	bcc.n	800a822 <__mcmp+0x32>
 800a816:	2201      	movs	r2, #1
 800a818:	4610      	mov	r0, r2
 800a81a:	bd30      	pop	{r4, r5, pc}
 800a81c:	4283      	cmp	r3, r0
 800a81e:	d3f3      	bcc.n	800a808 <__mcmp+0x18>
 800a820:	e7fa      	b.n	800a818 <__mcmp+0x28>
 800a822:	f04f 32ff 	mov.w	r2, #4294967295
 800a826:	e7f7      	b.n	800a818 <__mcmp+0x28>

0800a828 <__mdiff>:
 800a828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	460c      	mov	r4, r1
 800a82e:	4606      	mov	r6, r0
 800a830:	4611      	mov	r1, r2
 800a832:	4620      	mov	r0, r4
 800a834:	4690      	mov	r8, r2
 800a836:	f7ff ffdb 	bl	800a7f0 <__mcmp>
 800a83a:	1e05      	subs	r5, r0, #0
 800a83c:	d110      	bne.n	800a860 <__mdiff+0x38>
 800a83e:	4629      	mov	r1, r5
 800a840:	4630      	mov	r0, r6
 800a842:	f7ff fd09 	bl	800a258 <_Balloc>
 800a846:	b930      	cbnz	r0, 800a856 <__mdiff+0x2e>
 800a848:	4b3a      	ldr	r3, [pc, #232]	; (800a934 <__mdiff+0x10c>)
 800a84a:	4602      	mov	r2, r0
 800a84c:	f240 2132 	movw	r1, #562	; 0x232
 800a850:	4839      	ldr	r0, [pc, #228]	; (800a938 <__mdiff+0x110>)
 800a852:	f000 fdff 	bl	800b454 <__assert_func>
 800a856:	2301      	movs	r3, #1
 800a858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	bfa4      	itt	ge
 800a862:	4643      	movge	r3, r8
 800a864:	46a0      	movge	r8, r4
 800a866:	4630      	mov	r0, r6
 800a868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a86c:	bfa6      	itte	ge
 800a86e:	461c      	movge	r4, r3
 800a870:	2500      	movge	r5, #0
 800a872:	2501      	movlt	r5, #1
 800a874:	f7ff fcf0 	bl	800a258 <_Balloc>
 800a878:	b920      	cbnz	r0, 800a884 <__mdiff+0x5c>
 800a87a:	4b2e      	ldr	r3, [pc, #184]	; (800a934 <__mdiff+0x10c>)
 800a87c:	4602      	mov	r2, r0
 800a87e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a882:	e7e5      	b.n	800a850 <__mdiff+0x28>
 800a884:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a888:	6926      	ldr	r6, [r4, #16]
 800a88a:	60c5      	str	r5, [r0, #12]
 800a88c:	f104 0914 	add.w	r9, r4, #20
 800a890:	f108 0514 	add.w	r5, r8, #20
 800a894:	f100 0e14 	add.w	lr, r0, #20
 800a898:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a89c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8a0:	f108 0210 	add.w	r2, r8, #16
 800a8a4:	46f2      	mov	sl, lr
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8b0:	fa1f f883 	uxth.w	r8, r3
 800a8b4:	fa11 f18b 	uxtah	r1, r1, fp
 800a8b8:	0c1b      	lsrs	r3, r3, #16
 800a8ba:	eba1 0808 	sub.w	r8, r1, r8
 800a8be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8c6:	fa1f f888 	uxth.w	r8, r8
 800a8ca:	1419      	asrs	r1, r3, #16
 800a8cc:	454e      	cmp	r6, r9
 800a8ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800a8d6:	d8e7      	bhi.n	800a8a8 <__mdiff+0x80>
 800a8d8:	1b33      	subs	r3, r6, r4
 800a8da:	3b15      	subs	r3, #21
 800a8dc:	f023 0303 	bic.w	r3, r3, #3
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	3415      	adds	r4, #21
 800a8e4:	42a6      	cmp	r6, r4
 800a8e6:	bf38      	it	cc
 800a8e8:	2304      	movcc	r3, #4
 800a8ea:	441d      	add	r5, r3
 800a8ec:	4473      	add	r3, lr
 800a8ee:	469e      	mov	lr, r3
 800a8f0:	462e      	mov	r6, r5
 800a8f2:	4566      	cmp	r6, ip
 800a8f4:	d30e      	bcc.n	800a914 <__mdiff+0xec>
 800a8f6:	f10c 0203 	add.w	r2, ip, #3
 800a8fa:	1b52      	subs	r2, r2, r5
 800a8fc:	f022 0203 	bic.w	r2, r2, #3
 800a900:	3d03      	subs	r5, #3
 800a902:	45ac      	cmp	ip, r5
 800a904:	bf38      	it	cc
 800a906:	2200      	movcc	r2, #0
 800a908:	441a      	add	r2, r3
 800a90a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a90e:	b17b      	cbz	r3, 800a930 <__mdiff+0x108>
 800a910:	6107      	str	r7, [r0, #16]
 800a912:	e7a3      	b.n	800a85c <__mdiff+0x34>
 800a914:	f856 8b04 	ldr.w	r8, [r6], #4
 800a918:	fa11 f288 	uxtah	r2, r1, r8
 800a91c:	1414      	asrs	r4, r2, #16
 800a91e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a922:	b292      	uxth	r2, r2
 800a924:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a928:	f84e 2b04 	str.w	r2, [lr], #4
 800a92c:	1421      	asrs	r1, r4, #16
 800a92e:	e7e0      	b.n	800a8f2 <__mdiff+0xca>
 800a930:	3f01      	subs	r7, #1
 800a932:	e7ea      	b.n	800a90a <__mdiff+0xe2>
 800a934:	0800b980 	.word	0x0800b980
 800a938:	0800ba70 	.word	0x0800ba70

0800a93c <__ulp>:
 800a93c:	b082      	sub	sp, #8
 800a93e:	ed8d 0b00 	vstr	d0, [sp]
 800a942:	9b01      	ldr	r3, [sp, #4]
 800a944:	4912      	ldr	r1, [pc, #72]	; (800a990 <__ulp+0x54>)
 800a946:	4019      	ands	r1, r3
 800a948:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a94c:	2900      	cmp	r1, #0
 800a94e:	dd05      	ble.n	800a95c <__ulp+0x20>
 800a950:	2200      	movs	r2, #0
 800a952:	460b      	mov	r3, r1
 800a954:	ec43 2b10 	vmov	d0, r2, r3
 800a958:	b002      	add	sp, #8
 800a95a:	4770      	bx	lr
 800a95c:	4249      	negs	r1, r1
 800a95e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a962:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	da04      	bge.n	800a97a <__ulp+0x3e>
 800a970:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a974:	fa41 f300 	asr.w	r3, r1, r0
 800a978:	e7ec      	b.n	800a954 <__ulp+0x18>
 800a97a:	f1a0 0114 	sub.w	r1, r0, #20
 800a97e:	291e      	cmp	r1, #30
 800a980:	bfda      	itte	le
 800a982:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a986:	fa20 f101 	lsrle.w	r1, r0, r1
 800a98a:	2101      	movgt	r1, #1
 800a98c:	460a      	mov	r2, r1
 800a98e:	e7e1      	b.n	800a954 <__ulp+0x18>
 800a990:	7ff00000 	.word	0x7ff00000

0800a994 <__b2d>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	6905      	ldr	r5, [r0, #16]
 800a998:	f100 0714 	add.w	r7, r0, #20
 800a99c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9a0:	1f2e      	subs	r6, r5, #4
 800a9a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff fd48 	bl	800a43c <__hi0bits>
 800a9ac:	f1c0 0320 	rsb	r3, r0, #32
 800a9b0:	280a      	cmp	r0, #10
 800a9b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa30 <__b2d+0x9c>
 800a9b6:	600b      	str	r3, [r1, #0]
 800a9b8:	dc14      	bgt.n	800a9e4 <__b2d+0x50>
 800a9ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9be:	fa24 f10e 	lsr.w	r1, r4, lr
 800a9c2:	42b7      	cmp	r7, r6
 800a9c4:	ea41 030c 	orr.w	r3, r1, ip
 800a9c8:	bf34      	ite	cc
 800a9ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9ce:	2100      	movcs	r1, #0
 800a9d0:	3015      	adds	r0, #21
 800a9d2:	fa04 f000 	lsl.w	r0, r4, r0
 800a9d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9da:	ea40 0201 	orr.w	r2, r0, r1
 800a9de:	ec43 2b10 	vmov	d0, r2, r3
 800a9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e4:	42b7      	cmp	r7, r6
 800a9e6:	bf3a      	itte	cc
 800a9e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9f0:	2100      	movcs	r1, #0
 800a9f2:	380b      	subs	r0, #11
 800a9f4:	d017      	beq.n	800aa26 <__b2d+0x92>
 800a9f6:	f1c0 0c20 	rsb	ip, r0, #32
 800a9fa:	fa04 f500 	lsl.w	r5, r4, r0
 800a9fe:	42be      	cmp	r6, r7
 800aa00:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa04:	ea45 0504 	orr.w	r5, r5, r4
 800aa08:	bf8c      	ite	hi
 800aa0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa0e:	2400      	movls	r4, #0
 800aa10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa14:	fa01 f000 	lsl.w	r0, r1, r0
 800aa18:	fa24 f40c 	lsr.w	r4, r4, ip
 800aa1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa20:	ea40 0204 	orr.w	r2, r0, r4
 800aa24:	e7db      	b.n	800a9de <__b2d+0x4a>
 800aa26:	ea44 030c 	orr.w	r3, r4, ip
 800aa2a:	460a      	mov	r2, r1
 800aa2c:	e7d7      	b.n	800a9de <__b2d+0x4a>
 800aa2e:	bf00      	nop
 800aa30:	3ff00000 	.word	0x3ff00000

0800aa34 <__d2b>:
 800aa34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	4689      	mov	r9, r1
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	ec57 6b10 	vmov	r6, r7, d0
 800aa40:	4690      	mov	r8, r2
 800aa42:	f7ff fc09 	bl	800a258 <_Balloc>
 800aa46:	4604      	mov	r4, r0
 800aa48:	b930      	cbnz	r0, 800aa58 <__d2b+0x24>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	4b25      	ldr	r3, [pc, #148]	; (800aae4 <__d2b+0xb0>)
 800aa4e:	4826      	ldr	r0, [pc, #152]	; (800aae8 <__d2b+0xb4>)
 800aa50:	f240 310a 	movw	r1, #778	; 0x30a
 800aa54:	f000 fcfe 	bl	800b454 <__assert_func>
 800aa58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa60:	bb35      	cbnz	r5, 800aab0 <__d2b+0x7c>
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	d028      	beq.n	800aaba <__d2b+0x86>
 800aa68:	4668      	mov	r0, sp
 800aa6a:	9600      	str	r6, [sp, #0]
 800aa6c:	f7ff fd06 	bl	800a47c <__lo0bits>
 800aa70:	9900      	ldr	r1, [sp, #0]
 800aa72:	b300      	cbz	r0, 800aab6 <__d2b+0x82>
 800aa74:	9a01      	ldr	r2, [sp, #4]
 800aa76:	f1c0 0320 	rsb	r3, r0, #32
 800aa7a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	40c2      	lsrs	r2, r0
 800aa82:	6163      	str	r3, [r4, #20]
 800aa84:	9201      	str	r2, [sp, #4]
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	61a3      	str	r3, [r4, #24]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bf14      	ite	ne
 800aa8e:	2202      	movne	r2, #2
 800aa90:	2201      	moveq	r2, #1
 800aa92:	6122      	str	r2, [r4, #16]
 800aa94:	b1d5      	cbz	r5, 800aacc <__d2b+0x98>
 800aa96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa9a:	4405      	add	r5, r0
 800aa9c:	f8c9 5000 	str.w	r5, [r9]
 800aaa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaa4:	f8c8 0000 	str.w	r0, [r8]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	b003      	add	sp, #12
 800aaac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aab4:	e7d5      	b.n	800aa62 <__d2b+0x2e>
 800aab6:	6161      	str	r1, [r4, #20]
 800aab8:	e7e5      	b.n	800aa86 <__d2b+0x52>
 800aaba:	a801      	add	r0, sp, #4
 800aabc:	f7ff fcde 	bl	800a47c <__lo0bits>
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	6163      	str	r3, [r4, #20]
 800aac4:	2201      	movs	r2, #1
 800aac6:	6122      	str	r2, [r4, #16]
 800aac8:	3020      	adds	r0, #32
 800aaca:	e7e3      	b.n	800aa94 <__d2b+0x60>
 800aacc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aad4:	f8c9 0000 	str.w	r0, [r9]
 800aad8:	6918      	ldr	r0, [r3, #16]
 800aada:	f7ff fcaf 	bl	800a43c <__hi0bits>
 800aade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aae2:	e7df      	b.n	800aaa4 <__d2b+0x70>
 800aae4:	0800b980 	.word	0x0800b980
 800aae8:	0800ba70 	.word	0x0800ba70

0800aaec <__ratio>:
 800aaec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	4688      	mov	r8, r1
 800aaf2:	4669      	mov	r1, sp
 800aaf4:	4681      	mov	r9, r0
 800aaf6:	f7ff ff4d 	bl	800a994 <__b2d>
 800aafa:	a901      	add	r1, sp, #4
 800aafc:	4640      	mov	r0, r8
 800aafe:	ec55 4b10 	vmov	r4, r5, d0
 800ab02:	f7ff ff47 	bl	800a994 <__b2d>
 800ab06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab0e:	eba3 0c02 	sub.w	ip, r3, r2
 800ab12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab1c:	ec51 0b10 	vmov	r0, r1, d0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bfd6      	itet	le
 800ab24:	460a      	movle	r2, r1
 800ab26:	462a      	movgt	r2, r5
 800ab28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab2c:	468b      	mov	fp, r1
 800ab2e:	462f      	mov	r7, r5
 800ab30:	bfd4      	ite	le
 800ab32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	ee10 2a10 	vmov	r2, s0
 800ab40:	465b      	mov	r3, fp
 800ab42:	4639      	mov	r1, r7
 800ab44:	f7f5 fe82 	bl	800084c <__aeabi_ddiv>
 800ab48:	ec41 0b10 	vmov	d0, r0, r1
 800ab4c:	b003      	add	sp, #12
 800ab4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab52 <__copybits>:
 800ab52:	3901      	subs	r1, #1
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	1149      	asrs	r1, r1, #5
 800ab58:	6914      	ldr	r4, [r2, #16]
 800ab5a:	3101      	adds	r1, #1
 800ab5c:	f102 0314 	add.w	r3, r2, #20
 800ab60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab68:	1f05      	subs	r5, r0, #4
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	d30c      	bcc.n	800ab88 <__copybits+0x36>
 800ab6e:	1aa3      	subs	r3, r4, r2
 800ab70:	3b11      	subs	r3, #17
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	3211      	adds	r2, #17
 800ab78:	42a2      	cmp	r2, r4
 800ab7a:	bf88      	it	hi
 800ab7c:	2300      	movhi	r3, #0
 800ab7e:	4418      	add	r0, r3
 800ab80:	2300      	movs	r3, #0
 800ab82:	4288      	cmp	r0, r1
 800ab84:	d305      	bcc.n	800ab92 <__copybits+0x40>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab90:	e7eb      	b.n	800ab6a <__copybits+0x18>
 800ab92:	f840 3b04 	str.w	r3, [r0], #4
 800ab96:	e7f4      	b.n	800ab82 <__copybits+0x30>

0800ab98 <__any_on>:
 800ab98:	f100 0214 	add.w	r2, r0, #20
 800ab9c:	6900      	ldr	r0, [r0, #16]
 800ab9e:	114b      	asrs	r3, r1, #5
 800aba0:	4298      	cmp	r0, r3
 800aba2:	b510      	push	{r4, lr}
 800aba4:	db11      	blt.n	800abca <__any_on+0x32>
 800aba6:	dd0a      	ble.n	800abbe <__any_on+0x26>
 800aba8:	f011 011f 	ands.w	r1, r1, #31
 800abac:	d007      	beq.n	800abbe <__any_on+0x26>
 800abae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abb2:	fa24 f001 	lsr.w	r0, r4, r1
 800abb6:	fa00 f101 	lsl.w	r1, r0, r1
 800abba:	428c      	cmp	r4, r1
 800abbc:	d10b      	bne.n	800abd6 <__any_on+0x3e>
 800abbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d803      	bhi.n	800abce <__any_on+0x36>
 800abc6:	2000      	movs	r0, #0
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	4603      	mov	r3, r0
 800abcc:	e7f7      	b.n	800abbe <__any_on+0x26>
 800abce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abd2:	2900      	cmp	r1, #0
 800abd4:	d0f5      	beq.n	800abc2 <__any_on+0x2a>
 800abd6:	2001      	movs	r0, #1
 800abd8:	e7f6      	b.n	800abc8 <__any_on+0x30>

0800abda <_calloc_r>:
 800abda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abdc:	fba1 2402 	umull	r2, r4, r1, r2
 800abe0:	b94c      	cbnz	r4, 800abf6 <_calloc_r+0x1c>
 800abe2:	4611      	mov	r1, r2
 800abe4:	9201      	str	r2, [sp, #4]
 800abe6:	f000 f87b 	bl	800ace0 <_malloc_r>
 800abea:	9a01      	ldr	r2, [sp, #4]
 800abec:	4605      	mov	r5, r0
 800abee:	b930      	cbnz	r0, 800abfe <_calloc_r+0x24>
 800abf0:	4628      	mov	r0, r5
 800abf2:	b003      	add	sp, #12
 800abf4:	bd30      	pop	{r4, r5, pc}
 800abf6:	220c      	movs	r2, #12
 800abf8:	6002      	str	r2, [r0, #0]
 800abfa:	2500      	movs	r5, #0
 800abfc:	e7f8      	b.n	800abf0 <_calloc_r+0x16>
 800abfe:	4621      	mov	r1, r4
 800ac00:	f7fc f852 	bl	8006ca8 <memset>
 800ac04:	e7f4      	b.n	800abf0 <_calloc_r+0x16>
	...

0800ac08 <_free_r>:
 800ac08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	d044      	beq.n	800ac98 <_free_r+0x90>
 800ac0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac12:	9001      	str	r0, [sp, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f1a1 0404 	sub.w	r4, r1, #4
 800ac1a:	bfb8      	it	lt
 800ac1c:	18e4      	addlt	r4, r4, r3
 800ac1e:	f000 fca7 	bl	800b570 <__malloc_lock>
 800ac22:	4a1e      	ldr	r2, [pc, #120]	; (800ac9c <_free_r+0x94>)
 800ac24:	9801      	ldr	r0, [sp, #4]
 800ac26:	6813      	ldr	r3, [r2, #0]
 800ac28:	b933      	cbnz	r3, 800ac38 <_free_r+0x30>
 800ac2a:	6063      	str	r3, [r4, #4]
 800ac2c:	6014      	str	r4, [r2, #0]
 800ac2e:	b003      	add	sp, #12
 800ac30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac34:	f000 bca2 	b.w	800b57c <__malloc_unlock>
 800ac38:	42a3      	cmp	r3, r4
 800ac3a:	d908      	bls.n	800ac4e <_free_r+0x46>
 800ac3c:	6825      	ldr	r5, [r4, #0]
 800ac3e:	1961      	adds	r1, r4, r5
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf01      	itttt	eq
 800ac44:	6819      	ldreq	r1, [r3, #0]
 800ac46:	685b      	ldreq	r3, [r3, #4]
 800ac48:	1949      	addeq	r1, r1, r5
 800ac4a:	6021      	streq	r1, [r4, #0]
 800ac4c:	e7ed      	b.n	800ac2a <_free_r+0x22>
 800ac4e:	461a      	mov	r2, r3
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	b10b      	cbz	r3, 800ac58 <_free_r+0x50>
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d9fa      	bls.n	800ac4e <_free_r+0x46>
 800ac58:	6811      	ldr	r1, [r2, #0]
 800ac5a:	1855      	adds	r5, r2, r1
 800ac5c:	42a5      	cmp	r5, r4
 800ac5e:	d10b      	bne.n	800ac78 <_free_r+0x70>
 800ac60:	6824      	ldr	r4, [r4, #0]
 800ac62:	4421      	add	r1, r4
 800ac64:	1854      	adds	r4, r2, r1
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	6011      	str	r1, [r2, #0]
 800ac6a:	d1e0      	bne.n	800ac2e <_free_r+0x26>
 800ac6c:	681c      	ldr	r4, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	6053      	str	r3, [r2, #4]
 800ac72:	4421      	add	r1, r4
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	e7da      	b.n	800ac2e <_free_r+0x26>
 800ac78:	d902      	bls.n	800ac80 <_free_r+0x78>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	e7d6      	b.n	800ac2e <_free_r+0x26>
 800ac80:	6825      	ldr	r5, [r4, #0]
 800ac82:	1961      	adds	r1, r4, r5
 800ac84:	428b      	cmp	r3, r1
 800ac86:	bf04      	itt	eq
 800ac88:	6819      	ldreq	r1, [r3, #0]
 800ac8a:	685b      	ldreq	r3, [r3, #4]
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	bf04      	itt	eq
 800ac90:	1949      	addeq	r1, r1, r5
 800ac92:	6021      	streq	r1, [r4, #0]
 800ac94:	6054      	str	r4, [r2, #4]
 800ac96:	e7ca      	b.n	800ac2e <_free_r+0x26>
 800ac98:	b003      	add	sp, #12
 800ac9a:	bd30      	pop	{r4, r5, pc}
 800ac9c:	20000420 	.word	0x20000420

0800aca0 <sbrk_aligned>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4e0e      	ldr	r6, [pc, #56]	; (800acdc <sbrk_aligned+0x3c>)
 800aca4:	460c      	mov	r4, r1
 800aca6:	6831      	ldr	r1, [r6, #0]
 800aca8:	4605      	mov	r5, r0
 800acaa:	b911      	cbnz	r1, 800acb2 <sbrk_aligned+0x12>
 800acac:	f000 fb4c 	bl	800b348 <_sbrk_r>
 800acb0:	6030      	str	r0, [r6, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 fb47 	bl	800b348 <_sbrk_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d00a      	beq.n	800acd4 <sbrk_aligned+0x34>
 800acbe:	1cc4      	adds	r4, r0, #3
 800acc0:	f024 0403 	bic.w	r4, r4, #3
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d007      	beq.n	800acd8 <sbrk_aligned+0x38>
 800acc8:	1a21      	subs	r1, r4, r0
 800acca:	4628      	mov	r0, r5
 800accc:	f000 fb3c 	bl	800b348 <_sbrk_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d101      	bne.n	800acd8 <sbrk_aligned+0x38>
 800acd4:	f04f 34ff 	mov.w	r4, #4294967295
 800acd8:	4620      	mov	r0, r4
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	20000424 	.word	0x20000424

0800ace0 <_malloc_r>:
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace4:	1ccd      	adds	r5, r1, #3
 800ace6:	f025 0503 	bic.w	r5, r5, #3
 800acea:	3508      	adds	r5, #8
 800acec:	2d0c      	cmp	r5, #12
 800acee:	bf38      	it	cc
 800acf0:	250c      	movcc	r5, #12
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	4607      	mov	r7, r0
 800acf6:	db01      	blt.n	800acfc <_malloc_r+0x1c>
 800acf8:	42a9      	cmp	r1, r5
 800acfa:	d905      	bls.n	800ad08 <_malloc_r+0x28>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	2600      	movs	r6, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	4e2e      	ldr	r6, [pc, #184]	; (800adc4 <_malloc_r+0xe4>)
 800ad0a:	f000 fc31 	bl	800b570 <__malloc_lock>
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	461c      	mov	r4, r3
 800ad12:	bb34      	cbnz	r4, 800ad62 <_malloc_r+0x82>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	f7ff ffc2 	bl	800aca0 <sbrk_aligned>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	4604      	mov	r4, r0
 800ad20:	d14d      	bne.n	800adbe <_malloc_r+0xde>
 800ad22:	6834      	ldr	r4, [r6, #0]
 800ad24:	4626      	mov	r6, r4
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	d140      	bne.n	800adac <_malloc_r+0xcc>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4638      	mov	r0, r7
 800ad30:	eb04 0803 	add.w	r8, r4, r3
 800ad34:	f000 fb08 	bl	800b348 <_sbrk_r>
 800ad38:	4580      	cmp	r8, r0
 800ad3a:	d13a      	bne.n	800adb2 <_malloc_r+0xd2>
 800ad3c:	6821      	ldr	r1, [r4, #0]
 800ad3e:	3503      	adds	r5, #3
 800ad40:	1a6d      	subs	r5, r5, r1
 800ad42:	f025 0503 	bic.w	r5, r5, #3
 800ad46:	3508      	adds	r5, #8
 800ad48:	2d0c      	cmp	r5, #12
 800ad4a:	bf38      	it	cc
 800ad4c:	250c      	movcc	r5, #12
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ffa5 	bl	800aca0 <sbrk_aligned>
 800ad56:	3001      	adds	r0, #1
 800ad58:	d02b      	beq.n	800adb2 <_malloc_r+0xd2>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	442b      	add	r3, r5
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	e00e      	b.n	800ad80 <_malloc_r+0xa0>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	1b52      	subs	r2, r2, r5
 800ad66:	d41e      	bmi.n	800ada6 <_malloc_r+0xc6>
 800ad68:	2a0b      	cmp	r2, #11
 800ad6a:	d916      	bls.n	800ad9a <_malloc_r+0xba>
 800ad6c:	1961      	adds	r1, r4, r5
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	6025      	str	r5, [r4, #0]
 800ad72:	bf18      	it	ne
 800ad74:	6059      	strne	r1, [r3, #4]
 800ad76:	6863      	ldr	r3, [r4, #4]
 800ad78:	bf08      	it	eq
 800ad7a:	6031      	streq	r1, [r6, #0]
 800ad7c:	5162      	str	r2, [r4, r5]
 800ad7e:	604b      	str	r3, [r1, #4]
 800ad80:	4638      	mov	r0, r7
 800ad82:	f104 060b 	add.w	r6, r4, #11
 800ad86:	f000 fbf9 	bl	800b57c <__malloc_unlock>
 800ad8a:	f026 0607 	bic.w	r6, r6, #7
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	1af2      	subs	r2, r6, r3
 800ad92:	d0b6      	beq.n	800ad02 <_malloc_r+0x22>
 800ad94:	1b9b      	subs	r3, r3, r6
 800ad96:	50a3      	str	r3, [r4, r2]
 800ad98:	e7b3      	b.n	800ad02 <_malloc_r+0x22>
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	bf0c      	ite	eq
 800ada0:	6032      	streq	r2, [r6, #0]
 800ada2:	605a      	strne	r2, [r3, #4]
 800ada4:	e7ec      	b.n	800ad80 <_malloc_r+0xa0>
 800ada6:	4623      	mov	r3, r4
 800ada8:	6864      	ldr	r4, [r4, #4]
 800adaa:	e7b2      	b.n	800ad12 <_malloc_r+0x32>
 800adac:	4634      	mov	r4, r6
 800adae:	6876      	ldr	r6, [r6, #4]
 800adb0:	e7b9      	b.n	800ad26 <_malloc_r+0x46>
 800adb2:	230c      	movs	r3, #12
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	4638      	mov	r0, r7
 800adb8:	f000 fbe0 	bl	800b57c <__malloc_unlock>
 800adbc:	e7a1      	b.n	800ad02 <_malloc_r+0x22>
 800adbe:	6025      	str	r5, [r4, #0]
 800adc0:	e7de      	b.n	800ad80 <_malloc_r+0xa0>
 800adc2:	bf00      	nop
 800adc4:	20000420 	.word	0x20000420

0800adc8 <__ssputs_r>:
 800adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	688e      	ldr	r6, [r1, #8]
 800adce:	429e      	cmp	r6, r3
 800add0:	4682      	mov	sl, r0
 800add2:	460c      	mov	r4, r1
 800add4:	4690      	mov	r8, r2
 800add6:	461f      	mov	r7, r3
 800add8:	d838      	bhi.n	800ae4c <__ssputs_r+0x84>
 800adda:	898a      	ldrh	r2, [r1, #12]
 800addc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ade0:	d032      	beq.n	800ae48 <__ssputs_r+0x80>
 800ade2:	6825      	ldr	r5, [r4, #0]
 800ade4:	6909      	ldr	r1, [r1, #16]
 800ade6:	eba5 0901 	sub.w	r9, r5, r1
 800adea:	6965      	ldr	r5, [r4, #20]
 800adec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf4:	3301      	adds	r3, #1
 800adf6:	444b      	add	r3, r9
 800adf8:	106d      	asrs	r5, r5, #1
 800adfa:	429d      	cmp	r5, r3
 800adfc:	bf38      	it	cc
 800adfe:	461d      	movcc	r5, r3
 800ae00:	0553      	lsls	r3, r2, #21
 800ae02:	d531      	bpl.n	800ae68 <__ssputs_r+0xa0>
 800ae04:	4629      	mov	r1, r5
 800ae06:	f7ff ff6b 	bl	800ace0 <_malloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	b950      	cbnz	r0, 800ae24 <__ssputs_r+0x5c>
 800ae0e:	230c      	movs	r3, #12
 800ae10:	f8ca 3000 	str.w	r3, [sl]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	6921      	ldr	r1, [r4, #16]
 800ae26:	464a      	mov	r2, r9
 800ae28:	f7ff fa08 	bl	800a23c <memcpy>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	6126      	str	r6, [r4, #16]
 800ae3a:	6165      	str	r5, [r4, #20]
 800ae3c:	444e      	add	r6, r9
 800ae3e:	eba5 0509 	sub.w	r5, r5, r9
 800ae42:	6026      	str	r6, [r4, #0]
 800ae44:	60a5      	str	r5, [r4, #8]
 800ae46:	463e      	mov	r6, r7
 800ae48:	42be      	cmp	r6, r7
 800ae4a:	d900      	bls.n	800ae4e <__ssputs_r+0x86>
 800ae4c:	463e      	mov	r6, r7
 800ae4e:	6820      	ldr	r0, [r4, #0]
 800ae50:	4632      	mov	r2, r6
 800ae52:	4641      	mov	r1, r8
 800ae54:	f000 fb72 	bl	800b53c <memmove>
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	1b9b      	subs	r3, r3, r6
 800ae5c:	60a3      	str	r3, [r4, #8]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	4433      	add	r3, r6
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	2000      	movs	r0, #0
 800ae66:	e7db      	b.n	800ae20 <__ssputs_r+0x58>
 800ae68:	462a      	mov	r2, r5
 800ae6a:	f000 fb8d 	bl	800b588 <_realloc_r>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d1e1      	bne.n	800ae38 <__ssputs_r+0x70>
 800ae74:	6921      	ldr	r1, [r4, #16]
 800ae76:	4650      	mov	r0, sl
 800ae78:	f7ff fec6 	bl	800ac08 <_free_r>
 800ae7c:	e7c7      	b.n	800ae0e <__ssputs_r+0x46>
	...

0800ae80 <_svfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4698      	mov	r8, r3
 800ae86:	898b      	ldrh	r3, [r1, #12]
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	d50e      	bpl.n	800aeb2 <_svfiprintf_r+0x32>
 800ae94:	690b      	ldr	r3, [r1, #16]
 800ae96:	b963      	cbnz	r3, 800aeb2 <_svfiprintf_r+0x32>
 800ae98:	2140      	movs	r1, #64	; 0x40
 800ae9a:	f7ff ff21 	bl	800ace0 <_malloc_r>
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	b920      	cbnz	r0, 800aeae <_svfiprintf_r+0x2e>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	e0d1      	b.n	800b052 <_svfiprintf_r+0x1d2>
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	616b      	str	r3, [r5, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	2320      	movs	r3, #32
 800aeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec0:	2330      	movs	r3, #48	; 0x30
 800aec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b06c <_svfiprintf_r+0x1ec>
 800aec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeca:	f04f 0901 	mov.w	r9, #1
 800aece:	4623      	mov	r3, r4
 800aed0:	469a      	mov	sl, r3
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	b10a      	cbz	r2, 800aedc <_svfiprintf_r+0x5c>
 800aed8:	2a25      	cmp	r2, #37	; 0x25
 800aeda:	d1f9      	bne.n	800aed0 <_svfiprintf_r+0x50>
 800aedc:	ebba 0b04 	subs.w	fp, sl, r4
 800aee0:	d00b      	beq.n	800aefa <_svfiprintf_r+0x7a>
 800aee2:	465b      	mov	r3, fp
 800aee4:	4622      	mov	r2, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ff6d 	bl	800adc8 <__ssputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	f000 80aa 	beq.w	800b048 <_svfiprintf_r+0x1c8>
 800aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef6:	445a      	add	r2, fp
 800aef8:	9209      	str	r2, [sp, #36]	; 0x24
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80a2 	beq.w	800b048 <_svfiprintf_r+0x1c8>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 32ff 	mov.w	r2, #4294967295
 800af0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1a:	931a      	str	r3, [sp, #104]	; 0x68
 800af1c:	4654      	mov	r4, sl
 800af1e:	2205      	movs	r2, #5
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4851      	ldr	r0, [pc, #324]	; (800b06c <_svfiprintf_r+0x1ec>)
 800af26:	f7f5 f95b 	bl	80001e0 <memchr>
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	b9d8      	cbnz	r0, 800af66 <_svfiprintf_r+0xe6>
 800af2e:	06d0      	lsls	r0, r2, #27
 800af30:	bf44      	itt	mi
 800af32:	2320      	movmi	r3, #32
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af38:	0711      	lsls	r1, r2, #28
 800af3a:	bf44      	itt	mi
 800af3c:	232b      	movmi	r3, #43	; 0x2b
 800af3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b2a      	cmp	r3, #42	; 0x2a
 800af48:	d015      	beq.n	800af76 <_svfiprintf_r+0xf6>
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4654      	mov	r4, sl
 800af4e:	2000      	movs	r0, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4621      	mov	r1, r4
 800af56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5a:	3b30      	subs	r3, #48	; 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d94e      	bls.n	800affe <_svfiprintf_r+0x17e>
 800af60:	b1b0      	cbz	r0, 800af90 <_svfiprintf_r+0x110>
 800af62:	9207      	str	r2, [sp, #28]
 800af64:	e014      	b.n	800af90 <_svfiprintf_r+0x110>
 800af66:	eba0 0308 	sub.w	r3, r0, r8
 800af6a:	fa09 f303 	lsl.w	r3, r9, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	46a2      	mov	sl, r4
 800af74:	e7d2      	b.n	800af1c <_svfiprintf_r+0x9c>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbb      	ittet	lt
 800af82:	425b      	neglt	r3, r3
 800af84:	f042 0202 	orrlt.w	r2, r2, #2
 800af88:	9307      	strge	r3, [sp, #28]
 800af8a:	9307      	strlt	r3, [sp, #28]
 800af8c:	bfb8      	it	lt
 800af8e:	9204      	strlt	r2, [sp, #16]
 800af90:	7823      	ldrb	r3, [r4, #0]
 800af92:	2b2e      	cmp	r3, #46	; 0x2e
 800af94:	d10c      	bne.n	800afb0 <_svfiprintf_r+0x130>
 800af96:	7863      	ldrb	r3, [r4, #1]
 800af98:	2b2a      	cmp	r3, #42	; 0x2a
 800af9a:	d135      	bne.n	800b008 <_svfiprintf_r+0x188>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb8      	it	lt
 800afa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afac:	3402      	adds	r4, #2
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b07c <_svfiprintf_r+0x1fc>
 800afb4:	7821      	ldrb	r1, [r4, #0]
 800afb6:	2203      	movs	r2, #3
 800afb8:	4650      	mov	r0, sl
 800afba:	f7f5 f911 	bl	80001e0 <memchr>
 800afbe:	b140      	cbz	r0, 800afd2 <_svfiprintf_r+0x152>
 800afc0:	2340      	movs	r3, #64	; 0x40
 800afc2:	eba0 000a 	sub.w	r0, r0, sl
 800afc6:	fa03 f000 	lsl.w	r0, r3, r0
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	4303      	orrs	r3, r0
 800afce:	3401      	adds	r4, #1
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd6:	4826      	ldr	r0, [pc, #152]	; (800b070 <_svfiprintf_r+0x1f0>)
 800afd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afdc:	2206      	movs	r2, #6
 800afde:	f7f5 f8ff 	bl	80001e0 <memchr>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d038      	beq.n	800b058 <_svfiprintf_r+0x1d8>
 800afe6:	4b23      	ldr	r3, [pc, #140]	; (800b074 <_svfiprintf_r+0x1f4>)
 800afe8:	bb1b      	cbnz	r3, 800b032 <_svfiprintf_r+0x1b2>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	3307      	adds	r3, #7
 800afee:	f023 0307 	bic.w	r3, r3, #7
 800aff2:	3308      	adds	r3, #8
 800aff4:	9303      	str	r3, [sp, #12]
 800aff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff8:	4433      	add	r3, r6
 800affa:	9309      	str	r3, [sp, #36]	; 0x24
 800affc:	e767      	b.n	800aece <_svfiprintf_r+0x4e>
 800affe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b002:	460c      	mov	r4, r1
 800b004:	2001      	movs	r0, #1
 800b006:	e7a5      	b.n	800af54 <_svfiprintf_r+0xd4>
 800b008:	2300      	movs	r3, #0
 800b00a:	3401      	adds	r4, #1
 800b00c:	9305      	str	r3, [sp, #20]
 800b00e:	4619      	mov	r1, r3
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	4620      	mov	r0, r4
 800b016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01a:	3a30      	subs	r2, #48	; 0x30
 800b01c:	2a09      	cmp	r2, #9
 800b01e:	d903      	bls.n	800b028 <_svfiprintf_r+0x1a8>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0c5      	beq.n	800afb0 <_svfiprintf_r+0x130>
 800b024:	9105      	str	r1, [sp, #20]
 800b026:	e7c3      	b.n	800afb0 <_svfiprintf_r+0x130>
 800b028:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02c:	4604      	mov	r4, r0
 800b02e:	2301      	movs	r3, #1
 800b030:	e7f0      	b.n	800b014 <_svfiprintf_r+0x194>
 800b032:	ab03      	add	r3, sp, #12
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	462a      	mov	r2, r5
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <_svfiprintf_r+0x1f8>)
 800b03a:	a904      	add	r1, sp, #16
 800b03c:	4638      	mov	r0, r7
 800b03e:	f7fb fedb 	bl	8006df8 <_printf_float>
 800b042:	1c42      	adds	r2, r0, #1
 800b044:	4606      	mov	r6, r0
 800b046:	d1d6      	bne.n	800aff6 <_svfiprintf_r+0x176>
 800b048:	89ab      	ldrh	r3, [r5, #12]
 800b04a:	065b      	lsls	r3, r3, #25
 800b04c:	f53f af2c 	bmi.w	800aea8 <_svfiprintf_r+0x28>
 800b050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b052:	b01d      	add	sp, #116	; 0x74
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	462a      	mov	r2, r5
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <_svfiprintf_r+0x1f8>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4638      	mov	r0, r7
 800b064:	f7fc f96c 	bl	8007340 <_printf_i>
 800b068:	e7eb      	b.n	800b042 <_svfiprintf_r+0x1c2>
 800b06a:	bf00      	nop
 800b06c:	0800bbcc 	.word	0x0800bbcc
 800b070:	0800bbd6 	.word	0x0800bbd6
 800b074:	08006df9 	.word	0x08006df9
 800b078:	0800adc9 	.word	0x0800adc9
 800b07c:	0800bbd2 	.word	0x0800bbd2

0800b080 <__sfputc_r>:
 800b080:	6893      	ldr	r3, [r2, #8]
 800b082:	3b01      	subs	r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	b410      	push	{r4}
 800b088:	6093      	str	r3, [r2, #8]
 800b08a:	da08      	bge.n	800b09e <__sfputc_r+0x1e>
 800b08c:	6994      	ldr	r4, [r2, #24]
 800b08e:	42a3      	cmp	r3, r4
 800b090:	db01      	blt.n	800b096 <__sfputc_r+0x16>
 800b092:	290a      	cmp	r1, #10
 800b094:	d103      	bne.n	800b09e <__sfputc_r+0x1e>
 800b096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09a:	f7fd bbe9 	b.w	8008870 <__swbuf_r>
 800b09e:	6813      	ldr	r3, [r2, #0]
 800b0a0:	1c58      	adds	r0, r3, #1
 800b0a2:	6010      	str	r0, [r2, #0]
 800b0a4:	7019      	strb	r1, [r3, #0]
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <__sfputs_r>:
 800b0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	18d5      	adds	r5, r2, r3
 800b0b8:	42ac      	cmp	r4, r5
 800b0ba:	d101      	bne.n	800b0c0 <__sfputs_r+0x12>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e007      	b.n	800b0d0 <__sfputs_r+0x22>
 800b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c4:	463a      	mov	r2, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ffda 	bl	800b080 <__sfputc_r>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d1f3      	bne.n	800b0b8 <__sfputs_r+0xa>
 800b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0d4 <_vfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	460d      	mov	r5, r1
 800b0da:	b09d      	sub	sp, #116	; 0x74
 800b0dc:	4614      	mov	r4, r2
 800b0de:	4698      	mov	r8, r3
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	b118      	cbz	r0, 800b0ec <_vfiprintf_r+0x18>
 800b0e4:	6983      	ldr	r3, [r0, #24]
 800b0e6:	b90b      	cbnz	r3, 800b0ec <_vfiprintf_r+0x18>
 800b0e8:	f7fe fc16 	bl	8009918 <__sinit>
 800b0ec:	4b89      	ldr	r3, [pc, #548]	; (800b314 <_vfiprintf_r+0x240>)
 800b0ee:	429d      	cmp	r5, r3
 800b0f0:	d11b      	bne.n	800b12a <_vfiprintf_r+0x56>
 800b0f2:	6875      	ldr	r5, [r6, #4]
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x32>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x32>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7ff f81a 	bl	800a13a <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x3c>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b9eb      	cbnz	r3, 800b14c <_vfiprintf_r+0x78>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f7fd fbfe 	bl	8008914 <__swsetup_r>
 800b118:	b1c0      	cbz	r0, 800b14c <_vfiprintf_r+0x78>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d50e      	bpl.n	800b13e <_vfiprintf_r+0x6a>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	; 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	4b7b      	ldr	r3, [pc, #492]	; (800b318 <_vfiprintf_r+0x244>)
 800b12c:	429d      	cmp	r5, r3
 800b12e:	d101      	bne.n	800b134 <_vfiprintf_r+0x60>
 800b130:	68b5      	ldr	r5, [r6, #8]
 800b132:	e7df      	b.n	800b0f4 <_vfiprintf_r+0x20>
 800b134:	4b79      	ldr	r3, [pc, #484]	; (800b31c <_vfiprintf_r+0x248>)
 800b136:	429d      	cmp	r5, r3
 800b138:	bf08      	it	eq
 800b13a:	68f5      	ldreq	r5, [r6, #12]
 800b13c:	e7da      	b.n	800b0f4 <_vfiprintf_r+0x20>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	0598      	lsls	r0, r3, #22
 800b142:	d4ed      	bmi.n	800b120 <_vfiprintf_r+0x4c>
 800b144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b146:	f7fe fff9 	bl	800a13c <__retarget_lock_release_recursive>
 800b14a:	e7e9      	b.n	800b120 <_vfiprintf_r+0x4c>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9309      	str	r3, [sp, #36]	; 0x24
 800b150:	2320      	movs	r3, #32
 800b152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b156:	f8cd 800c 	str.w	r8, [sp, #12]
 800b15a:	2330      	movs	r3, #48	; 0x30
 800b15c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b320 <_vfiprintf_r+0x24c>
 800b160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b164:	f04f 0901 	mov.w	r9, #1
 800b168:	4623      	mov	r3, r4
 800b16a:	469a      	mov	sl, r3
 800b16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b170:	b10a      	cbz	r2, 800b176 <_vfiprintf_r+0xa2>
 800b172:	2a25      	cmp	r2, #37	; 0x25
 800b174:	d1f9      	bne.n	800b16a <_vfiprintf_r+0x96>
 800b176:	ebba 0b04 	subs.w	fp, sl, r4
 800b17a:	d00b      	beq.n	800b194 <_vfiprintf_r+0xc0>
 800b17c:	465b      	mov	r3, fp
 800b17e:	4622      	mov	r2, r4
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff93 	bl	800b0ae <__sfputs_r>
 800b188:	3001      	adds	r0, #1
 800b18a:	f000 80aa 	beq.w	800b2e2 <_vfiprintf_r+0x20e>
 800b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b190:	445a      	add	r2, fp
 800b192:	9209      	str	r2, [sp, #36]	; 0x24
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80a2 	beq.w	800b2e2 <_vfiprintf_r+0x20e>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a8:	f10a 0a01 	add.w	sl, sl, #1
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b6:	4654      	mov	r4, sl
 800b1b8:	2205      	movs	r2, #5
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	4858      	ldr	r0, [pc, #352]	; (800b320 <_vfiprintf_r+0x24c>)
 800b1c0:	f7f5 f80e 	bl	80001e0 <memchr>
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	b9d8      	cbnz	r0, 800b200 <_vfiprintf_r+0x12c>
 800b1c8:	06d1      	lsls	r1, r2, #27
 800b1ca:	bf44      	itt	mi
 800b1cc:	2320      	movmi	r3, #32
 800b1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d2:	0713      	lsls	r3, r2, #28
 800b1d4:	bf44      	itt	mi
 800b1d6:	232b      	movmi	r3, #43	; 0x2b
 800b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e2:	d015      	beq.n	800b210 <_vfiprintf_r+0x13c>
 800b1e4:	9a07      	ldr	r2, [sp, #28]
 800b1e6:	4654      	mov	r4, sl
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f04f 0c0a 	mov.w	ip, #10
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f4:	3b30      	subs	r3, #48	; 0x30
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d94e      	bls.n	800b298 <_vfiprintf_r+0x1c4>
 800b1fa:	b1b0      	cbz	r0, 800b22a <_vfiprintf_r+0x156>
 800b1fc:	9207      	str	r2, [sp, #28]
 800b1fe:	e014      	b.n	800b22a <_vfiprintf_r+0x156>
 800b200:	eba0 0308 	sub.w	r3, r0, r8
 800b204:	fa09 f303 	lsl.w	r3, r9, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	46a2      	mov	sl, r4
 800b20e:	e7d2      	b.n	800b1b6 <_vfiprintf_r+0xe2>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d19      	adds	r1, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbb      	ittet	lt
 800b21c:	425b      	neglt	r3, r3
 800b21e:	f042 0202 	orrlt.w	r2, r2, #2
 800b222:	9307      	strge	r3, [sp, #28]
 800b224:	9307      	strlt	r3, [sp, #28]
 800b226:	bfb8      	it	lt
 800b228:	9204      	strlt	r2, [sp, #16]
 800b22a:	7823      	ldrb	r3, [r4, #0]
 800b22c:	2b2e      	cmp	r3, #46	; 0x2e
 800b22e:	d10c      	bne.n	800b24a <_vfiprintf_r+0x176>
 800b230:	7863      	ldrb	r3, [r4, #1]
 800b232:	2b2a      	cmp	r3, #42	; 0x2a
 800b234:	d135      	bne.n	800b2a2 <_vfiprintf_r+0x1ce>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	9203      	str	r2, [sp, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bfb8      	it	lt
 800b242:	f04f 33ff 	movlt.w	r3, #4294967295
 800b246:	3402      	adds	r4, #2
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b330 <_vfiprintf_r+0x25c>
 800b24e:	7821      	ldrb	r1, [r4, #0]
 800b250:	2203      	movs	r2, #3
 800b252:	4650      	mov	r0, sl
 800b254:	f7f4 ffc4 	bl	80001e0 <memchr>
 800b258:	b140      	cbz	r0, 800b26c <_vfiprintf_r+0x198>
 800b25a:	2340      	movs	r3, #64	; 0x40
 800b25c:	eba0 000a 	sub.w	r0, r0, sl
 800b260:	fa03 f000 	lsl.w	r0, r3, r0
 800b264:	9b04      	ldr	r3, [sp, #16]
 800b266:	4303      	orrs	r3, r0
 800b268:	3401      	adds	r4, #1
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b270:	482c      	ldr	r0, [pc, #176]	; (800b324 <_vfiprintf_r+0x250>)
 800b272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b276:	2206      	movs	r2, #6
 800b278:	f7f4 ffb2 	bl	80001e0 <memchr>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d03f      	beq.n	800b300 <_vfiprintf_r+0x22c>
 800b280:	4b29      	ldr	r3, [pc, #164]	; (800b328 <_vfiprintf_r+0x254>)
 800b282:	bb1b      	cbnz	r3, 800b2cc <_vfiprintf_r+0x1f8>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	3307      	adds	r3, #7
 800b288:	f023 0307 	bic.w	r3, r3, #7
 800b28c:	3308      	adds	r3, #8
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b292:	443b      	add	r3, r7
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	e767      	b.n	800b168 <_vfiprintf_r+0x94>
 800b298:	fb0c 3202 	mla	r2, ip, r2, r3
 800b29c:	460c      	mov	r4, r1
 800b29e:	2001      	movs	r0, #1
 800b2a0:	e7a5      	b.n	800b1ee <_vfiprintf_r+0x11a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	3401      	adds	r4, #1
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f04f 0c0a 	mov.w	ip, #10
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b4:	3a30      	subs	r2, #48	; 0x30
 800b2b6:	2a09      	cmp	r2, #9
 800b2b8:	d903      	bls.n	800b2c2 <_vfiprintf_r+0x1ee>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0c5      	beq.n	800b24a <_vfiprintf_r+0x176>
 800b2be:	9105      	str	r1, [sp, #20]
 800b2c0:	e7c3      	b.n	800b24a <_vfiprintf_r+0x176>
 800b2c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e7f0      	b.n	800b2ae <_vfiprintf_r+0x1da>
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4b16      	ldr	r3, [pc, #88]	; (800b32c <_vfiprintf_r+0x258>)
 800b2d4:	a904      	add	r1, sp, #16
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f7fb fd8e 	bl	8006df8 <_printf_float>
 800b2dc:	4607      	mov	r7, r0
 800b2de:	1c78      	adds	r0, r7, #1
 800b2e0:	d1d6      	bne.n	800b290 <_vfiprintf_r+0x1bc>
 800b2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2e4:	07d9      	lsls	r1, r3, #31
 800b2e6:	d405      	bmi.n	800b2f4 <_vfiprintf_r+0x220>
 800b2e8:	89ab      	ldrh	r3, [r5, #12]
 800b2ea:	059a      	lsls	r2, r3, #22
 800b2ec:	d402      	bmi.n	800b2f4 <_vfiprintf_r+0x220>
 800b2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2f0:	f7fe ff24 	bl	800a13c <__retarget_lock_release_recursive>
 800b2f4:	89ab      	ldrh	r3, [r5, #12]
 800b2f6:	065b      	lsls	r3, r3, #25
 800b2f8:	f53f af12 	bmi.w	800b120 <_vfiprintf_r+0x4c>
 800b2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2fe:	e711      	b.n	800b124 <_vfiprintf_r+0x50>
 800b300:	ab03      	add	r3, sp, #12
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	462a      	mov	r2, r5
 800b306:	4b09      	ldr	r3, [pc, #36]	; (800b32c <_vfiprintf_r+0x258>)
 800b308:	a904      	add	r1, sp, #16
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7fc f818 	bl	8007340 <_printf_i>
 800b310:	e7e4      	b.n	800b2dc <_vfiprintf_r+0x208>
 800b312:	bf00      	nop
 800b314:	0800b9b4 	.word	0x0800b9b4
 800b318:	0800b9d4 	.word	0x0800b9d4
 800b31c:	0800b994 	.word	0x0800b994
 800b320:	0800bbcc 	.word	0x0800bbcc
 800b324:	0800bbd6 	.word	0x0800bbd6
 800b328:	08006df9 	.word	0x08006df9
 800b32c:	0800b0af 	.word	0x0800b0af
 800b330:	0800bbd2 	.word	0x0800bbd2
 800b334:	00000000 	.word	0x00000000

0800b338 <nan>:
 800b338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b340 <nan+0x8>
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	00000000 	.word	0x00000000
 800b344:	7ff80000 	.word	0x7ff80000

0800b348 <_sbrk_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d06      	ldr	r5, [pc, #24]	; (800b364 <_sbrk_r+0x1c>)
 800b34c:	2300      	movs	r3, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	602b      	str	r3, [r5, #0]
 800b354:	f7f6 f98e 	bl	8001674 <_sbrk>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_sbrk_r+0x1a>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_sbrk_r+0x1a>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20000428 	.word	0x20000428

0800b368 <__sread>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	460c      	mov	r4, r1
 800b36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b370:	f000 f93a 	bl	800b5e8 <_read_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	bfab      	itete	ge
 800b378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b37a:	89a3      	ldrhlt	r3, [r4, #12]
 800b37c:	181b      	addge	r3, r3, r0
 800b37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b382:	bfac      	ite	ge
 800b384:	6563      	strge	r3, [r4, #84]	; 0x54
 800b386:	81a3      	strhlt	r3, [r4, #12]
 800b388:	bd10      	pop	{r4, pc}

0800b38a <__swrite>:
 800b38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38e:	461f      	mov	r7, r3
 800b390:	898b      	ldrh	r3, [r1, #12]
 800b392:	05db      	lsls	r3, r3, #23
 800b394:	4605      	mov	r5, r0
 800b396:	460c      	mov	r4, r1
 800b398:	4616      	mov	r6, r2
 800b39a:	d505      	bpl.n	800b3a8 <__swrite+0x1e>
 800b39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f000 f8b8 	bl	800b518 <_lseek_r>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3be:	f000 b837 	b.w	800b430 <_write_r>

0800b3c2 <__sseek>:
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ca:	f000 f8a5 	bl	800b518 <_lseek_r>
 800b3ce:	1c43      	adds	r3, r0, #1
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	bf15      	itete	ne
 800b3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3de:	81a3      	strheq	r3, [r4, #12]
 800b3e0:	bf18      	it	ne
 800b3e2:	81a3      	strhne	r3, [r4, #12]
 800b3e4:	bd10      	pop	{r4, pc}

0800b3e6 <__sclose>:
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 b851 	b.w	800b490 <_close_r>

0800b3ee <strncmp>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	b17a      	cbz	r2, 800b412 <strncmp+0x24>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	3901      	subs	r1, #1
 800b3f6:	1884      	adds	r4, r0, r2
 800b3f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b400:	4290      	cmp	r0, r2
 800b402:	d101      	bne.n	800b408 <strncmp+0x1a>
 800b404:	42a3      	cmp	r3, r4
 800b406:	d101      	bne.n	800b40c <strncmp+0x1e>
 800b408:	1a80      	subs	r0, r0, r2
 800b40a:	bd10      	pop	{r4, pc}
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1f3      	bne.n	800b3f8 <strncmp+0xa>
 800b410:	e7fa      	b.n	800b408 <strncmp+0x1a>
 800b412:	4610      	mov	r0, r2
 800b414:	e7f9      	b.n	800b40a <strncmp+0x1c>

0800b416 <__ascii_wctomb>:
 800b416:	b149      	cbz	r1, 800b42c <__ascii_wctomb+0x16>
 800b418:	2aff      	cmp	r2, #255	; 0xff
 800b41a:	bf85      	ittet	hi
 800b41c:	238a      	movhi	r3, #138	; 0x8a
 800b41e:	6003      	strhi	r3, [r0, #0]
 800b420:	700a      	strbls	r2, [r1, #0]
 800b422:	f04f 30ff 	movhi.w	r0, #4294967295
 800b426:	bf98      	it	ls
 800b428:	2001      	movls	r0, #1
 800b42a:	4770      	bx	lr
 800b42c:	4608      	mov	r0, r1
 800b42e:	4770      	bx	lr

0800b430 <_write_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	; (800b450 <_write_r+0x20>)
 800b434:	4604      	mov	r4, r0
 800b436:	4608      	mov	r0, r1
 800b438:	4611      	mov	r1, r2
 800b43a:	2200      	movs	r2, #0
 800b43c:	602a      	str	r2, [r5, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	f7f5 fdf0 	bl	8001024 <_write>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_write_r+0x1e>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_write_r+0x1e>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20000428 	.word	0x20000428

0800b454 <__assert_func>:
 800b454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b456:	4614      	mov	r4, r2
 800b458:	461a      	mov	r2, r3
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <__assert_func+0x2c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4605      	mov	r5, r0
 800b460:	68d8      	ldr	r0, [r3, #12]
 800b462:	b14c      	cbz	r4, 800b478 <__assert_func+0x24>
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <__assert_func+0x30>)
 800b466:	9100      	str	r1, [sp, #0]
 800b468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b46c:	4906      	ldr	r1, [pc, #24]	; (800b488 <__assert_func+0x34>)
 800b46e:	462b      	mov	r3, r5
 800b470:	f000 f81e 	bl	800b4b0 <fiprintf>
 800b474:	f000 f8ca 	bl	800b60c <abort>
 800b478:	4b04      	ldr	r3, [pc, #16]	; (800b48c <__assert_func+0x38>)
 800b47a:	461c      	mov	r4, r3
 800b47c:	e7f3      	b.n	800b466 <__assert_func+0x12>
 800b47e:	bf00      	nop
 800b480:	2000000c 	.word	0x2000000c
 800b484:	0800bbdd 	.word	0x0800bbdd
 800b488:	0800bbea 	.word	0x0800bbea
 800b48c:	0800bc18 	.word	0x0800bc18

0800b490 <_close_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	; (800b4ac <_close_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f6 f8b5 	bl	800160a <_close>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_close_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_close_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20000428 	.word	0x20000428

0800b4b0 <fiprintf>:
 800b4b0:	b40e      	push	{r1, r2, r3}
 800b4b2:	b503      	push	{r0, r1, lr}
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	ab03      	add	r3, sp, #12
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <fiprintf+0x20>)
 800b4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	f7ff fe07 	bl	800b0d4 <_vfiprintf_r>
 800b4c6:	b002      	add	sp, #8
 800b4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4cc:	b003      	add	sp, #12
 800b4ce:	4770      	bx	lr
 800b4d0:	2000000c 	.word	0x2000000c

0800b4d4 <_fstat_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	; (800b4f4 <_fstat_r+0x20>)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4608      	mov	r0, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	602b      	str	r3, [r5, #0]
 800b4e2:	f7f6 f89e 	bl	8001622 <_fstat>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d102      	bne.n	800b4f0 <_fstat_r+0x1c>
 800b4ea:	682b      	ldr	r3, [r5, #0]
 800b4ec:	b103      	cbz	r3, 800b4f0 <_fstat_r+0x1c>
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000428 	.word	0x20000428

0800b4f8 <_isatty_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d06      	ldr	r5, [pc, #24]	; (800b514 <_isatty_r+0x1c>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	602b      	str	r3, [r5, #0]
 800b504:	f7f6 f89d 	bl	8001642 <_isatty>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_isatty_r+0x1a>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_isatty_r+0x1a>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000428 	.word	0x20000428

0800b518 <_lseek_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d07      	ldr	r5, [pc, #28]	; (800b538 <_lseek_r+0x20>)
 800b51c:	4604      	mov	r4, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	4611      	mov	r1, r2
 800b522:	2200      	movs	r2, #0
 800b524:	602a      	str	r2, [r5, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	f7f6 f896 	bl	8001658 <_lseek>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_lseek_r+0x1e>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_lseek_r+0x1e>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000428 	.word	0x20000428

0800b53c <memmove>:
 800b53c:	4288      	cmp	r0, r1
 800b53e:	b510      	push	{r4, lr}
 800b540:	eb01 0402 	add.w	r4, r1, r2
 800b544:	d902      	bls.n	800b54c <memmove+0x10>
 800b546:	4284      	cmp	r4, r0
 800b548:	4623      	mov	r3, r4
 800b54a:	d807      	bhi.n	800b55c <memmove+0x20>
 800b54c:	1e43      	subs	r3, r0, #1
 800b54e:	42a1      	cmp	r1, r4
 800b550:	d008      	beq.n	800b564 <memmove+0x28>
 800b552:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b55a:	e7f8      	b.n	800b54e <memmove+0x12>
 800b55c:	4402      	add	r2, r0
 800b55e:	4601      	mov	r1, r0
 800b560:	428a      	cmp	r2, r1
 800b562:	d100      	bne.n	800b566 <memmove+0x2a>
 800b564:	bd10      	pop	{r4, pc}
 800b566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b56a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b56e:	e7f7      	b.n	800b560 <memmove+0x24>

0800b570 <__malloc_lock>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__malloc_lock+0x8>)
 800b572:	f7fe bde2 	b.w	800a13a <__retarget_lock_acquire_recursive>
 800b576:	bf00      	nop
 800b578:	2000041c 	.word	0x2000041c

0800b57c <__malloc_unlock>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__malloc_unlock+0x8>)
 800b57e:	f7fe bddd 	b.w	800a13c <__retarget_lock_release_recursive>
 800b582:	bf00      	nop
 800b584:	2000041c 	.word	0x2000041c

0800b588 <_realloc_r>:
 800b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	4680      	mov	r8, r0
 800b58e:	4614      	mov	r4, r2
 800b590:	460e      	mov	r6, r1
 800b592:	b921      	cbnz	r1, 800b59e <_realloc_r+0x16>
 800b594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	4611      	mov	r1, r2
 800b59a:	f7ff bba1 	b.w	800ace0 <_malloc_r>
 800b59e:	b92a      	cbnz	r2, 800b5ac <_realloc_r+0x24>
 800b5a0:	f7ff fb32 	bl	800ac08 <_free_r>
 800b5a4:	4625      	mov	r5, r4
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	f000 f835 	bl	800b61a <_malloc_usable_size_r>
 800b5b0:	4284      	cmp	r4, r0
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	d802      	bhi.n	800b5bc <_realloc_r+0x34>
 800b5b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5ba:	d812      	bhi.n	800b5e2 <_realloc_r+0x5a>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7ff fb8e 	bl	800ace0 <_malloc_r>
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d0ed      	beq.n	800b5a6 <_realloc_r+0x1e>
 800b5ca:	42bc      	cmp	r4, r7
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	bf28      	it	cs
 800b5d2:	463a      	movcs	r2, r7
 800b5d4:	f7fe fe32 	bl	800a23c <memcpy>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4640      	mov	r0, r8
 800b5dc:	f7ff fb14 	bl	800ac08 <_free_r>
 800b5e0:	e7e1      	b.n	800b5a6 <_realloc_r+0x1e>
 800b5e2:	4635      	mov	r5, r6
 800b5e4:	e7df      	b.n	800b5a6 <_realloc_r+0x1e>
	...

0800b5e8 <_read_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	; (800b608 <_read_r+0x20>)
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	602a      	str	r2, [r5, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f7f5 ffea 	bl	80015d0 <_read>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_read_r+0x1e>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_read_r+0x1e>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	20000428 	.word	0x20000428

0800b60c <abort>:
 800b60c:	b508      	push	{r3, lr}
 800b60e:	2006      	movs	r0, #6
 800b610:	f000 f834 	bl	800b67c <raise>
 800b614:	2001      	movs	r0, #1
 800b616:	f7f5 ffd1 	bl	80015bc <_exit>

0800b61a <_malloc_usable_size_r>:
 800b61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b61e:	1f18      	subs	r0, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	bfbc      	itt	lt
 800b624:	580b      	ldrlt	r3, [r1, r0]
 800b626:	18c0      	addlt	r0, r0, r3
 800b628:	4770      	bx	lr

0800b62a <_raise_r>:
 800b62a:	291f      	cmp	r1, #31
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4604      	mov	r4, r0
 800b630:	460d      	mov	r5, r1
 800b632:	d904      	bls.n	800b63e <_raise_r+0x14>
 800b634:	2316      	movs	r3, #22
 800b636:	6003      	str	r3, [r0, #0]
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b640:	b112      	cbz	r2, 800b648 <_raise_r+0x1e>
 800b642:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b646:	b94b      	cbnz	r3, 800b65c <_raise_r+0x32>
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 f831 	bl	800b6b0 <_getpid_r>
 800b64e:	462a      	mov	r2, r5
 800b650:	4601      	mov	r1, r0
 800b652:	4620      	mov	r0, r4
 800b654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b658:	f000 b818 	b.w	800b68c <_kill_r>
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d00a      	beq.n	800b676 <_raise_r+0x4c>
 800b660:	1c59      	adds	r1, r3, #1
 800b662:	d103      	bne.n	800b66c <_raise_r+0x42>
 800b664:	2316      	movs	r3, #22
 800b666:	6003      	str	r3, [r0, #0]
 800b668:	2001      	movs	r0, #1
 800b66a:	e7e7      	b.n	800b63c <_raise_r+0x12>
 800b66c:	2400      	movs	r4, #0
 800b66e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b672:	4628      	mov	r0, r5
 800b674:	4798      	blx	r3
 800b676:	2000      	movs	r0, #0
 800b678:	e7e0      	b.n	800b63c <_raise_r+0x12>
	...

0800b67c <raise>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <raise+0xc>)
 800b67e:	4601      	mov	r1, r0
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	f7ff bfd2 	b.w	800b62a <_raise_r>
 800b686:	bf00      	nop
 800b688:	2000000c 	.word	0x2000000c

0800b68c <_kill_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	; (800b6ac <_kill_r+0x20>)
 800b690:	2300      	movs	r3, #0
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	f7f5 ff7f 	bl	800159c <_kill>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d102      	bne.n	800b6a8 <_kill_r+0x1c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	b103      	cbz	r3, 800b6a8 <_kill_r+0x1c>
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	bd38      	pop	{r3, r4, r5, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000428 	.word	0x20000428

0800b6b0 <_getpid_r>:
 800b6b0:	f7f5 bf6c 	b.w	800158c <_getpid>

0800b6b4 <_init>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr

0800b6c0 <_fini>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	bf00      	nop
 800b6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c6:	bc08      	pop	{r3}
 800b6c8:	469e      	mov	lr, r3
 800b6ca:	4770      	bx	lr
