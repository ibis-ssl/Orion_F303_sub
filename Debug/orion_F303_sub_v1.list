
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800c180  0800c180  0001c180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6cc  0800c6cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6cc  0800c6cc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6cc  0800c6cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6cc  0800c6cc  0001c6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000029c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001531e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003023  00000000  00000000  0003552e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00038558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e54  00000000  00000000  0003a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b37  00000000  00000000  0005b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3f64  00000000  00000000  0007300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136f6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d64  00000000  00000000  00136fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c164 	.word	0x0800c164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c164 	.word	0x0800c164

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC4_Init>:

ADC_HandleTypeDef hadc4;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <MX_ADC4_Init+0xb8>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d52:	2204      	movs	r2, #4
 8000d54:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d64:	f000 ffac 	bl	8001cc0 <HAL_ADC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000d6e:	f000 fbbf 	bl	80014f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d72:	2303      	movs	r3, #3
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_ADC4_Init+0xb4>)
 8000d90:	f001 f976 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000d9a:	f000 fba9 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001fc 	.word	0x200001fc
 8000dac:	50000500 	.word	0x50000500

08000db0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC4)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x74>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d124      	bne.n	8000e1c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* ADC4 clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_ADC_MspInit+0x78>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB12     ------> ADC4_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_ADC_MspInit+0x7c>)
 8000e18:	f002 fd30 	bl	800387c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	50000500 	.word	0x50000500
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_CAN_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e52:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e56:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000e5a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_CAN_Init+0x64>)
 8000e82:	f001 fc4f 	bl	8002724 <HAL_CAN_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 fb30 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000024c 	.word	0x2000024c
 8000e98:	40006400 	.word	0x40006400

08000e9c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <HAL_CAN_MspInit+0xa0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d139      	bne.n	8000f32 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_CAN_MspInit+0xa4>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f00:	2309      	movs	r3, #9
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f002 fcb5 	bl	800387c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2013      	movs	r0, #19
 8000f18:	f002 fa4f 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000f1c:	2013      	movs	r0, #19
 8000f1e:	f002 fa68 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2014      	movs	r0, #20
 8000f28:	f002 fa47 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000f2c:	2014      	movs	r0, #20
 8000f2e:	f002 fa60 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40006400 	.word	0x40006400
 8000f40:	40021000 	.word	0x40021000

08000f44 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x104) << 5;
 8000f56:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000f5a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x105) << 5;
 8000f5c:	f242 03a0 	movw	r3, #8352	; 0x20a0
 8000f60:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;
 8000f68:	f242 0320 	movw	r3, #8224	; 0x2020
 8000f6c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000f72:	2301      	movs	r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <CAN_Filter_Init+0x64>)
 8000f80:	f001 fccb 	bl	800291a <HAL_CAN_ConfigFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <CAN_Filter_Init+0x4a>
  {
    Error_Handler();
 8000f8a:	f000 fab1 	bl	80014f0 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <CAN_Filter_Init+0x64>)
 8000f92:	f001 fee2 	bl	8002d5a <HAL_CAN_ActivateNotification>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <CAN_Filter_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 faa8 	bl	80014f0 <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000024c 	.word	0x2000024c

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200e      	movs	r0, #14
 8000fd0:	f002 f9f3 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fd4:	200e      	movs	r0, #14
 8000fd6:	f002 fa0c 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a35      	ldr	r2, [pc, #212]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_GPIO_Init+0xf0>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <MX_GPIO_Init+0xf0>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_GPIO_Init+0xf0>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8001046:	2200      	movs	r2, #0
 8001048:	21f8      	movs	r1, #248	; 0xf8
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f002 fd8f 	bl	8003b70 <HAL_GPIO_WritePin>
                          |LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <MX_GPIO_Init+0xf4>)
 800105a:	f002 fd89 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 800105e:	23f8      	movs	r3, #248	; 0xf8
 8001060:	60fb      	str	r3, [r7, #12]
                          |LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f002 fc00 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin;
 800107c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <MX_GPIO_Init+0xf4>)
 8001096:	f002 fbf1 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_0_Pin;
 800109a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800109e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_0_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_GPIO_Init+0xf4>)
 80010b0:	f002 fbe4 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 80010b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f002 fbd6 	bl	800387c <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <_write+0x24>)
 80010f6:	f005 f88b 	bl	8006210 <HAL_UART_Transmit_DMA>
	return len;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000031c 	.word	0x2000031c

08001108 <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0};
volatile bool uart_rx_flag = false,uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0,uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <HAL_UART_RxCpltCallback+0x5c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_UART_RxCpltCallback+0x2e>
		uart_rx_flag = true;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_UART_RxCpltCallback+0x60>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
		uart_rx_cnt++;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_UART_RxCpltCallback+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_UART_RxCpltCallback+0x64>)
 8001128:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	4910      	ldr	r1, [pc, #64]	; (8001170 <HAL_UART_RxCpltCallback+0x68>)
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <HAL_UART_RxCpltCallback+0x6c>)
 8001130:	f005 f820 	bl	8006174 <HAL_UART_Receive_IT>
	}else if(huart->Instance == USART3){
		uart3_rx_flag = true;
		uart3_rx_cnt++;
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
	}
}
 8001134:	e011      	b.n	800115a <HAL_UART_RxCpltCallback+0x52>
	}else if(huart->Instance == USART3){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <HAL_UART_RxCpltCallback+0x70>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d10c      	bne.n	800115a <HAL_UART_RxCpltCallback+0x52>
		uart3_rx_flag = true;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_RxCpltCallback+0x74>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
		uart3_rx_cnt++;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_UART_RxCpltCallback+0x78>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_UART_RxCpltCallback+0x78>)
 800114e:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	490c      	ldr	r1, [pc, #48]	; (8001184 <HAL_UART_RxCpltCallback+0x7c>)
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x80>)
 8001156:	f005 f80d 	bl	8006174 <HAL_UART_Receive_IT>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013800 	.word	0x40013800
 8001168:	2000028a 	.word	0x2000028a
 800116c:	2000028c 	.word	0x2000028c
 8001170:	20000274 	.word	0x20000274
 8001174:	2000031c 	.word	0x2000031c
 8001178:	40004800 	.word	0x40004800
 800117c:	2000028b 	.word	0x2000028b
 8001180:	20000290 	.word	0x20000290
 8001184:	20000280 	.word	0x20000280
 8001188:	200003a0 	.word	0x200003a0

0800118c <HAL_CAN_RxFifo0MsgPendingCallback>:
int servo_timeout_cnt = 0,dribbler_timeout_cnt = 0;
uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001196:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001198:	2100      	movs	r1, #0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f001 fccb 	bl	8002b36 <HAL_CAN_GetRxMessage>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 80011a6:	f000 f9a3 	bl	80014f0 <Error_Handler>
	}

	can_rx_cnt++;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011b2:	6013      	str	r3, [r2, #0]
	switch (can_rx_header.StdId)
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011bc:	d020      	beq.n	8001200 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 80011be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011c2:	d81f      	bhi.n	8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80011c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011c8:	d004      	beq.n	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 80011ca:	f240 1205 	movw	r2, #261	; 0x105
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00e      	beq.n	80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>


	case 0x300:
		break;
	default:
		break;
 80011d2:	e017      	b.n	8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		dribbler_timeout_cnt = 0;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		dribbler_speed = can_rx_buf.speed/100;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001220 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 80011e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]
		break;
 80011ee:	e00a      	b.n	8001206 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		servo_timeout_cnt = 0;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
		serv_angle = can_rx_buf.speed;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80011fc:	6013      	str	r3, [r2, #0]
		break;
 80011fe:	e002      	b.n	8001206 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		break;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		break;
 8001204:	bf00      	nop
	}
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200002a8 	.word	0x200002a8
 8001214:	200002b0 	.word	0x200002b0
 8001218:	200002a4 	.word	0x200002a4
 800121c:	200002a0 	.word	0x200002a0
 8001220:	42c80000 	.word	0x42c80000
 8001224:	20000298 	.word	0x20000298
 8001228:	2000029c 	.word	0x2000029c
 800122c:	20000294 	.word	0x20000294

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fcb9 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f8f9 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f7ff fed3 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001242:	f7ff feb3 	bl	8000fac <MX_DMA_Init>
  MX_CAN_Init();
 8001246:	f7ff fdf3 	bl	8000e30 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800124a:	f000 fb51 	bl	80018f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800124e:	f000 fb7f 	bl	8001950 <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8001252:	f7ff fd4f 	bl	8000cf4 <MX_ADC4_Init>
  MX_TIM3_Init();
 8001256:	f000 fa8d 	bl	8001774 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0317!!\n");
 800125a:	4864      	ldr	r0, [pc, #400]	; (80013ec <main+0x1bc>)
 800125c:	f007 f986 	bl	800856c <puts>
	HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	4963      	ldr	r1, [pc, #396]	; (80013f0 <main+0x1c0>)
 8001264:	4863      	ldr	r0, [pc, #396]	; (80013f4 <main+0x1c4>)
 8001266:	f004 ff85 	bl	8006174 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	4962      	ldr	r1, [pc, #392]	; (80013f8 <main+0x1c8>)
 800126e:	4863      	ldr	r0, [pc, #396]	; (80013fc <main+0x1cc>)
 8001270:	f004 ff80 	bl	8006174 <HAL_UART_Receive_IT>
	CAN_Filter_Init();
 8001274:	f7ff fe66 	bl	8000f44 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 8001278:	4861      	ldr	r0, [pc, #388]	; (8001400 <main+0x1d0>)
 800127a:	f001 fc18 	bl	8002aae <HAL_CAN_Start>

	HAL_TIM_PWM_Init(&htim3);
 800127e:	4861      	ldr	r0, [pc, #388]	; (8001404 <main+0x1d4>)
 8001280:	f004 f8b2 	bl	80053e8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001284:	2108      	movs	r1, #8
 8001286:	485f      	ldr	r0, [pc, #380]	; (8001404 <main+0x1d4>)
 8001288:	f004 f906 	bl	8005498 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800128c:	210c      	movs	r1, #12
 800128e:	485d      	ldr	r0, [pc, #372]	; (8001404 <main+0x1d4>)
 8001290:	f004 f902 	bl	8005498 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR3 = 0;
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <main+0x1d4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 0;
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <main+0x1d4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
	servo_timeout_cnt = 0;
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <main+0x1d8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
	dribbler_timeout_cnt = 0;
 80012aa:	4b58      	ldr	r3, [pc, #352]	; (800140c <main+0x1dc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

	uint32_t print_interval = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_Delay(10);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 fcdf 	bl	8001c78 <HAL_Delay>
		print_interval++;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
		if(print_interval >= 10){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b09      	cmp	r3, #9
 80012c4:	d9f6      	bls.n	80012b4 <main+0x84>
			print_interval = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
			printf("can rx %3ld uart rx %4d %4d dribbler %6.3f servo %6.3f timeout %4ld %4ld\n",can_rx_cnt,uart_rx_cnt,uart3_rx_cnt,dribbler_speed,serv_angle,dribbler_timeout_cnt,servo_timeout_cnt);
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <main+0x1e0>)
 80012cc:	681e      	ldr	r6, [r3, #0]
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <main+0x1e4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <main+0x1e8>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	4b50      	ldr	r3, [pc, #320]	; (800141c <main+0x1ec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f932 	bl	8000548 <__aeabi_f2d>
 80012e4:	4604      	mov	r4, r0
 80012e6:	460d      	mov	r5, r1
 80012e8:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <main+0x1f0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4945      	ldr	r1, [pc, #276]	; (800140c <main+0x1dc>)
 80012f8:	6809      	ldr	r1, [r1, #0]
 80012fa:	4843      	ldr	r0, [pc, #268]	; (8001408 <main+0x1d8>)
 80012fc:	6800      	ldr	r0, [r0, #0]
 80012fe:	9005      	str	r0, [sp, #20]
 8001300:	9104      	str	r1, [sp, #16]
 8001302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001306:	e9cd 4500 	strd	r4, r5, [sp]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4631      	mov	r1, r6
 8001310:	4844      	ldr	r0, [pc, #272]	; (8001424 <main+0x1f4>)
 8001312:	f007 f8a5 	bl	8008460 <iprintf>


			// TEL (LED0,PA3)
			if(uart3_rx_cnt > 0){
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <main+0x1e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <main+0xfc>
			      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f002 fc23 	bl	8003b70 <HAL_GPIO_WritePin>
 800132a:	e005      	b.n	8001338 <main+0x108>
			}else{

			      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2108      	movs	r1, #8
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f002 fc1c 	bl	8003b70 <HAL_GPIO_WritePin>
			}

			// RX (can rx,LED2,PA5)
			if(can_rx_cnt > 0){
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <main+0x1e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <main+0x11e>

			      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2120      	movs	r1, #32
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f002 fc12 	bl	8003b70 <HAL_GPIO_WritePin>
 800134c:	e005      	b.n	800135a <main+0x12a>
			}else{

			      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f002 fc0b 	bl	8003b70 <HAL_GPIO_WritePin>
			}
			can_rx_cnt = 0;
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <main+0x1e0>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
			uart_rx_cnt = 0;
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <main+0x1e4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <main+0x1e8>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

			htim3.Instance->CCR4 = 1500 + 600*dribbler_speed;	// pwm
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <main+0x1ec>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001428 <main+0x1f8>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800142c <main+0x1fc>
 800137e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <main+0x1d4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800138a:	ee17 2a90 	vmov	r2, s15
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
			htim3.Instance->CCR3 = 1500 + 600*serv_angle;	// servo
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <main+0x1f0>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001428 <main+0x1f8>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800142c <main+0x1fc>
 80013a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <main+0x1d4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
			dribbler_timeout_cnt++;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <main+0x1dc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <main+0x1dc>)
 80013bc:	6013      	str	r3, [r2, #0]
			servo_timeout_cnt++;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <main+0x1d8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a10      	ldr	r2, [pc, #64]	; (8001408 <main+0x1d8>)
 80013c6:	6013      	str	r3, [r2, #0]
			if(dribbler_timeout_cnt > 50){
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <main+0x1dc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b32      	cmp	r3, #50	; 0x32
 80013ce:	dd03      	ble.n	80013d8 <main+0x1a8>
				dribbler_speed = 0;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <main+0x1ec>)
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
			}
			if(servo_timeout_cnt > 50){
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <main+0x1d8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b32      	cmp	r3, #50	; 0x32
 80013de:	f77f af69 	ble.w	80012b4 <main+0x84>
				serv_angle = 0;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <main+0x1f0>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 80013ea:	e763      	b.n	80012b4 <main+0x84>
 80013ec:	0800c180 	.word	0x0800c180
 80013f0:	20000280 	.word	0x20000280
 80013f4:	200003a0 	.word	0x200003a0
 80013f8:	20000274 	.word	0x20000274
 80013fc:	2000031c 	.word	0x2000031c
 8001400:	2000024c 	.word	0x2000024c
 8001404:	200002d0 	.word	0x200002d0
 8001408:	2000029c 	.word	0x2000029c
 800140c:	200002a0 	.word	0x200002a0
 8001410:	200002a4 	.word	0x200002a4
 8001414:	2000028c 	.word	0x2000028c
 8001418:	20000290 	.word	0x20000290
 800141c:	20000298 	.word	0x20000298
 8001420:	20000294 	.word	0x20000294
 8001424:	0800c198 	.word	0x0800c198
 8001428:	44160000 	.word	0x44160000
 800142c:	44bb8000 	.word	0x44bb8000

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b09e      	sub	sp, #120	; 0x78
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f006 f98c 	bl	800775c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	223c      	movs	r2, #60	; 0x3c
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f006 f97e 	bl	800775c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001460:	2301      	movs	r3, #1
 8001462:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001468:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146e:	2301      	movs	r3, #1
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800147c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001480:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fb8a 	bl	8003ba0 <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001492:	f000 f82d 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001496:	230f      	movs	r3, #15
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149a:	2302      	movs	r3, #2
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b0:	2102      	movs	r1, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fbb2 	bl	8004c1c <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014be:	f000 f817 	bl	80014f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80014c2:	f240 1305 	movw	r3, #261	; 0x105
 80014c6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fdd5 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80014e4:	f000 f804 	bl	80014f0 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3778      	adds	r7, #120	; 0x78
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_MspInit+0x44>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_MspInit+0x44>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_MspInit+0x44>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x44>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x44>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x44>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 fb52 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA1_Channel4_IRQHandler+0x10>)
 800159e:	f002 f85f 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000424 	.word	0x20000424

080015ac <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <USB_HP_CAN_TX_IRQHandler+0x10>)
 80015b2:	f001 fbf8 	bl	8002da6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000024c 	.word	0x2000024c

080015c0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80015c6:	f001 fbee 	bl	8002da6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000024c 	.word	0x2000024c

080015d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART1_IRQHandler+0x10>)
 80015da:	f004 fea9 	bl	8006330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000031c 	.word	0x2000031c

080015e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART3_IRQHandler+0x10>)
 80015ee:	f004 fe9f 	bl	8006330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200003a0 	.word	0x200003a0

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_kill>:

int _kill(int pid, int sig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001616:	f006 f877 	bl	8007708 <__errno>
 800161a:	4603      	mov	r3, r0
 800161c:	2216      	movs	r2, #22
 800161e:	601a      	str	r2, [r3, #0]
	return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_kill>
	while (1) {}		/* Make sure we hang here */
 800163e:	e7fe      	b.n	800163e <_exit+0x12>

08001640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001652:	f3af 8000 	nop.w
 8001656:	4601      	mov	r1, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf0      	blt.n	8001652 <_read+0x12>
	}

return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_close>:
	}
	return len;
}

int _close(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return -1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	605a      	str	r2, [r3, #4]
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_isatty>:

int _isatty(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f005 fff8 	bl	8007708 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20008000 	.word	0x20008000
 8001744:	00000400 	.word	0x00000400
 8001748:	200002cc 	.word	0x200002cc
 800174c:	20000480 	.word	0x20000480

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_TIM3_Init+0xc4>)
 800179a:	4a28      	ldr	r2, [pc, #160]	; (800183c <MX_TIM3_Init+0xc8>)
 800179c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017a0:	2248      	movs	r2, #72	; 0x48
 80017a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017be:	481e      	ldr	r0, [pc, #120]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017c0:	f003 fe12 	bl	80053e8 <HAL_TIM_PWM_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017ca:	f7ff fe91 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <MX_TIM3_Init+0xc4>)
 80017de:	f004 fbfb 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017e8:	f7ff fe82 	bl	80014f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	2360      	movs	r3, #96	; 0x60
 80017ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 80017f0:	f643 2398 	movw	r3, #15000	; 0x3a98
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	2208      	movs	r2, #8
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_TIM3_Init+0xc4>)
 8001806:	f003 ff47 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001810:	f7ff fe6e 	bl	80014f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	220c      	movs	r2, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM3_Init+0xc4>)
 800181c:	f003 ff3c 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001826:	f7ff fe63 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM3_Init+0xc4>)
 800182c:	f000 f828 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002d0 	.word	0x200002d0
 800183c:	40000400 	.word	0x40000400

08001840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_TIM_PWM_MspInit+0x38>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10b      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_PWM_MspInit+0x3c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_TIM_PWM_MspInit+0x3c>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_TIM_PWM_MspInit+0x3c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40000400 	.word	0x40000400
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_TIM_MspPostInit+0x64>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d11b      	bne.n	80018da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ba:	2303      	movs	r3, #3
 80018bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_TIM_MspPostInit+0x6c>)
 80018d6:	f001 ffd1 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000400 	.word	0x48000400

080018f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_USART1_UART_Init+0x54>)
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <MX_USART1_UART_Init+0x58>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_USART1_UART_Init+0x54>)
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_USART1_UART_Init+0x5c>)
 80018fe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_USART1_UART_Init+0x54>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001914:	220c      	movs	r2, #12
 8001916:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_USART1_UART_Init+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART1_UART_Init+0x54>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_USART1_UART_Init+0x54>)
 8001932:	f004 fbd1 	bl	80060d8 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800193c:	f7ff fdd8 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000031c 	.word	0x2000031c
 8001948:	40013800 	.word	0x40013800
 800194c:	001e8480 	.word	0x001e8480

08001950 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <MX_USART3_UART_Init+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART3_UART_Init+0x58>)
 8001994:	f004 fba0 	bl	80060d8 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800199e:	f7ff fda7 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200003a0 	.word	0x200003a0
 80019ac:	40004800 	.word	0x40004800

080019b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_UART_MspInit+0x190>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d16a      	bne.n	8001aa8 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a5b      	ldr	r2, [pc, #364]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a55      	ldr	r2, [pc, #340]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_UART_MspInit+0x194>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a14:	2307      	movs	r3, #7
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f001 ff2b 	bl	800387c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f001 ff19 	bl	800387c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a4c:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <HAL_UART_MspInit+0x19c>)
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a52:	2210      	movs	r2, #16
 8001a54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a7a:	4833      	ldr	r0, [pc, #204]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a7c:	f001 fcd3 	bl	8003426 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001a86:	f7ff fd33 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a8e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a90:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_UART_MspInit+0x198>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2025      	movs	r0, #37	; 0x25
 8001a9c:	f001 fc8d 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa0:	2025      	movs	r0, #37	; 0x25
 8001aa2:	f001 fca6 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa6:	e046      	b.n	8001b36 <HAL_UART_MspInit+0x186>
  else if(uartHandle->Instance==USART3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_UART_MspInit+0x1a0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d141      	bne.n	8001b36 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_UART_MspInit+0x194>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001af4:	2307      	movs	r3, #7
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x1a4>)
 8001b00:	f001 febc 	bl	800387c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b16:	2307      	movs	r3, #7
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <HAL_UART_MspInit+0x1a4>)
 8001b22:	f001 feab 	bl	800387c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2027      	movs	r0, #39	; 0x27
 8001b2c:	f001 fc45 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b30:	2027      	movs	r0, #39	; 0x27
 8001b32:	f001 fc5e 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	20000424 	.word	0x20000424
 8001b4c:	40020044 	.word	0x40020044
 8001b50:	40004800 	.word	0x40004800
 8001b54:	48000400 	.word	0x48000400

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b82:	f7ff fde5 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f005 fdc5 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fb51 	bl	8001230 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b9c:	0800c6d4 	.word	0x0800c6d4
  ldr r2, =_sbss
 8001ba0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ba4:	2000047c 	.word	0x2000047c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x28>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x28>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f001 fbf1 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fc98 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 fc09 	bl	800340e <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f001 fbd1 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000468 	.word	0x20000468

08001c60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000468 	.word	0x20000468

08001c78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09a      	sub	sp, #104	; 0x68
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e1c9      	b.n	8002074 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d176      	bne.n	8001de0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d152      	bne.n	8001da0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff f84b 	bl	8000db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13b      	bne.n	8001da0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fc95 	bl	8002658 <ADC_Disable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d12f      	bne.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12b      	bne.n	8001da0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d6a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7c:	4b86      	ldr	r3, [pc, #536]	; (8001f98 <HAL_ADC_Init+0x2d8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a86      	ldr	r2, [pc, #536]	; (8001f9c <HAL_ADC_Init+0x2dc>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9a      	lsrs	r2, r3, #18
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d92:	e002      	b.n	8001d9a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dbc:	d110      	bne.n	8001de0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f023 0312 	bic.w	r3, r3, #18
 8001dc6:	f043 0210 	orr.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 8136 	bne.w	800205a <HAL_ADC_Init+0x39a>
 8001dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 8131 	bne.w	800205a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8129 	bne.w	800205a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e20:	d004      	beq.n	8001e2c <HAL_ADC_Init+0x16c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <HAL_ADC_Init+0x2e0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_Init+0x170>
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_ADC_Init+0x2e4>)
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0x172>
 8001e30:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_ADC_Init+0x2e8>)
 8001e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3c:	d102      	bne.n	8001e44 <HAL_ADC_Init+0x184>
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_ADC_Init+0x2e0>)
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e01a      	b.n	8001e7a <HAL_ADC_Init+0x1ba>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_ADC_Init+0x2e0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d103      	bne.n	8001e56 <HAL_ADC_Init+0x196>
 8001e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e011      	b.n	8001e7a <HAL_ADC_Init+0x1ba>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_ADC_Init+0x2ec>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d102      	bne.n	8001e66 <HAL_ADC_Init+0x1a6>
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_ADC_Init+0x2f0>)
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e009      	b.n	8001e7a <HAL_ADC_Init+0x1ba>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_ADC_Init+0x2f0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d102      	bne.n	8001e76 <HAL_ADC_Init+0x1b6>
 8001e70:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <HAL_ADC_Init+0x2ec>)
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e001      	b.n	8001e7a <HAL_ADC_Init+0x1ba>
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_ADC_Init+0x1da>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x1da>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_ADC_Init+0x1dc>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11c      	bne.n	8001eda <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_ADC_Init+0x202>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_Init+0x202>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_ADC_Init+0x204>
 8001ec2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d108      	bne.n	8001eda <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7e5b      	ldrb	r3, [r3, #25]
 8001ede:	035b      	lsls	r3, r3, #13
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee4:	2a01      	cmp	r2, #1
 8001ee6:	d002      	beq.n	8001eee <HAL_ADC_Init+0x22e>
 8001ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eec:	e000      	b.n	8001ef0 <HAL_ADC_Init+0x230>
 8001eee:	2200      	movs	r2, #0
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f00:	4313      	orrs	r3, r2
 8001f02:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d11b      	bne.n	8001f46 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7e5b      	ldrb	r3, [r3, #25]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	045a      	lsls	r2, r3, #17
 8001f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	663b      	str	r3, [r7, #96]	; 0x60
 8001f28:	e00d      	b.n	8001f46 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d03a      	beq.n	8001fc4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_ADC_Init+0x2ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_ADC_Init+0x2a2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_ADC_Init+0x2f0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_ADC_Init+0x2f4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001f6a:	d012      	beq.n	8001f92 <HAL_ADC_Init+0x2d2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d00a      	beq.n	8001f8c <HAL_ADC_Init+0x2cc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_Init+0x2c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	e018      	b.n	8001fb8 <HAL_ADC_Init+0x2f8>
 8001f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8a:	e015      	b.n	8001fb8 <HAL_ADC_Init+0x2f8>
 8001f8c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001f90:	e012      	b.n	8001fb8 <HAL_ADC_Init+0x2f8>
 8001f92:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f96:	e00f      	b.n	8001fb8 <HAL_ADC_Init+0x2f8>
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	50000100 	.word	0x50000100
 8001fa4:	50000300 	.word	0x50000300
 8001fa8:	50000700 	.word	0x50000700
 8001fac:	50000400 	.word	0x50000400
 8001fb0:	50000500 	.word	0x50000500
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d114      	bne.n	8001ffc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe0:	f023 0302 	bic.w	r3, r3, #2
 8001fe4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
 8001fea:	039a      	lsls	r2, r3, #14
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_ADC_Init+0x3bc>)
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800200c:	430b      	orrs	r3, r1
 800200e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f023 010f 	bic.w	r1, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 020f 	bic.w	r2, r2, #15
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
 8002058:	e00a      	b.n	8002070 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f023 0312 	bic.w	r3, r3, #18
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002074:	4618      	mov	r0, r3
 8002076:	3768      	adds	r7, #104	; 0x68
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	fff0c007 	.word	0xfff0c007

08002080 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b09b      	sub	sp, #108	; 0x6c
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x22>
 800209e:	2302      	movs	r3, #2
 80020a0:	e2ca      	b.n	8002638 <HAL_ADC_ConfigChannel+0x5b8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 82ae 	bne.w	8002616 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d81c      	bhi.n	80020fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	461a      	mov	r2, r3
 80020d6:	231f      	movs	r3, #31
 80020d8:	4093      	lsls	r3, r2
 80020da:	43db      	mvns	r3, r3
 80020dc:	4019      	ands	r1, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
 80020fa:	e063      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d81e      	bhi.n	8002142 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	3b1e      	subs	r3, #30
 8002118:	221f      	movs	r2, #31
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	4019      	ands	r1, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	3b1e      	subs	r3, #30
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
 8002140:	e040      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b0e      	cmp	r3, #14
 8002148:	d81e      	bhi.n	8002188 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	3b3c      	subs	r3, #60	; 0x3c
 800215e:	221f      	movs	r2, #31
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4019      	ands	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	3b3c      	subs	r3, #60	; 0x3c
 800217a:	fa00 f203 	lsl.w	r2, r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
 8002186:	e01d      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3b5a      	subs	r3, #90	; 0x5a
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4019      	ands	r1, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	3b5a      	subs	r3, #90	; 0x5a
 80021b8:	fa00 f203 	lsl.w	r2, r0, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80e5 	bne.w	800239e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d91c      	bls.n	8002216 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6999      	ldr	r1, [r3, #24]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4019      	ands	r1, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6898      	ldr	r0, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	3b1e      	subs	r3, #30
 8002208:	fa00 f203 	lsl.w	r2, r0, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	e019      	b.n	800224a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6959      	ldr	r1, [r3, #20]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	2207      	movs	r2, #7
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	4019      	ands	r1, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6898      	ldr	r0, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	3b01      	subs	r3, #1
 8002268:	2b03      	cmp	r3, #3
 800226a:	d84f      	bhi.n	800230c <HAL_ADC_ConfigChannel+0x28c>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_ADC_ConfigChannel+0x1f4>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002285 	.word	0x08002285
 8002278:	080022a7 	.word	0x080022a7
 800227c:	080022c9 	.word	0x080022c9
 8002280:	080022eb 	.word	0x080022eb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800228a:	4b9a      	ldr	r3, [pc, #616]	; (80024f4 <HAL_ADC_ConfigChannel+0x474>)
 800228c:	4013      	ands	r3, r2
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	0691      	lsls	r1, r2, #26
 8002294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002296:	430a      	orrs	r2, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022a4:	e07e      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022ac:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_ADC_ConfigChannel+0x474>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	0691      	lsls	r1, r2, #26
 80022b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022b8:	430a      	orrs	r2, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022c4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022c6:	e06d      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_ADC_ConfigChannel+0x474>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	0691      	lsls	r1, r2, #26
 80022d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022da:	430a      	orrs	r2, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022e6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022e8:	e05c      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022f0:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <HAL_ADC_ConfigChannel+0x474>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	0691      	lsls	r1, r2, #26
 80022fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022fc:	430a      	orrs	r2, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002308:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800230a:	e04b      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800232e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002352:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	069b      	lsls	r3, r3, #26
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002376:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	429a      	cmp	r2, r3
 800238a:	d10a      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800239a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800239c:	e001      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800239e:	bf00      	nop
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023a2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x344>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x344>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x346>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8130 	bne.w	800262c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d00f      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	400a      	ands	r2, r1
 80023ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80023f2:	e049      	b.n	8002488 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b09      	cmp	r3, #9
 8002414:	d91c      	bls.n	8002450 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6999      	ldr	r1, [r3, #24]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	3b1b      	subs	r3, #27
 8002428:	2207      	movs	r2, #7
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	4019      	ands	r1, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6898      	ldr	r0, [r3, #8]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1b      	subs	r3, #27
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	619a      	str	r2, [r3, #24]
 800244e:	e01b      	b.n	8002488 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6959      	ldr	r1, [r3, #20]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	2207      	movs	r2, #7
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4019      	ands	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	fa00 f203 	lsl.w	r2, r0, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002490:	d004      	beq.n	800249c <HAL_ADC_ConfigChannel+0x41c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_ADC_ConfigChannel+0x478>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x420>
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_ADC_ConfigChannel+0x47c>)
 800249e:	e000      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x422>
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_ADC_ConfigChannel+0x480>)
 80024a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024bc:	2b11      	cmp	r3, #17
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	f040 80ab 	bne.w	800262c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80a4 	bne.w	800262c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ec:	d10a      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x484>
 80024ee:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <HAL_ADC_ConfigChannel+0x478>)
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e022      	b.n	800253a <HAL_ADC_ConfigChannel+0x4ba>
 80024f4:	83fff000 	.word	0x83fff000
 80024f8:	50000100 	.word	0x50000100
 80024fc:	50000300 	.word	0x50000300
 8002500:	50000700 	.word	0x50000700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <HAL_ADC_ConfigChannel+0x5c4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d103      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x496>
 800250e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e011      	b.n	800253a <HAL_ADC_ConfigChannel+0x4ba>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_ADC_ConfigChannel+0x5c8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d102      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x4a6>
 8002520:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_ADC_ConfigChannel+0x5cc>)
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e009      	b.n	800253a <HAL_ADC_ConfigChannel+0x4ba>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_ADC_ConfigChannel+0x5cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4b6>
 8002530:	4b45      	ldr	r3, [pc, #276]	; (8002648 <HAL_ADC_ConfigChannel+0x5c8>)
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e001      	b.n	800253a <HAL_ADC_ConfigChannel+0x4ba>
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4da>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4da>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x4dc>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d150      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002560:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x502>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x502>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_ADC_ConfigChannel+0x504>
 8002582:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13c      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d11d      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x54c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d118      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800259a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_ADC_ConfigChannel+0x5d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2a      	ldr	r2, [pc, #168]	; (8002654 <HAL_ADC_ConfigChannel+0x5d4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9a      	lsrs	r2, r3, #18
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ca:	e02e      	b.n	800262a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b11      	cmp	r3, #17
 80025d2:	d10b      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x56c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025dc:	d106      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ea:	e01e      	b.n	800262a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d11a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002600:	e013      	b.n	800262a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002614:	e00a      	b.n	800262c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800262a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002634:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002638:	4618      	mov	r0, r3
 800263a:	376c      	adds	r7, #108	; 0x6c
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	50000100 	.word	0x50000100
 8002648:	50000400 	.word	0x50000400
 800264c:	50000500 	.word	0x50000500
 8002650:	20000000 	.word	0x20000000
 8002654:	431bde83 	.word	0x431bde83

08002658 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <ADC_Disable+0x2c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <ADC_Disable+0x2c>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <ADC_Disable+0x2e>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d047      	beq.n	800271a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030d 	and.w	r3, r3, #13
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10f      	bne.n	80026b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0202 	orr.w	r2, r2, #2
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2203      	movs	r2, #3
 80026ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80026b0:	f7ff fad6 	bl	8001c60 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026b6:	e029      	b.n	800270c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e023      	b.n	800271c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026d4:	f7ff fac4 	bl	8001c60 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d914      	bls.n	800270c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10d      	bne.n	800270c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e007      	b.n	800271c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d0dc      	beq.n	80026d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0ed      	b.n	8002912 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fbaa 	bl	8000e9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7ff fa82 	bl	8001c60 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800275e:	e012      	b.n	8002786 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002760:	f7ff fa7e 	bl	8001c60 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b0a      	cmp	r3, #10
 800276c:	d90b      	bls.n	8002786 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0c5      	b.n	8002912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0e5      	beq.n	8002760 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0202 	bic.w	r2, r2, #2
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7ff fa5c 	bl	8001c60 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027aa:	e012      	b.n	80027d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027ac:	f7ff fa58 	bl	8001c60 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b0a      	cmp	r3, #10
 80027b8:	d90b      	bls.n	80027d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2205      	movs	r2, #5
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e09f      	b.n	8002912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7e1b      	ldrb	r3, [r3, #24]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d108      	bne.n	80027fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7e5b      	ldrb	r3, [r3, #25]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e007      	b.n	8002834 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7e9b      	ldrb	r3, [r3, #26]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e007      	b.n	800285e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0220 	bic.w	r2, r2, #32
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7edb      	ldrb	r3, [r3, #27]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0210 	bic.w	r2, r2, #16
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e007      	b.n	8002888 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0210 	orr.w	r2, r2, #16
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7f1b      	ldrb	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0208 	orr.w	r2, r2, #8
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e007      	b.n	80028b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0208 	bic.w	r2, r2, #8
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7f5b      	ldrb	r3, [r3, #29]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0204 	orr.w	r2, r2, #4
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e007      	b.n	80028dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	ea42 0103 	orr.w	r1, r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800291a:	b480      	push	{r7}
 800291c:	b087      	sub	sp, #28
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d003      	beq.n	8002940 <HAL_CAN_ConfigFilter+0x26>
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b02      	cmp	r3, #2
 800293c:	f040 80aa 	bne.w	8002a94 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2201      	movs	r2, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d123      	bne.n	80029c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	401a      	ands	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800299c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3248      	adds	r2, #72	; 0x48
 80029a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	3348      	adds	r3, #72	; 0x48
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d122      	bne.n	8002a10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3248      	adds	r2, #72	; 0x48
 80029f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a06:	6979      	ldr	r1, [r7, #20]
 8002a08:	3348      	adds	r3, #72	; 0x48
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a2a:	e007      	b.n	8002a3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a56:	e007      	b.n	8002a68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e006      	b.n	8002aa2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12e      	bne.n	8002b20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ada:	f7ff f8c1 	bl	8001c60 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ae0:	e012      	b.n	8002b08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae2:	f7ff f8bd 	bl	8001c60 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b0a      	cmp	r3, #10
 8002aee:	d90b      	bls.n	8002b08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2205      	movs	r2, #5
 8002b00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e012      	b.n	8002b2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e006      	b.n	8002b2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <HAL_CAN_GetRxMessage+0x24>
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	f040 80f3 	bne.w	8002d40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10e      	bne.n	8002b7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0d8      	b.n	8002d4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	331b      	adds	r3, #27
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0204 	and.w	r2, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	331b      	adds	r3, #27
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0d5b      	lsrs	r3, r3, #21
 8002bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	08db      	lsrs	r3, r3, #3
 8002be4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0202 	and.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	331b      	adds	r3, #27
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	331b      	adds	r3, #27
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	331b      	adds	r3, #27
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3304      	adds	r3, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0a1a      	lsrs	r2, r3, #8
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0c1a      	lsrs	r2, r3, #16
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	3302      	adds	r3, #2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e1a      	lsrs	r2, r3, #24
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0a1a      	lsrs	r2, r3, #8
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3305      	adds	r3, #5
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0c1a      	lsrs	r2, r3, #16
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3306      	adds	r3, #6
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e1a      	lsrs	r2, r3, #24
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	3307      	adds	r3, #7
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	e007      	b.n	8002d3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e006      	b.n	8002d4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d002      	beq.n	8002d78 <HAL_CAN_ActivateNotification+0x1e>
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d109      	bne.n	8002d8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6959      	ldr	r1, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e006      	b.n	8002d9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b08a      	sub	sp, #40	; 0x28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d07c      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d023      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f983 	bl	8003114 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e0e:	e016      	b.n	8002e3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e00c      	b.n	8002e3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	e002      	b.n	8002e3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f989 	bl	8003150 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d024      	beq.n	8002e92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f963 	bl	8003128 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e62:	e016      	b.n	8002e92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e00c      	b.n	8002e92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e002      	b.n	8002e92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f969 	bl	8003164 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d024      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f943 	bl	800313c <HAL_CAN_TxMailbox2CompleteCallback>
 8002eb6:	e016      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e00c      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e002      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f949 	bl	8003178 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2210      	movs	r2, #16
 8002f08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f930 	bl	800318c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe f921 	bl	800118c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f912 	bl	80031b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8f9 	bl	80031a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8fc 	bl	80031c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f8f5 	bl	80031dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d07b      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d072      	beq.n	80030ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003060:	2b00      	cmp	r3, #0
 8003062:	d043      	beq.n	80030ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03e      	beq.n	80030ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d02b      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x32a>
 8003078:	2b60      	cmp	r3, #96	; 0x60
 800307a:	d82e      	bhi.n	80030da <HAL_CAN_IRQHandler+0x334>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d022      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x320>
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d82a      	bhi.n	80030da <HAL_CAN_IRQHandler+0x334>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d019      	beq.n	80030bc <HAL_CAN_IRQHandler+0x316>
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d826      	bhi.n	80030da <HAL_CAN_IRQHandler+0x334>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d010      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x30c>
 8003090:	2b30      	cmp	r3, #48	; 0x30
 8003092:	d822      	bhi.n	80030da <HAL_CAN_IRQHandler+0x334>
 8003094:	2b10      	cmp	r3, #16
 8003096:	d002      	beq.n	800309e <HAL_CAN_IRQHandler+0x2f8>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d005      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800309c:	e01d      	b.n	80030da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a6:	e019      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	f043 0310 	orr.w	r3, r3, #16
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b0:	e014      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ba:	e00f      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c4:	e00a      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ce:	e005      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d8:	e000      	b.n	80030dc <HAL_CAN_IRQHandler+0x336>
            break;
 80030da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2204      	movs	r2, #4
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f872 	bl	80031f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800310c:	bf00      	nop
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e037      	b.n	80034ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9b8 	bl	8003804 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}  
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Start_IT+0x20>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e04a      	b.n	800356a <HAL_DMA_Start_IT+0xb6>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d13a      	bne.n	800355c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f94b 	bl	80037a6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 020e 	orr.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e00f      	b.n	800354a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 020a 	orr.w	r2, r2, #10
 8003538:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0204 	bic.w	r2, r2, #4
 8003548:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e005      	b.n	8003568 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003568:	7dfb      	ldrb	r3, [r7, #23]
} 
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003580:	2b02      	cmp	r3, #2
 8003582:	d008      	beq.n	8003596 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e020      	b.n	80035d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 020e 	bic.w	r2, r2, #14
 80035a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d005      	beq.n	8003606 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e027      	b.n	8003656 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 020e 	bic.w	r2, r2, #14
 8003614:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
    } 
  }
  return status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2204      	movs	r2, #4
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2104      	movs	r1, #4
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d06a      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	e065      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2202      	movs	r2, #2
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_IRQHandler+0xdc>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d027      	beq.n	800373c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 020a 	bic.w	r2, r2, #10
 8003708:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2102      	movs	r1, #2
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d035      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800373a:	e030      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2208      	movs	r2, #8
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d028      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d023      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 020e 	bic.w	r2, r2, #14
 8003764:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    }
  }
}  
 800379c:	e7ff      	b.n	800379e <HAL_DMA_IRQHandler+0x13e>
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d108      	bne.n	80037e6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e4:	e007      	b.n	80037f6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <DMA_CalcBaseAndBitshift+0x60>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d80f      	bhi.n	8003838 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <DMA_CalcBaseAndBitshift+0x64>)
 8003820:	4413      	add	r3, r2
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <DMA_CalcBaseAndBitshift+0x68>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <DMA_CalcBaseAndBitshift+0x6c>)
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003836:	e00e      	b.n	8003856 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <DMA_CalcBaseAndBitshift+0x70>)
 8003840:	4413      	add	r3, r2
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <DMA_CalcBaseAndBitshift+0x68>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	009a      	lsls	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <DMA_CalcBaseAndBitshift+0x74>)
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40020407 	.word	0x40020407
 8003868:	bffdfff8 	.word	0xbffdfff8
 800386c:	cccccccd 	.word	0xcccccccd
 8003870:	40020000 	.word	0x40020000
 8003874:	bffdfbf8 	.word	0xbffdfbf8
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388a:	e154      	b.n	8003b36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	4013      	ands	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8146 	beq.w	8003b30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d005      	beq.n	80038bc <HAL_GPIO_Init+0x40>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d130      	bne.n	800391e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f2:	2201      	movs	r2, #1
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0201 	and.w	r2, r3, #1
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b03      	cmp	r3, #3
 8003928:	d017      	beq.n	800395a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d123      	bne.n	80039ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	6939      	ldr	r1, [r7, #16]
 80039aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0203 	and.w	r2, r3, #3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a0 	beq.w	8003b30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f0:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_GPIO_Init+0x2d8>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_GPIO_Init+0x2d8>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6193      	str	r3, [r2, #24]
 80039fc:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_GPIO_Init+0x2d8>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a08:	4a53      	ldr	r2, [pc, #332]	; (8003b58 <HAL_GPIO_Init+0x2dc>)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a32:	d019      	beq.n	8003a68 <HAL_GPIO_Init+0x1ec>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <HAL_GPIO_Init+0x2e0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_GPIO_Init+0x1e8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <HAL_GPIO_Init+0x2e4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00d      	beq.n	8003a60 <HAL_GPIO_Init+0x1e4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <HAL_GPIO_Init+0x1e0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_GPIO_Init+0x1dc>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e008      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a58:	2305      	movs	r3, #5
 8003a5a:	e006      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e004      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e002      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_GPIO_Init+0x1ee>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	f002 0203 	and.w	r2, r2, #3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4093      	lsls	r3, r2
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a7a:	4937      	ldr	r1, [pc, #220]	; (8003b58 <HAL_GPIO_Init+0x2dc>)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003aac:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b00:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b06:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3301      	adds	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f aea3 	bne.w	800388c <HAL_GPIO_Init+0x10>
  }
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	48000400 	.word	0x48000400
 8003b60:	48000800 	.word	0x48000800
 8003b64:	48000c00 	.word	0x48000c00
 8003b68:	48001000 	.word	0x48001000
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b80:	787b      	ldrb	r3, [r7, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b86:	887a      	ldrh	r2, [r7, #2]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b8c:	e002      	b.n	8003b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f001 b823 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 817d 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bdc:	4bbc      	ldr	r3, [pc, #752]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d00c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003be8:	4bb9      	ldr	r3, [pc, #740]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d15c      	bne.n	8003cae <HAL_RCC_OscConfig+0x10e>
 8003bf4:	4bb6      	ldr	r3, [pc, #728]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d155      	bne.n	8003cae <HAL_RCC_OscConfig+0x10e>
 8003c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_OscConfig+0x94>
 8003c2e:	4ba8      	ldr	r3, [pc, #672]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e015      	b.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c5c:	4b9c      	ldr	r3, [pc, #624]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f042 0220 	orr.w	r2, r2, #32
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 811f 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 8116 	bne.w	8003ed4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f000 bfaf 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003cc0:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a82      	ldr	r2, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e036      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x158>
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7b      	ldr	r2, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a78      	ldr	r2, [pc, #480]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e021      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x184>
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0x19c>
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a69      	ldr	r2, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a66      	ldr	r2, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f023 020f 	bic.w	r2, r3, #15
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	495f      	ldr	r1, [pc, #380]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d059      	beq.n	8003e1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fd ff7b 	bl	8001c60 <HAL_GetTick>
 8003d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fd ff76 	bl	8001c60 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d902      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	f000 bf43 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8003d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003d9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_OscConfig+0x218>
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x244>
 8003db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003dd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003de8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003dec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003df0:	fa92 f2a2 	rbit	r2, r2
 8003df4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003df8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f042 0220 	orr.w	r2, r2, #32
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f002 021f 	and.w	r2, r2, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ab      	beq.n	8003d70 <HAL_RCC_OscConfig+0x1d0>
 8003e18:	e05d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd ff21 	bl	8001c60 <HAL_GetTick>
 8003e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd ff1c 	bl	8001c60 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	; 0x64
 8003e32:	d902      	bls.n	8003e3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	f000 bee9 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8003e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d102      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2cc>
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	e015      	b.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
 8003e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e70:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e9c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ea0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ea4:	fa92 f2a2 	rbit	r2, r2
 8003ea8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003eac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	f042 0220 	orr.w	r2, r2, #32
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f002 021f 	and.w	r2, r2, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ab      	bne.n	8003e24 <HAL_RCC_OscConfig+0x284>
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCC_OscConfig+0x336>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 817d 	beq.w	80041e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eec:	4ba6      	ldr	r3, [pc, #664]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ef8:	4ba3      	ldr	r3, [pc, #652]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d172      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8003f04:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d16c      	bne.n	8003fea <HAL_RCC_OscConfig+0x44a>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x3a0>
 8003f3a:	4b93      	ldr	r3, [pc, #588]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	e013      	b.n	8003f68 <HAL_RCC_OscConfig+0x3c8>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f52:	2302      	movs	r3, #2
 8003f54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f64:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f72:	fa92 f2a2 	rbit	r2, r2
 8003f76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f7e:	fab2 f282 	clz	r2, r2
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f002 021f 	and.w	r2, r2, #31
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x410>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f000 be2e 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	21f8      	movs	r1, #248	; 0xf8
 8003fc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fce:	fa91 f1a1 	rbit	r1, r1
 8003fd2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003fd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003fda:	fab1 f181 	clz	r1, r1
 8003fde:	b2c9      	uxtb	r1, r1
 8003fe0:	408b      	lsls	r3, r1
 8003fe2:	4969      	ldr	r1, [pc, #420]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe8:	e0fd      	b.n	80041e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8088 	beq.w	800410c <HAL_RCC_OscConfig+0x56c>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800400e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800401c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	2301      	movs	r3, #1
 8004026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fd fe1a 	bl	8001c60 <HAL_GetTick>
 800402c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004032:	f7fd fe15 	bl	8001c60 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	f000 bde2 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004048:	2302      	movs	r3, #2
 800404a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800405a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x4d8>
 8004072:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	e013      	b.n	80040a0 <HAL_RCC_OscConfig+0x500>
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800408a:	2302      	movs	r3, #2
 800408c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004090:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800409c:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2202      	movs	r2, #2
 80040a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040aa:	fa92 f2a2 	rbit	r2, r2
 80040ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040b6:	fab2 f282 	clz	r2, r2
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	f042 0220 	orr.w	r2, r2, #32
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f002 021f 	and.w	r2, r2, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0af      	beq.n	8004032 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	21f8      	movs	r1, #248	; 0xf8
 80040e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80040f0:	fa91 f1a1 	rbit	r1, r1
 80040f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80040f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80040fc:	fab1 f181 	clz	r1, r1
 8004100:	b2c9      	uxtb	r1, r1
 8004102:	408b      	lsls	r3, r1
 8004104:	4920      	ldr	r1, [pc, #128]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	e06c      	b.n	80041e6 <HAL_RCC_OscConfig+0x646>
 800410c:	2301      	movs	r3, #1
 800410e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800411e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800412c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd fd92 	bl	8001c60 <HAL_GetTick>
 800413c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004142:	f7fd fd8d 	bl	8001c60 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	f000 bd5a 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004158:	2302      	movs	r3, #2
 800415a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800416a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d104      	bne.n	800418c <HAL_RCC_OscConfig+0x5ec>
 8004182:	4b01      	ldr	r3, [pc, #4]	; (8004188 <HAL_RCC_OscConfig+0x5e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e015      	b.n	80041b4 <HAL_RCC_OscConfig+0x614>
 8004188:	40021000 	.word	0x40021000
 800418c:	2302      	movs	r3, #2
 800418e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800419e:	2302      	movs	r3, #2
 80041a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041b0:	4bc8      	ldr	r3, [pc, #800]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2202      	movs	r2, #2
 80041b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041be:	fa92 f2a2 	rbit	r2, r2
 80041c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041ca:	fab2 f282 	clz	r2, r2
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f042 0220 	orr.w	r2, r2, #32
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f002 021f 	and.w	r2, r2, #31
 80041da:	2101      	movs	r1, #1
 80041dc:	fa01 f202 	lsl.w	r2, r1, r2
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ad      	bne.n	8004142 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8110 	beq.w	800441c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d079      	beq.n	8004300 <HAL_RCC_OscConfig+0x760>
 800420c:	2301      	movs	r3, #1
 800420e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	4bab      	ldr	r3, [pc, #684]	; (80044d8 <HAL_RCC_OscConfig+0x938>)
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fd fd13 	bl	8001c60 <HAL_GetTick>
 800423a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004240:	f7fd fd0e 	bl	8001c60 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d902      	bls.n	8004256 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	f000 bcdb 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004256:	2302      	movs	r3, #2
 8004258:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004270:	2202      	movs	r2, #2
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	fa93 f2a3 	rbit	r2, r3
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b0:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80042b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042bc:	2102      	movs	r1, #2
 80042be:	6019      	str	r1, [r3, #0]
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f1a3 	rbit	r1, r3
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042d6:	6019      	str	r1, [r3, #0]
  return result;
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0a0      	beq.n	8004240 <HAL_RCC_OscConfig+0x6a0>
 80042fe:	e08d      	b.n	800441c <HAL_RCC_OscConfig+0x87c>
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800432c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x938>)
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fd fc8d 	bl	8001c60 <HAL_GetTick>
 8004346:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd fc88 	bl	8001c60 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d902      	bls.n	8004362 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	f000 bc55 	b.w	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800436a:	2202      	movs	r2, #2
 800436c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	fa93 f2a3 	rbit	r2, r3
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800438e:	2202      	movs	r2, #2
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b2:	2202      	movs	r2, #2
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043da:	2102      	movs	r1, #2
 80043dc:	6019      	str	r1, [r3, #0]
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f1a3 	rbit	r1, r3
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043f4:	6019      	str	r1, [r3, #0]
  return result;
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d197      	bne.n	800434c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 81a1 	beq.w	8004774 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	61d3      	str	r3, [r2, #28]
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800446a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11a      	bne.n	80044b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448a:	f7fd fbe9 	bl	8001c60 <HAL_GetTick>
 800448e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	e009      	b.n	80044a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fd fbe4 	bl	8001c60 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e3b1      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x93c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCC_OscConfig+0x940>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a02      	ldr	r2, [pc, #8]	; (80044d4 <HAL_RCC_OscConfig+0x934>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	e03c      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	10908120 	.word	0x10908120
 80044dc:	40007000 	.word	0x40007000
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10c      	bne.n	800450a <HAL_RCC_OscConfig+0x96a>
 80044f0:	4bc1      	ldr	r3, [pc, #772]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4ac0      	ldr	r2, [pc, #768]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	4bbe      	ldr	r3, [pc, #760]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4abd      	ldr	r2, [pc, #756]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6213      	str	r3, [r2, #32]
 8004508:	e020      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 800450a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b05      	cmp	r3, #5
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x994>
 800451a:	4bb7      	ldr	r3, [pc, #732]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4ab6      	ldr	r2, [pc, #728]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6213      	str	r3, [r2, #32]
 8004526:	4bb4      	ldr	r3, [pc, #720]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4ab3      	ldr	r2, [pc, #716]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6213      	str	r3, [r2, #32]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0x9ac>
 8004534:	4bb0      	ldr	r3, [pc, #704]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4aaf      	ldr	r2, [pc, #700]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	4bad      	ldr	r3, [pc, #692]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4aac      	ldr	r2, [pc, #688]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004546:	f023 0304 	bic.w	r3, r3, #4
 800454a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800454c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8081 	beq.w	8004660 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fd fb7f 	bl	8001c60 <HAL_GetTick>
 8004562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd fb7a 	bl	8001c60 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e345      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004584:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004588:	2202      	movs	r2, #2
 800458a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f2a3 	rbit	r2, r3
 800459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045ac:	2202      	movs	r2, #2
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045c6:	601a      	str	r2, [r3, #0]
  return result;
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0xa4c>
 80045e6:	4b84      	ldr	r3, [pc, #528]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	e013      	b.n	8004614 <HAL_RCC_OscConfig+0xa74>
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045f4:	2202      	movs	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	4b79      	ldr	r3, [pc, #484]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004618:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800461c:	2102      	movs	r1, #2
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004624:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	fa92 f1a2 	rbit	r1, r2
 800462e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004632:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004636:	6011      	str	r1, [r2, #0]
  return result;
 8004638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d084      	beq.n	8004568 <HAL_RCC_OscConfig+0x9c8>
 800465e:	e07f      	b.n	8004760 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fd fafe 	bl	8001c60 <HAL_GetTick>
 8004664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004668:	e00b      	b.n	8004682 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fd faf9 	bl	8001c60 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e2c4      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004686:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800468a:	2202      	movs	r2, #2
 800468c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	fa93 f2a3 	rbit	r2, r3
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ae:	2202      	movs	r2, #2
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fa93 f2a3 	rbit	r2, r3
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046c8:	601a      	str	r2, [r3, #0]
  return result;
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d102      	bne.n	80046ee <HAL_RCC_OscConfig+0xb4e>
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	e013      	b.n	8004716 <HAL_RCC_OscConfig+0xb76>
 80046ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046f6:	2202      	movs	r2, #2
 80046f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	fa93 f2a3 	rbit	r2, r3
 8004708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800471a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800471e:	2102      	movs	r1, #2
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004726:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	fa92 f1a2 	rbit	r1, r2
 8004730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004734:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004738:	6011      	str	r1, [r2, #0]
  return result;
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d184      	bne.n	800466a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004760:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004772:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8242 	beq.w	8004c0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_RCC_OscConfig+0xc58>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	f000 8213 	beq.w	8004bba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f040 8162 	bne.w	8004a6a <HAL_RCC_OscConfig+0xeca>
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047ca:	601a      	str	r2, [r3, #0]
  return result;
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd fa38 	bl	8001c60 <HAL_GetTick>
 80047f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f4:	e00c      	b.n	8004810 <HAL_RCC_OscConfig+0xc70>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fa30 	bl	8001c60 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1fd      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004834:	601a      	str	r2, [r3, #0]
  return result;
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800483e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0xcba>
 8004854:	4bb0      	ldr	r3, [pc, #704]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	e027      	b.n	80048aa <HAL_RCC_OscConfig+0xd0a>
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004892:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	fa93 f2a3 	rbit	r2, r3
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	4b9c      	ldr	r3, [pc, #624]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	fa92 f1a2 	rbit	r1, r2
 80048c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048ce:	6011      	str	r1, [r2, #0]
  return result;
 80048d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	fab2 f282 	clz	r2, r2
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	f042 0220 	orr.w	r2, r2, #32
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f002 021f 	and.w	r2, r2, #31
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f202 	lsl.w	r2, r1, r2
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d182      	bne.n	80047fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800490a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	430b      	orrs	r3, r1
 8004918:	497f      	ldr	r1, [pc, #508]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004930:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	fa93 f2a3 	rbit	r2, r3
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004942:	601a      	str	r2, [r3, #0]
  return result;
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800494c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	461a      	mov	r2, r3
 8004960:	2301      	movs	r3, #1
 8004962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd f97c 	bl	8001c60 <HAL_GetTick>
 8004968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd f977 	bl	8001c60 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e144      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004986:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800498a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	fa93 f2a3 	rbit	r2, r3
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049a6:	601a      	str	r2, [r3, #0]
  return result;
 80049a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0xe2c>
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	e027      	b.n	8004a1c <HAL_RCC_OscConfig+0xe7c>
 80049cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	fa93 f2a3 	rbit	r2, r3
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80049fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	fa93 f2a3 	rbit	r2, r3
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	fa92 f1a2 	rbit	r1, r2
 8004a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a40:	6011      	str	r1, [r2, #0]
  return result;
 8004a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	fab2 f282 	clz	r2, r2
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f042 0220 	orr.w	r2, r2, #32
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	f002 021f 	and.w	r2, r2, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d082      	beq.n	800496e <HAL_RCC_OscConfig+0xdce>
 8004a68:	e0cf      	b.n	8004c0a <HAL_RCC_OscConfig+0x106a>
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	fa93 f2a3 	rbit	r2, r3
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a8e:	601a      	str	r2, [r3, #0]
  return result;
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fd f8d6 	bl	8001c60 <HAL_GetTick>
 8004ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e009      	b.n	8004ace <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd f8d1 	bl	8001c60 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e09e      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
 8004ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	fa93 f2a3 	rbit	r2, r3
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004af2:	601a      	str	r2, [r3, #0]
  return result;
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d104      	bne.n	8004b1c <HAL_RCC_OscConfig+0xf7c>
 8004b12:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <HAL_RCC_OscConfig+0xf78>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e029      	b.n	8004b6c <HAL_RCC_OscConfig+0xfcc>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	fa93 f2a3 	rbit	r2, r3
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x1078>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	fa92 f1a2 	rbit	r1, r2
 8004b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b90:	6011      	str	r1, [r2, #0]
  return result;
 8004b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f042 0220 	orr.w	r2, r2, #32
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	f002 021f 	and.w	r2, r2, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d180      	bne.n	8004aba <HAL_RCC_OscConfig+0xf1a>
 8004bb8:	e027      	b.n	8004c0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e01e      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_OscConfig+0x1078>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004bee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000

08004c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b09e      	sub	sp, #120	; 0x78
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e162      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c34:	4b90      	ldr	r3, [pc, #576]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d910      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	498b      	ldr	r1, [pc, #556]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e14a      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b82      	ldr	r3, [pc, #520]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	497f      	ldr	r1, [pc, #508]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80dc 	beq.w	8004e48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d13c      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xf6>
 8004c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca8:	fab3 f383 	clz	r3, r3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xa6>
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	e00f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0xc6>
 8004cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	667b      	str	r3, [r7, #100]	; 0x64
 8004cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cea:	fa92 f2a2 	rbit	r2, r2
 8004cee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cf2:	fab2 f282 	clz	r2, r2
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	f042 0220 	orr.w	r2, r2, #32
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	f002 021f 	and.w	r2, r2, #31
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d17b      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0f3      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d13c      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x178>
 8004d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x128>
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_ClockConfig+0x148>
 8004d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
 8004d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d56:	643b      	str	r3, [r7, #64]	; 0x40
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d60:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d68:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6c:	fa92 f2a2 	rbit	r2, r2
 8004d70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d13a      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b2      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
 8004d94:	2302      	movs	r3, #2
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x1a0>
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e00d      	b.n	8004dd8 <HAL_RCC_ClockConfig+0x1bc>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	2302      	movs	r3, #2
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2202      	movs	r2, #2
 8004dda:	61ba      	str	r2, [r7, #24]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	fa92 f2a2 	rbit	r2, r2
 8004de2:	617a      	str	r2, [r7, #20]
  return result;
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	fab2 f282 	clz	r2, r2
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f042 0220 	orr.w	r2, r2, #32
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f002 021f 	and.w	r2, r2, #31
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e079      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f023 0203 	bic.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	491a      	ldr	r1, [pc, #104]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e18:	f7fc ff22 	bl	8001c60 <HAL_GetTick>
 8004e1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e20:	f7fc ff1e 	bl	8001c60 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e061      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_RCC_ClockConfig+0x260>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 020c 	and.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1eb      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d214      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 0207 	bic.w	r2, r3, #7
 8004e5e:	4906      	ldr	r1, [pc, #24]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_RCC_ClockConfig+0x25c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e040      	b.n	8004efa <HAL_RCC_ClockConfig+0x2de>
 8004e78:	40022000 	.word	0x40022000
 8004e7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	491a      	ldr	r1, [pc, #104]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eaa:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4912      	ldr	r1, [pc, #72]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ebe:	f000 f829 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCC_ClockConfig+0x2e8>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	22f0      	movs	r2, #240	; 0xf0
 8004ece:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	fa92 f2a2 	rbit	r2, r2
 8004ed6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	fab2 f282 	clz	r2, r2
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	40d3      	lsrs	r3, r2
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x2ec>)
 8004ee4:	5cd3      	ldrb	r3, [r2, r3]
 8004ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCC_ClockConfig+0x2f0>)
 8004eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <HAL_RCC_ClockConfig+0x2f4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fc fe70 	bl	8001bd8 <HAL_InitTick>
  
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3778      	adds	r7, #120	; 0x78
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	0800c1e4 	.word	0x0800c1e4
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	20000004 	.word	0x20000004

08004f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b08b      	sub	sp, #44	; 0x2c
 8004f18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f2e:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d002      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x30>
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0x36>
 8004f42:	e03c      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f46:	623b      	str	r3, [r7, #32]
      break;
 8004f48:	e03c      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	fa92 f2a2 	rbit	r2, r2
 8004f5c:	607a      	str	r2, [r7, #4]
  return result;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	fab2 f282 	clz	r2, r2
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	40d3      	lsrs	r3, r2
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f6a:	5cd3      	ldrb	r3, [r2, r3]
 8004f6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f6e:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	220f      	movs	r2, #15
 8004f78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	fa92 f2a2 	rbit	r2, r2
 8004f80:	60fa      	str	r2, [r7, #12]
  return result;
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	fab2 f282 	clz	r2, r2
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	40d3      	lsrs	r3, r2
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f9c:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
 8004fac:	e004      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	623b      	str	r3, [r7, #32]
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fc0:	623b      	str	r3, [r7, #32]
      break;
 8004fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	372c      	adds	r7, #44	; 0x2c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	0800c1fc 	.word	0x0800c1fc
 8004fe0:	0800c20c 	.word	0x0800c20c
 8004fe4:	003d0900 	.word	0x003d0900

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000000 	.word	0x20000000

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005006:	f7ff ffef 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800500a:	4601      	mov	r1, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005014:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005018:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	fa92 f2a2 	rbit	r2, r2
 8005020:	603a      	str	r2, [r7, #0]
  return result;
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	fab2 f282 	clz	r2, r2
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	40d3      	lsrs	r3, r2
 800502c:	4a04      	ldr	r2, [pc, #16]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x40>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0800c1f4 	.word	0x0800c1f4

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800504a:	f7ff ffcd 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800504e:	4601      	mov	r1, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005058:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800505c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	fa92 f2a2 	rbit	r2, r2
 8005064:	603a      	str	r2, [r7, #0]
  return result;
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	fab2 f282 	clz	r2, r2
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	40d3      	lsrs	r3, r2
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	0800c1f4 	.word	0x0800c1f4

08005088 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b092      	sub	sp, #72	; 0x48
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80d4 	beq.w	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10e      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b4b      	ldr	r3, [pc, #300]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4a4a      	ldr	r2, [pc, #296]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	61d3      	str	r3, [r2, #28]
 80050c4:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b45      	ldr	r3, [pc, #276]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b42      	ldr	r3, [pc, #264]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a41      	ldr	r2, [pc, #260]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fc fdb7 	bl	8001c60 <HAL_GetTick>
 80050f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fc fdb3 	bl	8001c60 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	; 0x64
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e169      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005114:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8084 	beq.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005130:	429a      	cmp	r2, r3
 8005132:	d07c      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005134:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	461a      	mov	r2, r3
 800515e:	2301      	movs	r3, #1
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04b      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fc fd63 	bl	8001c60 <HAL_GetTick>
 800519a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc fd5f 	bl	8001c60 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e113      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80051b4:	2302      	movs	r3, #2
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	2302      	movs	r3, #2
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	fa93 f3a3 	rbit	r3, r3
 80051ca:	61fb      	str	r3, [r7, #28]
  return result;
 80051cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d108      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80051e2:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	e00d      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40007000 	.word	0x40007000
 80051f0:	10908100 	.word	0x10908100
 80051f4:	2302      	movs	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	4b78      	ldr	r3, [pc, #480]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2202      	movs	r2, #2
 8005206:	613a      	str	r2, [r7, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	fa92 f2a2 	rbit	r2, r2
 800520e:	60fa      	str	r2, [r7, #12]
  return result;
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	fab2 f282 	clz	r2, r2
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	f002 021f 	and.w	r2, r2, #31
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0b7      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800522e:	4b6d      	ldr	r3, [pc, #436]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	496a      	ldr	r1, [pc, #424]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005248:	4b66      	ldr	r3, [pc, #408]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4a65      	ldr	r2, [pc, #404]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005260:	4b60      	ldr	r3, [pc, #384]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	f023 0203 	bic.w	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	495d      	ldr	r1, [pc, #372]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527e:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4956      	ldr	r1, [pc, #344]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800529c:	4b51      	ldr	r3, [pc, #324]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	494e      	ldr	r1, [pc, #312]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ba:	4b4a      	ldr	r3, [pc, #296]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	4947      	ldr	r1, [pc, #284]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052d8:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	493f      	ldr	r1, [pc, #252]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f6:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f023 0220 	bic.w	r2, r3, #32
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4938      	ldr	r1, [pc, #224]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005314:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4930      	ldr	r1, [pc, #192]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	4929      	ldr	r1, [pc, #164]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4921      	ldr	r1, [pc, #132]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800536e:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	491a      	ldr	r1, [pc, #104]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	4912      	ldr	r1, [pc, #72]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	490b      	ldr	r1, [pc, #44]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3748      	adds	r7, #72	; 0x48
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000

080053e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e049      	b.n	800548e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc fa16 	bl	8001840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fa4a 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_TIM_PWM_Start+0x24>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e03c      	b.n	8005536 <HAL_TIM_PWM_Start+0x9e>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d109      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x3e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e02f      	b.n	8005536 <HAL_TIM_PWM_Start+0x9e>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d109      	bne.n	80054f0 <HAL_TIM_PWM_Start+0x58>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e022      	b.n	8005536 <HAL_TIM_PWM_Start+0x9e>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d109      	bne.n	800550a <HAL_TIM_PWM_Start+0x72>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e015      	b.n	8005536 <HAL_TIM_PWM_Start+0x9e>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b10      	cmp	r3, #16
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start+0x8c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e008      	b.n	8005536 <HAL_TIM_PWM_Start+0x9e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e097      	b.n	800566e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0xb6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	e023      	b.n	8005596 <HAL_TIM_PWM_Start+0xfe>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xc6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	e01b      	b.n	8005596 <HAL_TIM_PWM_Start+0xfe>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d104      	bne.n	800556e <HAL_TIM_PWM_Start+0xd6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556c:	e013      	b.n	8005596 <HAL_TIM_PWM_Start+0xfe>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d104      	bne.n	800557e <HAL_TIM_PWM_Start+0xe6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800557c:	e00b      	b.n	8005596 <HAL_TIM_PWM_Start+0xfe>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start+0xf6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800558c:	e003      	b.n	8005596 <HAL_TIM_PWM_Start+0xfe>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2201      	movs	r2, #1
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fcf4 	bl	8005f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a33      	ldr	r2, [pc, #204]	; (8005678 <HAL_TIM_PWM_Start+0x1e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x13e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a32      	ldr	r2, [pc, #200]	; (800567c <HAL_TIM_PWM_Start+0x1e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x13e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a30      	ldr	r2, [pc, #192]	; (8005680 <HAL_TIM_PWM_Start+0x1e8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x13e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2f      	ldr	r2, [pc, #188]	; (8005684 <HAL_TIM_PWM_Start+0x1ec>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x13e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <HAL_TIM_PWM_Start+0x1f0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_Start+0x142>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_TIM_PWM_Start+0x144>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a20      	ldr	r2, [pc, #128]	; (8005678 <HAL_TIM_PWM_Start+0x1e0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_PWM_Start+0x194>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d013      	beq.n	800562c <HAL_TIM_PWM_Start+0x194>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_TIM_PWM_Start+0x1f4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_PWM_Start+0x194>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_TIM_PWM_Start+0x1f8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_PWM_Start+0x194>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_TIM_PWM_Start+0x1e4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_Start+0x194>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIM_PWM_Start+0x1e8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d115      	bne.n	8005658 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	4b18      	ldr	r3, [pc, #96]	; (8005694 <HAL_TIM_PWM_Start+0x1fc>)
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d015      	beq.n	800566a <HAL_TIM_PWM_Start+0x1d2>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005644:	d011      	beq.n	800566a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	e008      	b.n	800566a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e000      	b.n	800566c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40013400 	.word	0x40013400
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	00010007 	.word	0x00010007

08005698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0ff      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b14      	cmp	r3, #20
 80056c2:	f200 80f0 	bhi.w	80058a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005721 	.word	0x08005721
 80056d0:	080058a7 	.word	0x080058a7
 80056d4:	080058a7 	.word	0x080058a7
 80056d8:	080058a7 	.word	0x080058a7
 80056dc:	08005761 	.word	0x08005761
 80056e0:	080058a7 	.word	0x080058a7
 80056e4:	080058a7 	.word	0x080058a7
 80056e8:	080058a7 	.word	0x080058a7
 80056ec:	080057a3 	.word	0x080057a3
 80056f0:	080058a7 	.word	0x080058a7
 80056f4:	080058a7 	.word	0x080058a7
 80056f8:	080058a7 	.word	0x080058a7
 80056fc:	080057e3 	.word	0x080057e3
 8005700:	080058a7 	.word	0x080058a7
 8005704:	080058a7 	.word	0x080058a7
 8005708:	080058a7 	.word	0x080058a7
 800570c:	08005825 	.word	0x08005825
 8005710:	080058a7 	.word	0x080058a7
 8005714:	080058a7 	.word	0x080058a7
 8005718:	080058a7 	.word	0x080058a7
 800571c:	08005865 	.word	0x08005865
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f95a 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0208 	orr.w	r2, r2, #8
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0204 	bic.w	r2, r2, #4
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	619a      	str	r2, [r3, #24]
      break;
 800575e:	e0a5      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f9ca 	bl	8005b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6999      	ldr	r1, [r3, #24]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	619a      	str	r2, [r3, #24]
      break;
 80057a0:	e084      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fa33 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0208 	orr.w	r2, r2, #8
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0204 	bic.w	r2, r2, #4
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	61da      	str	r2, [r3, #28]
      break;
 80057e0:	e064      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fa9b 	bl	8005d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69d9      	ldr	r1, [r3, #28]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	021a      	lsls	r2, r3, #8
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	61da      	str	r2, [r3, #28]
      break;
 8005822:	e043      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fae4 	bl	8005df8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0208 	orr.w	r2, r2, #8
 800583e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0204 	bic.w	r2, r2, #4
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005862:	e023      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fb28 	bl	8005ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	021a      	lsls	r2, r3, #8
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058a4:	e002      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
      break;
 80058aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3c      	ldr	r2, [pc, #240]	; (80059c4 <TIM_Base_SetConfig+0x104>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x38>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x38>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a39      	ldr	r2, [pc, #228]	; (80059c8 <TIM_Base_SetConfig+0x108>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x38>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a38      	ldr	r2, [pc, #224]	; (80059cc <TIM_Base_SetConfig+0x10c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x38>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a37      	ldr	r2, [pc, #220]	; (80059d0 <TIM_Base_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <TIM_Base_SetConfig+0x104>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01b      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d017      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <TIM_Base_SetConfig+0x108>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a29      	ldr	r2, [pc, #164]	; (80059cc <TIM_Base_SetConfig+0x10c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <TIM_Base_SetConfig+0x110>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <TIM_Base_SetConfig+0x114>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <TIM_Base_SetConfig+0x118>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_Base_SetConfig+0x8a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	; (80059dc <TIM_Base_SetConfig+0x11c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <TIM_Base_SetConfig+0x104>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0xe8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <TIM_Base_SetConfig+0x110>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0xe8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <TIM_Base_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0xe8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a0f      	ldr	r2, [pc, #60]	; (80059d8 <TIM_Base_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0xe8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0e      	ldr	r2, [pc, #56]	; (80059dc <TIM_Base_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <TIM_OC1_SetConfig+0x10c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC1_SetConfig+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <TIM_OC1_SetConfig+0x110>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC1_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <TIM_OC1_SetConfig+0x114>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC1_SetConfig+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <TIM_OC1_SetConfig+0x118>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC1_SetConfig+0x80>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_OC1_SetConfig+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10c      	bne.n	8005a7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0308 	bic.w	r3, r3, #8
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 0304 	bic.w	r3, r3, #4
 8005a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <TIM_OC1_SetConfig+0x10c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_OC1_SetConfig+0xc2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <TIM_OC1_SetConfig+0x110>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_OC1_SetConfig+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <TIM_OC1_SetConfig+0x114>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_OC1_SetConfig+0xc2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <TIM_OC1_SetConfig+0x118>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC1_SetConfig+0xc2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <TIM_OC1_SetConfig+0x11c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d111      	bne.n	8005ac6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0210 	bic.w	r2, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0320 	bic.w	r3, r3, #32
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <TIM_OC2_SetConfig+0x100>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC2_SetConfig+0x6c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <TIM_OC2_SetConfig+0x104>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10d      	bne.n	8005b88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_OC2_SetConfig+0x100>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_OC2_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <TIM_OC2_SetConfig+0x104>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_OC2_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <TIM_OC2_SetConfig+0x108>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_OC2_SetConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <TIM_OC2_SetConfig+0x10c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_OC2_SetConfig+0xb0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <TIM_OC2_SetConfig+0x110>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d113      	bne.n	8005bd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <TIM_OC3_SetConfig+0xfc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_OC3_SetConfig+0x6a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <TIM_OC3_SetConfig+0x100>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d10d      	bne.n	8005c9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <TIM_OC3_SetConfig+0xfc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_OC3_SetConfig+0xae>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <TIM_OC3_SetConfig+0x100>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_OC3_SetConfig+0xae>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <TIM_OC3_SetConfig+0x104>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_OC3_SetConfig+0xae>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <TIM_OC3_SetConfig+0x108>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC3_SetConfig+0xae>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_OC3_SetConfig+0x10c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d113      	bne.n	8005cea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	031b      	lsls	r3, r3, #12
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <TIM_OC4_SetConfig+0xc0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00f      	beq.n	8005da8 <TIM_OC4_SetConfig+0x84>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <TIM_OC4_SetConfig+0xc4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00b      	beq.n	8005da8 <TIM_OC4_SetConfig+0x84>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <TIM_OC4_SetConfig+0xc8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d007      	beq.n	8005da8 <TIM_OC4_SetConfig+0x84>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <TIM_OC4_SetConfig+0xcc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC4_SetConfig+0x84>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <TIM_OC4_SetConfig+0xd0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d109      	bne.n	8005dbc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40013400 	.word	0x40013400
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40014400 	.word	0x40014400
 8005df4:	40014800 	.word	0x40014800

08005df8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <TIM_OC5_SetConfig+0xb4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_OC5_SetConfig+0x7a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <TIM_OC5_SetConfig+0xb8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_OC5_SetConfig+0x7a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <TIM_OC5_SetConfig+0xbc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC5_SetConfig+0x7a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a14      	ldr	r2, [pc, #80]	; (8005eb8 <TIM_OC5_SetConfig+0xc0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC5_SetConfig+0x7a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <TIM_OC5_SetConfig+0xc4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d109      	bne.n	8005e86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40013400 	.word	0x40013400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800

08005ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	051b      	lsls	r3, r3, #20
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <TIM_OC6_SetConfig+0xb8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <TIM_OC6_SetConfig+0x7c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <TIM_OC6_SetConfig+0xbc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_OC6_SetConfig+0x7c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <TIM_OC6_SetConfig+0xc0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_OC6_SetConfig+0x7c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <TIM_OC6_SetConfig+0xc4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC6_SetConfig+0x7c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <TIM_OC6_SetConfig+0xc8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d109      	bne.n	8005f50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	401a      	ands	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1a      	ldr	r2, [r3, #32]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e063      	b.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d108      	bne.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800602a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d013      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10c      	bne.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40014000 	.word	0x40014000

080060d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e040      	b.n	800616c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fc58 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2224      	movs	r2, #36	; 0x24
 8006104:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fc12 	bl	8006940 <UART_SetConfig>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e022      	b.n	800616c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fddc 	bl	8006cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fe63 	bl	8006e30 <UART_CheckIdleState>
 800616a:	4603      	mov	r3, r0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	2b20      	cmp	r3, #32
 8006188:	d13d      	bne.n	8006206 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_UART_Receive_IT+0x22>
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e036      	b.n	8006208 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_UART_Receive_IT+0x34>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e02f      	b.n	8006208 <HAL_UART_Receive_IT+0x94>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d018      	beq.n	80061f6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e6      	bne.n	80061c4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	461a      	mov	r2, r3
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 ff25 	bl	800704c <UART_Start_Receive_IT>
 8006202:	4603      	mov	r3, r0
 8006204:	e000      	b.n	8006208 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006206:	2302      	movs	r3, #2
  }
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006222:	2b20      	cmp	r3, #32
 8006224:	d178      	bne.n	8006318 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Transmit_DMA+0x22>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e071      	b.n	800631a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Transmit_DMA+0x34>
 8006240:	2302      	movs	r3, #2
 8006242:	e06a      	b.n	800631a <HAL_UART_Transmit_DMA+0x10a>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d02b      	beq.n	80062d0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	4a29      	ldr	r2, [pc, #164]	; (8006324 <HAL_UART_Transmit_DMA+0x114>)
 800627e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006284:	4a28      	ldr	r2, [pc, #160]	; (8006328 <HAL_UART_Transmit_DMA+0x118>)
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628c:	4a27      	ldr	r2, [pc, #156]	; (800632c <HAL_UART_Transmit_DMA+0x11c>)
 800628e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a0:	4619      	mov	r1, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3328      	adds	r3, #40	; 0x28
 80062a8:	461a      	mov	r2, r3
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	f7fd f902 	bl	80034b4 <HAL_DMA_Start_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00c      	beq.n	80062d0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2210      	movs	r2, #16
 80062ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e024      	b.n	800631a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2240      	movs	r2, #64	; 0x40
 80062d6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	613b      	str	r3, [r7, #16]
   return(result);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	623a      	str	r2, [r7, #32]
 8006302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	61bb      	str	r3, [r7, #24]
   return(result);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e5      	bne.n	80062e0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	0800728f 	.word	0x0800728f
 8006328:	08007323 	.word	0x08007323
 800632c:	0800733f 	.word	0x0800733f

08006330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0ba      	sub	sp, #232	; 0xe8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006356:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800635a:	f640 030f 	movw	r3, #2063	; 0x80f
 800635e:	4013      	ands	r3, r2
 8006360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d115      	bne.n	8006398 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 82a3 	beq.w	80068d4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
      }
      return;
 8006396:	e29d      	b.n	80068d4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8117 	beq.w	80065d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063b2:	4b85      	ldr	r3, [pc, #532]	; (80065c8 <HAL_UART_IRQHandler+0x298>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 810a 	beq.w	80065d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d011      	beq.n	80063ec <HAL_UART_IRQHandler+0xbc>
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2201      	movs	r2, #1
 80063da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e2:	f043 0201 	orr.w	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d011      	beq.n	800641c <HAL_UART_IRQHandler+0xec>
 80063f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2202      	movs	r2, #2
 800640a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006412:	f043 0204 	orr.w	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d011      	beq.n	800644c <HAL_UART_IRQHandler+0x11c>
 8006428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2204      	movs	r2, #4
 800643a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006442:	f043 0202 	orr.w	r2, r3, #2
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800644c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d017      	beq.n	8006488 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006468:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2208      	movs	r2, #8
 8006476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647e:	f043 0208 	orr.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006490:	2b00      	cmp	r3, #0
 8006492:	d012      	beq.n	80064ba <HAL_UART_IRQHandler+0x18a>
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8209 	beq.w	80068d8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d005      	beq.n	8006512 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04f      	beq.n	80065b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fe58 	bl	80071c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d141      	bne.n	80065aa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800653c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3308      	adds	r3, #8
 800654e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800655e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800656a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1d9      	bne.n	8006526 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a13      	ldr	r2, [pc, #76]	; (80065cc <HAL_UART_IRQHandler+0x29c>)
 8006580:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	4618      	mov	r0, r3
 8006588:	f7fd f82c 	bl	80035e4 <HAL_DMA_Abort_IT>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800659c:	4610      	mov	r0, r2
 800659e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e00f      	b.n	80065c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9b6 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	e00b      	b.n	80065c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9b2 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	e007      	b.n	80065c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9ae 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065c0:	e18a      	b.n	80068d8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	bf00      	nop
    return;
 80065c4:	e188      	b.n	80068d8 <HAL_UART_IRQHandler+0x5a8>
 80065c6:	bf00      	nop
 80065c8:	04000120 	.word	0x04000120
 80065cc:	080073bb 	.word	0x080073bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 8143 	bne.w	8006860 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 813c 	beq.w	8006860 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8135 	beq.w	8006860 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2210      	movs	r2, #16
 80065fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	f040 80b1 	bne.w	8006770 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800661a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 815c 	beq.w	80068dc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800662a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800662e:	429a      	cmp	r2, r3
 8006630:	f080 8154 	bcs.w	80068dc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800663a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b20      	cmp	r3, #32
 8006646:	f000 8085 	beq.w	8006754 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800665e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006678:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006680:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800668c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1da      	bne.n	800664a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e1      	bne.n	8006694 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e3      	bne.n	80066d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006736:	65bb      	str	r3, [r7, #88]	; 0x58
 8006738:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800673c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e4      	bne.n	8006714 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4618      	mov	r0, r3
 8006750:	f7fc ff0f 	bl	8003572 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006760:	b29b      	uxth	r3, r3
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8dd 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676e:	e0b5      	b.n	80068dc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800677c:	b29b      	uxth	r3, r3
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a7 	beq.w	80068e0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80a2 	beq.w	80068e0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067be:	647b      	str	r3, [r7, #68]	; 0x44
 80067c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e4      	bne.n	800679c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	623b      	str	r3, [r7, #32]
   return(result);
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067f6:	633a      	str	r2, [r7, #48]	; 0x30
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e3      	bne.n	80067d2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60fb      	str	r3, [r7, #12]
   return(result);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	69b9      	ldr	r1, [r7, #24]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	617b      	str	r3, [r7, #20]
   return(result);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e4      	bne.n	800681c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006852:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f865 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800685e:	e03f      	b.n	80068e0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <HAL_UART_IRQHandler+0x55a>
 800686c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006880:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 ff35 	bl	80076f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006888:	e02d      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01c      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
    }
    return;
 80068b2:	e017      	b.n	80068e4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fd8a 	bl	80073e6 <UART_EndTransmit_IT>
    return;
 80068d2:	e008      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80068d4:	bf00      	nop
 80068d6:	e006      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80068d8:	bf00      	nop
 80068da:	e004      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80068dc:	bf00      	nop
 80068de:	e002      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80068e0:	bf00      	nop
 80068e2:	e000      	b.n	80068e6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80068e4:	bf00      	nop
  }

}
 80068e6:	37e8      	adds	r7, #232	; 0xe8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800696e:	f023 030c 	bic.w	r3, r3, #12
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	430b      	orrs	r3, r1
 800697a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4aa8      	ldr	r2, [pc, #672]	; (8006c5c <UART_SetConfig+0x31c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d120      	bne.n	8006a02 <UART_SetConfig+0xc2>
 80069c0:	4ba7      	ldr	r3, [pc, #668]	; (8006c60 <UART_SetConfig+0x320>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d817      	bhi.n	80069fc <UART_SetConfig+0xbc>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x94>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	080069f7 	.word	0x080069f7
 80069e0:	080069eb 	.word	0x080069eb
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e0b5      	b.n	8006b56 <UART_SetConfig+0x216>
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e0b2      	b.n	8006b56 <UART_SetConfig+0x216>
 80069f0:	2304      	movs	r3, #4
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e0af      	b.n	8006b56 <UART_SetConfig+0x216>
 80069f6:	2308      	movs	r3, #8
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e0ac      	b.n	8006b56 <UART_SetConfig+0x216>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e0a9      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a97      	ldr	r2, [pc, #604]	; (8006c64 <UART_SetConfig+0x324>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d124      	bne.n	8006a56 <UART_SetConfig+0x116>
 8006a0c:	4b94      	ldr	r3, [pc, #592]	; (8006c60 <UART_SetConfig+0x320>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a18:	d011      	beq.n	8006a3e <UART_SetConfig+0xfe>
 8006a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a1e:	d817      	bhi.n	8006a50 <UART_SetConfig+0x110>
 8006a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a24:	d011      	beq.n	8006a4a <UART_SetConfig+0x10a>
 8006a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a2a:	d811      	bhi.n	8006a50 <UART_SetConfig+0x110>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <UART_SetConfig+0xf8>
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a34:	d006      	beq.n	8006a44 <UART_SetConfig+0x104>
 8006a36:	e00b      	b.n	8006a50 <UART_SetConfig+0x110>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e08b      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e088      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a44:	2304      	movs	r3, #4
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e085      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e082      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a50:	2310      	movs	r3, #16
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e07f      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <UART_SetConfig+0x328>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d124      	bne.n	8006aaa <UART_SetConfig+0x16a>
 8006a60:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <UART_SetConfig+0x320>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a6c:	d011      	beq.n	8006a92 <UART_SetConfig+0x152>
 8006a6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a72:	d817      	bhi.n	8006aa4 <UART_SetConfig+0x164>
 8006a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a78:	d011      	beq.n	8006a9e <UART_SetConfig+0x15e>
 8006a7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a7e:	d811      	bhi.n	8006aa4 <UART_SetConfig+0x164>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <UART_SetConfig+0x14c>
 8006a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a88:	d006      	beq.n	8006a98 <UART_SetConfig+0x158>
 8006a8a:	e00b      	b.n	8006aa4 <UART_SetConfig+0x164>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e061      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a92:	2302      	movs	r3, #2
 8006a94:	77fb      	strb	r3, [r7, #31]
 8006a96:	e05e      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e05b      	b.n	8006b56 <UART_SetConfig+0x216>
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e058      	b.n	8006b56 <UART_SetConfig+0x216>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e055      	b.n	8006b56 <UART_SetConfig+0x216>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6f      	ldr	r2, [pc, #444]	; (8006c6c <UART_SetConfig+0x32c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d124      	bne.n	8006afe <UART_SetConfig+0x1be>
 8006ab4:	4b6a      	ldr	r3, [pc, #424]	; (8006c60 <UART_SetConfig+0x320>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ac0:	d011      	beq.n	8006ae6 <UART_SetConfig+0x1a6>
 8006ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ac6:	d817      	bhi.n	8006af8 <UART_SetConfig+0x1b8>
 8006ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006acc:	d011      	beq.n	8006af2 <UART_SetConfig+0x1b2>
 8006ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ad2:	d811      	bhi.n	8006af8 <UART_SetConfig+0x1b8>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <UART_SetConfig+0x1a0>
 8006ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006adc:	d006      	beq.n	8006aec <UART_SetConfig+0x1ac>
 8006ade:	e00b      	b.n	8006af8 <UART_SetConfig+0x1b8>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e037      	b.n	8006b56 <UART_SetConfig+0x216>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	77fb      	strb	r3, [r7, #31]
 8006aea:	e034      	b.n	8006b56 <UART_SetConfig+0x216>
 8006aec:	2304      	movs	r3, #4
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e031      	b.n	8006b56 <UART_SetConfig+0x216>
 8006af2:	2308      	movs	r3, #8
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e02e      	b.n	8006b56 <UART_SetConfig+0x216>
 8006af8:	2310      	movs	r3, #16
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e02b      	b.n	8006b56 <UART_SetConfig+0x216>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a5b      	ldr	r2, [pc, #364]	; (8006c70 <UART_SetConfig+0x330>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d124      	bne.n	8006b52 <UART_SetConfig+0x212>
 8006b08:	4b55      	ldr	r3, [pc, #340]	; (8006c60 <UART_SetConfig+0x320>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b14:	d011      	beq.n	8006b3a <UART_SetConfig+0x1fa>
 8006b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b1a:	d817      	bhi.n	8006b4c <UART_SetConfig+0x20c>
 8006b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b20:	d011      	beq.n	8006b46 <UART_SetConfig+0x206>
 8006b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b26:	d811      	bhi.n	8006b4c <UART_SetConfig+0x20c>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <UART_SetConfig+0x1f4>
 8006b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b30:	d006      	beq.n	8006b40 <UART_SetConfig+0x200>
 8006b32:	e00b      	b.n	8006b4c <UART_SetConfig+0x20c>
 8006b34:	2300      	movs	r3, #0
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	77fb      	strb	r3, [r7, #31]
 8006b3e:	e00a      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b40:	2304      	movs	r3, #4
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e007      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b46:	2308      	movs	r3, #8
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e004      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e001      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b52:	2310      	movs	r3, #16
 8006b54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5e:	d15c      	bne.n	8006c1a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006b60:	7ffb      	ldrb	r3, [r7, #31]
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d827      	bhi.n	8006bb6 <UART_SetConfig+0x276>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0x22c>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006b99 	.word	0x08006b99
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	08006bb7 	.word	0x08006bb7
 8006b7c:	08006ba7 	.word	0x08006ba7
 8006b80:	08006bb7 	.word	0x08006bb7
 8006b84:	08006bb7 	.word	0x08006bb7
 8006b88:	08006bb7 	.word	0x08006bb7
 8006b8c:	08006baf 	.word	0x08006baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b90:	f7fe fa36 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006b94:	61b8      	str	r0, [r7, #24]
        break;
 8006b96:	e013      	b.n	8006bc0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b98:	f7fe fa54 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006b9c:	61b8      	str	r0, [r7, #24]
        break;
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba0:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <UART_SetConfig+0x334>)
 8006ba2:	61bb      	str	r3, [r7, #24]
        break;
 8006ba4:	e00c      	b.n	8006bc0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba6:	f7fe f9b5 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8006baa:	61b8      	str	r0, [r7, #24]
        break;
 8006bac:	e008      	b.n	8006bc0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bb2:	61bb      	str	r3, [r7, #24]
        break;
 8006bb4:	e004      	b.n	8006bc0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	77bb      	strb	r3, [r7, #30]
        break;
 8006bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8084 	beq.w	8006cd0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	005a      	lsls	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	441a      	add	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d916      	bls.n	8006c14 <UART_SetConfig+0x2d4>
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d212      	bcs.n	8006c14 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f023 030f 	bic.w	r3, r3, #15
 8006bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	89fb      	ldrh	r3, [r7, #14]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	89fa      	ldrh	r2, [r7, #14]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	e05d      	b.n	8006cd0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77bb      	strb	r3, [r7, #30]
 8006c18:	e05a      	b.n	8006cd0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d836      	bhi.n	8006c8e <UART_SetConfig+0x34e>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x2e8>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c79 	.word	0x08006c79
 8006c34:	08006c8f 	.word	0x08006c8f
 8006c38:	08006c7f 	.word	0x08006c7f
 8006c3c:	08006c8f 	.word	0x08006c8f
 8006c40:	08006c8f 	.word	0x08006c8f
 8006c44:	08006c8f 	.word	0x08006c8f
 8006c48:	08006c87 	.word	0x08006c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe f9d8 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61b8      	str	r0, [r7, #24]
        break;
 8006c52:	e021      	b.n	8006c98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c54:	f7fe f9f6 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006c58:	61b8      	str	r0, [r7, #24]
        break;
 8006c5a:	e01d      	b.n	8006c98 <UART_SetConfig+0x358>
 8006c5c:	40013800 	.word	0x40013800
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40004400 	.word	0x40004400
 8006c68:	40004800 	.word	0x40004800
 8006c6c:	40004c00 	.word	0x40004c00
 8006c70:	40005000 	.word	0x40005000
 8006c74:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <UART_SetConfig+0x3a8>)
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e00c      	b.n	8006c98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fe f949 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8006c82:	61b8      	str	r0, [r7, #24]
        break;
 8006c84:	e008      	b.n	8006c98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8a:	61bb      	str	r3, [r7, #24]
        break;
 8006c8c:	e004      	b.n	8006c98 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	77bb      	strb	r3, [r7, #30]
        break;
 8006c96:	bf00      	nop
    }

    if (pclk != 0U)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085a      	lsrs	r2, r3, #1
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	441a      	add	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b0f      	cmp	r3, #15
 8006cb8:	d908      	bls.n	8006ccc <UART_SetConfig+0x38c>
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d204      	bcs.n	8006ccc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e001      	b.n	8006cd0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3720      	adds	r7, #32
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	007a1200 	.word	0x007a1200

08006cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01a      	beq.n	8006e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dea:	d10a      	bne.n	8006e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e40:	f7fa ff0e 	bl	8001c60 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d10e      	bne.n	8006e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f82d 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e023      	b.n	8006eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d10e      	bne.n	8006e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f817 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e00d      	b.n	8006eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b09c      	sub	sp, #112	; 0x70
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed2:	e0a5      	b.n	8007020 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	f000 80a1 	beq.w	8007020 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ede:	f7fa febf 	bl	8001c60 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d13e      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f08:	667b      	str	r3, [r7, #100]	; 0x64
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e6      	bne.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e067      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d04f      	beq.n	8007020 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d147      	bne.n	8007020 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e6      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	613b      	str	r3, [r7, #16]
   return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fec:	623a      	str	r2, [r7, #32]
 8006fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e010      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69da      	ldr	r2, [r3, #28]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4013      	ands	r3, r2
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	bf0c      	ite	eq
 8007030:	2301      	moveq	r3, #1
 8007032:	2300      	movne	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	429a      	cmp	r2, r3
 800703c:	f43f af4a 	beq.w	8006ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3770      	adds	r7, #112	; 0x70
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800704c:	b480      	push	{r7}
 800704e:	b091      	sub	sp, #68	; 0x44
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707e:	d10e      	bne.n	800709e <UART_Start_Receive_IT+0x52>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <UART_Start_Receive_IT+0x48>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800708e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007092:	e01a      	b.n	80070ca <UART_Start_Receive_IT+0x7e>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	22ff      	movs	r2, #255	; 0xff
 8007098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800709c:	e015      	b.n	80070ca <UART_Start_Receive_IT+0x7e>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10d      	bne.n	80070c2 <UART_Start_Receive_IT+0x76>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <UART_Start_Receive_IT+0x6c>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	22ff      	movs	r2, #255	; 0xff
 80070b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070b6:	e008      	b.n	80070ca <UART_Start_Receive_IT+0x7e>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	227f      	movs	r2, #127	; 0x7f
 80070bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070c0:	e003      	b.n	80070ca <UART_Start_Receive_IT+0x7e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2222      	movs	r2, #34	; 0x22
 80070d6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070f8:	637a      	str	r2, [r7, #52]	; 0x34
 80070fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e5      	bne.n	80070d8 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007114:	d107      	bne.n	8007126 <UART_Start_Receive_IT+0xda>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <UART_Start_Receive_IT+0x128>)
 8007122:	665a      	str	r2, [r3, #100]	; 0x64
 8007124:	e002      	b.n	800712c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a13      	ldr	r2, [pc, #76]	; (8007178 <UART_Start_Receive_IT+0x12c>)
 800712a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	613b      	str	r3, [r7, #16]
   return(result);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	69f9      	ldr	r1, [r7, #28]
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3744      	adds	r7, #68	; 0x44
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	08007597 	.word	0x08007597
 8007178:	0800743b 	.word	0x0800743b

0800717c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b089      	sub	sp, #36	; 0x24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60bb      	str	r3, [r7, #8]
   return(result);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6979      	ldr	r1, [r7, #20]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	613b      	str	r3, [r7, #16]
   return(result);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	679a      	str	r2, [r3, #120]	; 0x78
}
 80071bc:	bf00      	nop
 80071be:	3724      	adds	r7, #36	; 0x24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b095      	sub	sp, #84	; 0x54
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40
 80071f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e6      	bne.n	80071d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	61fb      	str	r3, [r7, #28]
   return(result);
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	2b01      	cmp	r3, #1
 800723c:	d118      	bne.n	8007270 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	60bb      	str	r3, [r7, #8]
   return(result);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f023 0310 	bic.w	r3, r3, #16
 8007252:	647b      	str	r3, [r7, #68]	; 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6979      	ldr	r1, [r7, #20]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	613b      	str	r3, [r7, #16]
   return(result);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007282:	bf00      	nop
 8007284:	3754      	adds	r7, #84	; 0x54
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b090      	sub	sp, #64	; 0x40
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d037      	beq.n	8007314 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3308      	adds	r3, #8
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	623b      	str	r3, [r7, #32]
   return(result);
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072cc:	633a      	str	r2, [r7, #48]	; 0x30
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	69b9      	ldr	r1, [r7, #24]
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	617b      	str	r3, [r7, #20]
   return(result);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007312:	e002      	b.n	800731a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007314:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007316:	f7ff fae9 	bl	80068ec <HAL_UART_TxCpltCallback>
}
 800731a:	bf00      	nop
 800731c:	3740      	adds	r7, #64	; 0x40
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff fae5 	bl	8006900 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007350:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d109      	bne.n	800737a <UART_DMAError+0x3c>
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b21      	cmp	r3, #33	; 0x21
 800736a:	d106      	bne.n	800737a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2200      	movs	r2, #0
 8007370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007374:	6978      	ldr	r0, [r7, #20]
 8007376:	f7ff ff01 	bl	800717c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d109      	bne.n	800739c <UART_DMAError+0x5e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b22      	cmp	r3, #34	; 0x22
 800738c:	d106      	bne.n	800739c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007396:	6978      	ldr	r0, [r7, #20]
 8007398:	f7ff ff16 	bl	80071c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a2:	f043 0210 	orr.w	r2, r3, #16
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ac:	6978      	ldr	r0, [r7, #20]
 80073ae:	f7ff fab1 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fa9b 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b088      	sub	sp, #32
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6979      	ldr	r1, [r7, #20]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	613b      	str	r3, [r7, #16]
   return(result);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fa5d 	bl	80068ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007432:	bf00      	nop
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b096      	sub	sp, #88	; 0x58
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007448:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007450:	2b22      	cmp	r3, #34	; 0x22
 8007452:	f040 8094 	bne.w	800757e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800745c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007460:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007464:	b2d9      	uxtb	r1, r3
 8007466:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	400a      	ands	r2, r1
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d177      	bne.n	800758e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b2:	653b      	str	r3, [r7, #80]	; 0x50
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
 80074be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	623b      	str	r3, [r7, #32]
   return(result);
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074f0:	633a      	str	r2, [r7, #48]	; 0x30
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e5      	bne.n	80074d0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007514:	2b01      	cmp	r3, #1
 8007516:	d12e      	bne.n	8007576 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60fb      	str	r3, [r7, #12]
   return(result);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	617b      	str	r3, [r7, #20]
   return(result);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d103      	bne.n	8007566 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2210      	movs	r2, #16
 8007564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f9da 	bl	8006928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007574:	e00b      	b.n	800758e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7f9 fdc6 	bl	8001108 <HAL_UART_RxCpltCallback>
}
 800757c:	e007      	b.n	800758e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0208 	orr.w	r2, r2, #8
 800758c:	619a      	str	r2, [r3, #24]
}
 800758e:	bf00      	nop
 8007590:	3758      	adds	r7, #88	; 0x58
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b096      	sub	sp, #88	; 0x58
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ac:	2b22      	cmp	r3, #34	; 0x22
 80075ae:	f040 8094 	bne.w	80076da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ca:	4013      	ands	r3, r2
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d6:	1c9a      	adds	r2, r3, #2
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d177      	bne.n	80076ea <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	643b      	str	r3, [r7, #64]	; 0x40
 800761a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800761e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	61fb      	str	r3, [r7, #28]
   return(result);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	2b01      	cmp	r3, #1
 8007672:	d12e      	bne.n	80076d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60bb      	str	r3, [r7, #8]
   return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f023 0310 	bic.w	r3, r3, #16
 800768e:	647b      	str	r3, [r7, #68]	; 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6979      	ldr	r1, [r7, #20]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	613b      	str	r3, [r7, #16]
   return(result);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d103      	bne.n	80076c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2210      	movs	r2, #16
 80076c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff f92c 	bl	8006928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076d0:	e00b      	b.n	80076ea <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7f9 fd18 	bl	8001108 <HAL_UART_RxCpltCallback>
}
 80076d8:	e007      	b.n	80076ea <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	619a      	str	r2, [r3, #24]
}
 80076ea:	bf00      	nop
 80076ec:	3758      	adds	r7, #88	; 0x58
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	2000000c 	.word	0x2000000c

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	; (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	; (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	; (8007758 <__libc_init_array+0x44>)
 8007728:	f004 fd1c 	bl	800c164 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	0800c6cc 	.word	0x0800c6cc
 8007750:	0800c6cc 	.word	0x0800c6cc
 8007754:	0800c6cc 	.word	0x0800c6cc
 8007758:	0800c6d0 	.word	0x0800c6d0

0800775c <memset>:
 800775c:	4402      	add	r2, r0
 800775e:	4603      	mov	r3, r0
 8007760:	4293      	cmp	r3, r2
 8007762:	d100      	bne.n	8007766 <memset+0xa>
 8007764:	4770      	bx	lr
 8007766:	f803 1b01 	strb.w	r1, [r3], #1
 800776a:	e7f9      	b.n	8007760 <memset+0x4>

0800776c <__cvt>:
 800776c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	ec55 4b10 	vmov	r4, r5, d0
 8007774:	2d00      	cmp	r5, #0
 8007776:	460e      	mov	r6, r1
 8007778:	4619      	mov	r1, r3
 800777a:	462b      	mov	r3, r5
 800777c:	bfbb      	ittet	lt
 800777e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007782:	461d      	movlt	r5, r3
 8007784:	2300      	movge	r3, #0
 8007786:	232d      	movlt	r3, #45	; 0x2d
 8007788:	700b      	strb	r3, [r1, #0]
 800778a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007790:	4691      	mov	r9, r2
 8007792:	f023 0820 	bic.w	r8, r3, #32
 8007796:	bfbc      	itt	lt
 8007798:	4622      	movlt	r2, r4
 800779a:	4614      	movlt	r4, r2
 800779c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a0:	d005      	beq.n	80077ae <__cvt+0x42>
 80077a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077a6:	d100      	bne.n	80077aa <__cvt+0x3e>
 80077a8:	3601      	adds	r6, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	e000      	b.n	80077b0 <__cvt+0x44>
 80077ae:	2103      	movs	r1, #3
 80077b0:	ab03      	add	r3, sp, #12
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	ab02      	add	r3, sp, #8
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	ec45 4b10 	vmov	d0, r4, r5
 80077bc:	4653      	mov	r3, sl
 80077be:	4632      	mov	r2, r6
 80077c0:	f001 fefa 	bl	80095b8 <_dtoa_r>
 80077c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077c8:	4607      	mov	r7, r0
 80077ca:	d102      	bne.n	80077d2 <__cvt+0x66>
 80077cc:	f019 0f01 	tst.w	r9, #1
 80077d0:	d022      	beq.n	8007818 <__cvt+0xac>
 80077d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077d6:	eb07 0906 	add.w	r9, r7, r6
 80077da:	d110      	bne.n	80077fe <__cvt+0x92>
 80077dc:	783b      	ldrb	r3, [r7, #0]
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	d10a      	bne.n	80077f8 <__cvt+0x8c>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ee:	b918      	cbnz	r0, 80077f8 <__cvt+0x8c>
 80077f0:	f1c6 0601 	rsb	r6, r6, #1
 80077f4:	f8ca 6000 	str.w	r6, [sl]
 80077f8:	f8da 3000 	ldr.w	r3, [sl]
 80077fc:	4499      	add	r9, r3
 80077fe:	2200      	movs	r2, #0
 8007800:	2300      	movs	r3, #0
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	f7f9 f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800780a:	b108      	cbz	r0, 8007810 <__cvt+0xa4>
 800780c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007810:	2230      	movs	r2, #48	; 0x30
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	454b      	cmp	r3, r9
 8007816:	d307      	bcc.n	8007828 <__cvt+0xbc>
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800781c:	1bdb      	subs	r3, r3, r7
 800781e:	4638      	mov	r0, r7
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	b004      	add	sp, #16
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	1c59      	adds	r1, r3, #1
 800782a:	9103      	str	r1, [sp, #12]
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	e7f0      	b.n	8007812 <__cvt+0xa6>

08007830 <__exponent>:
 8007830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007832:	4603      	mov	r3, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	bfb8      	it	lt
 8007838:	4249      	neglt	r1, r1
 800783a:	f803 2b02 	strb.w	r2, [r3], #2
 800783e:	bfb4      	ite	lt
 8007840:	222d      	movlt	r2, #45	; 0x2d
 8007842:	222b      	movge	r2, #43	; 0x2b
 8007844:	2909      	cmp	r1, #9
 8007846:	7042      	strb	r2, [r0, #1]
 8007848:	dd2a      	ble.n	80078a0 <__exponent+0x70>
 800784a:	f10d 0407 	add.w	r4, sp, #7
 800784e:	46a4      	mov	ip, r4
 8007850:	270a      	movs	r7, #10
 8007852:	46a6      	mov	lr, r4
 8007854:	460a      	mov	r2, r1
 8007856:	fb91 f6f7 	sdiv	r6, r1, r7
 800785a:	fb07 1516 	mls	r5, r7, r6, r1
 800785e:	3530      	adds	r5, #48	; 0x30
 8007860:	2a63      	cmp	r2, #99	; 0x63
 8007862:	f104 34ff 	add.w	r4, r4, #4294967295
 8007866:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800786a:	4631      	mov	r1, r6
 800786c:	dcf1      	bgt.n	8007852 <__exponent+0x22>
 800786e:	3130      	adds	r1, #48	; 0x30
 8007870:	f1ae 0502 	sub.w	r5, lr, #2
 8007874:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007878:	1c44      	adds	r4, r0, #1
 800787a:	4629      	mov	r1, r5
 800787c:	4561      	cmp	r1, ip
 800787e:	d30a      	bcc.n	8007896 <__exponent+0x66>
 8007880:	f10d 0209 	add.w	r2, sp, #9
 8007884:	eba2 020e 	sub.w	r2, r2, lr
 8007888:	4565      	cmp	r5, ip
 800788a:	bf88      	it	hi
 800788c:	2200      	movhi	r2, #0
 800788e:	4413      	add	r3, r2
 8007890:	1a18      	subs	r0, r3, r0
 8007892:	b003      	add	sp, #12
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800789e:	e7ed      	b.n	800787c <__exponent+0x4c>
 80078a0:	2330      	movs	r3, #48	; 0x30
 80078a2:	3130      	adds	r1, #48	; 0x30
 80078a4:	7083      	strb	r3, [r0, #2]
 80078a6:	70c1      	strb	r1, [r0, #3]
 80078a8:	1d03      	adds	r3, r0, #4
 80078aa:	e7f1      	b.n	8007890 <__exponent+0x60>

080078ac <_printf_float>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	ed2d 8b02 	vpush	{d8}
 80078b4:	b08d      	sub	sp, #52	; 0x34
 80078b6:	460c      	mov	r4, r1
 80078b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078bc:	4616      	mov	r6, r2
 80078be:	461f      	mov	r7, r3
 80078c0:	4605      	mov	r5, r0
 80078c2:	f003 f98d 	bl	800abe0 <_localeconv_r>
 80078c6:	f8d0 a000 	ldr.w	sl, [r0]
 80078ca:	4650      	mov	r0, sl
 80078cc:	f7f8 fc80 	bl	80001d0 <strlen>
 80078d0:	2300      	movs	r3, #0
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	f8d8 3000 	ldr.w	r3, [r8]
 80078dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078e0:	3307      	adds	r3, #7
 80078e2:	f023 0307 	bic.w	r3, r3, #7
 80078e6:	f103 0208 	add.w	r2, r3, #8
 80078ea:	f8c8 2000 	str.w	r2, [r8]
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	f8cd 8018 	str.w	r8, [sp, #24]
 8007904:	ee08 0a10 	vmov	s16, r0
 8007908:	4b9f      	ldr	r3, [pc, #636]	; (8007b88 <_printf_float+0x2dc>)
 800790a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800790e:	f04f 32ff 	mov.w	r2, #4294967295
 8007912:	f7f9 f90b 	bl	8000b2c <__aeabi_dcmpun>
 8007916:	bb88      	cbnz	r0, 800797c <_printf_float+0xd0>
 8007918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800791c:	4b9a      	ldr	r3, [pc, #616]	; (8007b88 <_printf_float+0x2dc>)
 800791e:	f04f 32ff 	mov.w	r2, #4294967295
 8007922:	f7f9 f8e5 	bl	8000af0 <__aeabi_dcmple>
 8007926:	bb48      	cbnz	r0, 800797c <_printf_float+0xd0>
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	4640      	mov	r0, r8
 800792e:	4649      	mov	r1, r9
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	b110      	cbz	r0, 800793c <_printf_float+0x90>
 8007936:	232d      	movs	r3, #45	; 0x2d
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	4b93      	ldr	r3, [pc, #588]	; (8007b8c <_printf_float+0x2e0>)
 800793e:	4894      	ldr	r0, [pc, #592]	; (8007b90 <_printf_float+0x2e4>)
 8007940:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007944:	bf94      	ite	ls
 8007946:	4698      	movls	r8, r3
 8007948:	4680      	movhi	r8, r0
 800794a:	2303      	movs	r3, #3
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	f023 0204 	bic.w	r2, r3, #4
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	9700      	str	r7, [sp, #0]
 800795c:	4633      	mov	r3, r6
 800795e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f9d8 	bl	8007d18 <_printf_common>
 8007968:	3001      	adds	r0, #1
 800796a:	f040 8090 	bne.w	8007a8e <_printf_float+0x1e2>
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
 8007972:	b00d      	add	sp, #52	; 0x34
 8007974:	ecbd 8b02 	vpop	{d8}
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	f7f9 f8d2 	bl	8000b2c <__aeabi_dcmpun>
 8007988:	b140      	cbz	r0, 800799c <_printf_float+0xf0>
 800798a:	464b      	mov	r3, r9
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfbc      	itt	lt
 8007990:	232d      	movlt	r3, #45	; 0x2d
 8007992:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007996:	487f      	ldr	r0, [pc, #508]	; (8007b94 <_printf_float+0x2e8>)
 8007998:	4b7f      	ldr	r3, [pc, #508]	; (8007b98 <_printf_float+0x2ec>)
 800799a:	e7d1      	b.n	8007940 <_printf_float+0x94>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079a2:	9206      	str	r2, [sp, #24]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	d13f      	bne.n	8007a28 <_printf_float+0x17c>
 80079a8:	2306      	movs	r3, #6
 80079aa:	6063      	str	r3, [r4, #4]
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079b4:	2300      	movs	r3, #0
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	ab0a      	add	r3, sp, #40	; 0x28
 80079ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079be:	ab09      	add	r3, sp, #36	; 0x24
 80079c0:	ec49 8b10 	vmov	d0, r8, r9
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff fecd 	bl	800776c <__cvt>
 80079d2:	9b06      	ldr	r3, [sp, #24]
 80079d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d6:	2b47      	cmp	r3, #71	; 0x47
 80079d8:	4680      	mov	r8, r0
 80079da:	d108      	bne.n	80079ee <_printf_float+0x142>
 80079dc:	1cc8      	adds	r0, r1, #3
 80079de:	db02      	blt.n	80079e6 <_printf_float+0x13a>
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	4299      	cmp	r1, r3
 80079e4:	dd41      	ble.n	8007a6a <_printf_float+0x1be>
 80079e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80079ea:	fa5f fb8b 	uxtb.w	fp, fp
 80079ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079f2:	d820      	bhi.n	8007a36 <_printf_float+0x18a>
 80079f4:	3901      	subs	r1, #1
 80079f6:	465a      	mov	r2, fp
 80079f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079fc:	9109      	str	r1, [sp, #36]	; 0x24
 80079fe:	f7ff ff17 	bl	8007830 <__exponent>
 8007a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a04:	1813      	adds	r3, r2, r0
 8007a06:	2a01      	cmp	r2, #1
 8007a08:	4681      	mov	r9, r0
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	dc02      	bgt.n	8007a14 <_printf_float+0x168>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	07d2      	lsls	r2, r2, #31
 8007a12:	d501      	bpl.n	8007a18 <_printf_float+0x16c>
 8007a14:	3301      	adds	r3, #1
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d09c      	beq.n	800795a <_printf_float+0xae>
 8007a20:	232d      	movs	r3, #45	; 0x2d
 8007a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a26:	e798      	b.n	800795a <_printf_float+0xae>
 8007a28:	9a06      	ldr	r2, [sp, #24]
 8007a2a:	2a47      	cmp	r2, #71	; 0x47
 8007a2c:	d1be      	bne.n	80079ac <_printf_float+0x100>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1bc      	bne.n	80079ac <_printf_float+0x100>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e7b9      	b.n	80079aa <_printf_float+0xfe>
 8007a36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a3a:	d118      	bne.n	8007a6e <_printf_float+0x1c2>
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	dd0b      	ble.n	8007a5a <_printf_float+0x1ae>
 8007a42:	6121      	str	r1, [r4, #16]
 8007a44:	b913      	cbnz	r3, 8007a4c <_printf_float+0x1a0>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d502      	bpl.n	8007a52 <_printf_float+0x1a6>
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a54:	f04f 0900 	mov.w	r9, #0
 8007a58:	e7de      	b.n	8007a18 <_printf_float+0x16c>
 8007a5a:	b913      	cbnz	r3, 8007a62 <_printf_float+0x1b6>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	07d2      	lsls	r2, r2, #31
 8007a60:	d501      	bpl.n	8007a66 <_printf_float+0x1ba>
 8007a62:	3302      	adds	r3, #2
 8007a64:	e7f4      	b.n	8007a50 <_printf_float+0x1a4>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7f2      	b.n	8007a50 <_printf_float+0x1a4>
 8007a6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	4299      	cmp	r1, r3
 8007a72:	db05      	blt.n	8007a80 <_printf_float+0x1d4>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	6121      	str	r1, [r4, #16]
 8007a78:	07d8      	lsls	r0, r3, #31
 8007a7a:	d5ea      	bpl.n	8007a52 <_printf_float+0x1a6>
 8007a7c:	1c4b      	adds	r3, r1, #1
 8007a7e:	e7e7      	b.n	8007a50 <_printf_float+0x1a4>
 8007a80:	2900      	cmp	r1, #0
 8007a82:	bfd4      	ite	le
 8007a84:	f1c1 0202 	rsble	r2, r1, #2
 8007a88:	2201      	movgt	r2, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	e7e0      	b.n	8007a50 <_printf_float+0x1a4>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	055a      	lsls	r2, r3, #21
 8007a92:	d407      	bmi.n	8007aa4 <_printf_float+0x1f8>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	4642      	mov	r2, r8
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d12c      	bne.n	8007afc <_printf_float+0x250>
 8007aa2:	e764      	b.n	800796e <_printf_float+0xc2>
 8007aa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007aa8:	f240 80e0 	bls.w	8007c6c <_printf_float+0x3c0>
 8007aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f7f9 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d034      	beq.n	8007b26 <_printf_float+0x27a>
 8007abc:	4a37      	ldr	r2, [pc, #220]	; (8007b9c <_printf_float+0x2f0>)
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	f43f af51 	beq.w	800796e <_printf_float+0xc2>
 8007acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	db02      	blt.n	8007ada <_printf_float+0x22e>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	07d8      	lsls	r0, r3, #31
 8007ad8:	d510      	bpl.n	8007afc <_printf_float+0x250>
 8007ada:	ee18 3a10 	vmov	r3, s16
 8007ade:	4652      	mov	r2, sl
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af41 	beq.w	800796e <_printf_float+0xc2>
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	f104 091a 	add.w	r9, r4, #26
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4543      	cmp	r3, r8
 8007afa:	dc09      	bgt.n	8007b10 <_printf_float+0x264>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	079b      	lsls	r3, r3, #30
 8007b00:	f100 8105 	bmi.w	8007d0e <_printf_float+0x462>
 8007b04:	68e0      	ldr	r0, [r4, #12]
 8007b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	4618      	movlt	r0, r3
 8007b0e:	e730      	b.n	8007972 <_printf_float+0xc6>
 8007b10:	2301      	movs	r3, #1
 8007b12:	464a      	mov	r2, r9
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f af27 	beq.w	800796e <_printf_float+0xc2>
 8007b20:	f108 0801 	add.w	r8, r8, #1
 8007b24:	e7e6      	b.n	8007af4 <_printf_float+0x248>
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dc39      	bgt.n	8007ba0 <_printf_float+0x2f4>
 8007b2c:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <_printf_float+0x2f0>)
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f af19 	beq.w	800796e <_printf_float+0xc2>
 8007b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d102      	bne.n	8007b4a <_printf_float+0x29e>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	07d9      	lsls	r1, r3, #31
 8007b48:	d5d8      	bpl.n	8007afc <_printf_float+0x250>
 8007b4a:	ee18 3a10 	vmov	r3, s16
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af09 	beq.w	800796e <_printf_float+0xc2>
 8007b5c:	f04f 0900 	mov.w	r9, #0
 8007b60:	f104 0a1a 	add.w	sl, r4, #26
 8007b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b66:	425b      	negs	r3, r3
 8007b68:	454b      	cmp	r3, r9
 8007b6a:	dc01      	bgt.n	8007b70 <_printf_float+0x2c4>
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6e:	e792      	b.n	8007a96 <_printf_float+0x1ea>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f aef7 	beq.w	800796e <_printf_float+0xc2>
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	e7ee      	b.n	8007b64 <_printf_float+0x2b8>
 8007b86:	bf00      	nop
 8007b88:	7fefffff 	.word	0x7fefffff
 8007b8c:	0800c220 	.word	0x0800c220
 8007b90:	0800c224 	.word	0x0800c224
 8007b94:	0800c22c 	.word	0x0800c22c
 8007b98:	0800c228 	.word	0x0800c228
 8007b9c:	0800c230 	.word	0x0800c230
 8007ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	bfa8      	it	ge
 8007ba8:	461a      	movge	r2, r3
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	4691      	mov	r9, r2
 8007bae:	dc37      	bgt.n	8007c20 <_printf_float+0x374>
 8007bb0:	f04f 0b00 	mov.w	fp, #0
 8007bb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb8:	f104 021a 	add.w	r2, r4, #26
 8007bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	eba3 0309 	sub.w	r3, r3, r9
 8007bc4:	455b      	cmp	r3, fp
 8007bc6:	dc33      	bgt.n	8007c30 <_printf_float+0x384>
 8007bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	db3b      	blt.n	8007c48 <_printf_float+0x39c>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	07da      	lsls	r2, r3, #31
 8007bd4:	d438      	bmi.n	8007c48 <_printf_float+0x39c>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	9a05      	ldr	r2, [sp, #20]
 8007bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bdc:	1a9a      	subs	r2, r3, r2
 8007bde:	eba3 0901 	sub.w	r9, r3, r1
 8007be2:	4591      	cmp	r9, r2
 8007be4:	bfa8      	it	ge
 8007be6:	4691      	movge	r9, r2
 8007be8:	f1b9 0f00 	cmp.w	r9, #0
 8007bec:	dc35      	bgt.n	8007c5a <_printf_float+0x3ae>
 8007bee:	f04f 0800 	mov.w	r8, #0
 8007bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf6:	f104 0a1a 	add.w	sl, r4, #26
 8007bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	eba3 0309 	sub.w	r3, r3, r9
 8007c04:	4543      	cmp	r3, r8
 8007c06:	f77f af79 	ble.w	8007afc <_printf_float+0x250>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f aeaa 	beq.w	800796e <_printf_float+0xc2>
 8007c1a:	f108 0801 	add.w	r8, r8, #1
 8007c1e:	e7ec      	b.n	8007bfa <_printf_float+0x34e>
 8007c20:	4613      	mov	r3, r2
 8007c22:	4631      	mov	r1, r6
 8007c24:	4642      	mov	r2, r8
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d1c0      	bne.n	8007bb0 <_printf_float+0x304>
 8007c2e:	e69e      	b.n	800796e <_printf_float+0xc2>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f ae97 	beq.w	800796e <_printf_float+0xc2>
 8007c40:	9a05      	ldr	r2, [sp, #20]
 8007c42:	f10b 0b01 	add.w	fp, fp, #1
 8007c46:	e7b9      	b.n	8007bbc <_printf_float+0x310>
 8007c48:	ee18 3a10 	vmov	r3, s16
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	d1be      	bne.n	8007bd6 <_printf_float+0x32a>
 8007c58:	e689      	b.n	800796e <_printf_float+0xc2>
 8007c5a:	9a05      	ldr	r2, [sp, #20]
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	4442      	add	r2, r8
 8007c60:	4631      	mov	r1, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	d1c1      	bne.n	8007bee <_printf_float+0x342>
 8007c6a:	e680      	b.n	800796e <_printf_float+0xc2>
 8007c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c6e:	2a01      	cmp	r2, #1
 8007c70:	dc01      	bgt.n	8007c76 <_printf_float+0x3ca>
 8007c72:	07db      	lsls	r3, r3, #31
 8007c74:	d538      	bpl.n	8007ce8 <_printf_float+0x43c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae74 	beq.w	800796e <_printf_float+0xc2>
 8007c86:	ee18 3a10 	vmov	r3, s16
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f ae6b 	beq.w	800796e <_printf_float+0xc2>
 8007c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f7f8 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca4:	b9d8      	cbnz	r0, 8007cde <_printf_float+0x432>
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	f108 0201 	add.w	r2, r8, #1
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d10e      	bne.n	8007cd6 <_printf_float+0x42a>
 8007cb8:	e659      	b.n	800796e <_printf_float+0xc2>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	f43f ae52 	beq.w	800796e <_printf_float+0xc2>
 8007cca:	f108 0801 	add.w	r8, r8, #1
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4543      	cmp	r3, r8
 8007cd4:	dcf1      	bgt.n	8007cba <_printf_float+0x40e>
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cdc:	e6dc      	b.n	8007a98 <_printf_float+0x1ec>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	f104 0a1a 	add.w	sl, r4, #26
 8007ce6:	e7f2      	b.n	8007cce <_printf_float+0x422>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	4642      	mov	r2, r8
 8007cec:	e7df      	b.n	8007cae <_printf_float+0x402>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	464a      	mov	r2, r9
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f ae38 	beq.w	800796e <_printf_float+0xc2>
 8007cfe:	f108 0801 	add.w	r8, r8, #1
 8007d02:	68e3      	ldr	r3, [r4, #12]
 8007d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d06:	1a5b      	subs	r3, r3, r1
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	dcf0      	bgt.n	8007cee <_printf_float+0x442>
 8007d0c:	e6fa      	b.n	8007b04 <_printf_float+0x258>
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	f104 0919 	add.w	r9, r4, #25
 8007d16:	e7f4      	b.n	8007d02 <_printf_float+0x456>

08007d18 <_printf_common>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	4699      	mov	r9, r3
 8007d20:	688a      	ldr	r2, [r1, #8]
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	bfb8      	it	lt
 8007d2c:	4613      	movlt	r3, r2
 8007d2e:	6033      	str	r3, [r6, #0]
 8007d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d34:	4607      	mov	r7, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	b10a      	cbz	r2, 8007d3e <_printf_common+0x26>
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	0699      	lsls	r1, r3, #26
 8007d42:	bf42      	ittt	mi
 8007d44:	6833      	ldrmi	r3, [r6, #0]
 8007d46:	3302      	addmi	r3, #2
 8007d48:	6033      	strmi	r3, [r6, #0]
 8007d4a:	6825      	ldr	r5, [r4, #0]
 8007d4c:	f015 0506 	ands.w	r5, r5, #6
 8007d50:	d106      	bne.n	8007d60 <_printf_common+0x48>
 8007d52:	f104 0a19 	add.w	sl, r4, #25
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	6832      	ldr	r2, [r6, #0]
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	42ab      	cmp	r3, r5
 8007d5e:	dc26      	bgt.n	8007dae <_printf_common+0x96>
 8007d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d64:	1e13      	subs	r3, r2, #0
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	0692      	lsls	r2, r2, #26
 8007d6e:	d42b      	bmi.n	8007dc8 <_printf_common+0xb0>
 8007d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d74:	4649      	mov	r1, r9
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d01e      	beq.n	8007dbc <_printf_common+0xa4>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	68e5      	ldr	r5, [r4, #12]
 8007d82:	6832      	ldr	r2, [r6, #0]
 8007d84:	f003 0306 	and.w	r3, r3, #6
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	bf08      	it	eq
 8007d8c:	1aad      	subeq	r5, r5, r2
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	6922      	ldr	r2, [r4, #16]
 8007d92:	bf0c      	ite	eq
 8007d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d98:	2500      	movne	r5, #0
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bfc4      	itt	gt
 8007d9e:	1a9b      	subgt	r3, r3, r2
 8007da0:	18ed      	addgt	r5, r5, r3
 8007da2:	2600      	movs	r6, #0
 8007da4:	341a      	adds	r4, #26
 8007da6:	42b5      	cmp	r5, r6
 8007da8:	d11a      	bne.n	8007de0 <_printf_common+0xc8>
 8007daa:	2000      	movs	r0, #0
 8007dac:	e008      	b.n	8007dc0 <_printf_common+0xa8>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4652      	mov	r2, sl
 8007db2:	4649      	mov	r1, r9
 8007db4:	4638      	mov	r0, r7
 8007db6:	47c0      	blx	r8
 8007db8:	3001      	adds	r0, #1
 8007dba:	d103      	bne.n	8007dc4 <_printf_common+0xac>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	e7c6      	b.n	8007d56 <_printf_common+0x3e>
 8007dc8:	18e1      	adds	r1, r4, r3
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	2030      	movs	r0, #48	; 0x30
 8007dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dd2:	4422      	add	r2, r4
 8007dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ddc:	3302      	adds	r3, #2
 8007dde:	e7c7      	b.n	8007d70 <_printf_common+0x58>
 8007de0:	2301      	movs	r3, #1
 8007de2:	4622      	mov	r2, r4
 8007de4:	4649      	mov	r1, r9
 8007de6:	4638      	mov	r0, r7
 8007de8:	47c0      	blx	r8
 8007dea:	3001      	adds	r0, #1
 8007dec:	d0e6      	beq.n	8007dbc <_printf_common+0xa4>
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7d9      	b.n	8007da6 <_printf_common+0x8e>
	...

08007df4 <_printf_i>:
 8007df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	7e0f      	ldrb	r7, [r1, #24]
 8007dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dfc:	2f78      	cmp	r7, #120	; 0x78
 8007dfe:	4691      	mov	r9, r2
 8007e00:	4680      	mov	r8, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	469a      	mov	sl, r3
 8007e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e0a:	d807      	bhi.n	8007e1c <_printf_i+0x28>
 8007e0c:	2f62      	cmp	r7, #98	; 0x62
 8007e0e:	d80a      	bhi.n	8007e26 <_printf_i+0x32>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	f000 80d8 	beq.w	8007fc6 <_printf_i+0x1d2>
 8007e16:	2f58      	cmp	r7, #88	; 0x58
 8007e18:	f000 80a3 	beq.w	8007f62 <_printf_i+0x16e>
 8007e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e24:	e03a      	b.n	8007e9c <_printf_i+0xa8>
 8007e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e2a:	2b15      	cmp	r3, #21
 8007e2c:	d8f6      	bhi.n	8007e1c <_printf_i+0x28>
 8007e2e:	a101      	add	r1, pc, #4	; (adr r1, 8007e34 <_printf_i+0x40>)
 8007e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e34:	08007e8d 	.word	0x08007e8d
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007e1d 	.word	0x08007e1d
 8007e40:	08007e1d 	.word	0x08007e1d
 8007e44:	08007e1d 	.word	0x08007e1d
 8007e48:	08007e1d 	.word	0x08007e1d
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007e1d 	.word	0x08007e1d
 8007e54:	08007e1d 	.word	0x08007e1d
 8007e58:	08007e1d 	.word	0x08007e1d
 8007e5c:	08007e1d 	.word	0x08007e1d
 8007e60:	08007fad 	.word	0x08007fad
 8007e64:	08007ed1 	.word	0x08007ed1
 8007e68:	08007f8f 	.word	0x08007f8f
 8007e6c:	08007e1d 	.word	0x08007e1d
 8007e70:	08007e1d 	.word	0x08007e1d
 8007e74:	08007fcf 	.word	0x08007fcf
 8007e78:	08007e1d 	.word	0x08007e1d
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007e1d 	.word	0x08007e1d
 8007e84:	08007e1d 	.word	0x08007e1d
 8007e88:	08007f97 	.word	0x08007f97
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0a3      	b.n	8007fe8 <_printf_i+0x1f4>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	6829      	ldr	r1, [r5, #0]
 8007ea4:	0606      	lsls	r6, r0, #24
 8007ea6:	f101 0304 	add.w	r3, r1, #4
 8007eaa:	d50a      	bpl.n	8007ec2 <_printf_i+0xce>
 8007eac:	680e      	ldr	r6, [r1, #0]
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	da03      	bge.n	8007ebc <_printf_i+0xc8>
 8007eb4:	232d      	movs	r3, #45	; 0x2d
 8007eb6:	4276      	negs	r6, r6
 8007eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebc:	485e      	ldr	r0, [pc, #376]	; (8008038 <_printf_i+0x244>)
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	e019      	b.n	8007ef6 <_printf_i+0x102>
 8007ec2:	680e      	ldr	r6, [r1, #0]
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eca:	bf18      	it	ne
 8007ecc:	b236      	sxthne	r6, r6
 8007ece:	e7ef      	b.n	8007eb0 <_printf_i+0xbc>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	1d19      	adds	r1, r3, #4
 8007ed6:	6029      	str	r1, [r5, #0]
 8007ed8:	0601      	lsls	r1, r0, #24
 8007eda:	d501      	bpl.n	8007ee0 <_printf_i+0xec>
 8007edc:	681e      	ldr	r6, [r3, #0]
 8007ede:	e002      	b.n	8007ee6 <_printf_i+0xf2>
 8007ee0:	0646      	lsls	r6, r0, #25
 8007ee2:	d5fb      	bpl.n	8007edc <_printf_i+0xe8>
 8007ee4:	881e      	ldrh	r6, [r3, #0]
 8007ee6:	4854      	ldr	r0, [pc, #336]	; (8008038 <_printf_i+0x244>)
 8007ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eea:	bf0c      	ite	eq
 8007eec:	2308      	moveq	r3, #8
 8007eee:	230a      	movne	r3, #10
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ef6:	6865      	ldr	r5, [r4, #4]
 8007ef8:	60a5      	str	r5, [r4, #8]
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	bfa2      	ittt	ge
 8007efe:	6821      	ldrge	r1, [r4, #0]
 8007f00:	f021 0104 	bicge.w	r1, r1, #4
 8007f04:	6021      	strge	r1, [r4, #0]
 8007f06:	b90e      	cbnz	r6, 8007f0c <_printf_i+0x118>
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	d04d      	beq.n	8007fa8 <_printf_i+0x1b4>
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f12:	fb03 6711 	mls	r7, r3, r1, r6
 8007f16:	5dc7      	ldrb	r7, [r0, r7]
 8007f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f1c:	4637      	mov	r7, r6
 8007f1e:	42bb      	cmp	r3, r7
 8007f20:	460e      	mov	r6, r1
 8007f22:	d9f4      	bls.n	8007f0e <_printf_i+0x11a>
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d10b      	bne.n	8007f40 <_printf_i+0x14c>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07de      	lsls	r6, r3, #31
 8007f2c:	d508      	bpl.n	8007f40 <_printf_i+0x14c>
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	6861      	ldr	r1, [r4, #4]
 8007f32:	4299      	cmp	r1, r3
 8007f34:	bfde      	ittt	le
 8007f36:	2330      	movle	r3, #48	; 0x30
 8007f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f40:	1b52      	subs	r2, r2, r5
 8007f42:	6122      	str	r2, [r4, #16]
 8007f44:	f8cd a000 	str.w	sl, [sp]
 8007f48:	464b      	mov	r3, r9
 8007f4a:	aa03      	add	r2, sp, #12
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f7ff fee2 	bl	8007d18 <_printf_common>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d14c      	bne.n	8007ff2 <_printf_i+0x1fe>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	b004      	add	sp, #16
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	4835      	ldr	r0, [pc, #212]	; (8008038 <_printf_i+0x244>)
 8007f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f68:	6829      	ldr	r1, [r5, #0]
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f70:	6029      	str	r1, [r5, #0]
 8007f72:	061d      	lsls	r5, r3, #24
 8007f74:	d514      	bpl.n	8007fa0 <_printf_i+0x1ac>
 8007f76:	07df      	lsls	r7, r3, #31
 8007f78:	bf44      	itt	mi
 8007f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f7e:	6023      	strmi	r3, [r4, #0]
 8007f80:	b91e      	cbnz	r6, 8007f8a <_printf_i+0x196>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f023 0320 	bic.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	e7b0      	b.n	8007ef0 <_printf_i+0xfc>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f043 0320 	orr.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	2378      	movs	r3, #120	; 0x78
 8007f98:	4828      	ldr	r0, [pc, #160]	; (800803c <_printf_i+0x248>)
 8007f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f9e:	e7e3      	b.n	8007f68 <_printf_i+0x174>
 8007fa0:	0659      	lsls	r1, r3, #25
 8007fa2:	bf48      	it	mi
 8007fa4:	b2b6      	uxthmi	r6, r6
 8007fa6:	e7e6      	b.n	8007f76 <_printf_i+0x182>
 8007fa8:	4615      	mov	r5, r2
 8007faa:	e7bb      	b.n	8007f24 <_printf_i+0x130>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6826      	ldr	r6, [r4, #0]
 8007fb0:	6961      	ldr	r1, [r4, #20]
 8007fb2:	1d18      	adds	r0, r3, #4
 8007fb4:	6028      	str	r0, [r5, #0]
 8007fb6:	0635      	lsls	r5, r6, #24
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	d501      	bpl.n	8007fc0 <_printf_i+0x1cc>
 8007fbc:	6019      	str	r1, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <_printf_i+0x1d2>
 8007fc0:	0670      	lsls	r0, r6, #25
 8007fc2:	d5fb      	bpl.n	8007fbc <_printf_i+0x1c8>
 8007fc4:	8019      	strh	r1, [r3, #0]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	4615      	mov	r5, r2
 8007fcc:	e7ba      	b.n	8007f44 <_printf_i+0x150>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	1d1a      	adds	r2, r3, #4
 8007fd2:	602a      	str	r2, [r5, #0]
 8007fd4:	681d      	ldr	r5, [r3, #0]
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7f8 f900 	bl	80001e0 <memchr>
 8007fe0:	b108      	cbz	r0, 8007fe6 <_printf_i+0x1f2>
 8007fe2:	1b40      	subs	r0, r0, r5
 8007fe4:	6060      	str	r0, [r4, #4]
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	2300      	movs	r3, #0
 8007fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff0:	e7a8      	b.n	8007f44 <_printf_i+0x150>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	47d0      	blx	sl
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d0ab      	beq.n	8007f58 <_printf_i+0x164>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	079b      	lsls	r3, r3, #30
 8008004:	d413      	bmi.n	800802e <_printf_i+0x23a>
 8008006:	68e0      	ldr	r0, [r4, #12]
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	4298      	cmp	r0, r3
 800800c:	bfb8      	it	lt
 800800e:	4618      	movlt	r0, r3
 8008010:	e7a4      	b.n	8007f5c <_printf_i+0x168>
 8008012:	2301      	movs	r3, #1
 8008014:	4632      	mov	r2, r6
 8008016:	4649      	mov	r1, r9
 8008018:	4640      	mov	r0, r8
 800801a:	47d0      	blx	sl
 800801c:	3001      	adds	r0, #1
 800801e:	d09b      	beq.n	8007f58 <_printf_i+0x164>
 8008020:	3501      	adds	r5, #1
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	9903      	ldr	r1, [sp, #12]
 8008026:	1a5b      	subs	r3, r3, r1
 8008028:	42ab      	cmp	r3, r5
 800802a:	dcf2      	bgt.n	8008012 <_printf_i+0x21e>
 800802c:	e7eb      	b.n	8008006 <_printf_i+0x212>
 800802e:	2500      	movs	r5, #0
 8008030:	f104 0619 	add.w	r6, r4, #25
 8008034:	e7f5      	b.n	8008022 <_printf_i+0x22e>
 8008036:	bf00      	nop
 8008038:	0800c232 	.word	0x0800c232
 800803c:	0800c243 	.word	0x0800c243

08008040 <_scanf_float>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	b087      	sub	sp, #28
 8008046:	4617      	mov	r7, r2
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	688b      	ldr	r3, [r1, #8]
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008052:	bf83      	ittte	hi
 8008054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008058:	195b      	addhi	r3, r3, r5
 800805a:	9302      	strhi	r3, [sp, #8]
 800805c:	2300      	movls	r3, #0
 800805e:	bf86      	itte	hi
 8008060:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008064:	608b      	strhi	r3, [r1, #8]
 8008066:	9302      	strls	r3, [sp, #8]
 8008068:	680b      	ldr	r3, [r1, #0]
 800806a:	468b      	mov	fp, r1
 800806c:	2500      	movs	r5, #0
 800806e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008072:	f84b 3b1c 	str.w	r3, [fp], #28
 8008076:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800807a:	4680      	mov	r8, r0
 800807c:	460c      	mov	r4, r1
 800807e:	465e      	mov	r6, fp
 8008080:	46aa      	mov	sl, r5
 8008082:	46a9      	mov	r9, r5
 8008084:	9501      	str	r5, [sp, #4]
 8008086:	68a2      	ldr	r2, [r4, #8]
 8008088:	b152      	cbz	r2, 80080a0 <_scanf_float+0x60>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b4e      	cmp	r3, #78	; 0x4e
 8008090:	d864      	bhi.n	800815c <_scanf_float+0x11c>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d83c      	bhi.n	8008110 <_scanf_float+0xd0>
 8008096:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800809a:	b2c8      	uxtb	r0, r1
 800809c:	280e      	cmp	r0, #14
 800809e:	d93a      	bls.n	8008116 <_scanf_float+0xd6>
 80080a0:	f1b9 0f00 	cmp.w	r9, #0
 80080a4:	d003      	beq.n	80080ae <_scanf_float+0x6e>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080b2:	f1ba 0f01 	cmp.w	sl, #1
 80080b6:	f200 8113 	bhi.w	80082e0 <_scanf_float+0x2a0>
 80080ba:	455e      	cmp	r6, fp
 80080bc:	f200 8105 	bhi.w	80082ca <_scanf_float+0x28a>
 80080c0:	2501      	movs	r5, #1
 80080c2:	4628      	mov	r0, r5
 80080c4:	b007      	add	sp, #28
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80080ce:	2a0d      	cmp	r2, #13
 80080d0:	d8e6      	bhi.n	80080a0 <_scanf_float+0x60>
 80080d2:	a101      	add	r1, pc, #4	; (adr r1, 80080d8 <_scanf_float+0x98>)
 80080d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080d8:	08008217 	.word	0x08008217
 80080dc:	080080a1 	.word	0x080080a1
 80080e0:	080080a1 	.word	0x080080a1
 80080e4:	080080a1 	.word	0x080080a1
 80080e8:	08008277 	.word	0x08008277
 80080ec:	0800824f 	.word	0x0800824f
 80080f0:	080080a1 	.word	0x080080a1
 80080f4:	080080a1 	.word	0x080080a1
 80080f8:	08008225 	.word	0x08008225
 80080fc:	080080a1 	.word	0x080080a1
 8008100:	080080a1 	.word	0x080080a1
 8008104:	080080a1 	.word	0x080080a1
 8008108:	080080a1 	.word	0x080080a1
 800810c:	080081dd 	.word	0x080081dd
 8008110:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008114:	e7db      	b.n	80080ce <_scanf_float+0x8e>
 8008116:	290e      	cmp	r1, #14
 8008118:	d8c2      	bhi.n	80080a0 <_scanf_float+0x60>
 800811a:	a001      	add	r0, pc, #4	; (adr r0, 8008120 <_scanf_float+0xe0>)
 800811c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008120:	080081cf 	.word	0x080081cf
 8008124:	080080a1 	.word	0x080080a1
 8008128:	080081cf 	.word	0x080081cf
 800812c:	08008263 	.word	0x08008263
 8008130:	080080a1 	.word	0x080080a1
 8008134:	0800817d 	.word	0x0800817d
 8008138:	080081b9 	.word	0x080081b9
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081b9 	.word	0x080081b9
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081b9 	.word	0x080081b9
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	2b6e      	cmp	r3, #110	; 0x6e
 800815e:	d809      	bhi.n	8008174 <_scanf_float+0x134>
 8008160:	2b60      	cmp	r3, #96	; 0x60
 8008162:	d8b2      	bhi.n	80080ca <_scanf_float+0x8a>
 8008164:	2b54      	cmp	r3, #84	; 0x54
 8008166:	d077      	beq.n	8008258 <_scanf_float+0x218>
 8008168:	2b59      	cmp	r3, #89	; 0x59
 800816a:	d199      	bne.n	80080a0 <_scanf_float+0x60>
 800816c:	2d07      	cmp	r5, #7
 800816e:	d197      	bne.n	80080a0 <_scanf_float+0x60>
 8008170:	2508      	movs	r5, #8
 8008172:	e029      	b.n	80081c8 <_scanf_float+0x188>
 8008174:	2b74      	cmp	r3, #116	; 0x74
 8008176:	d06f      	beq.n	8008258 <_scanf_float+0x218>
 8008178:	2b79      	cmp	r3, #121	; 0x79
 800817a:	e7f6      	b.n	800816a <_scanf_float+0x12a>
 800817c:	6821      	ldr	r1, [r4, #0]
 800817e:	05c8      	lsls	r0, r1, #23
 8008180:	d51a      	bpl.n	80081b8 <_scanf_float+0x178>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008188:	6021      	str	r1, [r4, #0]
 800818a:	f109 0901 	add.w	r9, r9, #1
 800818e:	b11b      	cbz	r3, 8008198 <_scanf_float+0x158>
 8008190:	3b01      	subs	r3, #1
 8008192:	3201      	adds	r2, #1
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	60a2      	str	r2, [r4, #8]
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	f340 8084 	ble.w	80082b8 <_scanf_float+0x278>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	e766      	b.n	8008086 <_scanf_float+0x46>
 80081b8:	eb1a 0f05 	cmn.w	sl, r5
 80081bc:	f47f af70 	bne.w	80080a0 <_scanf_float+0x60>
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	f806 3b01 	strb.w	r3, [r6], #1
 80081cc:	e7e4      	b.n	8008198 <_scanf_float+0x158>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	0610      	lsls	r0, r2, #24
 80081d2:	f57f af65 	bpl.w	80080a0 <_scanf_float+0x60>
 80081d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081da:	e7f4      	b.n	80081c6 <_scanf_float+0x186>
 80081dc:	f1ba 0f00 	cmp.w	sl, #0
 80081e0:	d10e      	bne.n	8008200 <_scanf_float+0x1c0>
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	d10e      	bne.n	8008206 <_scanf_float+0x1c6>
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081f2:	d108      	bne.n	8008206 <_scanf_float+0x1c6>
 80081f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	f04f 0a01 	mov.w	sl, #1
 80081fe:	e7e3      	b.n	80081c8 <_scanf_float+0x188>
 8008200:	f1ba 0f02 	cmp.w	sl, #2
 8008204:	d055      	beq.n	80082b2 <_scanf_float+0x272>
 8008206:	2d01      	cmp	r5, #1
 8008208:	d002      	beq.n	8008210 <_scanf_float+0x1d0>
 800820a:	2d04      	cmp	r5, #4
 800820c:	f47f af48 	bne.w	80080a0 <_scanf_float+0x60>
 8008210:	3501      	adds	r5, #1
 8008212:	b2ed      	uxtb	r5, r5
 8008214:	e7d8      	b.n	80081c8 <_scanf_float+0x188>
 8008216:	f1ba 0f01 	cmp.w	sl, #1
 800821a:	f47f af41 	bne.w	80080a0 <_scanf_float+0x60>
 800821e:	f04f 0a02 	mov.w	sl, #2
 8008222:	e7d1      	b.n	80081c8 <_scanf_float+0x188>
 8008224:	b97d      	cbnz	r5, 8008246 <_scanf_float+0x206>
 8008226:	f1b9 0f00 	cmp.w	r9, #0
 800822a:	f47f af3c 	bne.w	80080a6 <_scanf_float+0x66>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008234:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008238:	f47f af39 	bne.w	80080ae <_scanf_float+0x6e>
 800823c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	2501      	movs	r5, #1
 8008244:	e7c0      	b.n	80081c8 <_scanf_float+0x188>
 8008246:	2d03      	cmp	r5, #3
 8008248:	d0e2      	beq.n	8008210 <_scanf_float+0x1d0>
 800824a:	2d05      	cmp	r5, #5
 800824c:	e7de      	b.n	800820c <_scanf_float+0x1cc>
 800824e:	2d02      	cmp	r5, #2
 8008250:	f47f af26 	bne.w	80080a0 <_scanf_float+0x60>
 8008254:	2503      	movs	r5, #3
 8008256:	e7b7      	b.n	80081c8 <_scanf_float+0x188>
 8008258:	2d06      	cmp	r5, #6
 800825a:	f47f af21 	bne.w	80080a0 <_scanf_float+0x60>
 800825e:	2507      	movs	r5, #7
 8008260:	e7b2      	b.n	80081c8 <_scanf_float+0x188>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	0591      	lsls	r1, r2, #22
 8008266:	f57f af1b 	bpl.w	80080a0 <_scanf_float+0x60>
 800826a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800826e:	6022      	str	r2, [r4, #0]
 8008270:	f8cd 9004 	str.w	r9, [sp, #4]
 8008274:	e7a8      	b.n	80081c8 <_scanf_float+0x188>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800827c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008280:	d006      	beq.n	8008290 <_scanf_float+0x250>
 8008282:	0550      	lsls	r0, r2, #21
 8008284:	f57f af0c 	bpl.w	80080a0 <_scanf_float+0x60>
 8008288:	f1b9 0f00 	cmp.w	r9, #0
 800828c:	f43f af0f 	beq.w	80080ae <_scanf_float+0x6e>
 8008290:	0591      	lsls	r1, r2, #22
 8008292:	bf58      	it	pl
 8008294:	9901      	ldrpl	r1, [sp, #4]
 8008296:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800829a:	bf58      	it	pl
 800829c:	eba9 0101 	subpl.w	r1, r9, r1
 80082a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80082a4:	bf58      	it	pl
 80082a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	f04f 0900 	mov.w	r9, #0
 80082b0:	e78a      	b.n	80081c8 <_scanf_float+0x188>
 80082b2:	f04f 0a03 	mov.w	sl, #3
 80082b6:	e787      	b.n	80081c8 <_scanf_float+0x188>
 80082b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80082bc:	4639      	mov	r1, r7
 80082be:	4640      	mov	r0, r8
 80082c0:	4798      	blx	r3
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f43f aedf 	beq.w	8008086 <_scanf_float+0x46>
 80082c8:	e6ea      	b.n	80080a0 <_scanf_float+0x60>
 80082ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082d2:	463a      	mov	r2, r7
 80082d4:	4640      	mov	r0, r8
 80082d6:	4798      	blx	r3
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	3b01      	subs	r3, #1
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	e6ec      	b.n	80080ba <_scanf_float+0x7a>
 80082e0:	1e6b      	subs	r3, r5, #1
 80082e2:	2b06      	cmp	r3, #6
 80082e4:	d825      	bhi.n	8008332 <_scanf_float+0x2f2>
 80082e6:	2d02      	cmp	r5, #2
 80082e8:	d836      	bhi.n	8008358 <_scanf_float+0x318>
 80082ea:	455e      	cmp	r6, fp
 80082ec:	f67f aee8 	bls.w	80080c0 <_scanf_float+0x80>
 80082f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082f8:	463a      	mov	r2, r7
 80082fa:	4640      	mov	r0, r8
 80082fc:	4798      	blx	r3
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	3b01      	subs	r3, #1
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	e7f1      	b.n	80082ea <_scanf_float+0x2aa>
 8008306:	9802      	ldr	r0, [sp, #8]
 8008308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800830c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008310:	9002      	str	r0, [sp, #8]
 8008312:	463a      	mov	r2, r7
 8008314:	4640      	mov	r0, r8
 8008316:	4798      	blx	r3
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	3b01      	subs	r3, #1
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008322:	fa5f fa8a 	uxtb.w	sl, sl
 8008326:	f1ba 0f02 	cmp.w	sl, #2
 800832a:	d1ec      	bne.n	8008306 <_scanf_float+0x2c6>
 800832c:	3d03      	subs	r5, #3
 800832e:	b2ed      	uxtb	r5, r5
 8008330:	1b76      	subs	r6, r6, r5
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	05da      	lsls	r2, r3, #23
 8008336:	d52f      	bpl.n	8008398 <_scanf_float+0x358>
 8008338:	055b      	lsls	r3, r3, #21
 800833a:	d510      	bpl.n	800835e <_scanf_float+0x31e>
 800833c:	455e      	cmp	r6, fp
 800833e:	f67f aebf 	bls.w	80080c0 <_scanf_float+0x80>
 8008342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800834a:	463a      	mov	r2, r7
 800834c:	4640      	mov	r0, r8
 800834e:	4798      	blx	r3
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	3b01      	subs	r3, #1
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	e7f1      	b.n	800833c <_scanf_float+0x2fc>
 8008358:	46aa      	mov	sl, r5
 800835a:	9602      	str	r6, [sp, #8]
 800835c:	e7df      	b.n	800831e <_scanf_float+0x2de>
 800835e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	2965      	cmp	r1, #101	; 0x65
 8008366:	f103 33ff 	add.w	r3, r3, #4294967295
 800836a:	f106 35ff 	add.w	r5, r6, #4294967295
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	d00c      	beq.n	800838c <_scanf_float+0x34c>
 8008372:	2945      	cmp	r1, #69	; 0x45
 8008374:	d00a      	beq.n	800838c <_scanf_float+0x34c>
 8008376:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800837a:	463a      	mov	r2, r7
 800837c:	4640      	mov	r0, r8
 800837e:	4798      	blx	r3
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008386:	3b01      	subs	r3, #1
 8008388:	1eb5      	subs	r5, r6, #2
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008390:	463a      	mov	r2, r7
 8008392:	4640      	mov	r0, r8
 8008394:	4798      	blx	r3
 8008396:	462e      	mov	r6, r5
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	f015 0510 	ands.w	r5, r5, #16
 800839e:	d159      	bne.n	8008454 <_scanf_float+0x414>
 80083a0:	7035      	strb	r5, [r6, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ac:	d11b      	bne.n	80083e6 <_scanf_float+0x3a6>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	454b      	cmp	r3, r9
 80083b2:	eba3 0209 	sub.w	r2, r3, r9
 80083b6:	d123      	bne.n	8008400 <_scanf_float+0x3c0>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4659      	mov	r1, fp
 80083bc:	4640      	mov	r0, r8
 80083be:	f000 ff25 	bl	800920c <_strtod_r>
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	f012 0f02 	tst.w	r2, #2
 80083ca:	ec57 6b10 	vmov	r6, r7, d0
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	d021      	beq.n	8008416 <_scanf_float+0x3d6>
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	1d1a      	adds	r2, r3, #4
 80083d6:	600a      	str	r2, [r1, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	e9c3 6700 	strd	r6, r7, [r3]
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60e3      	str	r3, [r4, #12]
 80083e4:	e66d      	b.n	80080c2 <_scanf_float+0x82>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0e5      	beq.n	80083b8 <_scanf_float+0x378>
 80083ec:	9905      	ldr	r1, [sp, #20]
 80083ee:	230a      	movs	r3, #10
 80083f0:	462a      	mov	r2, r5
 80083f2:	3101      	adds	r1, #1
 80083f4:	4640      	mov	r0, r8
 80083f6:	f000 ff91 	bl	800931c <_strtol_r>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	9e05      	ldr	r6, [sp, #20]
 80083fe:	1ac2      	subs	r2, r0, r3
 8008400:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008404:	429e      	cmp	r6, r3
 8008406:	bf28      	it	cs
 8008408:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800840c:	4912      	ldr	r1, [pc, #72]	; (8008458 <_scanf_float+0x418>)
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f8ba 	bl	8008588 <siprintf>
 8008414:	e7d0      	b.n	80083b8 <_scanf_float+0x378>
 8008416:	9903      	ldr	r1, [sp, #12]
 8008418:	f012 0f04 	tst.w	r2, #4
 800841c:	f103 0204 	add.w	r2, r3, #4
 8008420:	600a      	str	r2, [r1, #0]
 8008422:	d1d9      	bne.n	80083d8 <_scanf_float+0x398>
 8008424:	f8d3 8000 	ldr.w	r8, [r3]
 8008428:	ee10 2a10 	vmov	r2, s0
 800842c:	ee10 0a10 	vmov	r0, s0
 8008430:	463b      	mov	r3, r7
 8008432:	4639      	mov	r1, r7
 8008434:	f7f8 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 8008438:	b128      	cbz	r0, 8008446 <_scanf_float+0x406>
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <_scanf_float+0x41c>)
 800843c:	f000 f89e 	bl	800857c <nanf>
 8008440:	ed88 0a00 	vstr	s0, [r8]
 8008444:	e7cb      	b.n	80083de <_scanf_float+0x39e>
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 fbcd 	bl	8000be8 <__aeabi_d2f>
 800844e:	f8c8 0000 	str.w	r0, [r8]
 8008452:	e7c4      	b.n	80083de <_scanf_float+0x39e>
 8008454:	2500      	movs	r5, #0
 8008456:	e634      	b.n	80080c2 <_scanf_float+0x82>
 8008458:	0800c254 	.word	0x0800c254
 800845c:	0800c6c8 	.word	0x0800c6c8

08008460 <iprintf>:
 8008460:	b40f      	push	{r0, r1, r2, r3}
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <iprintf+0x2c>)
 8008464:	b513      	push	{r0, r1, r4, lr}
 8008466:	681c      	ldr	r4, [r3, #0]
 8008468:	b124      	cbz	r4, 8008474 <iprintf+0x14>
 800846a:	69a3      	ldr	r3, [r4, #24]
 800846c:	b913      	cbnz	r3, 8008474 <iprintf+0x14>
 800846e:	4620      	mov	r0, r4
 8008470:	f001 ffaa 	bl	800a3c8 <__sinit>
 8008474:	ab05      	add	r3, sp, #20
 8008476:	9a04      	ldr	r2, [sp, #16]
 8008478:	68a1      	ldr	r1, [r4, #8]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	4620      	mov	r0, r4
 800847e:	f003 fb81 	bl	800bb84 <_vfiprintf_r>
 8008482:	b002      	add	sp, #8
 8008484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008488:	b004      	add	sp, #16
 800848a:	4770      	bx	lr
 800848c:	2000000c 	.word	0x2000000c

08008490 <_puts_r>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	4605      	mov	r5, r0
 8008496:	b118      	cbz	r0, 80084a0 <_puts_r+0x10>
 8008498:	6983      	ldr	r3, [r0, #24]
 800849a:	b90b      	cbnz	r3, 80084a0 <_puts_r+0x10>
 800849c:	f001 ff94 	bl	800a3c8 <__sinit>
 80084a0:	69ab      	ldr	r3, [r5, #24]
 80084a2:	68ac      	ldr	r4, [r5, #8]
 80084a4:	b913      	cbnz	r3, 80084ac <_puts_r+0x1c>
 80084a6:	4628      	mov	r0, r5
 80084a8:	f001 ff8e 	bl	800a3c8 <__sinit>
 80084ac:	4b2c      	ldr	r3, [pc, #176]	; (8008560 <_puts_r+0xd0>)
 80084ae:	429c      	cmp	r4, r3
 80084b0:	d120      	bne.n	80084f4 <_puts_r+0x64>
 80084b2:	686c      	ldr	r4, [r5, #4]
 80084b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084b6:	07db      	lsls	r3, r3, #31
 80084b8:	d405      	bmi.n	80084c6 <_puts_r+0x36>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	0598      	lsls	r0, r3, #22
 80084be:	d402      	bmi.n	80084c6 <_puts_r+0x36>
 80084c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c2:	f002 fb92 	bl	800abea <__retarget_lock_acquire_recursive>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	0719      	lsls	r1, r3, #28
 80084ca:	d51d      	bpl.n	8008508 <_puts_r+0x78>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	b1db      	cbz	r3, 8008508 <_puts_r+0x78>
 80084d0:	3e01      	subs	r6, #1
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084d8:	3b01      	subs	r3, #1
 80084da:	60a3      	str	r3, [r4, #8]
 80084dc:	bb39      	cbnz	r1, 800852e <_puts_r+0x9e>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da38      	bge.n	8008554 <_puts_r+0xc4>
 80084e2:	4622      	mov	r2, r4
 80084e4:	210a      	movs	r1, #10
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 ff1a 	bl	8009320 <__swbuf_r>
 80084ec:	3001      	adds	r0, #1
 80084ee:	d011      	beq.n	8008514 <_puts_r+0x84>
 80084f0:	250a      	movs	r5, #10
 80084f2:	e011      	b.n	8008518 <_puts_r+0x88>
 80084f4:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <_puts_r+0xd4>)
 80084f6:	429c      	cmp	r4, r3
 80084f8:	d101      	bne.n	80084fe <_puts_r+0x6e>
 80084fa:	68ac      	ldr	r4, [r5, #8]
 80084fc:	e7da      	b.n	80084b4 <_puts_r+0x24>
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <_puts_r+0xd8>)
 8008500:	429c      	cmp	r4, r3
 8008502:	bf08      	it	eq
 8008504:	68ec      	ldreq	r4, [r5, #12]
 8008506:	e7d5      	b.n	80084b4 <_puts_r+0x24>
 8008508:	4621      	mov	r1, r4
 800850a:	4628      	mov	r0, r5
 800850c:	f000 ff5a 	bl	80093c4 <__swsetup_r>
 8008510:	2800      	cmp	r0, #0
 8008512:	d0dd      	beq.n	80084d0 <_puts_r+0x40>
 8008514:	f04f 35ff 	mov.w	r5, #4294967295
 8008518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d405      	bmi.n	800852a <_puts_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	d402      	bmi.n	800852a <_puts_r+0x9a>
 8008524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008526:	f002 fb61 	bl	800abec <__retarget_lock_release_recursive>
 800852a:	4628      	mov	r0, r5
 800852c:	bd70      	pop	{r4, r5, r6, pc}
 800852e:	2b00      	cmp	r3, #0
 8008530:	da04      	bge.n	800853c <_puts_r+0xac>
 8008532:	69a2      	ldr	r2, [r4, #24]
 8008534:	429a      	cmp	r2, r3
 8008536:	dc06      	bgt.n	8008546 <_puts_r+0xb6>
 8008538:	290a      	cmp	r1, #10
 800853a:	d004      	beq.n	8008546 <_puts_r+0xb6>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	7019      	strb	r1, [r3, #0]
 8008544:	e7c5      	b.n	80084d2 <_puts_r+0x42>
 8008546:	4622      	mov	r2, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 fee9 	bl	8009320 <__swbuf_r>
 800854e:	3001      	adds	r0, #1
 8008550:	d1bf      	bne.n	80084d2 <_puts_r+0x42>
 8008552:	e7df      	b.n	8008514 <_puts_r+0x84>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	250a      	movs	r5, #10
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	701d      	strb	r5, [r3, #0]
 800855e:	e7db      	b.n	8008518 <_puts_r+0x88>
 8008560:	0800c464 	.word	0x0800c464
 8008564:	0800c484 	.word	0x0800c484
 8008568:	0800c444 	.word	0x0800c444

0800856c <puts>:
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <puts+0xc>)
 800856e:	4601      	mov	r1, r0
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f7ff bf8d 	b.w	8008490 <_puts_r>
 8008576:	bf00      	nop
 8008578:	2000000c 	.word	0x2000000c

0800857c <nanf>:
 800857c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008584 <nanf+0x8>
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	7fc00000 	.word	0x7fc00000

08008588 <siprintf>:
 8008588:	b40e      	push	{r1, r2, r3}
 800858a:	b500      	push	{lr}
 800858c:	b09c      	sub	sp, #112	; 0x70
 800858e:	ab1d      	add	r3, sp, #116	; 0x74
 8008590:	9002      	str	r0, [sp, #8]
 8008592:	9006      	str	r0, [sp, #24]
 8008594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008598:	4809      	ldr	r0, [pc, #36]	; (80085c0 <siprintf+0x38>)
 800859a:	9107      	str	r1, [sp, #28]
 800859c:	9104      	str	r1, [sp, #16]
 800859e:	4909      	ldr	r1, [pc, #36]	; (80085c4 <siprintf+0x3c>)
 80085a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	6800      	ldr	r0, [r0, #0]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	a902      	add	r1, sp, #8
 80085ac:	f003 f9c0 	bl	800b930 <_svfiprintf_r>
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	b01c      	add	sp, #112	; 0x70
 80085b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085bc:	b003      	add	sp, #12
 80085be:	4770      	bx	lr
 80085c0:	2000000c 	.word	0x2000000c
 80085c4:	ffff0208 	.word	0xffff0208

080085c8 <sulp>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	ec45 4b10 	vmov	d0, r4, r5
 80085d2:	4616      	mov	r6, r2
 80085d4:	f002 ff0a 	bl	800b3ec <__ulp>
 80085d8:	ec51 0b10 	vmov	r0, r1, d0
 80085dc:	b17e      	cbz	r6, 80085fe <sulp+0x36>
 80085de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd09      	ble.n	80085fe <sulp+0x36>
 80085ea:	051b      	lsls	r3, r3, #20
 80085ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085f0:	2400      	movs	r4, #0
 80085f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	f7f7 fffd 	bl	80005f8 <__aeabi_dmul>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}

08008600 <_strtod_l>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b02 	vpush	{d8}
 8008608:	b09d      	sub	sp, #116	; 0x74
 800860a:	461f      	mov	r7, r3
 800860c:	2300      	movs	r3, #0
 800860e:	9318      	str	r3, [sp, #96]	; 0x60
 8008610:	4ba2      	ldr	r3, [pc, #648]	; (800889c <_strtod_l+0x29c>)
 8008612:	9213      	str	r2, [sp, #76]	; 0x4c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	4604      	mov	r4, r0
 800861a:	4618      	mov	r0, r3
 800861c:	4688      	mov	r8, r1
 800861e:	f7f7 fdd7 	bl	80001d0 <strlen>
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	4605      	mov	r5, r0
 8008628:	f04f 0b00 	mov.w	fp, #0
 800862c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008632:	781a      	ldrb	r2, [r3, #0]
 8008634:	2a2b      	cmp	r2, #43	; 0x2b
 8008636:	d04e      	beq.n	80086d6 <_strtod_l+0xd6>
 8008638:	d83b      	bhi.n	80086b2 <_strtod_l+0xb2>
 800863a:	2a0d      	cmp	r2, #13
 800863c:	d834      	bhi.n	80086a8 <_strtod_l+0xa8>
 800863e:	2a08      	cmp	r2, #8
 8008640:	d834      	bhi.n	80086ac <_strtod_l+0xac>
 8008642:	2a00      	cmp	r2, #0
 8008644:	d03e      	beq.n	80086c4 <_strtod_l+0xc4>
 8008646:	2300      	movs	r3, #0
 8008648:	930a      	str	r3, [sp, #40]	; 0x28
 800864a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800864c:	7833      	ldrb	r3, [r6, #0]
 800864e:	2b30      	cmp	r3, #48	; 0x30
 8008650:	f040 80b0 	bne.w	80087b4 <_strtod_l+0x1b4>
 8008654:	7873      	ldrb	r3, [r6, #1]
 8008656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800865a:	2b58      	cmp	r3, #88	; 0x58
 800865c:	d168      	bne.n	8008730 <_strtod_l+0x130>
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	ab18      	add	r3, sp, #96	; 0x60
 8008664:	9702      	str	r7, [sp, #8]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4a8d      	ldr	r2, [pc, #564]	; (80088a0 <_strtod_l+0x2a0>)
 800866a:	ab19      	add	r3, sp, #100	; 0x64
 800866c:	a917      	add	r1, sp, #92	; 0x5c
 800866e:	4620      	mov	r0, r4
 8008670:	f001 ffae 	bl	800a5d0 <__gethex>
 8008674:	f010 0707 	ands.w	r7, r0, #7
 8008678:	4605      	mov	r5, r0
 800867a:	d005      	beq.n	8008688 <_strtod_l+0x88>
 800867c:	2f06      	cmp	r7, #6
 800867e:	d12c      	bne.n	80086da <_strtod_l+0xda>
 8008680:	3601      	adds	r6, #1
 8008682:	2300      	movs	r3, #0
 8008684:	9617      	str	r6, [sp, #92]	; 0x5c
 8008686:	930a      	str	r3, [sp, #40]	; 0x28
 8008688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 8590 	bne.w	80091b0 <_strtod_l+0xbb0>
 8008690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008692:	b1eb      	cbz	r3, 80086d0 <_strtod_l+0xd0>
 8008694:	4652      	mov	r2, sl
 8008696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800869a:	ec43 2b10 	vmov	d0, r2, r3
 800869e:	b01d      	add	sp, #116	; 0x74
 80086a0:	ecbd 8b02 	vpop	{d8}
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	2a20      	cmp	r2, #32
 80086aa:	d1cc      	bne.n	8008646 <_strtod_l+0x46>
 80086ac:	3301      	adds	r3, #1
 80086ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80086b0:	e7be      	b.n	8008630 <_strtod_l+0x30>
 80086b2:	2a2d      	cmp	r2, #45	; 0x2d
 80086b4:	d1c7      	bne.n	8008646 <_strtod_l+0x46>
 80086b6:	2201      	movs	r2, #1
 80086b8:	920a      	str	r2, [sp, #40]	; 0x28
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1c2      	bne.n	800864a <_strtod_l+0x4a>
 80086c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 856e 	bne.w	80091ac <_strtod_l+0xbac>
 80086d0:	4652      	mov	r2, sl
 80086d2:	465b      	mov	r3, fp
 80086d4:	e7e1      	b.n	800869a <_strtod_l+0x9a>
 80086d6:	2200      	movs	r2, #0
 80086d8:	e7ee      	b.n	80086b8 <_strtod_l+0xb8>
 80086da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086dc:	b13a      	cbz	r2, 80086ee <_strtod_l+0xee>
 80086de:	2135      	movs	r1, #53	; 0x35
 80086e0:	a81a      	add	r0, sp, #104	; 0x68
 80086e2:	f002 ff8e 	bl	800b602 <__copybits>
 80086e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086e8:	4620      	mov	r0, r4
 80086ea:	f002 fb4d 	bl	800ad88 <_Bfree>
 80086ee:	3f01      	subs	r7, #1
 80086f0:	2f04      	cmp	r7, #4
 80086f2:	d806      	bhi.n	8008702 <_strtod_l+0x102>
 80086f4:	e8df f007 	tbb	[pc, r7]
 80086f8:	1714030a 	.word	0x1714030a
 80086fc:	0a          	.byte	0x0a
 80086fd:	00          	.byte	0x00
 80086fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008702:	0728      	lsls	r0, r5, #28
 8008704:	d5c0      	bpl.n	8008688 <_strtod_l+0x88>
 8008706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800870a:	e7bd      	b.n	8008688 <_strtod_l+0x88>
 800870c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800871a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800871e:	e7f0      	b.n	8008702 <_strtod_l+0x102>
 8008720:	f8df b180 	ldr.w	fp, [pc, #384]	; 80088a4 <_strtod_l+0x2a4>
 8008724:	e7ed      	b.n	8008702 <_strtod_l+0x102>
 8008726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800872a:	f04f 3aff 	mov.w	sl, #4294967295
 800872e:	e7e8      	b.n	8008702 <_strtod_l+0x102>
 8008730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	9217      	str	r2, [sp, #92]	; 0x5c
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b30      	cmp	r3, #48	; 0x30
 800873a:	d0f9      	beq.n	8008730 <_strtod_l+0x130>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0a3      	beq.n	8008688 <_strtod_l+0x88>
 8008740:	2301      	movs	r3, #1
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008750:	464f      	mov	r7, r9
 8008752:	220a      	movs	r2, #10
 8008754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008756:	7806      	ldrb	r6, [r0, #0]
 8008758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800875c:	b2d9      	uxtb	r1, r3
 800875e:	2909      	cmp	r1, #9
 8008760:	d92a      	bls.n	80087b8 <_strtod_l+0x1b8>
 8008762:	9905      	ldr	r1, [sp, #20]
 8008764:	462a      	mov	r2, r5
 8008766:	f003 fb9a 	bl	800be9e <strncmp>
 800876a:	b398      	cbz	r0, 80087d4 <_strtod_l+0x1d4>
 800876c:	2000      	movs	r0, #0
 800876e:	4632      	mov	r2, r6
 8008770:	463d      	mov	r5, r7
 8008772:	9005      	str	r0, [sp, #20]
 8008774:	4603      	mov	r3, r0
 8008776:	2a65      	cmp	r2, #101	; 0x65
 8008778:	d001      	beq.n	800877e <_strtod_l+0x17e>
 800877a:	2a45      	cmp	r2, #69	; 0x45
 800877c:	d118      	bne.n	80087b0 <_strtod_l+0x1b0>
 800877e:	b91d      	cbnz	r5, 8008788 <_strtod_l+0x188>
 8008780:	9a04      	ldr	r2, [sp, #16]
 8008782:	4302      	orrs	r2, r0
 8008784:	d09e      	beq.n	80086c4 <_strtod_l+0xc4>
 8008786:	2500      	movs	r5, #0
 8008788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800878c:	f108 0201 	add.w	r2, r8, #1
 8008790:	9217      	str	r2, [sp, #92]	; 0x5c
 8008792:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008796:	2a2b      	cmp	r2, #43	; 0x2b
 8008798:	d075      	beq.n	8008886 <_strtod_l+0x286>
 800879a:	2a2d      	cmp	r2, #45	; 0x2d
 800879c:	d07b      	beq.n	8008896 <_strtod_l+0x296>
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087a6:	2909      	cmp	r1, #9
 80087a8:	f240 8082 	bls.w	80088b0 <_strtod_l+0x2b0>
 80087ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80087b0:	2600      	movs	r6, #0
 80087b2:	e09d      	b.n	80088f0 <_strtod_l+0x2f0>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e7c4      	b.n	8008742 <_strtod_l+0x142>
 80087b8:	2f08      	cmp	r7, #8
 80087ba:	bfd8      	it	le
 80087bc:	9907      	ldrle	r1, [sp, #28]
 80087be:	f100 0001 	add.w	r0, r0, #1
 80087c2:	bfda      	itte	le
 80087c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087c8:	9307      	strle	r3, [sp, #28]
 80087ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80087ce:	3701      	adds	r7, #1
 80087d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80087d2:	e7bf      	b.n	8008754 <_strtod_l+0x154>
 80087d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087d6:	195a      	adds	r2, r3, r5
 80087d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80087da:	5d5a      	ldrb	r2, [r3, r5]
 80087dc:	2f00      	cmp	r7, #0
 80087de:	d037      	beq.n	8008850 <_strtod_l+0x250>
 80087e0:	9005      	str	r0, [sp, #20]
 80087e2:	463d      	mov	r5, r7
 80087e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d912      	bls.n	8008812 <_strtod_l+0x212>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e7c2      	b.n	8008776 <_strtod_l+0x176>
 80087f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087f6:	785a      	ldrb	r2, [r3, #1]
 80087f8:	3001      	adds	r0, #1
 80087fa:	2a30      	cmp	r2, #48	; 0x30
 80087fc:	d0f8      	beq.n	80087f0 <_strtod_l+0x1f0>
 80087fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008802:	2b08      	cmp	r3, #8
 8008804:	f200 84d9 	bhi.w	80091ba <_strtod_l+0xbba>
 8008808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800880a:	9005      	str	r0, [sp, #20]
 800880c:	2000      	movs	r0, #0
 800880e:	9308      	str	r3, [sp, #32]
 8008810:	4605      	mov	r5, r0
 8008812:	3a30      	subs	r2, #48	; 0x30
 8008814:	f100 0301 	add.w	r3, r0, #1
 8008818:	d014      	beq.n	8008844 <_strtod_l+0x244>
 800881a:	9905      	ldr	r1, [sp, #20]
 800881c:	4419      	add	r1, r3
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	462b      	mov	r3, r5
 8008822:	eb00 0e05 	add.w	lr, r0, r5
 8008826:	210a      	movs	r1, #10
 8008828:	4573      	cmp	r3, lr
 800882a:	d113      	bne.n	8008854 <_strtod_l+0x254>
 800882c:	182b      	adds	r3, r5, r0
 800882e:	2b08      	cmp	r3, #8
 8008830:	f105 0501 	add.w	r5, r5, #1
 8008834:	4405      	add	r5, r0
 8008836:	dc1c      	bgt.n	8008872 <_strtod_l+0x272>
 8008838:	9907      	ldr	r1, [sp, #28]
 800883a:	230a      	movs	r3, #10
 800883c:	fb03 2301 	mla	r3, r3, r1, r2
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	2300      	movs	r3, #0
 8008844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008846:	1c51      	adds	r1, r2, #1
 8008848:	9117      	str	r1, [sp, #92]	; 0x5c
 800884a:	7852      	ldrb	r2, [r2, #1]
 800884c:	4618      	mov	r0, r3
 800884e:	e7c9      	b.n	80087e4 <_strtod_l+0x1e4>
 8008850:	4638      	mov	r0, r7
 8008852:	e7d2      	b.n	80087fa <_strtod_l+0x1fa>
 8008854:	2b08      	cmp	r3, #8
 8008856:	dc04      	bgt.n	8008862 <_strtod_l+0x262>
 8008858:	9e07      	ldr	r6, [sp, #28]
 800885a:	434e      	muls	r6, r1
 800885c:	9607      	str	r6, [sp, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	e7e2      	b.n	8008828 <_strtod_l+0x228>
 8008862:	f103 0c01 	add.w	ip, r3, #1
 8008866:	f1bc 0f10 	cmp.w	ip, #16
 800886a:	bfd8      	it	le
 800886c:	fb01 f909 	mulle.w	r9, r1, r9
 8008870:	e7f5      	b.n	800885e <_strtod_l+0x25e>
 8008872:	2d10      	cmp	r5, #16
 8008874:	bfdc      	itt	le
 8008876:	230a      	movle	r3, #10
 8008878:	fb03 2909 	mlale	r9, r3, r9, r2
 800887c:	e7e1      	b.n	8008842 <_strtod_l+0x242>
 800887e:	2300      	movs	r3, #0
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	2301      	movs	r3, #1
 8008884:	e77c      	b.n	8008780 <_strtod_l+0x180>
 8008886:	f04f 0c00 	mov.w	ip, #0
 800888a:	f108 0202 	add.w	r2, r8, #2
 800888e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008890:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008894:	e785      	b.n	80087a2 <_strtod_l+0x1a2>
 8008896:	f04f 0c01 	mov.w	ip, #1
 800889a:	e7f6      	b.n	800888a <_strtod_l+0x28a>
 800889c:	0800c50c 	.word	0x0800c50c
 80088a0:	0800c25c 	.word	0x0800c25c
 80088a4:	7ff00000 	.word	0x7ff00000
 80088a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088aa:	1c51      	adds	r1, r2, #1
 80088ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80088ae:	7852      	ldrb	r2, [r2, #1]
 80088b0:	2a30      	cmp	r2, #48	; 0x30
 80088b2:	d0f9      	beq.n	80088a8 <_strtod_l+0x2a8>
 80088b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088b8:	2908      	cmp	r1, #8
 80088ba:	f63f af79 	bhi.w	80087b0 <_strtod_l+0x1b0>
 80088be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088c4:	9206      	str	r2, [sp, #24]
 80088c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088c8:	1c51      	adds	r1, r2, #1
 80088ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80088cc:	7852      	ldrb	r2, [r2, #1]
 80088ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088d2:	2e09      	cmp	r6, #9
 80088d4:	d937      	bls.n	8008946 <_strtod_l+0x346>
 80088d6:	9e06      	ldr	r6, [sp, #24]
 80088d8:	1b89      	subs	r1, r1, r6
 80088da:	2908      	cmp	r1, #8
 80088dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80088e0:	dc02      	bgt.n	80088e8 <_strtod_l+0x2e8>
 80088e2:	4576      	cmp	r6, lr
 80088e4:	bfa8      	it	ge
 80088e6:	4676      	movge	r6, lr
 80088e8:	f1bc 0f00 	cmp.w	ip, #0
 80088ec:	d000      	beq.n	80088f0 <_strtod_l+0x2f0>
 80088ee:	4276      	negs	r6, r6
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	d14d      	bne.n	8008990 <_strtod_l+0x390>
 80088f4:	9904      	ldr	r1, [sp, #16]
 80088f6:	4301      	orrs	r1, r0
 80088f8:	f47f aec6 	bne.w	8008688 <_strtod_l+0x88>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f47f aee1 	bne.w	80086c4 <_strtod_l+0xc4>
 8008902:	2a69      	cmp	r2, #105	; 0x69
 8008904:	d027      	beq.n	8008956 <_strtod_l+0x356>
 8008906:	dc24      	bgt.n	8008952 <_strtod_l+0x352>
 8008908:	2a49      	cmp	r2, #73	; 0x49
 800890a:	d024      	beq.n	8008956 <_strtod_l+0x356>
 800890c:	2a4e      	cmp	r2, #78	; 0x4e
 800890e:	f47f aed9 	bne.w	80086c4 <_strtod_l+0xc4>
 8008912:	499f      	ldr	r1, [pc, #636]	; (8008b90 <_strtod_l+0x590>)
 8008914:	a817      	add	r0, sp, #92	; 0x5c
 8008916:	f002 f8b3 	bl	800aa80 <__match>
 800891a:	2800      	cmp	r0, #0
 800891c:	f43f aed2 	beq.w	80086c4 <_strtod_l+0xc4>
 8008920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b28      	cmp	r3, #40	; 0x28
 8008926:	d12d      	bne.n	8008984 <_strtod_l+0x384>
 8008928:	499a      	ldr	r1, [pc, #616]	; (8008b94 <_strtod_l+0x594>)
 800892a:	aa1a      	add	r2, sp, #104	; 0x68
 800892c:	a817      	add	r0, sp, #92	; 0x5c
 800892e:	f002 f8bb 	bl	800aaa8 <__hexnan>
 8008932:	2805      	cmp	r0, #5
 8008934:	d126      	bne.n	8008984 <_strtod_l+0x384>
 8008936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800893c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008944:	e6a0      	b.n	8008688 <_strtod_l+0x88>
 8008946:	210a      	movs	r1, #10
 8008948:	fb01 2e0e 	mla	lr, r1, lr, r2
 800894c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008950:	e7b9      	b.n	80088c6 <_strtod_l+0x2c6>
 8008952:	2a6e      	cmp	r2, #110	; 0x6e
 8008954:	e7db      	b.n	800890e <_strtod_l+0x30e>
 8008956:	4990      	ldr	r1, [pc, #576]	; (8008b98 <_strtod_l+0x598>)
 8008958:	a817      	add	r0, sp, #92	; 0x5c
 800895a:	f002 f891 	bl	800aa80 <__match>
 800895e:	2800      	cmp	r0, #0
 8008960:	f43f aeb0 	beq.w	80086c4 <_strtod_l+0xc4>
 8008964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008966:	498d      	ldr	r1, [pc, #564]	; (8008b9c <_strtod_l+0x59c>)
 8008968:	3b01      	subs	r3, #1
 800896a:	a817      	add	r0, sp, #92	; 0x5c
 800896c:	9317      	str	r3, [sp, #92]	; 0x5c
 800896e:	f002 f887 	bl	800aa80 <__match>
 8008972:	b910      	cbnz	r0, 800897a <_strtod_l+0x37a>
 8008974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008976:	3301      	adds	r3, #1
 8008978:	9317      	str	r3, [sp, #92]	; 0x5c
 800897a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008bac <_strtod_l+0x5ac>
 800897e:	f04f 0a00 	mov.w	sl, #0
 8008982:	e681      	b.n	8008688 <_strtod_l+0x88>
 8008984:	4886      	ldr	r0, [pc, #536]	; (8008ba0 <_strtod_l+0x5a0>)
 8008986:	f003 fa2f 	bl	800bde8 <nan>
 800898a:	ec5b ab10 	vmov	sl, fp, d0
 800898e:	e67b      	b.n	8008688 <_strtod_l+0x88>
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	9807      	ldr	r0, [sp, #28]
 8008994:	1af3      	subs	r3, r6, r3
 8008996:	2f00      	cmp	r7, #0
 8008998:	bf08      	it	eq
 800899a:	462f      	moveq	r7, r5
 800899c:	2d10      	cmp	r5, #16
 800899e:	9306      	str	r3, [sp, #24]
 80089a0:	46a8      	mov	r8, r5
 80089a2:	bfa8      	it	ge
 80089a4:	f04f 0810 	movge.w	r8, #16
 80089a8:	f7f7 fdac 	bl	8000504 <__aeabi_ui2d>
 80089ac:	2d09      	cmp	r5, #9
 80089ae:	4682      	mov	sl, r0
 80089b0:	468b      	mov	fp, r1
 80089b2:	dd13      	ble.n	80089dc <_strtod_l+0x3dc>
 80089b4:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <_strtod_l+0x5a4>)
 80089b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80089ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	4682      	mov	sl, r0
 80089c4:	4648      	mov	r0, r9
 80089c6:	468b      	mov	fp, r1
 80089c8:	f7f7 fd9c 	bl	8000504 <__aeabi_ui2d>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4650      	mov	r0, sl
 80089d2:	4659      	mov	r1, fp
 80089d4:	f7f7 fc5a 	bl	800028c <__adddf3>
 80089d8:	4682      	mov	sl, r0
 80089da:	468b      	mov	fp, r1
 80089dc:	2d0f      	cmp	r5, #15
 80089de:	dc38      	bgt.n	8008a52 <_strtod_l+0x452>
 80089e0:	9b06      	ldr	r3, [sp, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f43f ae50 	beq.w	8008688 <_strtod_l+0x88>
 80089e8:	dd24      	ble.n	8008a34 <_strtod_l+0x434>
 80089ea:	2b16      	cmp	r3, #22
 80089ec:	dc0b      	bgt.n	8008a06 <_strtod_l+0x406>
 80089ee:	496d      	ldr	r1, [pc, #436]	; (8008ba4 <_strtod_l+0x5a4>)
 80089f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f8:	4652      	mov	r2, sl
 80089fa:	465b      	mov	r3, fp
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	e640      	b.n	8008688 <_strtod_l+0x88>
 8008a06:	9a06      	ldr	r2, [sp, #24]
 8008a08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	db20      	blt.n	8008a52 <_strtod_l+0x452>
 8008a10:	4c64      	ldr	r4, [pc, #400]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a12:	f1c5 050f 	rsb	r5, r5, #15
 8008a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a22:	f7f7 fde9 	bl	80005f8 <__aeabi_dmul>
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	1b5d      	subs	r5, r3, r5
 8008a2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a32:	e7e3      	b.n	80089fc <_strtod_l+0x3fc>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	3316      	adds	r3, #22
 8008a38:	db0b      	blt.n	8008a52 <_strtod_l+0x452>
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	1b9e      	subs	r6, r3, r6
 8008a3e:	4b59      	ldr	r3, [pc, #356]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a48:	4650      	mov	r0, sl
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	f7f7 fefe 	bl	800084c <__aeabi_ddiv>
 8008a50:	e7d6      	b.n	8008a00 <_strtod_l+0x400>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	eba5 0808 	sub.w	r8, r5, r8
 8008a58:	4498      	add	r8, r3
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	dd74      	ble.n	8008b4a <_strtod_l+0x54a>
 8008a60:	f018 030f 	ands.w	r3, r8, #15
 8008a64:	d00a      	beq.n	8008a7c <_strtod_l+0x47c>
 8008a66:	494f      	ldr	r1, [pc, #316]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	465b      	mov	r3, fp
 8008a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	4682      	mov	sl, r0
 8008a7a:	468b      	mov	fp, r1
 8008a7c:	f038 080f 	bics.w	r8, r8, #15
 8008a80:	d04f      	beq.n	8008b22 <_strtod_l+0x522>
 8008a82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008a86:	dd22      	ble.n	8008ace <_strtod_l+0x4ce>
 8008a88:	2500      	movs	r5, #0
 8008a8a:	462e      	mov	r6, r5
 8008a8c:	9507      	str	r5, [sp, #28]
 8008a8e:	9505      	str	r5, [sp, #20]
 8008a90:	2322      	movs	r3, #34	; 0x22
 8008a92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008bac <_strtod_l+0x5ac>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	f04f 0a00 	mov.w	sl, #0
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f43f adf2 	beq.w	8008688 <_strtod_l+0x88>
 8008aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f002 f96e 	bl	800ad88 <_Bfree>
 8008aac:	9905      	ldr	r1, [sp, #20]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f002 f96a 	bl	800ad88 <_Bfree>
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f002 f966 	bl	800ad88 <_Bfree>
 8008abc:	9907      	ldr	r1, [sp, #28]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f002 f962 	bl	800ad88 <_Bfree>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f002 f95e 	bl	800ad88 <_Bfree>
 8008acc:	e5dc      	b.n	8008688 <_strtod_l+0x88>
 8008ace:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <_strtod_l+0x5a8>)
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ad8:	4650      	mov	r0, sl
 8008ada:	4659      	mov	r1, fp
 8008adc:	4699      	mov	r9, r3
 8008ade:	f1b8 0f01 	cmp.w	r8, #1
 8008ae2:	dc21      	bgt.n	8008b28 <_strtod_l+0x528>
 8008ae4:	b10b      	cbz	r3, 8008aea <_strtod_l+0x4ea>
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	468b      	mov	fp, r1
 8008aea:	4b2f      	ldr	r3, [pc, #188]	; (8008ba8 <_strtod_l+0x5a8>)
 8008aec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008af0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008afc:	f7f7 fd7c 	bl	80005f8 <__aeabi_dmul>
 8008b00:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <_strtod_l+0x5ac>)
 8008b02:	460a      	mov	r2, r1
 8008b04:	400b      	ands	r3, r1
 8008b06:	492a      	ldr	r1, [pc, #168]	; (8008bb0 <_strtod_l+0x5b0>)
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	4682      	mov	sl, r0
 8008b0c:	d8bc      	bhi.n	8008a88 <_strtod_l+0x488>
 8008b0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008b12:	428b      	cmp	r3, r1
 8008b14:	bf86      	itte	hi
 8008b16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008bb4 <_strtod_l+0x5b4>
 8008b1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008b22:	2300      	movs	r3, #0
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	e084      	b.n	8008c32 <_strtod_l+0x632>
 8008b28:	f018 0f01 	tst.w	r8, #1
 8008b2c:	d005      	beq.n	8008b3a <_strtod_l+0x53a>
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fd60 	bl	80005f8 <__aeabi_dmul>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	3208      	adds	r2, #8
 8008b3e:	f109 0901 	add.w	r9, r9, #1
 8008b42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b46:	9204      	str	r2, [sp, #16]
 8008b48:	e7c9      	b.n	8008ade <_strtod_l+0x4de>
 8008b4a:	d0ea      	beq.n	8008b22 <_strtod_l+0x522>
 8008b4c:	f1c8 0800 	rsb	r8, r8, #0
 8008b50:	f018 020f 	ands.w	r2, r8, #15
 8008b54:	d00a      	beq.n	8008b6c <_strtod_l+0x56c>
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <_strtod_l+0x5a4>)
 8008b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f7f7 fe72 	bl	800084c <__aeabi_ddiv>
 8008b68:	4682      	mov	sl, r0
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008b70:	d0d7      	beq.n	8008b22 <_strtod_l+0x522>
 8008b72:	f1b8 0f1f 	cmp.w	r8, #31
 8008b76:	dd1f      	ble.n	8008bb8 <_strtod_l+0x5b8>
 8008b78:	2500      	movs	r5, #0
 8008b7a:	462e      	mov	r6, r5
 8008b7c:	9507      	str	r5, [sp, #28]
 8008b7e:	9505      	str	r5, [sp, #20]
 8008b80:	2322      	movs	r3, #34	; 0x22
 8008b82:	f04f 0a00 	mov.w	sl, #0
 8008b86:	f04f 0b00 	mov.w	fp, #0
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e786      	b.n	8008a9c <_strtod_l+0x49c>
 8008b8e:	bf00      	nop
 8008b90:	0800c22d 	.word	0x0800c22d
 8008b94:	0800c270 	.word	0x0800c270
 8008b98:	0800c225 	.word	0x0800c225
 8008b9c:	0800c3b4 	.word	0x0800c3b4
 8008ba0:	0800c6c8 	.word	0x0800c6c8
 8008ba4:	0800c5a8 	.word	0x0800c5a8
 8008ba8:	0800c580 	.word	0x0800c580
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	7ca00000 	.word	0x7ca00000
 8008bb4:	7fefffff 	.word	0x7fefffff
 8008bb8:	f018 0310 	ands.w	r3, r8, #16
 8008bbc:	bf18      	it	ne
 8008bbe:	236a      	movne	r3, #106	; 0x6a
 8008bc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008f70 <_strtod_l+0x970>
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	4650      	mov	r0, sl
 8008bc8:	4659      	mov	r1, fp
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f018 0f01 	tst.w	r8, #1
 8008bd0:	d004      	beq.n	8008bdc <_strtod_l+0x5dc>
 8008bd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008be0:	f109 0908 	add.w	r9, r9, #8
 8008be4:	d1f2      	bne.n	8008bcc <_strtod_l+0x5cc>
 8008be6:	b10b      	cbz	r3, 8008bec <_strtod_l+0x5ec>
 8008be8:	4682      	mov	sl, r0
 8008bea:	468b      	mov	fp, r1
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	b1c3      	cbz	r3, 8008c22 <_strtod_l+0x622>
 8008bf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	dd11      	ble.n	8008c22 <_strtod_l+0x622>
 8008bfe:	2b1f      	cmp	r3, #31
 8008c00:	f340 8124 	ble.w	8008e4c <_strtod_l+0x84c>
 8008c04:	2b34      	cmp	r3, #52	; 0x34
 8008c06:	bfde      	ittt	le
 8008c08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008c0c:	f04f 33ff 	movle.w	r3, #4294967295
 8008c10:	fa03 f202 	lslle.w	r2, r3, r2
 8008c14:	f04f 0a00 	mov.w	sl, #0
 8008c18:	bfcc      	ite	gt
 8008c1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008c1e:	ea02 0b01 	andle.w	fp, r2, r1
 8008c22:	2200      	movs	r2, #0
 8008c24:	2300      	movs	r3, #0
 8008c26:	4650      	mov	r0, sl
 8008c28:	4659      	mov	r1, fp
 8008c2a:	f7f7 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d1a2      	bne.n	8008b78 <_strtod_l+0x578>
 8008c32:	9b07      	ldr	r3, [sp, #28]
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	9908      	ldr	r1, [sp, #32]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f002 f90b 	bl	800ae58 <__s2b>
 8008c42:	9007      	str	r0, [sp, #28]
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f af1f 	beq.w	8008a88 <_strtod_l+0x488>
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	1b9e      	subs	r6, r3, r6
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfb4      	ite	lt
 8008c54:	4633      	movlt	r3, r6
 8008c56:	2300      	movge	r3, #0
 8008c58:	930c      	str	r3, [sp, #48]	; 0x30
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c62:	9312      	str	r3, [sp, #72]	; 0x48
 8008c64:	462e      	mov	r6, r5
 8008c66:	9b07      	ldr	r3, [sp, #28]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	6859      	ldr	r1, [r3, #4]
 8008c6c:	f002 f84c 	bl	800ad08 <_Balloc>
 8008c70:	9005      	str	r0, [sp, #20]
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f43f af0c 	beq.w	8008a90 <_strtod_l+0x490>
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	f103 010c 	add.w	r1, r3, #12
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	300c      	adds	r0, #12
 8008c86:	f002 f831 	bl	800acec <memcpy>
 8008c8a:	ec4b ab10 	vmov	d0, sl, fp
 8008c8e:	aa1a      	add	r2, sp, #104	; 0x68
 8008c90:	a919      	add	r1, sp, #100	; 0x64
 8008c92:	4620      	mov	r0, r4
 8008c94:	f002 fc26 	bl	800b4e4 <__d2b>
 8008c98:	ec4b ab18 	vmov	d8, sl, fp
 8008c9c:	9018      	str	r0, [sp, #96]	; 0x60
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f aef6 	beq.w	8008a90 <_strtod_l+0x490>
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f002 f970 	bl	800af8c <__i2b>
 8008cac:	4606      	mov	r6, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f aeee 	beq.w	8008a90 <_strtod_l+0x490>
 8008cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfab      	itete	ge
 8008cbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008cbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008cc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008cc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008cc6:	bfac      	ite	ge
 8008cc8:	eb03 0902 	addge.w	r9, r3, r2
 8008ccc:	1ad7      	sublt	r7, r2, r3
 8008cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008cd0:	eba3 0801 	sub.w	r8, r3, r1
 8008cd4:	4490      	add	r8, r2
 8008cd6:	4ba1      	ldr	r3, [pc, #644]	; (8008f5c <_strtod_l+0x95c>)
 8008cd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cdc:	4598      	cmp	r8, r3
 8008cde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ce2:	f280 80c7 	bge.w	8008e74 <_strtod_l+0x874>
 8008ce6:	eba3 0308 	sub.w	r3, r3, r8
 8008cea:	2b1f      	cmp	r3, #31
 8008cec:	eba2 0203 	sub.w	r2, r2, r3
 8008cf0:	f04f 0101 	mov.w	r1, #1
 8008cf4:	f300 80b1 	bgt.w	8008e5a <_strtod_l+0x85a>
 8008cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9308      	str	r3, [sp, #32]
 8008d02:	eb09 0802 	add.w	r8, r9, r2
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	45c1      	cmp	r9, r8
 8008d0a:	4417      	add	r7, r2
 8008d0c:	441f      	add	r7, r3
 8008d0e:	464b      	mov	r3, r9
 8008d10:	bfa8      	it	ge
 8008d12:	4643      	movge	r3, r8
 8008d14:	42bb      	cmp	r3, r7
 8008d16:	bfa8      	it	ge
 8008d18:	463b      	movge	r3, r7
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfc2      	ittt	gt
 8008d1e:	eba8 0803 	subgt.w	r8, r8, r3
 8008d22:	1aff      	subgt	r7, r7, r3
 8008d24:	eba9 0903 	subgt.w	r9, r9, r3
 8008d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd17      	ble.n	8008d5e <_strtod_l+0x75e>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	461a      	mov	r2, r3
 8008d32:	4620      	mov	r0, r4
 8008d34:	f002 f9ea 	bl	800b10c <__pow5mult>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f43f aea8 	beq.w	8008a90 <_strtod_l+0x490>
 8008d40:	4601      	mov	r1, r0
 8008d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d44:	4620      	mov	r0, r4
 8008d46:	f002 f937 	bl	800afb8 <__multiply>
 8008d4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f ae9f 	beq.w	8008a90 <_strtod_l+0x490>
 8008d52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d54:	4620      	mov	r0, r4
 8008d56:	f002 f817 	bl	800ad88 <_Bfree>
 8008d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	f300 808c 	bgt.w	8008e7e <_strtod_l+0x87e>
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dd08      	ble.n	8008d7e <_strtod_l+0x77e>
 8008d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d6e:	9905      	ldr	r1, [sp, #20]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f002 f9cb 	bl	800b10c <__pow5mult>
 8008d76:	9005      	str	r0, [sp, #20]
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f43f ae89 	beq.w	8008a90 <_strtod_l+0x490>
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	dd08      	ble.n	8008d94 <_strtod_l+0x794>
 8008d82:	9905      	ldr	r1, [sp, #20]
 8008d84:	463a      	mov	r2, r7
 8008d86:	4620      	mov	r0, r4
 8008d88:	f002 fa1a 	bl	800b1c0 <__lshift>
 8008d8c:	9005      	str	r0, [sp, #20]
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f ae7e 	beq.w	8008a90 <_strtod_l+0x490>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	dd08      	ble.n	8008dac <_strtod_l+0x7ac>
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	464a      	mov	r2, r9
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f002 fa0e 	bl	800b1c0 <__lshift>
 8008da4:	4606      	mov	r6, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f ae72 	beq.w	8008a90 <_strtod_l+0x490>
 8008dac:	9a05      	ldr	r2, [sp, #20]
 8008dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db0:	4620      	mov	r0, r4
 8008db2:	f002 fa91 	bl	800b2d8 <__mdiff>
 8008db6:	4605      	mov	r5, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	f43f ae69 	beq.w	8008a90 <_strtod_l+0x490>
 8008dbe:	68c3      	ldr	r3, [r0, #12]
 8008dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60c3      	str	r3, [r0, #12]
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	f002 fa6a 	bl	800b2a0 <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	da60      	bge.n	8008e92 <_strtod_l+0x892>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8008dd6:	f040 8082 	bne.w	8008ede <_strtod_l+0x8de>
 8008dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d17d      	bne.n	8008ede <_strtod_l+0x8de>
 8008de2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008de6:	0d1b      	lsrs	r3, r3, #20
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dee:	d976      	bls.n	8008ede <_strtod_l+0x8de>
 8008df0:	696b      	ldr	r3, [r5, #20]
 8008df2:	b913      	cbnz	r3, 8008dfa <_strtod_l+0x7fa>
 8008df4:	692b      	ldr	r3, [r5, #16]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	dd71      	ble.n	8008ede <_strtod_l+0x8de>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f002 f9de 	bl	800b1c0 <__lshift>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4605      	mov	r5, r0
 8008e08:	f002 fa4a 	bl	800b2a0 <__mcmp>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	dd66      	ble.n	8008ede <_strtod_l+0x8de>
 8008e10:	9904      	ldr	r1, [sp, #16]
 8008e12:	4a53      	ldr	r2, [pc, #332]	; (8008f60 <_strtod_l+0x960>)
 8008e14:	465b      	mov	r3, fp
 8008e16:	2900      	cmp	r1, #0
 8008e18:	f000 8081 	beq.w	8008f1e <_strtod_l+0x91e>
 8008e1c:	ea02 010b 	and.w	r1, r2, fp
 8008e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e24:	dc7b      	bgt.n	8008f1e <_strtod_l+0x91e>
 8008e26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e2a:	f77f aea9 	ble.w	8008b80 <_strtod_l+0x580>
 8008e2e:	4b4d      	ldr	r3, [pc, #308]	; (8008f64 <_strtod_l+0x964>)
 8008e30:	4650      	mov	r0, sl
 8008e32:	4659      	mov	r1, fp
 8008e34:	2200      	movs	r2, #0
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4303      	orrs	r3, r0
 8008e3e:	bf08      	it	eq
 8008e40:	2322      	moveq	r3, #34	; 0x22
 8008e42:	4682      	mov	sl, r0
 8008e44:	468b      	mov	fp, r1
 8008e46:	bf08      	it	eq
 8008e48:	6023      	streq	r3, [r4, #0]
 8008e4a:	e62b      	b.n	8008aa4 <_strtod_l+0x4a4>
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	ea03 0a0a 	and.w	sl, r3, sl
 8008e58:	e6e3      	b.n	8008c22 <_strtod_l+0x622>
 8008e5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008e5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008e62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008e66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008e6a:	fa01 f308 	lsl.w	r3, r1, r8
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	910d      	str	r1, [sp, #52]	; 0x34
 8008e72:	e746      	b.n	8008d02 <_strtod_l+0x702>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9308      	str	r3, [sp, #32]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e7c:	e741      	b.n	8008d02 <_strtod_l+0x702>
 8008e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e80:	4642      	mov	r2, r8
 8008e82:	4620      	mov	r0, r4
 8008e84:	f002 f99c 	bl	800b1c0 <__lshift>
 8008e88:	9018      	str	r0, [sp, #96]	; 0x60
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f47f af6b 	bne.w	8008d66 <_strtod_l+0x766>
 8008e90:	e5fe      	b.n	8008a90 <_strtod_l+0x490>
 8008e92:	465f      	mov	r7, fp
 8008e94:	d16e      	bne.n	8008f74 <_strtod_l+0x974>
 8008e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e9c:	b342      	cbz	r2, 8008ef0 <_strtod_l+0x8f0>
 8008e9e:	4a32      	ldr	r2, [pc, #200]	; (8008f68 <_strtod_l+0x968>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d128      	bne.n	8008ef6 <_strtod_l+0x8f6>
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	b1eb      	cbz	r3, 8008ee6 <_strtod_l+0x8e6>
 8008eaa:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <_strtod_l+0x960>)
 8008eac:	403b      	ands	r3, r7
 8008eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb6:	d819      	bhi.n	8008eec <_strtod_l+0x8ec>
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d117      	bne.n	8008ef6 <_strtod_l+0x8f6>
 8008ec6:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <_strtod_l+0x96c>)
 8008ec8:	429f      	cmp	r7, r3
 8008eca:	d102      	bne.n	8008ed2 <_strtod_l+0x8d2>
 8008ecc:	3101      	adds	r1, #1
 8008ece:	f43f addf 	beq.w	8008a90 <_strtod_l+0x490>
 8008ed2:	4b23      	ldr	r3, [pc, #140]	; (8008f60 <_strtod_l+0x960>)
 8008ed4:	403b      	ands	r3, r7
 8008ed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008eda:	f04f 0a00 	mov.w	sl, #0
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1a4      	bne.n	8008e2e <_strtod_l+0x82e>
 8008ee4:	e5de      	b.n	8008aa4 <_strtod_l+0x4a4>
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	e7ea      	b.n	8008ec2 <_strtod_l+0x8c2>
 8008eec:	4613      	mov	r3, r2
 8008eee:	e7e8      	b.n	8008ec2 <_strtod_l+0x8c2>
 8008ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ef4:	d08c      	beq.n	8008e10 <_strtod_l+0x810>
 8008ef6:	9b08      	ldr	r3, [sp, #32]
 8008ef8:	b1db      	cbz	r3, 8008f32 <_strtod_l+0x932>
 8008efa:	423b      	tst	r3, r7
 8008efc:	d0ef      	beq.n	8008ede <_strtod_l+0x8de>
 8008efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	4650      	mov	r0, sl
 8008f04:	4659      	mov	r1, fp
 8008f06:	b1c3      	cbz	r3, 8008f3a <_strtod_l+0x93a>
 8008f08:	f7ff fb5e 	bl	80085c8 <sulp>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	ec51 0b18 	vmov	r0, r1, d8
 8008f14:	f7f7 f9ba 	bl	800028c <__adddf3>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	e7df      	b.n	8008ede <_strtod_l+0x8de>
 8008f1e:	4013      	ands	r3, r2
 8008f20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f30:	e7d5      	b.n	8008ede <_strtod_l+0x8de>
 8008f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f34:	ea13 0f0a 	tst.w	r3, sl
 8008f38:	e7e0      	b.n	8008efc <_strtod_l+0x8fc>
 8008f3a:	f7ff fb45 	bl	80085c8 <sulp>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	ec51 0b18 	vmov	r0, r1, d8
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	f7f7 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0c1      	beq.n	8008ede <_strtod_l+0x8de>
 8008f5a:	e611      	b.n	8008b80 <_strtod_l+0x580>
 8008f5c:	fffffc02 	.word	0xfffffc02
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	39500000 	.word	0x39500000
 8008f68:	000fffff 	.word	0x000fffff
 8008f6c:	7fefffff 	.word	0x7fefffff
 8008f70:	0800c288 	.word	0x0800c288
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	f002 fb10 	bl	800b59c <__ratio>
 8008f7c:	ec59 8b10 	vmov	r8, r9, d0
 8008f80:	ee10 0a10 	vmov	r0, s0
 8008f84:	2200      	movs	r2, #0
 8008f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 fdb0 	bl	8000af0 <__aeabi_dcmple>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d07a      	beq.n	800908a <_strtod_l+0xa8a>
 8008f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04a      	beq.n	8009030 <_strtod_l+0xa30>
 8008f9a:	4b95      	ldr	r3, [pc, #596]	; (80091f0 <_strtod_l+0xbf0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80091f0 <_strtod_l+0xbf0>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	4b92      	ldr	r3, [pc, #584]	; (80091f4 <_strtod_l+0xbf4>)
 8008fac:	403b      	ands	r3, r7
 8008fae:	930d      	str	r3, [sp, #52]	; 0x34
 8008fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb2:	4b91      	ldr	r3, [pc, #580]	; (80091f8 <_strtod_l+0xbf8>)
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f040 80b0 	bne.w	800911a <_strtod_l+0xb1a>
 8008fba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008fc2:	ec4b ab10 	vmov	d0, sl, fp
 8008fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fca:	f002 fa0f 	bl	800b3ec <__ulp>
 8008fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fd2:	ec53 2b10 	vmov	r2, r3, d0
 8008fd6:	f7f7 fb0f 	bl	80005f8 <__aeabi_dmul>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 f955 	bl	800028c <__adddf3>
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4983      	ldr	r1, [pc, #524]	; (80091f4 <_strtod_l+0xbf4>)
 8008fe6:	4a85      	ldr	r2, [pc, #532]	; (80091fc <_strtod_l+0xbfc>)
 8008fe8:	4019      	ands	r1, r3
 8008fea:	4291      	cmp	r1, r2
 8008fec:	4682      	mov	sl, r0
 8008fee:	d960      	bls.n	80090b2 <_strtod_l+0xab2>
 8008ff0:	ee18 3a90 	vmov	r3, s17
 8008ff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d104      	bne.n	8009006 <_strtod_l+0xa06>
 8008ffc:	ee18 3a10 	vmov	r3, s16
 8009000:	3301      	adds	r3, #1
 8009002:	f43f ad45 	beq.w	8008a90 <_strtod_l+0x490>
 8009006:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009208 <_strtod_l+0xc08>
 800900a:	f04f 3aff 	mov.w	sl, #4294967295
 800900e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009010:	4620      	mov	r0, r4
 8009012:	f001 feb9 	bl	800ad88 <_Bfree>
 8009016:	9905      	ldr	r1, [sp, #20]
 8009018:	4620      	mov	r0, r4
 800901a:	f001 feb5 	bl	800ad88 <_Bfree>
 800901e:	4631      	mov	r1, r6
 8009020:	4620      	mov	r0, r4
 8009022:	f001 feb1 	bl	800ad88 <_Bfree>
 8009026:	4629      	mov	r1, r5
 8009028:	4620      	mov	r0, r4
 800902a:	f001 fead 	bl	800ad88 <_Bfree>
 800902e:	e61a      	b.n	8008c66 <_strtod_l+0x666>
 8009030:	f1ba 0f00 	cmp.w	sl, #0
 8009034:	d11b      	bne.n	800906e <_strtod_l+0xa6e>
 8009036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800903a:	b9f3      	cbnz	r3, 800907a <_strtod_l+0xa7a>
 800903c:	4b6c      	ldr	r3, [pc, #432]	; (80091f0 <_strtod_l+0xbf0>)
 800903e:	2200      	movs	r2, #0
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8009048:	b9d0      	cbnz	r0, 8009080 <_strtod_l+0xa80>
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	4b6c      	ldr	r3, [pc, #432]	; (8009200 <_strtod_l+0xc00>)
 8009050:	2200      	movs	r2, #0
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800905e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009062:	9315      	str	r3, [sp, #84]	; 0x54
 8009064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800906c:	e79d      	b.n	8008faa <_strtod_l+0x9aa>
 800906e:	f1ba 0f01 	cmp.w	sl, #1
 8009072:	d102      	bne.n	800907a <_strtod_l+0xa7a>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f43f ad83 	beq.w	8008b80 <_strtod_l+0x580>
 800907a:	4b62      	ldr	r3, [pc, #392]	; (8009204 <_strtod_l+0xc04>)
 800907c:	2200      	movs	r2, #0
 800907e:	e78e      	b.n	8008f9e <_strtod_l+0x99e>
 8009080:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009200 <_strtod_l+0xc00>
 8009084:	f04f 0800 	mov.w	r8, #0
 8009088:	e7e7      	b.n	800905a <_strtod_l+0xa5a>
 800908a:	4b5d      	ldr	r3, [pc, #372]	; (8009200 <_strtod_l+0xc00>)
 800908c:	4640      	mov	r0, r8
 800908e:	4649      	mov	r1, r9
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009098:	4680      	mov	r8, r0
 800909a:	4689      	mov	r9, r1
 800909c:	b933      	cbnz	r3, 80090ac <_strtod_l+0xaac>
 800909e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a2:	900e      	str	r0, [sp, #56]	; 0x38
 80090a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090aa:	e7dd      	b.n	8009068 <_strtod_l+0xa68>
 80090ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80090b0:	e7f9      	b.n	80090a6 <_strtod_l+0xaa6>
 80090b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1a8      	bne.n	800900e <_strtod_l+0xa0e>
 80090bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090c2:	0d1b      	lsrs	r3, r3, #20
 80090c4:	051b      	lsls	r3, r3, #20
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d1a1      	bne.n	800900e <_strtod_l+0xa0e>
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fddb 	bl	8000c88 <__aeabi_d2lz>
 80090d2:	f7f7 fa63 	bl	800059c <__aeabi_l2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f8d3 	bl	8000288 <__aeabi_dsub>
 80090e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090e8:	ea43 030a 	orr.w	r3, r3, sl
 80090ec:	4313      	orrs	r3, r2
 80090ee:	4680      	mov	r8, r0
 80090f0:	4689      	mov	r9, r1
 80090f2:	d055      	beq.n	80091a0 <_strtod_l+0xba0>
 80090f4:	a336      	add	r3, pc, #216	; (adr r3, 80091d0 <_strtod_l+0xbd0>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 fcef 	bl	8000adc <__aeabi_dcmplt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f47f acd0 	bne.w	8008aa4 <_strtod_l+0x4a4>
 8009104:	a334      	add	r3, pc, #208	; (adr r3, 80091d8 <_strtod_l+0xbd8>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f af7b 	beq.w	800900e <_strtod_l+0xa0e>
 8009118:	e4c4      	b.n	8008aa4 <_strtod_l+0x4a4>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	b333      	cbz	r3, 800916c <_strtod_l+0xb6c>
 800911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009124:	d822      	bhi.n	800916c <_strtod_l+0xb6c>
 8009126:	a32e      	add	r3, pc, #184	; (adr r3, 80091e0 <_strtod_l+0xbe0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcde 	bl	8000af0 <__aeabi_dcmple>
 8009134:	b1a0      	cbz	r0, 8009160 <_strtod_l+0xb60>
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	f7f7 fd35 	bl	8000ba8 <__aeabi_d2uiz>
 800913e:	2801      	cmp	r0, #1
 8009140:	bf38      	it	cc
 8009142:	2001      	movcc	r0, #1
 8009144:	f7f7 f9de 	bl	8000504 <__aeabi_ui2d>
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	4680      	mov	r8, r0
 800914c:	4689      	mov	r9, r1
 800914e:	bb23      	cbnz	r3, 800919a <_strtod_l+0xb9a>
 8009150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009154:	9010      	str	r0, [sp, #64]	; 0x40
 8009156:	9311      	str	r3, [sp, #68]	; 0x44
 8009158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800915c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
 800916c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009170:	eeb0 0a48 	vmov.f32	s0, s16
 8009174:	eef0 0a68 	vmov.f32	s1, s17
 8009178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800917c:	f002 f936 	bl	800b3ec <__ulp>
 8009180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009184:	ec53 2b10 	vmov	r2, r3, d0
 8009188:	f7f7 fa36 	bl	80005f8 <__aeabi_dmul>
 800918c:	ec53 2b18 	vmov	r2, r3, d8
 8009190:	f7f7 f87c 	bl	800028c <__adddf3>
 8009194:	4682      	mov	sl, r0
 8009196:	468b      	mov	fp, r1
 8009198:	e78d      	b.n	80090b6 <_strtod_l+0xab6>
 800919a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800919e:	e7db      	b.n	8009158 <_strtod_l+0xb58>
 80091a0:	a311      	add	r3, pc, #68	; (adr r3, 80091e8 <_strtod_l+0xbe8>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 fc99 	bl	8000adc <__aeabi_dcmplt>
 80091aa:	e7b2      	b.n	8009112 <_strtod_l+0xb12>
 80091ac:	2300      	movs	r3, #0
 80091ae:	930a      	str	r3, [sp, #40]	; 0x28
 80091b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	f7ff ba6b 	b.w	8008690 <_strtod_l+0x90>
 80091ba:	2a65      	cmp	r2, #101	; 0x65
 80091bc:	f43f ab5f 	beq.w	800887e <_strtod_l+0x27e>
 80091c0:	2a45      	cmp	r2, #69	; 0x45
 80091c2:	f43f ab5c 	beq.w	800887e <_strtod_l+0x27e>
 80091c6:	2301      	movs	r3, #1
 80091c8:	f7ff bb94 	b.w	80088f4 <_strtod_l+0x2f4>
 80091cc:	f3af 8000 	nop.w
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fdfffff 	.word	0x3fdfffff
 80091d8:	35afe535 	.word	0x35afe535
 80091dc:	3fe00000 	.word	0x3fe00000
 80091e0:	ffc00000 	.word	0xffc00000
 80091e4:	41dfffff 	.word	0x41dfffff
 80091e8:	94a03595 	.word	0x94a03595
 80091ec:	3fcfffff 	.word	0x3fcfffff
 80091f0:	3ff00000 	.word	0x3ff00000
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	7fe00000 	.word	0x7fe00000
 80091fc:	7c9fffff 	.word	0x7c9fffff
 8009200:	3fe00000 	.word	0x3fe00000
 8009204:	bff00000 	.word	0xbff00000
 8009208:	7fefffff 	.word	0x7fefffff

0800920c <_strtod_r>:
 800920c:	4b01      	ldr	r3, [pc, #4]	; (8009214 <_strtod_r+0x8>)
 800920e:	f7ff b9f7 	b.w	8008600 <_strtod_l>
 8009212:	bf00      	nop
 8009214:	20000074 	.word	0x20000074

08009218 <_strtol_l.constprop.0>:
 8009218:	2b01      	cmp	r3, #1
 800921a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921e:	d001      	beq.n	8009224 <_strtol_l.constprop.0+0xc>
 8009220:	2b24      	cmp	r3, #36	; 0x24
 8009222:	d906      	bls.n	8009232 <_strtol_l.constprop.0+0x1a>
 8009224:	f7fe fa70 	bl	8007708 <__errno>
 8009228:	2316      	movs	r3, #22
 800922a:	6003      	str	r3, [r0, #0]
 800922c:	2000      	movs	r0, #0
 800922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009232:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009318 <_strtol_l.constprop.0+0x100>
 8009236:	460d      	mov	r5, r1
 8009238:	462e      	mov	r6, r5
 800923a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800923e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009242:	f017 0708 	ands.w	r7, r7, #8
 8009246:	d1f7      	bne.n	8009238 <_strtol_l.constprop.0+0x20>
 8009248:	2c2d      	cmp	r4, #45	; 0x2d
 800924a:	d132      	bne.n	80092b2 <_strtol_l.constprop.0+0x9a>
 800924c:	782c      	ldrb	r4, [r5, #0]
 800924e:	2701      	movs	r7, #1
 8009250:	1cb5      	adds	r5, r6, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d05b      	beq.n	800930e <_strtol_l.constprop.0+0xf6>
 8009256:	2b10      	cmp	r3, #16
 8009258:	d109      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800925a:	2c30      	cmp	r4, #48	; 0x30
 800925c:	d107      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800925e:	782c      	ldrb	r4, [r5, #0]
 8009260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009264:	2c58      	cmp	r4, #88	; 0x58
 8009266:	d14d      	bne.n	8009304 <_strtol_l.constprop.0+0xec>
 8009268:	786c      	ldrb	r4, [r5, #1]
 800926a:	2310      	movs	r3, #16
 800926c:	3502      	adds	r5, #2
 800926e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009272:	f108 38ff 	add.w	r8, r8, #4294967295
 8009276:	f04f 0c00 	mov.w	ip, #0
 800927a:	fbb8 f9f3 	udiv	r9, r8, r3
 800927e:	4666      	mov	r6, ip
 8009280:	fb03 8a19 	mls	sl, r3, r9, r8
 8009284:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009288:	f1be 0f09 	cmp.w	lr, #9
 800928c:	d816      	bhi.n	80092bc <_strtol_l.constprop.0+0xa4>
 800928e:	4674      	mov	r4, lr
 8009290:	42a3      	cmp	r3, r4
 8009292:	dd24      	ble.n	80092de <_strtol_l.constprop.0+0xc6>
 8009294:	f1bc 0f00 	cmp.w	ip, #0
 8009298:	db1e      	blt.n	80092d8 <_strtol_l.constprop.0+0xc0>
 800929a:	45b1      	cmp	r9, r6
 800929c:	d31c      	bcc.n	80092d8 <_strtol_l.constprop.0+0xc0>
 800929e:	d101      	bne.n	80092a4 <_strtol_l.constprop.0+0x8c>
 80092a0:	45a2      	cmp	sl, r4
 80092a2:	db19      	blt.n	80092d8 <_strtol_l.constprop.0+0xc0>
 80092a4:	fb06 4603 	mla	r6, r6, r3, r4
 80092a8:	f04f 0c01 	mov.w	ip, #1
 80092ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092b0:	e7e8      	b.n	8009284 <_strtol_l.constprop.0+0x6c>
 80092b2:	2c2b      	cmp	r4, #43	; 0x2b
 80092b4:	bf04      	itt	eq
 80092b6:	782c      	ldrbeq	r4, [r5, #0]
 80092b8:	1cb5      	addeq	r5, r6, #2
 80092ba:	e7ca      	b.n	8009252 <_strtol_l.constprop.0+0x3a>
 80092bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80092c0:	f1be 0f19 	cmp.w	lr, #25
 80092c4:	d801      	bhi.n	80092ca <_strtol_l.constprop.0+0xb2>
 80092c6:	3c37      	subs	r4, #55	; 0x37
 80092c8:	e7e2      	b.n	8009290 <_strtol_l.constprop.0+0x78>
 80092ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092ce:	f1be 0f19 	cmp.w	lr, #25
 80092d2:	d804      	bhi.n	80092de <_strtol_l.constprop.0+0xc6>
 80092d4:	3c57      	subs	r4, #87	; 0x57
 80092d6:	e7db      	b.n	8009290 <_strtol_l.constprop.0+0x78>
 80092d8:	f04f 3cff 	mov.w	ip, #4294967295
 80092dc:	e7e6      	b.n	80092ac <_strtol_l.constprop.0+0x94>
 80092de:	f1bc 0f00 	cmp.w	ip, #0
 80092e2:	da05      	bge.n	80092f0 <_strtol_l.constprop.0+0xd8>
 80092e4:	2322      	movs	r3, #34	; 0x22
 80092e6:	6003      	str	r3, [r0, #0]
 80092e8:	4646      	mov	r6, r8
 80092ea:	b942      	cbnz	r2, 80092fe <_strtol_l.constprop.0+0xe6>
 80092ec:	4630      	mov	r0, r6
 80092ee:	e79e      	b.n	800922e <_strtol_l.constprop.0+0x16>
 80092f0:	b107      	cbz	r7, 80092f4 <_strtol_l.constprop.0+0xdc>
 80092f2:	4276      	negs	r6, r6
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d0f9      	beq.n	80092ec <_strtol_l.constprop.0+0xd4>
 80092f8:	f1bc 0f00 	cmp.w	ip, #0
 80092fc:	d000      	beq.n	8009300 <_strtol_l.constprop.0+0xe8>
 80092fe:	1e69      	subs	r1, r5, #1
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	e7f3      	b.n	80092ec <_strtol_l.constprop.0+0xd4>
 8009304:	2430      	movs	r4, #48	; 0x30
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1b1      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800930a:	2308      	movs	r3, #8
 800930c:	e7af      	b.n	800926e <_strtol_l.constprop.0+0x56>
 800930e:	2c30      	cmp	r4, #48	; 0x30
 8009310:	d0a5      	beq.n	800925e <_strtol_l.constprop.0+0x46>
 8009312:	230a      	movs	r3, #10
 8009314:	e7ab      	b.n	800926e <_strtol_l.constprop.0+0x56>
 8009316:	bf00      	nop
 8009318:	0800c2b1 	.word	0x0800c2b1

0800931c <_strtol_r>:
 800931c:	f7ff bf7c 	b.w	8009218 <_strtol_l.constprop.0>

08009320 <__swbuf_r>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	460e      	mov	r6, r1
 8009324:	4614      	mov	r4, r2
 8009326:	4605      	mov	r5, r0
 8009328:	b118      	cbz	r0, 8009332 <__swbuf_r+0x12>
 800932a:	6983      	ldr	r3, [r0, #24]
 800932c:	b90b      	cbnz	r3, 8009332 <__swbuf_r+0x12>
 800932e:	f001 f84b 	bl	800a3c8 <__sinit>
 8009332:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <__swbuf_r+0x98>)
 8009334:	429c      	cmp	r4, r3
 8009336:	d12b      	bne.n	8009390 <__swbuf_r+0x70>
 8009338:	686c      	ldr	r4, [r5, #4]
 800933a:	69a3      	ldr	r3, [r4, #24]
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	071a      	lsls	r2, r3, #28
 8009342:	d52f      	bpl.n	80093a4 <__swbuf_r+0x84>
 8009344:	6923      	ldr	r3, [r4, #16]
 8009346:	b36b      	cbz	r3, 80093a4 <__swbuf_r+0x84>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	1ac0      	subs	r0, r0, r3
 800934e:	6963      	ldr	r3, [r4, #20]
 8009350:	b2f6      	uxtb	r6, r6
 8009352:	4283      	cmp	r3, r0
 8009354:	4637      	mov	r7, r6
 8009356:	dc04      	bgt.n	8009362 <__swbuf_r+0x42>
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f000 ffa0 	bl	800a2a0 <_fflush_r>
 8009360:	bb30      	cbnz	r0, 80093b0 <__swbuf_r+0x90>
 8009362:	68a3      	ldr	r3, [r4, #8]
 8009364:	3b01      	subs	r3, #1
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	6022      	str	r2, [r4, #0]
 800936e:	701e      	strb	r6, [r3, #0]
 8009370:	6963      	ldr	r3, [r4, #20]
 8009372:	3001      	adds	r0, #1
 8009374:	4283      	cmp	r3, r0
 8009376:	d004      	beq.n	8009382 <__swbuf_r+0x62>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	07db      	lsls	r3, r3, #31
 800937c:	d506      	bpl.n	800938c <__swbuf_r+0x6c>
 800937e:	2e0a      	cmp	r6, #10
 8009380:	d104      	bne.n	800938c <__swbuf_r+0x6c>
 8009382:	4621      	mov	r1, r4
 8009384:	4628      	mov	r0, r5
 8009386:	f000 ff8b 	bl	800a2a0 <_fflush_r>
 800938a:	b988      	cbnz	r0, 80093b0 <__swbuf_r+0x90>
 800938c:	4638      	mov	r0, r7
 800938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <__swbuf_r+0x9c>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d101      	bne.n	800939a <__swbuf_r+0x7a>
 8009396:	68ac      	ldr	r4, [r5, #8]
 8009398:	e7cf      	b.n	800933a <__swbuf_r+0x1a>
 800939a:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <__swbuf_r+0xa0>)
 800939c:	429c      	cmp	r4, r3
 800939e:	bf08      	it	eq
 80093a0:	68ec      	ldreq	r4, [r5, #12]
 80093a2:	e7ca      	b.n	800933a <__swbuf_r+0x1a>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f80c 	bl	80093c4 <__swsetup_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d0cb      	beq.n	8009348 <__swbuf_r+0x28>
 80093b0:	f04f 37ff 	mov.w	r7, #4294967295
 80093b4:	e7ea      	b.n	800938c <__swbuf_r+0x6c>
 80093b6:	bf00      	nop
 80093b8:	0800c464 	.word	0x0800c464
 80093bc:	0800c484 	.word	0x0800c484
 80093c0:	0800c444 	.word	0x0800c444

080093c4 <__swsetup_r>:
 80093c4:	4b32      	ldr	r3, [pc, #200]	; (8009490 <__swsetup_r+0xcc>)
 80093c6:	b570      	push	{r4, r5, r6, lr}
 80093c8:	681d      	ldr	r5, [r3, #0]
 80093ca:	4606      	mov	r6, r0
 80093cc:	460c      	mov	r4, r1
 80093ce:	b125      	cbz	r5, 80093da <__swsetup_r+0x16>
 80093d0:	69ab      	ldr	r3, [r5, #24]
 80093d2:	b913      	cbnz	r3, 80093da <__swsetup_r+0x16>
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 fff7 	bl	800a3c8 <__sinit>
 80093da:	4b2e      	ldr	r3, [pc, #184]	; (8009494 <__swsetup_r+0xd0>)
 80093dc:	429c      	cmp	r4, r3
 80093de:	d10f      	bne.n	8009400 <__swsetup_r+0x3c>
 80093e0:	686c      	ldr	r4, [r5, #4]
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e8:	0719      	lsls	r1, r3, #28
 80093ea:	d42c      	bmi.n	8009446 <__swsetup_r+0x82>
 80093ec:	06dd      	lsls	r5, r3, #27
 80093ee:	d411      	bmi.n	8009414 <__swsetup_r+0x50>
 80093f0:	2309      	movs	r3, #9
 80093f2:	6033      	str	r3, [r6, #0]
 80093f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295
 80093fe:	e03e      	b.n	800947e <__swsetup_r+0xba>
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <__swsetup_r+0xd4>)
 8009402:	429c      	cmp	r4, r3
 8009404:	d101      	bne.n	800940a <__swsetup_r+0x46>
 8009406:	68ac      	ldr	r4, [r5, #8]
 8009408:	e7eb      	b.n	80093e2 <__swsetup_r+0x1e>
 800940a:	4b24      	ldr	r3, [pc, #144]	; (800949c <__swsetup_r+0xd8>)
 800940c:	429c      	cmp	r4, r3
 800940e:	bf08      	it	eq
 8009410:	68ec      	ldreq	r4, [r5, #12]
 8009412:	e7e6      	b.n	80093e2 <__swsetup_r+0x1e>
 8009414:	0758      	lsls	r0, r3, #29
 8009416:	d512      	bpl.n	800943e <__swsetup_r+0x7a>
 8009418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941a:	b141      	cbz	r1, 800942e <__swsetup_r+0x6a>
 800941c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <__swsetup_r+0x66>
 8009424:	4630      	mov	r0, r6
 8009426:	f002 f947 	bl	800b6b8 <_free_r>
 800942a:	2300      	movs	r3, #0
 800942c:	6363      	str	r3, [r4, #52]	; 0x34
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	2300      	movs	r3, #0
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	f043 0308 	orr.w	r3, r3, #8
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	b94b      	cbnz	r3, 800945e <__swsetup_r+0x9a>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009454:	d003      	beq.n	800945e <__swsetup_r+0x9a>
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f001 fbed 	bl	800ac38 <__smakebuf_r>
 800945e:	89a0      	ldrh	r0, [r4, #12]
 8009460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009464:	f010 0301 	ands.w	r3, r0, #1
 8009468:	d00a      	beq.n	8009480 <__swsetup_r+0xbc>
 800946a:	2300      	movs	r3, #0
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	6963      	ldr	r3, [r4, #20]
 8009470:	425b      	negs	r3, r3
 8009472:	61a3      	str	r3, [r4, #24]
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	b943      	cbnz	r3, 800948a <__swsetup_r+0xc6>
 8009478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800947c:	d1ba      	bne.n	80093f4 <__swsetup_r+0x30>
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	0781      	lsls	r1, r0, #30
 8009482:	bf58      	it	pl
 8009484:	6963      	ldrpl	r3, [r4, #20]
 8009486:	60a3      	str	r3, [r4, #8]
 8009488:	e7f4      	b.n	8009474 <__swsetup_r+0xb0>
 800948a:	2000      	movs	r0, #0
 800948c:	e7f7      	b.n	800947e <__swsetup_r+0xba>
 800948e:	bf00      	nop
 8009490:	2000000c 	.word	0x2000000c
 8009494:	0800c464 	.word	0x0800c464
 8009498:	0800c484 	.word	0x0800c484
 800949c:	0800c444 	.word	0x0800c444

080094a0 <quorem>:
 80094a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	6903      	ldr	r3, [r0, #16]
 80094a6:	690c      	ldr	r4, [r1, #16]
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	4607      	mov	r7, r0
 80094ac:	f2c0 8081 	blt.w	80095b2 <quorem+0x112>
 80094b0:	3c01      	subs	r4, #1
 80094b2:	f101 0814 	add.w	r8, r1, #20
 80094b6:	f100 0514 	add.w	r5, r0, #20
 80094ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094c8:	3301      	adds	r3, #1
 80094ca:	429a      	cmp	r2, r3
 80094cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80094d8:	d331      	bcc.n	800953e <quorem+0x9e>
 80094da:	f04f 0e00 	mov.w	lr, #0
 80094de:	4640      	mov	r0, r8
 80094e0:	46ac      	mov	ip, r5
 80094e2:	46f2      	mov	sl, lr
 80094e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80094e8:	b293      	uxth	r3, r2
 80094ea:	fb06 e303 	mla	r3, r6, r3, lr
 80094ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	ebaa 0303 	sub.w	r3, sl, r3
 80094f8:	f8dc a000 	ldr.w	sl, [ip]
 80094fc:	0c12      	lsrs	r2, r2, #16
 80094fe:	fa13 f38a 	uxtah	r3, r3, sl
 8009502:	fb06 e202 	mla	r2, r6, r2, lr
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	9b00      	ldr	r3, [sp, #0]
 800950a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800950e:	b292      	uxth	r2, r2
 8009510:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009518:	f8bd 3000 	ldrh.w	r3, [sp]
 800951c:	4581      	cmp	r9, r0
 800951e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009522:	f84c 3b04 	str.w	r3, [ip], #4
 8009526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800952a:	d2db      	bcs.n	80094e4 <quorem+0x44>
 800952c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009530:	b92b      	cbnz	r3, 800953e <quorem+0x9e>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	3b04      	subs	r3, #4
 8009536:	429d      	cmp	r5, r3
 8009538:	461a      	mov	r2, r3
 800953a:	d32e      	bcc.n	800959a <quorem+0xfa>
 800953c:	613c      	str	r4, [r7, #16]
 800953e:	4638      	mov	r0, r7
 8009540:	f001 feae 	bl	800b2a0 <__mcmp>
 8009544:	2800      	cmp	r0, #0
 8009546:	db24      	blt.n	8009592 <quorem+0xf2>
 8009548:	3601      	adds	r6, #1
 800954a:	4628      	mov	r0, r5
 800954c:	f04f 0c00 	mov.w	ip, #0
 8009550:	f858 2b04 	ldr.w	r2, [r8], #4
 8009554:	f8d0 e000 	ldr.w	lr, [r0]
 8009558:	b293      	uxth	r3, r2
 800955a:	ebac 0303 	sub.w	r3, ip, r3
 800955e:	0c12      	lsrs	r2, r2, #16
 8009560:	fa13 f38e 	uxtah	r3, r3, lr
 8009564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800956c:	b29b      	uxth	r3, r3
 800956e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009572:	45c1      	cmp	r9, r8
 8009574:	f840 3b04 	str.w	r3, [r0], #4
 8009578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800957c:	d2e8      	bcs.n	8009550 <quorem+0xb0>
 800957e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009586:	b922      	cbnz	r2, 8009592 <quorem+0xf2>
 8009588:	3b04      	subs	r3, #4
 800958a:	429d      	cmp	r5, r3
 800958c:	461a      	mov	r2, r3
 800958e:	d30a      	bcc.n	80095a6 <quorem+0x106>
 8009590:	613c      	str	r4, [r7, #16]
 8009592:	4630      	mov	r0, r6
 8009594:	b003      	add	sp, #12
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	6812      	ldr	r2, [r2, #0]
 800959c:	3b04      	subs	r3, #4
 800959e:	2a00      	cmp	r2, #0
 80095a0:	d1cc      	bne.n	800953c <quorem+0x9c>
 80095a2:	3c01      	subs	r4, #1
 80095a4:	e7c7      	b.n	8009536 <quorem+0x96>
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	3b04      	subs	r3, #4
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	d1f0      	bne.n	8009590 <quorem+0xf0>
 80095ae:	3c01      	subs	r4, #1
 80095b0:	e7eb      	b.n	800958a <quorem+0xea>
 80095b2:	2000      	movs	r0, #0
 80095b4:	e7ee      	b.n	8009594 <quorem+0xf4>
	...

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b04 	vpush	{d8-d9}
 80095c0:	ec57 6b10 	vmov	r6, r7, d0
 80095c4:	b093      	sub	sp, #76	; 0x4c
 80095c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095cc:	9106      	str	r1, [sp, #24]
 80095ce:	ee10 aa10 	vmov	sl, s0
 80095d2:	4604      	mov	r4, r0
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	930c      	str	r3, [sp, #48]	; 0x30
 80095d8:	46bb      	mov	fp, r7
 80095da:	b975      	cbnz	r5, 80095fa <_dtoa_r+0x42>
 80095dc:	2010      	movs	r0, #16
 80095de:	f001 fb6b 	bl	800acb8 <malloc>
 80095e2:	4602      	mov	r2, r0
 80095e4:	6260      	str	r0, [r4, #36]	; 0x24
 80095e6:	b920      	cbnz	r0, 80095f2 <_dtoa_r+0x3a>
 80095e8:	4ba7      	ldr	r3, [pc, #668]	; (8009888 <_dtoa_r+0x2d0>)
 80095ea:	21ea      	movs	r1, #234	; 0xea
 80095ec:	48a7      	ldr	r0, [pc, #668]	; (800988c <_dtoa_r+0x2d4>)
 80095ee:	f002 fc89 	bl	800bf04 <__assert_func>
 80095f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095f6:	6005      	str	r5, [r0, #0]
 80095f8:	60c5      	str	r5, [r0, #12]
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	6819      	ldr	r1, [r3, #0]
 80095fe:	b151      	cbz	r1, 8009616 <_dtoa_r+0x5e>
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	604a      	str	r2, [r1, #4]
 8009604:	2301      	movs	r3, #1
 8009606:	4093      	lsls	r3, r2
 8009608:	608b      	str	r3, [r1, #8]
 800960a:	4620      	mov	r0, r4
 800960c:	f001 fbbc 	bl	800ad88 <_Bfree>
 8009610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	1e3b      	subs	r3, r7, #0
 8009618:	bfaa      	itet	ge
 800961a:	2300      	movge	r3, #0
 800961c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009620:	f8c8 3000 	strge.w	r3, [r8]
 8009624:	4b9a      	ldr	r3, [pc, #616]	; (8009890 <_dtoa_r+0x2d8>)
 8009626:	bfbc      	itt	lt
 8009628:	2201      	movlt	r2, #1
 800962a:	f8c8 2000 	strlt.w	r2, [r8]
 800962e:	ea33 030b 	bics.w	r3, r3, fp
 8009632:	d11b      	bne.n	800966c <_dtoa_r+0xb4>
 8009634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009636:	f242 730f 	movw	r3, #9999	; 0x270f
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009640:	4333      	orrs	r3, r6
 8009642:	f000 8592 	beq.w	800a16a <_dtoa_r+0xbb2>
 8009646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009648:	b963      	cbnz	r3, 8009664 <_dtoa_r+0xac>
 800964a:	4b92      	ldr	r3, [pc, #584]	; (8009894 <_dtoa_r+0x2dc>)
 800964c:	e022      	b.n	8009694 <_dtoa_r+0xdc>
 800964e:	4b92      	ldr	r3, [pc, #584]	; (8009898 <_dtoa_r+0x2e0>)
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	3308      	adds	r3, #8
 8009654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	9801      	ldr	r0, [sp, #4]
 800965a:	b013      	add	sp, #76	; 0x4c
 800965c:	ecbd 8b04 	vpop	{d8-d9}
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	4b8b      	ldr	r3, [pc, #556]	; (8009894 <_dtoa_r+0x2dc>)
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	3303      	adds	r3, #3
 800966a:	e7f3      	b.n	8009654 <_dtoa_r+0x9c>
 800966c:	2200      	movs	r2, #0
 800966e:	2300      	movs	r3, #0
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	f7f7 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009678:	ec4b ab19 	vmov	d9, sl, fp
 800967c:	4680      	mov	r8, r0
 800967e:	b158      	cbz	r0, 8009698 <_dtoa_r+0xe0>
 8009680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009682:	2301      	movs	r3, #1
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 856b 	beq.w	800a164 <_dtoa_r+0xbac>
 800968e:	4883      	ldr	r0, [pc, #524]	; (800989c <_dtoa_r+0x2e4>)
 8009690:	6018      	str	r0, [r3, #0]
 8009692:	1e43      	subs	r3, r0, #1
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	e7df      	b.n	8009658 <_dtoa_r+0xa0>
 8009698:	ec4b ab10 	vmov	d0, sl, fp
 800969c:	aa10      	add	r2, sp, #64	; 0x40
 800969e:	a911      	add	r1, sp, #68	; 0x44
 80096a0:	4620      	mov	r0, r4
 80096a2:	f001 ff1f 	bl	800b4e4 <__d2b>
 80096a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096aa:	ee08 0a10 	vmov	s16, r0
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	f000 8084 	beq.w	80097bc <_dtoa_r+0x204>
 80096b4:	ee19 3a90 	vmov	r3, s19
 80096b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096c0:	4656      	mov	r6, sl
 80096c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096ce:	4b74      	ldr	r3, [pc, #464]	; (80098a0 <_dtoa_r+0x2e8>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f6 fdd7 	bl	8000288 <__aeabi_dsub>
 80096da:	a365      	add	r3, pc, #404	; (adr r3, 8009870 <_dtoa_r+0x2b8>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	a364      	add	r3, pc, #400	; (adr r3, 8009878 <_dtoa_r+0x2c0>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4606      	mov	r6, r0
 80096f0:	4628      	mov	r0, r5
 80096f2:	460f      	mov	r7, r1
 80096f4:	f7f6 ff16 	bl	8000524 <__aeabi_i2d>
 80096f8:	a361      	add	r3, pc, #388	; (adr r3, 8009880 <_dtoa_r+0x2c8>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f7f7 fa21 	bl	8000b58 <__aeabi_d2iz>
 8009716:	2200      	movs	r2, #0
 8009718:	9000      	str	r0, [sp, #0]
 800971a:	2300      	movs	r3, #0
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8009724:	b150      	cbz	r0, 800973c <_dtoa_r+0x184>
 8009726:	9800      	ldr	r0, [sp, #0]
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_i2d>
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	f7f7 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009734:	b910      	cbnz	r0, 800973c <_dtoa_r+0x184>
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	3b01      	subs	r3, #1
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	2b16      	cmp	r3, #22
 8009740:	d85a      	bhi.n	80097f8 <_dtoa_r+0x240>
 8009742:	9a00      	ldr	r2, [sp, #0]
 8009744:	4b57      	ldr	r3, [pc, #348]	; (80098a4 <_dtoa_r+0x2ec>)
 8009746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	ec51 0b19 	vmov	r0, r1, d9
 8009752:	f7f7 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	d050      	beq.n	80097fc <_dtoa_r+0x244>
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	930b      	str	r3, [sp, #44]	; 0x2c
 8009764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009766:	1b5d      	subs	r5, r3, r5
 8009768:	1e6b      	subs	r3, r5, #1
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	bf45      	ittet	mi
 800976e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009772:	9304      	strmi	r3, [sp, #16]
 8009774:	2300      	movpl	r3, #0
 8009776:	2300      	movmi	r3, #0
 8009778:	bf4c      	ite	mi
 800977a:	9305      	strmi	r3, [sp, #20]
 800977c:	9304      	strpl	r3, [sp, #16]
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	db3d      	blt.n	8009800 <_dtoa_r+0x248>
 8009784:	9b05      	ldr	r3, [sp, #20]
 8009786:	9a00      	ldr	r2, [sp, #0]
 8009788:	920a      	str	r2, [sp, #40]	; 0x28
 800978a:	4413      	add	r3, r2
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	2300      	movs	r3, #0
 8009790:	9307      	str	r3, [sp, #28]
 8009792:	9b06      	ldr	r3, [sp, #24]
 8009794:	2b09      	cmp	r3, #9
 8009796:	f200 8089 	bhi.w	80098ac <_dtoa_r+0x2f4>
 800979a:	2b05      	cmp	r3, #5
 800979c:	bfc4      	itt	gt
 800979e:	3b04      	subgt	r3, #4
 80097a0:	9306      	strgt	r3, [sp, #24]
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	f1a3 0302 	sub.w	r3, r3, #2
 80097a8:	bfcc      	ite	gt
 80097aa:	2500      	movgt	r5, #0
 80097ac:	2501      	movle	r5, #1
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	f200 8087 	bhi.w	80098c2 <_dtoa_r+0x30a>
 80097b4:	e8df f003 	tbb	[pc, r3]
 80097b8:	59383a2d 	.word	0x59383a2d
 80097bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097c0:	441d      	add	r5, r3
 80097c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	bfc1      	itttt	gt
 80097ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80097d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097da:	bfda      	itte	le
 80097dc:	f1c3 0320 	rsble	r3, r3, #32
 80097e0:	fa06 f003 	lslle.w	r0, r6, r3
 80097e4:	4318      	orrgt	r0, r3
 80097e6:	f7f6 fe8d 	bl	8000504 <__aeabi_ui2d>
 80097ea:	2301      	movs	r3, #1
 80097ec:	4606      	mov	r6, r0
 80097ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097f2:	3d01      	subs	r5, #1
 80097f4:	930e      	str	r3, [sp, #56]	; 0x38
 80097f6:	e76a      	b.n	80096ce <_dtoa_r+0x116>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e7b2      	b.n	8009762 <_dtoa_r+0x1aa>
 80097fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80097fe:	e7b1      	b.n	8009764 <_dtoa_r+0x1ac>
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	9a00      	ldr	r2, [sp, #0]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	4253      	negs	r3, r2
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	2300      	movs	r3, #0
 800980e:	930a      	str	r3, [sp, #40]	; 0x28
 8009810:	e7bf      	b.n	8009792 <_dtoa_r+0x1da>
 8009812:	2300      	movs	r3, #0
 8009814:	9308      	str	r3, [sp, #32]
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc55      	bgt.n	80098c8 <_dtoa_r+0x310>
 800981c:	2301      	movs	r3, #1
 800981e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009822:	461a      	mov	r2, r3
 8009824:	9209      	str	r2, [sp, #36]	; 0x24
 8009826:	e00c      	b.n	8009842 <_dtoa_r+0x28a>
 8009828:	2301      	movs	r3, #1
 800982a:	e7f3      	b.n	8009814 <_dtoa_r+0x25c>
 800982c:	2300      	movs	r3, #0
 800982e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	4413      	add	r3, r2
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	3301      	adds	r3, #1
 800983a:	2b01      	cmp	r3, #1
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	bfb8      	it	lt
 8009840:	2301      	movlt	r3, #1
 8009842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009844:	2200      	movs	r2, #0
 8009846:	6042      	str	r2, [r0, #4]
 8009848:	2204      	movs	r2, #4
 800984a:	f102 0614 	add.w	r6, r2, #20
 800984e:	429e      	cmp	r6, r3
 8009850:	6841      	ldr	r1, [r0, #4]
 8009852:	d93d      	bls.n	80098d0 <_dtoa_r+0x318>
 8009854:	4620      	mov	r0, r4
 8009856:	f001 fa57 	bl	800ad08 <_Balloc>
 800985a:	9001      	str	r0, [sp, #4]
 800985c:	2800      	cmp	r0, #0
 800985e:	d13b      	bne.n	80098d8 <_dtoa_r+0x320>
 8009860:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <_dtoa_r+0x2f0>)
 8009862:	4602      	mov	r2, r0
 8009864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009868:	e6c0      	b.n	80095ec <_dtoa_r+0x34>
 800986a:	2301      	movs	r3, #1
 800986c:	e7df      	b.n	800982e <_dtoa_r+0x276>
 800986e:	bf00      	nop
 8009870:	636f4361 	.word	0x636f4361
 8009874:	3fd287a7 	.word	0x3fd287a7
 8009878:	8b60c8b3 	.word	0x8b60c8b3
 800987c:	3fc68a28 	.word	0x3fc68a28
 8009880:	509f79fb 	.word	0x509f79fb
 8009884:	3fd34413 	.word	0x3fd34413
 8009888:	0800c3be 	.word	0x0800c3be
 800988c:	0800c3d5 	.word	0x0800c3d5
 8009890:	7ff00000 	.word	0x7ff00000
 8009894:	0800c3ba 	.word	0x0800c3ba
 8009898:	0800c3b1 	.word	0x0800c3b1
 800989c:	0800c231 	.word	0x0800c231
 80098a0:	3ff80000 	.word	0x3ff80000
 80098a4:	0800c5a8 	.word	0x0800c5a8
 80098a8:	0800c430 	.word	0x0800c430
 80098ac:	2501      	movs	r5, #1
 80098ae:	2300      	movs	r3, #0
 80098b0:	9306      	str	r3, [sp, #24]
 80098b2:	9508      	str	r5, [sp, #32]
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295
 80098b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098bc:	2200      	movs	r2, #0
 80098be:	2312      	movs	r3, #18
 80098c0:	e7b0      	b.n	8009824 <_dtoa_r+0x26c>
 80098c2:	2301      	movs	r3, #1
 80098c4:	9308      	str	r3, [sp, #32]
 80098c6:	e7f5      	b.n	80098b4 <_dtoa_r+0x2fc>
 80098c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ce:	e7b8      	b.n	8009842 <_dtoa_r+0x28a>
 80098d0:	3101      	adds	r1, #1
 80098d2:	6041      	str	r1, [r0, #4]
 80098d4:	0052      	lsls	r2, r2, #1
 80098d6:	e7b8      	b.n	800984a <_dtoa_r+0x292>
 80098d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098da:	9a01      	ldr	r2, [sp, #4]
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	2b0e      	cmp	r3, #14
 80098e2:	f200 809d 	bhi.w	8009a20 <_dtoa_r+0x468>
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f000 809a 	beq.w	8009a20 <_dtoa_r+0x468>
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd32      	ble.n	8009958 <_dtoa_r+0x3a0>
 80098f2:	4ab7      	ldr	r2, [pc, #732]	; (8009bd0 <_dtoa_r+0x618>)
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009900:	9b00      	ldr	r3, [sp, #0]
 8009902:	05d8      	lsls	r0, r3, #23
 8009904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009908:	d516      	bpl.n	8009938 <_dtoa_r+0x380>
 800990a:	4bb2      	ldr	r3, [pc, #712]	; (8009bd4 <_dtoa_r+0x61c>)
 800990c:	ec51 0b19 	vmov	r0, r1, d9
 8009910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009914:	f7f6 ff9a 	bl	800084c <__aeabi_ddiv>
 8009918:	f007 070f 	and.w	r7, r7, #15
 800991c:	4682      	mov	sl, r0
 800991e:	468b      	mov	fp, r1
 8009920:	2503      	movs	r5, #3
 8009922:	4eac      	ldr	r6, [pc, #688]	; (8009bd4 <_dtoa_r+0x61c>)
 8009924:	b957      	cbnz	r7, 800993c <_dtoa_r+0x384>
 8009926:	4642      	mov	r2, r8
 8009928:	464b      	mov	r3, r9
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 ff8d 	bl	800084c <__aeabi_ddiv>
 8009932:	4682      	mov	sl, r0
 8009934:	468b      	mov	fp, r1
 8009936:	e028      	b.n	800998a <_dtoa_r+0x3d2>
 8009938:	2502      	movs	r5, #2
 800993a:	e7f2      	b.n	8009922 <_dtoa_r+0x36a>
 800993c:	07f9      	lsls	r1, r7, #31
 800993e:	d508      	bpl.n	8009952 <_dtoa_r+0x39a>
 8009940:	4640      	mov	r0, r8
 8009942:	4649      	mov	r1, r9
 8009944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	3501      	adds	r5, #1
 800994e:	4680      	mov	r8, r0
 8009950:	4689      	mov	r9, r1
 8009952:	107f      	asrs	r7, r7, #1
 8009954:	3608      	adds	r6, #8
 8009956:	e7e5      	b.n	8009924 <_dtoa_r+0x36c>
 8009958:	f000 809b 	beq.w	8009a92 <_dtoa_r+0x4da>
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	4f9d      	ldr	r7, [pc, #628]	; (8009bd4 <_dtoa_r+0x61c>)
 8009960:	425e      	negs	r6, r3
 8009962:	4b9b      	ldr	r3, [pc, #620]	; (8009bd0 <_dtoa_r+0x618>)
 8009964:	f006 020f 	and.w	r2, r6, #15
 8009968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	ec51 0b19 	vmov	r0, r1, d9
 8009974:	f7f6 fe40 	bl	80005f8 <__aeabi_dmul>
 8009978:	1136      	asrs	r6, r6, #4
 800997a:	4682      	mov	sl, r0
 800997c:	468b      	mov	fp, r1
 800997e:	2300      	movs	r3, #0
 8009980:	2502      	movs	r5, #2
 8009982:	2e00      	cmp	r6, #0
 8009984:	d17a      	bne.n	8009a7c <_dtoa_r+0x4c4>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1d3      	bne.n	8009932 <_dtoa_r+0x37a>
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8082 	beq.w	8009a96 <_dtoa_r+0x4de>
 8009992:	4b91      	ldr	r3, [pc, #580]	; (8009bd8 <_dtoa_r+0x620>)
 8009994:	2200      	movs	r2, #0
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d079      	beq.n	8009a96 <_dtoa_r+0x4de>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d076      	beq.n	8009a96 <_dtoa_r+0x4de>
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd36      	ble.n	8009a1c <_dtoa_r+0x464>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	1e5f      	subs	r7, r3, #1
 80099b6:	2200      	movs	r2, #0
 80099b8:	4b88      	ldr	r3, [pc, #544]	; (8009bdc <_dtoa_r+0x624>)
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	9e02      	ldr	r6, [sp, #8]
 80099c0:	4682      	mov	sl, r0
 80099c2:	468b      	mov	fp, r1
 80099c4:	3501      	adds	r5, #1
 80099c6:	4628      	mov	r0, r5
 80099c8:	f7f6 fdac 	bl	8000524 <__aeabi_i2d>
 80099cc:	4652      	mov	r2, sl
 80099ce:	465b      	mov	r3, fp
 80099d0:	f7f6 fe12 	bl	80005f8 <__aeabi_dmul>
 80099d4:	4b82      	ldr	r3, [pc, #520]	; (8009be0 <_dtoa_r+0x628>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	f7f6 fc58 	bl	800028c <__adddf3>
 80099dc:	46d0      	mov	r8, sl
 80099de:	46d9      	mov	r9, fp
 80099e0:	4682      	mov	sl, r0
 80099e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d158      	bne.n	8009a9c <_dtoa_r+0x4e4>
 80099ea:	4b7e      	ldr	r3, [pc, #504]	; (8009be4 <_dtoa_r+0x62c>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 fc49 	bl	8000288 <__aeabi_dsub>
 80099f6:	4652      	mov	r2, sl
 80099f8:	465b      	mov	r3, fp
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	f7f7 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f040 8295 	bne.w	8009f32 <_dtoa_r+0x97a>
 8009a08:	4652      	mov	r2, sl
 8009a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	f7f7 f863 	bl	8000adc <__aeabi_dcmplt>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f040 8289 	bne.w	8009f2e <_dtoa_r+0x976>
 8009a1c:	ec5b ab19 	vmov	sl, fp, d9
 8009a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f2c0 8148 	blt.w	8009cb8 <_dtoa_r+0x700>
 8009a28:	9a00      	ldr	r2, [sp, #0]
 8009a2a:	2a0e      	cmp	r2, #14
 8009a2c:	f300 8144 	bgt.w	8009cb8 <_dtoa_r+0x700>
 8009a30:	4b67      	ldr	r3, [pc, #412]	; (8009bd0 <_dtoa_r+0x618>)
 8009a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f280 80d5 	bge.w	8009bec <_dtoa_r+0x634>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f300 80d1 	bgt.w	8009bec <_dtoa_r+0x634>
 8009a4a:	f040 826f 	bne.w	8009f2c <_dtoa_r+0x974>
 8009a4e:	4b65      	ldr	r3, [pc, #404]	; (8009be4 <_dtoa_r+0x62c>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	f7f7 f851 	bl	8000b04 <__aeabi_dcmpge>
 8009a62:	9e03      	ldr	r6, [sp, #12]
 8009a64:	4637      	mov	r7, r6
 8009a66:	2800      	cmp	r0, #0
 8009a68:	f040 8245 	bne.w	8009ef6 <_dtoa_r+0x93e>
 8009a6c:	9d01      	ldr	r5, [sp, #4]
 8009a6e:	2331      	movs	r3, #49	; 0x31
 8009a70:	f805 3b01 	strb.w	r3, [r5], #1
 8009a74:	9b00      	ldr	r3, [sp, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	e240      	b.n	8009efe <_dtoa_r+0x946>
 8009a7c:	07f2      	lsls	r2, r6, #31
 8009a7e:	d505      	bpl.n	8009a8c <_dtoa_r+0x4d4>
 8009a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a84:	f7f6 fdb8 	bl	80005f8 <__aeabi_dmul>
 8009a88:	3501      	adds	r5, #1
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	1076      	asrs	r6, r6, #1
 8009a8e:	3708      	adds	r7, #8
 8009a90:	e777      	b.n	8009982 <_dtoa_r+0x3ca>
 8009a92:	2502      	movs	r5, #2
 8009a94:	e779      	b.n	800998a <_dtoa_r+0x3d2>
 8009a96:	9f00      	ldr	r7, [sp, #0]
 8009a98:	9e03      	ldr	r6, [sp, #12]
 8009a9a:	e794      	b.n	80099c6 <_dtoa_r+0x40e>
 8009a9c:	9901      	ldr	r1, [sp, #4]
 8009a9e:	4b4c      	ldr	r3, [pc, #304]	; (8009bd0 <_dtoa_r+0x618>)
 8009aa0:	4431      	add	r1, r6
 8009aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8009aa4:	9908      	ldr	r1, [sp, #32]
 8009aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d043      	beq.n	8009b3a <_dtoa_r+0x582>
 8009ab2:	494d      	ldr	r1, [pc, #308]	; (8009be8 <_dtoa_r+0x630>)
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f7f6 fec9 	bl	800084c <__aeabi_ddiv>
 8009aba:	4652      	mov	r2, sl
 8009abc:	465b      	mov	r3, fp
 8009abe:	f7f6 fbe3 	bl	8000288 <__aeabi_dsub>
 8009ac2:	9d01      	ldr	r5, [sp, #4]
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	468b      	mov	fp, r1
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4640      	mov	r0, r8
 8009acc:	f7f7 f844 	bl	8000b58 <__aeabi_d2iz>
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	f7f6 fd27 	bl	8000524 <__aeabi_i2d>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fbd3 	bl	8000288 <__aeabi_dsub>
 8009ae2:	3630      	adds	r6, #48	; 0x30
 8009ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	465b      	mov	r3, fp
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	f7f6 fff4 	bl	8000adc <__aeabi_dcmplt>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d163      	bne.n	8009bc0 <_dtoa_r+0x608>
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	4936      	ldr	r1, [pc, #216]	; (8009bd8 <_dtoa_r+0x620>)
 8009afe:	2000      	movs	r0, #0
 8009b00:	f7f6 fbc2 	bl	8000288 <__aeabi_dsub>
 8009b04:	4652      	mov	r2, sl
 8009b06:	465b      	mov	r3, fp
 8009b08:	f7f6 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f040 80b5 	bne.w	8009c7c <_dtoa_r+0x6c4>
 8009b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b14:	429d      	cmp	r5, r3
 8009b16:	d081      	beq.n	8009a1c <_dtoa_r+0x464>
 8009b18:	4b30      	ldr	r3, [pc, #192]	; (8009bdc <_dtoa_r+0x624>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	4659      	mov	r1, fp
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <_dtoa_r+0x624>)
 8009b26:	4682      	mov	sl, r0
 8009b28:	468b      	mov	fp, r1
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f7f6 fd62 	bl	80005f8 <__aeabi_dmul>
 8009b34:	4680      	mov	r8, r0
 8009b36:	4689      	mov	r9, r1
 8009b38:	e7c6      	b.n	8009ac8 <_dtoa_r+0x510>
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b44:	9d01      	ldr	r5, [sp, #4]
 8009b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7f7 f802 	bl	8000b58 <__aeabi_d2iz>
 8009b54:	4606      	mov	r6, r0
 8009b56:	f7f6 fce5 	bl	8000524 <__aeabi_i2d>
 8009b5a:	3630      	adds	r6, #48	; 0x30
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fb90 	bl	8000288 <__aeabi_dsub>
 8009b68:	f805 6b01 	strb.w	r6, [r5], #1
 8009b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	4680      	mov	r8, r0
 8009b72:	4689      	mov	r9, r1
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	d124      	bne.n	8009bc4 <_dtoa_r+0x60c>
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <_dtoa_r+0x630>)
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	4659      	mov	r1, fp
 8009b80:	f7f6 fb84 	bl	800028c <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d173      	bne.n	8009c7c <_dtoa_r+0x6c4>
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	4913      	ldr	r1, [pc, #76]	; (8009be8 <_dtoa_r+0x630>)
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f7f6 fb74 	bl	8000288 <__aeabi_dsub>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 ff98 	bl	8000adc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f43f af35 	beq.w	8009a1c <_dtoa_r+0x464>
 8009bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bb4:	1e6b      	subs	r3, r5, #1
 8009bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bbc:	2b30      	cmp	r3, #48	; 0x30
 8009bbe:	d0f8      	beq.n	8009bb2 <_dtoa_r+0x5fa>
 8009bc0:	9700      	str	r7, [sp, #0]
 8009bc2:	e049      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <_dtoa_r+0x624>)
 8009bc6:	f7f6 fd17 	bl	80005f8 <__aeabi_dmul>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4689      	mov	r9, r1
 8009bce:	e7bd      	b.n	8009b4c <_dtoa_r+0x594>
 8009bd0:	0800c5a8 	.word	0x0800c5a8
 8009bd4:	0800c580 	.word	0x0800c580
 8009bd8:	3ff00000 	.word	0x3ff00000
 8009bdc:	40240000 	.word	0x40240000
 8009be0:	401c0000 	.word	0x401c0000
 8009be4:	40140000 	.word	0x40140000
 8009be8:	3fe00000 	.word	0x3fe00000
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	4656      	mov	r6, sl
 8009bf0:	465f      	mov	r7, fp
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 fe27 	bl	800084c <__aeabi_ddiv>
 8009bfe:	f7f6 ffab 	bl	8000b58 <__aeabi_d2iz>
 8009c02:	4682      	mov	sl, r0
 8009c04:	f7f6 fc8e 	bl	8000524 <__aeabi_i2d>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	f805 6b01 	strb.w	r6, [r5], #1
 8009c24:	9e01      	ldr	r6, [sp, #4]
 8009c26:	9f03      	ldr	r7, [sp, #12]
 8009c28:	1bae      	subs	r6, r5, r6
 8009c2a:	42b7      	cmp	r7, r6
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	d135      	bne.n	8009c9e <_dtoa_r+0x6e6>
 8009c32:	f7f6 fb2b 	bl	800028c <__adddf3>
 8009c36:	4642      	mov	r2, r8
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	f7f6 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009c42:	b9d0      	cbnz	r0, 8009c7a <_dtoa_r+0x6c2>
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c50:	b110      	cbz	r0, 8009c58 <_dtoa_r+0x6a0>
 8009c52:	f01a 0f01 	tst.w	sl, #1
 8009c56:	d110      	bne.n	8009c7a <_dtoa_r+0x6c2>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	f001 f893 	bl	800ad88 <_Bfree>
 8009c62:	2300      	movs	r3, #0
 8009c64:	9800      	ldr	r0, [sp, #0]
 8009c66:	702b      	strb	r3, [r5, #0]
 8009c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	6018      	str	r0, [r3, #0]
 8009c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f43f acf1 	beq.w	8009658 <_dtoa_r+0xa0>
 8009c76:	601d      	str	r5, [r3, #0]
 8009c78:	e4ee      	b.n	8009658 <_dtoa_r+0xa0>
 8009c7a:	9f00      	ldr	r7, [sp, #0]
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	461d      	mov	r5, r3
 8009c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c84:	2a39      	cmp	r2, #57	; 0x39
 8009c86:	d106      	bne.n	8009c96 <_dtoa_r+0x6de>
 8009c88:	9a01      	ldr	r2, [sp, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d1f7      	bne.n	8009c7e <_dtoa_r+0x6c6>
 8009c8e:	9901      	ldr	r1, [sp, #4]
 8009c90:	2230      	movs	r2, #48	; 0x30
 8009c92:	3701      	adds	r7, #1
 8009c94:	700a      	strb	r2, [r1, #0]
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e790      	b.n	8009bc0 <_dtoa_r+0x608>
 8009c9e:	4ba6      	ldr	r3, [pc, #664]	; (8009f38 <_dtoa_r+0x980>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f7f6 fca9 	bl	80005f8 <__aeabi_dmul>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	f7f6 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d09d      	beq.n	8009bf2 <_dtoa_r+0x63a>
 8009cb6:	e7cf      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009cb8:	9a08      	ldr	r2, [sp, #32]
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	f000 80d7 	beq.w	8009e6e <_dtoa_r+0x8b6>
 8009cc0:	9a06      	ldr	r2, [sp, #24]
 8009cc2:	2a01      	cmp	r2, #1
 8009cc4:	f300 80ba 	bgt.w	8009e3c <_dtoa_r+0x884>
 8009cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	f000 80b2 	beq.w	8009e34 <_dtoa_r+0x87c>
 8009cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cd4:	9e07      	ldr	r6, [sp, #28]
 8009cd6:	9d04      	ldr	r5, [sp, #16]
 8009cd8:	9a04      	ldr	r2, [sp, #16]
 8009cda:	441a      	add	r2, r3
 8009cdc:	9204      	str	r2, [sp, #16]
 8009cde:	9a05      	ldr	r2, [sp, #20]
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	441a      	add	r2, r3
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	9205      	str	r2, [sp, #20]
 8009ce8:	f001 f950 	bl	800af8c <__i2b>
 8009cec:	4607      	mov	r7, r0
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	dd0c      	ble.n	8009d0c <_dtoa_r+0x754>
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dd09      	ble.n	8009d0c <_dtoa_r+0x754>
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	bfa8      	it	ge
 8009cfe:	462b      	movge	r3, r5
 8009d00:	1ad2      	subs	r2, r2, r3
 8009d02:	9204      	str	r2, [sp, #16]
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	1aed      	subs	r5, r5, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	b31b      	cbz	r3, 8009d58 <_dtoa_r+0x7a0>
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80af 	beq.w	8009e76 <_dtoa_r+0x8be>
 8009d18:	2e00      	cmp	r6, #0
 8009d1a:	dd13      	ble.n	8009d44 <_dtoa_r+0x78c>
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4632      	mov	r2, r6
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 f9f3 	bl	800b10c <__pow5mult>
 8009d26:	ee18 2a10 	vmov	r2, s16
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f001 f942 	bl	800afb8 <__multiply>
 8009d34:	ee18 1a10 	vmov	r1, s16
 8009d38:	4680      	mov	r8, r0
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f001 f824 	bl	800ad88 <_Bfree>
 8009d40:	ee08 8a10 	vmov	s16, r8
 8009d44:	9b07      	ldr	r3, [sp, #28]
 8009d46:	1b9a      	subs	r2, r3, r6
 8009d48:	d006      	beq.n	8009d58 <_dtoa_r+0x7a0>
 8009d4a:	ee18 1a10 	vmov	r1, s16
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 f9dc 	bl	800b10c <__pow5mult>
 8009d54:	ee08 0a10 	vmov	s16, r0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f001 f916 	bl	800af8c <__i2b>
 8009d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	f340 8088 	ble.w	8009e7a <_dtoa_r+0x8c2>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f001 f9cc 	bl	800b10c <__pow5mult>
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f340 8081 	ble.w	8009e80 <_dtoa_r+0x8c8>
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	6933      	ldr	r3, [r6, #16]
 8009d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d88:	6918      	ldr	r0, [r3, #16]
 8009d8a:	f001 f8af 	bl	800aeec <__hi0bits>
 8009d8e:	f1c0 0020 	rsb	r0, r0, #32
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	4418      	add	r0, r3
 8009d96:	f010 001f 	ands.w	r0, r0, #31
 8009d9a:	f000 8092 	beq.w	8009ec2 <_dtoa_r+0x90a>
 8009d9e:	f1c0 0320 	rsb	r3, r0, #32
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	f340 808a 	ble.w	8009ebc <_dtoa_r+0x904>
 8009da8:	f1c0 001c 	rsb	r0, r0, #28
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	4403      	add	r3, r0
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9b05      	ldr	r3, [sp, #20]
 8009db4:	4403      	add	r3, r0
 8009db6:	4405      	add	r5, r0
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd07      	ble.n	8009dd0 <_dtoa_r+0x818>
 8009dc0:	ee18 1a10 	vmov	r1, s16
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f001 f9fa 	bl	800b1c0 <__lshift>
 8009dcc:	ee08 0a10 	vmov	s16, r0
 8009dd0:	9b05      	ldr	r3, [sp, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd05      	ble.n	8009de2 <_dtoa_r+0x82a>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f001 f9f0 	bl	800b1c0 <__lshift>
 8009de0:	4606      	mov	r6, r0
 8009de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d06e      	beq.n	8009ec6 <_dtoa_r+0x90e>
 8009de8:	ee18 0a10 	vmov	r0, s16
 8009dec:	4631      	mov	r1, r6
 8009dee:	f001 fa57 	bl	800b2a0 <__mcmp>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	da67      	bge.n	8009ec6 <_dtoa_r+0x90e>
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	ee18 1a10 	vmov	r1, s16
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	220a      	movs	r2, #10
 8009e02:	2300      	movs	r3, #0
 8009e04:	4620      	mov	r0, r4
 8009e06:	f000 ffe1 	bl	800adcc <__multadd>
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	ee08 0a10 	vmov	s16, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 81b1 	beq.w	800a178 <_dtoa_r+0xbc0>
 8009e16:	2300      	movs	r3, #0
 8009e18:	4639      	mov	r1, r7
 8009e1a:	220a      	movs	r2, #10
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 ffd5 	bl	800adcc <__multadd>
 8009e22:	9b02      	ldr	r3, [sp, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	4607      	mov	r7, r0
 8009e28:	f300 808e 	bgt.w	8009f48 <_dtoa_r+0x990>
 8009e2c:	9b06      	ldr	r3, [sp, #24]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	dc51      	bgt.n	8009ed6 <_dtoa_r+0x91e>
 8009e32:	e089      	b.n	8009f48 <_dtoa_r+0x990>
 8009e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e3a:	e74b      	b.n	8009cd4 <_dtoa_r+0x71c>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1e5e      	subs	r6, r3, #1
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	42b3      	cmp	r3, r6
 8009e44:	bfbf      	itttt	lt
 8009e46:	9b07      	ldrlt	r3, [sp, #28]
 8009e48:	9607      	strlt	r6, [sp, #28]
 8009e4a:	1af2      	sublt	r2, r6, r3
 8009e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e4e:	bfb6      	itet	lt
 8009e50:	189b      	addlt	r3, r3, r2
 8009e52:	1b9e      	subge	r6, r3, r6
 8009e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	bfb8      	it	lt
 8009e5a:	2600      	movlt	r6, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfb7      	itett	lt
 8009e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e68:	1a9d      	sublt	r5, r3, r2
 8009e6a:	2300      	movlt	r3, #0
 8009e6c:	e734      	b.n	8009cd8 <_dtoa_r+0x720>
 8009e6e:	9e07      	ldr	r6, [sp, #28]
 8009e70:	9d04      	ldr	r5, [sp, #16]
 8009e72:	9f08      	ldr	r7, [sp, #32]
 8009e74:	e73b      	b.n	8009cee <_dtoa_r+0x736>
 8009e76:	9a07      	ldr	r2, [sp, #28]
 8009e78:	e767      	b.n	8009d4a <_dtoa_r+0x792>
 8009e7a:	9b06      	ldr	r3, [sp, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	dc18      	bgt.n	8009eb2 <_dtoa_r+0x8fa>
 8009e80:	f1ba 0f00 	cmp.w	sl, #0
 8009e84:	d115      	bne.n	8009eb2 <_dtoa_r+0x8fa>
 8009e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e8a:	b993      	cbnz	r3, 8009eb2 <_dtoa_r+0x8fa>
 8009e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e90:	0d1b      	lsrs	r3, r3, #20
 8009e92:	051b      	lsls	r3, r3, #20
 8009e94:	b183      	cbz	r3, 8009eb8 <_dtoa_r+0x900>
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	f04f 0801 	mov.w	r8, #1
 8009ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f47f af6a 	bne.w	8009d82 <_dtoa_r+0x7ca>
 8009eae:	2001      	movs	r0, #1
 8009eb0:	e76f      	b.n	8009d92 <_dtoa_r+0x7da>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	e7f6      	b.n	8009ea6 <_dtoa_r+0x8ee>
 8009eb8:	4698      	mov	r8, r3
 8009eba:	e7f4      	b.n	8009ea6 <_dtoa_r+0x8ee>
 8009ebc:	f43f af7d 	beq.w	8009dba <_dtoa_r+0x802>
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	301c      	adds	r0, #28
 8009ec4:	e772      	b.n	8009dac <_dtoa_r+0x7f4>
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	dc37      	bgt.n	8009f3c <_dtoa_r+0x984>
 8009ecc:	9b06      	ldr	r3, [sp, #24]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dd34      	ble.n	8009f3c <_dtoa_r+0x984>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	9302      	str	r3, [sp, #8]
 8009ed6:	9b02      	ldr	r3, [sp, #8]
 8009ed8:	b96b      	cbnz	r3, 8009ef6 <_dtoa_r+0x93e>
 8009eda:	4631      	mov	r1, r6
 8009edc:	2205      	movs	r2, #5
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 ff74 	bl	800adcc <__multadd>
 8009ee4:	4601      	mov	r1, r0
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	ee18 0a10 	vmov	r0, s16
 8009eec:	f001 f9d8 	bl	800b2a0 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f73f adbb 	bgt.w	8009a6c <_dtoa_r+0x4b4>
 8009ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef8:	9d01      	ldr	r5, [sp, #4]
 8009efa:	43db      	mvns	r3, r3
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	4631      	mov	r1, r6
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 ff3f 	bl	800ad88 <_Bfree>
 8009f0a:	2f00      	cmp	r7, #0
 8009f0c:	f43f aea4 	beq.w	8009c58 <_dtoa_r+0x6a0>
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d005      	beq.n	8009f22 <_dtoa_r+0x96a>
 8009f16:	45b8      	cmp	r8, r7
 8009f18:	d003      	beq.n	8009f22 <_dtoa_r+0x96a>
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 ff33 	bl	800ad88 <_Bfree>
 8009f22:	4639      	mov	r1, r7
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 ff2f 	bl	800ad88 <_Bfree>
 8009f2a:	e695      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009f2c:	2600      	movs	r6, #0
 8009f2e:	4637      	mov	r7, r6
 8009f30:	e7e1      	b.n	8009ef6 <_dtoa_r+0x93e>
 8009f32:	9700      	str	r7, [sp, #0]
 8009f34:	4637      	mov	r7, r6
 8009f36:	e599      	b.n	8009a6c <_dtoa_r+0x4b4>
 8009f38:	40240000 	.word	0x40240000
 8009f3c:	9b08      	ldr	r3, [sp, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80ca 	beq.w	800a0d8 <_dtoa_r+0xb20>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	dd05      	ble.n	8009f58 <_dtoa_r+0x9a0>
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4620      	mov	r0, r4
 8009f52:	f001 f935 	bl	800b1c0 <__lshift>
 8009f56:	4607      	mov	r7, r0
 8009f58:	f1b8 0f00 	cmp.w	r8, #0
 8009f5c:	d05b      	beq.n	800a016 <_dtoa_r+0xa5e>
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fed1 	bl	800ad08 <_Balloc>
 8009f66:	4605      	mov	r5, r0
 8009f68:	b928      	cbnz	r0, 8009f76 <_dtoa_r+0x9be>
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <_dtoa_r+0xbd0>)
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f72:	f7ff bb3b 	b.w	80095ec <_dtoa_r+0x34>
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	3202      	adds	r2, #2
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	f107 010c 	add.w	r1, r7, #12
 8009f80:	300c      	adds	r0, #12
 8009f82:	f000 feb3 	bl	800acec <memcpy>
 8009f86:	2201      	movs	r2, #1
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f001 f918 	bl	800b1c0 <__lshift>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	f103 0901 	add.w	r9, r3, #1
 8009f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	f00a 0301 	and.w	r3, sl, #1
 8009fa2:	46b8      	mov	r8, r7
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	4631      	mov	r1, r6
 8009faa:	ee18 0a10 	vmov	r0, s16
 8009fae:	f7ff fa77 	bl	80094a0 <quorem>
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fba:	ee18 0a10 	vmov	r0, s16
 8009fbe:	f001 f96f 	bl	800b2a0 <__mcmp>
 8009fc2:	463a      	mov	r2, r7
 8009fc4:	9003      	str	r0, [sp, #12]
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f001 f985 	bl	800b2d8 <__mdiff>
 8009fce:	68c2      	ldr	r2, [r0, #12]
 8009fd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	bb02      	cbnz	r2, 800a01a <_dtoa_r+0xa62>
 8009fd8:	4601      	mov	r1, r0
 8009fda:	ee18 0a10 	vmov	r0, s16
 8009fde:	f001 f95f 	bl	800b2a0 <__mcmp>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	9207      	str	r2, [sp, #28]
 8009fea:	f000 fecd 	bl	800ad88 <_Bfree>
 8009fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ff2:	ea43 0102 	orr.w	r1, r3, r2
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	464d      	mov	r5, r9
 8009ffc:	d10f      	bne.n	800a01e <_dtoa_r+0xa66>
 8009ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a002:	d02a      	beq.n	800a05a <_dtoa_r+0xaa2>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	dd02      	ble.n	800a010 <_dtoa_r+0xa58>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a010:	f88b a000 	strb.w	sl, [fp]
 800a014:	e775      	b.n	8009f02 <_dtoa_r+0x94a>
 800a016:	4638      	mov	r0, r7
 800a018:	e7ba      	b.n	8009f90 <_dtoa_r+0x9d8>
 800a01a:	2201      	movs	r2, #1
 800a01c:	e7e2      	b.n	8009fe4 <_dtoa_r+0xa2c>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	db04      	blt.n	800a02e <_dtoa_r+0xa76>
 800a024:	9906      	ldr	r1, [sp, #24]
 800a026:	430b      	orrs	r3, r1
 800a028:	9904      	ldr	r1, [sp, #16]
 800a02a:	430b      	orrs	r3, r1
 800a02c:	d122      	bne.n	800a074 <_dtoa_r+0xabc>
 800a02e:	2a00      	cmp	r2, #0
 800a030:	ddee      	ble.n	800a010 <_dtoa_r+0xa58>
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	2201      	movs	r2, #1
 800a038:	4620      	mov	r0, r4
 800a03a:	f001 f8c1 	bl	800b1c0 <__lshift>
 800a03e:	4631      	mov	r1, r6
 800a040:	ee08 0a10 	vmov	s16, r0
 800a044:	f001 f92c 	bl	800b2a0 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dc03      	bgt.n	800a054 <_dtoa_r+0xa9c>
 800a04c:	d1e0      	bne.n	800a010 <_dtoa_r+0xa58>
 800a04e:	f01a 0f01 	tst.w	sl, #1
 800a052:	d0dd      	beq.n	800a010 <_dtoa_r+0xa58>
 800a054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a058:	d1d7      	bne.n	800a00a <_dtoa_r+0xa52>
 800a05a:	2339      	movs	r3, #57	; 0x39
 800a05c:	f88b 3000 	strb.w	r3, [fp]
 800a060:	462b      	mov	r3, r5
 800a062:	461d      	mov	r5, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a06a:	2a39      	cmp	r2, #57	; 0x39
 800a06c:	d071      	beq.n	800a152 <_dtoa_r+0xb9a>
 800a06e:	3201      	adds	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e746      	b.n	8009f02 <_dtoa_r+0x94a>
 800a074:	2a00      	cmp	r2, #0
 800a076:	dd07      	ble.n	800a088 <_dtoa_r+0xad0>
 800a078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a07c:	d0ed      	beq.n	800a05a <_dtoa_r+0xaa2>
 800a07e:	f10a 0301 	add.w	r3, sl, #1
 800a082:	f88b 3000 	strb.w	r3, [fp]
 800a086:	e73c      	b.n	8009f02 <_dtoa_r+0x94a>
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a08e:	4599      	cmp	r9, r3
 800a090:	d047      	beq.n	800a122 <_dtoa_r+0xb6a>
 800a092:	ee18 1a10 	vmov	r1, s16
 800a096:	2300      	movs	r3, #0
 800a098:	220a      	movs	r2, #10
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fe96 	bl	800adcc <__multadd>
 800a0a0:	45b8      	cmp	r8, r7
 800a0a2:	ee08 0a10 	vmov	s16, r0
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	f04f 020a 	mov.w	r2, #10
 800a0ae:	4641      	mov	r1, r8
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	d106      	bne.n	800a0c2 <_dtoa_r+0xb0a>
 800a0b4:	f000 fe8a 	bl	800adcc <__multadd>
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	f109 0901 	add.w	r9, r9, #1
 800a0c0:	e772      	b.n	8009fa8 <_dtoa_r+0x9f0>
 800a0c2:	f000 fe83 	bl	800adcc <__multadd>
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	4680      	mov	r8, r0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fe7c 	bl	800adcc <__multadd>
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	e7f1      	b.n	800a0bc <_dtoa_r+0xb04>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	9d01      	ldr	r5, [sp, #4]
 800a0de:	ee18 0a10 	vmov	r0, s16
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	f7ff f9dc 	bl	80094a0 <quorem>
 800a0e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	f805 ab01 	strb.w	sl, [r5], #1
 800a0f2:	1aea      	subs	r2, r5, r3
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	dd09      	ble.n	800a10e <_dtoa_r+0xb56>
 800a0fa:	ee18 1a10 	vmov	r1, s16
 800a0fe:	2300      	movs	r3, #0
 800a100:	220a      	movs	r2, #10
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fe62 	bl	800adcc <__multadd>
 800a108:	ee08 0a10 	vmov	s16, r0
 800a10c:	e7e7      	b.n	800a0de <_dtoa_r+0xb26>
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfc8      	it	gt
 800a114:	461d      	movgt	r5, r3
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	bfd8      	it	le
 800a11a:	2501      	movle	r5, #1
 800a11c:	441d      	add	r5, r3
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	2201      	movs	r2, #1
 800a128:	4620      	mov	r0, r4
 800a12a:	f001 f849 	bl	800b1c0 <__lshift>
 800a12e:	4631      	mov	r1, r6
 800a130:	ee08 0a10 	vmov	s16, r0
 800a134:	f001 f8b4 	bl	800b2a0 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dc91      	bgt.n	800a060 <_dtoa_r+0xaa8>
 800a13c:	d102      	bne.n	800a144 <_dtoa_r+0xb8c>
 800a13e:	f01a 0f01 	tst.w	sl, #1
 800a142:	d18d      	bne.n	800a060 <_dtoa_r+0xaa8>
 800a144:	462b      	mov	r3, r5
 800a146:	461d      	mov	r5, r3
 800a148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14c:	2a30      	cmp	r2, #48	; 0x30
 800a14e:	d0fa      	beq.n	800a146 <_dtoa_r+0xb8e>
 800a150:	e6d7      	b.n	8009f02 <_dtoa_r+0x94a>
 800a152:	9a01      	ldr	r2, [sp, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d184      	bne.n	800a062 <_dtoa_r+0xaaa>
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2331      	movs	r3, #49	; 0x31
 800a160:	7013      	strb	r3, [r2, #0]
 800a162:	e6ce      	b.n	8009f02 <_dtoa_r+0x94a>
 800a164:	4b09      	ldr	r3, [pc, #36]	; (800a18c <_dtoa_r+0xbd4>)
 800a166:	f7ff ba95 	b.w	8009694 <_dtoa_r+0xdc>
 800a16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f47f aa6e 	bne.w	800964e <_dtoa_r+0x96>
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <_dtoa_r+0xbd8>)
 800a174:	f7ff ba8e 	b.w	8009694 <_dtoa_r+0xdc>
 800a178:	9b02      	ldr	r3, [sp, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dcae      	bgt.n	800a0dc <_dtoa_r+0xb24>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	2b02      	cmp	r3, #2
 800a182:	f73f aea8 	bgt.w	8009ed6 <_dtoa_r+0x91e>
 800a186:	e7a9      	b.n	800a0dc <_dtoa_r+0xb24>
 800a188:	0800c430 	.word	0x0800c430
 800a18c:	0800c230 	.word	0x0800c230
 800a190:	0800c3b1 	.word	0x0800c3b1

0800a194 <__sflush_r>:
 800a194:	898a      	ldrh	r2, [r1, #12]
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	4605      	mov	r5, r0
 800a19c:	0710      	lsls	r0, r2, #28
 800a19e:	460c      	mov	r4, r1
 800a1a0:	d458      	bmi.n	800a254 <__sflush_r+0xc0>
 800a1a2:	684b      	ldr	r3, [r1, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dc05      	bgt.n	800a1b4 <__sflush_r+0x20>
 800a1a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dc02      	bgt.n	800a1b4 <__sflush_r+0x20>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	d0f9      	beq.n	800a1ae <__sflush_r+0x1a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1c0:	682f      	ldr	r7, [r5, #0]
 800a1c2:	602b      	str	r3, [r5, #0]
 800a1c4:	d032      	beq.n	800a22c <__sflush_r+0x98>
 800a1c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	075a      	lsls	r2, r3, #29
 800a1cc:	d505      	bpl.n	800a1da <__sflush_r+0x46>
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	1ac0      	subs	r0, r0, r3
 800a1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1d4:	b10b      	cbz	r3, 800a1da <__sflush_r+0x46>
 800a1d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1d8:	1ac0      	subs	r0, r0, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1e0:	6a21      	ldr	r1, [r4, #32]
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b0      	blx	r6
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	d106      	bne.n	800a1fa <__sflush_r+0x66>
 800a1ec:	6829      	ldr	r1, [r5, #0]
 800a1ee:	291d      	cmp	r1, #29
 800a1f0:	d82c      	bhi.n	800a24c <__sflush_r+0xb8>
 800a1f2:	4a2a      	ldr	r2, [pc, #168]	; (800a29c <__sflush_r+0x108>)
 800a1f4:	40ca      	lsrs	r2, r1
 800a1f6:	07d6      	lsls	r6, r2, #31
 800a1f8:	d528      	bpl.n	800a24c <__sflush_r+0xb8>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6062      	str	r2, [r4, #4]
 800a1fe:	04d9      	lsls	r1, r3, #19
 800a200:	6922      	ldr	r2, [r4, #16]
 800a202:	6022      	str	r2, [r4, #0]
 800a204:	d504      	bpl.n	800a210 <__sflush_r+0x7c>
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	d101      	bne.n	800a20e <__sflush_r+0x7a>
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	b903      	cbnz	r3, 800a210 <__sflush_r+0x7c>
 800a20e:	6560      	str	r0, [r4, #84]	; 0x54
 800a210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a212:	602f      	str	r7, [r5, #0]
 800a214:	2900      	cmp	r1, #0
 800a216:	d0ca      	beq.n	800a1ae <__sflush_r+0x1a>
 800a218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a21c:	4299      	cmp	r1, r3
 800a21e:	d002      	beq.n	800a226 <__sflush_r+0x92>
 800a220:	4628      	mov	r0, r5
 800a222:	f001 fa49 	bl	800b6b8 <_free_r>
 800a226:	2000      	movs	r0, #0
 800a228:	6360      	str	r0, [r4, #52]	; 0x34
 800a22a:	e7c1      	b.n	800a1b0 <__sflush_r+0x1c>
 800a22c:	6a21      	ldr	r1, [r4, #32]
 800a22e:	2301      	movs	r3, #1
 800a230:	4628      	mov	r0, r5
 800a232:	47b0      	blx	r6
 800a234:	1c41      	adds	r1, r0, #1
 800a236:	d1c7      	bne.n	800a1c8 <__sflush_r+0x34>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0c4      	beq.n	800a1c8 <__sflush_r+0x34>
 800a23e:	2b1d      	cmp	r3, #29
 800a240:	d001      	beq.n	800a246 <__sflush_r+0xb2>
 800a242:	2b16      	cmp	r3, #22
 800a244:	d101      	bne.n	800a24a <__sflush_r+0xb6>
 800a246:	602f      	str	r7, [r5, #0]
 800a248:	e7b1      	b.n	800a1ae <__sflush_r+0x1a>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	e7ad      	b.n	800a1b0 <__sflush_r+0x1c>
 800a254:	690f      	ldr	r7, [r1, #16]
 800a256:	2f00      	cmp	r7, #0
 800a258:	d0a9      	beq.n	800a1ae <__sflush_r+0x1a>
 800a25a:	0793      	lsls	r3, r2, #30
 800a25c:	680e      	ldr	r6, [r1, #0]
 800a25e:	bf08      	it	eq
 800a260:	694b      	ldreq	r3, [r1, #20]
 800a262:	600f      	str	r7, [r1, #0]
 800a264:	bf18      	it	ne
 800a266:	2300      	movne	r3, #0
 800a268:	eba6 0807 	sub.w	r8, r6, r7
 800a26c:	608b      	str	r3, [r1, #8]
 800a26e:	f1b8 0f00 	cmp.w	r8, #0
 800a272:	dd9c      	ble.n	800a1ae <__sflush_r+0x1a>
 800a274:	6a21      	ldr	r1, [r4, #32]
 800a276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a278:	4643      	mov	r3, r8
 800a27a:	463a      	mov	r2, r7
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b0      	blx	r6
 800a280:	2800      	cmp	r0, #0
 800a282:	dc06      	bgt.n	800a292 <__sflush_r+0xfe>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	e78e      	b.n	800a1b0 <__sflush_r+0x1c>
 800a292:	4407      	add	r7, r0
 800a294:	eba8 0800 	sub.w	r8, r8, r0
 800a298:	e7e9      	b.n	800a26e <__sflush_r+0xda>
 800a29a:	bf00      	nop
 800a29c:	20400001 	.word	0x20400001

0800a2a0 <_fflush_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	690b      	ldr	r3, [r1, #16]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b913      	cbnz	r3, 800a2b0 <_fflush_r+0x10>
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	b118      	cbz	r0, 800a2ba <_fflush_r+0x1a>
 800a2b2:	6983      	ldr	r3, [r0, #24]
 800a2b4:	b90b      	cbnz	r3, 800a2ba <_fflush_r+0x1a>
 800a2b6:	f000 f887 	bl	800a3c8 <__sinit>
 800a2ba:	4b14      	ldr	r3, [pc, #80]	; (800a30c <_fflush_r+0x6c>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d11b      	bne.n	800a2f8 <_fflush_r+0x58>
 800a2c0:	686c      	ldr	r4, [r5, #4]
 800a2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0ef      	beq.n	800a2aa <_fflush_r+0xa>
 800a2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2cc:	07d0      	lsls	r0, r2, #31
 800a2ce:	d404      	bmi.n	800a2da <_fflush_r+0x3a>
 800a2d0:	0599      	lsls	r1, r3, #22
 800a2d2:	d402      	bmi.n	800a2da <_fflush_r+0x3a>
 800a2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2d6:	f000 fc88 	bl	800abea <__retarget_lock_acquire_recursive>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f7ff ff59 	bl	800a194 <__sflush_r>
 800a2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2e4:	07da      	lsls	r2, r3, #31
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	d4e0      	bmi.n	800a2ac <_fflush_r+0xc>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	059b      	lsls	r3, r3, #22
 800a2ee:	d4dd      	bmi.n	800a2ac <_fflush_r+0xc>
 800a2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f2:	f000 fc7b 	bl	800abec <__retarget_lock_release_recursive>
 800a2f6:	e7d9      	b.n	800a2ac <_fflush_r+0xc>
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <_fflush_r+0x70>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d101      	bne.n	800a302 <_fflush_r+0x62>
 800a2fe:	68ac      	ldr	r4, [r5, #8]
 800a300:	e7df      	b.n	800a2c2 <_fflush_r+0x22>
 800a302:	4b04      	ldr	r3, [pc, #16]	; (800a314 <_fflush_r+0x74>)
 800a304:	429c      	cmp	r4, r3
 800a306:	bf08      	it	eq
 800a308:	68ec      	ldreq	r4, [r5, #12]
 800a30a:	e7da      	b.n	800a2c2 <_fflush_r+0x22>
 800a30c:	0800c464 	.word	0x0800c464
 800a310:	0800c484 	.word	0x0800c484
 800a314:	0800c444 	.word	0x0800c444

0800a318 <std>:
 800a318:	2300      	movs	r3, #0
 800a31a:	b510      	push	{r4, lr}
 800a31c:	4604      	mov	r4, r0
 800a31e:	e9c0 3300 	strd	r3, r3, [r0]
 800a322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a326:	6083      	str	r3, [r0, #8]
 800a328:	8181      	strh	r1, [r0, #12]
 800a32a:	6643      	str	r3, [r0, #100]	; 0x64
 800a32c:	81c2      	strh	r2, [r0, #14]
 800a32e:	6183      	str	r3, [r0, #24]
 800a330:	4619      	mov	r1, r3
 800a332:	2208      	movs	r2, #8
 800a334:	305c      	adds	r0, #92	; 0x5c
 800a336:	f7fd fa11 	bl	800775c <memset>
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <std+0x38>)
 800a33c:	6263      	str	r3, [r4, #36]	; 0x24
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <std+0x3c>)
 800a340:	62a3      	str	r3, [r4, #40]	; 0x28
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <std+0x40>)
 800a344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <std+0x44>)
 800a348:	6224      	str	r4, [r4, #32]
 800a34a:	6323      	str	r3, [r4, #48]	; 0x30
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	bf00      	nop
 800a350:	0800be19 	.word	0x0800be19
 800a354:	0800be3b 	.word	0x0800be3b
 800a358:	0800be73 	.word	0x0800be73
 800a35c:	0800be97 	.word	0x0800be97

0800a360 <_cleanup_r>:
 800a360:	4901      	ldr	r1, [pc, #4]	; (800a368 <_cleanup_r+0x8>)
 800a362:	f000 b8af 	b.w	800a4c4 <_fwalk_reent>
 800a366:	bf00      	nop
 800a368:	0800a2a1 	.word	0x0800a2a1

0800a36c <__sfmoreglue>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	2268      	movs	r2, #104	; 0x68
 800a370:	1e4d      	subs	r5, r1, #1
 800a372:	4355      	muls	r5, r2
 800a374:	460e      	mov	r6, r1
 800a376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a37a:	f001 fa09 	bl	800b790 <_malloc_r>
 800a37e:	4604      	mov	r4, r0
 800a380:	b140      	cbz	r0, 800a394 <__sfmoreglue+0x28>
 800a382:	2100      	movs	r1, #0
 800a384:	e9c0 1600 	strd	r1, r6, [r0]
 800a388:	300c      	adds	r0, #12
 800a38a:	60a0      	str	r0, [r4, #8]
 800a38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a390:	f7fd f9e4 	bl	800775c <memset>
 800a394:	4620      	mov	r0, r4
 800a396:	bd70      	pop	{r4, r5, r6, pc}

0800a398 <__sfp_lock_acquire>:
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <__sfp_lock_acquire+0x8>)
 800a39a:	f000 bc26 	b.w	800abea <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	2000046d 	.word	0x2000046d

0800a3a4 <__sfp_lock_release>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__sfp_lock_release+0x8>)
 800a3a6:	f000 bc21 	b.w	800abec <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2000046d 	.word	0x2000046d

0800a3b0 <__sinit_lock_acquire>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__sinit_lock_acquire+0x8>)
 800a3b2:	f000 bc1a 	b.w	800abea <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	2000046e 	.word	0x2000046e

0800a3bc <__sinit_lock_release>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__sinit_lock_release+0x8>)
 800a3be:	f000 bc15 	b.w	800abec <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	2000046e 	.word	0x2000046e

0800a3c8 <__sinit>:
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	f7ff fff0 	bl	800a3b0 <__sinit_lock_acquire>
 800a3d0:	69a3      	ldr	r3, [r4, #24]
 800a3d2:	b11b      	cbz	r3, 800a3dc <__sinit+0x14>
 800a3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d8:	f7ff bff0 	b.w	800a3bc <__sinit_lock_release>
 800a3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <__sinit+0x68>)
 800a3e4:	4a13      	ldr	r2, [pc, #76]	; (800a434 <__sinit+0x6c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	bf04      	itt	eq
 800a3ee:	2301      	moveq	r3, #1
 800a3f0:	61a3      	streq	r3, [r4, #24]
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 f820 	bl	800a438 <__sfp>
 800a3f8:	6060      	str	r0, [r4, #4]
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 f81c 	bl	800a438 <__sfp>
 800a400:	60a0      	str	r0, [r4, #8]
 800a402:	4620      	mov	r0, r4
 800a404:	f000 f818 	bl	800a438 <__sfp>
 800a408:	2200      	movs	r2, #0
 800a40a:	60e0      	str	r0, [r4, #12]
 800a40c:	2104      	movs	r1, #4
 800a40e:	6860      	ldr	r0, [r4, #4]
 800a410:	f7ff ff82 	bl	800a318 <std>
 800a414:	68a0      	ldr	r0, [r4, #8]
 800a416:	2201      	movs	r2, #1
 800a418:	2109      	movs	r1, #9
 800a41a:	f7ff ff7d 	bl	800a318 <std>
 800a41e:	68e0      	ldr	r0, [r4, #12]
 800a420:	2202      	movs	r2, #2
 800a422:	2112      	movs	r1, #18
 800a424:	f7ff ff78 	bl	800a318 <std>
 800a428:	2301      	movs	r3, #1
 800a42a:	61a3      	str	r3, [r4, #24]
 800a42c:	e7d2      	b.n	800a3d4 <__sinit+0xc>
 800a42e:	bf00      	nop
 800a430:	0800c21c 	.word	0x0800c21c
 800a434:	0800a361 	.word	0x0800a361

0800a438 <__sfp>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	4607      	mov	r7, r0
 800a43c:	f7ff ffac 	bl	800a398 <__sfp_lock_acquire>
 800a440:	4b1e      	ldr	r3, [pc, #120]	; (800a4bc <__sfp+0x84>)
 800a442:	681e      	ldr	r6, [r3, #0]
 800a444:	69b3      	ldr	r3, [r6, #24]
 800a446:	b913      	cbnz	r3, 800a44e <__sfp+0x16>
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff ffbd 	bl	800a3c8 <__sinit>
 800a44e:	3648      	adds	r6, #72	; 0x48
 800a450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a454:	3b01      	subs	r3, #1
 800a456:	d503      	bpl.n	800a460 <__sfp+0x28>
 800a458:	6833      	ldr	r3, [r6, #0]
 800a45a:	b30b      	cbz	r3, 800a4a0 <__sfp+0x68>
 800a45c:	6836      	ldr	r6, [r6, #0]
 800a45e:	e7f7      	b.n	800a450 <__sfp+0x18>
 800a460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a464:	b9d5      	cbnz	r5, 800a49c <__sfp+0x64>
 800a466:	4b16      	ldr	r3, [pc, #88]	; (800a4c0 <__sfp+0x88>)
 800a468:	60e3      	str	r3, [r4, #12]
 800a46a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a46e:	6665      	str	r5, [r4, #100]	; 0x64
 800a470:	f000 fbba 	bl	800abe8 <__retarget_lock_init_recursive>
 800a474:	f7ff ff96 	bl	800a3a4 <__sfp_lock_release>
 800a478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a47c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a480:	6025      	str	r5, [r4, #0]
 800a482:	61a5      	str	r5, [r4, #24]
 800a484:	2208      	movs	r2, #8
 800a486:	4629      	mov	r1, r5
 800a488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a48c:	f7fd f966 	bl	800775c <memset>
 800a490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a498:	4620      	mov	r0, r4
 800a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49c:	3468      	adds	r4, #104	; 0x68
 800a49e:	e7d9      	b.n	800a454 <__sfp+0x1c>
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f7ff ff62 	bl	800a36c <__sfmoreglue>
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	6030      	str	r0, [r6, #0]
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d1d5      	bne.n	800a45c <__sfp+0x24>
 800a4b0:	f7ff ff78 	bl	800a3a4 <__sfp_lock_release>
 800a4b4:	230c      	movs	r3, #12
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	e7ee      	b.n	800a498 <__sfp+0x60>
 800a4ba:	bf00      	nop
 800a4bc:	0800c21c 	.word	0x0800c21c
 800a4c0:	ffff0001 	.word	0xffff0001

0800a4c4 <_fwalk_reent>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	4688      	mov	r8, r1
 800a4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4d0:	2700      	movs	r7, #0
 800a4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800a4da:	d505      	bpl.n	800a4e8 <_fwalk_reent+0x24>
 800a4dc:	6824      	ldr	r4, [r4, #0]
 800a4de:	2c00      	cmp	r4, #0
 800a4e0:	d1f7      	bne.n	800a4d2 <_fwalk_reent+0xe>
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e8:	89ab      	ldrh	r3, [r5, #12]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d907      	bls.n	800a4fe <_fwalk_reent+0x3a>
 800a4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	d003      	beq.n	800a4fe <_fwalk_reent+0x3a>
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	47c0      	blx	r8
 800a4fc:	4307      	orrs	r7, r0
 800a4fe:	3568      	adds	r5, #104	; 0x68
 800a500:	e7e9      	b.n	800a4d6 <_fwalk_reent+0x12>

0800a502 <rshift>:
 800a502:	6903      	ldr	r3, [r0, #16]
 800a504:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a50c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a510:	f100 0414 	add.w	r4, r0, #20
 800a514:	dd45      	ble.n	800a5a2 <rshift+0xa0>
 800a516:	f011 011f 	ands.w	r1, r1, #31
 800a51a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a51e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a522:	d10c      	bne.n	800a53e <rshift+0x3c>
 800a524:	f100 0710 	add.w	r7, r0, #16
 800a528:	4629      	mov	r1, r5
 800a52a:	42b1      	cmp	r1, r6
 800a52c:	d334      	bcc.n	800a598 <rshift+0x96>
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	1eea      	subs	r2, r5, #3
 800a534:	4296      	cmp	r6, r2
 800a536:	bf38      	it	cc
 800a538:	2300      	movcc	r3, #0
 800a53a:	4423      	add	r3, r4
 800a53c:	e015      	b.n	800a56a <rshift+0x68>
 800a53e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a542:	f1c1 0820 	rsb	r8, r1, #32
 800a546:	40cf      	lsrs	r7, r1
 800a548:	f105 0e04 	add.w	lr, r5, #4
 800a54c:	46a1      	mov	r9, r4
 800a54e:	4576      	cmp	r6, lr
 800a550:	46f4      	mov	ip, lr
 800a552:	d815      	bhi.n	800a580 <rshift+0x7e>
 800a554:	1a9a      	subs	r2, r3, r2
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	3a04      	subs	r2, #4
 800a55a:	3501      	adds	r5, #1
 800a55c:	42ae      	cmp	r6, r5
 800a55e:	bf38      	it	cc
 800a560:	2200      	movcc	r2, #0
 800a562:	18a3      	adds	r3, r4, r2
 800a564:	50a7      	str	r7, [r4, r2]
 800a566:	b107      	cbz	r7, 800a56a <rshift+0x68>
 800a568:	3304      	adds	r3, #4
 800a56a:	1b1a      	subs	r2, r3, r4
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a572:	bf08      	it	eq
 800a574:	2300      	moveq	r3, #0
 800a576:	6102      	str	r2, [r0, #16]
 800a578:	bf08      	it	eq
 800a57a:	6143      	streq	r3, [r0, #20]
 800a57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a580:	f8dc c000 	ldr.w	ip, [ip]
 800a584:	fa0c fc08 	lsl.w	ip, ip, r8
 800a588:	ea4c 0707 	orr.w	r7, ip, r7
 800a58c:	f849 7b04 	str.w	r7, [r9], #4
 800a590:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a594:	40cf      	lsrs	r7, r1
 800a596:	e7da      	b.n	800a54e <rshift+0x4c>
 800a598:	f851 cb04 	ldr.w	ip, [r1], #4
 800a59c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5a0:	e7c3      	b.n	800a52a <rshift+0x28>
 800a5a2:	4623      	mov	r3, r4
 800a5a4:	e7e1      	b.n	800a56a <rshift+0x68>

0800a5a6 <__hexdig_fun>:
 800a5a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5aa:	2b09      	cmp	r3, #9
 800a5ac:	d802      	bhi.n	800a5b4 <__hexdig_fun+0xe>
 800a5ae:	3820      	subs	r0, #32
 800a5b0:	b2c0      	uxtb	r0, r0
 800a5b2:	4770      	bx	lr
 800a5b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5b8:	2b05      	cmp	r3, #5
 800a5ba:	d801      	bhi.n	800a5c0 <__hexdig_fun+0x1a>
 800a5bc:	3847      	subs	r0, #71	; 0x47
 800a5be:	e7f7      	b.n	800a5b0 <__hexdig_fun+0xa>
 800a5c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d801      	bhi.n	800a5cc <__hexdig_fun+0x26>
 800a5c8:	3827      	subs	r0, #39	; 0x27
 800a5ca:	e7f1      	b.n	800a5b0 <__hexdig_fun+0xa>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4770      	bx	lr

0800a5d0 <__gethex>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	ed2d 8b02 	vpush	{d8}
 800a5d8:	b089      	sub	sp, #36	; 0x24
 800a5da:	ee08 0a10 	vmov	s16, r0
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	4bb4      	ldr	r3, [pc, #720]	; (800a8b4 <__gethex+0x2e4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	468b      	mov	fp, r1
 800a5ea:	4690      	mov	r8, r2
 800a5ec:	f7f5 fdf0 	bl	80001d0 <strlen>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f8db 2000 	ldr.w	r2, [fp]
 800a5f6:	4403      	add	r3, r0
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5fe:	9305      	str	r3, [sp, #20]
 800a600:	1c93      	adds	r3, r2, #2
 800a602:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a606:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a60a:	32fe      	adds	r2, #254	; 0xfe
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	461f      	mov	r7, r3
 800a610:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a614:	9100      	str	r1, [sp, #0]
 800a616:	2830      	cmp	r0, #48	; 0x30
 800a618:	d0f8      	beq.n	800a60c <__gethex+0x3c>
 800a61a:	f7ff ffc4 	bl	800a5a6 <__hexdig_fun>
 800a61e:	4604      	mov	r4, r0
 800a620:	2800      	cmp	r0, #0
 800a622:	d13a      	bne.n	800a69a <__gethex+0xca>
 800a624:	9901      	ldr	r1, [sp, #4]
 800a626:	4652      	mov	r2, sl
 800a628:	4638      	mov	r0, r7
 800a62a:	f001 fc38 	bl	800be9e <strncmp>
 800a62e:	4605      	mov	r5, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	d168      	bne.n	800a706 <__gethex+0x136>
 800a634:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a638:	eb07 060a 	add.w	r6, r7, sl
 800a63c:	f7ff ffb3 	bl	800a5a6 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d062      	beq.n	800a70a <__gethex+0x13a>
 800a644:	4633      	mov	r3, r6
 800a646:	7818      	ldrb	r0, [r3, #0]
 800a648:	2830      	cmp	r0, #48	; 0x30
 800a64a:	461f      	mov	r7, r3
 800a64c:	f103 0301 	add.w	r3, r3, #1
 800a650:	d0f9      	beq.n	800a646 <__gethex+0x76>
 800a652:	f7ff ffa8 	bl	800a5a6 <__hexdig_fun>
 800a656:	2301      	movs	r3, #1
 800a658:	fab0 f480 	clz	r4, r0
 800a65c:	0964      	lsrs	r4, r4, #5
 800a65e:	4635      	mov	r5, r6
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	463a      	mov	r2, r7
 800a664:	4616      	mov	r6, r2
 800a666:	3201      	adds	r2, #1
 800a668:	7830      	ldrb	r0, [r6, #0]
 800a66a:	f7ff ff9c 	bl	800a5a6 <__hexdig_fun>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d1f8      	bne.n	800a664 <__gethex+0x94>
 800a672:	9901      	ldr	r1, [sp, #4]
 800a674:	4652      	mov	r2, sl
 800a676:	4630      	mov	r0, r6
 800a678:	f001 fc11 	bl	800be9e <strncmp>
 800a67c:	b980      	cbnz	r0, 800a6a0 <__gethex+0xd0>
 800a67e:	b94d      	cbnz	r5, 800a694 <__gethex+0xc4>
 800a680:	eb06 050a 	add.w	r5, r6, sl
 800a684:	462a      	mov	r2, r5
 800a686:	4616      	mov	r6, r2
 800a688:	3201      	adds	r2, #1
 800a68a:	7830      	ldrb	r0, [r6, #0]
 800a68c:	f7ff ff8b 	bl	800a5a6 <__hexdig_fun>
 800a690:	2800      	cmp	r0, #0
 800a692:	d1f8      	bne.n	800a686 <__gethex+0xb6>
 800a694:	1bad      	subs	r5, r5, r6
 800a696:	00ad      	lsls	r5, r5, #2
 800a698:	e004      	b.n	800a6a4 <__gethex+0xd4>
 800a69a:	2400      	movs	r4, #0
 800a69c:	4625      	mov	r5, r4
 800a69e:	e7e0      	b.n	800a662 <__gethex+0x92>
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	d1f7      	bne.n	800a694 <__gethex+0xc4>
 800a6a4:	7833      	ldrb	r3, [r6, #0]
 800a6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6aa:	2b50      	cmp	r3, #80	; 0x50
 800a6ac:	d13b      	bne.n	800a726 <__gethex+0x156>
 800a6ae:	7873      	ldrb	r3, [r6, #1]
 800a6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800a6b2:	d02c      	beq.n	800a70e <__gethex+0x13e>
 800a6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800a6b6:	d02e      	beq.n	800a716 <__gethex+0x146>
 800a6b8:	1c71      	adds	r1, r6, #1
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	7808      	ldrb	r0, [r1, #0]
 800a6c0:	f7ff ff71 	bl	800a5a6 <__hexdig_fun>
 800a6c4:	1e43      	subs	r3, r0, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b18      	cmp	r3, #24
 800a6ca:	d82c      	bhi.n	800a726 <__gethex+0x156>
 800a6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800a6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6d4:	f7ff ff67 	bl	800a5a6 <__hexdig_fun>
 800a6d8:	1e43      	subs	r3, r0, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b18      	cmp	r3, #24
 800a6de:	d91d      	bls.n	800a71c <__gethex+0x14c>
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	d000      	beq.n	800a6e8 <__gethex+0x118>
 800a6e6:	4252      	negs	r2, r2
 800a6e8:	4415      	add	r5, r2
 800a6ea:	f8cb 1000 	str.w	r1, [fp]
 800a6ee:	b1e4      	cbz	r4, 800a72a <__gethex+0x15a>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bf14      	ite	ne
 800a6f6:	2700      	movne	r7, #0
 800a6f8:	2706      	moveq	r7, #6
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	b009      	add	sp, #36	; 0x24
 800a6fe:	ecbd 8b02 	vpop	{d8}
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	463e      	mov	r6, r7
 800a708:	4625      	mov	r5, r4
 800a70a:	2401      	movs	r4, #1
 800a70c:	e7ca      	b.n	800a6a4 <__gethex+0xd4>
 800a70e:	f04f 0900 	mov.w	r9, #0
 800a712:	1cb1      	adds	r1, r6, #2
 800a714:	e7d3      	b.n	800a6be <__gethex+0xee>
 800a716:	f04f 0901 	mov.w	r9, #1
 800a71a:	e7fa      	b.n	800a712 <__gethex+0x142>
 800a71c:	230a      	movs	r3, #10
 800a71e:	fb03 0202 	mla	r2, r3, r2, r0
 800a722:	3a10      	subs	r2, #16
 800a724:	e7d4      	b.n	800a6d0 <__gethex+0x100>
 800a726:	4631      	mov	r1, r6
 800a728:	e7df      	b.n	800a6ea <__gethex+0x11a>
 800a72a:	1bf3      	subs	r3, r6, r7
 800a72c:	3b01      	subs	r3, #1
 800a72e:	4621      	mov	r1, r4
 800a730:	2b07      	cmp	r3, #7
 800a732:	dc0b      	bgt.n	800a74c <__gethex+0x17c>
 800a734:	ee18 0a10 	vmov	r0, s16
 800a738:	f000 fae6 	bl	800ad08 <_Balloc>
 800a73c:	4604      	mov	r4, r0
 800a73e:	b940      	cbnz	r0, 800a752 <__gethex+0x182>
 800a740:	4b5d      	ldr	r3, [pc, #372]	; (800a8b8 <__gethex+0x2e8>)
 800a742:	4602      	mov	r2, r0
 800a744:	21de      	movs	r1, #222	; 0xde
 800a746:	485d      	ldr	r0, [pc, #372]	; (800a8bc <__gethex+0x2ec>)
 800a748:	f001 fbdc 	bl	800bf04 <__assert_func>
 800a74c:	3101      	adds	r1, #1
 800a74e:	105b      	asrs	r3, r3, #1
 800a750:	e7ee      	b.n	800a730 <__gethex+0x160>
 800a752:	f100 0914 	add.w	r9, r0, #20
 800a756:	f04f 0b00 	mov.w	fp, #0
 800a75a:	f1ca 0301 	rsb	r3, sl, #1
 800a75e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a762:	f8cd b000 	str.w	fp, [sp]
 800a766:	9306      	str	r3, [sp, #24]
 800a768:	42b7      	cmp	r7, r6
 800a76a:	d340      	bcc.n	800a7ee <__gethex+0x21e>
 800a76c:	9802      	ldr	r0, [sp, #8]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	f840 3b04 	str.w	r3, [r0], #4
 800a774:	eba0 0009 	sub.w	r0, r0, r9
 800a778:	1080      	asrs	r0, r0, #2
 800a77a:	0146      	lsls	r6, r0, #5
 800a77c:	6120      	str	r0, [r4, #16]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fbb4 	bl	800aeec <__hi0bits>
 800a784:	1a30      	subs	r0, r6, r0
 800a786:	f8d8 6000 	ldr.w	r6, [r8]
 800a78a:	42b0      	cmp	r0, r6
 800a78c:	dd63      	ble.n	800a856 <__gethex+0x286>
 800a78e:	1b87      	subs	r7, r0, r6
 800a790:	4639      	mov	r1, r7
 800a792:	4620      	mov	r0, r4
 800a794:	f000 ff58 	bl	800b648 <__any_on>
 800a798:	4682      	mov	sl, r0
 800a79a:	b1a8      	cbz	r0, 800a7c8 <__gethex+0x1f8>
 800a79c:	1e7b      	subs	r3, r7, #1
 800a79e:	1159      	asrs	r1, r3, #5
 800a7a0:	f003 021f 	and.w	r2, r3, #31
 800a7a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7a8:	f04f 0a01 	mov.w	sl, #1
 800a7ac:	fa0a f202 	lsl.w	r2, sl, r2
 800a7b0:	420a      	tst	r2, r1
 800a7b2:	d009      	beq.n	800a7c8 <__gethex+0x1f8>
 800a7b4:	4553      	cmp	r3, sl
 800a7b6:	dd05      	ble.n	800a7c4 <__gethex+0x1f4>
 800a7b8:	1eb9      	subs	r1, r7, #2
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 ff44 	bl	800b648 <__any_on>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d145      	bne.n	800a850 <__gethex+0x280>
 800a7c4:	f04f 0a02 	mov.w	sl, #2
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7ff fe99 	bl	800a502 <rshift>
 800a7d0:	443d      	add	r5, r7
 800a7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7d6:	42ab      	cmp	r3, r5
 800a7d8:	da4c      	bge.n	800a874 <__gethex+0x2a4>
 800a7da:	ee18 0a10 	vmov	r0, s16
 800a7de:	4621      	mov	r1, r4
 800a7e0:	f000 fad2 	bl	800ad88 <_Bfree>
 800a7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	27a3      	movs	r7, #163	; 0xa3
 800a7ec:	e785      	b.n	800a6fa <__gethex+0x12a>
 800a7ee:	1e73      	subs	r3, r6, #1
 800a7f0:	9a05      	ldr	r2, [sp, #20]
 800a7f2:	9303      	str	r3, [sp, #12]
 800a7f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d019      	beq.n	800a830 <__gethex+0x260>
 800a7fc:	f1bb 0f20 	cmp.w	fp, #32
 800a800:	d107      	bne.n	800a812 <__gethex+0x242>
 800a802:	9b02      	ldr	r3, [sp, #8]
 800a804:	9a00      	ldr	r2, [sp, #0]
 800a806:	f843 2b04 	str.w	r2, [r3], #4
 800a80a:	9302      	str	r3, [sp, #8]
 800a80c:	2300      	movs	r3, #0
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	469b      	mov	fp, r3
 800a812:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a816:	f7ff fec6 	bl	800a5a6 <__hexdig_fun>
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	f000 000f 	and.w	r0, r0, #15
 800a820:	fa00 f00b 	lsl.w	r0, r0, fp
 800a824:	4303      	orrs	r3, r0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	f10b 0b04 	add.w	fp, fp, #4
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	e00d      	b.n	800a84c <__gethex+0x27c>
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	9a06      	ldr	r2, [sp, #24]
 800a834:	4413      	add	r3, r2
 800a836:	42bb      	cmp	r3, r7
 800a838:	d3e0      	bcc.n	800a7fc <__gethex+0x22c>
 800a83a:	4618      	mov	r0, r3
 800a83c:	9901      	ldr	r1, [sp, #4]
 800a83e:	9307      	str	r3, [sp, #28]
 800a840:	4652      	mov	r2, sl
 800a842:	f001 fb2c 	bl	800be9e <strncmp>
 800a846:	9b07      	ldr	r3, [sp, #28]
 800a848:	2800      	cmp	r0, #0
 800a84a:	d1d7      	bne.n	800a7fc <__gethex+0x22c>
 800a84c:	461e      	mov	r6, r3
 800a84e:	e78b      	b.n	800a768 <__gethex+0x198>
 800a850:	f04f 0a03 	mov.w	sl, #3
 800a854:	e7b8      	b.n	800a7c8 <__gethex+0x1f8>
 800a856:	da0a      	bge.n	800a86e <__gethex+0x29e>
 800a858:	1a37      	subs	r7, r6, r0
 800a85a:	4621      	mov	r1, r4
 800a85c:	ee18 0a10 	vmov	r0, s16
 800a860:	463a      	mov	r2, r7
 800a862:	f000 fcad 	bl	800b1c0 <__lshift>
 800a866:	1bed      	subs	r5, r5, r7
 800a868:	4604      	mov	r4, r0
 800a86a:	f100 0914 	add.w	r9, r0, #20
 800a86e:	f04f 0a00 	mov.w	sl, #0
 800a872:	e7ae      	b.n	800a7d2 <__gethex+0x202>
 800a874:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a878:	42a8      	cmp	r0, r5
 800a87a:	dd72      	ble.n	800a962 <__gethex+0x392>
 800a87c:	1b45      	subs	r5, r0, r5
 800a87e:	42ae      	cmp	r6, r5
 800a880:	dc36      	bgt.n	800a8f0 <__gethex+0x320>
 800a882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d02a      	beq.n	800a8e0 <__gethex+0x310>
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d02c      	beq.n	800a8e8 <__gethex+0x318>
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d11c      	bne.n	800a8cc <__gethex+0x2fc>
 800a892:	42ae      	cmp	r6, r5
 800a894:	d11a      	bne.n	800a8cc <__gethex+0x2fc>
 800a896:	2e01      	cmp	r6, #1
 800a898:	d112      	bne.n	800a8c0 <__gethex+0x2f0>
 800a89a:	9a04      	ldr	r2, [sp, #16]
 800a89c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	f8c9 3000 	str.w	r3, [r9]
 800a8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8ac:	2762      	movs	r7, #98	; 0x62
 800a8ae:	601c      	str	r4, [r3, #0]
 800a8b0:	e723      	b.n	800a6fa <__gethex+0x12a>
 800a8b2:	bf00      	nop
 800a8b4:	0800c50c 	.word	0x0800c50c
 800a8b8:	0800c430 	.word	0x0800c430
 800a8bc:	0800c4a4 	.word	0x0800c4a4
 800a8c0:	1e71      	subs	r1, r6, #1
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fec0 	bl	800b648 <__any_on>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1e6      	bne.n	800a89a <__gethex+0x2ca>
 800a8cc:	ee18 0a10 	vmov	r0, s16
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f000 fa59 	bl	800ad88 <_Bfree>
 800a8d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8d8:	2300      	movs	r3, #0
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	2750      	movs	r7, #80	; 0x50
 800a8de:	e70c      	b.n	800a6fa <__gethex+0x12a>
 800a8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1f2      	bne.n	800a8cc <__gethex+0x2fc>
 800a8e6:	e7d8      	b.n	800a89a <__gethex+0x2ca>
 800a8e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1d5      	bne.n	800a89a <__gethex+0x2ca>
 800a8ee:	e7ed      	b.n	800a8cc <__gethex+0x2fc>
 800a8f0:	1e6f      	subs	r7, r5, #1
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	d131      	bne.n	800a95c <__gethex+0x38c>
 800a8f8:	b127      	cbz	r7, 800a904 <__gethex+0x334>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fea3 	bl	800b648 <__any_on>
 800a902:	4682      	mov	sl, r0
 800a904:	117b      	asrs	r3, r7, #5
 800a906:	2101      	movs	r1, #1
 800a908:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a90c:	f007 071f 	and.w	r7, r7, #31
 800a910:	fa01 f707 	lsl.w	r7, r1, r7
 800a914:	421f      	tst	r7, r3
 800a916:	4629      	mov	r1, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	bf18      	it	ne
 800a91c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a920:	1b76      	subs	r6, r6, r5
 800a922:	f7ff fdee 	bl	800a502 <rshift>
 800a926:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a92a:	2702      	movs	r7, #2
 800a92c:	f1ba 0f00 	cmp.w	sl, #0
 800a930:	d048      	beq.n	800a9c4 <__gethex+0x3f4>
 800a932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d015      	beq.n	800a966 <__gethex+0x396>
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d017      	beq.n	800a96e <__gethex+0x39e>
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d109      	bne.n	800a956 <__gethex+0x386>
 800a942:	f01a 0f02 	tst.w	sl, #2
 800a946:	d006      	beq.n	800a956 <__gethex+0x386>
 800a948:	f8d9 0000 	ldr.w	r0, [r9]
 800a94c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a950:	f01a 0f01 	tst.w	sl, #1
 800a954:	d10e      	bne.n	800a974 <__gethex+0x3a4>
 800a956:	f047 0710 	orr.w	r7, r7, #16
 800a95a:	e033      	b.n	800a9c4 <__gethex+0x3f4>
 800a95c:	f04f 0a01 	mov.w	sl, #1
 800a960:	e7d0      	b.n	800a904 <__gethex+0x334>
 800a962:	2701      	movs	r7, #1
 800a964:	e7e2      	b.n	800a92c <__gethex+0x35c>
 800a966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a968:	f1c3 0301 	rsb	r3, r3, #1
 800a96c:	9315      	str	r3, [sp, #84]	; 0x54
 800a96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <__gethex+0x386>
 800a974:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a978:	f104 0314 	add.w	r3, r4, #20
 800a97c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a980:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a984:	f04f 0c00 	mov.w	ip, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a992:	d01c      	beq.n	800a9ce <__gethex+0x3fe>
 800a994:	3201      	adds	r2, #1
 800a996:	6002      	str	r2, [r0, #0]
 800a998:	2f02      	cmp	r7, #2
 800a99a:	f104 0314 	add.w	r3, r4, #20
 800a99e:	d13f      	bne.n	800aa20 <__gethex+0x450>
 800a9a0:	f8d8 2000 	ldr.w	r2, [r8]
 800a9a4:	3a01      	subs	r2, #1
 800a9a6:	42b2      	cmp	r2, r6
 800a9a8:	d10a      	bne.n	800a9c0 <__gethex+0x3f0>
 800a9aa:	1171      	asrs	r1, r6, #5
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9b2:	f006 061f 	and.w	r6, r6, #31
 800a9b6:	fa02 f606 	lsl.w	r6, r2, r6
 800a9ba:	421e      	tst	r6, r3
 800a9bc:	bf18      	it	ne
 800a9be:	4617      	movne	r7, r2
 800a9c0:	f047 0720 	orr.w	r7, r7, #32
 800a9c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9c6:	601c      	str	r4, [r3, #0]
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	601d      	str	r5, [r3, #0]
 800a9cc:	e695      	b.n	800a6fa <__gethex+0x12a>
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9d4:	d8d8      	bhi.n	800a988 <__gethex+0x3b8>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	459b      	cmp	fp, r3
 800a9da:	db19      	blt.n	800aa10 <__gethex+0x440>
 800a9dc:	6861      	ldr	r1, [r4, #4]
 800a9de:	ee18 0a10 	vmov	r0, s16
 800a9e2:	3101      	adds	r1, #1
 800a9e4:	f000 f990 	bl	800ad08 <_Balloc>
 800a9e8:	4681      	mov	r9, r0
 800a9ea:	b918      	cbnz	r0, 800a9f4 <__gethex+0x424>
 800a9ec:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <__gethex+0x488>)
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	2184      	movs	r1, #132	; 0x84
 800a9f2:	e6a8      	b.n	800a746 <__gethex+0x176>
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	3202      	adds	r2, #2
 800a9f8:	f104 010c 	add.w	r1, r4, #12
 800a9fc:	0092      	lsls	r2, r2, #2
 800a9fe:	300c      	adds	r0, #12
 800aa00:	f000 f974 	bl	800acec <memcpy>
 800aa04:	4621      	mov	r1, r4
 800aa06:	ee18 0a10 	vmov	r0, s16
 800aa0a:	f000 f9bd 	bl	800ad88 <_Bfree>
 800aa0e:	464c      	mov	r4, r9
 800aa10:	6923      	ldr	r3, [r4, #16]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa18:	6122      	str	r2, [r4, #16]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	615a      	str	r2, [r3, #20]
 800aa1e:	e7bb      	b.n	800a998 <__gethex+0x3c8>
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	455a      	cmp	r2, fp
 800aa24:	dd0b      	ble.n	800aa3e <__gethex+0x46e>
 800aa26:	2101      	movs	r1, #1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7ff fd6a 	bl	800a502 <rshift>
 800aa2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa32:	3501      	adds	r5, #1
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	f6ff aed0 	blt.w	800a7da <__gethex+0x20a>
 800aa3a:	2701      	movs	r7, #1
 800aa3c:	e7c0      	b.n	800a9c0 <__gethex+0x3f0>
 800aa3e:	f016 061f 	ands.w	r6, r6, #31
 800aa42:	d0fa      	beq.n	800aa3a <__gethex+0x46a>
 800aa44:	4453      	add	r3, sl
 800aa46:	f1c6 0620 	rsb	r6, r6, #32
 800aa4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa4e:	f000 fa4d 	bl	800aeec <__hi0bits>
 800aa52:	42b0      	cmp	r0, r6
 800aa54:	dbe7      	blt.n	800aa26 <__gethex+0x456>
 800aa56:	e7f0      	b.n	800aa3a <__gethex+0x46a>
 800aa58:	0800c430 	.word	0x0800c430

0800aa5c <L_shift>:
 800aa5c:	f1c2 0208 	rsb	r2, r2, #8
 800aa60:	0092      	lsls	r2, r2, #2
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	f1c2 0620 	rsb	r6, r2, #32
 800aa68:	6843      	ldr	r3, [r0, #4]
 800aa6a:	6804      	ldr	r4, [r0, #0]
 800aa6c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa70:	432c      	orrs	r4, r5
 800aa72:	40d3      	lsrs	r3, r2
 800aa74:	6004      	str	r4, [r0, #0]
 800aa76:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa7a:	4288      	cmp	r0, r1
 800aa7c:	d3f4      	bcc.n	800aa68 <L_shift+0xc>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__match>:
 800aa80:	b530      	push	{r4, r5, lr}
 800aa82:	6803      	ldr	r3, [r0, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8a:	b914      	cbnz	r4, 800aa92 <__match+0x12>
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	2001      	movs	r0, #1
 800aa90:	bd30      	pop	{r4, r5, pc}
 800aa92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa9a:	2d19      	cmp	r5, #25
 800aa9c:	bf98      	it	ls
 800aa9e:	3220      	addls	r2, #32
 800aaa0:	42a2      	cmp	r2, r4
 800aaa2:	d0f0      	beq.n	800aa86 <__match+0x6>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e7f3      	b.n	800aa90 <__match+0x10>

0800aaa8 <__hexnan>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	680b      	ldr	r3, [r1, #0]
 800aaae:	115e      	asrs	r6, r3, #5
 800aab0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aab4:	f013 031f 	ands.w	r3, r3, #31
 800aab8:	b087      	sub	sp, #28
 800aaba:	bf18      	it	ne
 800aabc:	3604      	addne	r6, #4
 800aabe:	2500      	movs	r5, #0
 800aac0:	1f37      	subs	r7, r6, #4
 800aac2:	4690      	mov	r8, r2
 800aac4:	6802      	ldr	r2, [r0, #0]
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	4682      	mov	sl, r0
 800aaca:	f846 5c04 	str.w	r5, [r6, #-4]
 800aace:	46b9      	mov	r9, r7
 800aad0:	463c      	mov	r4, r7
 800aad2:	9502      	str	r5, [sp, #8]
 800aad4:	46ab      	mov	fp, r5
 800aad6:	7851      	ldrb	r1, [r2, #1]
 800aad8:	1c53      	adds	r3, r2, #1
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	b341      	cbz	r1, 800ab30 <__hexnan+0x88>
 800aade:	4608      	mov	r0, r1
 800aae0:	9205      	str	r2, [sp, #20]
 800aae2:	9104      	str	r1, [sp, #16]
 800aae4:	f7ff fd5f 	bl	800a5a6 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d14f      	bne.n	800ab8c <__hexnan+0xe4>
 800aaec:	9904      	ldr	r1, [sp, #16]
 800aaee:	9a05      	ldr	r2, [sp, #20]
 800aaf0:	2920      	cmp	r1, #32
 800aaf2:	d818      	bhi.n	800ab26 <__hexnan+0x7e>
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	459b      	cmp	fp, r3
 800aaf8:	dd13      	ble.n	800ab22 <__hexnan+0x7a>
 800aafa:	454c      	cmp	r4, r9
 800aafc:	d206      	bcs.n	800ab0c <__hexnan+0x64>
 800aafe:	2d07      	cmp	r5, #7
 800ab00:	dc04      	bgt.n	800ab0c <__hexnan+0x64>
 800ab02:	462a      	mov	r2, r5
 800ab04:	4649      	mov	r1, r9
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ffa8 	bl	800aa5c <L_shift>
 800ab0c:	4544      	cmp	r4, r8
 800ab0e:	d950      	bls.n	800abb2 <__hexnan+0x10a>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f1a4 0904 	sub.w	r9, r4, #4
 800ab16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab1e:	464c      	mov	r4, r9
 800ab20:	461d      	mov	r5, r3
 800ab22:	9a03      	ldr	r2, [sp, #12]
 800ab24:	e7d7      	b.n	800aad6 <__hexnan+0x2e>
 800ab26:	2929      	cmp	r1, #41	; 0x29
 800ab28:	d156      	bne.n	800abd8 <__hexnan+0x130>
 800ab2a:	3202      	adds	r2, #2
 800ab2c:	f8ca 2000 	str.w	r2, [sl]
 800ab30:	f1bb 0f00 	cmp.w	fp, #0
 800ab34:	d050      	beq.n	800abd8 <__hexnan+0x130>
 800ab36:	454c      	cmp	r4, r9
 800ab38:	d206      	bcs.n	800ab48 <__hexnan+0xa0>
 800ab3a:	2d07      	cmp	r5, #7
 800ab3c:	dc04      	bgt.n	800ab48 <__hexnan+0xa0>
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4649      	mov	r1, r9
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7ff ff8a 	bl	800aa5c <L_shift>
 800ab48:	4544      	cmp	r4, r8
 800ab4a:	d934      	bls.n	800abb6 <__hexnan+0x10e>
 800ab4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab50:	4623      	mov	r3, r4
 800ab52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab5a:	429f      	cmp	r7, r3
 800ab5c:	d2f9      	bcs.n	800ab52 <__hexnan+0xaa>
 800ab5e:	1b3b      	subs	r3, r7, r4
 800ab60:	f023 0303 	bic.w	r3, r3, #3
 800ab64:	3304      	adds	r3, #4
 800ab66:	3401      	adds	r4, #1
 800ab68:	3e03      	subs	r6, #3
 800ab6a:	42b4      	cmp	r4, r6
 800ab6c:	bf88      	it	hi
 800ab6e:	2304      	movhi	r3, #4
 800ab70:	4443      	add	r3, r8
 800ab72:	2200      	movs	r2, #0
 800ab74:	f843 2b04 	str.w	r2, [r3], #4
 800ab78:	429f      	cmp	r7, r3
 800ab7a:	d2fb      	bcs.n	800ab74 <__hexnan+0xcc>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	b91b      	cbnz	r3, 800ab88 <__hexnan+0xe0>
 800ab80:	4547      	cmp	r7, r8
 800ab82:	d127      	bne.n	800abd4 <__hexnan+0x12c>
 800ab84:	2301      	movs	r3, #1
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	2005      	movs	r0, #5
 800ab8a:	e026      	b.n	800abda <__hexnan+0x132>
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	2d08      	cmp	r5, #8
 800ab90:	f10b 0b01 	add.w	fp, fp, #1
 800ab94:	dd06      	ble.n	800aba4 <__hexnan+0xfc>
 800ab96:	4544      	cmp	r4, r8
 800ab98:	d9c3      	bls.n	800ab22 <__hexnan+0x7a>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800aba0:	2501      	movs	r5, #1
 800aba2:	3c04      	subs	r4, #4
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	f000 000f 	and.w	r0, r0, #15
 800abaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	e7b7      	b.n	800ab22 <__hexnan+0x7a>
 800abb2:	2508      	movs	r5, #8
 800abb4:	e7b5      	b.n	800ab22 <__hexnan+0x7a>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0df      	beq.n	800ab7c <__hexnan+0xd4>
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	f1c3 0320 	rsb	r3, r3, #32
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abcc:	401a      	ands	r2, r3
 800abce:	f846 2c04 	str.w	r2, [r6, #-4]
 800abd2:	e7d3      	b.n	800ab7c <__hexnan+0xd4>
 800abd4:	3f04      	subs	r7, #4
 800abd6:	e7d1      	b.n	800ab7c <__hexnan+0xd4>
 800abd8:	2004      	movs	r0, #4
 800abda:	b007      	add	sp, #28
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abe0 <_localeconv_r>:
 800abe0:	4800      	ldr	r0, [pc, #0]	; (800abe4 <_localeconv_r+0x4>)
 800abe2:	4770      	bx	lr
 800abe4:	20000164 	.word	0x20000164

0800abe8 <__retarget_lock_init_recursive>:
 800abe8:	4770      	bx	lr

0800abea <__retarget_lock_acquire_recursive>:
 800abea:	4770      	bx	lr

0800abec <__retarget_lock_release_recursive>:
 800abec:	4770      	bx	lr

0800abee <__swhatbuf_r>:
 800abee:	b570      	push	{r4, r5, r6, lr}
 800abf0:	460e      	mov	r6, r1
 800abf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf6:	2900      	cmp	r1, #0
 800abf8:	b096      	sub	sp, #88	; 0x58
 800abfa:	4614      	mov	r4, r2
 800abfc:	461d      	mov	r5, r3
 800abfe:	da08      	bge.n	800ac12 <__swhatbuf_r+0x24>
 800ac00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	061a      	lsls	r2, r3, #24
 800ac0a:	d410      	bmi.n	800ac2e <__swhatbuf_r+0x40>
 800ac0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac10:	e00e      	b.n	800ac30 <__swhatbuf_r+0x42>
 800ac12:	466a      	mov	r2, sp
 800ac14:	f001 f9b6 	bl	800bf84 <_fstat_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dbf1      	blt.n	800ac00 <__swhatbuf_r+0x12>
 800ac1c:	9a01      	ldr	r2, [sp, #4]
 800ac1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac26:	425a      	negs	r2, r3
 800ac28:	415a      	adcs	r2, r3
 800ac2a:	602a      	str	r2, [r5, #0]
 800ac2c:	e7ee      	b.n	800ac0c <__swhatbuf_r+0x1e>
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	2000      	movs	r0, #0
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	b016      	add	sp, #88	; 0x58
 800ac36:	bd70      	pop	{r4, r5, r6, pc}

0800ac38 <__smakebuf_r>:
 800ac38:	898b      	ldrh	r3, [r1, #12]
 800ac3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac3c:	079d      	lsls	r5, r3, #30
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460c      	mov	r4, r1
 800ac42:	d507      	bpl.n	800ac54 <__smakebuf_r+0x1c>
 800ac44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	6163      	str	r3, [r4, #20]
 800ac50:	b002      	add	sp, #8
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	ab01      	add	r3, sp, #4
 800ac56:	466a      	mov	r2, sp
 800ac58:	f7ff ffc9 	bl	800abee <__swhatbuf_r>
 800ac5c:	9900      	ldr	r1, [sp, #0]
 800ac5e:	4605      	mov	r5, r0
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 fd95 	bl	800b790 <_malloc_r>
 800ac66:	b948      	cbnz	r0, 800ac7c <__smakebuf_r+0x44>
 800ac68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6c:	059a      	lsls	r2, r3, #22
 800ac6e:	d4ef      	bmi.n	800ac50 <__smakebuf_r+0x18>
 800ac70:	f023 0303 	bic.w	r3, r3, #3
 800ac74:	f043 0302 	orr.w	r3, r3, #2
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	e7e3      	b.n	800ac44 <__smakebuf_r+0xc>
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <__smakebuf_r+0x7c>)
 800ac7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	6020      	str	r0, [r4, #0]
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	9b00      	ldr	r3, [sp, #0]
 800ac8c:	6163      	str	r3, [r4, #20]
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	6120      	str	r0, [r4, #16]
 800ac92:	b15b      	cbz	r3, 800acac <__smakebuf_r+0x74>
 800ac94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f001 f985 	bl	800bfa8 <_isatty_r>
 800ac9e:	b128      	cbz	r0, 800acac <__smakebuf_r+0x74>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	89a0      	ldrh	r0, [r4, #12]
 800acae:	4305      	orrs	r5, r0
 800acb0:	81a5      	strh	r5, [r4, #12]
 800acb2:	e7cd      	b.n	800ac50 <__smakebuf_r+0x18>
 800acb4:	0800a361 	.word	0x0800a361

0800acb8 <malloc>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <malloc+0xc>)
 800acba:	4601      	mov	r1, r0
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f000 bd67 	b.w	800b790 <_malloc_r>
 800acc2:	bf00      	nop
 800acc4:	2000000c 	.word	0x2000000c

0800acc8 <__ascii_mbtowc>:
 800acc8:	b082      	sub	sp, #8
 800acca:	b901      	cbnz	r1, 800acce <__ascii_mbtowc+0x6>
 800accc:	a901      	add	r1, sp, #4
 800acce:	b142      	cbz	r2, 800ace2 <__ascii_mbtowc+0x1a>
 800acd0:	b14b      	cbz	r3, 800ace6 <__ascii_mbtowc+0x1e>
 800acd2:	7813      	ldrb	r3, [r2, #0]
 800acd4:	600b      	str	r3, [r1, #0]
 800acd6:	7812      	ldrb	r2, [r2, #0]
 800acd8:	1e10      	subs	r0, r2, #0
 800acda:	bf18      	it	ne
 800acdc:	2001      	movne	r0, #1
 800acde:	b002      	add	sp, #8
 800ace0:	4770      	bx	lr
 800ace2:	4610      	mov	r0, r2
 800ace4:	e7fb      	b.n	800acde <__ascii_mbtowc+0x16>
 800ace6:	f06f 0001 	mvn.w	r0, #1
 800acea:	e7f8      	b.n	800acde <__ascii_mbtowc+0x16>

0800acec <memcpy>:
 800acec:	440a      	add	r2, r1
 800acee:	4291      	cmp	r1, r2
 800acf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acf4:	d100      	bne.n	800acf8 <memcpy+0xc>
 800acf6:	4770      	bx	lr
 800acf8:	b510      	push	{r4, lr}
 800acfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad02:	4291      	cmp	r1, r2
 800ad04:	d1f9      	bne.n	800acfa <memcpy+0xe>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <_Balloc>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	460d      	mov	r5, r1
 800ad10:	b976      	cbnz	r6, 800ad30 <_Balloc+0x28>
 800ad12:	2010      	movs	r0, #16
 800ad14:	f7ff ffd0 	bl	800acb8 <malloc>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad1c:	b920      	cbnz	r0, 800ad28 <_Balloc+0x20>
 800ad1e:	4b18      	ldr	r3, [pc, #96]	; (800ad80 <_Balloc+0x78>)
 800ad20:	4818      	ldr	r0, [pc, #96]	; (800ad84 <_Balloc+0x7c>)
 800ad22:	2166      	movs	r1, #102	; 0x66
 800ad24:	f001 f8ee 	bl	800bf04 <__assert_func>
 800ad28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad2c:	6006      	str	r6, [r0, #0]
 800ad2e:	60c6      	str	r6, [r0, #12]
 800ad30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad32:	68f3      	ldr	r3, [r6, #12]
 800ad34:	b183      	cbz	r3, 800ad58 <_Balloc+0x50>
 800ad36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad3e:	b9b8      	cbnz	r0, 800ad70 <_Balloc+0x68>
 800ad40:	2101      	movs	r1, #1
 800ad42:	fa01 f605 	lsl.w	r6, r1, r5
 800ad46:	1d72      	adds	r2, r6, #5
 800ad48:	0092      	lsls	r2, r2, #2
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fc9d 	bl	800b68a <_calloc_r>
 800ad50:	b160      	cbz	r0, 800ad6c <_Balloc+0x64>
 800ad52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad56:	e00e      	b.n	800ad76 <_Balloc+0x6e>
 800ad58:	2221      	movs	r2, #33	; 0x21
 800ad5a:	2104      	movs	r1, #4
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 fc94 	bl	800b68a <_calloc_r>
 800ad62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad64:	60f0      	str	r0, [r6, #12]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e4      	bne.n	800ad36 <_Balloc+0x2e>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	6802      	ldr	r2, [r0, #0]
 800ad72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad76:	2300      	movs	r3, #0
 800ad78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad7c:	e7f7      	b.n	800ad6e <_Balloc+0x66>
 800ad7e:	bf00      	nop
 800ad80:	0800c3be 	.word	0x0800c3be
 800ad84:	0800c520 	.word	0x0800c520

0800ad88 <_Bfree>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	b976      	cbnz	r6, 800adb0 <_Bfree+0x28>
 800ad92:	2010      	movs	r0, #16
 800ad94:	f7ff ff90 	bl	800acb8 <malloc>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6268      	str	r0, [r5, #36]	; 0x24
 800ad9c:	b920      	cbnz	r0, 800ada8 <_Bfree+0x20>
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <_Bfree+0x3c>)
 800ada0:	4809      	ldr	r0, [pc, #36]	; (800adc8 <_Bfree+0x40>)
 800ada2:	218a      	movs	r1, #138	; 0x8a
 800ada4:	f001 f8ae 	bl	800bf04 <__assert_func>
 800ada8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adac:	6006      	str	r6, [r0, #0]
 800adae:	60c6      	str	r6, [r0, #12]
 800adb0:	b13c      	cbz	r4, 800adc2 <_Bfree+0x3a>
 800adb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adb4:	6862      	ldr	r2, [r4, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adbc:	6021      	str	r1, [r4, #0]
 800adbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	0800c3be 	.word	0x0800c3be
 800adc8:	0800c520 	.word	0x0800c520

0800adcc <__multadd>:
 800adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add0:	690d      	ldr	r5, [r1, #16]
 800add2:	4607      	mov	r7, r0
 800add4:	460c      	mov	r4, r1
 800add6:	461e      	mov	r6, r3
 800add8:	f101 0c14 	add.w	ip, r1, #20
 800addc:	2000      	movs	r0, #0
 800adde:	f8dc 3000 	ldr.w	r3, [ip]
 800ade2:	b299      	uxth	r1, r3
 800ade4:	fb02 6101 	mla	r1, r2, r1, r6
 800ade8:	0c1e      	lsrs	r6, r3, #16
 800adea:	0c0b      	lsrs	r3, r1, #16
 800adec:	fb02 3306 	mla	r3, r2, r6, r3
 800adf0:	b289      	uxth	r1, r1
 800adf2:	3001      	adds	r0, #1
 800adf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adf8:	4285      	cmp	r5, r0
 800adfa:	f84c 1b04 	str.w	r1, [ip], #4
 800adfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae02:	dcec      	bgt.n	800adde <__multadd+0x12>
 800ae04:	b30e      	cbz	r6, 800ae4a <__multadd+0x7e>
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	42ab      	cmp	r3, r5
 800ae0a:	dc19      	bgt.n	800ae40 <__multadd+0x74>
 800ae0c:	6861      	ldr	r1, [r4, #4]
 800ae0e:	4638      	mov	r0, r7
 800ae10:	3101      	adds	r1, #1
 800ae12:	f7ff ff79 	bl	800ad08 <_Balloc>
 800ae16:	4680      	mov	r8, r0
 800ae18:	b928      	cbnz	r0, 800ae26 <__multadd+0x5a>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <__multadd+0x84>)
 800ae1e:	480d      	ldr	r0, [pc, #52]	; (800ae54 <__multadd+0x88>)
 800ae20:	21b5      	movs	r1, #181	; 0xb5
 800ae22:	f001 f86f 	bl	800bf04 <__assert_func>
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	3202      	adds	r2, #2
 800ae2a:	f104 010c 	add.w	r1, r4, #12
 800ae2e:	0092      	lsls	r2, r2, #2
 800ae30:	300c      	adds	r0, #12
 800ae32:	f7ff ff5b 	bl	800acec <memcpy>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff ffa5 	bl	800ad88 <_Bfree>
 800ae3e:	4644      	mov	r4, r8
 800ae40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae44:	3501      	adds	r5, #1
 800ae46:	615e      	str	r6, [r3, #20]
 800ae48:	6125      	str	r5, [r4, #16]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	0800c430 	.word	0x0800c430
 800ae54:	0800c520 	.word	0x0800c520

0800ae58 <__s2b>:
 800ae58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	4615      	mov	r5, r2
 800ae60:	461f      	mov	r7, r3
 800ae62:	2209      	movs	r2, #9
 800ae64:	3308      	adds	r3, #8
 800ae66:	4606      	mov	r6, r0
 800ae68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2201      	movs	r2, #1
 800ae70:	429a      	cmp	r2, r3
 800ae72:	db09      	blt.n	800ae88 <__s2b+0x30>
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7ff ff47 	bl	800ad08 <_Balloc>
 800ae7a:	b940      	cbnz	r0, 800ae8e <__s2b+0x36>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <__s2b+0x8c>)
 800ae80:	4819      	ldr	r0, [pc, #100]	; (800aee8 <__s2b+0x90>)
 800ae82:	21ce      	movs	r1, #206	; 0xce
 800ae84:	f001 f83e 	bl	800bf04 <__assert_func>
 800ae88:	0052      	lsls	r2, r2, #1
 800ae8a:	3101      	adds	r1, #1
 800ae8c:	e7f0      	b.n	800ae70 <__s2b+0x18>
 800ae8e:	9b08      	ldr	r3, [sp, #32]
 800ae90:	6143      	str	r3, [r0, #20]
 800ae92:	2d09      	cmp	r5, #9
 800ae94:	f04f 0301 	mov.w	r3, #1
 800ae98:	6103      	str	r3, [r0, #16]
 800ae9a:	dd16      	ble.n	800aeca <__s2b+0x72>
 800ae9c:	f104 0909 	add.w	r9, r4, #9
 800aea0:	46c8      	mov	r8, r9
 800aea2:	442c      	add	r4, r5
 800aea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aea8:	4601      	mov	r1, r0
 800aeaa:	3b30      	subs	r3, #48	; 0x30
 800aeac:	220a      	movs	r2, #10
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7ff ff8c 	bl	800adcc <__multadd>
 800aeb4:	45a0      	cmp	r8, r4
 800aeb6:	d1f5      	bne.n	800aea4 <__s2b+0x4c>
 800aeb8:	f1a5 0408 	sub.w	r4, r5, #8
 800aebc:	444c      	add	r4, r9
 800aebe:	1b2d      	subs	r5, r5, r4
 800aec0:	1963      	adds	r3, r4, r5
 800aec2:	42bb      	cmp	r3, r7
 800aec4:	db04      	blt.n	800aed0 <__s2b+0x78>
 800aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeca:	340a      	adds	r4, #10
 800aecc:	2509      	movs	r5, #9
 800aece:	e7f6      	b.n	800aebe <__s2b+0x66>
 800aed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aed4:	4601      	mov	r1, r0
 800aed6:	3b30      	subs	r3, #48	; 0x30
 800aed8:	220a      	movs	r2, #10
 800aeda:	4630      	mov	r0, r6
 800aedc:	f7ff ff76 	bl	800adcc <__multadd>
 800aee0:	e7ee      	b.n	800aec0 <__s2b+0x68>
 800aee2:	bf00      	nop
 800aee4:	0800c430 	.word	0x0800c430
 800aee8:	0800c520 	.word	0x0800c520

0800aeec <__hi0bits>:
 800aeec:	0c03      	lsrs	r3, r0, #16
 800aeee:	041b      	lsls	r3, r3, #16
 800aef0:	b9d3      	cbnz	r3, 800af28 <__hi0bits+0x3c>
 800aef2:	0400      	lsls	r0, r0, #16
 800aef4:	2310      	movs	r3, #16
 800aef6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aefa:	bf04      	itt	eq
 800aefc:	0200      	lsleq	r0, r0, #8
 800aefe:	3308      	addeq	r3, #8
 800af00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af04:	bf04      	itt	eq
 800af06:	0100      	lsleq	r0, r0, #4
 800af08:	3304      	addeq	r3, #4
 800af0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af0e:	bf04      	itt	eq
 800af10:	0080      	lsleq	r0, r0, #2
 800af12:	3302      	addeq	r3, #2
 800af14:	2800      	cmp	r0, #0
 800af16:	db05      	blt.n	800af24 <__hi0bits+0x38>
 800af18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af1c:	f103 0301 	add.w	r3, r3, #1
 800af20:	bf08      	it	eq
 800af22:	2320      	moveq	r3, #32
 800af24:	4618      	mov	r0, r3
 800af26:	4770      	bx	lr
 800af28:	2300      	movs	r3, #0
 800af2a:	e7e4      	b.n	800aef6 <__hi0bits+0xa>

0800af2c <__lo0bits>:
 800af2c:	6803      	ldr	r3, [r0, #0]
 800af2e:	f013 0207 	ands.w	r2, r3, #7
 800af32:	4601      	mov	r1, r0
 800af34:	d00b      	beq.n	800af4e <__lo0bits+0x22>
 800af36:	07da      	lsls	r2, r3, #31
 800af38:	d423      	bmi.n	800af82 <__lo0bits+0x56>
 800af3a:	0798      	lsls	r0, r3, #30
 800af3c:	bf49      	itett	mi
 800af3e:	085b      	lsrmi	r3, r3, #1
 800af40:	089b      	lsrpl	r3, r3, #2
 800af42:	2001      	movmi	r0, #1
 800af44:	600b      	strmi	r3, [r1, #0]
 800af46:	bf5c      	itt	pl
 800af48:	600b      	strpl	r3, [r1, #0]
 800af4a:	2002      	movpl	r0, #2
 800af4c:	4770      	bx	lr
 800af4e:	b298      	uxth	r0, r3
 800af50:	b9a8      	cbnz	r0, 800af7e <__lo0bits+0x52>
 800af52:	0c1b      	lsrs	r3, r3, #16
 800af54:	2010      	movs	r0, #16
 800af56:	b2da      	uxtb	r2, r3
 800af58:	b90a      	cbnz	r2, 800af5e <__lo0bits+0x32>
 800af5a:	3008      	adds	r0, #8
 800af5c:	0a1b      	lsrs	r3, r3, #8
 800af5e:	071a      	lsls	r2, r3, #28
 800af60:	bf04      	itt	eq
 800af62:	091b      	lsreq	r3, r3, #4
 800af64:	3004      	addeq	r0, #4
 800af66:	079a      	lsls	r2, r3, #30
 800af68:	bf04      	itt	eq
 800af6a:	089b      	lsreq	r3, r3, #2
 800af6c:	3002      	addeq	r0, #2
 800af6e:	07da      	lsls	r2, r3, #31
 800af70:	d403      	bmi.n	800af7a <__lo0bits+0x4e>
 800af72:	085b      	lsrs	r3, r3, #1
 800af74:	f100 0001 	add.w	r0, r0, #1
 800af78:	d005      	beq.n	800af86 <__lo0bits+0x5a>
 800af7a:	600b      	str	r3, [r1, #0]
 800af7c:	4770      	bx	lr
 800af7e:	4610      	mov	r0, r2
 800af80:	e7e9      	b.n	800af56 <__lo0bits+0x2a>
 800af82:	2000      	movs	r0, #0
 800af84:	4770      	bx	lr
 800af86:	2020      	movs	r0, #32
 800af88:	4770      	bx	lr
	...

0800af8c <__i2b>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	460c      	mov	r4, r1
 800af90:	2101      	movs	r1, #1
 800af92:	f7ff feb9 	bl	800ad08 <_Balloc>
 800af96:	4602      	mov	r2, r0
 800af98:	b928      	cbnz	r0, 800afa6 <__i2b+0x1a>
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <__i2b+0x24>)
 800af9c:	4805      	ldr	r0, [pc, #20]	; (800afb4 <__i2b+0x28>)
 800af9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afa2:	f000 ffaf 	bl	800bf04 <__assert_func>
 800afa6:	2301      	movs	r3, #1
 800afa8:	6144      	str	r4, [r0, #20]
 800afaa:	6103      	str	r3, [r0, #16]
 800afac:	bd10      	pop	{r4, pc}
 800afae:	bf00      	nop
 800afb0:	0800c430 	.word	0x0800c430
 800afb4:	0800c520 	.word	0x0800c520

0800afb8 <__multiply>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	4691      	mov	r9, r2
 800afbe:	690a      	ldr	r2, [r1, #16]
 800afc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bfb8      	it	lt
 800afc8:	460b      	movlt	r3, r1
 800afca:	460c      	mov	r4, r1
 800afcc:	bfbc      	itt	lt
 800afce:	464c      	movlt	r4, r9
 800afd0:	4699      	movlt	r9, r3
 800afd2:	6927      	ldr	r7, [r4, #16]
 800afd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	6861      	ldr	r1, [r4, #4]
 800afdc:	eb07 060a 	add.w	r6, r7, sl
 800afe0:	42b3      	cmp	r3, r6
 800afe2:	b085      	sub	sp, #20
 800afe4:	bfb8      	it	lt
 800afe6:	3101      	addlt	r1, #1
 800afe8:	f7ff fe8e 	bl	800ad08 <_Balloc>
 800afec:	b930      	cbnz	r0, 800affc <__multiply+0x44>
 800afee:	4602      	mov	r2, r0
 800aff0:	4b44      	ldr	r3, [pc, #272]	; (800b104 <__multiply+0x14c>)
 800aff2:	4845      	ldr	r0, [pc, #276]	; (800b108 <__multiply+0x150>)
 800aff4:	f240 115d 	movw	r1, #349	; 0x15d
 800aff8:	f000 ff84 	bl	800bf04 <__assert_func>
 800affc:	f100 0514 	add.w	r5, r0, #20
 800b000:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b004:	462b      	mov	r3, r5
 800b006:	2200      	movs	r2, #0
 800b008:	4543      	cmp	r3, r8
 800b00a:	d321      	bcc.n	800b050 <__multiply+0x98>
 800b00c:	f104 0314 	add.w	r3, r4, #20
 800b010:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b014:	f109 0314 	add.w	r3, r9, #20
 800b018:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b01c:	9202      	str	r2, [sp, #8]
 800b01e:	1b3a      	subs	r2, r7, r4
 800b020:	3a15      	subs	r2, #21
 800b022:	f022 0203 	bic.w	r2, r2, #3
 800b026:	3204      	adds	r2, #4
 800b028:	f104 0115 	add.w	r1, r4, #21
 800b02c:	428f      	cmp	r7, r1
 800b02e:	bf38      	it	cc
 800b030:	2204      	movcc	r2, #4
 800b032:	9201      	str	r2, [sp, #4]
 800b034:	9a02      	ldr	r2, [sp, #8]
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d80c      	bhi.n	800b056 <__multiply+0x9e>
 800b03c:	2e00      	cmp	r6, #0
 800b03e:	dd03      	ble.n	800b048 <__multiply+0x90>
 800b040:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b044:	2b00      	cmp	r3, #0
 800b046:	d05a      	beq.n	800b0fe <__multiply+0x146>
 800b048:	6106      	str	r6, [r0, #16]
 800b04a:	b005      	add	sp, #20
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	f843 2b04 	str.w	r2, [r3], #4
 800b054:	e7d8      	b.n	800b008 <__multiply+0x50>
 800b056:	f8b3 a000 	ldrh.w	sl, [r3]
 800b05a:	f1ba 0f00 	cmp.w	sl, #0
 800b05e:	d024      	beq.n	800b0aa <__multiply+0xf2>
 800b060:	f104 0e14 	add.w	lr, r4, #20
 800b064:	46a9      	mov	r9, r5
 800b066:	f04f 0c00 	mov.w	ip, #0
 800b06a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b06e:	f8d9 1000 	ldr.w	r1, [r9]
 800b072:	fa1f fb82 	uxth.w	fp, r2
 800b076:	b289      	uxth	r1, r1
 800b078:	fb0a 110b 	mla	r1, sl, fp, r1
 800b07c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b080:	f8d9 2000 	ldr.w	r2, [r9]
 800b084:	4461      	add	r1, ip
 800b086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b08a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b08e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b092:	b289      	uxth	r1, r1
 800b094:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b098:	4577      	cmp	r7, lr
 800b09a:	f849 1b04 	str.w	r1, [r9], #4
 800b09e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0a2:	d8e2      	bhi.n	800b06a <__multiply+0xb2>
 800b0a4:	9a01      	ldr	r2, [sp, #4]
 800b0a6:	f845 c002 	str.w	ip, [r5, r2]
 800b0aa:	9a03      	ldr	r2, [sp, #12]
 800b0ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	f1b9 0f00 	cmp.w	r9, #0
 800b0b6:	d020      	beq.n	800b0fa <__multiply+0x142>
 800b0b8:	6829      	ldr	r1, [r5, #0]
 800b0ba:	f104 0c14 	add.w	ip, r4, #20
 800b0be:	46ae      	mov	lr, r5
 800b0c0:	f04f 0a00 	mov.w	sl, #0
 800b0c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b0c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0cc:	fb09 220b 	mla	r2, r9, fp, r2
 800b0d0:	4492      	add	sl, r2
 800b0d2:	b289      	uxth	r1, r1
 800b0d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0d8:	f84e 1b04 	str.w	r1, [lr], #4
 800b0dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b0e4:	0c12      	lsrs	r2, r2, #16
 800b0e6:	fb09 1102 	mla	r1, r9, r2, r1
 800b0ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b0ee:	4567      	cmp	r7, ip
 800b0f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0f4:	d8e6      	bhi.n	800b0c4 <__multiply+0x10c>
 800b0f6:	9a01      	ldr	r2, [sp, #4]
 800b0f8:	50a9      	str	r1, [r5, r2]
 800b0fa:	3504      	adds	r5, #4
 800b0fc:	e79a      	b.n	800b034 <__multiply+0x7c>
 800b0fe:	3e01      	subs	r6, #1
 800b100:	e79c      	b.n	800b03c <__multiply+0x84>
 800b102:	bf00      	nop
 800b104:	0800c430 	.word	0x0800c430
 800b108:	0800c520 	.word	0x0800c520

0800b10c <__pow5mult>:
 800b10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b110:	4615      	mov	r5, r2
 800b112:	f012 0203 	ands.w	r2, r2, #3
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	d007      	beq.n	800b12c <__pow5mult+0x20>
 800b11c:	4c25      	ldr	r4, [pc, #148]	; (800b1b4 <__pow5mult+0xa8>)
 800b11e:	3a01      	subs	r2, #1
 800b120:	2300      	movs	r3, #0
 800b122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b126:	f7ff fe51 	bl	800adcc <__multadd>
 800b12a:	4607      	mov	r7, r0
 800b12c:	10ad      	asrs	r5, r5, #2
 800b12e:	d03d      	beq.n	800b1ac <__pow5mult+0xa0>
 800b130:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b132:	b97c      	cbnz	r4, 800b154 <__pow5mult+0x48>
 800b134:	2010      	movs	r0, #16
 800b136:	f7ff fdbf 	bl	800acb8 <malloc>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6270      	str	r0, [r6, #36]	; 0x24
 800b13e:	b928      	cbnz	r0, 800b14c <__pow5mult+0x40>
 800b140:	4b1d      	ldr	r3, [pc, #116]	; (800b1b8 <__pow5mult+0xac>)
 800b142:	481e      	ldr	r0, [pc, #120]	; (800b1bc <__pow5mult+0xb0>)
 800b144:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b148:	f000 fedc 	bl	800bf04 <__assert_func>
 800b14c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b150:	6004      	str	r4, [r0, #0]
 800b152:	60c4      	str	r4, [r0, #12]
 800b154:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b15c:	b94c      	cbnz	r4, 800b172 <__pow5mult+0x66>
 800b15e:	f240 2171 	movw	r1, #625	; 0x271
 800b162:	4630      	mov	r0, r6
 800b164:	f7ff ff12 	bl	800af8c <__i2b>
 800b168:	2300      	movs	r3, #0
 800b16a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b16e:	4604      	mov	r4, r0
 800b170:	6003      	str	r3, [r0, #0]
 800b172:	f04f 0900 	mov.w	r9, #0
 800b176:	07eb      	lsls	r3, r5, #31
 800b178:	d50a      	bpl.n	800b190 <__pow5mult+0x84>
 800b17a:	4639      	mov	r1, r7
 800b17c:	4622      	mov	r2, r4
 800b17e:	4630      	mov	r0, r6
 800b180:	f7ff ff1a 	bl	800afb8 <__multiply>
 800b184:	4639      	mov	r1, r7
 800b186:	4680      	mov	r8, r0
 800b188:	4630      	mov	r0, r6
 800b18a:	f7ff fdfd 	bl	800ad88 <_Bfree>
 800b18e:	4647      	mov	r7, r8
 800b190:	106d      	asrs	r5, r5, #1
 800b192:	d00b      	beq.n	800b1ac <__pow5mult+0xa0>
 800b194:	6820      	ldr	r0, [r4, #0]
 800b196:	b938      	cbnz	r0, 800b1a8 <__pow5mult+0x9c>
 800b198:	4622      	mov	r2, r4
 800b19a:	4621      	mov	r1, r4
 800b19c:	4630      	mov	r0, r6
 800b19e:	f7ff ff0b 	bl	800afb8 <__multiply>
 800b1a2:	6020      	str	r0, [r4, #0]
 800b1a4:	f8c0 9000 	str.w	r9, [r0]
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	e7e4      	b.n	800b176 <__pow5mult+0x6a>
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b2:	bf00      	nop
 800b1b4:	0800c670 	.word	0x0800c670
 800b1b8:	0800c3be 	.word	0x0800c3be
 800b1bc:	0800c520 	.word	0x0800c520

0800b1c0 <__lshift>:
 800b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	6849      	ldr	r1, [r1, #4]
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	4691      	mov	r9, r2
 800b1d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1d8:	f108 0601 	add.w	r6, r8, #1
 800b1dc:	42b3      	cmp	r3, r6
 800b1de:	db0b      	blt.n	800b1f8 <__lshift+0x38>
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff fd91 	bl	800ad08 <_Balloc>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b948      	cbnz	r0, 800b1fe <__lshift+0x3e>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4b2a      	ldr	r3, [pc, #168]	; (800b298 <__lshift+0xd8>)
 800b1ee:	482b      	ldr	r0, [pc, #172]	; (800b29c <__lshift+0xdc>)
 800b1f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1f4:	f000 fe86 	bl	800bf04 <__assert_func>
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	e7ee      	b.n	800b1dc <__lshift+0x1c>
 800b1fe:	2300      	movs	r3, #0
 800b200:	f100 0114 	add.w	r1, r0, #20
 800b204:	f100 0210 	add.w	r2, r0, #16
 800b208:	4618      	mov	r0, r3
 800b20a:	4553      	cmp	r3, sl
 800b20c:	db37      	blt.n	800b27e <__lshift+0xbe>
 800b20e:	6920      	ldr	r0, [r4, #16]
 800b210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b214:	f104 0314 	add.w	r3, r4, #20
 800b218:	f019 091f 	ands.w	r9, r9, #31
 800b21c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b220:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b224:	d02f      	beq.n	800b286 <__lshift+0xc6>
 800b226:	f1c9 0e20 	rsb	lr, r9, #32
 800b22a:	468a      	mov	sl, r1
 800b22c:	f04f 0c00 	mov.w	ip, #0
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	fa02 f209 	lsl.w	r2, r2, r9
 800b236:	ea42 020c 	orr.w	r2, r2, ip
 800b23a:	f84a 2b04 	str.w	r2, [sl], #4
 800b23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b242:	4298      	cmp	r0, r3
 800b244:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b248:	d8f2      	bhi.n	800b230 <__lshift+0x70>
 800b24a:	1b03      	subs	r3, r0, r4
 800b24c:	3b15      	subs	r3, #21
 800b24e:	f023 0303 	bic.w	r3, r3, #3
 800b252:	3304      	adds	r3, #4
 800b254:	f104 0215 	add.w	r2, r4, #21
 800b258:	4290      	cmp	r0, r2
 800b25a:	bf38      	it	cc
 800b25c:	2304      	movcc	r3, #4
 800b25e:	f841 c003 	str.w	ip, [r1, r3]
 800b262:	f1bc 0f00 	cmp.w	ip, #0
 800b266:	d001      	beq.n	800b26c <__lshift+0xac>
 800b268:	f108 0602 	add.w	r6, r8, #2
 800b26c:	3e01      	subs	r6, #1
 800b26e:	4638      	mov	r0, r7
 800b270:	612e      	str	r6, [r5, #16]
 800b272:	4621      	mov	r1, r4
 800b274:	f7ff fd88 	bl	800ad88 <_Bfree>
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b282:	3301      	adds	r3, #1
 800b284:	e7c1      	b.n	800b20a <__lshift+0x4a>
 800b286:	3904      	subs	r1, #4
 800b288:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b290:	4298      	cmp	r0, r3
 800b292:	d8f9      	bhi.n	800b288 <__lshift+0xc8>
 800b294:	e7ea      	b.n	800b26c <__lshift+0xac>
 800b296:	bf00      	nop
 800b298:	0800c430 	.word	0x0800c430
 800b29c:	0800c520 	.word	0x0800c520

0800b2a0 <__mcmp>:
 800b2a0:	b530      	push	{r4, r5, lr}
 800b2a2:	6902      	ldr	r2, [r0, #16]
 800b2a4:	690c      	ldr	r4, [r1, #16]
 800b2a6:	1b12      	subs	r2, r2, r4
 800b2a8:	d10e      	bne.n	800b2c8 <__mcmp+0x28>
 800b2aa:	f100 0314 	add.w	r3, r0, #20
 800b2ae:	3114      	adds	r1, #20
 800b2b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2c0:	42a5      	cmp	r5, r4
 800b2c2:	d003      	beq.n	800b2cc <__mcmp+0x2c>
 800b2c4:	d305      	bcc.n	800b2d2 <__mcmp+0x32>
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	bd30      	pop	{r4, r5, pc}
 800b2cc:	4283      	cmp	r3, r0
 800b2ce:	d3f3      	bcc.n	800b2b8 <__mcmp+0x18>
 800b2d0:	e7fa      	b.n	800b2c8 <__mcmp+0x28>
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	e7f7      	b.n	800b2c8 <__mcmp+0x28>

0800b2d8 <__mdiff>:
 800b2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2dc:	460c      	mov	r4, r1
 800b2de:	4606      	mov	r6, r0
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	4690      	mov	r8, r2
 800b2e6:	f7ff ffdb 	bl	800b2a0 <__mcmp>
 800b2ea:	1e05      	subs	r5, r0, #0
 800b2ec:	d110      	bne.n	800b310 <__mdiff+0x38>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7ff fd09 	bl	800ad08 <_Balloc>
 800b2f6:	b930      	cbnz	r0, 800b306 <__mdiff+0x2e>
 800b2f8:	4b3a      	ldr	r3, [pc, #232]	; (800b3e4 <__mdiff+0x10c>)
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	f240 2132 	movw	r1, #562	; 0x232
 800b300:	4839      	ldr	r0, [pc, #228]	; (800b3e8 <__mdiff+0x110>)
 800b302:	f000 fdff 	bl	800bf04 <__assert_func>
 800b306:	2301      	movs	r3, #1
 800b308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b30c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b310:	bfa4      	itt	ge
 800b312:	4643      	movge	r3, r8
 800b314:	46a0      	movge	r8, r4
 800b316:	4630      	mov	r0, r6
 800b318:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b31c:	bfa6      	itte	ge
 800b31e:	461c      	movge	r4, r3
 800b320:	2500      	movge	r5, #0
 800b322:	2501      	movlt	r5, #1
 800b324:	f7ff fcf0 	bl	800ad08 <_Balloc>
 800b328:	b920      	cbnz	r0, 800b334 <__mdiff+0x5c>
 800b32a:	4b2e      	ldr	r3, [pc, #184]	; (800b3e4 <__mdiff+0x10c>)
 800b32c:	4602      	mov	r2, r0
 800b32e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b332:	e7e5      	b.n	800b300 <__mdiff+0x28>
 800b334:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b338:	6926      	ldr	r6, [r4, #16]
 800b33a:	60c5      	str	r5, [r0, #12]
 800b33c:	f104 0914 	add.w	r9, r4, #20
 800b340:	f108 0514 	add.w	r5, r8, #20
 800b344:	f100 0e14 	add.w	lr, r0, #20
 800b348:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b34c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b350:	f108 0210 	add.w	r2, r8, #16
 800b354:	46f2      	mov	sl, lr
 800b356:	2100      	movs	r1, #0
 800b358:	f859 3b04 	ldr.w	r3, [r9], #4
 800b35c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b360:	fa1f f883 	uxth.w	r8, r3
 800b364:	fa11 f18b 	uxtah	r1, r1, fp
 800b368:	0c1b      	lsrs	r3, r3, #16
 800b36a:	eba1 0808 	sub.w	r8, r1, r8
 800b36e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b372:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b376:	fa1f f888 	uxth.w	r8, r8
 800b37a:	1419      	asrs	r1, r3, #16
 800b37c:	454e      	cmp	r6, r9
 800b37e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b382:	f84a 3b04 	str.w	r3, [sl], #4
 800b386:	d8e7      	bhi.n	800b358 <__mdiff+0x80>
 800b388:	1b33      	subs	r3, r6, r4
 800b38a:	3b15      	subs	r3, #21
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	3304      	adds	r3, #4
 800b392:	3415      	adds	r4, #21
 800b394:	42a6      	cmp	r6, r4
 800b396:	bf38      	it	cc
 800b398:	2304      	movcc	r3, #4
 800b39a:	441d      	add	r5, r3
 800b39c:	4473      	add	r3, lr
 800b39e:	469e      	mov	lr, r3
 800b3a0:	462e      	mov	r6, r5
 800b3a2:	4566      	cmp	r6, ip
 800b3a4:	d30e      	bcc.n	800b3c4 <__mdiff+0xec>
 800b3a6:	f10c 0203 	add.w	r2, ip, #3
 800b3aa:	1b52      	subs	r2, r2, r5
 800b3ac:	f022 0203 	bic.w	r2, r2, #3
 800b3b0:	3d03      	subs	r5, #3
 800b3b2:	45ac      	cmp	ip, r5
 800b3b4:	bf38      	it	cc
 800b3b6:	2200      	movcc	r2, #0
 800b3b8:	441a      	add	r2, r3
 800b3ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3be:	b17b      	cbz	r3, 800b3e0 <__mdiff+0x108>
 800b3c0:	6107      	str	r7, [r0, #16]
 800b3c2:	e7a3      	b.n	800b30c <__mdiff+0x34>
 800b3c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3c8:	fa11 f288 	uxtah	r2, r1, r8
 800b3cc:	1414      	asrs	r4, r2, #16
 800b3ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3d2:	b292      	uxth	r2, r2
 800b3d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b3dc:	1421      	asrs	r1, r4, #16
 800b3de:	e7e0      	b.n	800b3a2 <__mdiff+0xca>
 800b3e0:	3f01      	subs	r7, #1
 800b3e2:	e7ea      	b.n	800b3ba <__mdiff+0xe2>
 800b3e4:	0800c430 	.word	0x0800c430
 800b3e8:	0800c520 	.word	0x0800c520

0800b3ec <__ulp>:
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	ed8d 0b00 	vstr	d0, [sp]
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	4912      	ldr	r1, [pc, #72]	; (800b440 <__ulp+0x54>)
 800b3f6:	4019      	ands	r1, r3
 800b3f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	dd05      	ble.n	800b40c <__ulp+0x20>
 800b400:	2200      	movs	r2, #0
 800b402:	460b      	mov	r3, r1
 800b404:	ec43 2b10 	vmov	d0, r2, r3
 800b408:	b002      	add	sp, #8
 800b40a:	4770      	bx	lr
 800b40c:	4249      	negs	r1, r1
 800b40e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b412:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b416:	f04f 0200 	mov.w	r2, #0
 800b41a:	f04f 0300 	mov.w	r3, #0
 800b41e:	da04      	bge.n	800b42a <__ulp+0x3e>
 800b420:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b424:	fa41 f300 	asr.w	r3, r1, r0
 800b428:	e7ec      	b.n	800b404 <__ulp+0x18>
 800b42a:	f1a0 0114 	sub.w	r1, r0, #20
 800b42e:	291e      	cmp	r1, #30
 800b430:	bfda      	itte	le
 800b432:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b436:	fa20 f101 	lsrle.w	r1, r0, r1
 800b43a:	2101      	movgt	r1, #1
 800b43c:	460a      	mov	r2, r1
 800b43e:	e7e1      	b.n	800b404 <__ulp+0x18>
 800b440:	7ff00000 	.word	0x7ff00000

0800b444 <__b2d>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	6905      	ldr	r5, [r0, #16]
 800b448:	f100 0714 	add.w	r7, r0, #20
 800b44c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b450:	1f2e      	subs	r6, r5, #4
 800b452:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff fd48 	bl	800aeec <__hi0bits>
 800b45c:	f1c0 0320 	rsb	r3, r0, #32
 800b460:	280a      	cmp	r0, #10
 800b462:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b4e0 <__b2d+0x9c>
 800b466:	600b      	str	r3, [r1, #0]
 800b468:	dc14      	bgt.n	800b494 <__b2d+0x50>
 800b46a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b46e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b472:	42b7      	cmp	r7, r6
 800b474:	ea41 030c 	orr.w	r3, r1, ip
 800b478:	bf34      	ite	cc
 800b47a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b47e:	2100      	movcs	r1, #0
 800b480:	3015      	adds	r0, #21
 800b482:	fa04 f000 	lsl.w	r0, r4, r0
 800b486:	fa21 f10e 	lsr.w	r1, r1, lr
 800b48a:	ea40 0201 	orr.w	r2, r0, r1
 800b48e:	ec43 2b10 	vmov	d0, r2, r3
 800b492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b494:	42b7      	cmp	r7, r6
 800b496:	bf3a      	itte	cc
 800b498:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b49c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4a0:	2100      	movcs	r1, #0
 800b4a2:	380b      	subs	r0, #11
 800b4a4:	d017      	beq.n	800b4d6 <__b2d+0x92>
 800b4a6:	f1c0 0c20 	rsb	ip, r0, #32
 800b4aa:	fa04 f500 	lsl.w	r5, r4, r0
 800b4ae:	42be      	cmp	r6, r7
 800b4b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b4b4:	ea45 0504 	orr.w	r5, r5, r4
 800b4b8:	bf8c      	ite	hi
 800b4ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4be:	2400      	movls	r4, #0
 800b4c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b4c4:	fa01 f000 	lsl.w	r0, r1, r0
 800b4c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b4cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4d0:	ea40 0204 	orr.w	r2, r0, r4
 800b4d4:	e7db      	b.n	800b48e <__b2d+0x4a>
 800b4d6:	ea44 030c 	orr.w	r3, r4, ip
 800b4da:	460a      	mov	r2, r1
 800b4dc:	e7d7      	b.n	800b48e <__b2d+0x4a>
 800b4de:	bf00      	nop
 800b4e0:	3ff00000 	.word	0x3ff00000

0800b4e4 <__d2b>:
 800b4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4e8:	4689      	mov	r9, r1
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	ec57 6b10 	vmov	r6, r7, d0
 800b4f0:	4690      	mov	r8, r2
 800b4f2:	f7ff fc09 	bl	800ad08 <_Balloc>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	b930      	cbnz	r0, 800b508 <__d2b+0x24>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4b25      	ldr	r3, [pc, #148]	; (800b594 <__d2b+0xb0>)
 800b4fe:	4826      	ldr	r0, [pc, #152]	; (800b598 <__d2b+0xb4>)
 800b500:	f240 310a 	movw	r1, #778	; 0x30a
 800b504:	f000 fcfe 	bl	800bf04 <__assert_func>
 800b508:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b50c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b510:	bb35      	cbnz	r5, 800b560 <__d2b+0x7c>
 800b512:	2e00      	cmp	r6, #0
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	d028      	beq.n	800b56a <__d2b+0x86>
 800b518:	4668      	mov	r0, sp
 800b51a:	9600      	str	r6, [sp, #0]
 800b51c:	f7ff fd06 	bl	800af2c <__lo0bits>
 800b520:	9900      	ldr	r1, [sp, #0]
 800b522:	b300      	cbz	r0, 800b566 <__d2b+0x82>
 800b524:	9a01      	ldr	r2, [sp, #4]
 800b526:	f1c0 0320 	rsb	r3, r0, #32
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	430b      	orrs	r3, r1
 800b530:	40c2      	lsrs	r2, r0
 800b532:	6163      	str	r3, [r4, #20]
 800b534:	9201      	str	r2, [sp, #4]
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	61a3      	str	r3, [r4, #24]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bf14      	ite	ne
 800b53e:	2202      	movne	r2, #2
 800b540:	2201      	moveq	r2, #1
 800b542:	6122      	str	r2, [r4, #16]
 800b544:	b1d5      	cbz	r5, 800b57c <__d2b+0x98>
 800b546:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b54a:	4405      	add	r5, r0
 800b54c:	f8c9 5000 	str.w	r5, [r9]
 800b550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b554:	f8c8 0000 	str.w	r0, [r8]
 800b558:	4620      	mov	r0, r4
 800b55a:	b003      	add	sp, #12
 800b55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b564:	e7d5      	b.n	800b512 <__d2b+0x2e>
 800b566:	6161      	str	r1, [r4, #20]
 800b568:	e7e5      	b.n	800b536 <__d2b+0x52>
 800b56a:	a801      	add	r0, sp, #4
 800b56c:	f7ff fcde 	bl	800af2c <__lo0bits>
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	6163      	str	r3, [r4, #20]
 800b574:	2201      	movs	r2, #1
 800b576:	6122      	str	r2, [r4, #16]
 800b578:	3020      	adds	r0, #32
 800b57a:	e7e3      	b.n	800b544 <__d2b+0x60>
 800b57c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b584:	f8c9 0000 	str.w	r0, [r9]
 800b588:	6918      	ldr	r0, [r3, #16]
 800b58a:	f7ff fcaf 	bl	800aeec <__hi0bits>
 800b58e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b592:	e7df      	b.n	800b554 <__d2b+0x70>
 800b594:	0800c430 	.word	0x0800c430
 800b598:	0800c520 	.word	0x0800c520

0800b59c <__ratio>:
 800b59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	4688      	mov	r8, r1
 800b5a2:	4669      	mov	r1, sp
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	f7ff ff4d 	bl	800b444 <__b2d>
 800b5aa:	a901      	add	r1, sp, #4
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	ec55 4b10 	vmov	r4, r5, d0
 800b5b2:	f7ff ff47 	bl	800b444 <__b2d>
 800b5b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5be:	eba3 0c02 	sub.w	ip, r3, r2
 800b5c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5cc:	ec51 0b10 	vmov	r0, r1, d0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bfd6      	itet	le
 800b5d4:	460a      	movle	r2, r1
 800b5d6:	462a      	movgt	r2, r5
 800b5d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5dc:	468b      	mov	fp, r1
 800b5de:	462f      	mov	r7, r5
 800b5e0:	bfd4      	ite	le
 800b5e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b5e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	ee10 2a10 	vmov	r2, s0
 800b5f0:	465b      	mov	r3, fp
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f5 f92a 	bl	800084c <__aeabi_ddiv>
 800b5f8:	ec41 0b10 	vmov	d0, r0, r1
 800b5fc:	b003      	add	sp, #12
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b602 <__copybits>:
 800b602:	3901      	subs	r1, #1
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	1149      	asrs	r1, r1, #5
 800b608:	6914      	ldr	r4, [r2, #16]
 800b60a:	3101      	adds	r1, #1
 800b60c:	f102 0314 	add.w	r3, r2, #20
 800b610:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b614:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b618:	1f05      	subs	r5, r0, #4
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	d30c      	bcc.n	800b638 <__copybits+0x36>
 800b61e:	1aa3      	subs	r3, r4, r2
 800b620:	3b11      	subs	r3, #17
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	3211      	adds	r2, #17
 800b628:	42a2      	cmp	r2, r4
 800b62a:	bf88      	it	hi
 800b62c:	2300      	movhi	r3, #0
 800b62e:	4418      	add	r0, r3
 800b630:	2300      	movs	r3, #0
 800b632:	4288      	cmp	r0, r1
 800b634:	d305      	bcc.n	800b642 <__copybits+0x40>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	f853 6b04 	ldr.w	r6, [r3], #4
 800b63c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b640:	e7eb      	b.n	800b61a <__copybits+0x18>
 800b642:	f840 3b04 	str.w	r3, [r0], #4
 800b646:	e7f4      	b.n	800b632 <__copybits+0x30>

0800b648 <__any_on>:
 800b648:	f100 0214 	add.w	r2, r0, #20
 800b64c:	6900      	ldr	r0, [r0, #16]
 800b64e:	114b      	asrs	r3, r1, #5
 800b650:	4298      	cmp	r0, r3
 800b652:	b510      	push	{r4, lr}
 800b654:	db11      	blt.n	800b67a <__any_on+0x32>
 800b656:	dd0a      	ble.n	800b66e <__any_on+0x26>
 800b658:	f011 011f 	ands.w	r1, r1, #31
 800b65c:	d007      	beq.n	800b66e <__any_on+0x26>
 800b65e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b662:	fa24 f001 	lsr.w	r0, r4, r1
 800b666:	fa00 f101 	lsl.w	r1, r0, r1
 800b66a:	428c      	cmp	r4, r1
 800b66c:	d10b      	bne.n	800b686 <__any_on+0x3e>
 800b66e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b672:	4293      	cmp	r3, r2
 800b674:	d803      	bhi.n	800b67e <__any_on+0x36>
 800b676:	2000      	movs	r0, #0
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	4603      	mov	r3, r0
 800b67c:	e7f7      	b.n	800b66e <__any_on+0x26>
 800b67e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b682:	2900      	cmp	r1, #0
 800b684:	d0f5      	beq.n	800b672 <__any_on+0x2a>
 800b686:	2001      	movs	r0, #1
 800b688:	e7f6      	b.n	800b678 <__any_on+0x30>

0800b68a <_calloc_r>:
 800b68a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68c:	fba1 2402 	umull	r2, r4, r1, r2
 800b690:	b94c      	cbnz	r4, 800b6a6 <_calloc_r+0x1c>
 800b692:	4611      	mov	r1, r2
 800b694:	9201      	str	r2, [sp, #4]
 800b696:	f000 f87b 	bl	800b790 <_malloc_r>
 800b69a:	9a01      	ldr	r2, [sp, #4]
 800b69c:	4605      	mov	r5, r0
 800b69e:	b930      	cbnz	r0, 800b6ae <_calloc_r+0x24>
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	b003      	add	sp, #12
 800b6a4:	bd30      	pop	{r4, r5, pc}
 800b6a6:	220c      	movs	r2, #12
 800b6a8:	6002      	str	r2, [r0, #0]
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	e7f8      	b.n	800b6a0 <_calloc_r+0x16>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	f7fc f854 	bl	800775c <memset>
 800b6b4:	e7f4      	b.n	800b6a0 <_calloc_r+0x16>
	...

0800b6b8 <_free_r>:
 800b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	d044      	beq.n	800b748 <_free_r+0x90>
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	9001      	str	r0, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ca:	bfb8      	it	lt
 800b6cc:	18e4      	addlt	r4, r4, r3
 800b6ce:	f000 fca7 	bl	800c020 <__malloc_lock>
 800b6d2:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <_free_r+0x94>)
 800b6d4:	9801      	ldr	r0, [sp, #4]
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	b933      	cbnz	r3, 800b6e8 <_free_r+0x30>
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	b003      	add	sp, #12
 800b6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6e4:	f000 bca2 	b.w	800c02c <__malloc_unlock>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d908      	bls.n	800b6fe <_free_r+0x46>
 800b6ec:	6825      	ldr	r5, [r4, #0]
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf01      	itttt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	e7ed      	b.n	800b6da <_free_r+0x22>
 800b6fe:	461a      	mov	r2, r3
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b10b      	cbz	r3, 800b708 <_free_r+0x50>
 800b704:	42a3      	cmp	r3, r4
 800b706:	d9fa      	bls.n	800b6fe <_free_r+0x46>
 800b708:	6811      	ldr	r1, [r2, #0]
 800b70a:	1855      	adds	r5, r2, r1
 800b70c:	42a5      	cmp	r5, r4
 800b70e:	d10b      	bne.n	800b728 <_free_r+0x70>
 800b710:	6824      	ldr	r4, [r4, #0]
 800b712:	4421      	add	r1, r4
 800b714:	1854      	adds	r4, r2, r1
 800b716:	42a3      	cmp	r3, r4
 800b718:	6011      	str	r1, [r2, #0]
 800b71a:	d1e0      	bne.n	800b6de <_free_r+0x26>
 800b71c:	681c      	ldr	r4, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	6053      	str	r3, [r2, #4]
 800b722:	4421      	add	r1, r4
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	e7da      	b.n	800b6de <_free_r+0x26>
 800b728:	d902      	bls.n	800b730 <_free_r+0x78>
 800b72a:	230c      	movs	r3, #12
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	e7d6      	b.n	800b6de <_free_r+0x26>
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	1961      	adds	r1, r4, r5
 800b734:	428b      	cmp	r3, r1
 800b736:	bf04      	itt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	bf04      	itt	eq
 800b740:	1949      	addeq	r1, r1, r5
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	6054      	str	r4, [r2, #4]
 800b746:	e7ca      	b.n	800b6de <_free_r+0x26>
 800b748:	b003      	add	sp, #12
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	20000470 	.word	0x20000470

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0e      	ldr	r6, [pc, #56]	; (800b78c <sbrk_aligned+0x3c>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fb4c 	bl	800bdf8 <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fb47 	bl	800bdf8 <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d00a      	beq.n	800b784 <sbrk_aligned+0x34>
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d007      	beq.n	800b788 <sbrk_aligned+0x38>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fb3c 	bl	800bdf8 <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d101      	bne.n	800b788 <sbrk_aligned+0x38>
 800b784:	f04f 34ff 	mov.w	r4, #4294967295
 800b788:	4620      	mov	r0, r4
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	20000474 	.word	0x20000474

0800b790 <_malloc_r>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	1ccd      	adds	r5, r1, #3
 800b796:	f025 0503 	bic.w	r5, r5, #3
 800b79a:	3508      	adds	r5, #8
 800b79c:	2d0c      	cmp	r5, #12
 800b79e:	bf38      	it	cc
 800b7a0:	250c      	movcc	r5, #12
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	db01      	blt.n	800b7ac <_malloc_r+0x1c>
 800b7a8:	42a9      	cmp	r1, r5
 800b7aa:	d905      	bls.n	800b7b8 <_malloc_r+0x28>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	4e2e      	ldr	r6, [pc, #184]	; (800b874 <_malloc_r+0xe4>)
 800b7ba:	f000 fc31 	bl	800c020 <__malloc_lock>
 800b7be:	6833      	ldr	r3, [r6, #0]
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	bb34      	cbnz	r4, 800b812 <_malloc_r+0x82>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7ff ffc2 	bl	800b750 <sbrk_aligned>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	d14d      	bne.n	800b86e <_malloc_r+0xde>
 800b7d2:	6834      	ldr	r4, [r6, #0]
 800b7d4:	4626      	mov	r6, r4
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d140      	bne.n	800b85c <_malloc_r+0xcc>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4638      	mov	r0, r7
 800b7e0:	eb04 0803 	add.w	r8, r4, r3
 800b7e4:	f000 fb08 	bl	800bdf8 <_sbrk_r>
 800b7e8:	4580      	cmp	r8, r0
 800b7ea:	d13a      	bne.n	800b862 <_malloc_r+0xd2>
 800b7ec:	6821      	ldr	r1, [r4, #0]
 800b7ee:	3503      	adds	r5, #3
 800b7f0:	1a6d      	subs	r5, r5, r1
 800b7f2:	f025 0503 	bic.w	r5, r5, #3
 800b7f6:	3508      	adds	r5, #8
 800b7f8:	2d0c      	cmp	r5, #12
 800b7fa:	bf38      	it	cc
 800b7fc:	250c      	movcc	r5, #12
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ffa5 	bl	800b750 <sbrk_aligned>
 800b806:	3001      	adds	r0, #1
 800b808:	d02b      	beq.n	800b862 <_malloc_r+0xd2>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	442b      	add	r3, r5
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e00e      	b.n	800b830 <_malloc_r+0xa0>
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	1b52      	subs	r2, r2, r5
 800b816:	d41e      	bmi.n	800b856 <_malloc_r+0xc6>
 800b818:	2a0b      	cmp	r2, #11
 800b81a:	d916      	bls.n	800b84a <_malloc_r+0xba>
 800b81c:	1961      	adds	r1, r4, r5
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6025      	str	r5, [r4, #0]
 800b822:	bf18      	it	ne
 800b824:	6059      	strne	r1, [r3, #4]
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	bf08      	it	eq
 800b82a:	6031      	streq	r1, [r6, #0]
 800b82c:	5162      	str	r2, [r4, r5]
 800b82e:	604b      	str	r3, [r1, #4]
 800b830:	4638      	mov	r0, r7
 800b832:	f104 060b 	add.w	r6, r4, #11
 800b836:	f000 fbf9 	bl	800c02c <__malloc_unlock>
 800b83a:	f026 0607 	bic.w	r6, r6, #7
 800b83e:	1d23      	adds	r3, r4, #4
 800b840:	1af2      	subs	r2, r6, r3
 800b842:	d0b6      	beq.n	800b7b2 <_malloc_r+0x22>
 800b844:	1b9b      	subs	r3, r3, r6
 800b846:	50a3      	str	r3, [r4, r2]
 800b848:	e7b3      	b.n	800b7b2 <_malloc_r+0x22>
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	bf0c      	ite	eq
 800b850:	6032      	streq	r2, [r6, #0]
 800b852:	605a      	strne	r2, [r3, #4]
 800b854:	e7ec      	b.n	800b830 <_malloc_r+0xa0>
 800b856:	4623      	mov	r3, r4
 800b858:	6864      	ldr	r4, [r4, #4]
 800b85a:	e7b2      	b.n	800b7c2 <_malloc_r+0x32>
 800b85c:	4634      	mov	r4, r6
 800b85e:	6876      	ldr	r6, [r6, #4]
 800b860:	e7b9      	b.n	800b7d6 <_malloc_r+0x46>
 800b862:	230c      	movs	r3, #12
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4638      	mov	r0, r7
 800b868:	f000 fbe0 	bl	800c02c <__malloc_unlock>
 800b86c:	e7a1      	b.n	800b7b2 <_malloc_r+0x22>
 800b86e:	6025      	str	r5, [r4, #0]
 800b870:	e7de      	b.n	800b830 <_malloc_r+0xa0>
 800b872:	bf00      	nop
 800b874:	20000470 	.word	0x20000470

0800b878 <__ssputs_r>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	688e      	ldr	r6, [r1, #8]
 800b87e:	429e      	cmp	r6, r3
 800b880:	4682      	mov	sl, r0
 800b882:	460c      	mov	r4, r1
 800b884:	4690      	mov	r8, r2
 800b886:	461f      	mov	r7, r3
 800b888:	d838      	bhi.n	800b8fc <__ssputs_r+0x84>
 800b88a:	898a      	ldrh	r2, [r1, #12]
 800b88c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b890:	d032      	beq.n	800b8f8 <__ssputs_r+0x80>
 800b892:	6825      	ldr	r5, [r4, #0]
 800b894:	6909      	ldr	r1, [r1, #16]
 800b896:	eba5 0901 	sub.w	r9, r5, r1
 800b89a:	6965      	ldr	r5, [r4, #20]
 800b89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	444b      	add	r3, r9
 800b8a8:	106d      	asrs	r5, r5, #1
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	bf38      	it	cc
 800b8ae:	461d      	movcc	r5, r3
 800b8b0:	0553      	lsls	r3, r2, #21
 800b8b2:	d531      	bpl.n	800b918 <__ssputs_r+0xa0>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7ff ff6b 	bl	800b790 <_malloc_r>
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	b950      	cbnz	r0, 800b8d4 <__ssputs_r+0x5c>
 800b8be:	230c      	movs	r3, #12
 800b8c0:	f8ca 3000 	str.w	r3, [sl]
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d4:	6921      	ldr	r1, [r4, #16]
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	f7ff fa08 	bl	800acec <memcpy>
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	6126      	str	r6, [r4, #16]
 800b8ea:	6165      	str	r5, [r4, #20]
 800b8ec:	444e      	add	r6, r9
 800b8ee:	eba5 0509 	sub.w	r5, r5, r9
 800b8f2:	6026      	str	r6, [r4, #0]
 800b8f4:	60a5      	str	r5, [r4, #8]
 800b8f6:	463e      	mov	r6, r7
 800b8f8:	42be      	cmp	r6, r7
 800b8fa:	d900      	bls.n	800b8fe <__ssputs_r+0x86>
 800b8fc:	463e      	mov	r6, r7
 800b8fe:	6820      	ldr	r0, [r4, #0]
 800b900:	4632      	mov	r2, r6
 800b902:	4641      	mov	r1, r8
 800b904:	f000 fb72 	bl	800bfec <memmove>
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	1b9b      	subs	r3, r3, r6
 800b90c:	60a3      	str	r3, [r4, #8]
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	4433      	add	r3, r6
 800b912:	6023      	str	r3, [r4, #0]
 800b914:	2000      	movs	r0, #0
 800b916:	e7db      	b.n	800b8d0 <__ssputs_r+0x58>
 800b918:	462a      	mov	r2, r5
 800b91a:	f000 fb8d 	bl	800c038 <_realloc_r>
 800b91e:	4606      	mov	r6, r0
 800b920:	2800      	cmp	r0, #0
 800b922:	d1e1      	bne.n	800b8e8 <__ssputs_r+0x70>
 800b924:	6921      	ldr	r1, [r4, #16]
 800b926:	4650      	mov	r0, sl
 800b928:	f7ff fec6 	bl	800b6b8 <_free_r>
 800b92c:	e7c7      	b.n	800b8be <__ssputs_r+0x46>
	...

0800b930 <_svfiprintf_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	4698      	mov	r8, r3
 800b936:	898b      	ldrh	r3, [r1, #12]
 800b938:	061b      	lsls	r3, r3, #24
 800b93a:	b09d      	sub	sp, #116	; 0x74
 800b93c:	4607      	mov	r7, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	4614      	mov	r4, r2
 800b942:	d50e      	bpl.n	800b962 <_svfiprintf_r+0x32>
 800b944:	690b      	ldr	r3, [r1, #16]
 800b946:	b963      	cbnz	r3, 800b962 <_svfiprintf_r+0x32>
 800b948:	2140      	movs	r1, #64	; 0x40
 800b94a:	f7ff ff21 	bl	800b790 <_malloc_r>
 800b94e:	6028      	str	r0, [r5, #0]
 800b950:	6128      	str	r0, [r5, #16]
 800b952:	b920      	cbnz	r0, 800b95e <_svfiprintf_r+0x2e>
 800b954:	230c      	movs	r3, #12
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	f04f 30ff 	mov.w	r0, #4294967295
 800b95c:	e0d1      	b.n	800bb02 <_svfiprintf_r+0x1d2>
 800b95e:	2340      	movs	r3, #64	; 0x40
 800b960:	616b      	str	r3, [r5, #20]
 800b962:	2300      	movs	r3, #0
 800b964:	9309      	str	r3, [sp, #36]	; 0x24
 800b966:	2320      	movs	r3, #32
 800b968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b970:	2330      	movs	r3, #48	; 0x30
 800b972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb1c <_svfiprintf_r+0x1ec>
 800b976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b97a:	f04f 0901 	mov.w	r9, #1
 800b97e:	4623      	mov	r3, r4
 800b980:	469a      	mov	sl, r3
 800b982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b986:	b10a      	cbz	r2, 800b98c <_svfiprintf_r+0x5c>
 800b988:	2a25      	cmp	r2, #37	; 0x25
 800b98a:	d1f9      	bne.n	800b980 <_svfiprintf_r+0x50>
 800b98c:	ebba 0b04 	subs.w	fp, sl, r4
 800b990:	d00b      	beq.n	800b9aa <_svfiprintf_r+0x7a>
 800b992:	465b      	mov	r3, fp
 800b994:	4622      	mov	r2, r4
 800b996:	4629      	mov	r1, r5
 800b998:	4638      	mov	r0, r7
 800b99a:	f7ff ff6d 	bl	800b878 <__ssputs_r>
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f000 80aa 	beq.w	800baf8 <_svfiprintf_r+0x1c8>
 800b9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a6:	445a      	add	r2, fp
 800b9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 80a2 	beq.w	800baf8 <_svfiprintf_r+0x1c8>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9be:	f10a 0a01 	add.w	sl, sl, #1
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	9307      	str	r3, [sp, #28]
 800b9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b9cc:	4654      	mov	r4, sl
 800b9ce:	2205      	movs	r2, #5
 800b9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d4:	4851      	ldr	r0, [pc, #324]	; (800bb1c <_svfiprintf_r+0x1ec>)
 800b9d6:	f7f4 fc03 	bl	80001e0 <memchr>
 800b9da:	9a04      	ldr	r2, [sp, #16]
 800b9dc:	b9d8      	cbnz	r0, 800ba16 <_svfiprintf_r+0xe6>
 800b9de:	06d0      	lsls	r0, r2, #27
 800b9e0:	bf44      	itt	mi
 800b9e2:	2320      	movmi	r3, #32
 800b9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9e8:	0711      	lsls	r1, r2, #28
 800b9ea:	bf44      	itt	mi
 800b9ec:	232b      	movmi	r3, #43	; 0x2b
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f8:	d015      	beq.n	800ba26 <_svfiprintf_r+0xf6>
 800b9fa:	9a07      	ldr	r2, [sp, #28]
 800b9fc:	4654      	mov	r4, sl
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f04f 0c0a 	mov.w	ip, #10
 800ba04:	4621      	mov	r1, r4
 800ba06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0a:	3b30      	subs	r3, #48	; 0x30
 800ba0c:	2b09      	cmp	r3, #9
 800ba0e:	d94e      	bls.n	800baae <_svfiprintf_r+0x17e>
 800ba10:	b1b0      	cbz	r0, 800ba40 <_svfiprintf_r+0x110>
 800ba12:	9207      	str	r2, [sp, #28]
 800ba14:	e014      	b.n	800ba40 <_svfiprintf_r+0x110>
 800ba16:	eba0 0308 	sub.w	r3, r0, r8
 800ba1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	46a2      	mov	sl, r4
 800ba24:	e7d2      	b.n	800b9cc <_svfiprintf_r+0x9c>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	1d19      	adds	r1, r3, #4
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	9103      	str	r1, [sp, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfbb      	ittet	lt
 800ba32:	425b      	neglt	r3, r3
 800ba34:	f042 0202 	orrlt.w	r2, r2, #2
 800ba38:	9307      	strge	r3, [sp, #28]
 800ba3a:	9307      	strlt	r3, [sp, #28]
 800ba3c:	bfb8      	it	lt
 800ba3e:	9204      	strlt	r2, [sp, #16]
 800ba40:	7823      	ldrb	r3, [r4, #0]
 800ba42:	2b2e      	cmp	r3, #46	; 0x2e
 800ba44:	d10c      	bne.n	800ba60 <_svfiprintf_r+0x130>
 800ba46:	7863      	ldrb	r3, [r4, #1]
 800ba48:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4a:	d135      	bne.n	800bab8 <_svfiprintf_r+0x188>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	9203      	str	r2, [sp, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfb8      	it	lt
 800ba58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5c:	3402      	adds	r4, #2
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb2c <_svfiprintf_r+0x1fc>
 800ba64:	7821      	ldrb	r1, [r4, #0]
 800ba66:	2203      	movs	r2, #3
 800ba68:	4650      	mov	r0, sl
 800ba6a:	f7f4 fbb9 	bl	80001e0 <memchr>
 800ba6e:	b140      	cbz	r0, 800ba82 <_svfiprintf_r+0x152>
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	eba0 000a 	sub.w	r0, r0, sl
 800ba76:	fa03 f000 	lsl.w	r0, r3, r0
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	4303      	orrs	r3, r0
 800ba7e:	3401      	adds	r4, #1
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4826      	ldr	r0, [pc, #152]	; (800bb20 <_svfiprintf_r+0x1f0>)
 800ba88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	f7f4 fba7 	bl	80001e0 <memchr>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d038      	beq.n	800bb08 <_svfiprintf_r+0x1d8>
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <_svfiprintf_r+0x1f4>)
 800ba98:	bb1b      	cbnz	r3, 800bae2 <_svfiprintf_r+0x1b2>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	3308      	adds	r3, #8
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	4433      	add	r3, r6
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	e767      	b.n	800b97e <_svfiprintf_r+0x4e>
 800baae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab2:	460c      	mov	r4, r1
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7a5      	b.n	800ba04 <_svfiprintf_r+0xd4>
 800bab8:	2300      	movs	r3, #0
 800baba:	3401      	adds	r4, #1
 800babc:	9305      	str	r3, [sp, #20]
 800babe:	4619      	mov	r1, r3
 800bac0:	f04f 0c0a 	mov.w	ip, #10
 800bac4:	4620      	mov	r0, r4
 800bac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baca:	3a30      	subs	r2, #48	; 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d903      	bls.n	800bad8 <_svfiprintf_r+0x1a8>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c5      	beq.n	800ba60 <_svfiprintf_r+0x130>
 800bad4:	9105      	str	r1, [sp, #20]
 800bad6:	e7c3      	b.n	800ba60 <_svfiprintf_r+0x130>
 800bad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800badc:	4604      	mov	r4, r0
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f0      	b.n	800bac4 <_svfiprintf_r+0x194>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	462a      	mov	r2, r5
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <_svfiprintf_r+0x1f8>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	4638      	mov	r0, r7
 800baee:	f7fb fedd 	bl	80078ac <_printf_float>
 800baf2:	1c42      	adds	r2, r0, #1
 800baf4:	4606      	mov	r6, r0
 800baf6:	d1d6      	bne.n	800baa6 <_svfiprintf_r+0x176>
 800baf8:	89ab      	ldrh	r3, [r5, #12]
 800bafa:	065b      	lsls	r3, r3, #25
 800bafc:	f53f af2c 	bmi.w	800b958 <_svfiprintf_r+0x28>
 800bb00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb02:	b01d      	add	sp, #116	; 0x74
 800bb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb08:	ab03      	add	r3, sp, #12
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	462a      	mov	r2, r5
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <_svfiprintf_r+0x1f8>)
 800bb10:	a904      	add	r1, sp, #16
 800bb12:	4638      	mov	r0, r7
 800bb14:	f7fc f96e 	bl	8007df4 <_printf_i>
 800bb18:	e7eb      	b.n	800baf2 <_svfiprintf_r+0x1c2>
 800bb1a:	bf00      	nop
 800bb1c:	0800c67c 	.word	0x0800c67c
 800bb20:	0800c686 	.word	0x0800c686
 800bb24:	080078ad 	.word	0x080078ad
 800bb28:	0800b879 	.word	0x0800b879
 800bb2c:	0800c682 	.word	0x0800c682

0800bb30 <__sfputc_r>:
 800bb30:	6893      	ldr	r3, [r2, #8]
 800bb32:	3b01      	subs	r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	b410      	push	{r4}
 800bb38:	6093      	str	r3, [r2, #8]
 800bb3a:	da08      	bge.n	800bb4e <__sfputc_r+0x1e>
 800bb3c:	6994      	ldr	r4, [r2, #24]
 800bb3e:	42a3      	cmp	r3, r4
 800bb40:	db01      	blt.n	800bb46 <__sfputc_r+0x16>
 800bb42:	290a      	cmp	r1, #10
 800bb44:	d103      	bne.n	800bb4e <__sfputc_r+0x1e>
 800bb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4a:	f7fd bbe9 	b.w	8009320 <__swbuf_r>
 800bb4e:	6813      	ldr	r3, [r2, #0]
 800bb50:	1c58      	adds	r0, r3, #1
 800bb52:	6010      	str	r0, [r2, #0]
 800bb54:	7019      	strb	r1, [r3, #0]
 800bb56:	4608      	mov	r0, r1
 800bb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <__sfputs_r>:
 800bb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4614      	mov	r4, r2
 800bb66:	18d5      	adds	r5, r2, r3
 800bb68:	42ac      	cmp	r4, r5
 800bb6a:	d101      	bne.n	800bb70 <__sfputs_r+0x12>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e007      	b.n	800bb80 <__sfputs_r+0x22>
 800bb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb74:	463a      	mov	r2, r7
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff ffda 	bl	800bb30 <__sfputc_r>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d1f3      	bne.n	800bb68 <__sfputs_r+0xa>
 800bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb84 <_vfiprintf_r>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	460d      	mov	r5, r1
 800bb8a:	b09d      	sub	sp, #116	; 0x74
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	4698      	mov	r8, r3
 800bb90:	4606      	mov	r6, r0
 800bb92:	b118      	cbz	r0, 800bb9c <_vfiprintf_r+0x18>
 800bb94:	6983      	ldr	r3, [r0, #24]
 800bb96:	b90b      	cbnz	r3, 800bb9c <_vfiprintf_r+0x18>
 800bb98:	f7fe fc16 	bl	800a3c8 <__sinit>
 800bb9c:	4b89      	ldr	r3, [pc, #548]	; (800bdc4 <_vfiprintf_r+0x240>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	d11b      	bne.n	800bbda <_vfiprintf_r+0x56>
 800bba2:	6875      	ldr	r5, [r6, #4]
 800bba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb2:	f7ff f81a 	bl	800abea <__retarget_lock_acquire_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	071b      	lsls	r3, r3, #28
 800bbba:	d501      	bpl.n	800bbc0 <_vfiprintf_r+0x3c>
 800bbbc:	692b      	ldr	r3, [r5, #16]
 800bbbe:	b9eb      	cbnz	r3, 800bbfc <_vfiprintf_r+0x78>
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7fd fbfe 	bl	80093c4 <__swsetup_r>
 800bbc8:	b1c0      	cbz	r0, 800bbfc <_vfiprintf_r+0x78>
 800bbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbcc:	07dc      	lsls	r4, r3, #31
 800bbce:	d50e      	bpl.n	800bbee <_vfiprintf_r+0x6a>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	b01d      	add	sp, #116	; 0x74
 800bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbda:	4b7b      	ldr	r3, [pc, #492]	; (800bdc8 <_vfiprintf_r+0x244>)
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d101      	bne.n	800bbe4 <_vfiprintf_r+0x60>
 800bbe0:	68b5      	ldr	r5, [r6, #8]
 800bbe2:	e7df      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbe4:	4b79      	ldr	r3, [pc, #484]	; (800bdcc <_vfiprintf_r+0x248>)
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68f5      	ldreq	r5, [r6, #12]
 800bbec:	e7da      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4ed      	bmi.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f7fe fff9 	bl	800abec <__retarget_lock_release_recursive>
 800bbfa:	e7e9      	b.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	2320      	movs	r3, #32
 800bc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	2330      	movs	r3, #48	; 0x30
 800bc0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdd0 <_vfiprintf_r+0x24c>
 800bc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc14:	f04f 0901 	mov.w	r9, #1
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0xa2>
 800bc22:	2a25      	cmp	r2, #37	; 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x96>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xc0>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ff93 	bl	800bb5e <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80aa 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	; 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80a2 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295
 800bc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc58:	f10a 0a01 	add.w	sl, sl, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc64:	931a      	str	r3, [sp, #104]	; 0x68
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4858      	ldr	r0, [pc, #352]	; (800bdd0 <_vfiprintf_r+0x24c>)
 800bc70:	f7f4 fab6 	bl	80001e0 <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x12c>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	; 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x13c>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	; 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94e      	bls.n	800bd48 <_vfiprintf_r+0x1c4>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x156>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x156>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xe2>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcde:	d10c      	bne.n	800bcfa <_vfiprintf_r+0x176>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	; 0x2a
 800bce4:	d135      	bne.n	800bd52 <_vfiprintf_r+0x1ce>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9203      	str	r2, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf6:	3402      	adds	r4, #2
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde0 <_vfiprintf_r+0x25c>
 800bcfe:	7821      	ldrb	r1, [r4, #0]
 800bd00:	2203      	movs	r2, #3
 800bd02:	4650      	mov	r0, sl
 800bd04:	f7f4 fa6c 	bl	80001e0 <memchr>
 800bd08:	b140      	cbz	r0, 800bd1c <_vfiprintf_r+0x198>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	eba0 000a 	sub.w	r0, r0, sl
 800bd10:	fa03 f000 	lsl.w	r0, r3, r0
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4303      	orrs	r3, r0
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <_vfiprintf_r+0x250>)
 800bd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd26:	2206      	movs	r2, #6
 800bd28:	f7f4 fa5a 	bl	80001e0 <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d03f      	beq.n	800bdb0 <_vfiprintf_r+0x22c>
 800bd30:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <_vfiprintf_r+0x254>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_vfiprintf_r+0x1f8>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	443b      	add	r3, r7
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e767      	b.n	800bc18 <_vfiprintf_r+0x94>
 800bd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7a5      	b.n	800bc9e <_vfiprintf_r+0x11a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	3401      	adds	r4, #1
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f04f 0c0a 	mov.w	ip, #10
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_vfiprintf_r+0x1ee>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c5      	beq.n	800bcfa <_vfiprintf_r+0x176>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c3      	b.n	800bcfa <_vfiprintf_r+0x176>
 800bd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd76:	4604      	mov	r4, r0
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f0      	b.n	800bd5e <_vfiprintf_r+0x1da>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	462a      	mov	r2, r5
 800bd82:	4b16      	ldr	r3, [pc, #88]	; (800bddc <_vfiprintf_r+0x258>)
 800bd84:	a904      	add	r1, sp, #16
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7fb fd90 	bl	80078ac <_printf_float>
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	1c78      	adds	r0, r7, #1
 800bd90:	d1d6      	bne.n	800bd40 <_vfiprintf_r+0x1bc>
 800bd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d405      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd98:	89ab      	ldrh	r3, [r5, #12]
 800bd9a:	059a      	lsls	r2, r3, #22
 800bd9c:	d402      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda0:	f7fe ff24 	bl	800abec <__retarget_lock_release_recursive>
 800bda4:	89ab      	ldrh	r3, [r5, #12]
 800bda6:	065b      	lsls	r3, r3, #25
 800bda8:	f53f af12 	bmi.w	800bbd0 <_vfiprintf_r+0x4c>
 800bdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdae:	e711      	b.n	800bbd4 <_vfiprintf_r+0x50>
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4b09      	ldr	r3, [pc, #36]	; (800bddc <_vfiprintf_r+0x258>)
 800bdb8:	a904      	add	r1, sp, #16
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fc f81a 	bl	8007df4 <_printf_i>
 800bdc0:	e7e4      	b.n	800bd8c <_vfiprintf_r+0x208>
 800bdc2:	bf00      	nop
 800bdc4:	0800c464 	.word	0x0800c464
 800bdc8:	0800c484 	.word	0x0800c484
 800bdcc:	0800c444 	.word	0x0800c444
 800bdd0:	0800c67c 	.word	0x0800c67c
 800bdd4:	0800c686 	.word	0x0800c686
 800bdd8:	080078ad 	.word	0x080078ad
 800bddc:	0800bb5f 	.word	0x0800bb5f
 800bde0:	0800c682 	.word	0x0800c682
 800bde4:	00000000 	.word	0x00000000

0800bde8 <nan>:
 800bde8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdf0 <nan+0x8>
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	7ff80000 	.word	0x7ff80000

0800bdf8 <_sbrk_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d06      	ldr	r5, [pc, #24]	; (800be14 <_sbrk_r+0x1c>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	f7f5 fc6e 	bl	80016e4 <_sbrk>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_sbrk_r+0x1a>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_sbrk_r+0x1a>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	20000478 	.word	0x20000478

0800be18 <__sread>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	460c      	mov	r4, r1
 800be1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be20:	f000 f93a 	bl	800c098 <_read_r>
 800be24:	2800      	cmp	r0, #0
 800be26:	bfab      	itete	ge
 800be28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be2a:	89a3      	ldrhlt	r3, [r4, #12]
 800be2c:	181b      	addge	r3, r3, r0
 800be2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be32:	bfac      	ite	ge
 800be34:	6563      	strge	r3, [r4, #84]	; 0x54
 800be36:	81a3      	strhlt	r3, [r4, #12]
 800be38:	bd10      	pop	{r4, pc}

0800be3a <__swrite>:
 800be3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3e:	461f      	mov	r7, r3
 800be40:	898b      	ldrh	r3, [r1, #12]
 800be42:	05db      	lsls	r3, r3, #23
 800be44:	4605      	mov	r5, r0
 800be46:	460c      	mov	r4, r1
 800be48:	4616      	mov	r6, r2
 800be4a:	d505      	bpl.n	800be58 <__swrite+0x1e>
 800be4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be50:	2302      	movs	r3, #2
 800be52:	2200      	movs	r2, #0
 800be54:	f000 f8b8 	bl	800bfc8 <_lseek_r>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	4632      	mov	r2, r6
 800be66:	463b      	mov	r3, r7
 800be68:	4628      	mov	r0, r5
 800be6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be6e:	f000 b837 	b.w	800bee0 <_write_r>

0800be72 <__sseek>:
 800be72:	b510      	push	{r4, lr}
 800be74:	460c      	mov	r4, r1
 800be76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7a:	f000 f8a5 	bl	800bfc8 <_lseek_r>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	bf15      	itete	ne
 800be84:	6560      	strne	r0, [r4, #84]	; 0x54
 800be86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be8e:	81a3      	strheq	r3, [r4, #12]
 800be90:	bf18      	it	ne
 800be92:	81a3      	strhne	r3, [r4, #12]
 800be94:	bd10      	pop	{r4, pc}

0800be96 <__sclose>:
 800be96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9a:	f000 b851 	b.w	800bf40 <_close_r>

0800be9e <strncmp>:
 800be9e:	b510      	push	{r4, lr}
 800bea0:	b17a      	cbz	r2, 800bec2 <strncmp+0x24>
 800bea2:	4603      	mov	r3, r0
 800bea4:	3901      	subs	r1, #1
 800bea6:	1884      	adds	r4, r0, r2
 800bea8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800beac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800beb0:	4290      	cmp	r0, r2
 800beb2:	d101      	bne.n	800beb8 <strncmp+0x1a>
 800beb4:	42a3      	cmp	r3, r4
 800beb6:	d101      	bne.n	800bebc <strncmp+0x1e>
 800beb8:	1a80      	subs	r0, r0, r2
 800beba:	bd10      	pop	{r4, pc}
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1f3      	bne.n	800bea8 <strncmp+0xa>
 800bec0:	e7fa      	b.n	800beb8 <strncmp+0x1a>
 800bec2:	4610      	mov	r0, r2
 800bec4:	e7f9      	b.n	800beba <strncmp+0x1c>

0800bec6 <__ascii_wctomb>:
 800bec6:	b149      	cbz	r1, 800bedc <__ascii_wctomb+0x16>
 800bec8:	2aff      	cmp	r2, #255	; 0xff
 800beca:	bf85      	ittet	hi
 800becc:	238a      	movhi	r3, #138	; 0x8a
 800bece:	6003      	strhi	r3, [r0, #0]
 800bed0:	700a      	strbls	r2, [r1, #0]
 800bed2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bed6:	bf98      	it	ls
 800bed8:	2001      	movls	r0, #1
 800beda:	4770      	bx	lr
 800bedc:	4608      	mov	r0, r1
 800bede:	4770      	bx	lr

0800bee0 <_write_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d07      	ldr	r5, [pc, #28]	; (800bf00 <_write_r+0x20>)
 800bee4:	4604      	mov	r4, r0
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	2200      	movs	r2, #0
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f5 f8f6 	bl	80010e0 <_write>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_write_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_write_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20000478 	.word	0x20000478

0800bf04 <__assert_func>:
 800bf04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf06:	4614      	mov	r4, r2
 800bf08:	461a      	mov	r2, r3
 800bf0a:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <__assert_func+0x2c>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4605      	mov	r5, r0
 800bf10:	68d8      	ldr	r0, [r3, #12]
 800bf12:	b14c      	cbz	r4, 800bf28 <__assert_func+0x24>
 800bf14:	4b07      	ldr	r3, [pc, #28]	; (800bf34 <__assert_func+0x30>)
 800bf16:	9100      	str	r1, [sp, #0]
 800bf18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf1c:	4906      	ldr	r1, [pc, #24]	; (800bf38 <__assert_func+0x34>)
 800bf1e:	462b      	mov	r3, r5
 800bf20:	f000 f81e 	bl	800bf60 <fiprintf>
 800bf24:	f000 f8ca 	bl	800c0bc <abort>
 800bf28:	4b04      	ldr	r3, [pc, #16]	; (800bf3c <__assert_func+0x38>)
 800bf2a:	461c      	mov	r4, r3
 800bf2c:	e7f3      	b.n	800bf16 <__assert_func+0x12>
 800bf2e:	bf00      	nop
 800bf30:	2000000c 	.word	0x2000000c
 800bf34:	0800c68d 	.word	0x0800c68d
 800bf38:	0800c69a 	.word	0x0800c69a
 800bf3c:	0800c6c8 	.word	0x0800c6c8

0800bf40 <_close_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d06      	ldr	r5, [pc, #24]	; (800bf5c <_close_r+0x1c>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f5 fb95 	bl	800167a <_close>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_close_r+0x1a>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_close_r+0x1a>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	20000478 	.word	0x20000478

0800bf60 <fiprintf>:
 800bf60:	b40e      	push	{r1, r2, r3}
 800bf62:	b503      	push	{r0, r1, lr}
 800bf64:	4601      	mov	r1, r0
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	4805      	ldr	r0, [pc, #20]	; (800bf80 <fiprintf+0x20>)
 800bf6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6e:	6800      	ldr	r0, [r0, #0]
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	f7ff fe07 	bl	800bb84 <_vfiprintf_r>
 800bf76:	b002      	add	sp, #8
 800bf78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf7c:	b003      	add	sp, #12
 800bf7e:	4770      	bx	lr
 800bf80:	2000000c 	.word	0x2000000c

0800bf84 <_fstat_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	; (800bfa4 <_fstat_r+0x20>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f7f5 fb7e 	bl	8001692 <_fstat>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d102      	bne.n	800bfa0 <_fstat_r+0x1c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	b103      	cbz	r3, 800bfa0 <_fstat_r+0x1c>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000478 	.word	0x20000478

0800bfa8 <_isatty_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d06      	ldr	r5, [pc, #24]	; (800bfc4 <_isatty_r+0x1c>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	f7f5 fb7d 	bl	80016b2 <_isatty>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_isatty_r+0x1a>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_isatty_r+0x1a>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20000478 	.word	0x20000478

0800bfc8 <_lseek_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d07      	ldr	r5, [pc, #28]	; (800bfe8 <_lseek_r+0x20>)
 800bfcc:	4604      	mov	r4, r0
 800bfce:	4608      	mov	r0, r1
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	602a      	str	r2, [r5, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f7f5 fb76 	bl	80016c8 <_lseek>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_lseek_r+0x1e>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_lseek_r+0x1e>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	20000478 	.word	0x20000478

0800bfec <memmove>:
 800bfec:	4288      	cmp	r0, r1
 800bfee:	b510      	push	{r4, lr}
 800bff0:	eb01 0402 	add.w	r4, r1, r2
 800bff4:	d902      	bls.n	800bffc <memmove+0x10>
 800bff6:	4284      	cmp	r4, r0
 800bff8:	4623      	mov	r3, r4
 800bffa:	d807      	bhi.n	800c00c <memmove+0x20>
 800bffc:	1e43      	subs	r3, r0, #1
 800bffe:	42a1      	cmp	r1, r4
 800c000:	d008      	beq.n	800c014 <memmove+0x28>
 800c002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c00a:	e7f8      	b.n	800bffe <memmove+0x12>
 800c00c:	4402      	add	r2, r0
 800c00e:	4601      	mov	r1, r0
 800c010:	428a      	cmp	r2, r1
 800c012:	d100      	bne.n	800c016 <memmove+0x2a>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c01e:	e7f7      	b.n	800c010 <memmove+0x24>

0800c020 <__malloc_lock>:
 800c020:	4801      	ldr	r0, [pc, #4]	; (800c028 <__malloc_lock+0x8>)
 800c022:	f7fe bde2 	b.w	800abea <__retarget_lock_acquire_recursive>
 800c026:	bf00      	nop
 800c028:	2000046c 	.word	0x2000046c

0800c02c <__malloc_unlock>:
 800c02c:	4801      	ldr	r0, [pc, #4]	; (800c034 <__malloc_unlock+0x8>)
 800c02e:	f7fe bddd 	b.w	800abec <__retarget_lock_release_recursive>
 800c032:	bf00      	nop
 800c034:	2000046c 	.word	0x2000046c

0800c038 <_realloc_r>:
 800c038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03c:	4680      	mov	r8, r0
 800c03e:	4614      	mov	r4, r2
 800c040:	460e      	mov	r6, r1
 800c042:	b921      	cbnz	r1, 800c04e <_realloc_r+0x16>
 800c044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	4611      	mov	r1, r2
 800c04a:	f7ff bba1 	b.w	800b790 <_malloc_r>
 800c04e:	b92a      	cbnz	r2, 800c05c <_realloc_r+0x24>
 800c050:	f7ff fb32 	bl	800b6b8 <_free_r>
 800c054:	4625      	mov	r5, r4
 800c056:	4628      	mov	r0, r5
 800c058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c05c:	f000 f835 	bl	800c0ca <_malloc_usable_size_r>
 800c060:	4284      	cmp	r4, r0
 800c062:	4607      	mov	r7, r0
 800c064:	d802      	bhi.n	800c06c <_realloc_r+0x34>
 800c066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c06a:	d812      	bhi.n	800c092 <_realloc_r+0x5a>
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff fb8e 	bl	800b790 <_malloc_r>
 800c074:	4605      	mov	r5, r0
 800c076:	2800      	cmp	r0, #0
 800c078:	d0ed      	beq.n	800c056 <_realloc_r+0x1e>
 800c07a:	42bc      	cmp	r4, r7
 800c07c:	4622      	mov	r2, r4
 800c07e:	4631      	mov	r1, r6
 800c080:	bf28      	it	cs
 800c082:	463a      	movcs	r2, r7
 800c084:	f7fe fe32 	bl	800acec <memcpy>
 800c088:	4631      	mov	r1, r6
 800c08a:	4640      	mov	r0, r8
 800c08c:	f7ff fb14 	bl	800b6b8 <_free_r>
 800c090:	e7e1      	b.n	800c056 <_realloc_r+0x1e>
 800c092:	4635      	mov	r5, r6
 800c094:	e7df      	b.n	800c056 <_realloc_r+0x1e>
	...

0800c098 <_read_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d07      	ldr	r5, [pc, #28]	; (800c0b8 <_read_r+0x20>)
 800c09c:	4604      	mov	r4, r0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	602a      	str	r2, [r5, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f7f5 faca 	bl	8001640 <_read>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_read_r+0x1e>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_read_r+0x1e>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	20000478 	.word	0x20000478

0800c0bc <abort>:
 800c0bc:	b508      	push	{r3, lr}
 800c0be:	2006      	movs	r0, #6
 800c0c0:	f000 f834 	bl	800c12c <raise>
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	f7f5 fab1 	bl	800162c <_exit>

0800c0ca <_malloc_usable_size_r>:
 800c0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ce:	1f18      	subs	r0, r3, #4
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bfbc      	itt	lt
 800c0d4:	580b      	ldrlt	r3, [r1, r0]
 800c0d6:	18c0      	addlt	r0, r0, r3
 800c0d8:	4770      	bx	lr

0800c0da <_raise_r>:
 800c0da:	291f      	cmp	r1, #31
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4604      	mov	r4, r0
 800c0e0:	460d      	mov	r5, r1
 800c0e2:	d904      	bls.n	800c0ee <_raise_r+0x14>
 800c0e4:	2316      	movs	r3, #22
 800c0e6:	6003      	str	r3, [r0, #0]
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0f0:	b112      	cbz	r2, 800c0f8 <_raise_r+0x1e>
 800c0f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0f6:	b94b      	cbnz	r3, 800c10c <_raise_r+0x32>
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 f831 	bl	800c160 <_getpid_r>
 800c0fe:	462a      	mov	r2, r5
 800c100:	4601      	mov	r1, r0
 800c102:	4620      	mov	r0, r4
 800c104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c108:	f000 b818 	b.w	800c13c <_kill_r>
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d00a      	beq.n	800c126 <_raise_r+0x4c>
 800c110:	1c59      	adds	r1, r3, #1
 800c112:	d103      	bne.n	800c11c <_raise_r+0x42>
 800c114:	2316      	movs	r3, #22
 800c116:	6003      	str	r3, [r0, #0]
 800c118:	2001      	movs	r0, #1
 800c11a:	e7e7      	b.n	800c0ec <_raise_r+0x12>
 800c11c:	2400      	movs	r4, #0
 800c11e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c122:	4628      	mov	r0, r5
 800c124:	4798      	blx	r3
 800c126:	2000      	movs	r0, #0
 800c128:	e7e0      	b.n	800c0ec <_raise_r+0x12>
	...

0800c12c <raise>:
 800c12c:	4b02      	ldr	r3, [pc, #8]	; (800c138 <raise+0xc>)
 800c12e:	4601      	mov	r1, r0
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f7ff bfd2 	b.w	800c0da <_raise_r>
 800c136:	bf00      	nop
 800c138:	2000000c 	.word	0x2000000c

0800c13c <_kill_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	; (800c15c <_kill_r+0x20>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	4611      	mov	r1, r2
 800c148:	602b      	str	r3, [r5, #0]
 800c14a:	f7f5 fa5f 	bl	800160c <_kill>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	d102      	bne.n	800c158 <_kill_r+0x1c>
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	b103      	cbz	r3, 800c158 <_kill_r+0x1c>
 800c156:	6023      	str	r3, [r4, #0]
 800c158:	bd38      	pop	{r3, r4, r5, pc}
 800c15a:	bf00      	nop
 800c15c:	20000478 	.word	0x20000478

0800c160 <_getpid_r>:
 800c160:	f7f5 ba4c 	b.w	80015fc <_getpid>

0800c164 <_init>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	bf00      	nop
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr

0800c170 <_fini>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr
