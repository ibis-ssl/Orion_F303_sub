
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e25c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012bc  0800e3f0  0800e3f0  0000f3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6ac  0800f6ac  000111dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6ac  0800f6ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6b4  0800f6b4  000111dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6b4  0800f6b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6b8  0800f6b8  000106b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f6bc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111dc  2**0
                  CONTENTS
 10 .bss          0000096c  200001dc  200001dc  000111dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b48  20000b48  000111dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cdc  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d43  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0002ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001084  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c24  00000000  00000000  00031204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e7b7  00000000  00000000  00052e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60da  00000000  00000000  000715df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001376b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d80  00000000  00000000  001376fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3d4 	.word	0x0800e3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800e3d4 	.word	0x0800e3d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 ffa5 	bl	8002cc0 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f001 f8bb 	bl	8001ef6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f002 fdf8 	bl	8003980 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f001 f8ae 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f002 faf8 	bl	80033ac <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f001 f898 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001f8 	.word	0x200001f8

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 ff3c 	bl	8002cc0 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f001 f852 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f002 fa9c 	bl	80033ac <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f001 f83c 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000248 	.word	0x20000248
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f004 f8bb 	bl	8005084 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f004 f888 	bl	8005084 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	@ 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000298 	.word	0x20000298
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 fe8b 	bl	8003cf8 <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 ff85 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106a:	f004 f80b 	bl	8005084 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f003 fda1 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f003 fdba 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  sFilterConfig.FilterIdHigh = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /*
  sFilterConfig.FilterIdHigh = (0x104) << 5;
  sFilterConfig.FilterIdLow = (0x105) << 5;
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;*/
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	@ (80010ec <CAN_Filter_Init+0x5c>)
 80010c4:	f002 ff13 	bl	8003eee <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Filter_Init+0x42>
  {
    Error_Handler();
 80010ce:	f000 ff12 	bl	8001ef6 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010d2:	2102      	movs	r1, #2
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <CAN_Filter_Init+0x5c>)
 80010d6:	f003 fa3f 	bl	8004558 <HAL_CAN_ActivateNotification>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CAN_Filter_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 ff09 	bl	8001ef6 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000029c 	.word	0x2000029c

080010f0 <can_send>:

void can_send(uint32_t can_id, can_msg_buf_t msg)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	e883 0006 	stmia.w	r3, {r1, r2}
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	61bb      	str	r3, [r7, #24]
  can_header.ExtId = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  can_header.RTR = CAN_RTR_DATA;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  can_header.DLC = 8;
 800110a:	2308      	movs	r3, #8
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  can_header.IDE = CAN_ID_STD;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  can_header.TransmitGlobalTime = DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	f107 0118 	add.w	r1, r7, #24
 8001122:	4803      	ldr	r0, [pc, #12]	@ (8001130 <can_send+0x40>)
 8001124:	f002 fff1 	bl	800410a <HAL_CAN_AddTxMessage>
  }
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	@ 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000029c 	.word	0x2000029c

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_DMA_Init+0x38>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <MX_DMA_Init+0x38>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_DMA_Init+0x38>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	200e      	movs	r0, #14
 8001158:	f003 fd2f 	bl	8004bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800115c:	200e      	movs	r0, #14
 800115e:	f003 fd48 	bl	8004bf2 <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <MX_GPIO_Init+0x134>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <MX_GPIO_Init+0x134>)
 800118c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b44      	ldr	r3, [pc, #272]	@ (80012a4 <MX_GPIO_Init+0x134>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b41      	ldr	r3, [pc, #260]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a40      	ldr	r2, [pc, #256]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a3a      	ldr	r2, [pc, #232]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a34      	ldr	r2, [pc, #208]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <MX_GPIO_Init+0x134>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80011ec:	482e      	ldr	r0, [pc, #184]	@ (80012a8 <MX_GPIO_Init+0x138>)
 80011ee:	f004 f8db 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	21c1      	movs	r1, #193	@ 0xc1
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f004 f8d5 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001204:	4829      	ldr	r0, [pc, #164]	@ (80012ac <MX_GPIO_Init+0x13c>)
 8001206:	f004 f8cf 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 800120a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4821      	ldr	r0, [pc, #132]	@ (80012a8 <MX_GPIO_Init+0x138>)
 8001224:	f003 ff2e 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO_4_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 8001228:	23c1      	movs	r3, #193	@ 0xc1
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001242:	f003 ff1f 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_3_Pin SW_1_Pin */
  GPIO_InitStruct.Pin = SW_3_Pin|SW_1_Pin;
 8001246:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125e:	f003 ff11 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_2_Pin SW_0_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 8001262:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_GPIO_Init+0x13c>)
 8001278:	f003 ff04 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHOTO_0_Pin PHOTO_1_Pin EX_GPIO_3_Pin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 800127c:	f246 0340 	movw	r3, #24640	@ 0x6040
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_GPIO_Init+0x13c>)
 8001296:	f003 fef5 	bl	8005084 <HAL_GPIO_Init>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000400 	.word	0x48000400

080012b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <MX_I2C1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <MX_I2C1_Init+0x7c>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ea:	480e      	ldr	r0, [pc, #56]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012ec:	f004 f874 	bl	80053d8 <HAL_I2C_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f6:	f000 fdfe 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012fe:	f004 fc89 	bl	8005c14 <HAL_I2CEx_ConfigAnalogFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 fdf5 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_I2C1_Init+0x74>)
 8001310:	f004 fccb 	bl	8005caa <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 fdec 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002c4 	.word	0x200002c4
 8001328:	40005400 	.word	0x40005400
 800132c:	2000090e 	.word	0x2000090e

08001330 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_I2C_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d128      	bne.n	80013a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137c:	2304      	movs	r3, #4
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <HAL_I2C_MspInit+0x84>)
 8001388:	f003 fe7c 	bl	8005084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001396:	61d3      	str	r3, [r2, #28]
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <lcdInit>:
#define LCD_LINE_0 (0)
#define LCD_LINE_1 (22)
#define LCD_LINE_2 (44)

void lcdInit(I2C_HandleTypeDef * i2ch)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	@ 0x40
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  ssd1306_Init(i2ch);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fdb5 	bl	8001f30 <ssd1306_Init>
  ssd1306_SetCursor(0, LCD_LINE_0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2000      	movs	r0, #0
 80013ca:	f001 f82d 	bl	8002428 <ssd1306_SetCursor>
  char buf[50] = {0};
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2232      	movs	r2, #50	@ 0x32
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f009 fc1d 	bl	800ac16 <memset>
  sprintf(buf, "OrionSub V4");
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	491a      	ldr	r1, [pc, #104]	@ (800144c <lcdInit+0x94>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 fbb2 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <lcdInit+0x98>)
 80013ea:	f107 000c 	add.w	r0, r7, #12
 80013ee:	2301      	movs	r3, #1
 80013f0:	ca06      	ldmia	r2, {r1, r2}
 80013f2:	f000 fff3 	bl	80023dc <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_1);
 80013f6:	2116      	movs	r1, #22
 80013f8:	2000      	movs	r0, #0
 80013fa:	f001 f815 	bl	8002428 <ssd1306_SetCursor>
  sprintf(buf, "%s", __DATE__);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <lcdInit+0x9c>)
 8001404:	4914      	ldr	r1, [pc, #80]	@ (8001458 <lcdInit+0xa0>)
 8001406:	4618      	mov	r0, r3
 8001408:	f009 fba0 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 800140c:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <lcdInit+0x98>)
 800140e:	f107 000c 	add.w	r0, r7, #12
 8001412:	2301      	movs	r3, #1
 8001414:	ca06      	ldmia	r2, {r1, r2}
 8001416:	f000 ffe1 	bl	80023dc <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_2);
 800141a:	212c      	movs	r1, #44	@ 0x2c
 800141c:	2000      	movs	r0, #0
 800141e:	f001 f803 	bl	8002428 <ssd1306_SetCursor>
  sprintf(buf, "%s", __TIME__);
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <lcdInit+0xa4>)
 8001428:	490b      	ldr	r1, [pc, #44]	@ (8001458 <lcdInit+0xa0>)
 800142a:	4618      	mov	r0, r3
 800142c:	f009 fb8e 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 8001430:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <lcdInit+0x98>)
 8001432:	f107 000c 	add.w	r0, r7, #12
 8001436:	2301      	movs	r3, #1
 8001438:	ca06      	ldmia	r2, {r1, r2}
 800143a:	f000 ffcf 	bl	80023dc <ssd1306_WriteString>

  ssd1306_UpdateScreen(i2ch);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 feba 	bl	80021b8 <ssd1306_UpdateScreen>
}
 8001444:	bf00      	nop
 8001446:	3740      	adds	r7, #64	@ 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0800e3f0 	.word	0x0800e3f0
 8001450:	20000000 	.word	0x20000000
 8001454:	0800e3fc 	.word	0x0800e3fc
 8001458:	0800e408 	.word	0x0800e408
 800145c:	0800e40c 	.word	0x0800e40c

08001460 <lcdPrint>:

void lcdPrint(I2C_HandleTypeDef * i2ch, float batt_v, int can_rx, int ball_0, int ball_1)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	af02      	add	r7, sp, #8
 8001466:	6178      	str	r0, [r7, #20]
 8001468:	ed87 0a04 	vstr	s0, [r7, #16]
 800146c:	60f9      	str	r1, [r7, #12]
 800146e:	60ba      	str	r2, [r7, #8]
 8001470:	607b      	str	r3, [r7, #4]
  ssd1306_Fill(Black);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fe7c 	bl	8002170 <ssd1306_Fill>
  char buf[50] = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2232      	movs	r2, #50	@ 0x32
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f009 fbc8 	bl	800ac16 <memset>

  ssd1306_SetCursor(0, LCD_LINE_0);
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f000 ffcd 	bl	8002428 <ssd1306_SetCursor>
  sprintf(buf, "%3.1fV %3d", batt_v, can_rx);
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f7ff f85a 	bl	8000548 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	f107 001c 	add.w	r0, r7, #28
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	4919      	ldr	r1, [pc, #100]	@ (8001508 <lcdPrint+0xa8>)
 80014a2:	f009 fb53 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014a6:	4a19      	ldr	r2, [pc, #100]	@ (800150c <lcdPrint+0xac>)
 80014a8:	f107 001c 	add.w	r0, r7, #28
 80014ac:	2301      	movs	r3, #1
 80014ae:	ca06      	ldmia	r2, {r1, r2}
 80014b0:	f000 ff94 	bl	80023dc <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_1);
 80014b4:	2116      	movs	r1, #22
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 ffb6 	bl	8002428 <ssd1306_SetCursor>
  sprintf(buf, "%+4d %+4d", ball_0, ball_1);
 80014bc:	f107 001c 	add.w	r0, r7, #28
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4912      	ldr	r1, [pc, #72]	@ (8001510 <lcdPrint+0xb0>)
 80014c6:	f009 fb41 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <lcdPrint+0xac>)
 80014cc:	f107 001c 	add.w	r0, r7, #28
 80014d0:	2301      	movs	r3, #1
 80014d2:	ca06      	ldmia	r2, {r1, r2}
 80014d4:	f000 ff82 	bl	80023dc <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_2);
 80014d8:	212c      	movs	r1, #44	@ 0x2c
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 ffa4 	bl	8002428 <ssd1306_SetCursor>
  sprintf(buf, "push4update");
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	490b      	ldr	r1, [pc, #44]	@ (8001514 <lcdPrint+0xb4>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f009 fb30 	bl	800ab4c <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014ec:	4a07      	ldr	r2, [pc, #28]	@ (800150c <lcdPrint+0xac>)
 80014ee:	f107 001c 	add.w	r0, r7, #28
 80014f2:	2301      	movs	r3, #1
 80014f4:	ca06      	ldmia	r2, {r1, r2}
 80014f6:	f000 ff71 	bl	80023dc <ssd1306_WriteString>

  ssd1306_UpdateScreen(i2ch);
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f000 fe5c 	bl	80021b8 <ssd1306_UpdateScreen>
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	@ 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800e418 	.word	0x0800e418
 800150c:	20000000 	.word	0x20000000
 8001510:	0800e424 	.word	0x0800e424
 8001514:	0800e430 	.word	0x0800e430

08001518 <parseTelemetryCmt>:
} tlm_msg;
volatile int16_t tmp = 0;
volatile uint32_t tlm_rx_idx = 0;

void parseTelemetryCmt(uint8_t rx_data)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  switch (tlm_rx_idx) {
 8001522:	4b5e      	ldr	r3, [pc, #376]	@ (800169c <parseTelemetryCmt+0x184>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b09      	cmp	r3, #9
 8001528:	f200 80ac 	bhi.w	8001684 <parseTelemetryCmt+0x16c>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <parseTelemetryCmt+0x1c>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001577 	.word	0x08001577
 800153c:	0800158f 	.word	0x0800158f
 8001540:	080015b7 	.word	0x080015b7
 8001544:	080015cf 	.word	0x080015cf
 8001548:	080015f7 	.word	0x080015f7
 800154c:	0800160f 	.word	0x0800160f
 8001550:	08001637 	.word	0x08001637
 8001554:	0800164f 	.word	0x0800164f
 8001558:	08001677 	.word	0x08001677
    case 0:
      if (rx_data == 0x2c || rx_data == 0x2d) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001560:	d003      	beq.n	800156a <parseTelemetryCmt+0x52>
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b2d      	cmp	r3, #45	@ 0x2d
 8001566:	f040 8091 	bne.w	800168c <parseTelemetryCmt+0x174>
        tlm_rx_idx++;
 800156a:	4b4c      	ldr	r3, [pc, #304]	@ (800169c <parseTelemetryCmt+0x184>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <parseTelemetryCmt+0x184>)
 8001572:	6013      	str	r3, [r2, #0]
      }
      break;
 8001574:	e08a      	b.n	800168c <parseTelemetryCmt+0x174>
    case 1:
      tmp = rx_data << 8;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001580:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001582:	4b46      	ldr	r3, [pc, #280]	@ (800169c <parseTelemetryCmt+0x184>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a44      	ldr	r2, [pc, #272]	@ (800169c <parseTelemetryCmt+0x184>)
 800158a:	6013      	str	r3, [r2, #0]
      break;
 800158c:	e07f      	b.n	800168e <parseTelemetryCmt+0x176>
    case 2:
      tmp |= rx_data;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <parseTelemetryCmt+0x188>)
 800159e:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_1 = tmp;
 80015a0:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <parseTelemetryCmt+0x188>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b3f      	ldr	r3, [pc, #252]	@ (80016a4 <parseTelemetryCmt+0x18c>)
 80015a8:	805a      	strh	r2, [r3, #2]
      tlm_rx_idx++;
 80015aa:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <parseTelemetryCmt+0x184>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a3a      	ldr	r2, [pc, #232]	@ (800169c <parseTelemetryCmt+0x184>)
 80015b2:	6013      	str	r3, [r2, #0]
      break;
 80015b4:	e06b      	b.n	800168e <parseTelemetryCmt+0x176>

    case 3:
      tmp = rx_data << 8;
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <parseTelemetryCmt+0x188>)
 80015c0:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <parseTelemetryCmt+0x184>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a34      	ldr	r2, [pc, #208]	@ (800169c <parseTelemetryCmt+0x184>)
 80015ca:	6013      	str	r3, [r2, #0]
      break;
 80015cc:	e05f      	b.n	800168e <parseTelemetryCmt+0x176>
    case 4:
      tmp |= rx_data;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b33      	ldr	r3, [pc, #204]	@ (80016a0 <parseTelemetryCmt+0x188>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <parseTelemetryCmt+0x188>)
 80015de:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_2 = tmp;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <parseTelemetryCmt+0x188>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <parseTelemetryCmt+0x18c>)
 80015e8:	809a      	strh	r2, [r3, #4]
      tlm_rx_idx++;
 80015ea:	4b2c      	ldr	r3, [pc, #176]	@ (800169c <parseTelemetryCmt+0x184>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a2a      	ldr	r2, [pc, #168]	@ (800169c <parseTelemetryCmt+0x184>)
 80015f2:	6013      	str	r3, [r2, #0]
      break;
 80015f4:	e04b      	b.n	800168e <parseTelemetryCmt+0x176>

    case 5:
      tmp = rx_data << 8;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001600:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <parseTelemetryCmt+0x184>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a24      	ldr	r2, [pc, #144]	@ (800169c <parseTelemetryCmt+0x184>)
 800160a:	6013      	str	r3, [r2, #0]
      break;
 800160c:	e03f      	b.n	800168e <parseTelemetryCmt+0x176>
    case 6:
      tmp |= rx_data;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <parseTelemetryCmt+0x188>)
 800161e:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_3 = tmp;
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b21a      	sxth	r2, r3
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <parseTelemetryCmt+0x18c>)
 8001628:	80da      	strh	r2, [r3, #6]
      tlm_rx_idx++;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <parseTelemetryCmt+0x184>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <parseTelemetryCmt+0x184>)
 8001632:	6013      	str	r3, [r2, #0]
      break;
 8001634:	e02b      	b.n	800168e <parseTelemetryCmt+0x176>

    case 7:
      tmp = rx_data << 8;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	b21b      	sxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001640:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <parseTelemetryCmt+0x184>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <parseTelemetryCmt+0x184>)
 800164a:	6013      	str	r3, [r2, #0]
      break;
 800164c:	e01f      	b.n	800168e <parseTelemetryCmt+0x176>
    case 8:
      tmp |= rx_data;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <parseTelemetryCmt+0x188>)
 800165e:	801a      	strh	r2, [r3, #0]
      tlm_msg.speed = tmp;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <parseTelemetryCmt+0x188>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <parseTelemetryCmt+0x18c>)
 8001668:	811a      	strh	r2, [r3, #8]
      tlm_rx_idx++;
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <parseTelemetryCmt+0x184>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <parseTelemetryCmt+0x184>)
 8001672:	6013      	str	r3, [r2, #0]
      break;
 8001674:	e00b      	b.n	800168e <parseTelemetryCmt+0x176>

    case 9:
      tlm_msg.sum = rx_data;
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <parseTelemetryCmt+0x18c>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	7293      	strb	r3, [r2, #10]
      tlm_rx_idx = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <parseTelemetryCmt+0x184>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
      break;
 8001682:	e004      	b.n	800168e <parseTelemetryCmt+0x176>

    default:
      tlm_rx_idx = 0;
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <parseTelemetryCmt+0x184>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
      break;
 800168a:	e000      	b.n	800168e <parseTelemetryCmt+0x176>
      break;
 800168c:	bf00      	nop
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000328 	.word	0x20000328
 80016a0:	20000324 	.word	0x20000324
 80016a4:	20000318 	.word	0x20000318

080016a8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char * ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len);  // 2ms
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	4803      	ldr	r0, [pc, #12]	@ (80016cc <_write+0x24>)
 80016be:	f007 f82f 	bl	8008720 <HAL_UART_Transmit_DMA>
  return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200008a4 	.word	0x200008a4

080016d0 <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0}, esc_tlm_buf[ESC_TLM_BUF_SIZE];
volatile bool uart_rx_flag = false, uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0, uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <HAL_UART_RxCpltCallback+0x70>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10d      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x2e>
    uart_rx_flag = true;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_UART_RxCpltCallback+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    uart_rx_cnt++;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_UART_RxCpltCallback+0x78>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <HAL_UART_RxCpltCallback+0x78>)
 80016f0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	4915      	ldr	r1, [pc, #84]	@ (800174c <HAL_UART_RxCpltCallback+0x7c>)
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <HAL_UART_RxCpltCallback+0x80>)
 80016f8:	f006 ffce 	bl	8008698 <HAL_UART_Receive_IT>
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
    uart3_rx_cnt++;
    parseTelemetryCmt(uart3_rx_buf[0]);
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
  }
}
 80016fc:	e01c      	b.n	8001738 <HAL_UART_RxCpltCallback+0x68>
  } else if (huart->Instance == USART3) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <HAL_UART_RxCpltCallback+0x84>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d117      	bne.n	8001738 <HAL_UART_RxCpltCallback+0x68>
    uart3_rx_flag = true;
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_UART_RxCpltCallback+0x88>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_UART_RxCpltCallback+0x8c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001714:	7811      	ldrb	r1, [r2, #0]
 8001716:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <HAL_UART_RxCpltCallback+0x94>)
 8001718:	54d1      	strb	r1, [r2, r3]
    uart3_rx_cnt++;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_UART_RxCpltCallback+0x8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_UART_RxCpltCallback+0x8c>)
 8001722:	6013      	str	r3, [r2, #0]
    parseTelemetryCmt(uart3_rx_buf[0]);
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fef5 	bl	8001518 <parseTelemetryCmt>
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 800172e:	2201      	movs	r2, #1
 8001730:	490b      	ldr	r1, [pc, #44]	@ (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <HAL_UART_RxCpltCallback+0x98>)
 8001734:	f006 ffb0 	bl	8008698 <HAL_UART_Receive_IT>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013800 	.word	0x40013800
 8001744:	200003a8 	.word	0x200003a8
 8001748:	200003ac 	.word	0x200003ac
 800174c:	2000032c 	.word	0x2000032c
 8001750:	200008a4 	.word	0x200008a4
 8001754:	40004800 	.word	0x40004800
 8001758:	200003a9 	.word	0x200003a9
 800175c:	200003b0 	.word	0x200003b0
 8001760:	20000338 	.word	0x20000338
 8001764:	20000344 	.word	0x20000344
 8001768:	2000092c 	.word	0x2000092c

0800176c <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile float serv_angle = 0, dribbler_speed = 0;
volatile int servo_timeout_cnt = 0, dribbler_timeout_cnt = 0;
volatile float battery_voltage = 0;
volatile uint32_t can_rx_cnt = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  can_msg_buf_t can_rx_buf;
  CAN_RxHeaderTypeDef can_rx_header;
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001774:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	2100      	movs	r1, #0
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 fdc8 	bl	8004314 <HAL_CAN_GetRxMessage>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    /* Reception Error */
    Error_Handler();
 800178a:	f000 fbb4 	bl	8001ef6 <Error_Handler>
  }

  can_rx_cnt++;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001796:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800179e:	d018      	beq.n	80017d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80017a4:	d817      	bhi.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 80017a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80017ac:	f240 1205 	movw	r2, #261	@ 0x105
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
      break;

    case 0x300:
      break;
    default:
      break;
 80017b4:	e00f      	b.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
      dribbler_timeout_cnt = 0;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
      dribbler_speed = can_rx_buf.speed;
 80017bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80017c0:	6013      	str	r3, [r2, #0]
      break;
 80017c2:	e009      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      servo_timeout_cnt = 0;
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
      serv_angle = can_rx_buf.speed;
 80017ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017cc:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80017ce:	6013      	str	r3, [r2, #0]
      break;
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 80017d6:	bf00      	nop
  }
}
 80017d8:	bf00      	nop
 80017da:	3730      	adds	r7, #48	@ 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200003c8 	.word	0x200003c8
 80017e4:	200003c0 	.word	0x200003c0
 80017e8:	200003b8 	.word	0x200003b8
 80017ec:	200003bc 	.word	0x200003bc
 80017f0:	200003b4 	.word	0x200003b4
 80017f4:	00000000 	.word	0x00000000

080017f8 <ball_sensor>:

int32_t ball_detect[2] = {0, 0};

void ball_sensor(void)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  bool ball_detected[2];

  switch (ball_detect_process) {
 80017fe:	4b96      	ldr	r3, [pc, #600]	@ (8001a58 <ball_sensor+0x260>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	f000 8091 	beq.w	800192a <ball_sensor+0x132>
 8001808:	2b02      	cmp	r3, #2
 800180a:	f300 810e 	bgt.w	8001a2a <ball_sensor+0x232>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <ball_sensor+0x20>
 8001812:	2b01      	cmp	r3, #1
 8001814:	d02a      	beq.n	800186c <ball_sensor+0x74>
 8001816:	e108      	b.n	8001a2a <ball_sensor+0x232>
    case 0:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181e:	488f      	ldr	r0, [pc, #572]	@ (8001a5c <ball_sensor+0x264>)
 8001820:	f003 fdc2 	bl	80053a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800182a:	488c      	ldr	r0, [pc, #560]	@ (8001a5c <ball_sensor+0x264>)
 800182c:	f003 fdbc 	bl	80053a8 <HAL_GPIO_WritePin>
      adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 8001830:	488b      	ldr	r0, [pc, #556]	@ (8001a60 <ball_sensor+0x268>)
 8001832:	f001 fd3b 	bl	80032ac <HAL_ADC_GetValue>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b8a      	ldr	r3, [pc, #552]	@ (8001a64 <ball_sensor+0x26c>)
 800183c:	601a      	str	r2, [r3, #0]
      ball_detect_process++;
 800183e:	4b86      	ldr	r3, [pc, #536]	@ (8001a58 <ball_sensor+0x260>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a84      	ldr	r2, [pc, #528]	@ (8001a58 <ball_sensor+0x260>)
 8001846:	6013      	str	r3, [r2, #0]

      speed_msg.speed = tlm_msg.speed;
 8001848:	4b87      	ldr	r3, [pc, #540]	@ (8001a68 <ball_sensor+0x270>)
 800184a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <ball_sensor+0x274>)
 8001858:	edc3 7a00 	vstr	s15, [r3]
      can_send(0x204, speed_msg);
 800185c:	4b83      	ldr	r3, [pc, #524]	@ (8001a6c <ball_sensor+0x274>)
 800185e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001862:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8001866:	f7ff fc43 	bl	80010f0 <can_send>
      break;
 800186a:	e0e2      	b.n	8001a32 <ball_sensor+0x23a>

    case 1:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001872:	487a      	ldr	r0, [pc, #488]	@ (8001a5c <ball_sensor+0x264>)
 8001874:	f003 fd98 	bl	80053a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800187e:	4877      	ldr	r0, [pc, #476]	@ (8001a5c <ball_sensor+0x264>)
 8001880:	f003 fd92 	bl	80053a8 <HAL_GPIO_WritePin>

      adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 8001884:	4876      	ldr	r0, [pc, #472]	@ (8001a60 <ball_sensor+0x268>)
 8001886:	f001 fd11 	bl	80032ac <HAL_ADC_GetValue>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b75      	ldr	r3, [pc, #468]	@ (8001a64 <ball_sensor+0x26c>)
 8001890:	605a      	str	r2, [r3, #4]

      ball_detect_process++;
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <ball_sensor+0x260>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a6f      	ldr	r2, [pc, #444]	@ (8001a58 <ball_sensor+0x260>)
 800189a:	6013      	str	r3, [r2, #0]
      battery_voltage = battery_voltage * 0.9 + (HAL_ADC_GetValue(&hadc1) * 36.3 / 4096) * 0.1;
 800189c:	4b74      	ldr	r3, [pc, #464]	@ (8001a70 <ball_sensor+0x278>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	a366      	add	r3, pc, #408	@ (adr r3, 8001a40 <ball_sensor+0x248>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fea4 	bl	80005f8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	486e      	ldr	r0, [pc, #440]	@ (8001a74 <ball_sensor+0x27c>)
 80018ba:	f001 fcf7 	bl	80032ac <HAL_ADC_GetValue>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe1f 	bl	8000504 <__aeabi_ui2d>
 80018c6:	a360      	add	r3, pc, #384	@ (adr r3, 8001a48 <ball_sensor+0x250>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b66      	ldr	r3, [pc, #408]	@ (8001a78 <ball_sensor+0x280>)
 80018de:	f7fe ffb5 	bl	800084c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a359      	add	r3, pc, #356	@ (adr r3, 8001a50 <ball_sensor+0x258>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fcc6 	bl	800028c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f96e 	bl	8000be8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <ball_sensor+0x278>)
 8001910:	6013      	str	r3, [r2, #0]
      voltage_msg.voltage = battery_voltage;
 8001912:	4b57      	ldr	r3, [pc, #348]	@ (8001a70 <ball_sensor+0x278>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a59      	ldr	r2, [pc, #356]	@ (8001a7c <ball_sensor+0x284>)
 8001918:	6013      	str	r3, [r2, #0]
      can_send(0x214, voltage_msg);
 800191a:	4b58      	ldr	r3, [pc, #352]	@ (8001a7c <ball_sensor+0x284>)
 800191c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001920:	f44f 7005 	mov.w	r0, #532	@ 0x214
 8001924:	f7ff fbe4 	bl	80010f0 <can_send>
      break;
 8001928:	e083      	b.n	8001a32 <ball_sensor+0x23a>

    case 2:

      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001930:	484a      	ldr	r0, [pc, #296]	@ (8001a5c <ball_sensor+0x264>)
 8001932:	f003 fd39 	bl	80053a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800193c:	4847      	ldr	r0, [pc, #284]	@ (8001a5c <ball_sensor+0x264>)
 800193e:	f003 fd33 	bl	80053a8 <HAL_GPIO_WritePin>

      adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 8001942:	4847      	ldr	r0, [pc, #284]	@ (8001a60 <ball_sensor+0x268>)
 8001944:	f001 fcb2 	bl	80032ac <HAL_ADC_GetValue>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	4b45      	ldr	r3, [pc, #276]	@ (8001a64 <ball_sensor+0x26c>)
 800194e:	609a      	str	r2, [r3, #8]

      ball_detect[0] = adc_raw[0] - adc_raw[1];
 8001950:	4b44      	ldr	r3, [pc, #272]	@ (8001a64 <ball_sensor+0x26c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b43      	ldr	r3, [pc, #268]	@ (8001a64 <ball_sensor+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a49      	ldr	r2, [pc, #292]	@ (8001a80 <ball_sensor+0x288>)
 800195c:	6013      	str	r3, [r2, #0]
      ball_detect[1] = adc_raw[0] - adc_raw[2];
 800195e:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <ball_sensor+0x26c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <ball_sensor+0x26c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a45      	ldr	r2, [pc, #276]	@ (8001a80 <ball_sensor+0x288>)
 800196a:	6053      	str	r3, [r2, #4]

      if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET) {
 800196c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001970:	483a      	ldr	r0, [pc, #232]	@ (8001a5c <ball_sensor+0x264>)
 8001972:	f003 fd01 	bl	8005378 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <ball_sensor+0x190>
        ball_detect[0] = 0;
 800197c:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <ball_sensor+0x288>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
        ball_detect[1] = 0;
 8001982:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <ball_sensor+0x288>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
      }

      //
      if (ball_detect[1] < BALL_DETECTOR_THRESH) {
 8001988:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <ball_sensor+0x288>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001990:	da08      	bge.n	80019a4 <ball_sensor+0x1ac>
        ball_detected[0] = true;
 8001992:	2301      	movs	r3, #1
 8001994:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2140      	movs	r1, #64	@ 0x40
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f003 fd03 	bl	80053a8 <HAL_GPIO_WritePin>
 80019a2:	e007      	b.n	80019b4 <ball_sensor+0x1bc>
      } else {
        ball_detected[0] = false;
 80019a4:	2300      	movs	r3, #0
 80019a6:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	@ 0x40
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b0:	f003 fcfa 	bl	80053a8 <HAL_GPIO_WritePin>
      }
      if (ball_detect[0] < BALL_DETECTOR_THRESH) {
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <ball_sensor+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019bc:	da08      	bge.n	80019d0 <ball_sensor+0x1d8>
        ball_detected[1] = true;
 80019be:	2301      	movs	r3, #1
 80019c0:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ca:	f003 fced 	bl	80053a8 <HAL_GPIO_WritePin>
 80019ce:	e007      	b.n	80019e0 <ball_sensor+0x1e8>
      } else {
        ball_detected[1] = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2180      	movs	r1, #128	@ 0x80
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019dc:	f003 fce4 	bl	80053a8 <HAL_GPIO_WritePin>
      }

      if (ball_detected[0]) {
 80019e0:	793b      	ldrb	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <ball_sensor+0x1fc>
        ball_msg.data[0] = 1;
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <ball_sensor+0x28c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <ball_sensor+0x28c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	705a      	strb	r2, [r3, #1]
 80019f2:	e00f      	b.n	8001a14 <ball_sensor+0x21c>
      } else if (ball_detected[1]) {
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <ball_sensor+0x210>
        ball_msg.data[0] = 1;
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <ball_sensor+0x28c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 5;
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <ball_sensor+0x28c>)
 8001a02:	2205      	movs	r2, #5
 8001a04:	705a      	strb	r2, [r3, #1]
 8001a06:	e005      	b.n	8001a14 <ball_sensor+0x21c>
      } else {
        ball_msg.data[0] = 0;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <ball_sensor+0x28c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <ball_sensor+0x28c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	705a      	strb	r2, [r3, #1]
      }

      can_send(0x240, ball_msg);
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <ball_sensor+0x28c>)
 8001a16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a1a:	f44f 7010 	mov.w	r0, #576	@ 0x240
 8001a1e:	f7ff fb67 	bl	80010f0 <can_send>

      ball_detect_process = 0;
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <ball_sensor+0x260>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
      break;
 8001a28:	e003      	b.n	8001a32 <ball_sensor+0x23a>

    default:
      ball_detect_process = 0;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <ball_sensor+0x260>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
      break;
 8001a30:	bf00      	nop
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	f3af 8000 	nop.w
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	3feccccc 	.word	0x3feccccc
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	40422666 	.word	0x40422666
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	3fb99999 	.word	0x3fb99999
 8001a58:	200003d4 	.word	0x200003d4
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	20000248 	.word	0x20000248
 8001a64:	200003d8 	.word	0x200003d8
 8001a68:	20000318 	.word	0x20000318
 8001a6c:	200003e4 	.word	0x200003e4
 8001a70:	200003c4 	.word	0x200003c4
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	40b00000 	.word	0x40b00000
 8001a7c:	200003ec 	.word	0x200003ec
 8001a80:	200003cc 	.word	0x200003cc
 8001a84:	200003f4 	.word	0x200003f4

08001a88 <HAL_TIM_PeriodElapsedCallback>:

// 2kHz cycle
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a8c:	b09b      	sub	sp, #108	@ 0x6c
 8001a8e:	af10      	add	r7, sp, #64	@ 0x40
 8001a90:	6278      	str	r0, [r7, #36]	@ 0x24
  static uint32_t print_interval = 0;
  ball_sensor();
 8001a92:	f7ff feb1 	bl	80017f8 <ball_sensor>

  print_interval++;
 8001a96:	4b8d      	ldr	r3, [pc, #564]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	4a8b      	ldr	r2, [pc, #556]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a9e:	6013      	str	r3, [r2, #0]
  if (print_interval >= 200) {
 8001aa0:	4b8a      	ldr	r3, [pc, #552]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001aa6:	f240 810b 	bls.w	8001cc0 <HAL_TIM_PeriodElapsedCallback+0x238>
    print_interval = 0;
 8001aaa:	4b88      	ldr	r3, [pc, #544]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    printf(
 8001ab0:	4b87      	ldr	r3, [pc, #540]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd47 	bl	8000548 <__aeabi_f2d>
 8001aba:	4680      	mov	r8, r0
 8001abc:	4689      	mov	r9, r1
      "\e[0mbatt %4.1f spd %4d Mbx %ld can rx %3ld uart rx %4ld %4ld dribbler %6.3f servo %6.3f timeout %4d %4d ball %+5ld %+5ld %d%d \n", battery_voltage, tlm_msg.speed,
 8001abe:	4b85      	ldr	r3, [pc, #532]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ac0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    printf(
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	4884      	ldr	r0, [pc, #528]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ac8:	f002 fbef 	bl	80042aa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001acc:	61f8      	str	r0, [r7, #28]
 8001ace:	4b83      	ldr	r3, [pc, #524]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	61ba      	str	r2, [r7, #24]
 8001ad4:	4b82      	ldr	r3, [pc, #520]	@ (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	6179      	str	r1, [r7, #20]
 8001ada:	4b82      	ldr	r3, [pc, #520]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001adc:	681c      	ldr	r4, [r3, #0]
 8001ade:	613c      	str	r4, [r7, #16]
 8001ae0:	4b81      	ldr	r3, [pc, #516]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2f 	bl	8000548 <__aeabi_f2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4b7f      	ldr	r3, [pc, #508]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_f2d>
 8001af8:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001afa:	681e      	ldr	r6, [r3, #0]
 8001afc:	60fe      	str	r6, [r7, #12]
 8001afe:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b0c:	685e      	ldr	r6, [r3, #4]
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001b1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8001b20:	960d      	str	r6, [sp, #52]	@ 0x34
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	920c      	str	r2, [sp, #48]	@ 0x30
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001b2a:	68fe      	ldr	r6, [r7, #12]
 8001b2c:	960a      	str	r6, [sp, #40]	@ 0x28
 8001b2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001b32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001b36:	693c      	ldr	r4, [r7, #16]
 8001b38:	9404      	str	r4, [sp, #16]
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	9103      	str	r1, [sp, #12]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	9202      	str	r2, [sp, #8]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	486d      	ldr	r0, [pc, #436]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b50:	f008 ffea 	bl	800ab28 <iprintf>
      HAL_CAN_GetTxMailboxesFreeLevel(&hcan), can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1], uart3_rx_flag,
      uart_rx_flag);

    if (HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_RESET) {
 8001b54:	2108      	movs	r1, #8
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f003 fc0d 	bl	8005378 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0xfa>
      lcdPrint(&hi2c1, battery_voltage, can_rx_cnt, ball_detect[0], ball_detect[1]);
 8001b64:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4b61      	ldr	r3, [pc, #388]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b60      	ldr	r3, [pc, #384]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	4862      	ldr	r0, [pc, #392]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b7e:	f7ff fc6f 	bl	8001460 <lcdPrint>
    }

    // TEL (LED0,PA3)
    if (uart3_rx_cnt > 0) {
 8001b82:	4b58      	ldr	r3, [pc, #352]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x110>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b90:	485e      	ldr	r0, [pc, #376]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b92:	f003 fc09 	bl	80053a8 <HAL_GPIO_WritePin>
 8001b96:	e005      	b.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x11c>
    } else {
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b9e:	485b      	ldr	r0, [pc, #364]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ba0:	f003 fc02 	bl	80053a8 <HAL_GPIO_WritePin>
    }

    // RX (can rx,LED2,PA5)
    if (can_rx_cnt > 0) {
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x132>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb2:	4856      	ldr	r0, [pc, #344]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bb4:	f003 fbf8 	bl	80053a8 <HAL_GPIO_WritePin>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x13e>
    } else {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc0:	4852      	ldr	r0, [pc, #328]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bc2:	f003 fbf1 	bl	80053a8 <HAL_GPIO_WritePin>
    }

    if (dribbler_speed != 0) {
 8001bc6:	4b48      	ldr	r3, [pc, #288]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d006      	beq.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x15c>
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bdc:	484b      	ldr	r0, [pc, #300]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bde:	f003 fbe3 	bl	80053a8 <HAL_GPIO_WritePin>
 8001be2:	e005      	b.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x168>
    } else {
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bea:	4848      	ldr	r0, [pc, #288]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bec:	f003 fbdc 	bl	80053a8 <HAL_GPIO_WritePin>
    }

    can_rx_cnt = 0;
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    uart_rx_cnt = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    uart3_rx_cnt = 0;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_SET) {
 8001c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c06:	4842      	ldr	r0, [pc, #264]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c08:	f003 fbb6 	bl	8005378 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d112      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x1b0>
      htim3.Instance->CCR3 = 1500 + 600 * dribbler_speed;  // esc
 8001c12:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001d14 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001d18 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c28:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c30:	ee17 2a90 	vmov	r2, s15
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c36:	e004      	b.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x1ba>
    } else {
      htim3.Instance->CCR3 = 1500 + USER_SW_ESC_PULSE_WITDH;  // esc
 8001c38:	4b38      	ldr	r3, [pc, #224]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET) {
 8001c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4a:	f003 fb95 	bl	8005378 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d116      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x1fa>
      htim3.Instance->CCR4 = 1500 - 600 * serv_angle + SERVO_CENTOR_OFFSET;  // servo
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001d14 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001d18 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001d20 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7a:	ee17 2a90 	vmov	r2, s15
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c80:	e004      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x204>
    } else {
      htim3.Instance->CCR4 = 1500 - USER_SW_SERVO_PULSE_WITDH + SERVO_CENTOR_OFFSET;  // servo
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    dribbler_timeout_cnt++;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c94:	6013      	str	r3, [r2, #0]
    servo_timeout_cnt++;
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c9e:	6013      	str	r3, [r2, #0]
    if (dribbler_timeout_cnt > 50) {
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b32      	cmp	r3, #50	@ 0x32
 8001ca6:	dd03      	ble.n	8001cb0 <HAL_TIM_PeriodElapsedCallback+0x228>
      dribbler_speed = 0;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    }
    if (servo_timeout_cnt > 50) {
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b32      	cmp	r3, #50	@ 0x32
 8001cb6:	dd03      	ble.n	8001cc0 <HAL_TIM_PeriodElapsedCallback+0x238>
      serv_angle = 0;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	372c      	adds	r7, #44	@ 0x2c
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003fc 	.word	0x200003fc
 8001cd0:	200003c4 	.word	0x200003c4
 8001cd4:	20000318 	.word	0x20000318
 8001cd8:	2000029c 	.word	0x2000029c
 8001cdc:	200003c8 	.word	0x200003c8
 8001ce0:	200003ac 	.word	0x200003ac
 8001ce4:	200003b0 	.word	0x200003b0
 8001ce8:	200003b8 	.word	0x200003b8
 8001cec:	200003b4 	.word	0x200003b4
 8001cf0:	200003c0 	.word	0x200003c0
 8001cf4:	200003bc 	.word	0x200003bc
 8001cf8:	200003cc 	.word	0x200003cc
 8001cfc:	200003a9 	.word	0x200003a9
 8001d00:	200003a8 	.word	0x200003a8
 8001d04:	0800e43c 	.word	0x0800e43c
 8001d08:	200002c4 	.word	0x200002c4
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000400 	.word	0x48000400
 8001d14:	44160000 	.word	0x44160000
 8001d18:	44bb8000 	.word	0x44bb8000
 8001d1c:	2000080c 	.word	0x2000080c
 8001d20:	42c80000 	.word	0x42c80000

08001d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d28:	f000 ff40 	bl	8002bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2c:	f000 f880 	bl	8001e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d30:	f7ff fa1e 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d34:	f7ff f9fe 	bl	8001134 <MX_DMA_Init>
  MX_CAN_Init();
 8001d38:	f7ff f928 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001d3c:	f000 fdd8 	bl	80028f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d40:	f000 fe06 	bl	8002950 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d44:	f000 fcca 	bl	80026dc <MX_TIM3_Init>
  MX_ADC2_Init();
 8001d48:	f7ff f844 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001d4c:	f7fe ffd2 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001d50:	f000 fd2a 	bl	80027a8 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001d54:	f7ff faac 	bl	80012b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board !! %s %s\n", __DATE__, __TIME__);
 8001d58:	4a26      	ldr	r2, [pc, #152]	@ (8001df4 <main+0xd0>)
 8001d5a:	4927      	ldr	r1, [pc, #156]	@ (8001df8 <main+0xd4>)
 8001d5c:	4827      	ldr	r0, [pc, #156]	@ (8001dfc <main+0xd8>)
 8001d5e:	f008 fee3 	bl	800ab28 <iprintf>
  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001d62:	2201      	movs	r2, #1
 8001d64:	4926      	ldr	r1, [pc, #152]	@ (8001e00 <main+0xdc>)
 8001d66:	4827      	ldr	r0, [pc, #156]	@ (8001e04 <main+0xe0>)
 8001d68:	f006 fc96 	bl	8008698 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4926      	ldr	r1, [pc, #152]	@ (8001e08 <main+0xe4>)
 8001d70:	4826      	ldr	r0, [pc, #152]	@ (8001e0c <main+0xe8>)
 8001d72:	f006 fc91 	bl	8008698 <HAL_UART_Receive_IT>

  lcdInit(&hi2c1);
 8001d76:	4826      	ldr	r0, [pc, #152]	@ (8001e10 <main+0xec>)
 8001d78:	f7ff fb1e 	bl	80013b8 <lcdInit>

  CAN_Filter_Init();
 8001d7c:	f7ff f988 	bl	8001090 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8001d80:	4824      	ldr	r0, [pc, #144]	@ (8001e14 <main+0xf0>)
 8001d82:	f002 f97e 	bl	8004082 <HAL_CAN_Start>

  HAL_TIM_Base_Start_IT(&htim17);
 8001d86:	4824      	ldr	r0, [pc, #144]	@ (8001e18 <main+0xf4>)
 8001d88:	f005 fc02 	bl	8007590 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Init(&htim3);
 8001d8c:	4823      	ldr	r0, [pc, #140]	@ (8001e1c <main+0xf8>)
 8001d8e:	f005 fc69 	bl	8007664 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d92:	2108      	movs	r1, #8
 8001d94:	4821      	ldr	r0, [pc, #132]	@ (8001e1c <main+0xf8>)
 8001d96:	f005 fcbd 	bl	8007714 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	481f      	ldr	r0, [pc, #124]	@ (8001e1c <main+0xf8>)
 8001d9e:	f005 fcb9 	bl	8007714 <HAL_TIM_PWM_Start>
  htim3.Instance->CCR3 = 0;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <main+0xf8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4 = 0;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <main+0xf8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
  servo_timeout_cnt = 0;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <main+0xfc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  dribbler_timeout_cnt = 0;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <main+0x100>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4819      	ldr	r0, [pc, #100]	@ (8001e28 <main+0x104>)
 8001dc2:	f001 fa80 	bl	80032c6 <HAL_ADCEx_Calibration_Start>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <main+0xac>
    /* Calibration Error */
    Error_Handler();
 8001dcc:	f000 f893 	bl	8001ef6 <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4816      	ldr	r0, [pc, #88]	@ (8001e2c <main+0x108>)
 8001dd4:	f001 fa77 	bl	80032c6 <HAL_ADCEx_Calibration_Start>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <main+0xbe>
    /* Calibration Error */
    Error_Handler();
 8001dde:	f000 f88a 	bl	8001ef6 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8001de2:	4811      	ldr	r0, [pc, #68]	@ (8001e28 <main+0x104>)
 8001de4:	f001 f94c 	bl	8003080 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001de8:	4810      	ldr	r0, [pc, #64]	@ (8001e2c <main+0x108>)
 8001dea:	f001 f949 	bl	8003080 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001dee:	bf00      	nop
 8001df0:	e7fd      	b.n	8001dee <main+0xca>
 8001df2:	bf00      	nop
 8001df4:	0800e4bc 	.word	0x0800e4bc
 8001df8:	0800e4c8 	.word	0x0800e4c8
 8001dfc:	0800e4d4 	.word	0x0800e4d4
 8001e00:	20000338 	.word	0x20000338
 8001e04:	2000092c 	.word	0x2000092c
 8001e08:	2000032c 	.word	0x2000032c
 8001e0c:	200008a4 	.word	0x200008a4
 8001e10:	200002c4 	.word	0x200002c4
 8001e14:	2000029c 	.word	0x2000029c
 8001e18:	20000858 	.word	0x20000858
 8001e1c:	2000080c 	.word	0x2000080c
 8001e20:	200003bc 	.word	0x200003bc
 8001e24:	200003c0 	.word	0x200003c0
 8001e28:	200001f8 	.word	0x200001f8
 8001e2c:	20000248 	.word	0x20000248

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09e      	sub	sp, #120	@ 0x78
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e3a:	2228      	movs	r2, #40	@ 0x28
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f008 fee9 	bl	800ac16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	223c      	movs	r2, #60	@ 0x3c
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fedb 	bl	800ac16 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e60:	2303      	movs	r3, #3
 8001e62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e68:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e72:	2310      	movs	r3, #16
 8001e74:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e76:	2302      	movs	r3, #2
 8001e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e7e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e80:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e84:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 ff5a 	bl	8005d44 <HAL_RCC_OscConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e96:	f000 f82e 	bl	8001ef6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 ff52 	bl	8006d60 <HAL_RCC_ClockConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ec2:	f000 f818 	bl	8001ef6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001ec6:	23a5      	movs	r3, #165	@ 0xa5
 8001ec8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f005 f950 	bl	8007184 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001eea:	f000 f804 	bl	8001ef6 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3778      	adds	r7, #120	@ 0x78
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efa:	b672      	cpsid	i
}
 8001efc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001efe:	bf00      	nop
 8001f00:	e7fd      	b.n	8001efe <Error_Handler+0x8>

08001f02 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af04      	add	r7, sp, #16
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001f0e:	230a      	movs	r3, #10
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2301      	movs	r3, #1
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	1cfb      	adds	r3, r7, #3
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2178      	movs	r1, #120	@ 0x78
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f003 faf5 	bl	8005510 <HAL_I2C_Mem_Write>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001f38:	2064      	movs	r0, #100	@ 0x64
 8001f3a:	f000 fe9d 	bl	8002c78 <HAL_Delay>
    int status = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001f42:	21ae      	movs	r1, #174	@ 0xae
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffdc 	bl	8001f02 <ssd1306_WriteCommand>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001f54:	2120      	movs	r1, #32
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffd3 	bl	8001f02 <ssd1306_WriteCommand>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f66:	2110      	movs	r1, #16
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ffca 	bl	8001f02 <ssd1306_WriteCommand>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001f78:	21b0      	movs	r1, #176	@ 0xb0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffc1 	bl	8001f02 <ssd1306_WriteCommand>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001f8a:	21c8      	movs	r1, #200	@ 0xc8
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffb8 	bl	8001f02 <ssd1306_WriteCommand>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffaf 	bl	8001f02 <ssd1306_WriteCommand>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001fae:	2110      	movs	r1, #16
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ffa6 	bl	8001f02 <ssd1306_WriteCommand>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001fc0:	2140      	movs	r1, #64	@ 0x40
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff9d 	bl	8001f02 <ssd1306_WriteCommand>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001fd2:	2181      	movs	r1, #129	@ 0x81
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff94 	bl	8001f02 <ssd1306_WriteCommand>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001fe4:	21ff      	movs	r1, #255	@ 0xff
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff8b 	bl	8001f02 <ssd1306_WriteCommand>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001ff6:	21a1      	movs	r1, #161	@ 0xa1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff82 	bl	8001f02 <ssd1306_WriteCommand>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8002008:	21a6      	movs	r1, #166	@ 0xa6
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff79 	bl	8001f02 <ssd1306_WriteCommand>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800201a:	21a8      	movs	r1, #168	@ 0xa8
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff70 	bl	8001f02 <ssd1306_WriteCommand>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800202c:	213f      	movs	r1, #63	@ 0x3f
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff67 	bl	8001f02 <ssd1306_WriteCommand>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800203e:	21a4      	movs	r1, #164	@ 0xa4
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff5e 	bl	8001f02 <ssd1306_WriteCommand>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002050:	21d3      	movs	r1, #211	@ 0xd3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff55 	bl	8001f02 <ssd1306_WriteCommand>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002062:	2100      	movs	r1, #0
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff4c 	bl	8001f02 <ssd1306_WriteCommand>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002074:	21d5      	movs	r1, #213	@ 0xd5
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff43 	bl	8001f02 <ssd1306_WriteCommand>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8002086:	21f0      	movs	r1, #240	@ 0xf0
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff3a 	bl	8001f02 <ssd1306_WriteCommand>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8002098:	21d9      	movs	r1, #217	@ 0xd9
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff31 	bl	8001f02 <ssd1306_WriteCommand>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80020aa:	2122      	movs	r1, #34	@ 0x22
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff28 	bl	8001f02 <ssd1306_WriteCommand>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80020bc:	21da      	movs	r1, #218	@ 0xda
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff1f 	bl	8001f02 <ssd1306_WriteCommand>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80020ce:	2112      	movs	r1, #18
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff16 	bl	8001f02 <ssd1306_WriteCommand>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80020e0:	21db      	movs	r1, #219	@ 0xdb
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff0d 	bl	8001f02 <ssd1306_WriteCommand>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80020f2:	2120      	movs	r1, #32
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff04 	bl	8001f02 <ssd1306_WriteCommand>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002104:	218d      	movs	r1, #141	@ 0x8d
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fefb 	bl	8001f02 <ssd1306_WriteCommand>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002116:	2114      	movs	r1, #20
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fef2 	bl	8001f02 <ssd1306_WriteCommand>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002128:	21af      	movs	r1, #175	@ 0xaf
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fee9 	bl	8001f02 <ssd1306_WriteCommand>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ssd1306_Init+0x214>
        return 1;
 8002140:	2301      	movs	r3, #1
 8002142:	e00f      	b.n	8002164 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f813 	bl	8002170 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f834 	bl	80021b8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <ssd1306_Init+0x23c>)
 8002152:	2200      	movs	r2, #0
 8002154:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002156:	4b05      	ldr	r3, [pc, #20]	@ (800216c <ssd1306_Init+0x23c>)
 8002158:	2200      	movs	r2, #0
 800215a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <ssd1306_Init+0x23c>)
 800215e:	2201      	movs	r2, #1
 8002160:	715a      	strb	r2, [r3, #5]

    return 0;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000800 	.word	0x20000800

08002170 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e00d      	b.n	800219c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <ssd1306_Fill+0x1a>
 8002186:	2100      	movs	r1, #0
 8002188:	e000      	b.n	800218c <ssd1306_Fill+0x1c>
 800218a:	21ff      	movs	r1, #255	@ 0xff
 800218c:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <ssd1306_Fill+0x44>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	460a      	mov	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a2:	d3ed      	bcc.n	8002180 <ssd1306_Fill+0x10>
    }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000400 	.word	0x20000400

080021b8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e020      	b.n	8002208 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3b50      	subs	r3, #80	@ 0x50
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fe97 	bl	8001f02 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80021d4:	2100      	movs	r1, #0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fe93 	bl	8001f02 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80021dc:	2110      	movs	r1, #16
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fe8f 	bl	8001f02 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	01db      	lsls	r3, r3, #7
 80021e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <ssd1306_UpdateScreen+0x60>)
 80021ea:	4413      	add	r3, r2
 80021ec:	2264      	movs	r2, #100	@ 0x64
 80021ee:	9202      	str	r2, [sp, #8]
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	9201      	str	r2, [sp, #4]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	2240      	movs	r2, #64	@ 0x40
 80021fa:	2178      	movs	r1, #120	@ 0x78
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f003 f987 	bl	8005510 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b07      	cmp	r3, #7
 800220c:	d9db      	bls.n	80021c6 <ssd1306_UpdateScreen+0xe>
    }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000400 	.word	0x20000400

0800221c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	460b      	mov	r3, r1
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	4613      	mov	r3, r2
 800222c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db48      	blt.n	80022c8 <ssd1306_DrawPixel+0xac>
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	2b3f      	cmp	r3, #63	@ 0x3f
 800223a:	d845      	bhi.n	80022c8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 800223c:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <ssd1306_DrawPixel+0xb8>)
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002244:	797b      	ldrb	r3, [r7, #5]
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002252:	797b      	ldrb	r3, [r7, #5]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11a      	bne.n	800228e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	b2d8      	uxtb	r0, r3
 8002260:	4603      	mov	r3, r0
 8002262:	01db      	lsls	r3, r3, #7
 8002264:	4413      	add	r3, r2
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <ssd1306_DrawPixel+0xbc>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	b25a      	sxtb	r2, r3
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	b25b      	sxtb	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b259      	sxtb	r1, r3
 800227e:	79fa      	ldrb	r2, [r7, #7]
 8002280:	4603      	mov	r3, r0
 8002282:	01db      	lsls	r3, r3, #7
 8002284:	4413      	add	r3, r2
 8002286:	b2c9      	uxtb	r1, r1
 8002288:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <ssd1306_DrawPixel+0xbc>)
 800228a:	54d1      	strb	r1, [r2, r3]
 800228c:	e01d      	b.n	80022ca <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	08db      	lsrs	r3, r3, #3
 8002294:	b2d8      	uxtb	r0, r3
 8002296:	4603      	mov	r3, r0
 8002298:	01db      	lsls	r3, r3, #7
 800229a:	4413      	add	r3, r2
 800229c:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <ssd1306_DrawPixel+0xbc>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	b259      	sxtb	r1, r3
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	4603      	mov	r3, r0
 80022bc:	01db      	lsls	r3, r3, #7
 80022be:	4413      	add	r3, r2
 80022c0:	b2c9      	uxtb	r1, r1
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <ssd1306_DrawPixel+0xbc>)
 80022c4:	54d1      	strb	r1, [r2, r3]
 80022c6:	e000      	b.n	80022ca <ssd1306_DrawPixel+0xae>
        return;
 80022c8:	bf00      	nop
    }
}
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20000800 	.word	0x20000800
 80022d8:	20000400 	.word	0x20000400

080022dc <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4604      	mov	r4, r0
 80022e4:	1d38      	adds	r0, r7, #4
 80022e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80022ea:	461a      	mov	r2, r3
 80022ec:	4623      	mov	r3, r4
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	4613      	mov	r3, r2
 80022f2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80022f4:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	793b      	ldrb	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002300:	dc06      	bgt.n	8002310 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002302:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	461a      	mov	r2, r3
 8002308:	797b      	ldrb	r3, [r7, #5]
 800230a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800230c:	2b3f      	cmp	r3, #63	@ 0x3f
 800230e:	dd01      	ble.n	8002314 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002310:	2300      	movs	r3, #0
 8002312:	e05c      	b.n	80023ce <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e04c      	b.n	80023b4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	3b20      	subs	r3, #32
 8002320:	7979      	ldrb	r1, [r7, #5]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4619      	mov	r1, r3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	440b      	add	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e034      	b.n	80023a4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b2d8      	uxtb	r0, r3
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 800235a:	885b      	ldrh	r3, [r3, #2]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	7bba      	ldrb	r2, [r7, #14]
 8002368:	4619      	mov	r1, r3
 800236a:	f7ff ff57 	bl	800221c <ssd1306_DrawPixel>
 800236e:	e016      	b.n	800239e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4413      	add	r3, r2
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 8002380:	885b      	ldrh	r3, [r3, #2]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b2d9      	uxtb	r1, r3
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff ff3f 	bl	800221c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	793b      	ldrb	r3, [r7, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d3c5      	bcc.n	800233a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	797b      	ldrb	r3, [r7, #5]
 80023b6:	461a      	mov	r2, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d3ad      	bcc.n	800231a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	793a      	ldrb	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <ssd1306_WriteChar+0xfc>)
 80023ca:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000800 	.word	0x20000800

080023dc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	1d38      	adds	r0, r7, #4
 80023e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80023ea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80023ec:	e012      	b.n	8002414 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	7818      	ldrb	r0, [r3, #0]
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	1d3a      	adds	r2, r7, #4
 80023f6:	ca06      	ldmia	r2, {r1, r2}
 80023f8:	f7ff ff70 	bl	80022dc <ssd1306_WriteChar>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d002      	beq.n	800240e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	e008      	b.n	8002420 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e8      	bne.n	80023ee <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	781b      	ldrb	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <ssd1306_SetCursor+0x2c>)
 800243e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <ssd1306_SetCursor+0x2c>)
 8002446:	805a      	strh	r2, [r3, #2]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	20000800 	.word	0x20000800

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <HAL_MspInit+0x44>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4a0e      	ldr	r2, [pc, #56]	@ (800249c <HAL_MspInit+0x44>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6193      	str	r3, [r2, #24]
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_MspInit+0x44>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_MspInit+0x44>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_MspInit+0x44>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_MspInit+0x44>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <NMI_Handler+0x4>

080024a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <MemManage_Handler+0x4>

080024b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f6:	f000 fb9f 	bl	8002c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <DMA1_Channel4_IRQHandler+0x10>)
 8002506:	f002 fcb0 	bl	8004e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200009b4 	.word	0x200009b4

08002514 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800251a:	f002 f843 	bl	80045a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000029c 	.word	0x2000029c

08002528 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800252e:	f005 f9f1 	bl	8007914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000858 	.word	0x20000858

0800253c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <USART1_IRQHandler+0x10>)
 8002542:	f006 f969 	bl	8008818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200008a4 	.word	0x200008a4

08002550 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <USART3_IRQHandler+0x10>)
 8002556:	f006 f95f 	bl	8008818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000092c 	.word	0x2000092c

08002564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_kill>:

int _kill(int pid, int sig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800257e:	f008 fb9d 	bl	800acbc <__errno>
 8002582:	4603      	mov	r3, r0
 8002584:	2216      	movs	r2, #22
 8002586:	601a      	str	r2, [r3, #0]
	return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_exit>:

void _exit (int status)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffe7 	bl	8002574 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a6:	bf00      	nop
 80025a8:	e7fd      	b.n	80025a6 <_exit+0x12>

080025aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e00a      	b.n	80025d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025bc:	f3af 8000 	nop.w
 80025c0:	4601      	mov	r1, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	60ba      	str	r2, [r7, #8]
 80025c8:	b2ca      	uxtb	r2, r1
 80025ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	dbf0      	blt.n	80025bc <_read+0x12>
	}

return len;
 80025da:	687b      	ldr	r3, [r7, #4]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800260c:	605a      	str	r2, [r3, #4]
	return 0;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_isatty>:

int _isatty(int file)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
	return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002654:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <_sbrk+0x5c>)
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <_sbrk+0x60>)
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <_sbrk+0x64>)
 800266a:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d207      	bcs.n	800268c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800267c:	f008 fb1e 	bl	800acbc <__errno>
 8002680:	4603      	mov	r3, r0
 8002682:	220c      	movs	r2, #12
 8002684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	e009      	b.n	80026a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800268c:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <_sbrk+0x64>)
 800269c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20008000 	.word	0x20008000
 80026ac:	00000400 	.word	0x00000400
 80026b0:	20000808 	.word	0x20000808
 80026b4:	20000b48 	.word	0x20000b48

080026b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <SystemInit+0x20>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <SystemInit+0x20>)
 80026c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ee:	463b      	mov	r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]
 80026fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002702:	4a28      	ldr	r2, [pc, #160]	@ (80027a4 <MX_TIM3_Init+0xc8>)
 8002704:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002706:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002708:	2248      	movs	r2, #72	@ 0x48
 800270a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270c:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002714:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002718:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002726:	481e      	ldr	r0, [pc, #120]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002728:	f004 ff9c 	bl	8007664 <HAL_TIM_PWM_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002732:	f7ff fbe0 	bl	8001ef6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	4816      	ldr	r0, [pc, #88]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002746:	f005 febb 	bl	80084c0 <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002750:	f7ff fbd1 	bl	8001ef6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002754:	2360      	movs	r3, #96	@ 0x60
 8002756:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8002758:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800275c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002766:	463b      	mov	r3, r7
 8002768:	2208      	movs	r2, #8
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 800276e:	f005 f9d3 	bl	8007b18 <HAL_TIM_PWM_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002778:	f7ff fbbd 	bl	8001ef6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	220c      	movs	r2, #12
 8002780:	4619      	mov	r1, r3
 8002782:	4807      	ldr	r0, [pc, #28]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002784:	f005 f9c8 	bl	8007b18 <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800278e:	f7ff fbb2 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002792:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <MX_TIM3_Init+0xc4>)
 8002794:	f000 f874 	bl	8002880 <HAL_TIM_MspPostInit>

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	@ 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000080c 	.word	0x2000080c
 80027a4:	40000400 	.word	0x40000400

080027a8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <MX_TIM17_Init+0x48>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027b4:	2248      	movs	r2, #72	@ 0x48
 80027b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 500;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80027cc:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027d8:	4804      	ldr	r0, [pc, #16]	@ (80027ec <MX_TIM17_Init+0x44>)
 80027da:	f004 fe81 	bl	80074e0 <HAL_TIM_Base_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80027e4:	f7ff fb87 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000858 	.word	0x20000858
 80027f0:	40014800 	.word	0x40014800

080027f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <HAL_TIM_PWM_MspInit+0x38>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10b      	bne.n	800281e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40000400 	.word	0x40000400
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <HAL_TIM_Base_MspInit+0x44>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d113      	bne.n	800286e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <HAL_TIM_Base_MspInit+0x48>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a0c      	ldr	r2, [pc, #48]	@ (800287c <HAL_TIM_Base_MspInit+0x48>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002850:	6193      	str	r3, [r2, #24]
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_TIM_Base_MspInit+0x48>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	201a      	movs	r0, #26
 8002864:	f002 f9a9 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002868:	201a      	movs	r0, #26
 800286a:	f002 f9c2 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40014800 	.word	0x40014800
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_TIM_MspPostInit+0x64>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11b      	bne.n	80028da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_TIM_MspPostInit+0x68>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_TIM_MspPostInit+0x68>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ac:	6153      	str	r3, [r2, #20]
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <HAL_TIM_MspPostInit+0x68>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028ba:	2303      	movs	r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	@ (80028ec <HAL_TIM_MspPostInit+0x6c>)
 80028d6:	f002 fbd5 	bl	8005084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028da:	bf00      	nop
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000400 	.word	0x48000400

080028f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 80028f6:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <MX_USART1_UART_Init+0x58>)
 80028f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 80028fc:	4a13      	ldr	r2, [pc, #76]	@ (800294c <MX_USART1_UART_Init+0x5c>)
 80028fe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002900:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002906:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002914:	220c      	movs	r2, #12
 8002916:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002920:	2200      	movs	r2, #0
 8002922:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <MX_USART1_UART_Init+0x54>)
 8002932:	f005 fe63 	bl	80085fc <HAL_UART_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800293c:	f7ff fadb 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200008a4 	.word	0x200008a4
 8002948:	40013800 	.word	0x40013800
 800294c:	001e8480 	.word	0x001e8480

08002950 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002954:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002956:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <MX_USART3_UART_Init+0x5c>)
 8002958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800295a:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <MX_USART3_UART_Init+0x58>)
 8002994:	f005 fe32 	bl	80085fc <HAL_UART_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800299e:	f7ff faaa 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000092c 	.word	0x2000092c
 80029ac:	40004800 	.word	0x40004800

080029b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	@ 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <HAL_UART_MspInit+0x190>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d16a      	bne.n	8002aa8 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6193      	str	r3, [r2, #24]
 80029de:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b56      	ldr	r3, [pc, #344]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4a55      	ldr	r2, [pc, #340]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f4:	6153      	str	r3, [r2, #20]
 80029f6:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a14:	2307      	movs	r3, #7
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a22:	f002 fb2f 	bl	8005084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a46:	f002 fb1d 	bl	8005084 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b4c <HAL_UART_MspInit+0x19c>)
 8002a4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a50:	4b3d      	ldr	r3, [pc, #244]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a52:	2210      	movs	r2, #16
 8002a54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a56:	4b3c      	ldr	r3, [pc, #240]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a62:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a68:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a6e:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a74:	4b34      	ldr	r3, [pc, #208]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a7a:	4833      	ldr	r0, [pc, #204]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a7c:	f002 f8d3 	bl	8004c26 <HAL_DMA_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8002a86:	f7ff fa36 	bl	8001ef6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a8e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a90:	4a2d      	ldr	r2, [pc, #180]	@ (8002b48 <HAL_UART_MspInit+0x198>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2025      	movs	r0, #37	@ 0x25
 8002a9c:	f002 f88d 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aa0:	2025      	movs	r0, #37	@ 0x25
 8002aa2:	f002 f8a6 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002aa6:	e046      	b.n	8002b36 <HAL_UART_MspInit+0x186>
  else if(uartHandle->Instance==USART3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a28      	ldr	r2, [pc, #160]	@ (8002b50 <HAL_UART_MspInit+0x1a0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d141      	bne.n	8002b36 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab2:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6153      	str	r3, [r2, #20]
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_UART_MspInit+0x194>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af4:	2307      	movs	r3, #7
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	4815      	ldr	r0, [pc, #84]	@ (8002b54 <HAL_UART_MspInit+0x1a4>)
 8002b00:	f002 fac0 	bl	8005084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b16:	2307      	movs	r3, #7
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <HAL_UART_MspInit+0x1a4>)
 8002b22:	f002 faaf 	bl	8005084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2027      	movs	r0, #39	@ 0x27
 8002b2c:	f002 f845 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b30:	2027      	movs	r0, #39	@ 0x27
 8002b32:	f002 f85e 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3730      	adds	r7, #48	@ 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	200009b4 	.word	0x200009b4
 8002b4c:	40020044 	.word	0x40020044
 8002b50:	40004800 	.word	0x40004800
 8002b54:	48000400 	.word	0x48000400

08002b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b5c:	480d      	ldr	r0, [pc, #52]	@ (8002b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b5e:	490e      	ldr	r1, [pc, #56]	@ (8002b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b60:	4a0e      	ldr	r2, [pc, #56]	@ (8002b9c <LoopForever+0xe>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b74:	4c0b      	ldr	r4, [pc, #44]	@ (8002ba4 <LoopForever+0x16>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b82:	f7ff fd99 	bl	80026b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b86:	f008 f89f 	bl	800acc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b8a:	f7ff f8cb 	bl	8001d24 <main>

08002b8e <LoopForever>:

LoopForever:
    b LoopForever
 8002b8e:	e7fe      	b.n	8002b8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b98:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b9c:	0800f6bc 	.word	0x0800f6bc
  ldr r2, =_sbss
 8002ba0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ba4:	20000b48 	.word	0x20000b48

08002ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ba8:	e7fe      	b.n	8002ba8 <ADC1_2_IRQHandler>
	...

08002bac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <HAL_Init+0x28>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_Init+0x28>)
 8002bb6:	f043 0310 	orr.w	r3, r3, #16
 8002bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f001 fff1 	bl	8004ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc2:	200f      	movs	r0, #15
 8002bc4:	f000 f808 	bl	8002bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc8:	f7ff fc46 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40022000 	.word	0x40022000

08002bd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_InitTick+0x54>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_InitTick+0x58>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 f809 	bl	8004c0e <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00e      	b.n	8002c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	d80a      	bhi.n	8002c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f001 ffd1 	bl	8004bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c18:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <HAL_InitTick+0x5c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	20000010 	.word	0x20000010
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_IncTick+0x20>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000010 	.word	0x20000010
 8002c5c:	200009f8 	.word	0x200009f8

08002c60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200009f8 	.word	0x200009f8

08002c78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff ffee 	bl	8002c60 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d005      	beq.n	8002c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_Delay+0x44>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c9e:	bf00      	nop
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8f7      	bhi.n	8002ca0 <HAL_Delay+0x28>
  {
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b09a      	sub	sp, #104	@ 0x68
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e1c9      	b.n	8003074 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d176      	bne.n	8002de0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d152      	bne.n	8002da0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fe f8bb 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13b      	bne.n	8002da0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 ff7f 	bl	8003c2c <ADC_Disable>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12f      	bne.n	8002da0 <HAL_ADC_Init+0xe0>
 8002d40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d12b      	bne.n	8002da0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d50:	f023 0302 	bic.w	r3, r3, #2
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d6a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7c:	4b86      	ldr	r3, [pc, #536]	@ (8002f98 <HAL_ADC_Init+0x2d8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a86      	ldr	r2, [pc, #536]	@ (8002f9c <HAL_ADC_Init+0x2dc>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0c9a      	lsrs	r2, r3, #18
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dbc:	d110      	bne.n	8002de0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f023 0312 	bic.w	r3, r3, #18
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 8136 	bne.w	800305a <HAL_ADC_Init+0x39a>
 8002dee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8131 	bne.w	800305a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8129 	bne.w	800305a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_Init+0x16c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa0 <HAL_ADC_Init+0x2e0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_Init+0x170>
 8002e2c:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa4 <HAL_ADC_Init+0x2e4>)
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_Init+0x172>
 8002e30:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_ADC_Init+0x2e8>)
 8002e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3c:	d102      	bne.n	8002e44 <HAL_ADC_Init+0x184>
 8002e3e:	4b58      	ldr	r3, [pc, #352]	@ (8002fa0 <HAL_ADC_Init+0x2e0>)
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e01a      	b.n	8002e7a <HAL_ADC_Init+0x1ba>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a55      	ldr	r2, [pc, #340]	@ (8002fa0 <HAL_ADC_Init+0x2e0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d103      	bne.n	8002e56 <HAL_ADC_Init+0x196>
 8002e4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e011      	b.n	8002e7a <HAL_ADC_Init+0x1ba>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a54      	ldr	r2, [pc, #336]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADC_Init+0x1a6>
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <HAL_ADC_Init+0x2f0>)
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e009      	b.n	8002e7a <HAL_ADC_Init+0x1ba>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a51      	ldr	r2, [pc, #324]	@ (8002fb0 <HAL_ADC_Init+0x2f0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d102      	bne.n	8002e76 <HAL_ADC_Init+0x1b6>
 8002e70:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e001      	b.n	8002e7a <HAL_ADC_Init+0x1ba>
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d108      	bne.n	8002e9a <HAL_ADC_Init+0x1da>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_Init+0x1da>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_ADC_Init+0x1dc>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11c      	bne.n	8002eda <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_ADC_Init+0x202>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x202>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_Init+0x204>
 8002ec2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7e5b      	ldrb	r3, [r3, #25]
 8002ede:	035b      	lsls	r3, r3, #13
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ee4:	2a01      	cmp	r2, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_ADC_Init+0x22e>
 8002ee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002eec:	e000      	b.n	8002ef0 <HAL_ADC_Init+0x230>
 8002eee:	2200      	movs	r2, #0
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f00:	4313      	orrs	r3, r2
 8002f02:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d11b      	bne.n	8002f46 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7e5b      	ldrb	r3, [r3, #25]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	045a      	lsls	r2, r3, #17
 8002f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f26:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f28:	e00d      	b.n	8002f46 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d03a      	beq.n	8002fc4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_ADC_Init+0x2a2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <HAL_ADC_Init+0x2f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d128      	bne.n	8002fb4 <HAL_ADC_Init+0x2f4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002f6a:	d012      	beq.n	8002f92 <HAL_ADC_Init+0x2d2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f74:	d00a      	beq.n	8002f8c <HAL_ADC_Init+0x2cc>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002f7e:	d002      	beq.n	8002f86 <HAL_ADC_Init+0x2c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	e018      	b.n	8002fb8 <HAL_ADC_Init+0x2f8>
 8002f86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f8a:	e015      	b.n	8002fb8 <HAL_ADC_Init+0x2f8>
 8002f8c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002f90:	e012      	b.n	8002fb8 <HAL_ADC_Init+0x2f8>
 8002f92:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002f96:	e00f      	b.n	8002fb8 <HAL_ADC_Init+0x2f8>
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	431bde83 	.word	0x431bde83
 8002fa0:	50000100 	.word	0x50000100
 8002fa4:	50000300 	.word	0x50000300
 8002fa8:	50000700 	.word	0x50000700
 8002fac:	50000400 	.word	0x50000400
 8002fb0:	50000500 	.word	0x50000500
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d114      	bne.n	8002ffc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7e1b      	ldrb	r3, [r3, #24]
 8002fea:	039a      	lsls	r2, r3, #14
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <HAL_ADC_Init+0x3bc>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800300c:	430b      	orrs	r3, r1
 800300e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10c      	bne.n	8003032 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f023 010f 	bic.w	r1, r3, #15
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003030:	e007      	b.n	8003042 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 020f 	bic.w	r2, r2, #15
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f023 0303 	bic.w	r3, r3, #3
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
 8003058:	e00a      	b.n	8003070 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f023 0312 	bic.w	r3, r3, #18
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003070:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003074:	4618      	mov	r0, r3
 8003076:	3768      	adds	r7, #104	@ 0x68
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	fff0c007 	.word	0xfff0c007

08003080 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80f9 	bne.w	800328e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Start+0x2a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0f4      	b.n	8003294 <HAL_ADC_Start+0x214>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fd56 	bl	8003b64 <ADC_Enable>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 80e0 	bne.w	8003284 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADC_Start+0x6c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6d      	ldr	r2, [pc, #436]	@ (800329c <HAL_ADC_Start+0x21c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_Start+0x7a>
 80030ec:	4b6c      	ldr	r3, [pc, #432]	@ (80032a0 <HAL_ADC_Start+0x220>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_ADC_Start+0x9a>
 80030f8:	e005      	b.n	8003106 <HAL_ADC_Start+0x86>
 80030fa:	4b6a      	ldr	r3, [pc, #424]	@ (80032a4 <HAL_ADC_Start+0x224>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_ADC_Start+0x9a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d004      	beq.n	800311a <HAL_ADC_Start+0x9a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a64      	ldr	r2, [pc, #400]	@ (80032a8 <HAL_ADC_Start+0x228>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d115      	bne.n	8003146 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d036      	beq.n	80031a2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800313c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003144:	e02d      	b.n	80031a2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Start+0xe6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4e      	ldr	r2, [pc, #312]	@ (800329c <HAL_ADC_Start+0x21c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10a      	bne.n	800317c <HAL_ADC_Start+0xfc>
 8003166:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e008      	b.n	800318e <HAL_ADC_Start+0x10e>
 800317c:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_ADC_Start+0x228>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800319a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ae:	d106      	bne.n	80031be <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b4:	f023 0206 	bic.w	r2, r3, #6
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	221c      	movs	r2, #28
 80031d2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031dc:	d004      	beq.n	80031e8 <HAL_ADC_Start+0x168>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2e      	ldr	r2, [pc, #184]	@ (800329c <HAL_ADC_Start+0x21c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_Start+0x176>
 80031e8:	4b2d      	ldr	r3, [pc, #180]	@ (80032a0 <HAL_ADC_Start+0x220>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03e      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 80031f4:	e005      	b.n	8003202 <HAL_ADC_Start+0x182>
 80031f6:	4b2b      	ldr	r3, [pc, #172]	@ (80032a4 <HAL_ADC_Start+0x224>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d037      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320a:	d004      	beq.n	8003216 <HAL_ADC_Start+0x196>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	@ (800329c <HAL_ADC_Start+0x21c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d106      	bne.n	8003224 <HAL_ADC_Start+0x1a4>
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_ADC_Start+0x220>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2b05      	cmp	r3, #5
 8003220:	d027      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 8003222:	e005      	b.n	8003230 <HAL_ADC_Start+0x1b0>
 8003224:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <HAL_ADC_Start+0x224>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2b05      	cmp	r3, #5
 800322e:	d020      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADC_Start+0x1c4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	@ (800329c <HAL_ADC_Start+0x21c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d106      	bne.n	8003252 <HAL_ADC_Start+0x1d2>
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <HAL_ADC_Start+0x220>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2b09      	cmp	r3, #9
 800324e:	d010      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 8003250:	e005      	b.n	800325e <HAL_ADC_Start+0x1de>
 8003252:	4b14      	ldr	r3, [pc, #80]	@ (80032a4 <HAL_ADC_Start+0x224>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2b09      	cmp	r3, #9
 800325c:	d009      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003266:	d004      	beq.n	8003272 <HAL_ADC_Start+0x1f2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <HAL_ADC_Start+0x228>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10f      	bne.n	8003292 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0204 	orr.w	r2, r2, #4
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e006      	b.n	8003292 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800328c:	e001      	b.n	8003292 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	50000100 	.word	0x50000100
 80032a0:	50000300 	.word	0x50000300
 80032a4:	50000700 	.word	0x50000700
 80032a8:	50000400 	.word	0x50000400

080032ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADCEx_Calibration_Start+0x1c>
 80032de:	2302      	movs	r3, #2
 80032e0:	e05f      	b.n	80033a2 <HAL_ADCEx_Calibration_Start+0xdc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fc9e 	bl	8003c2c <ADC_Disable>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d14e      	bne.n	8003398 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800330e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003324:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003334:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003336:	f7ff fc93 	bl	8002c60 <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800333c:	e01c      	b.n	8003378 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800333e:	f7ff fc8f 	bl	8002c60 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b0a      	cmp	r3, #10
 800334a:	d915      	bls.n	8003378 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800335a:	d10d      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f023 0312 	bic.w	r3, r3, #18
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e014      	b.n	80033a2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003386:	d0da      	beq.n	800333e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f023 0303 	bic.w	r3, r3, #3
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b09b      	sub	sp, #108	@ 0x6c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x22>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e2c8      	b.n	8003960 <HAL_ADC_ConfigChannel+0x5b4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 82ac 	bne.w	800393e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d81c      	bhi.n	8003428 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	461a      	mov	r2, r3
 8003402:	231f      	movs	r3, #31
 8003404:	4093      	lsls	r3, r2
 8003406:	43db      	mvns	r3, r3
 8003408:	4019      	ands	r1, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa00 f203 	lsl.w	r2, r0, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
 8003426:	e063      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d81e      	bhi.n	800346e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	3b1e      	subs	r3, #30
 8003444:	221f      	movs	r2, #31
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	4019      	ands	r1, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	3b1e      	subs	r3, #30
 8003460:	fa00 f203 	lsl.w	r2, r0, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	635a      	str	r2, [r3, #52]	@ 0x34
 800346c:	e040      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b0e      	cmp	r3, #14
 8003474:	d81e      	bhi.n	80034b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	3b3c      	subs	r3, #60	@ 0x3c
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	4019      	ands	r1, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	3b3c      	subs	r3, #60	@ 0x3c
 80034a6:	fa00 f203 	lsl.w	r2, r0, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80034b2:	e01d      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	3b5a      	subs	r3, #90	@ 0x5a
 80034c8:	221f      	movs	r2, #31
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	4019      	ands	r1, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	3b5a      	subs	r3, #90	@ 0x5a
 80034e4:	fa00 f203 	lsl.w	r2, r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80e5 	bne.w	80036ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b09      	cmp	r3, #9
 8003506:	d91c      	bls.n	8003542 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6999      	ldr	r1, [r3, #24]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	2207      	movs	r2, #7
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	4019      	ands	r1, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6898      	ldr	r0, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	3b1e      	subs	r3, #30
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	619a      	str	r2, [r3, #24]
 8003540:	e019      	b.n	8003576 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6959      	ldr	r1, [r3, #20]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	2207      	movs	r2, #7
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6898      	ldr	r0, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	fa00 f203 	lsl.w	r2, r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	3b01      	subs	r3, #1
 8003594:	2b03      	cmp	r3, #3
 8003596:	d84f      	bhi.n	8003638 <HAL_ADC_ConfigChannel+0x28c>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035f5 	.word	0x080035f5
 80035ac:	08003617 	.word	0x08003617
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035b6:	4b99      	ldr	r3, [pc, #612]	@ (800381c <HAL_ADC_ConfigChannel+0x470>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	0691      	lsls	r1, r2, #26
 80035c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035c2:	430a      	orrs	r2, r1
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035d0:	e07b      	b.n	80036ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035d8:	4b90      	ldr	r3, [pc, #576]	@ (800381c <HAL_ADC_ConfigChannel+0x470>)
 80035da:	4013      	ands	r3, r2
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	0691      	lsls	r1, r2, #26
 80035e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035e4:	430a      	orrs	r2, r1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035f0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035f2:	e06a      	b.n	80036ca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_ADC_ConfigChannel+0x470>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	0691      	lsls	r1, r2, #26
 8003604:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003606:	430a      	orrs	r2, r1
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003612:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003614:	e059      	b.n	80036ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800361c:	4b7f      	ldr	r3, [pc, #508]	@ (800381c <HAL_ADC_ConfigChannel+0x470>)
 800361e:	4013      	ands	r3, r2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	0691      	lsls	r1, r2, #26
 8003626:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003628:	430a      	orrs	r2, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003634:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003636:	e048      	b.n	80036ca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	069b      	lsls	r3, r3, #26
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800365a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003662:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800367e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003686:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036a2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80036c8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x33e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x33e>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x340>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8131 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00f      	beq.n	800371a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43da      	mvns	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	400a      	ands	r2, r1
 8003714:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003718:	e049      	b.n	80037ae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	409a      	lsls	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b09      	cmp	r3, #9
 800373a:	d91c      	bls.n	8003776 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	3b1b      	subs	r3, #27
 800374e:	2207      	movs	r2, #7
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	4019      	ands	r1, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6898      	ldr	r0, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	3b1b      	subs	r3, #27
 8003768:	fa00 f203 	lsl.w	r2, r0, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]
 8003774:	e01b      	b.n	80037ae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6959      	ldr	r1, [r3, #20]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	2207      	movs	r2, #7
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	4019      	ands	r1, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6898      	ldr	r0, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	fa00 f203 	lsl.w	r2, r0, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b6:	d004      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x416>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <HAL_ADC_ConfigChannel+0x474>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x41a>
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <HAL_ADC_ConfigChannel+0x478>)
 80037c4:	e000      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x41c>
 80037c6:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <HAL_ADC_ConfigChannel+0x47c>)
 80037c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d105      	bne.n	80037de <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d015      	beq.n	800380a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037e2:	2b11      	cmp	r3, #17
 80037e4:	d105      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	f040 80ac 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 80a5 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d10b      	bne.n	800382c <HAL_ADC_ConfigChannel+0x480>
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_ADC_ConfigChannel+0x474>)
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e023      	b.n	8003862 <HAL_ADC_ConfigChannel+0x4b6>
 800381a:	bf00      	nop
 800381c:	83fff000 	.word	0x83fff000
 8003820:	50000100 	.word	0x50000100
 8003824:	50000300 	.word	0x50000300
 8003828:	50000700 	.word	0x50000700
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4e      	ldr	r2, [pc, #312]	@ (800396c <HAL_ADC_ConfigChannel+0x5c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d103      	bne.n	800383e <HAL_ADC_ConfigChannel+0x492>
 8003836:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e011      	b.n	8003862 <HAL_ADC_ConfigChannel+0x4b6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <HAL_ADC_ConfigChannel+0x5c4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d102      	bne.n	800384e <HAL_ADC_ConfigChannel+0x4a2>
 8003848:	4b4a      	ldr	r3, [pc, #296]	@ (8003974 <HAL_ADC_ConfigChannel+0x5c8>)
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e009      	b.n	8003862 <HAL_ADC_ConfigChannel+0x4b6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a48      	ldr	r2, [pc, #288]	@ (8003974 <HAL_ADC_ConfigChannel+0x5c8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d102      	bne.n	800385e <HAL_ADC_ConfigChannel+0x4b2>
 8003858:	4b45      	ldr	r3, [pc, #276]	@ (8003970 <HAL_ADC_ConfigChannel+0x5c4>)
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <HAL_ADC_ConfigChannel+0x4b6>
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x4d6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x4d6>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_ADC_ConfigChannel+0x4d8>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d150      	bne.n	800392a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003888:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x4fe>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x4fe>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_ADC_ConfigChannel+0x500>
 80038aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d13c      	bne.n	800392a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d11d      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x548>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c0:	d118      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80038c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80038ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <HAL_ADC_ConfigChannel+0x5cc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <HAL_ADC_ConfigChannel+0x5d0>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	0c9a      	lsrs	r2, r3, #18
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038e4:	e002      	b.n	80038ec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f9      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038f2:	e02e      	b.n	8003952 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b11      	cmp	r3, #17
 80038fa:	d10b      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x568>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003904:	d106      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800390e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003910:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003912:	e01e      	b.n	8003952 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b12      	cmp	r3, #18
 800391a:	d11a      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800391c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003926:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003928:	e013      	b.n	8003952 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800393c:	e00a      	b.n	8003954 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003950:	e000      	b.n	8003954 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003952:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800395c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003960:	4618      	mov	r0, r3
 8003962:	376c      	adds	r7, #108	@ 0x6c
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	50000100 	.word	0x50000100
 8003970:	50000400 	.word	0x50000400
 8003974:	50000500 	.word	0x50000500
 8003978:	20000008 	.word	0x20000008
 800397c:	431bde83 	.word	0x431bde83

08003980 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003980:	b480      	push	{r7}
 8003982:	b099      	sub	sp, #100	@ 0x64
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d102      	bne.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800399a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	e01a      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d103      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80039aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	e011      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a67      	ldr	r2, [pc, #412]	@ (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d102      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039bc:	4b66      	ldr	r3, [pc, #408]	@ (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e009      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a64      	ldr	r2, [pc, #400]	@ (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d102      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039cc:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	e001      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0b0      	b.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0a9      	b.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 808d 	bne.w	8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 8086 	bne.w	8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a1c:	d004      	beq.n	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4b      	ldr	r2, [pc, #300]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a28:	4b4c      	ldr	r3, [pc, #304]	@ (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003a2a:	e000      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d040      	beq.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a4a:	035b      	lsls	r3, r3, #13
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d15c      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003a96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d14b      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	6811      	ldr	r1, [r2, #0]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab8:	e03c      	b.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d108      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d123      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003b08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d112      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b16:	f023 030f 	bic.w	r3, r3, #15
 8003b1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b1e:	e009      	b.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003b32:	e000      	b.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8003b42:	4618      	mov	r0, r3
 8003b44:	3764      	adds	r7, #100	@ 0x64
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	50000100 	.word	0x50000100
 8003b54:	50000400 	.word	0x50000400
 8003b58:	50000500 	.word	0x50000500
 8003b5c:	50000300 	.word	0x50000300
 8003b60:	50000700 	.word	0x50000700

08003b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <ADC_Enable+0x2c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <ADC_Enable+0x2c>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <ADC_Enable+0x2e>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d143      	bne.n	8003c1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <ADC_Enable+0xc4>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f043 0210 	orr.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e02f      	b.n	8003c20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003bd0:	f7ff f846 	bl	8002c60 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bd6:	e01b      	b.n	8003c10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bd8:	f7ff f842 	bl	8002c60 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d914      	bls.n	8003c10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00d      	beq.n	8003c10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	f043 0210 	orr.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d1dc      	bne.n	8003bd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	8000003f 	.word	0x8000003f

08003c2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <ADC_Disable+0x2c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <ADC_Disable+0x2c>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <ADC_Disable+0x2e>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d047      	beq.n	8003cee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030d 	and.w	r3, r3, #13
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10f      	bne.n	8003c8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0202 	orr.w	r2, r2, #2
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2203      	movs	r2, #3
 8003c82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c84:	f7fe ffec 	bl	8002c60 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c8a:	e029      	b.n	8003ce0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f043 0210 	orr.w	r2, r3, #16
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9c:	f043 0201 	orr.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e023      	b.n	8003cf0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ca8:	f7fe ffda 	bl	8002c60 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d914      	bls.n	8003ce0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10d      	bne.n	8003ce0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f043 0210 	orr.w	r2, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e007      	b.n	8003cf0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d0dc      	beq.n	8003ca8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0ed      	b.n	8003ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd f96e 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d2c:	f7fe ff98 	bl	8002c60 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d32:	e012      	b.n	8003d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d34:	f7fe ff94 	bl	8002c60 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b0a      	cmp	r3, #10
 8003d40:	d90b      	bls.n	8003d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2205      	movs	r2, #5
 8003d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0c5      	b.n	8003ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0e5      	beq.n	8003d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0202 	bic.w	r2, r2, #2
 8003d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d78:	f7fe ff72 	bl	8002c60 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d7e:	e012      	b.n	8003da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d80:	f7fe ff6e 	bl	8002c60 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b0a      	cmp	r3, #10
 8003d8c:	d90b      	bls.n	8003da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e09f      	b.n	8003ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7e1b      	ldrb	r3, [r3, #24]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d108      	bne.n	8003dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e007      	b.n	8003dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7e5b      	ldrb	r3, [r3, #25]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d108      	bne.n	8003df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e007      	b.n	8003e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7e9b      	ldrb	r3, [r3, #26]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d108      	bne.n	8003e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0220 	orr.w	r2, r2, #32
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e007      	b.n	8003e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0220 	bic.w	r2, r2, #32
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7edb      	ldrb	r3, [r3, #27]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d108      	bne.n	8003e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0210 	bic.w	r2, r2, #16
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e007      	b.n	8003e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0210 	orr.w	r2, r2, #16
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7f1b      	ldrb	r3, [r3, #28]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d108      	bne.n	8003e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e007      	b.n	8003e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0208 	bic.w	r2, r2, #8
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7f5b      	ldrb	r3, [r3, #29]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d108      	bne.n	8003ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0204 	orr.w	r2, r2, #4
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e007      	b.n	8003eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d003      	beq.n	8003f14 <HAL_CAN_ConfigFilter+0x26>
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	f040 80aa 	bne.w	8004068 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d123      	bne.n	8003f96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3248      	adds	r2, #72	@ 0x48
 8003f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	3348      	adds	r3, #72	@ 0x48
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d122      	bne.n	8003fe4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3248      	adds	r2, #72	@ 0x48
 8003fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fda:	6979      	ldr	r1, [r7, #20]
 8003fdc:	3348      	adds	r3, #72	@ 0x48
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003ffe:	e007      	b.n	8004010 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	431a      	orrs	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800402a:	e007      	b.n	800403c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	431a      	orrs	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	431a      	orrs	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e006      	b.n	8004076 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d12e      	bne.n	80040f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ae:	f7fe fdd7 	bl	8002c60 <HAL_GetTick>
 80040b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040b4:	e012      	b.n	80040dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040b6:	f7fe fdd3 	bl	8002c60 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b0a      	cmp	r3, #10
 80040c2:	d90b      	bls.n	80040dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2205      	movs	r2, #5
 80040d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e012      	b.n	8004102 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e006      	b.n	8004102 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800410a:	b480      	push	{r7}
 800410c:	b089      	sub	sp, #36	@ 0x24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004128:	7ffb      	ldrb	r3, [r7, #31]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d003      	beq.n	8004136 <HAL_CAN_AddTxMessage+0x2c>
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	2b02      	cmp	r3, #2
 8004132:	f040 80ad 	bne.w	8004290 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8095 	beq.w	8004280 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004160:	2201      	movs	r2, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	409a      	lsls	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	6809      	ldr	r1, [r1, #0]
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3318      	adds	r3, #24
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	440b      	add	r3, r1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e00f      	b.n	80041ae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004198:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80041a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3318      	adds	r3, #24
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	440b      	add	r3, r1
 80041ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	3318      	adds	r3, #24
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	440b      	add	r3, r1
 80041be:	3304      	adds	r3, #4
 80041c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	7d1b      	ldrb	r3, [r3, #20]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d111      	bne.n	80041ee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3318      	adds	r3, #24
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	4413      	add	r3, r2
 80041d6:	3304      	adds	r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	3318      	adds	r3, #24
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	440b      	add	r3, r1
 80041ea:	3304      	adds	r3, #4
 80041ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3307      	adds	r3, #7
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	061a      	lsls	r2, r3, #24
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3306      	adds	r3, #6
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3305      	adds	r3, #5
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4313      	orrs	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	3204      	adds	r2, #4
 800420e:	7812      	ldrb	r2, [r2, #0]
 8004210:	4610      	mov	r0, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	ea43 0200 	orr.w	r2, r3, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	440b      	add	r3, r1
 8004220:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004224:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3303      	adds	r3, #3
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	061a      	lsls	r2, r3, #24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3302      	adds	r3, #2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3301      	adds	r3, #1
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	4313      	orrs	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	4610      	mov	r0, r2
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6811      	ldr	r1, [r2, #0]
 800424c:	ea43 0200 	orr.w	r2, r3, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	440b      	add	r3, r1
 8004256:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800425a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3318      	adds	r3, #24
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6811      	ldr	r1, [r2, #0]
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3318      	adds	r3, #24
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	440b      	add	r3, r1
 800427a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e00e      	b.n	800429e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e006      	b.n	800429e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	@ 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042bc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d002      	beq.n	80042ca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80042c4:	7afb      	ldrb	r3, [r7, #11]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d11d      	bne.n	8004306 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004328:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d003      	beq.n	8004338 <HAL_CAN_GetRxMessage+0x24>
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b02      	cmp	r3, #2
 8004334:	f040 8103 	bne.w	800453e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0f7      	b.n	800454c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0e8      	b.n	800454c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	331b      	adds	r3, #27
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0204 	and.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10c      	bne.n	80043b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	331b      	adds	r3, #27
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0d5b      	lsrs	r3, r3, #21
 80043a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e00b      	b.n	80043ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	331b      	adds	r3, #27
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	331b      	adds	r3, #27
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0202 	and.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	331b      	adds	r3, #27
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4413      	add	r3, r2
 80043ec:	3304      	adds	r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2208      	movs	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
 80043fe:	e00b      	b.n	8004418 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	331b      	adds	r3, #27
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	331b      	adds	r3, #27
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b2da      	uxtb	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	331b      	adds	r3, #27
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	4413      	add	r3, r2
 8004452:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	4413      	add	r3, r2
 8004468:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	0a1a      	lsrs	r2, r3, #8
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	4413      	add	r3, r2
 8004482:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0c1a      	lsrs	r2, r3, #16
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3302      	adds	r3, #2
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0e1a      	lsrs	r2, r3, #24
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	3303      	adds	r3, #3
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	3304      	adds	r3, #4
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	0a1a      	lsrs	r2, r3, #8
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3305      	adds	r3, #5
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0c1a      	lsrs	r2, r3, #16
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	3306      	adds	r3, #6
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0e1a      	lsrs	r2, r3, #24
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	3307      	adds	r3, #7
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e007      	b.n	800453a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0220 	orr.w	r2, r2, #32
 8004538:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e006      	b.n	800454c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004568:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d002      	beq.n	8004576 <HAL_CAN_ActivateNotification+0x1e>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d109      	bne.n	800458a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6959      	ldr	r1, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e006      	b.n	8004598 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	@ 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d07c      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d023      	beq.n	800463c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f983 	bl	8004912 <HAL_CAN_TxMailbox0CompleteCallback>
 800460c:	e016      	b.n	800463c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	e00c      	b.n	800463c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
 8004634:	e002      	b.n	800463c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f989 	bl	800494e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d024      	beq.n	8004690 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800464e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f963 	bl	8004926 <HAL_CAN_TxMailbox1CompleteCallback>
 8004660:	e016      	b.n	8004690 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
 8004674:	e00c      	b.n	8004690 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
 8004688:	e002      	b.n	8004690 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f969 	bl	8004962 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d024      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f943 	bl	800493a <HAL_CAN_TxMailbox2CompleteCallback>
 80046b4:	e016      	b.n	80046e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c8:	e00c      	b.n	80046e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
 80046dc:	e002      	b.n	80046e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f949 	bl	8004976 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f930 	bl	800498a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fd f812 	bl	800176c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2210      	movs	r2, #16
 800476a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2208      	movs	r2, #8
 8004786:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f912 	bl	80049b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8f9 	bl	800499e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2210      	movs	r2, #16
 80047c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8fc 	bl	80049c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2208      	movs	r2, #8
 80047e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8f5 	bl	80049da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d07b      	beq.n	80048f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d072      	beq.n	80048ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	f043 0304 	orr.w	r3, r3, #4
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485e:	2b00      	cmp	r3, #0
 8004860:	d043      	beq.n	80048ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03e      	beq.n	80048ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004872:	2b60      	cmp	r3, #96	@ 0x60
 8004874:	d02b      	beq.n	80048ce <HAL_CAN_IRQHandler+0x32a>
 8004876:	2b60      	cmp	r3, #96	@ 0x60
 8004878:	d82e      	bhi.n	80048d8 <HAL_CAN_IRQHandler+0x334>
 800487a:	2b50      	cmp	r3, #80	@ 0x50
 800487c:	d022      	beq.n	80048c4 <HAL_CAN_IRQHandler+0x320>
 800487e:	2b50      	cmp	r3, #80	@ 0x50
 8004880:	d82a      	bhi.n	80048d8 <HAL_CAN_IRQHandler+0x334>
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d019      	beq.n	80048ba <HAL_CAN_IRQHandler+0x316>
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	d826      	bhi.n	80048d8 <HAL_CAN_IRQHandler+0x334>
 800488a:	2b30      	cmp	r3, #48	@ 0x30
 800488c:	d010      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x30c>
 800488e:	2b30      	cmp	r3, #48	@ 0x30
 8004890:	d822      	bhi.n	80048d8 <HAL_CAN_IRQHandler+0x334>
 8004892:	2b10      	cmp	r3, #16
 8004894:	d002      	beq.n	800489c <HAL_CAN_IRQHandler+0x2f8>
 8004896:	2b20      	cmp	r3, #32
 8004898:	d005      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800489a:	e01d      	b.n	80048d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	f043 0308 	orr.w	r3, r3, #8
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048a4:	e019      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	f043 0310 	orr.w	r3, r3, #16
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048ae:	e014      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	f043 0320 	orr.w	r3, r3, #32
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048b8:	e00f      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048c2:	e00a      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048cc:	e005      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048d6:	e000      	b.n	80048da <HAL_CAN_IRQHandler+0x336>
            break;
 80048d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80048e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2204      	movs	r2, #4
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f872 	bl	80049ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800490a:	bf00      	nop
 800490c:	3728      	adds	r7, #40	@ 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a20:	4013      	ands	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a36:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	60d3      	str	r3, [r2, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__NVIC_GetPriorityGrouping+0x18>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 0307 	and.w	r3, r3, #7
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db0b      	blt.n	8004a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4907      	ldr	r1, [pc, #28]	@ (8004aa0 <__NVIC_EnableIRQ+0x38>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e100 	.word	0xe000e100

08004aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	@ (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	@ (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	@ 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f1c3 0307 	rsb	r3, r3, #7
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	bf28      	it	cs
 8004b16:	2304      	movcs	r3, #4
 8004b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d902      	bls.n	8004b28 <NVIC_EncodePriority+0x30>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3b03      	subs	r3, #3
 8004b26:	e000      	b.n	8004b2a <NVIC_EncodePriority+0x32>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b40:	f04f 31ff 	mov.w	r1, #4294967295
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43d9      	mvns	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b50:	4313      	orrs	r3, r2
         );
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	@ 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b70:	d301      	bcc.n	8004b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b72:	2301      	movs	r3, #1
 8004b74:	e00f      	b.n	8004b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b7e:	210f      	movs	r1, #15
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	f7ff ff8e 	bl	8004aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	e000e010 	.word	0xe000e010

08004ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff29 	bl	8004a04 <__NVIC_SetPriorityGrouping>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bcc:	f7ff ff3e 	bl	8004a4c <__NVIC_GetPriorityGrouping>
 8004bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f7ff ff8e 	bl	8004af8 <NVIC_EncodePriority>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff5d 	bl	8004aa4 <__NVIC_SetPriority>
}
 8004bea:	bf00      	nop
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff31 	bl	8004a68 <__NVIC_EnableIRQ>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffa2 	bl	8004b60 <SysTick_Config>
 8004c1c:	4603      	mov	r3, r0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e037      	b.n	8004cac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004c56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9bc 	bl	800500c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_DMA_Start_IT+0x20>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e04a      	b.n	8004d6a <HAL_DMA_Start_IT+0xb6>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d13a      	bne.n	8004d5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f950 	bl	8004fb0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 020e 	orr.w	r2, r2, #14
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e00f      	b.n	8004d4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 020a 	orr.w	r2, r2, #10
 8004d38:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0204 	bic.w	r2, r2, #4
 8004d48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e005      	b.n	8004d68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
 8004d66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e02e      	b.n	8004de2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d008      	beq.n	8004da0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2204      	movs	r2, #4
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e020      	b.n	8004de2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 020e 	bic.w	r2, r2, #14
 8004dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	2101      	movs	r1, #1
 8004dca:	fa01 f202 	lsl.w	r2, r1, r2
 8004dce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d005      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2204      	movs	r2, #4
 8004e08:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e027      	b.n	8004e60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 020e 	bic.w	r2, r2, #14
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
    }
  }
  return status;
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2204      	movs	r2, #4
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d024      	beq.n	8004edc <HAL_DMA_IRQHandler+0x72>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01f      	beq.n	8004edc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0204 	bic.w	r2, r2, #4
 8004eb8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	2104      	movs	r1, #4
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d06a      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004eda:	e065      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdc>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 020a 	bic.w	r2, r2, #10
 8004f12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	2102      	movs	r1, #2
 8004f26:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d035      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f44:	e030      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d028      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d023      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 020e 	bic.w	r2, r2, #14
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
    }
  }
}
 8004fa6:	e7ff      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x13e>
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d108      	bne.n	8004ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fee:	e007      	b.n	8005000 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <DMA_CalcBaseAndBitshift+0x60>)
 800501c:	429a      	cmp	r2, r3
 800501e:	d80f      	bhi.n	8005040 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <DMA_CalcBaseAndBitshift+0x64>)
 8005028:	4413      	add	r3, r2
 800502a:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <DMA_CalcBaseAndBitshift+0x68>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	009a      	lsls	r2, r3, #2
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0f      	ldr	r2, [pc, #60]	@ (8005078 <DMA_CalcBaseAndBitshift+0x6c>)
 800503c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800503e:	e00e      	b.n	800505e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <DMA_CalcBaseAndBitshift+0x70>)
 8005048:	4413      	add	r3, r2
 800504a:	4a0a      	ldr	r2, [pc, #40]	@ (8005074 <DMA_CalcBaseAndBitshift+0x68>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a09      	ldr	r2, [pc, #36]	@ (8005080 <DMA_CalcBaseAndBitshift+0x74>)
 800505c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40020407 	.word	0x40020407
 8005070:	bffdfff8 	.word	0xbffdfff8
 8005074:	cccccccd 	.word	0xcccccccd
 8005078:	40020000 	.word	0x40020000
 800507c:	bffdfbf8 	.word	0xbffdfbf8
 8005080:	40020400 	.word	0x40020400

08005084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005092:	e154      	b.n	800533e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2101      	movs	r1, #1
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8146 	beq.w	8005338 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d005      	beq.n	80050c4 <HAL_GPIO_Init+0x40>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d130      	bne.n	8005126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	2203      	movs	r2, #3
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4013      	ands	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050fa:	2201      	movs	r2, #1
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4013      	ands	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	f003 0201 	and.w	r2, r3, #1
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b03      	cmp	r3, #3
 8005130:	d017      	beq.n	8005162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	2203      	movs	r2, #3
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4013      	ands	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d123      	bne.n	80051b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	08da      	lsrs	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3208      	adds	r2, #8
 8005176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	220f      	movs	r2, #15
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	08da      	lsrs	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3208      	adds	r2, #8
 80051b0:	6939      	ldr	r1, [r7, #16]
 80051b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	2203      	movs	r2, #3
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0203 	and.w	r2, r3, #3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a0 	beq.w	8005338 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f8:	4b58      	ldr	r3, [pc, #352]	@ (800535c <HAL_GPIO_Init+0x2d8>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4a57      	ldr	r2, [pc, #348]	@ (800535c <HAL_GPIO_Init+0x2d8>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6193      	str	r3, [r2, #24]
 8005204:	4b55      	ldr	r3, [pc, #340]	@ (800535c <HAL_GPIO_Init+0x2d8>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005210:	4a53      	ldr	r2, [pc, #332]	@ (8005360 <HAL_GPIO_Init+0x2dc>)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	089b      	lsrs	r3, r3, #2
 8005216:	3302      	adds	r3, #2
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	220f      	movs	r2, #15
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4013      	ands	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800523a:	d019      	beq.n	8005270 <HAL_GPIO_Init+0x1ec>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a49      	ldr	r2, [pc, #292]	@ (8005364 <HAL_GPIO_Init+0x2e0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_GPIO_Init+0x1e8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a48      	ldr	r2, [pc, #288]	@ (8005368 <HAL_GPIO_Init+0x2e4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00d      	beq.n	8005268 <HAL_GPIO_Init+0x1e4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a47      	ldr	r2, [pc, #284]	@ (800536c <HAL_GPIO_Init+0x2e8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <HAL_GPIO_Init+0x1e0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a46      	ldr	r2, [pc, #280]	@ (8005370 <HAL_GPIO_Init+0x2ec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_GPIO_Init+0x1dc>
 800525c:	2304      	movs	r3, #4
 800525e:	e008      	b.n	8005272 <HAL_GPIO_Init+0x1ee>
 8005260:	2305      	movs	r3, #5
 8005262:	e006      	b.n	8005272 <HAL_GPIO_Init+0x1ee>
 8005264:	2303      	movs	r3, #3
 8005266:	e004      	b.n	8005272 <HAL_GPIO_Init+0x1ee>
 8005268:	2302      	movs	r3, #2
 800526a:	e002      	b.n	8005272 <HAL_GPIO_Init+0x1ee>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_GPIO_Init+0x1ee>
 8005270:	2300      	movs	r3, #0
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	f002 0203 	and.w	r2, r2, #3
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	4093      	lsls	r3, r2
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005282:	4937      	ldr	r1, [pc, #220]	@ (8005360 <HAL_GPIO_Init+0x2dc>)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005290:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	43db      	mvns	r3, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	43db      	mvns	r3, r3
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052de:	4a25      	ldr	r2, [pc, #148]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052e4:	4b23      	ldr	r3, [pc, #140]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005308:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800530e:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43db      	mvns	r3, r3
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4013      	ands	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005332:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <HAL_GPIO_Init+0x2f0>)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3301      	adds	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f aea3 	bne.w	8005094 <HAL_GPIO_Init+0x10>
  }
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40021000 	.word	0x40021000
 8005360:	40010000 	.word	0x40010000
 8005364:	48000400 	.word	0x48000400
 8005368:	48000800 	.word	0x48000800
 800536c:	48000c00 	.word	0x48000c00
 8005370:	48001000 	.word	0x48001000
 8005374:	40010400 	.word	0x40010400

08005378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	887b      	ldrh	r3, [r7, #2]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	e001      	b.n	800539a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
 80053b4:	4613      	mov	r3, r2
 80053b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053b8:	787b      	ldrb	r3, [r7, #1]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053c4:	e002      	b.n	80053cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053c6:	887a      	ldrh	r2, [r7, #2]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e08d      	b.n	8005506 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff96 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	@ 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e006      	b.n	8005460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800545e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d108      	bne.n	800547a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005476:	605a      	str	r2, [r3, #4]
 8005478:	e007      	b.n	800548a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4603      	mov	r3, r0
 8005520:	817b      	strh	r3, [r7, #10]
 8005522:	460b      	mov	r3, r1
 8005524:	813b      	strh	r3, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b20      	cmp	r3, #32
 8005534:	f040 80f9 	bne.w	800572a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_I2C_Mem_Write+0x34>
 800553e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0ed      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_I2C_Mem_Write+0x4e>
 800555a:	2302      	movs	r3, #2
 800555c:	e0e6      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005566:	f7fd fb7b 	bl	8002c60 <HAL_GetTick>
 800556a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2319      	movs	r3, #25
 8005572:	2201      	movs	r2, #1
 8005574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f955 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0d1      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	@ 0x21
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2240      	movs	r2, #64	@ 0x40
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b0:	88f8      	ldrh	r0, [r7, #6]
 80055b2:	893a      	ldrh	r2, [r7, #8]
 80055b4:	8979      	ldrh	r1, [r7, #10]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4603      	mov	r3, r0
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f8b9 	bl	8005738 <I2C_RequestMemoryWrite>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0a9      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2bff      	cmp	r3, #255	@ 0xff
 80055e0:	d90e      	bls.n	8005600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	22ff      	movs	r2, #255	@ 0xff
 80055e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	8979      	ldrh	r1, [r7, #10]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fad9 	bl	8005bb0 <I2C_TransferConfig>
 80055fe:	e00f      	b.n	8005620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	b2da      	uxtb	r2, r3
 8005610:	8979      	ldrh	r1, [r7, #10]
 8005612:	2300      	movs	r3, #0
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fac8 	bl	8005bb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f958 	bl	80058da <I2C_WaitOnTXISFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e07b      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	781a      	ldrb	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d034      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x1c8>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d130      	bne.n	80056d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	@ 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f8d1 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e04d      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2bff      	cmp	r3, #255	@ 0xff
 8005698:	d90e      	bls.n	80056b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	22ff      	movs	r2, #255	@ 0xff
 800569e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa7d 	bl	8005bb0 <I2C_TransferConfig>
 80056b6:	e00f      	b.n	80056d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	8979      	ldrh	r1, [r7, #10]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fa6c 	bl	8005bb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d19e      	bne.n	8005620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f93e 	bl	8005968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e01a      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2220      	movs	r2, #32
 80056fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <HAL_I2C_Mem_Write+0x224>)
 800570a:	400b      	ands	r3, r1
 800570c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	fe00e800 	.word	0xfe00e800

08005738 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	8979      	ldrh	r1, [r7, #10]
 8005758:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <I2C_RequestMemoryWrite+0xa4>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fa25 	bl	8005bb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f8b5 	bl	80058da <I2C_WaitOnTXISFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e02c      	b.n	80057d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	629a      	str	r2, [r3, #40]	@ 0x28
 800578a:	e015      	b.n	80057b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800578c:	893b      	ldrh	r3, [r7, #8]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b29b      	uxth	r3, r3
 8005792:	b2da      	uxtb	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f89b 	bl	80058da <I2C_WaitOnTXISFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e012      	b.n	80057d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2200      	movs	r2, #0
 80057c0:	2180      	movs	r1, #128	@ 0x80
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f830 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	80002000 	.word	0x80002000

080057e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d103      	bne.n	80057fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d007      	beq.n	800581c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	619a      	str	r2, [r3, #24]
  }
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005838:	e03b      	b.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f8d6 	bl	80059f0 <I2C_IsErrorOccurred>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e041      	b.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d02d      	beq.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fd fa03 	bl	8002c60 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d122      	bne.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	429a      	cmp	r2, r3
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	429a      	cmp	r2, r3
 8005888:	d113      	bne.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e00f      	b.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d0b4      	beq.n	800583a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e6:	e033      	b.n	8005950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f87f 	bl	80059f0 <I2C_IsErrorOccurred>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e031      	b.n	8005960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d025      	beq.n	8005950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005904:	f7fd f9ac 	bl	8002c60 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11a      	bne.n	8005950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d013      	beq.n	8005950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e007      	b.n	8005960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d1c4      	bne.n	80058e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005974:	e02f      	b.n	80059d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f838 	bl	80059f0 <I2C_IsErrorOccurred>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e02d      	b.n	80059e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598a:	f7fd f969 	bl	8002c60 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11a      	bne.n	80059d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d013      	beq.n	80059d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e007      	b.n	80059e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d1c8      	bne.n	8005976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	@ 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d068      	beq.n	8005aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2210      	movs	r2, #16
 8005a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a24:	e049      	b.n	8005aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d045      	beq.n	8005aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a2e:	f7fd f917 	bl	8002c60 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <I2C_IsErrorOccurred+0x54>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d13a      	bne.n	8005aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a66:	d121      	bne.n	8005aac <I2C_IsErrorOccurred+0xbc>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a6e:	d01d      	beq.n	8005aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d01a      	beq.n	8005aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a86:	f7fd f8eb 	bl	8002c60 <HAL_GetTick>
 8005a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a8c:	e00e      	b.n	8005aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a8e:	f7fd f8e7 	bl	8002c60 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b19      	cmp	r3, #25
 8005a9a:	d907      	bls.n	8005aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005aaa:	e006      	b.n	8005aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d1e9      	bne.n	8005a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d003      	beq.n	8005ad0 <I2C_IsErrorOccurred+0xe0>
 8005ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0aa      	beq.n	8005a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2220      	movs	r2, #32
 8005ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f043 0304 	orr.w	r3, r3, #4
 8005ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f043 0308 	orr.w	r3, r3, #8
 8005b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f043 0302 	orr.w	r3, r3, #2
 8005b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01c      	beq.n	8005b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fe3b 	bl	80057e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <I2C_IsErrorOccurred+0x1bc>)
 8005b76:	400b      	ands	r3, r1
 8005b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3728      	adds	r7, #40	@ 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	fe00e800 	.word	0xfe00e800

08005bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bc8:	7a7b      	ldrb	r3, [r7, #9]
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	0d5b      	lsrs	r3, r3, #21
 8005bea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005bee:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <I2C_TransferConfig+0x60>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	ea02 0103 	and.w	r1, r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	03ff63ff 	.word	0x03ff63ff

08005c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d138      	bne.n	8005c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e032      	b.n	8005c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	@ 0x24
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d139      	bne.n	8005d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e033      	b.n	8005d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2224      	movs	r2, #36	@ 0x24
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f000 bff4 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 816d 	beq.w	800605a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d80:	4bb4      	ldr	r3, [pc, #720]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d00c      	beq.n	8005da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d8c:	4bb1      	ldr	r3, [pc, #708]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d157      	bne.n	8005e48 <HAL_RCC_OscConfig+0x104>
 8005d98:	4bae      	ldr	r3, [pc, #696]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da4:	d150      	bne.n	8005e48 <HAL_RCC_OscConfig+0x104>
 8005da6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005daa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbe:	fab3 f383 	clz	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005dc6:	d802      	bhi.n	8005dce <HAL_RCC_OscConfig+0x8a>
 8005dc8:	4ba2      	ldr	r3, [pc, #648]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	e015      	b.n	8005dfa <HAL_RCC_OscConfig+0xb6>
 8005dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005dd2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005de6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005dea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005df6:	4b97      	ldr	r3, [pc, #604]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005dfe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005e02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005e06:	fa92 f2a2 	rbit	r2, r2
 8005e0a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005e0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005e12:	fab2 f282 	clz	r2, r2
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	f002 021f 	and.w	r2, r2, #31
 8005e22:	2101      	movs	r1, #1
 8005e24:	fa01 f202 	lsl.w	r2, r1, r2
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8114 	beq.w	8006058 <HAL_RCC_OscConfig+0x314>
 8005e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 810b 	bne.w	8006058 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f000 bf85 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d106      	bne.n	8005e68 <HAL_RCC_OscConfig+0x124>
 8005e5a:	4b7e      	ldr	r3, [pc, #504]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e036      	b.n	8005ed6 <HAL_RCC_OscConfig+0x192>
 8005e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10c      	bne.n	8005e92 <HAL_RCC_OscConfig+0x14e>
 8005e78:	4b76      	ldr	r3, [pc, #472]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a75      	ldr	r2, [pc, #468]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b73      	ldr	r3, [pc, #460]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a72      	ldr	r2, [pc, #456]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	e021      	b.n	8005ed6 <HAL_RCC_OscConfig+0x192>
 8005e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea2:	d10c      	bne.n	8005ebe <HAL_RCC_OscConfig+0x17a>
 8005ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005eaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b68      	ldr	r3, [pc, #416]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a67      	ldr	r2, [pc, #412]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e00b      	b.n	8005ed6 <HAL_RCC_OscConfig+0x192>
 8005ebe:	4b65      	ldr	r3, [pc, #404]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a64      	ldr	r2, [pc, #400]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b62      	ldr	r3, [pc, #392]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a61      	ldr	r2, [pc, #388]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	f023 020f 	bic.w	r2, r3, #15
 8005ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	495a      	ldr	r1, [pc, #360]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d054      	beq.n	8005faa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f00:	f7fc feae 	bl	8002c60 <HAL_GetTick>
 8005f04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f08:	e00a      	b.n	8005f20 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f0a:	f7fc fea9 	bl	8002c60 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d902      	bls.n	8005f20 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	f000 bf19 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 8005f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f24:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005f2c:	fa93 f3a3 	rbit	r3, r3
 8005f30:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005f34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f38:	fab3 f383 	clz	r3, r3
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f40:	d802      	bhi.n	8005f48 <HAL_RCC_OscConfig+0x204>
 8005f42:	4b44      	ldr	r3, [pc, #272]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	e015      	b.n	8005f74 <HAL_RCC_OscConfig+0x230>
 8005f48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f4c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005f54:	fa93 f3a3 	rbit	r3, r3
 8005f58:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f60:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005f64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005f68:	fa93 f3a3 	rbit	r3, r3
 8005f6c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005f70:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f78:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005f7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005f80:	fa92 f2a2 	rbit	r2, r2
 8005f84:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005f88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005f8c:	fab2 f282 	clz	r2, r2
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f042 0220 	orr.w	r2, r2, #32
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	f002 021f 	and.w	r2, r2, #31
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0b0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x1c6>
 8005fa8:	e057      	b.n	800605a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fc fe59 	bl	8002c60 <HAL_GetTick>
 8005fae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb4:	f7fc fe54 	bl	8002c60 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b64      	cmp	r3, #100	@ 0x64
 8005fc2:	d902      	bls.n	8005fca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	f000 bec4 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 8005fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005fd6:	fa93 f3a3 	rbit	r3, r3
 8005fda:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005fde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe2:	fab3 f383 	clz	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b3f      	cmp	r3, #63	@ 0x3f
 8005fea:	d802      	bhi.n	8005ff2 <HAL_RCC_OscConfig+0x2ae>
 8005fec:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	e015      	b.n	800601e <HAL_RCC_OscConfig+0x2da>
 8005ff2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ff6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005ffe:	fa93 f3a3 	rbit	r3, r3
 8006002:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006006:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800600a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800600e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8006012:	fa93 f3a3 	rbit	r3, r3
 8006016:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800601a:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <HAL_RCC_OscConfig+0x310>)
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006022:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8006026:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800602a:	fa92 f2a2 	rbit	r2, r2
 800602e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8006032:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8006036:	fab2 f282 	clz	r2, r2
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	f042 0220 	orr.w	r2, r2, #32
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	f002 021f 	and.w	r2, r2, #31
 8006046:	2101      	movs	r1, #1
 8006048:	fa01 f202 	lsl.w	r2, r1, r2
 800604c:	4013      	ands	r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1b0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x270>
 8006052:	e002      	b.n	800605a <HAL_RCC_OscConfig+0x316>
 8006054:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800605e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 816c 	beq.w	8006348 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006070:	4bcc      	ldr	r3, [pc, #816]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800607c:	4bc9      	ldr	r3, [pc, #804]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b08      	cmp	r3, #8
 8006086:	d16d      	bne.n	8006164 <HAL_RCC_OscConfig+0x420>
 8006088:	4bc6      	ldr	r3, [pc, #792]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d167      	bne.n	8006164 <HAL_RCC_OscConfig+0x420>
 8006094:	2302      	movs	r3, #2
 8006096:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80060a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	fab3 f383 	clz	r3, r3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80060b2:	d802      	bhi.n	80060ba <HAL_RCC_OscConfig+0x376>
 80060b4:	4bbb      	ldr	r3, [pc, #748]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	e013      	b.n	80060e2 <HAL_RCC_OscConfig+0x39e>
 80060ba:	2302      	movs	r3, #2
 80060bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80060cc:	2302      	movs	r3, #2
 80060ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80060d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060d6:	fa93 f3a3 	rbit	r3, r3
 80060da:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80060de:	4bb1      	ldr	r3, [pc, #708]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	2202      	movs	r2, #2
 80060e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80060e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80060ec:	fa92 f2a2 	rbit	r2, r2
 80060f0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80060f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80060f8:	fab2 f282 	clz	r2, r2
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	f042 0220 	orr.w	r2, r2, #32
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	f002 021f 	and.w	r2, r2, #31
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f202 	lsl.w	r2, r1, r2
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <HAL_RCC_OscConfig+0x3e6>
 8006114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d002      	beq.n	800612a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f000 be14 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612a:	4b9e      	ldr	r3, [pc, #632]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	21f8      	movs	r1, #248	@ 0xf8
 8006140:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006144:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006148:	fa91 f1a1 	rbit	r1, r1
 800614c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8006150:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006154:	fab1 f181 	clz	r1, r1
 8006158:	b2c9      	uxtb	r1, r1
 800615a:	408b      	lsls	r3, r1
 800615c:	4991      	ldr	r1, [pc, #580]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006162:	e0f1      	b.n	8006348 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006168:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8083 	beq.w	800627c <HAL_RCC_OscConfig+0x538>
 8006176:	2301      	movs	r3, #1
 8006178:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006188:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800618c:	fab3 f383 	clz	r3, r3
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006196:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	461a      	mov	r2, r3
 800619e:	2301      	movs	r3, #1
 80061a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fc fd5d 	bl	8002c60 <HAL_GetTick>
 80061a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fc fd58 	bl	8002c60 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d902      	bls.n	80061c2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	f000 bdc8 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80061d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b3f      	cmp	r3, #63	@ 0x3f
 80061e0:	d802      	bhi.n	80061e8 <HAL_RCC_OscConfig+0x4a4>
 80061e2:	4b70      	ldr	r3, [pc, #448]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	e013      	b.n	8006210 <HAL_RCC_OscConfig+0x4cc>
 80061e8:	2302      	movs	r3, #2
 80061ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80061f2:	fa93 f3a3 	rbit	r3, r3
 80061f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80061fa:	2302      	movs	r3, #2
 80061fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006200:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8006204:	fa93 f3a3 	rbit	r3, r3
 8006208:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800620c:	4b65      	ldr	r3, [pc, #404]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	2202      	movs	r2, #2
 8006212:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8006216:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800621a:	fa92 f2a2 	rbit	r2, r2
 800621e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8006222:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8006226:	fab2 f282 	clz	r2, r2
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	f042 0220 	orr.w	r2, r2, #32
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	f002 021f 	and.w	r2, r2, #31
 8006236:	2101      	movs	r1, #1
 8006238:	fa01 f202 	lsl.w	r2, r1, r2
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0b4      	beq.n	80061ac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006242:	4b58      	ldr	r3, [pc, #352]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800624a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800624e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	21f8      	movs	r1, #248	@ 0xf8
 8006258:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006260:	fa91 f1a1 	rbit	r1, r1
 8006264:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006268:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800626c:	fab1 f181 	clz	r1, r1
 8006270:	b2c9      	uxtb	r1, r1
 8006272:	408b      	lsls	r3, r1
 8006274:	494b      	ldr	r1, [pc, #300]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
 800627a:	e065      	b.n	8006348 <HAL_RCC_OscConfig+0x604>
 800627c:	2301      	movs	r3, #1
 800627e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006286:	fa93 f3a3 	rbit	r3, r3
 800628a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800628e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800629c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	461a      	mov	r2, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fc fcda 	bl	8002c60 <HAL_GetTick>
 80062ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b2:	f7fc fcd5 	bl	8002c60 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d902      	bls.n	80062c8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	f000 bd45 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 80062c8:	2302      	movs	r3, #2
 80062ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80062e6:	d802      	bhi.n	80062ee <HAL_RCC_OscConfig+0x5aa>
 80062e8:	4b2e      	ldr	r3, [pc, #184]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	e013      	b.n	8006316 <HAL_RCC_OscConfig+0x5d2>
 80062ee:	2302      	movs	r3, #2
 80062f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006300:	2302      	movs	r3, #2
 8006302:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006306:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006312:	4b24      	ldr	r3, [pc, #144]	@ (80063a4 <HAL_RCC_OscConfig+0x660>)
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	2202      	movs	r2, #2
 8006318:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800631c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006320:	fa92 f2a2 	rbit	r2, r2
 8006324:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8006328:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800632c:	fab2 f282 	clz	r2, r2
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	f042 0220 	orr.w	r2, r2, #32
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	f002 021f 	and.w	r2, r2, #31
 800633c:	2101      	movs	r1, #1
 800633e:	fa01 f202 	lsl.w	r2, r1, r2
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1b4      	bne.n	80062b2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800634c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8115 	beq.w	8006588 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800635e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d07e      	beq.n	800646c <HAL_RCC_OscConfig+0x728>
 800636e:	2301      	movs	r3, #1
 8006370:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006374:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006378:	fa93 f3a3 	rbit	r3, r3
 800637c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006384:	fab3 f383 	clz	r3, r3
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <HAL_RCC_OscConfig+0x664>)
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	461a      	mov	r2, r3
 8006394:	2301      	movs	r3, #1
 8006396:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fc fc62 	bl	8002c60 <HAL_GetTick>
 800639c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a0:	e00f      	b.n	80063c2 <HAL_RCC_OscConfig+0x67e>
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fc fc58 	bl	8002c60 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d902      	bls.n	80063c2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	f000 bcc8 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 80063c2:	2302      	movs	r3, #2
 80063c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80063dc:	2202      	movs	r2, #2
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	fa93 f2a3 	rbit	r2, r3
 80063ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006400:	2202      	movs	r2, #2
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	fa93 f2a3 	rbit	r2, r3
 8006412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800641a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641c:	4bb0      	ldr	r3, [pc, #704]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800641e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006424:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006428:	2102      	movs	r1, #2
 800642a:	6019      	str	r1, [r3, #0]
 800642c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006430:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	fa93 f1a3 	rbit	r1, r3
 800643a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800643e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006442:	6019      	str	r1, [r3, #0]
  return result;
 8006444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006448:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2101      	movs	r1, #1
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0a0      	beq.n	80063ac <HAL_RCC_OscConfig+0x668>
 800646a:	e08d      	b.n	8006588 <HAL_RCC_OscConfig+0x844>
 800646c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006470:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	fa93 f2a3 	rbit	r2, r3
 8006486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800648a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800648e:	601a      	str	r2, [r3, #0]
  return result;
 8006490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006494:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006498:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	4b90      	ldr	r3, [pc, #576]	@ (80066e4 <HAL_RCC_OscConfig+0x9a0>)
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ae:	f7fc fbd7 	bl	8002c60 <HAL_GetTick>
 80064b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fc fbd2 	bl	8002c60 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d902      	bls.n	80064ce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	f000 bc42 	b.w	8006d52 <HAL_RCC_OscConfig+0x100e>
 80064ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80064d6:	2202      	movs	r2, #2
 80064d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	fa93 f2a3 	rbit	r2, r3
 80064e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80064fa:	2202      	movs	r2, #2
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006502:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	fa93 f2a3 	rbit	r2, r3
 800650c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800651e:	2202      	movs	r2, #2
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006526:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	fa93 f2a3 	rbit	r2, r3
 8006530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006534:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006538:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653a:	4b69      	ldr	r3, [pc, #420]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800653c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800653e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006542:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006546:	2102      	movs	r1, #2
 8006548:	6019      	str	r1, [r3, #0]
 800654a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800654e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fa93 f1a3 	rbit	r1, r3
 8006558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800655c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006560:	6019      	str	r1, [r3, #0]
  return result;
 8006562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006566:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	fab3 f383 	clz	r3, r3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d197      	bne.n	80064b8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800658c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 819e 	beq.w	80068da <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a4:	4b4e      	ldr	r3, [pc, #312]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d116      	bne.n	80065de <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b0:	4b4b      	ldr	r3, [pc, #300]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4a4a      	ldr	r2, [pc, #296]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80065b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	61d3      	str	r3, [r2, #28]
 80065bc:	4b48      	ldr	r3, [pc, #288]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80065c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80065d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065de:	4b42      	ldr	r3, [pc, #264]	@ (80066e8 <HAL_RCC_OscConfig+0x9a4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d11a      	bne.n	8006620 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ea:	4b3f      	ldr	r3, [pc, #252]	@ (80066e8 <HAL_RCC_OscConfig+0x9a4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3e      	ldr	r2, [pc, #248]	@ (80066e8 <HAL_RCC_OscConfig+0x9a4>)
 80065f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f6:	f7fc fb33 	bl	8002c60 <HAL_GetTick>
 80065fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	e009      	b.n	8006614 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006600:	f7fc fb2e 	bl	8002c60 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b64      	cmp	r3, #100	@ 0x64
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e39e      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	4b34      	ldr	r3, [pc, #208]	@ (80066e8 <HAL_RCC_OscConfig+0x9a4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ef      	beq.n	8006600 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006624:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d106      	bne.n	800663e <HAL_RCC_OscConfig+0x8fa>
 8006630:	4b2b      	ldr	r3, [pc, #172]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	4a2a      	ldr	r2, [pc, #168]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	6213      	str	r3, [r2, #32]
 800663c:	e035      	b.n	80066aa <HAL_RCC_OscConfig+0x966>
 800663e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <HAL_RCC_OscConfig+0x924>
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	4a23      	ldr	r2, [pc, #140]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	6213      	str	r3, [r2, #32]
 800665a:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	4a20      	ldr	r2, [pc, #128]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	6213      	str	r3, [r2, #32]
 8006666:	e020      	b.n	80066aa <HAL_RCC_OscConfig+0x966>
 8006668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800666c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b05      	cmp	r3, #5
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x94e>
 8006678:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6213      	str	r3, [r2, #32]
 8006684:	4b16      	ldr	r3, [pc, #88]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	4a15      	ldr	r2, [pc, #84]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6213      	str	r3, [r2, #32]
 8006690:	e00b      	b.n	80066aa <HAL_RCC_OscConfig+0x966>
 8006692:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4a12      	ldr	r2, [pc, #72]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6213      	str	r3, [r2, #32]
 800669e:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	4a0f      	ldr	r2, [pc, #60]	@ (80066e0 <HAL_RCC_OscConfig+0x99c>)
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8087 	beq.w	80067ca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066bc:	f7fc fad0 	bl	8002c60 <HAL_GetTick>
 80066c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c4:	e012      	b.n	80066ec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c6:	f7fc facb 	bl	8002c60 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d908      	bls.n	80066ec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e339      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 80066de:	bf00      	nop
 80066e0:	40021000 	.word	0x40021000
 80066e4:	10908120 	.word	0x10908120
 80066e8:	40007000 	.word	0x40007000
 80066ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80066f4:	2202      	movs	r2, #2
 80066f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	fa93 f2a3 	rbit	r2, r3
 8006706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800670a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006714:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006718:	2202      	movs	r2, #2
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006720:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	fa93 f2a3 	rbit	r2, r3
 800672a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800672e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006732:	601a      	str	r2, [r3, #0]
  return result;
 8006734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006738:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800673c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673e:	fab3 f383 	clz	r3, r3
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_RCC_OscConfig+0xa10>
 800674e:	4b98      	ldr	r3, [pc, #608]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	e013      	b.n	800677c <HAL_RCC_OscConfig+0xa38>
 8006754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006758:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800675c:	2202      	movs	r2, #2
 800675e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006764:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	fa93 f2a3 	rbit	r2, r3
 800676e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006772:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	4b8d      	ldr	r3, [pc, #564]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006780:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006784:	2102      	movs	r1, #2
 8006786:	6011      	str	r1, [r2, #0]
 8006788:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800678c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	fa92 f1a2 	rbit	r1, r2
 8006796:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800679a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800679e:	6011      	str	r1, [r2, #0]
  return result;
 80067a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	fab2 f282 	clz	r2, r2
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	f002 021f 	and.w	r2, r2, #31
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 f202 	lsl.w	r2, r1, r2
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f43f af7f 	beq.w	80066c6 <HAL_RCC_OscConfig+0x982>
 80067c8:	e07d      	b.n	80068c6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ca:	f7fc fa49 	bl	8002c60 <HAL_GetTick>
 80067ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d2:	e00b      	b.n	80067ec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067d4:	f7fc fa44 	bl	8002c60 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e2b2      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 80067ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80067f4:	2202      	movs	r2, #2
 80067f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	fa93 f2a3 	rbit	r2, r3
 8006806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006814:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006818:	2202      	movs	r2, #2
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006820:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	fa93 f2a3 	rbit	r2, r3
 800682a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800682e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006832:	601a      	str	r2, [r3, #0]
  return result;
 8006834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006838:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800683c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800683e:	fab3 f383 	clz	r3, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <HAL_RCC_OscConfig+0xb10>
 800684e:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	e013      	b.n	800687c <HAL_RCC_OscConfig+0xb38>
 8006854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006858:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800685c:	2202      	movs	r2, #2
 800685e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006864:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	fa93 f2a3 	rbit	r2, r3
 800686e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006872:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	4b4d      	ldr	r3, [pc, #308]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006880:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006884:	2102      	movs	r1, #2
 8006886:	6011      	str	r1, [r2, #0]
 8006888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800688c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	fa92 f1a2 	rbit	r1, r2
 8006896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800689a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800689e:	6011      	str	r1, [r2, #0]
  return result;
 80068a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	fab2 f282 	clz	r2, r2
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	f002 021f 	and.w	r2, r2, #31
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f202 	lsl.w	r2, r1, r2
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d186      	bne.n	80067d4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068c6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ce:	4b38      	ldr	r3, [pc, #224]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4a37      	ldr	r2, [pc, #220]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 80068d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8232 	beq.w	8006d50 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ec:	4b30      	ldr	r3, [pc, #192]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	f000 8201 	beq.w	8006cfc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	2b02      	cmp	r3, #2
 8006908:	f040 8157 	bne.w	8006bba <HAL_RCC_OscConfig+0xe76>
 800690c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006910:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	fa93 f2a3 	rbit	r2, r3
 8006928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800692c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006930:	601a      	str	r2, [r3, #0]
  return result;
 8006932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006936:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800693a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006946:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006952:	f7fc f985 	bl	8002c60 <HAL_GetTick>
 8006956:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800695a:	e009      	b.n	8006970 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695c:	f7fc f980 	bl	8002c60 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1f0      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 8006970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006974:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800697c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006982:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	fa93 f2a3 	rbit	r2, r3
 800698c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006990:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006994:	601a      	str	r2, [r3, #0]
  return result;
 8006996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800699a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800699e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a0:	fab3 f383 	clz	r3, r3
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80069a8:	d804      	bhi.n	80069b4 <HAL_RCC_OscConfig+0xc70>
 80069aa:	4b01      	ldr	r3, [pc, #4]	@ (80069b0 <HAL_RCC_OscConfig+0xc6c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	e029      	b.n	8006a04 <HAL_RCC_OscConfig+0xcc0>
 80069b0:	40021000 	.word	0x40021000
 80069b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80069bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	fa93 f2a3 	rbit	r2, r3
 80069d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80069e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	fa93 f2a3 	rbit	r2, r3
 80069f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	4bc3      	ldr	r3, [pc, #780]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006a0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a16:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	fa92 f1a2 	rbit	r1, r2
 8006a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a24:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006a28:	6011      	str	r1, [r2, #0]
  return result;
 8006a2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	fab2 f282 	clz	r2, r2
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	f042 0220 	orr.w	r2, r2, #32
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	f002 021f 	and.w	r2, r2, #31
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d185      	bne.n	800695c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a50:	4baf      	ldr	r3, [pc, #700]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	430b      	orrs	r3, r1
 8006a72:	49a7      	ldr	r1, [pc, #668]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	604b      	str	r3, [r1, #4]
 8006a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a8a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	fa93 f2a3 	rbit	r2, r3
 8006a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006a9c:	601a      	str	r2, [r3, #0]
  return result;
 8006a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aa2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006aa6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006ab2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2301      	movs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abe:	f7fc f8cf 	bl	8002c60 <HAL_GetTick>
 8006ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ac6:	e009      	b.n	8006adc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac8:	f7fc f8ca 	bl	8002c60 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e13a      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 8006adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	fa93 f2a3 	rbit	r2, r3
 8006af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006afc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006b00:	601a      	str	r2, [r3, #0]
  return result;
 8006b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b06:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b0c:	fab3 f383 	clz	r3, r3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b14:	d802      	bhi.n	8006b1c <HAL_RCC_OscConfig+0xdd8>
 8006b16:	4b7e      	ldr	r3, [pc, #504]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	e027      	b.n	8006b6c <HAL_RCC_OscConfig+0xe28>
 8006b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b20:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006b24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	fa93 f2a3 	rbit	r2, r3
 8006b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b46:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006b4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	fa93 f2a3 	rbit	r2, r3
 8006b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b62:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	4b69      	ldr	r3, [pc, #420]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b70:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b74:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b7e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	fa92 f1a2 	rbit	r1, r2
 8006b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b8c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b90:	6011      	str	r1, [r2, #0]
  return result;
 8006b92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b96:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	fab2 f282 	clz	r2, r2
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	f042 0220 	orr.w	r2, r2, #32
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	f002 021f 	and.w	r2, r2, #31
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d087      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xd84>
 8006bb8:	e0ca      	b.n	8006d50 <HAL_RCC_OscConfig+0x100c>
 8006bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bbe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006bc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bcc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	fa93 f2a3 	rbit	r2, r3
 8006bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bda:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006bde:	601a      	str	r2, [r3, #0]
  return result;
 8006be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006be4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006be8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bea:	fab3 f383 	clz	r3, r3
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006bf4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7fc f82e 	bl	8002c60 <HAL_GetTick>
 8006c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c08:	e009      	b.n	8006c1e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0a:	f7fc f829 	bl	8002c60 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e099      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 8006c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006c26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	fa93 f2a3 	rbit	r2, r3
 8006c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c3e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006c42:	601a      	str	r2, [r3, #0]
  return result;
 8006c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c48:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c4e:	fab3 f383 	clz	r3, r3
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c56:	d802      	bhi.n	8006c5e <HAL_RCC_OscConfig+0xf1a>
 8006c58:	4b2d      	ldr	r3, [pc, #180]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	e027      	b.n	8006cae <HAL_RCC_OscConfig+0xf6a>
 8006c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006c66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	fa93 f2a3 	rbit	r2, r3
 8006c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c7e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c96:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fa93 f2a3 	rbit	r2, r3
 8006ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ca4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <HAL_RCC_OscConfig+0xfcc>)
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cb2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006cb6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006cba:	6011      	str	r1, [r2, #0]
 8006cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cc0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	fa92 f1a2 	rbit	r1, r2
 8006cca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006cd2:	6011      	str	r1, [r2, #0]
  return result;
 8006cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cd8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	fab2 f282 	clz	r2, r2
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	f042 0220 	orr.w	r2, r2, #32
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	f002 021f 	and.w	r2, r2, #31
 8006cee:	2101      	movs	r1, #1
 8006cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d187      	bne.n	8006c0a <HAL_RCC_OscConfig+0xec6>
 8006cfa:	e029      	b.n	8006d50 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d103      	bne.n	8006d14 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e020      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
 8006d10:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d14:	4b11      	ldr	r3, [pc, #68]	@ (8006d5c <HAL_RCC_OscConfig+0x1018>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006d20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d10b      	bne.n	8006d4c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006d34:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006d38:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40021000 	.word	0x40021000

08006d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b09e      	sub	sp, #120	@ 0x78
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e154      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d78:	4b89      	ldr	r3, [pc, #548]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d910      	bls.n	8006da8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b86      	ldr	r3, [pc, #536]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 0207 	bic.w	r2, r3, #7
 8006d8e:	4984      	ldr	r1, [pc, #528]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d96:	4b82      	ldr	r3, [pc, #520]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d001      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e13c      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4978      	ldr	r1, [pc, #480]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80cd 	beq.w	8006f6e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d137      	bne.n	8006e4c <HAL_RCC_ClockConfig+0xec>
 8006ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006de0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de4:	fa93 f3a3 	rbit	r3, r3
 8006de8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dec:	fab3 f383 	clz	r3, r3
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006df4:	d802      	bhi.n	8006dfc <HAL_RCC_ClockConfig+0x9c>
 8006df6:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	e00f      	b.n	8006e1c <HAL_RCC_ClockConfig+0xbc>
 8006dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e04:	fa93 f3a3 	rbit	r3, r3
 8006e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e12:	fa93 f3a3 	rbit	r3, r3
 8006e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e18:	4b62      	ldr	r3, [pc, #392]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e24:	fa92 f2a2 	rbit	r2, r2
 8006e28:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006e2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e2c:	fab2 f282 	clz	r2, r2
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	f042 0220 	orr.w	r2, r2, #32
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	f002 021f 	and.w	r2, r2, #31
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d171      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0ea      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d137      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x164>
 8006e54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5c:	fa93 f3a3 	rbit	r3, r3
 8006e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e64:	fab3 f383 	clz	r3, r3
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e6c:	d802      	bhi.n	8006e74 <HAL_RCC_ClockConfig+0x114>
 8006e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	e00f      	b.n	8006e94 <HAL_RCC_ClockConfig+0x134>
 8006e74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e7c:	fa93 f3a3 	rbit	r3, r3
 8006e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8a:	fa93 f3a3 	rbit	r3, r3
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e90:	4b44      	ldr	r3, [pc, #272]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e98:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e9c:	fa92 f2a2 	rbit	r2, r2
 8006ea0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ea4:	fab2 f282 	clz	r2, r2
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	f042 0220 	orr.w	r2, r2, #32
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	f002 021f 	and.w	r2, r2, #31
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d135      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0ae      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	fa93 f3a3 	rbit	r3, r3
 8006ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b3f      	cmp	r3, #63	@ 0x3f
 8006eda:	d802      	bhi.n	8006ee2 <HAL_RCC_ClockConfig+0x182>
 8006edc:	4b31      	ldr	r3, [pc, #196]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	e00d      	b.n	8006efe <HAL_RCC_ClockConfig+0x19e>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	fa93 f3a3 	rbit	r3, r3
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eee:	2302      	movs	r3, #2
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	fa93 f3a3 	rbit	r3, r3
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	2202      	movs	r2, #2
 8006f00:	61ba      	str	r2, [r7, #24]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	fa92 f2a2 	rbit	r2, r2
 8006f08:	617a      	str	r2, [r7, #20]
  return result;
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	fab2 f282 	clz	r2, r2
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	f042 0220 	orr.w	r2, r2, #32
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	f002 021f 	and.w	r2, r2, #31
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e07a      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f023 0203 	bic.w	r2, r3, #3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	491a      	ldr	r1, [pc, #104]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f3e:	f7fb fe8f 	bl	8002c60 <HAL_GetTick>
 8006f42:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f46:	f7fb fe8b 	bl	8002c60 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e062      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5c:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 020c 	and.w	r2, r3, #12
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d1eb      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d215      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7c:	4b08      	ldr	r3, [pc, #32]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f023 0207 	bic.w	r2, r3, #7
 8006f84:	4906      	ldr	r1, [pc, #24]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8c:	4b04      	ldr	r3, [pc, #16]	@ (8006fa0 <HAL_RCC_ClockConfig+0x240>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d006      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e041      	b.n	8007022 <HAL_RCC_ClockConfig+0x2c2>
 8006f9e:	bf00      	nop
 8006fa0:	40022000 	.word	0x40022000
 8006fa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800702c <HAL_RCC_ClockConfig+0x2cc>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	491a      	ldr	r1, [pc, #104]	@ (800702c <HAL_RCC_ClockConfig+0x2cc>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd2:	4b16      	ldr	r3, [pc, #88]	@ (800702c <HAL_RCC_ClockConfig+0x2cc>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4912      	ldr	r1, [pc, #72]	@ (800702c <HAL_RCC_ClockConfig+0x2cc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006fe6:	f000 f829 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8006fea:	4601      	mov	r1, r0
 8006fec:	4b0f      	ldr	r3, [pc, #60]	@ (800702c <HAL_RCC_ClockConfig+0x2cc>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ff4:	22f0      	movs	r2, #240	@ 0xf0
 8006ff6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	fa92 f2a2 	rbit	r2, r2
 8006ffe:	60fa      	str	r2, [r7, #12]
  return result;
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	fab2 f282 	clz	r2, r2
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	40d3      	lsrs	r3, r2
 800700a:	4a09      	ldr	r2, [pc, #36]	@ (8007030 <HAL_RCC_ClockConfig+0x2d0>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	fa21 f303 	lsr.w	r3, r1, r3
 8007012:	4a08      	ldr	r2, [pc, #32]	@ (8007034 <HAL_RCC_ClockConfig+0x2d4>)
 8007014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007016:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCC_ClockConfig+0x2d8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fb fddc 	bl	8002bd8 <HAL_InitTick>
  
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3778      	adds	r7, #120	@ 0x78
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	0800f24c 	.word	0x0800f24c
 8007034:	20000008 	.word	0x20000008
 8007038:	2000000c 	.word	0x2000000c

0800703c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007056:	4b1e      	ldr	r3, [pc, #120]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b04      	cmp	r3, #4
 8007064:	d002      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x30>
 8007066:	2b08      	cmp	r3, #8
 8007068:	d003      	beq.n	8007072 <HAL_RCC_GetSysClockFreq+0x36>
 800706a:	e026      	b.n	80070ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800706e:	613b      	str	r3, [r7, #16]
      break;
 8007070:	e026      	b.n	80070c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	0c9b      	lsrs	r3, r3, #18
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	4a17      	ldr	r2, [pc, #92]	@ (80070d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800707c:	5cd3      	ldrb	r3, [r2, r3]
 800707e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007080:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	4a14      	ldr	r2, [pc, #80]	@ (80070dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800708a:	5cd3      	ldrb	r3, [r2, r3]
 800708c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007098:	4a0e      	ldr	r2, [pc, #56]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e004      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a0c      	ldr	r2, [pc, #48]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	613b      	str	r3, [r7, #16]
      break;
 80070b8:	e002      	b.n	80070c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80070bc:	613b      	str	r3, [r7, #16]
      break;
 80070be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070c0:	693b      	ldr	r3, [r7, #16]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40021000 	.word	0x40021000
 80070d4:	007a1200 	.word	0x007a1200
 80070d8:	0800f264 	.word	0x0800f264
 80070dc:	0800f274 	.word	0x0800f274
 80070e0:	003d0900 	.word	0x003d0900

080070e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070e8:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070ea:	681b      	ldr	r3, [r3, #0]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20000008 	.word	0x20000008

080070fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007102:	f7ff ffef 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 8007106:	4601      	mov	r1, r0
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007110:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007114:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	fa92 f2a2 	rbit	r2, r2
 800711c:	603a      	str	r2, [r7, #0]
  return result;
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	fab2 f282 	clz	r2, r2
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	40d3      	lsrs	r3, r2
 8007128:	4a04      	ldr	r2, [pc, #16]	@ (800713c <HAL_RCC_GetPCLK1Freq+0x40>)
 800712a:	5cd3      	ldrb	r3, [r2, r3]
 800712c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000
 800713c:	0800f25c 	.word	0x0800f25c

08007140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007146:	f7ff ffcd 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 800714a:	4601      	mov	r1, r0
 800714c:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007154:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007158:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	fa92 f2a2 	rbit	r2, r2
 8007160:	603a      	str	r2, [r7, #0]
  return result;
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	fab2 f282 	clz	r2, r2
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	40d3      	lsrs	r3, r2
 800716c:	4a04      	ldr	r2, [pc, #16]	@ (8007180 <HAL_RCC_GetPCLK2Freq+0x40>)
 800716e:	5cd3      	ldrb	r3, [r2, r3]
 8007170:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40021000 	.word	0x40021000
 8007180:	0800f25c 	.word	0x0800f25c

08007184 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b092      	sub	sp, #72	@ 0x48
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80d2 	beq.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071a8:	4b4d      	ldr	r3, [pc, #308]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10e      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b4:	4b4a      	ldr	r3, [pc, #296]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	4a49      	ldr	r2, [pc, #292]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071be:	61d3      	str	r3, [r2, #28]
 80071c0:	4b47      	ldr	r3, [pc, #284]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d2:	4b44      	ldr	r3, [pc, #272]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d118      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071de:	4b41      	ldr	r3, [pc, #260]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a40      	ldr	r2, [pc, #256]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ea:	f7fb fd39 	bl	8002c60 <HAL_GetTick>
 80071ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f0:	e008      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f2:	f7fb fd35 	bl	8002c60 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b64      	cmp	r3, #100	@ 0x64
 80071fe:	d901      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e167      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007204:	4b37      	ldr	r3, [pc, #220]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007210:	4b33      	ldr	r3, [pc, #204]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8082 	beq.w	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800722c:	429a      	cmp	r2, r3
 800722e:	d07a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007230:	4b2b      	ldr	r3, [pc, #172]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800723a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800723e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	fa93 f3a3 	rbit	r3, r3
 8007246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	4b25      	ldr	r3, [pc, #148]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	461a      	mov	r2, r3
 800725a:	2301      	movs	r3, #1
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800726e:	fab3 f383 	clz	r3, r3
 8007272:	b2db      	uxtb	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007282:	4a17      	ldr	r2, [pc, #92]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007286:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d049      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007292:	f7fb fce5 	bl	8002c60 <HAL_GetTick>
 8007296:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007298:	e00a      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729a:	f7fb fce1 	bl	8002c60 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e111      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80072b0:	2302      	movs	r3, #2
 80072b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	fa93 f3a3 	rbit	r3, r3
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80072bc:	2302      	movs	r3, #2
 80072be:	623b      	str	r3, [r7, #32]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	fa93 f3a3 	rbit	r3, r3
 80072c6:	61fb      	str	r3, [r7, #28]
  return result;
 80072c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ca:	fab3 f383 	clz	r3, r3
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072da:	4b01      	ldr	r3, [pc, #4]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	e00d      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80072e0:	40021000 	.word	0x40021000
 80072e4:	40007000 	.word	0x40007000
 80072e8:	10908100 	.word	0x10908100
 80072ec:	2302      	movs	r3, #2
 80072ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	fa93 f3a3 	rbit	r3, r3
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	4b78      	ldr	r3, [pc, #480]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	2202      	movs	r2, #2
 80072fe:	613a      	str	r2, [r7, #16]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	fa92 f2a2 	rbit	r2, r2
 8007306:	60fa      	str	r2, [r7, #12]
  return result;
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	fab2 f282 	clz	r2, r2
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	f002 021f 	and.w	r2, r2, #31
 800731a:	2101      	movs	r1, #1
 800731c:	fa01 f202 	lsl.w	r2, r1, r2
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0b9      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007326:	4b6d      	ldr	r3, [pc, #436]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	496a      	ldr	r1, [pc, #424]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007334:	4313      	orrs	r3, r2
 8007336:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007338:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007340:	4b66      	ldr	r3, [pc, #408]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	4a65      	ldr	r2, [pc, #404]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800734a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007358:	4b60      	ldr	r3, [pc, #384]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800735a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735c:	f023 0203 	bic.w	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	495d      	ldr	r1, [pc, #372]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007366:	4313      	orrs	r3, r2
 8007368:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007376:	4b59      	ldr	r3, [pc, #356]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4956      	ldr	r1, [pc, #344]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007384:	4313      	orrs	r3, r2
 8007386:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007394:	4b51      	ldr	r3, [pc, #324]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007398:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	494e      	ldr	r1, [pc, #312]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d008      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073b2:	4b4a      	ldr	r3, [pc, #296]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	f023 0210 	bic.w	r2, r3, #16
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	4947      	ldr	r1, [pc, #284]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80073d0:	4b42      	ldr	r3, [pc, #264]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073dc:	493f      	ldr	r1, [pc, #252]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ee:	4b3b      	ldr	r3, [pc, #236]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	f023 0220 	bic.w	r2, r3, #32
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4938      	ldr	r1, [pc, #224]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800740c:	4b33      	ldr	r3, [pc, #204]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007410:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	4930      	ldr	r1, [pc, #192]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800741a:	4313      	orrs	r3, r2
 800741c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800742a:	4b2c      	ldr	r3, [pc, #176]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	4929      	ldr	r1, [pc, #164]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007438:	4313      	orrs	r3, r2
 800743a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007448:	4b24      	ldr	r3, [pc, #144]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007454:	4921      	ldr	r1, [pc, #132]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007456:	4313      	orrs	r3, r2
 8007458:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007466:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007472:	491a      	ldr	r1, [pc, #104]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007474:	4313      	orrs	r3, r2
 8007476:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007484:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	4912      	ldr	r1, [pc, #72]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007492:	4313      	orrs	r3, r2
 8007494:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074a2:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	490b      	ldr	r1, [pc, #44]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074cc:	4903      	ldr	r1, [pc, #12]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3748      	adds	r7, #72	@ 0x48
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40021000 	.word	0x40021000

080074e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e049      	b.n	8007586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb f994 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3304      	adds	r3, #4
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f000 fc36 	bl	8007d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e04a      	b.n	800763e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a21      	ldr	r2, [pc, #132]	@ (800764c <HAL_TIM_Base_Start_IT+0xbc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x6c>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d2:	d013      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x6c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007650 <HAL_TIM_Base_Start_IT+0xc0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x6c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007654 <HAL_TIM_Base_Start_IT+0xc4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x6c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007658 <HAL_TIM_Base_Start_IT+0xc8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x6c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a19      	ldr	r2, [pc, #100]	@ (800765c <HAL_TIM_Base_Start_IT+0xcc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d115      	bne.n	8007628 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	4b17      	ldr	r3, [pc, #92]	@ (8007660 <HAL_TIM_Base_Start_IT+0xd0>)
 8007604:	4013      	ands	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b06      	cmp	r3, #6
 800760c:	d015      	beq.n	800763a <HAL_TIM_Base_Start_IT+0xaa>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007614:	d011      	beq.n	800763a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0201 	orr.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007626:	e008      	b.n	800763a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e000      	b.n	800763c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40013400 	.word	0x40013400
 800765c:	40014000 	.word	0x40014000
 8007660:	00010007 	.word	0x00010007

08007664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e049      	b.n	800770a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fb f8b2 	bl	80027f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f000 fb74 	bl	8007d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_TIM_PWM_Start+0x24>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	bf14      	ite	ne
 8007730:	2301      	movne	r3, #1
 8007732:	2300      	moveq	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e03c      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b04      	cmp	r3, #4
 800773c:	d109      	bne.n	8007752 <HAL_TIM_PWM_Start+0x3e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	bf14      	ite	ne
 800774a:	2301      	movne	r3, #1
 800774c:	2300      	moveq	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	e02f      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d109      	bne.n	800776c <HAL_TIM_PWM_Start+0x58>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
 8007766:	2300      	moveq	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e022      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b0c      	cmp	r3, #12
 8007770:	d109      	bne.n	8007786 <HAL_TIM_PWM_Start+0x72>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	bf14      	ite	ne
 800777e:	2301      	movne	r3, #1
 8007780:	2300      	moveq	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e015      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b10      	cmp	r3, #16
 800778a:	d109      	bne.n	80077a0 <HAL_TIM_PWM_Start+0x8c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e008      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e097      	b.n	80078ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <HAL_TIM_PWM_Start+0xb6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c8:	e023      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d104      	bne.n	80077da <HAL_TIM_PWM_Start+0xc6>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077d8:	e01b      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d104      	bne.n	80077ea <HAL_TIM_PWM_Start+0xd6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077e8:	e013      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_PWM_Start+0xe6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077f8:	e00b      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xf6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007808:	e003      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fe2a 	bl	8008474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a33      	ldr	r2, [pc, #204]	@ (80078f4 <HAL_TIM_PWM_Start+0x1e0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a32      	ldr	r2, [pc, #200]	@ (80078f8 <HAL_TIM_PWM_Start+0x1e4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a30      	ldr	r2, [pc, #192]	@ (80078fc <HAL_TIM_PWM_Start+0x1e8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2f      	ldr	r2, [pc, #188]	@ (8007900 <HAL_TIM_PWM_Start+0x1ec>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2d      	ldr	r2, [pc, #180]	@ (8007904 <HAL_TIM_PWM_Start+0x1f0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_Start+0x142>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_TIM_PWM_Start+0x144>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a20      	ldr	r2, [pc, #128]	@ (80078f4 <HAL_TIM_PWM_Start+0x1e0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d018      	beq.n	80078a8 <HAL_TIM_PWM_Start+0x194>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787e:	d013      	beq.n	80078a8 <HAL_TIM_PWM_Start+0x194>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <HAL_TIM_PWM_Start+0x1f4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00e      	beq.n	80078a8 <HAL_TIM_PWM_Start+0x194>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1f      	ldr	r2, [pc, #124]	@ (800790c <HAL_TIM_PWM_Start+0x1f8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d009      	beq.n	80078a8 <HAL_TIM_PWM_Start+0x194>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a17      	ldr	r2, [pc, #92]	@ (80078f8 <HAL_TIM_PWM_Start+0x1e4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d004      	beq.n	80078a8 <HAL_TIM_PWM_Start+0x194>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a16      	ldr	r2, [pc, #88]	@ (80078fc <HAL_TIM_PWM_Start+0x1e8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d115      	bne.n	80078d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	4b18      	ldr	r3, [pc, #96]	@ (8007910 <HAL_TIM_PWM_Start+0x1fc>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b06      	cmp	r3, #6
 80078b8:	d015      	beq.n	80078e6 <HAL_TIM_PWM_Start+0x1d2>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c0:	d011      	beq.n	80078e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	e008      	b.n	80078e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e000      	b.n	80078e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40013400 	.word	0x40013400
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	00010007 	.word	0x00010007

08007914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d020      	beq.n	8007978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01b      	beq.n	8007978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0202 	mvn.w	r2, #2
 8007948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9f8 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007964:	e005      	b.n	8007972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9ea 	bl	8007d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f9fb 	bl	8007d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d020      	beq.n	80079c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01b      	beq.n	80079c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0204 	mvn.w	r2, #4
 8007994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f9d2 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 80079b0:	e005      	b.n	80079be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9c4 	bl	8007d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f9d5 	bl	8007d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d020      	beq.n	8007a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01b      	beq.n	8007a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0208 	mvn.w	r2, #8
 80079e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2204      	movs	r2, #4
 80079e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f9ac 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 80079fc:	e005      	b.n	8007a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f99e 	bl	8007d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9af 	bl	8007d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d020      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01b      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0210 	mvn.w	r2, #16
 8007a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2208      	movs	r2, #8
 8007a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f986 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007a48:	e005      	b.n	8007a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f978 	bl	8007d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f989 	bl	8007d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00c      	beq.n	8007a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0201 	mvn.w	r2, #1
 8007a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fa f804 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00c      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fd98 	bl	80085d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fd90 	bl	80085e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00c      	beq.n	8007aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d007      	beq.n	8007aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f948 	bl	8007d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0220 	mvn.w	r2, #32
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fd58 	bl	80085c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e0ff      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b14      	cmp	r3, #20
 8007b42:	f200 80f0 	bhi.w	8007d26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b46:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007ba1 	.word	0x08007ba1
 8007b50:	08007d27 	.word	0x08007d27
 8007b54:	08007d27 	.word	0x08007d27
 8007b58:	08007d27 	.word	0x08007d27
 8007b5c:	08007be1 	.word	0x08007be1
 8007b60:	08007d27 	.word	0x08007d27
 8007b64:	08007d27 	.word	0x08007d27
 8007b68:	08007d27 	.word	0x08007d27
 8007b6c:	08007c23 	.word	0x08007c23
 8007b70:	08007d27 	.word	0x08007d27
 8007b74:	08007d27 	.word	0x08007d27
 8007b78:	08007d27 	.word	0x08007d27
 8007b7c:	08007c63 	.word	0x08007c63
 8007b80:	08007d27 	.word	0x08007d27
 8007b84:	08007d27 	.word	0x08007d27
 8007b88:	08007d27 	.word	0x08007d27
 8007b8c:	08007ca5 	.word	0x08007ca5
 8007b90:	08007d27 	.word	0x08007d27
 8007b94:	08007d27 	.word	0x08007d27
 8007b98:	08007d27 	.word	0x08007d27
 8007b9c:	08007ce5 	.word	0x08007ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f98e 	bl	8007ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0208 	orr.w	r2, r2, #8
 8007bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0204 	bic.w	r2, r2, #4
 8007bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6999      	ldr	r1, [r3, #24]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691a      	ldr	r2, [r3, #16]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	619a      	str	r2, [r3, #24]
      break;
 8007bde:	e0a5      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f9fe 	bl	8007fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6999      	ldr	r1, [r3, #24]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	021a      	lsls	r2, r3, #8
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	619a      	str	r2, [r3, #24]
      break;
 8007c20:	e084      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fa67 	bl	80080fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0208 	orr.w	r2, r2, #8
 8007c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0204 	bic.w	r2, r2, #4
 8007c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69d9      	ldr	r1, [r3, #28]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	61da      	str	r2, [r3, #28]
      break;
 8007c60:	e064      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 facf 	bl	800820c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69d9      	ldr	r1, [r3, #28]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	021a      	lsls	r2, r3, #8
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	61da      	str	r2, [r3, #28]
      break;
 8007ca2:	e043      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fb18 	bl	80082e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0208 	orr.w	r2, r2, #8
 8007cbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0204 	bic.w	r2, r2, #4
 8007cce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ce2:	e023      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fb5c 	bl	80083a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	021a      	lsls	r2, r3, #8
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d24:	e002      	b.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
      break;
 8007d2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop

08007d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a42      	ldr	r2, [pc, #264]	@ (8007eac <TIM_Base_SetConfig+0x11c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00f      	beq.n	8007dc8 <TIM_Base_SetConfig+0x38>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dae:	d00b      	beq.n	8007dc8 <TIM_Base_SetConfig+0x38>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3f      	ldr	r2, [pc, #252]	@ (8007eb0 <TIM_Base_SetConfig+0x120>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_Base_SetConfig+0x38>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a3e      	ldr	r2, [pc, #248]	@ (8007eb4 <TIM_Base_SetConfig+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_Base_SetConfig+0x38>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8007eb8 <TIM_Base_SetConfig+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d108      	bne.n	8007dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a33      	ldr	r2, [pc, #204]	@ (8007eac <TIM_Base_SetConfig+0x11c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01b      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de8:	d017      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a30      	ldr	r2, [pc, #192]	@ (8007eb0 <TIM_Base_SetConfig+0x120>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2f      	ldr	r2, [pc, #188]	@ (8007eb4 <TIM_Base_SetConfig+0x124>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00f      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8007eb8 <TIM_Base_SetConfig+0x128>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00b      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	@ (8007ebc <TIM_Base_SetConfig+0x12c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d007      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ec0 <TIM_Base_SetConfig+0x130>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d003      	beq.n	8007e1a <TIM_Base_SetConfig+0x8a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a2b      	ldr	r2, [pc, #172]	@ (8007ec4 <TIM_Base_SetConfig+0x134>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d108      	bne.n	8007e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a16      	ldr	r2, [pc, #88]	@ (8007eac <TIM_Base_SetConfig+0x11c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00f      	beq.n	8007e78 <TIM_Base_SetConfig+0xe8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	@ (8007eb8 <TIM_Base_SetConfig+0x128>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <TIM_Base_SetConfig+0xe8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a16      	ldr	r2, [pc, #88]	@ (8007ebc <TIM_Base_SetConfig+0x12c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <TIM_Base_SetConfig+0xe8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <TIM_Base_SetConfig+0x130>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_Base_SetConfig+0xe8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a14      	ldr	r2, [pc, #80]	@ (8007ec4 <TIM_Base_SetConfig+0x134>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d103      	bne.n	8007e80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d105      	bne.n	8007e9e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f023 0201 	bic.w	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	611a      	str	r2, [r3, #16]
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40013400 	.word	0x40013400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800

08007ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f023 0201 	bic.w	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f023 0302 	bic.w	r3, r3, #2
 8007f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd4 <TIM_OC1_SetConfig+0x10c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00f      	beq.n	8007f48 <TIM_OC1_SetConfig+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd8 <TIM_OC1_SetConfig+0x110>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC1_SetConfig+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a2a      	ldr	r2, [pc, #168]	@ (8007fdc <TIM_OC1_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC1_SetConfig+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a29      	ldr	r2, [pc, #164]	@ (8007fe0 <TIM_OC1_SetConfig+0x118>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC1_SetConfig+0x80>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a28      	ldr	r2, [pc, #160]	@ (8007fe4 <TIM_OC1_SetConfig+0x11c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0308 	bic.w	r3, r3, #8
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd4 <TIM_OC1_SetConfig+0x10c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00f      	beq.n	8007f8a <TIM_OC1_SetConfig+0xc2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd8 <TIM_OC1_SetConfig+0x110>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00b      	beq.n	8007f8a <TIM_OC1_SetConfig+0xc2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a19      	ldr	r2, [pc, #100]	@ (8007fdc <TIM_OC1_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d007      	beq.n	8007f8a <TIM_OC1_SetConfig+0xc2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a18      	ldr	r2, [pc, #96]	@ (8007fe0 <TIM_OC1_SetConfig+0x118>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC1_SetConfig+0xc2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a17      	ldr	r2, [pc, #92]	@ (8007fe4 <TIM_OC1_SetConfig+0x11c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d111      	bne.n	8007fae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	621a      	str	r2, [r3, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800

08007fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f023 0210 	bic.w	r2, r3, #16
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0320 	bic.w	r3, r3, #32
 8008036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a28      	ldr	r2, [pc, #160]	@ (80080e8 <TIM_OC2_SetConfig+0x100>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC2_SetConfig+0x6c>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a27      	ldr	r2, [pc, #156]	@ (80080ec <TIM_OC2_SetConfig+0x104>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d10d      	bne.n	8008070 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800806e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1d      	ldr	r2, [pc, #116]	@ (80080e8 <TIM_OC2_SetConfig+0x100>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00f      	beq.n	8008098 <TIM_OC2_SetConfig+0xb0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1c      	ldr	r2, [pc, #112]	@ (80080ec <TIM_OC2_SetConfig+0x104>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_OC2_SetConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1b      	ldr	r2, [pc, #108]	@ (80080f0 <TIM_OC2_SetConfig+0x108>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_OC2_SetConfig+0xb0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1a      	ldr	r2, [pc, #104]	@ (80080f4 <TIM_OC2_SetConfig+0x10c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC2_SetConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <TIM_OC2_SetConfig+0x110>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d113      	bne.n	80080c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800809e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	40013400 	.word	0x40013400
 80080f0:	40014000 	.word	0x40014000
 80080f4:	40014400 	.word	0x40014400
 80080f8:	40014800 	.word	0x40014800

080080fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800812a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a27      	ldr	r2, [pc, #156]	@ (80081f8 <TIM_OC3_SetConfig+0xfc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC3_SetConfig+0x6a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a26      	ldr	r2, [pc, #152]	@ (80081fc <TIM_OC3_SetConfig+0x100>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10d      	bne.n	8008182 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008180:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a1c      	ldr	r2, [pc, #112]	@ (80081f8 <TIM_OC3_SetConfig+0xfc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00f      	beq.n	80081aa <TIM_OC3_SetConfig+0xae>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <TIM_OC3_SetConfig+0x100>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00b      	beq.n	80081aa <TIM_OC3_SetConfig+0xae>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1a      	ldr	r2, [pc, #104]	@ (8008200 <TIM_OC3_SetConfig+0x104>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <TIM_OC3_SetConfig+0xae>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a19      	ldr	r2, [pc, #100]	@ (8008204 <TIM_OC3_SetConfig+0x108>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_OC3_SetConfig+0xae>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a18      	ldr	r2, [pc, #96]	@ (8008208 <TIM_OC3_SetConfig+0x10c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d113      	bne.n	80081d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	621a      	str	r2, [r3, #32]
}
 80081ec:	bf00      	nop
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40012c00 	.word	0x40012c00
 80081fc:	40013400 	.word	0x40013400
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800

0800820c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800823a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800825a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	031b      	lsls	r3, r3, #12
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a18      	ldr	r2, [pc, #96]	@ (80082cc <TIM_OC4_SetConfig+0xc0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00f      	beq.n	8008290 <TIM_OC4_SetConfig+0x84>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a17      	ldr	r2, [pc, #92]	@ (80082d0 <TIM_OC4_SetConfig+0xc4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_OC4_SetConfig+0x84>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a16      	ldr	r2, [pc, #88]	@ (80082d4 <TIM_OC4_SetConfig+0xc8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_OC4_SetConfig+0x84>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a15      	ldr	r2, [pc, #84]	@ (80082d8 <TIM_OC4_SetConfig+0xcc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC4_SetConfig+0x84>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a14      	ldr	r2, [pc, #80]	@ (80082dc <TIM_OC4_SetConfig+0xd0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d109      	bne.n	80082a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	019b      	lsls	r3, r3, #6
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40013400 	.word	0x40013400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400
 80082dc:	40014800 	.word	0x40014800

080082e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a17      	ldr	r2, [pc, #92]	@ (8008394 <TIM_OC5_SetConfig+0xb4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00f      	beq.n	800835a <TIM_OC5_SetConfig+0x7a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a16      	ldr	r2, [pc, #88]	@ (8008398 <TIM_OC5_SetConfig+0xb8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00b      	beq.n	800835a <TIM_OC5_SetConfig+0x7a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a15      	ldr	r2, [pc, #84]	@ (800839c <TIM_OC5_SetConfig+0xbc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <TIM_OC5_SetConfig+0x7a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a14      	ldr	r2, [pc, #80]	@ (80083a0 <TIM_OC5_SetConfig+0xc0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d003      	beq.n	800835a <TIM_OC5_SetConfig+0x7a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a13      	ldr	r2, [pc, #76]	@ (80083a4 <TIM_OC5_SetConfig+0xc4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d109      	bne.n	800836e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	621a      	str	r2, [r3, #32]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40013400 	.word	0x40013400
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800

080083a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	051b      	lsls	r3, r3, #20
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a18      	ldr	r2, [pc, #96]	@ (8008460 <TIM_OC6_SetConfig+0xb8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_OC6_SetConfig+0x7c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a17      	ldr	r2, [pc, #92]	@ (8008464 <TIM_OC6_SetConfig+0xbc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_OC6_SetConfig+0x7c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a16      	ldr	r2, [pc, #88]	@ (8008468 <TIM_OC6_SetConfig+0xc0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_OC6_SetConfig+0x7c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a15      	ldr	r2, [pc, #84]	@ (800846c <TIM_OC6_SetConfig+0xc4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC6_SetConfig+0x7c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <TIM_OC6_SetConfig+0xc8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800842a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	029b      	lsls	r3, r3, #10
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40013400 	.word	0x40013400
 8008468:	40014000 	.word	0x40014000
 800846c:	40014400 	.word	0x40014400
 8008470:	40014800 	.word	0x40014800

08008474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2201      	movs	r2, #1
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1a      	ldr	r2, [r3, #32]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	43db      	mvns	r3, r3
 8008496:	401a      	ands	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1a      	ldr	r2, [r3, #32]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 031f 	and.w	r3, r3, #31
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	621a      	str	r2, [r3, #32]
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e063      	b.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2b      	ldr	r2, [pc, #172]	@ (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a2a      	ldr	r2, [pc, #168]	@ (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d108      	bne.n	800851e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d018      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800854a:	d013      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a18      	ldr	r2, [pc, #96]	@ (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00e      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a17      	ldr	r2, [pc, #92]	@ (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d009      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a12      	ldr	r2, [pc, #72]	@ (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d004      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a13      	ldr	r2, [pc, #76]	@ (80085bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d10c      	bne.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800857a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	4313      	orrs	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40014000 	.word	0x40014000

080085c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e040      	b.n	8008690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fa f9c6 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2224      	movs	r2, #36	@ 0x24
 8008628:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0201 	bic.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fdcc 	bl	80091e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fbf5 	bl	8008e38 <UART_SetConfig>
 800864e:	4603      	mov	r3, r0
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e01b      	b.n	8008690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fe4b 	bl	8009324 <UART_CheckIdleState>
 800868e:	4603      	mov	r3, r0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	@ 0x28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d132      	bne.n	8008716 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <HAL_UART_Receive_IT+0x24>
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e02b      	b.n	8008718 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d018      	beq.n	8008706 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	613b      	str	r3, [r7, #16]
   return(result);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	623b      	str	r3, [r7, #32]
 80086f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	69f9      	ldr	r1, [r7, #28]
 80086f8:	6a3a      	ldr	r2, [r7, #32]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	461a      	mov	r2, r3
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 ff1f 	bl	8009550 <UART_Start_Receive_IT>
 8008712:	4603      	mov	r3, r0
 8008714:	e000      	b.n	8008718 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008716:	2302      	movs	r3, #2
  }
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008732:	2b20      	cmp	r3, #32
 8008734:	d165      	bne.n	8008802 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_UART_Transmit_DMA+0x22>
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e05e      	b.n	8008804 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2221      	movs	r2, #33	@ 0x21
 8008768:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876e:	2b00      	cmp	r3, #0
 8008770:	d027      	beq.n	80087c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008776:	4a25      	ldr	r2, [pc, #148]	@ (800880c <HAL_UART_Transmit_DMA+0xec>)
 8008778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	4a24      	ldr	r2, [pc, #144]	@ (8008810 <HAL_UART_Transmit_DMA+0xf0>)
 8008780:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008786:	4a23      	ldr	r2, [pc, #140]	@ (8008814 <HAL_UART_Transmit_DMA+0xf4>)
 8008788:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878e:	2200      	movs	r2, #0
 8008790:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800879a:	4619      	mov	r1, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3328      	adds	r3, #40	@ 0x28
 80087a2:	461a      	mov	r2, r3
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	f7fc fa85 	bl	8004cb4 <HAL_DMA_Start_IT>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2210      	movs	r2, #16
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e020      	b.n	8008804 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2240      	movs	r2, #64	@ 0x40
 80087c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	613b      	str	r3, [r7, #16]
   return(result);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ea:	623a      	str	r2, [r7, #32]
 80087ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	69f9      	ldr	r1, [r7, #28]
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008802:	2302      	movs	r3, #2
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3728      	adds	r7, #40	@ 0x28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	080097cd 	.word	0x080097cd
 8008810:	08009861 	.word	0x08009861
 8008814:	0800987d 	.word	0x0800987d

08008818 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b0ba      	sub	sp, #232	@ 0xe8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800883e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008842:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008846:	4013      	ands	r3, r2
 8008848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800884c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d115      	bne.n	8008880 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00f      	beq.n	8008880 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 82ab 	beq.w	8008dcc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	4798      	blx	r3
      }
      return;
 800887e:	e2a5      	b.n	8008dcc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8117 	beq.w	8008ab8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800888a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800889a:	4b85      	ldr	r3, [pc, #532]	@ (8008ab0 <HAL_UART_IRQHandler+0x298>)
 800889c:	4013      	ands	r3, r2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 810a 	beq.w	8008ab8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d011      	beq.n	80088d4 <HAL_UART_IRQHandler+0xbc>
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2201      	movs	r2, #1
 80088c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ca:	f043 0201 	orr.w	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d011      	beq.n	8008904 <HAL_UART_IRQHandler+0xec>
 80088e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2202      	movs	r2, #2
 80088f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fa:	f043 0204 	orr.w	r2, r3, #4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d011      	beq.n	8008934 <HAL_UART_IRQHandler+0x11c>
 8008910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2204      	movs	r2, #4
 8008922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800892a:	f043 0202 	orr.w	r2, r3, #2
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008938:	f003 0308 	and.w	r3, r3, #8
 800893c:	2b00      	cmp	r3, #0
 800893e:	d017      	beq.n	8008970 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800894c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008950:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2208      	movs	r2, #8
 800895e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008966:	f043 0208 	orr.w	r2, r3, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008978:	2b00      	cmp	r3, #0
 800897a:	d012      	beq.n	80089a2 <HAL_UART_IRQHandler+0x18a>
 800897c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008998:	f043 0220 	orr.w	r2, r3, #32
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8211 	beq.w	8008dd0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b2:	f003 0320 	and.w	r3, r3, #32
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00d      	beq.n	80089d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d005      	beq.n	80089fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80089ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d04f      	beq.n	8008a9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fe82 	bl	8009704 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0a:	2b40      	cmp	r3, #64	@ 0x40
 8008a0c:	d141      	bne.n	8008a92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3308      	adds	r3, #8
 8008a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3308      	adds	r3, #8
 8008a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1d9      	bne.n	8008a0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d013      	beq.n	8008a8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a66:	4a13      	ldr	r2, [pc, #76]	@ (8008ab4 <HAL_UART_IRQHandler+0x29c>)
 8008a68:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fc f9bd 	bl	8004dee <HAL_DMA_Abort_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	e00f      	b.n	8008aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9be 	bl	8008e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00b      	b.n	8008aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9ba 	bl	8008e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e007      	b.n	8008aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9b6 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008aa8:	e192      	b.n	8008dd0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aaa:	bf00      	nop
    return;
 8008aac:	e190      	b.n	8008dd0 <HAL_UART_IRQHandler+0x5b8>
 8008aae:	bf00      	nop
 8008ab0:	04000120 	.word	0x04000120
 8008ab4:	080098fb 	.word	0x080098fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	f040 814b 	bne.w	8008d58 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8144 	beq.w	8008d58 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 813d 	beq.w	8008d58 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2210      	movs	r2, #16
 8008ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af0:	2b40      	cmp	r3, #64	@ 0x40
 8008af2:	f040 80b5 	bne.w	8008c60 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8164 	beq.w	8008dd4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f080 815c 	bcs.w	8008dd4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	f000 8086 	beq.w	8008c3e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b60:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1da      	bne.n	8008b32 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ba0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ba4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e1      	bne.n	8008b7c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bdc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008be2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e3      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e4      	bne.n	8008bfe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fc f89a 	bl	8004d72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8e1 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c5e:	e0b9      	b.n	8008dd4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80ab 	beq.w	8008dd8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80a6 	beq.w	8008dd8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e4      	bne.n	8008c8c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ce6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e3      	bne.n	8008cc2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0310 	bic.w	r3, r3, #16
 8008d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e4      	bne.n	8008d0e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f865 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d56:	e03f      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00e      	beq.n	8008d82 <HAL_UART_IRQHandler+0x56a>
 8008d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d008      	beq.n	8008d82 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 ffa5 	bl	8009cca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d80:	e02d      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01c      	beq.n	8008ddc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
    }
    return;
 8008daa:	e017      	b.n	8008ddc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <HAL_UART_IRQHandler+0x5c6>
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fdae 	bl	8009926 <UART_EndTransmit_IT>
    return;
 8008dca:	e008      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
      return;
 8008dcc:	bf00      	nop
 8008dce:	e006      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
    return;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
      return;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
      return;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <HAL_UART_IRQHandler+0x5c6>
    return;
 8008ddc:	bf00      	nop
  }

}
 8008dde:	37e8      	adds	r7, #232	@ 0xe8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008e66:	f023 030c 	bic.w	r3, r3, #12
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	6979      	ldr	r1, [r7, #20]
 8008e70:	430b      	orrs	r3, r1
 8008e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4aa7      	ldr	r2, [pc, #668]	@ (8009150 <UART_SetConfig+0x318>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d120      	bne.n	8008efa <UART_SetConfig+0xc2>
 8008eb8:	4ba6      	ldr	r3, [pc, #664]	@ (8009154 <UART_SetConfig+0x31c>)
 8008eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d817      	bhi.n	8008ef4 <UART_SetConfig+0xbc>
 8008ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <UART_SetConfig+0x94>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008edd 	.word	0x08008edd
 8008ed0:	08008ee9 	.word	0x08008ee9
 8008ed4:	08008eef 	.word	0x08008eef
 8008ed8:	08008ee3 	.word	0x08008ee3
 8008edc:	2301      	movs	r3, #1
 8008ede:	77fb      	strb	r3, [r7, #31]
 8008ee0:	e0b5      	b.n	800904e <UART_SetConfig+0x216>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	77fb      	strb	r3, [r7, #31]
 8008ee6:	e0b2      	b.n	800904e <UART_SetConfig+0x216>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	77fb      	strb	r3, [r7, #31]
 8008eec:	e0af      	b.n	800904e <UART_SetConfig+0x216>
 8008eee:	2308      	movs	r3, #8
 8008ef0:	77fb      	strb	r3, [r7, #31]
 8008ef2:	e0ac      	b.n	800904e <UART_SetConfig+0x216>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	77fb      	strb	r3, [r7, #31]
 8008ef8:	e0a9      	b.n	800904e <UART_SetConfig+0x216>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a96      	ldr	r2, [pc, #600]	@ (8009158 <UART_SetConfig+0x320>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d124      	bne.n	8008f4e <UART_SetConfig+0x116>
 8008f04:	4b93      	ldr	r3, [pc, #588]	@ (8009154 <UART_SetConfig+0x31c>)
 8008f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f10:	d011      	beq.n	8008f36 <UART_SetConfig+0xfe>
 8008f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f16:	d817      	bhi.n	8008f48 <UART_SetConfig+0x110>
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f1c:	d011      	beq.n	8008f42 <UART_SetConfig+0x10a>
 8008f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f22:	d811      	bhi.n	8008f48 <UART_SetConfig+0x110>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <UART_SetConfig+0xf8>
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f2c:	d006      	beq.n	8008f3c <UART_SetConfig+0x104>
 8008f2e:	e00b      	b.n	8008f48 <UART_SetConfig+0x110>
 8008f30:	2300      	movs	r3, #0
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e08b      	b.n	800904e <UART_SetConfig+0x216>
 8008f36:	2302      	movs	r3, #2
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e088      	b.n	800904e <UART_SetConfig+0x216>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	e085      	b.n	800904e <UART_SetConfig+0x216>
 8008f42:	2308      	movs	r3, #8
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e082      	b.n	800904e <UART_SetConfig+0x216>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	e07f      	b.n	800904e <UART_SetConfig+0x216>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a82      	ldr	r2, [pc, #520]	@ (800915c <UART_SetConfig+0x324>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d124      	bne.n	8008fa2 <UART_SetConfig+0x16a>
 8008f58:	4b7e      	ldr	r3, [pc, #504]	@ (8009154 <UART_SetConfig+0x31c>)
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008f60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008f64:	d011      	beq.n	8008f8a <UART_SetConfig+0x152>
 8008f66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008f6a:	d817      	bhi.n	8008f9c <UART_SetConfig+0x164>
 8008f6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f70:	d011      	beq.n	8008f96 <UART_SetConfig+0x15e>
 8008f72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f76:	d811      	bhi.n	8008f9c <UART_SetConfig+0x164>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <UART_SetConfig+0x14c>
 8008f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f80:	d006      	beq.n	8008f90 <UART_SetConfig+0x158>
 8008f82:	e00b      	b.n	8008f9c <UART_SetConfig+0x164>
 8008f84:	2300      	movs	r3, #0
 8008f86:	77fb      	strb	r3, [r7, #31]
 8008f88:	e061      	b.n	800904e <UART_SetConfig+0x216>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	77fb      	strb	r3, [r7, #31]
 8008f8e:	e05e      	b.n	800904e <UART_SetConfig+0x216>
 8008f90:	2304      	movs	r3, #4
 8008f92:	77fb      	strb	r3, [r7, #31]
 8008f94:	e05b      	b.n	800904e <UART_SetConfig+0x216>
 8008f96:	2308      	movs	r3, #8
 8008f98:	77fb      	strb	r3, [r7, #31]
 8008f9a:	e058      	b.n	800904e <UART_SetConfig+0x216>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	77fb      	strb	r3, [r7, #31]
 8008fa0:	e055      	b.n	800904e <UART_SetConfig+0x216>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a6e      	ldr	r2, [pc, #440]	@ (8009160 <UART_SetConfig+0x328>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d124      	bne.n	8008ff6 <UART_SetConfig+0x1be>
 8008fac:	4b69      	ldr	r3, [pc, #420]	@ (8009154 <UART_SetConfig+0x31c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008fb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fb8:	d011      	beq.n	8008fde <UART_SetConfig+0x1a6>
 8008fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fbe:	d817      	bhi.n	8008ff0 <UART_SetConfig+0x1b8>
 8008fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fc4:	d011      	beq.n	8008fea <UART_SetConfig+0x1b2>
 8008fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fca:	d811      	bhi.n	8008ff0 <UART_SetConfig+0x1b8>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <UART_SetConfig+0x1a0>
 8008fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd4:	d006      	beq.n	8008fe4 <UART_SetConfig+0x1ac>
 8008fd6:	e00b      	b.n	8008ff0 <UART_SetConfig+0x1b8>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	77fb      	strb	r3, [r7, #31]
 8008fdc:	e037      	b.n	800904e <UART_SetConfig+0x216>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	77fb      	strb	r3, [r7, #31]
 8008fe2:	e034      	b.n	800904e <UART_SetConfig+0x216>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	77fb      	strb	r3, [r7, #31]
 8008fe8:	e031      	b.n	800904e <UART_SetConfig+0x216>
 8008fea:	2308      	movs	r3, #8
 8008fec:	77fb      	strb	r3, [r7, #31]
 8008fee:	e02e      	b.n	800904e <UART_SetConfig+0x216>
 8008ff0:	2310      	movs	r3, #16
 8008ff2:	77fb      	strb	r3, [r7, #31]
 8008ff4:	e02b      	b.n	800904e <UART_SetConfig+0x216>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8009164 <UART_SetConfig+0x32c>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d124      	bne.n	800904a <UART_SetConfig+0x212>
 8009000:	4b54      	ldr	r3, [pc, #336]	@ (8009154 <UART_SetConfig+0x31c>)
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009008:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800900c:	d011      	beq.n	8009032 <UART_SetConfig+0x1fa>
 800900e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009012:	d817      	bhi.n	8009044 <UART_SetConfig+0x20c>
 8009014:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009018:	d011      	beq.n	800903e <UART_SetConfig+0x206>
 800901a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800901e:	d811      	bhi.n	8009044 <UART_SetConfig+0x20c>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <UART_SetConfig+0x1f4>
 8009024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009028:	d006      	beq.n	8009038 <UART_SetConfig+0x200>
 800902a:	e00b      	b.n	8009044 <UART_SetConfig+0x20c>
 800902c:	2300      	movs	r3, #0
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	e00d      	b.n	800904e <UART_SetConfig+0x216>
 8009032:	2302      	movs	r3, #2
 8009034:	77fb      	strb	r3, [r7, #31]
 8009036:	e00a      	b.n	800904e <UART_SetConfig+0x216>
 8009038:	2304      	movs	r3, #4
 800903a:	77fb      	strb	r3, [r7, #31]
 800903c:	e007      	b.n	800904e <UART_SetConfig+0x216>
 800903e:	2308      	movs	r3, #8
 8009040:	77fb      	strb	r3, [r7, #31]
 8009042:	e004      	b.n	800904e <UART_SetConfig+0x216>
 8009044:	2310      	movs	r3, #16
 8009046:	77fb      	strb	r3, [r7, #31]
 8009048:	e001      	b.n	800904e <UART_SetConfig+0x216>
 800904a:	2310      	movs	r3, #16
 800904c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009056:	d15b      	bne.n	8009110 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009058:	7ffb      	ldrb	r3, [r7, #31]
 800905a:	2b08      	cmp	r3, #8
 800905c:	d827      	bhi.n	80090ae <UART_SetConfig+0x276>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <UART_SetConfig+0x22c>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009089 	.word	0x08009089
 8009068:	08009091 	.word	0x08009091
 800906c:	08009099 	.word	0x08009099
 8009070:	080090af 	.word	0x080090af
 8009074:	0800909f 	.word	0x0800909f
 8009078:	080090af 	.word	0x080090af
 800907c:	080090af 	.word	0x080090af
 8009080:	080090af 	.word	0x080090af
 8009084:	080090a7 	.word	0x080090a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009088:	f7fe f838 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 800908c:	61b8      	str	r0, [r7, #24]
        break;
 800908e:	e013      	b.n	80090b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009090:	f7fe f856 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 8009094:	61b8      	str	r0, [r7, #24]
        break;
 8009096:	e00f      	b.n	80090b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009098:	4b33      	ldr	r3, [pc, #204]	@ (8009168 <UART_SetConfig+0x330>)
 800909a:	61bb      	str	r3, [r7, #24]
        break;
 800909c:	e00c      	b.n	80090b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909e:	f7fd ffcd 	bl	800703c <HAL_RCC_GetSysClockFreq>
 80090a2:	61b8      	str	r0, [r7, #24]
        break;
 80090a4:	e008      	b.n	80090b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090aa:	61bb      	str	r3, [r7, #24]
        break;
 80090ac:	e004      	b.n	80090b8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	77bb      	strb	r3, [r7, #30]
        break;
 80090b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8082 	beq.w	80091c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	005a      	lsls	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	441a      	add	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d916      	bls.n	800910a <UART_SetConfig+0x2d2>
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090e2:	d212      	bcs.n	800910a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f023 030f 	bic.w	r3, r3, #15
 80090ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	085b      	lsrs	r3, r3, #1
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	89fa      	ldrh	r2, [r7, #14]
 8009106:	60da      	str	r2, [r3, #12]
 8009108:	e05c      	b.n	80091c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	77bb      	strb	r3, [r7, #30]
 800910e:	e059      	b.n	80091c4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009110:	7ffb      	ldrb	r3, [r7, #31]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d835      	bhi.n	8009182 <UART_SetConfig+0x34a>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <UART_SetConfig+0x2e4>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009141 	.word	0x08009141
 8009120:	08009149 	.word	0x08009149
 8009124:	0800916d 	.word	0x0800916d
 8009128:	08009183 	.word	0x08009183
 800912c:	08009173 	.word	0x08009173
 8009130:	08009183 	.word	0x08009183
 8009134:	08009183 	.word	0x08009183
 8009138:	08009183 	.word	0x08009183
 800913c:	0800917b 	.word	0x0800917b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009140:	f7fd ffdc 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 8009144:	61b8      	str	r0, [r7, #24]
        break;
 8009146:	e021      	b.n	800918c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009148:	f7fd fffa 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 800914c:	61b8      	str	r0, [r7, #24]
        break;
 800914e:	e01d      	b.n	800918c <UART_SetConfig+0x354>
 8009150:	40013800 	.word	0x40013800
 8009154:	40021000 	.word	0x40021000
 8009158:	40004400 	.word	0x40004400
 800915c:	40004800 	.word	0x40004800
 8009160:	40004c00 	.word	0x40004c00
 8009164:	40005000 	.word	0x40005000
 8009168:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800916c:	4b1b      	ldr	r3, [pc, #108]	@ (80091dc <UART_SetConfig+0x3a4>)
 800916e:	61bb      	str	r3, [r7, #24]
        break;
 8009170:	e00c      	b.n	800918c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009172:	f7fd ff63 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8009176:	61b8      	str	r0, [r7, #24]
        break;
 8009178:	e008      	b.n	800918c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800917a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800917e:	61bb      	str	r3, [r7, #24]
        break;
 8009180:	e004      	b.n	800918c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	77bb      	strb	r3, [r7, #30]
        break;
 800918a:	bf00      	nop
    }

    if (pclk != 0U)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d018      	beq.n	80091c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	085a      	lsrs	r2, r3, #1
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	441a      	add	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b0f      	cmp	r3, #15
 80091aa:	d909      	bls.n	80091c0 <UART_SetConfig+0x388>
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b2:	d205      	bcs.n	80091c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	e001      	b.n	80091c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80091d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	007a1200 	.word	0x007a1200

080091e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092de:	d10a      	bne.n	80092f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b098      	sub	sp, #96	@ 0x60
 8009328:	af02      	add	r7, sp, #8
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009334:	f7f9 fc94 	bl	8002c60 <HAL_GetTick>
 8009338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b08      	cmp	r3, #8
 8009346:	d12e      	bne.n	80093a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009350:	2200      	movs	r2, #0
 8009352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f88c 	bl	8009474 <UART_WaitOnFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d021      	beq.n	80093a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009376:	653b      	str	r3, [r7, #80]	@ 0x50
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009380:	647b      	str	r3, [r7, #68]	@ 0x44
 8009382:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e062      	b.n	800946c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d149      	bne.n	8009448 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093bc:	2200      	movs	r2, #0
 80093be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f856 	bl	8009474 <UART_WaitOnFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d03c      	beq.n	8009448 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	623b      	str	r3, [r7, #32]
   return(result);
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e6      	bne.n	80093ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3308      	adds	r3, #8
 8009406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3308      	adds	r3, #8
 800941e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009420:	61fa      	str	r2, [r7, #28]
 8009422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	69b9      	ldr	r1, [r7, #24]
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	617b      	str	r3, [r7, #20]
   return(result);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e5      	bne.n	8009400 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e011      	b.n	800946c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3758      	adds	r7, #88	@ 0x58
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4613      	mov	r3, r2
 8009482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009484:	e04f      	b.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948c:	d04b      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948e:	f7f9 fbe7 	bl	8002c60 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	429a      	cmp	r2, r3
 800949c:	d302      	bcc.n	80094a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e04e      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d037      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d034      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b40      	cmp	r3, #64	@ 0x40
 80094c0:	d031      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d110      	bne.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2208      	movs	r2, #8
 80094d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f913 	bl	8009704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2208      	movs	r2, #8
 80094e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e029      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009500:	d111      	bne.n	8009526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800950a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f8f9 	bl	8009704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e00f      	b.n	8009546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69da      	ldr	r2, [r3, #28]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4013      	ands	r3, r2
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	429a      	cmp	r2, r3
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	461a      	mov	r2, r3
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	429a      	cmp	r2, r3
 8009542:	d0a0      	beq.n	8009486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009550:	b480      	push	{r7}
 8009552:	b097      	sub	sp, #92	@ 0x5c
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009582:	d10e      	bne.n	80095a2 <UART_Start_Receive_IT+0x52>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <UART_Start_Receive_IT+0x48>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009592:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009596:	e01a      	b.n	80095ce <UART_Start_Receive_IT+0x7e>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	22ff      	movs	r2, #255	@ 0xff
 800959c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80095a0:	e015      	b.n	80095ce <UART_Start_Receive_IT+0x7e>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <UART_Start_Receive_IT+0x76>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <UART_Start_Receive_IT+0x6c>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	22ff      	movs	r2, #255	@ 0xff
 80095b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80095ba:	e008      	b.n	80095ce <UART_Start_Receive_IT+0x7e>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	227f      	movs	r2, #127	@ 0x7f
 80095c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80095c4:	e003      	b.n	80095ce <UART_Start_Receive_IT+0x7e>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2222      	movs	r2, #34	@ 0x22
 80095da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f0:	f043 0301 	orr.w	r3, r3, #1
 80095f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3308      	adds	r3, #8
 80095fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095fe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009600:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800960c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e5      	bne.n	80095de <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800961a:	d107      	bne.n	800962c <UART_Start_Receive_IT+0xdc>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4a22      	ldr	r2, [pc, #136]	@ (80096b0 <UART_Start_Receive_IT+0x160>)
 8009628:	669a      	str	r2, [r3, #104]	@ 0x68
 800962a:	e002      	b.n	8009632 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4a21      	ldr	r2, [pc, #132]	@ (80096b4 <UART_Start_Receive_IT+0x164>)
 8009630:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d019      	beq.n	800966e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800964e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
 800965a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800965e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <UART_Start_Receive_IT+0xea>
 800966c:	e018      	b.n	80096a0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	613b      	str	r3, [r7, #16]
   return(result);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f043 0320 	orr.w	r3, r3, #32
 8009682:	653b      	str	r3, [r7, #80]	@ 0x50
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	69f9      	ldr	r1, [r7, #28]
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	61bb      	str	r3, [r7, #24]
   return(result);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e6      	bne.n	800966e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	375c      	adds	r7, #92	@ 0x5c
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	08009b23 	.word	0x08009b23
 80096b4:	0800997b 	.word	0x0800997b

080096b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b089      	sub	sp, #36	@ 0x24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	61bb      	str	r3, [r7, #24]
 80096e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6979      	ldr	r1, [r7, #20]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	613b      	str	r3, [r7, #16]
   return(result);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e6      	bne.n	80096c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80096f8:	bf00      	nop
 80096fa:	3724      	adds	r7, #36	@ 0x24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009704:	b480      	push	{r7}
 8009706:	b095      	sub	sp, #84	@ 0x54
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800972a:	643b      	str	r3, [r7, #64]	@ 0x40
 800972c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e6      	bne.n	800970c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	61fb      	str	r3, [r7, #28]
   return(result);
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	f023 0301 	bic.w	r3, r3, #1
 8009754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3308      	adds	r3, #8
 800975c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800975e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e5      	bne.n	800973e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009776:	2b01      	cmp	r3, #1
 8009778:	d118      	bne.n	80097ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60bb      	str	r3, [r7, #8]
   return(result);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 0310 	bic.w	r3, r3, #16
 800978e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	613b      	str	r3, [r7, #16]
   return(result);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e6      	bne.n	800977a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097c0:	bf00      	nop
 80097c2:	3754      	adds	r7, #84	@ 0x54
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b090      	sub	sp, #64	@ 0x40
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d037      	beq.n	8009852 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80097e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	623b      	str	r3, [r7, #32]
   return(result);
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009800:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3308      	adds	r3, #8
 8009808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800980a:	633a      	str	r2, [r7, #48]	@ 0x30
 800980c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e5      	bne.n	80097ea <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800981e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	60fb      	str	r3, [r7, #12]
   return(result);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
 8009834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	69b9      	ldr	r1, [r7, #24]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	617b      	str	r3, [r7, #20]
   return(result);
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e6      	bne.n	800981e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009850:	e002      	b.n	8009858 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8009852:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009854:	f7ff fac6 	bl	8008de4 <HAL_UART_TxCpltCallback>
}
 8009858:	bf00      	nop
 800985a:	3740      	adds	r7, #64	@ 0x40
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fac2 	bl	8008df8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009888:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800988e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009896:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a2:	2b80      	cmp	r3, #128	@ 0x80
 80098a4:	d109      	bne.n	80098ba <UART_DMAError+0x3e>
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b21      	cmp	r3, #33	@ 0x21
 80098aa:	d106      	bne.n	80098ba <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80098b4:	6978      	ldr	r0, [r7, #20]
 80098b6:	f7ff feff 	bl	80096b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c4:	2b40      	cmp	r3, #64	@ 0x40
 80098c6:	d109      	bne.n	80098dc <UART_DMAError+0x60>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b22      	cmp	r3, #34	@ 0x22
 80098cc:	d106      	bne.n	80098dc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f7ff ff14 	bl	8009704 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098e2:	f043 0210 	orr.w	r2, r3, #16
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ec:	6978      	ldr	r0, [r7, #20]
 80098ee:	f7ff fa8d 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f2:	bf00      	nop
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7ff fa77 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b088      	sub	sp, #32
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	60bb      	str	r3, [r7, #8]
   return(result);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6979      	ldr	r1, [r7, #20]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	613b      	str	r3, [r7, #16]
   return(result);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e6      	bne.n	800992e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fa39 	bl	8008de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009972:	bf00      	nop
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b09c      	sub	sp, #112	@ 0x70
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009988:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009992:	2b22      	cmp	r3, #34	@ 0x22
 8009994:	f040 80b9 	bne.w	8009b0a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800999e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80099a6:	b2d9      	uxtb	r1, r3
 80099a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b2:	400a      	ands	r2, r1
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 809c 	bne.w	8009b1a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e6      	bne.n	80099e2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3308      	adds	r3, #8
 8009a32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a34:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e5      	bne.n	8009a14 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d018      	beq.n	8009a9c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	623b      	str	r3, [r7, #32]
   return(result);
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e6      	bne.n	8009a6a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d12e      	bne.n	8009b02 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0310 	bic.w	r3, r3, #16
 8009abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e6      	bne.n	8009aaa <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	d103      	bne.n	8009af2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2210      	movs	r2, #16
 8009af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff f990 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b00:	e00b      	b.n	8009b1a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f7 fde4 	bl	80016d0 <HAL_UART_RxCpltCallback>
}
 8009b08:	e007      	b.n	8009b1a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0208 	orr.w	r2, r2, #8
 8009b18:	619a      	str	r2, [r3, #24]
}
 8009b1a:	bf00      	nop
 8009b1c:	3770      	adds	r7, #112	@ 0x70
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b09c      	sub	sp, #112	@ 0x70
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b30:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b3a:	2b22      	cmp	r3, #34	@ 0x22
 8009b3c:	f040 80b9 	bne.w	8009cb2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009b46:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b50:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b54:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b58:	4013      	ands	r3, r2
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 809c 	bne.w	8009cc2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ba8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009baa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e6      	bne.n	8009b8a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e5      	bne.n	8009bbc <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d018      	beq.n	8009c44 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c32:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e6      	bne.n	8009c12 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d12e      	bne.n	8009caa <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f023 0310 	bic.w	r3, r3, #16
 8009c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e6      	bne.n	8009c52 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f003 0310 	and.w	r3, r3, #16
 8009c8e:	2b10      	cmp	r3, #16
 8009c90:	d103      	bne.n	8009c9a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2210      	movs	r2, #16
 8009c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff f8bc 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ca8:	e00b      	b.n	8009cc2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7f7 fd10 	bl	80016d0 <HAL_UART_RxCpltCallback>
}
 8009cb0:	e007      	b.n	8009cc2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0208 	orr.w	r2, r2, #8
 8009cc0:	619a      	str	r2, [r3, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	3770      	adds	r7, #112	@ 0x70
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <__cvt>:
 8009cde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce2:	ec57 6b10 	vmov	r6, r7, d0
 8009ce6:	2f00      	cmp	r7, #0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	4619      	mov	r1, r3
 8009cec:	463b      	mov	r3, r7
 8009cee:	bfbb      	ittet	lt
 8009cf0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009cf4:	461f      	movlt	r7, r3
 8009cf6:	2300      	movge	r3, #0
 8009cf8:	232d      	movlt	r3, #45	@ 0x2d
 8009cfa:	700b      	strb	r3, [r1, #0]
 8009cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cfe:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d02:	4691      	mov	r9, r2
 8009d04:	f023 0820 	bic.w	r8, r3, #32
 8009d08:	bfbc      	itt	lt
 8009d0a:	4632      	movlt	r2, r6
 8009d0c:	4616      	movlt	r6, r2
 8009d0e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d12:	d005      	beq.n	8009d20 <__cvt+0x42>
 8009d14:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d18:	d100      	bne.n	8009d1c <__cvt+0x3e>
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	e000      	b.n	8009d22 <__cvt+0x44>
 8009d20:	2103      	movs	r1, #3
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	ab02      	add	r3, sp, #8
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	ec47 6b10 	vmov	d0, r6, r7
 8009d2e:	4653      	mov	r3, sl
 8009d30:	4622      	mov	r2, r4
 8009d32:	f001 f881 	bl	800ae38 <_dtoa_r>
 8009d36:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	d119      	bne.n	8009d72 <__cvt+0x94>
 8009d3e:	f019 0f01 	tst.w	r9, #1
 8009d42:	d00e      	beq.n	8009d62 <__cvt+0x84>
 8009d44:	eb00 0904 	add.w	r9, r0, r4
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d54:	b108      	cbz	r0, 8009d5a <__cvt+0x7c>
 8009d56:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d5a:	2230      	movs	r2, #48	@ 0x30
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	454b      	cmp	r3, r9
 8009d60:	d31e      	bcc.n	8009da0 <__cvt+0xc2>
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d66:	1b5b      	subs	r3, r3, r5
 8009d68:	4628      	mov	r0, r5
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	b004      	add	sp, #16
 8009d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d76:	eb00 0904 	add.w	r9, r0, r4
 8009d7a:	d1e5      	bne.n	8009d48 <__cvt+0x6a>
 8009d7c:	7803      	ldrb	r3, [r0, #0]
 8009d7e:	2b30      	cmp	r3, #48	@ 0x30
 8009d80:	d10a      	bne.n	8009d98 <__cvt+0xba>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8e:	b918      	cbnz	r0, 8009d98 <__cvt+0xba>
 8009d90:	f1c4 0401 	rsb	r4, r4, #1
 8009d94:	f8ca 4000 	str.w	r4, [sl]
 8009d98:	f8da 3000 	ldr.w	r3, [sl]
 8009d9c:	4499      	add	r9, r3
 8009d9e:	e7d3      	b.n	8009d48 <__cvt+0x6a>
 8009da0:	1c59      	adds	r1, r3, #1
 8009da2:	9103      	str	r1, [sp, #12]
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	e7d9      	b.n	8009d5c <__cvt+0x7e>

08009da8 <__exponent>:
 8009da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	bfba      	itte	lt
 8009dae:	4249      	neglt	r1, r1
 8009db0:	232d      	movlt	r3, #45	@ 0x2d
 8009db2:	232b      	movge	r3, #43	@ 0x2b
 8009db4:	2909      	cmp	r1, #9
 8009db6:	7002      	strb	r2, [r0, #0]
 8009db8:	7043      	strb	r3, [r0, #1]
 8009dba:	dd29      	ble.n	8009e10 <__exponent+0x68>
 8009dbc:	f10d 0307 	add.w	r3, sp, #7
 8009dc0:	461d      	mov	r5, r3
 8009dc2:	270a      	movs	r7, #10
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8009dca:	fb07 1416 	mls	r4, r7, r6, r1
 8009dce:	3430      	adds	r4, #48	@ 0x30
 8009dd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	2c63      	cmp	r4, #99	@ 0x63
 8009dd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ddc:	4631      	mov	r1, r6
 8009dde:	dcf1      	bgt.n	8009dc4 <__exponent+0x1c>
 8009de0:	3130      	adds	r1, #48	@ 0x30
 8009de2:	1e94      	subs	r4, r2, #2
 8009de4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009de8:	1c41      	adds	r1, r0, #1
 8009dea:	4623      	mov	r3, r4
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	d30a      	bcc.n	8009e06 <__exponent+0x5e>
 8009df0:	f10d 0309 	add.w	r3, sp, #9
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	42ac      	cmp	r4, r5
 8009df8:	bf88      	it	hi
 8009dfa:	2300      	movhi	r3, #0
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	4403      	add	r3, r0
 8009e00:	1a18      	subs	r0, r3, r0
 8009e02:	b003      	add	sp, #12
 8009e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e0e:	e7ed      	b.n	8009dec <__exponent+0x44>
 8009e10:	2330      	movs	r3, #48	@ 0x30
 8009e12:	3130      	adds	r1, #48	@ 0x30
 8009e14:	7083      	strb	r3, [r0, #2]
 8009e16:	70c1      	strb	r1, [r0, #3]
 8009e18:	1d03      	adds	r3, r0, #4
 8009e1a:	e7f1      	b.n	8009e00 <__exponent+0x58>

08009e1c <_printf_float>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	b08d      	sub	sp, #52	@ 0x34
 8009e22:	460c      	mov	r4, r1
 8009e24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e28:	4616      	mov	r6, r2
 8009e2a:	461f      	mov	r7, r3
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	f000 fefb 	bl	800ac28 <_localeconv_r>
 8009e32:	6803      	ldr	r3, [r0, #0]
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f6 fa1a 	bl	8000270 <strlen>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e40:	f8d8 3000 	ldr.w	r3, [r8]
 8009e44:	9005      	str	r0, [sp, #20]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	f103 0208 	add.w	r2, r3, #8
 8009e50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e54:	f8d4 b000 	ldr.w	fp, [r4]
 8009e58:	f8c8 2000 	str.w	r2, [r8]
 8009e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e64:	9307      	str	r3, [sp, #28]
 8009e66:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e72:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e4 <_printf_float+0x2c8>)
 8009e74:	f04f 32ff 	mov.w	r2, #4294967295
 8009e78:	f7f6 fe58 	bl	8000b2c <__aeabi_dcmpun>
 8009e7c:	bb70      	cbnz	r0, 8009edc <_printf_float+0xc0>
 8009e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e82:	4b98      	ldr	r3, [pc, #608]	@ (800a0e4 <_printf_float+0x2c8>)
 8009e84:	f04f 32ff 	mov.w	r2, #4294967295
 8009e88:	f7f6 fe32 	bl	8000af0 <__aeabi_dcmple>
 8009e8c:	bb30      	cbnz	r0, 8009edc <_printf_float+0xc0>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 fe21 	bl	8000adc <__aeabi_dcmplt>
 8009e9a:	b110      	cbz	r0, 8009ea2 <_printf_float+0x86>
 8009e9c:	232d      	movs	r3, #45	@ 0x2d
 8009e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea2:	4a91      	ldr	r2, [pc, #580]	@ (800a0e8 <_printf_float+0x2cc>)
 8009ea4:	4b91      	ldr	r3, [pc, #580]	@ (800a0ec <_printf_float+0x2d0>)
 8009ea6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009eaa:	bf8c      	ite	hi
 8009eac:	4690      	movhi	r8, r2
 8009eae:	4698      	movls	r8, r3
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	f02b 0304 	bic.w	r3, fp, #4
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	f04f 0900 	mov.w	r9, #0
 8009ebe:	9700      	str	r7, [sp, #0]
 8009ec0:	4633      	mov	r3, r6
 8009ec2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 f9d2 	bl	800a270 <_printf_common>
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f040 808d 	bne.w	8009fec <_printf_float+0x1d0>
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	b00d      	add	sp, #52	@ 0x34
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 fe22 	bl	8000b2c <__aeabi_dcmpun>
 8009ee8:	b140      	cbz	r0, 8009efc <_printf_float+0xe0>
 8009eea:	464b      	mov	r3, r9
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfbc      	itt	lt
 8009ef0:	232d      	movlt	r3, #45	@ 0x2d
 8009ef2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ef6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0f0 <_printf_float+0x2d4>)
 8009ef8:	4b7e      	ldr	r3, [pc, #504]	@ (800a0f4 <_printf_float+0x2d8>)
 8009efa:	e7d4      	b.n	8009ea6 <_printf_float+0x8a>
 8009efc:	6863      	ldr	r3, [r4, #4]
 8009efe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f02:	9206      	str	r2, [sp, #24]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	d13b      	bne.n	8009f80 <_printf_float+0x164>
 8009f08:	2306      	movs	r3, #6
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f10:	2300      	movs	r3, #0
 8009f12:	6022      	str	r2, [r4, #0]
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	ec49 8b10 	vmov	d0, r8, r9
 8009f26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7ff fed7 	bl	8009cde <__cvt>
 8009f30:	9b06      	ldr	r3, [sp, #24]
 8009f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f34:	2b47      	cmp	r3, #71	@ 0x47
 8009f36:	4680      	mov	r8, r0
 8009f38:	d129      	bne.n	8009f8e <_printf_float+0x172>
 8009f3a:	1cc8      	adds	r0, r1, #3
 8009f3c:	db02      	blt.n	8009f44 <_printf_float+0x128>
 8009f3e:	6863      	ldr	r3, [r4, #4]
 8009f40:	4299      	cmp	r1, r3
 8009f42:	dd41      	ble.n	8009fc8 <_printf_float+0x1ac>
 8009f44:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f48:	fa5f fa8a 	uxtb.w	sl, sl
 8009f4c:	3901      	subs	r1, #1
 8009f4e:	4652      	mov	r2, sl
 8009f50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f56:	f7ff ff27 	bl	8009da8 <__exponent>
 8009f5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f5c:	1813      	adds	r3, r2, r0
 8009f5e:	2a01      	cmp	r2, #1
 8009f60:	4681      	mov	r9, r0
 8009f62:	6123      	str	r3, [r4, #16]
 8009f64:	dc02      	bgt.n	8009f6c <_printf_float+0x150>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	07d2      	lsls	r2, r2, #31
 8009f6a:	d501      	bpl.n	8009f70 <_printf_float+0x154>
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	6123      	str	r3, [r4, #16]
 8009f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0a2      	beq.n	8009ebe <_printf_float+0xa2>
 8009f78:	232d      	movs	r3, #45	@ 0x2d
 8009f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f7e:	e79e      	b.n	8009ebe <_printf_float+0xa2>
 8009f80:	9a06      	ldr	r2, [sp, #24]
 8009f82:	2a47      	cmp	r2, #71	@ 0x47
 8009f84:	d1c2      	bne.n	8009f0c <_printf_float+0xf0>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1c0      	bne.n	8009f0c <_printf_float+0xf0>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7bd      	b.n	8009f0a <_printf_float+0xee>
 8009f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f92:	d9db      	bls.n	8009f4c <_printf_float+0x130>
 8009f94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f98:	d118      	bne.n	8009fcc <_printf_float+0x1b0>
 8009f9a:	2900      	cmp	r1, #0
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	dd0b      	ble.n	8009fb8 <_printf_float+0x19c>
 8009fa0:	6121      	str	r1, [r4, #16]
 8009fa2:	b913      	cbnz	r3, 8009faa <_printf_float+0x18e>
 8009fa4:	6822      	ldr	r2, [r4, #0]
 8009fa6:	07d0      	lsls	r0, r2, #31
 8009fa8:	d502      	bpl.n	8009fb0 <_printf_float+0x194>
 8009faa:	3301      	adds	r3, #1
 8009fac:	440b      	add	r3, r1
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009fb2:	f04f 0900 	mov.w	r9, #0
 8009fb6:	e7db      	b.n	8009f70 <_printf_float+0x154>
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_printf_float+0x1a4>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d2      	lsls	r2, r2, #31
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_float+0x1a8>
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	e7f4      	b.n	8009fae <_printf_float+0x192>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e7f2      	b.n	8009fae <_printf_float+0x192>
 8009fc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	db05      	blt.n	8009fde <_printf_float+0x1c2>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	6121      	str	r1, [r4, #16]
 8009fd6:	07d8      	lsls	r0, r3, #31
 8009fd8:	d5ea      	bpl.n	8009fb0 <_printf_float+0x194>
 8009fda:	1c4b      	adds	r3, r1, #1
 8009fdc:	e7e7      	b.n	8009fae <_printf_float+0x192>
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	bfd4      	ite	le
 8009fe2:	f1c1 0202 	rsble	r2, r1, #2
 8009fe6:	2201      	movgt	r2, #1
 8009fe8:	4413      	add	r3, r2
 8009fea:	e7e0      	b.n	8009fae <_printf_float+0x192>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	055a      	lsls	r2, r3, #21
 8009ff0:	d407      	bmi.n	800a002 <_printf_float+0x1e6>
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	4642      	mov	r2, r8
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d12b      	bne.n	800a058 <_printf_float+0x23c>
 800a000:	e767      	b.n	8009ed2 <_printf_float+0xb6>
 800a002:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a006:	f240 80dd 	bls.w	800a1c4 <_printf_float+0x3a8>
 800a00a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a00e:	2200      	movs	r2, #0
 800a010:	2300      	movs	r3, #0
 800a012:	f7f6 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a016:	2800      	cmp	r0, #0
 800a018:	d033      	beq.n	800a082 <_printf_float+0x266>
 800a01a:	4a37      	ldr	r2, [pc, #220]	@ (800a0f8 <_printf_float+0x2dc>)
 800a01c:	2301      	movs	r3, #1
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f af54 	beq.w	8009ed2 <_printf_float+0xb6>
 800a02a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a02e:	4543      	cmp	r3, r8
 800a030:	db02      	blt.n	800a038 <_printf_float+0x21c>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	07d8      	lsls	r0, r3, #31
 800a036:	d50f      	bpl.n	800a058 <_printf_float+0x23c>
 800a038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af45 	beq.w	8009ed2 <_printf_float+0xb6>
 800a048:	f04f 0900 	mov.w	r9, #0
 800a04c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a050:	f104 0a1a 	add.w	sl, r4, #26
 800a054:	45c8      	cmp	r8, r9
 800a056:	dc09      	bgt.n	800a06c <_printf_float+0x250>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	079b      	lsls	r3, r3, #30
 800a05c:	f100 8103 	bmi.w	800a266 <_printf_float+0x44a>
 800a060:	68e0      	ldr	r0, [r4, #12]
 800a062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a064:	4298      	cmp	r0, r3
 800a066:	bfb8      	it	lt
 800a068:	4618      	movlt	r0, r3
 800a06a:	e734      	b.n	8009ed6 <_printf_float+0xba>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4652      	mov	r2, sl
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	f43f af2b 	beq.w	8009ed2 <_printf_float+0xb6>
 800a07c:	f109 0901 	add.w	r9, r9, #1
 800a080:	e7e8      	b.n	800a054 <_printf_float+0x238>
 800a082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	dc39      	bgt.n	800a0fc <_printf_float+0x2e0>
 800a088:	4a1b      	ldr	r2, [pc, #108]	@ (800a0f8 <_printf_float+0x2dc>)
 800a08a:	2301      	movs	r3, #1
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af1d 	beq.w	8009ed2 <_printf_float+0xb6>
 800a098:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a09c:	ea59 0303 	orrs.w	r3, r9, r3
 800a0a0:	d102      	bne.n	800a0a8 <_printf_float+0x28c>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	07d9      	lsls	r1, r3, #31
 800a0a6:	d5d7      	bpl.n	800a058 <_printf_float+0x23c>
 800a0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af0d 	beq.w	8009ed2 <_printf_float+0xb6>
 800a0b8:	f04f 0a00 	mov.w	sl, #0
 800a0bc:	f104 0b1a 	add.w	fp, r4, #26
 800a0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	4553      	cmp	r3, sl
 800a0c6:	dc01      	bgt.n	800a0cc <_printf_float+0x2b0>
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	e793      	b.n	8009ff4 <_printf_float+0x1d8>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	465a      	mov	r2, fp
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f aefb 	beq.w	8009ed2 <_printf_float+0xb6>
 800a0dc:	f10a 0a01 	add.w	sl, sl, #1
 800a0e0:	e7ee      	b.n	800a0c0 <_printf_float+0x2a4>
 800a0e2:	bf00      	nop
 800a0e4:	7fefffff 	.word	0x7fefffff
 800a0e8:	0800f288 	.word	0x0800f288
 800a0ec:	0800f284 	.word	0x0800f284
 800a0f0:	0800f290 	.word	0x0800f290
 800a0f4:	0800f28c 	.word	0x0800f28c
 800a0f8:	0800f294 	.word	0x0800f294
 800a0fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a102:	4553      	cmp	r3, sl
 800a104:	bfa8      	it	ge
 800a106:	4653      	movge	r3, sl
 800a108:	2b00      	cmp	r3, #0
 800a10a:	4699      	mov	r9, r3
 800a10c:	dc36      	bgt.n	800a17c <_printf_float+0x360>
 800a10e:	f04f 0b00 	mov.w	fp, #0
 800a112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a116:	f104 021a 	add.w	r2, r4, #26
 800a11a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a11c:	9306      	str	r3, [sp, #24]
 800a11e:	eba3 0309 	sub.w	r3, r3, r9
 800a122:	455b      	cmp	r3, fp
 800a124:	dc31      	bgt.n	800a18a <_printf_float+0x36e>
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	459a      	cmp	sl, r3
 800a12a:	dc3a      	bgt.n	800a1a2 <_printf_float+0x386>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	07da      	lsls	r2, r3, #31
 800a130:	d437      	bmi.n	800a1a2 <_printf_float+0x386>
 800a132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a134:	ebaa 0903 	sub.w	r9, sl, r3
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	ebaa 0303 	sub.w	r3, sl, r3
 800a13e:	4599      	cmp	r9, r3
 800a140:	bfa8      	it	ge
 800a142:	4699      	movge	r9, r3
 800a144:	f1b9 0f00 	cmp.w	r9, #0
 800a148:	dc33      	bgt.n	800a1b2 <_printf_float+0x396>
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a152:	f104 0b1a 	add.w	fp, r4, #26
 800a156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a158:	ebaa 0303 	sub.w	r3, sl, r3
 800a15c:	eba3 0309 	sub.w	r3, r3, r9
 800a160:	4543      	cmp	r3, r8
 800a162:	f77f af79 	ble.w	800a058 <_printf_float+0x23c>
 800a166:	2301      	movs	r3, #1
 800a168:	465a      	mov	r2, fp
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f aeae 	beq.w	8009ed2 <_printf_float+0xb6>
 800a176:	f108 0801 	add.w	r8, r8, #1
 800a17a:	e7ec      	b.n	800a156 <_printf_float+0x33a>
 800a17c:	4642      	mov	r2, r8
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	d1c2      	bne.n	800a10e <_printf_float+0x2f2>
 800a188:	e6a3      	b.n	8009ed2 <_printf_float+0xb6>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	9206      	str	r2, [sp, #24]
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	f43f ae9c 	beq.w	8009ed2 <_printf_float+0xb6>
 800a19a:	9a06      	ldr	r2, [sp, #24]
 800a19c:	f10b 0b01 	add.w	fp, fp, #1
 800a1a0:	e7bb      	b.n	800a11a <_printf_float+0x2fe>
 800a1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d1c0      	bne.n	800a132 <_printf_float+0x316>
 800a1b0:	e68f      	b.n	8009ed2 <_printf_float+0xb6>
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	4442      	add	r2, r8
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d1c3      	bne.n	800a14a <_printf_float+0x32e>
 800a1c2:	e686      	b.n	8009ed2 <_printf_float+0xb6>
 800a1c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1c8:	f1ba 0f01 	cmp.w	sl, #1
 800a1cc:	dc01      	bgt.n	800a1d2 <_printf_float+0x3b6>
 800a1ce:	07db      	lsls	r3, r3, #31
 800a1d0:	d536      	bpl.n	800a240 <_printf_float+0x424>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4628      	mov	r0, r5
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f43f ae78 	beq.w	8009ed2 <_printf_float+0xb6>
 800a1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b8      	blx	r7
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	f43f ae70 	beq.w	8009ed2 <_printf_float+0xb6>
 800a1f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1fe:	f7f6 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800a202:	b9c0      	cbnz	r0, 800a236 <_printf_float+0x41a>
 800a204:	4653      	mov	r3, sl
 800a206:	f108 0201 	add.w	r2, r8, #1
 800a20a:	4631      	mov	r1, r6
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b8      	blx	r7
 800a210:	3001      	adds	r0, #1
 800a212:	d10c      	bne.n	800a22e <_printf_float+0x412>
 800a214:	e65d      	b.n	8009ed2 <_printf_float+0xb6>
 800a216:	2301      	movs	r3, #1
 800a218:	465a      	mov	r2, fp
 800a21a:	4631      	mov	r1, r6
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	f43f ae56 	beq.w	8009ed2 <_printf_float+0xb6>
 800a226:	f108 0801 	add.w	r8, r8, #1
 800a22a:	45d0      	cmp	r8, sl
 800a22c:	dbf3      	blt.n	800a216 <_printf_float+0x3fa>
 800a22e:	464b      	mov	r3, r9
 800a230:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a234:	e6df      	b.n	8009ff6 <_printf_float+0x1da>
 800a236:	f04f 0800 	mov.w	r8, #0
 800a23a:	f104 0b1a 	add.w	fp, r4, #26
 800a23e:	e7f4      	b.n	800a22a <_printf_float+0x40e>
 800a240:	2301      	movs	r3, #1
 800a242:	4642      	mov	r2, r8
 800a244:	e7e1      	b.n	800a20a <_printf_float+0x3ee>
 800a246:	2301      	movs	r3, #1
 800a248:	464a      	mov	r2, r9
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b8      	blx	r7
 800a250:	3001      	adds	r0, #1
 800a252:	f43f ae3e 	beq.w	8009ed2 <_printf_float+0xb6>
 800a256:	f108 0801 	add.w	r8, r8, #1
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a25e:	1a5b      	subs	r3, r3, r1
 800a260:	4543      	cmp	r3, r8
 800a262:	dcf0      	bgt.n	800a246 <_printf_float+0x42a>
 800a264:	e6fc      	b.n	800a060 <_printf_float+0x244>
 800a266:	f04f 0800 	mov.w	r8, #0
 800a26a:	f104 0919 	add.w	r9, r4, #25
 800a26e:	e7f4      	b.n	800a25a <_printf_float+0x43e>

0800a270 <_printf_common>:
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	4616      	mov	r6, r2
 800a276:	4698      	mov	r8, r3
 800a278:	688a      	ldr	r2, [r1, #8]
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a280:	4293      	cmp	r3, r2
 800a282:	bfb8      	it	lt
 800a284:	4613      	movlt	r3, r2
 800a286:	6033      	str	r3, [r6, #0]
 800a288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a28c:	4607      	mov	r7, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b10a      	cbz	r2, 800a296 <_printf_common+0x26>
 800a292:	3301      	adds	r3, #1
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	0699      	lsls	r1, r3, #26
 800a29a:	bf42      	ittt	mi
 800a29c:	6833      	ldrmi	r3, [r6, #0]
 800a29e:	3302      	addmi	r3, #2
 800a2a0:	6033      	strmi	r3, [r6, #0]
 800a2a2:	6825      	ldr	r5, [r4, #0]
 800a2a4:	f015 0506 	ands.w	r5, r5, #6
 800a2a8:	d106      	bne.n	800a2b8 <_printf_common+0x48>
 800a2aa:	f104 0a19 	add.w	sl, r4, #25
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	6832      	ldr	r2, [r6, #0]
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	dc26      	bgt.n	800a306 <_printf_common+0x96>
 800a2b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	3b00      	subs	r3, #0
 800a2c0:	bf18      	it	ne
 800a2c2:	2301      	movne	r3, #1
 800a2c4:	0692      	lsls	r2, r2, #26
 800a2c6:	d42b      	bmi.n	800a320 <_printf_common+0xb0>
 800a2c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	47c8      	blx	r9
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d01e      	beq.n	800a314 <_printf_common+0xa4>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	6922      	ldr	r2, [r4, #16]
 800a2da:	f003 0306 	and.w	r3, r3, #6
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	bf02      	ittt	eq
 800a2e2:	68e5      	ldreq	r5, [r4, #12]
 800a2e4:	6833      	ldreq	r3, [r6, #0]
 800a2e6:	1aed      	subeq	r5, r5, r3
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	bf0c      	ite	eq
 800a2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2f0:	2500      	movne	r5, #0
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	bfc4      	itt	gt
 800a2f6:	1a9b      	subgt	r3, r3, r2
 800a2f8:	18ed      	addgt	r5, r5, r3
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	341a      	adds	r4, #26
 800a2fe:	42b5      	cmp	r5, r6
 800a300:	d11a      	bne.n	800a338 <_printf_common+0xc8>
 800a302:	2000      	movs	r0, #0
 800a304:	e008      	b.n	800a318 <_printf_common+0xa8>
 800a306:	2301      	movs	r3, #1
 800a308:	4652      	mov	r2, sl
 800a30a:	4641      	mov	r1, r8
 800a30c:	4638      	mov	r0, r7
 800a30e:	47c8      	blx	r9
 800a310:	3001      	adds	r0, #1
 800a312:	d103      	bne.n	800a31c <_printf_common+0xac>
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31c:	3501      	adds	r5, #1
 800a31e:	e7c6      	b.n	800a2ae <_printf_common+0x3e>
 800a320:	18e1      	adds	r1, r4, r3
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	2030      	movs	r0, #48	@ 0x30
 800a326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a32a:	4422      	add	r2, r4
 800a32c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a334:	3302      	adds	r3, #2
 800a336:	e7c7      	b.n	800a2c8 <_printf_common+0x58>
 800a338:	2301      	movs	r3, #1
 800a33a:	4622      	mov	r2, r4
 800a33c:	4641      	mov	r1, r8
 800a33e:	4638      	mov	r0, r7
 800a340:	47c8      	blx	r9
 800a342:	3001      	adds	r0, #1
 800a344:	d0e6      	beq.n	800a314 <_printf_common+0xa4>
 800a346:	3601      	adds	r6, #1
 800a348:	e7d9      	b.n	800a2fe <_printf_common+0x8e>
	...

0800a34c <_printf_i>:
 800a34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a350:	7e0f      	ldrb	r7, [r1, #24]
 800a352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a354:	2f78      	cmp	r7, #120	@ 0x78
 800a356:	4691      	mov	r9, r2
 800a358:	4680      	mov	r8, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	469a      	mov	sl, r3
 800a35e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a362:	d807      	bhi.n	800a374 <_printf_i+0x28>
 800a364:	2f62      	cmp	r7, #98	@ 0x62
 800a366:	d80a      	bhi.n	800a37e <_printf_i+0x32>
 800a368:	2f00      	cmp	r7, #0
 800a36a:	f000 80d1 	beq.w	800a510 <_printf_i+0x1c4>
 800a36e:	2f58      	cmp	r7, #88	@ 0x58
 800a370:	f000 80b8 	beq.w	800a4e4 <_printf_i+0x198>
 800a374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a37c:	e03a      	b.n	800a3f4 <_printf_i+0xa8>
 800a37e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a382:	2b15      	cmp	r3, #21
 800a384:	d8f6      	bhi.n	800a374 <_printf_i+0x28>
 800a386:	a101      	add	r1, pc, #4	@ (adr r1, 800a38c <_printf_i+0x40>)
 800a388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a38c:	0800a3e5 	.word	0x0800a3e5
 800a390:	0800a3f9 	.word	0x0800a3f9
 800a394:	0800a375 	.word	0x0800a375
 800a398:	0800a375 	.word	0x0800a375
 800a39c:	0800a375 	.word	0x0800a375
 800a3a0:	0800a375 	.word	0x0800a375
 800a3a4:	0800a3f9 	.word	0x0800a3f9
 800a3a8:	0800a375 	.word	0x0800a375
 800a3ac:	0800a375 	.word	0x0800a375
 800a3b0:	0800a375 	.word	0x0800a375
 800a3b4:	0800a375 	.word	0x0800a375
 800a3b8:	0800a4f7 	.word	0x0800a4f7
 800a3bc:	0800a423 	.word	0x0800a423
 800a3c0:	0800a4b1 	.word	0x0800a4b1
 800a3c4:	0800a375 	.word	0x0800a375
 800a3c8:	0800a375 	.word	0x0800a375
 800a3cc:	0800a519 	.word	0x0800a519
 800a3d0:	0800a375 	.word	0x0800a375
 800a3d4:	0800a423 	.word	0x0800a423
 800a3d8:	0800a375 	.word	0x0800a375
 800a3dc:	0800a375 	.word	0x0800a375
 800a3e0:	0800a4b9 	.word	0x0800a4b9
 800a3e4:	6833      	ldr	r3, [r6, #0]
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6032      	str	r2, [r6, #0]
 800a3ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e09c      	b.n	800a532 <_printf_i+0x1e6>
 800a3f8:	6833      	ldr	r3, [r6, #0]
 800a3fa:	6820      	ldr	r0, [r4, #0]
 800a3fc:	1d19      	adds	r1, r3, #4
 800a3fe:	6031      	str	r1, [r6, #0]
 800a400:	0606      	lsls	r6, r0, #24
 800a402:	d501      	bpl.n	800a408 <_printf_i+0xbc>
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	e003      	b.n	800a410 <_printf_i+0xc4>
 800a408:	0645      	lsls	r5, r0, #25
 800a40a:	d5fb      	bpl.n	800a404 <_printf_i+0xb8>
 800a40c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a410:	2d00      	cmp	r5, #0
 800a412:	da03      	bge.n	800a41c <_printf_i+0xd0>
 800a414:	232d      	movs	r3, #45	@ 0x2d
 800a416:	426d      	negs	r5, r5
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a41c:	4858      	ldr	r0, [pc, #352]	@ (800a580 <_printf_i+0x234>)
 800a41e:	230a      	movs	r3, #10
 800a420:	e011      	b.n	800a446 <_printf_i+0xfa>
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	6833      	ldr	r3, [r6, #0]
 800a426:	0608      	lsls	r0, r1, #24
 800a428:	f853 5b04 	ldr.w	r5, [r3], #4
 800a42c:	d402      	bmi.n	800a434 <_printf_i+0xe8>
 800a42e:	0649      	lsls	r1, r1, #25
 800a430:	bf48      	it	mi
 800a432:	b2ad      	uxthmi	r5, r5
 800a434:	2f6f      	cmp	r7, #111	@ 0x6f
 800a436:	4852      	ldr	r0, [pc, #328]	@ (800a580 <_printf_i+0x234>)
 800a438:	6033      	str	r3, [r6, #0]
 800a43a:	bf14      	ite	ne
 800a43c:	230a      	movne	r3, #10
 800a43e:	2308      	moveq	r3, #8
 800a440:	2100      	movs	r1, #0
 800a442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a446:	6866      	ldr	r6, [r4, #4]
 800a448:	60a6      	str	r6, [r4, #8]
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	db05      	blt.n	800a45a <_printf_i+0x10e>
 800a44e:	6821      	ldr	r1, [r4, #0]
 800a450:	432e      	orrs	r6, r5
 800a452:	f021 0104 	bic.w	r1, r1, #4
 800a456:	6021      	str	r1, [r4, #0]
 800a458:	d04b      	beq.n	800a4f2 <_printf_i+0x1a6>
 800a45a:	4616      	mov	r6, r2
 800a45c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a460:	fb03 5711 	mls	r7, r3, r1, r5
 800a464:	5dc7      	ldrb	r7, [r0, r7]
 800a466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a46a:	462f      	mov	r7, r5
 800a46c:	42bb      	cmp	r3, r7
 800a46e:	460d      	mov	r5, r1
 800a470:	d9f4      	bls.n	800a45c <_printf_i+0x110>
 800a472:	2b08      	cmp	r3, #8
 800a474:	d10b      	bne.n	800a48e <_printf_i+0x142>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	07df      	lsls	r7, r3, #31
 800a47a:	d508      	bpl.n	800a48e <_printf_i+0x142>
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	6861      	ldr	r1, [r4, #4]
 800a480:	4299      	cmp	r1, r3
 800a482:	bfde      	ittt	le
 800a484:	2330      	movle	r3, #48	@ 0x30
 800a486:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a48a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a48e:	1b92      	subs	r2, r2, r6
 800a490:	6122      	str	r2, [r4, #16]
 800a492:	f8cd a000 	str.w	sl, [sp]
 800a496:	464b      	mov	r3, r9
 800a498:	aa03      	add	r2, sp, #12
 800a49a:	4621      	mov	r1, r4
 800a49c:	4640      	mov	r0, r8
 800a49e:	f7ff fee7 	bl	800a270 <_printf_common>
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	d14a      	bne.n	800a53c <_printf_i+0x1f0>
 800a4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4aa:	b004      	add	sp, #16
 800a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	f043 0320 	orr.w	r3, r3, #32
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	4832      	ldr	r0, [pc, #200]	@ (800a584 <_printf_i+0x238>)
 800a4ba:	2778      	movs	r7, #120	@ 0x78
 800a4bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	6831      	ldr	r1, [r6, #0]
 800a4c4:	061f      	lsls	r7, r3, #24
 800a4c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4ca:	d402      	bmi.n	800a4d2 <_printf_i+0x186>
 800a4cc:	065f      	lsls	r7, r3, #25
 800a4ce:	bf48      	it	mi
 800a4d0:	b2ad      	uxthmi	r5, r5
 800a4d2:	6031      	str	r1, [r6, #0]
 800a4d4:	07d9      	lsls	r1, r3, #31
 800a4d6:	bf44      	itt	mi
 800a4d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a4dc:	6023      	strmi	r3, [r4, #0]
 800a4de:	b11d      	cbz	r5, 800a4e8 <_printf_i+0x19c>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	e7ad      	b.n	800a440 <_printf_i+0xf4>
 800a4e4:	4826      	ldr	r0, [pc, #152]	@ (800a580 <_printf_i+0x234>)
 800a4e6:	e7e9      	b.n	800a4bc <_printf_i+0x170>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	f023 0320 	bic.w	r3, r3, #32
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	e7f6      	b.n	800a4e0 <_printf_i+0x194>
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	e7bd      	b.n	800a472 <_printf_i+0x126>
 800a4f6:	6833      	ldr	r3, [r6, #0]
 800a4f8:	6825      	ldr	r5, [r4, #0]
 800a4fa:	6961      	ldr	r1, [r4, #20]
 800a4fc:	1d18      	adds	r0, r3, #4
 800a4fe:	6030      	str	r0, [r6, #0]
 800a500:	062e      	lsls	r6, r5, #24
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	d501      	bpl.n	800a50a <_printf_i+0x1be>
 800a506:	6019      	str	r1, [r3, #0]
 800a508:	e002      	b.n	800a510 <_printf_i+0x1c4>
 800a50a:	0668      	lsls	r0, r5, #25
 800a50c:	d5fb      	bpl.n	800a506 <_printf_i+0x1ba>
 800a50e:	8019      	strh	r1, [r3, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	4616      	mov	r6, r2
 800a516:	e7bc      	b.n	800a492 <_printf_i+0x146>
 800a518:	6833      	ldr	r3, [r6, #0]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	6032      	str	r2, [r6, #0]
 800a51e:	681e      	ldr	r6, [r3, #0]
 800a520:	6862      	ldr	r2, [r4, #4]
 800a522:	2100      	movs	r1, #0
 800a524:	4630      	mov	r0, r6
 800a526:	f7f5 fe53 	bl	80001d0 <memchr>
 800a52a:	b108      	cbz	r0, 800a530 <_printf_i+0x1e4>
 800a52c:	1b80      	subs	r0, r0, r6
 800a52e:	6060      	str	r0, [r4, #4]
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	2300      	movs	r3, #0
 800a536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a53a:	e7aa      	b.n	800a492 <_printf_i+0x146>
 800a53c:	6923      	ldr	r3, [r4, #16]
 800a53e:	4632      	mov	r2, r6
 800a540:	4649      	mov	r1, r9
 800a542:	4640      	mov	r0, r8
 800a544:	47d0      	blx	sl
 800a546:	3001      	adds	r0, #1
 800a548:	d0ad      	beq.n	800a4a6 <_printf_i+0x15a>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	079b      	lsls	r3, r3, #30
 800a54e:	d413      	bmi.n	800a578 <_printf_i+0x22c>
 800a550:	68e0      	ldr	r0, [r4, #12]
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	4298      	cmp	r0, r3
 800a556:	bfb8      	it	lt
 800a558:	4618      	movlt	r0, r3
 800a55a:	e7a6      	b.n	800a4aa <_printf_i+0x15e>
 800a55c:	2301      	movs	r3, #1
 800a55e:	4632      	mov	r2, r6
 800a560:	4649      	mov	r1, r9
 800a562:	4640      	mov	r0, r8
 800a564:	47d0      	blx	sl
 800a566:	3001      	adds	r0, #1
 800a568:	d09d      	beq.n	800a4a6 <_printf_i+0x15a>
 800a56a:	3501      	adds	r5, #1
 800a56c:	68e3      	ldr	r3, [r4, #12]
 800a56e:	9903      	ldr	r1, [sp, #12]
 800a570:	1a5b      	subs	r3, r3, r1
 800a572:	42ab      	cmp	r3, r5
 800a574:	dcf2      	bgt.n	800a55c <_printf_i+0x210>
 800a576:	e7eb      	b.n	800a550 <_printf_i+0x204>
 800a578:	2500      	movs	r5, #0
 800a57a:	f104 0619 	add.w	r6, r4, #25
 800a57e:	e7f5      	b.n	800a56c <_printf_i+0x220>
 800a580:	0800f296 	.word	0x0800f296
 800a584:	0800f2a7 	.word	0x0800f2a7

0800a588 <_scanf_float>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	b087      	sub	sp, #28
 800a58e:	4691      	mov	r9, r2
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	688b      	ldr	r3, [r1, #8]
 800a594:	1e5a      	subs	r2, r3, #1
 800a596:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a59a:	bf81      	itttt	hi
 800a59c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a5a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a5a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a5a8:	608b      	strhi	r3, [r1, #8]
 800a5aa:	680b      	ldr	r3, [r1, #0]
 800a5ac:	460a      	mov	r2, r1
 800a5ae:	f04f 0500 	mov.w	r5, #0
 800a5b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a5b6:	f842 3b1c 	str.w	r3, [r2], #28
 800a5ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5be:	4680      	mov	r8, r0
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	bf98      	it	ls
 800a5c4:	f04f 0b00 	movls.w	fp, #0
 800a5c8:	9201      	str	r2, [sp, #4]
 800a5ca:	4616      	mov	r6, r2
 800a5cc:	46aa      	mov	sl, r5
 800a5ce:	462f      	mov	r7, r5
 800a5d0:	9502      	str	r5, [sp, #8]
 800a5d2:	68a2      	ldr	r2, [r4, #8]
 800a5d4:	b15a      	cbz	r2, 800a5ee <_scanf_float+0x66>
 800a5d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b4e      	cmp	r3, #78	@ 0x4e
 800a5de:	d863      	bhi.n	800a6a8 <_scanf_float+0x120>
 800a5e0:	2b40      	cmp	r3, #64	@ 0x40
 800a5e2:	d83b      	bhi.n	800a65c <_scanf_float+0xd4>
 800a5e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a5e8:	b2c8      	uxtb	r0, r1
 800a5ea:	280e      	cmp	r0, #14
 800a5ec:	d939      	bls.n	800a662 <_scanf_float+0xda>
 800a5ee:	b11f      	cbz	r7, 800a5f8 <_scanf_float+0x70>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5fc:	f1ba 0f01 	cmp.w	sl, #1
 800a600:	f200 8114 	bhi.w	800a82c <_scanf_float+0x2a4>
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	429e      	cmp	r6, r3
 800a608:	f200 8105 	bhi.w	800a816 <_scanf_float+0x28e>
 800a60c:	2001      	movs	r0, #1
 800a60e:	b007      	add	sp, #28
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a618:	2a0d      	cmp	r2, #13
 800a61a:	d8e8      	bhi.n	800a5ee <_scanf_float+0x66>
 800a61c:	a101      	add	r1, pc, #4	@ (adr r1, 800a624 <_scanf_float+0x9c>)
 800a61e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a76d 	.word	0x0800a76d
 800a628:	0800a5ef 	.word	0x0800a5ef
 800a62c:	0800a5ef 	.word	0x0800a5ef
 800a630:	0800a5ef 	.word	0x0800a5ef
 800a634:	0800a7c9 	.word	0x0800a7c9
 800a638:	0800a7a3 	.word	0x0800a7a3
 800a63c:	0800a5ef 	.word	0x0800a5ef
 800a640:	0800a5ef 	.word	0x0800a5ef
 800a644:	0800a77b 	.word	0x0800a77b
 800a648:	0800a5ef 	.word	0x0800a5ef
 800a64c:	0800a5ef 	.word	0x0800a5ef
 800a650:	0800a5ef 	.word	0x0800a5ef
 800a654:	0800a5ef 	.word	0x0800a5ef
 800a658:	0800a737 	.word	0x0800a737
 800a65c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a660:	e7da      	b.n	800a618 <_scanf_float+0x90>
 800a662:	290e      	cmp	r1, #14
 800a664:	d8c3      	bhi.n	800a5ee <_scanf_float+0x66>
 800a666:	a001      	add	r0, pc, #4	@ (adr r0, 800a66c <_scanf_float+0xe4>)
 800a668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a66c:	0800a727 	.word	0x0800a727
 800a670:	0800a5ef 	.word	0x0800a5ef
 800a674:	0800a727 	.word	0x0800a727
 800a678:	0800a7b7 	.word	0x0800a7b7
 800a67c:	0800a5ef 	.word	0x0800a5ef
 800a680:	0800a6c9 	.word	0x0800a6c9
 800a684:	0800a70d 	.word	0x0800a70d
 800a688:	0800a70d 	.word	0x0800a70d
 800a68c:	0800a70d 	.word	0x0800a70d
 800a690:	0800a70d 	.word	0x0800a70d
 800a694:	0800a70d 	.word	0x0800a70d
 800a698:	0800a70d 	.word	0x0800a70d
 800a69c:	0800a70d 	.word	0x0800a70d
 800a6a0:	0800a70d 	.word	0x0800a70d
 800a6a4:	0800a70d 	.word	0x0800a70d
 800a6a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a6aa:	d809      	bhi.n	800a6c0 <_scanf_float+0x138>
 800a6ac:	2b60      	cmp	r3, #96	@ 0x60
 800a6ae:	d8b1      	bhi.n	800a614 <_scanf_float+0x8c>
 800a6b0:	2b54      	cmp	r3, #84	@ 0x54
 800a6b2:	d07b      	beq.n	800a7ac <_scanf_float+0x224>
 800a6b4:	2b59      	cmp	r3, #89	@ 0x59
 800a6b6:	d19a      	bne.n	800a5ee <_scanf_float+0x66>
 800a6b8:	2d07      	cmp	r5, #7
 800a6ba:	d198      	bne.n	800a5ee <_scanf_float+0x66>
 800a6bc:	2508      	movs	r5, #8
 800a6be:	e02f      	b.n	800a720 <_scanf_float+0x198>
 800a6c0:	2b74      	cmp	r3, #116	@ 0x74
 800a6c2:	d073      	beq.n	800a7ac <_scanf_float+0x224>
 800a6c4:	2b79      	cmp	r3, #121	@ 0x79
 800a6c6:	e7f6      	b.n	800a6b6 <_scanf_float+0x12e>
 800a6c8:	6821      	ldr	r1, [r4, #0]
 800a6ca:	05c8      	lsls	r0, r1, #23
 800a6cc:	d51e      	bpl.n	800a70c <_scanf_float+0x184>
 800a6ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a6d2:	6021      	str	r1, [r4, #0]
 800a6d4:	3701      	adds	r7, #1
 800a6d6:	f1bb 0f00 	cmp.w	fp, #0
 800a6da:	d003      	beq.n	800a6e4 <_scanf_float+0x15c>
 800a6dc:	3201      	adds	r2, #1
 800a6de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6e2:	60a2      	str	r2, [r4, #8]
 800a6e4:	68a3      	ldr	r3, [r4, #8]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a6fc:	f340 8082 	ble.w	800a804 <_scanf_float+0x27c>
 800a700:	f8d9 3000 	ldr.w	r3, [r9]
 800a704:	3301      	adds	r3, #1
 800a706:	f8c9 3000 	str.w	r3, [r9]
 800a70a:	e762      	b.n	800a5d2 <_scanf_float+0x4a>
 800a70c:	eb1a 0105 	adds.w	r1, sl, r5
 800a710:	f47f af6d 	bne.w	800a5ee <_scanf_float+0x66>
 800a714:	6822      	ldr	r2, [r4, #0]
 800a716:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	460d      	mov	r5, r1
 800a71e:	468a      	mov	sl, r1
 800a720:	f806 3b01 	strb.w	r3, [r6], #1
 800a724:	e7de      	b.n	800a6e4 <_scanf_float+0x15c>
 800a726:	6822      	ldr	r2, [r4, #0]
 800a728:	0610      	lsls	r0, r2, #24
 800a72a:	f57f af60 	bpl.w	800a5ee <_scanf_float+0x66>
 800a72e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a732:	6022      	str	r2, [r4, #0]
 800a734:	e7f4      	b.n	800a720 <_scanf_float+0x198>
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	d10c      	bne.n	800a756 <_scanf_float+0x1ce>
 800a73c:	b977      	cbnz	r7, 800a75c <_scanf_float+0x1d4>
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a744:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a748:	d108      	bne.n	800a75c <_scanf_float+0x1d4>
 800a74a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a74e:	6022      	str	r2, [r4, #0]
 800a750:	f04f 0a01 	mov.w	sl, #1
 800a754:	e7e4      	b.n	800a720 <_scanf_float+0x198>
 800a756:	f1ba 0f02 	cmp.w	sl, #2
 800a75a:	d050      	beq.n	800a7fe <_scanf_float+0x276>
 800a75c:	2d01      	cmp	r5, #1
 800a75e:	d002      	beq.n	800a766 <_scanf_float+0x1de>
 800a760:	2d04      	cmp	r5, #4
 800a762:	f47f af44 	bne.w	800a5ee <_scanf_float+0x66>
 800a766:	3501      	adds	r5, #1
 800a768:	b2ed      	uxtb	r5, r5
 800a76a:	e7d9      	b.n	800a720 <_scanf_float+0x198>
 800a76c:	f1ba 0f01 	cmp.w	sl, #1
 800a770:	f47f af3d 	bne.w	800a5ee <_scanf_float+0x66>
 800a774:	f04f 0a02 	mov.w	sl, #2
 800a778:	e7d2      	b.n	800a720 <_scanf_float+0x198>
 800a77a:	b975      	cbnz	r5, 800a79a <_scanf_float+0x212>
 800a77c:	2f00      	cmp	r7, #0
 800a77e:	f47f af37 	bne.w	800a5f0 <_scanf_float+0x68>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a788:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a78c:	f040 8103 	bne.w	800a996 <_scanf_float+0x40e>
 800a790:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	2501      	movs	r5, #1
 800a798:	e7c2      	b.n	800a720 <_scanf_float+0x198>
 800a79a:	2d03      	cmp	r5, #3
 800a79c:	d0e3      	beq.n	800a766 <_scanf_float+0x1de>
 800a79e:	2d05      	cmp	r5, #5
 800a7a0:	e7df      	b.n	800a762 <_scanf_float+0x1da>
 800a7a2:	2d02      	cmp	r5, #2
 800a7a4:	f47f af23 	bne.w	800a5ee <_scanf_float+0x66>
 800a7a8:	2503      	movs	r5, #3
 800a7aa:	e7b9      	b.n	800a720 <_scanf_float+0x198>
 800a7ac:	2d06      	cmp	r5, #6
 800a7ae:	f47f af1e 	bne.w	800a5ee <_scanf_float+0x66>
 800a7b2:	2507      	movs	r5, #7
 800a7b4:	e7b4      	b.n	800a720 <_scanf_float+0x198>
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	0591      	lsls	r1, r2, #22
 800a7ba:	f57f af18 	bpl.w	800a5ee <_scanf_float+0x66>
 800a7be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a7c2:	6022      	str	r2, [r4, #0]
 800a7c4:	9702      	str	r7, [sp, #8]
 800a7c6:	e7ab      	b.n	800a720 <_scanf_float+0x198>
 800a7c8:	6822      	ldr	r2, [r4, #0]
 800a7ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a7ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a7d2:	d005      	beq.n	800a7e0 <_scanf_float+0x258>
 800a7d4:	0550      	lsls	r0, r2, #21
 800a7d6:	f57f af0a 	bpl.w	800a5ee <_scanf_float+0x66>
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	f000 80db 	beq.w	800a996 <_scanf_float+0x40e>
 800a7e0:	0591      	lsls	r1, r2, #22
 800a7e2:	bf58      	it	pl
 800a7e4:	9902      	ldrpl	r1, [sp, #8]
 800a7e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7ea:	bf58      	it	pl
 800a7ec:	1a79      	subpl	r1, r7, r1
 800a7ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a7f2:	bf58      	it	pl
 800a7f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7f8:	6022      	str	r2, [r4, #0]
 800a7fa:	2700      	movs	r7, #0
 800a7fc:	e790      	b.n	800a720 <_scanf_float+0x198>
 800a7fe:	f04f 0a03 	mov.w	sl, #3
 800a802:	e78d      	b.n	800a720 <_scanf_float+0x198>
 800a804:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a808:	4649      	mov	r1, r9
 800a80a:	4640      	mov	r0, r8
 800a80c:	4798      	blx	r3
 800a80e:	2800      	cmp	r0, #0
 800a810:	f43f aedf 	beq.w	800a5d2 <_scanf_float+0x4a>
 800a814:	e6eb      	b.n	800a5ee <_scanf_float+0x66>
 800a816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a81e:	464a      	mov	r2, r9
 800a820:	4640      	mov	r0, r8
 800a822:	4798      	blx	r3
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	3b01      	subs	r3, #1
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	e6eb      	b.n	800a604 <_scanf_float+0x7c>
 800a82c:	1e6b      	subs	r3, r5, #1
 800a82e:	2b06      	cmp	r3, #6
 800a830:	d824      	bhi.n	800a87c <_scanf_float+0x2f4>
 800a832:	2d02      	cmp	r5, #2
 800a834:	d836      	bhi.n	800a8a4 <_scanf_float+0x31c>
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	429e      	cmp	r6, r3
 800a83a:	f67f aee7 	bls.w	800a60c <_scanf_float+0x84>
 800a83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a846:	464a      	mov	r2, r9
 800a848:	4640      	mov	r0, r8
 800a84a:	4798      	blx	r3
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	3b01      	subs	r3, #1
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	e7f0      	b.n	800a836 <_scanf_float+0x2ae>
 800a854:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a858:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a85c:	464a      	mov	r2, r9
 800a85e:	4640      	mov	r0, r8
 800a860:	4798      	blx	r3
 800a862:	6923      	ldr	r3, [r4, #16]
 800a864:	3b01      	subs	r3, #1
 800a866:	6123      	str	r3, [r4, #16]
 800a868:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a86c:	fa5f fa8a 	uxtb.w	sl, sl
 800a870:	f1ba 0f02 	cmp.w	sl, #2
 800a874:	d1ee      	bne.n	800a854 <_scanf_float+0x2cc>
 800a876:	3d03      	subs	r5, #3
 800a878:	b2ed      	uxtb	r5, r5
 800a87a:	1b76      	subs	r6, r6, r5
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	05da      	lsls	r2, r3, #23
 800a880:	d530      	bpl.n	800a8e4 <_scanf_float+0x35c>
 800a882:	055b      	lsls	r3, r3, #21
 800a884:	d511      	bpl.n	800a8aa <_scanf_float+0x322>
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	429e      	cmp	r6, r3
 800a88a:	f67f aebf 	bls.w	800a60c <_scanf_float+0x84>
 800a88e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a896:	464a      	mov	r2, r9
 800a898:	4640      	mov	r0, r8
 800a89a:	4798      	blx	r3
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	e7f0      	b.n	800a886 <_scanf_float+0x2fe>
 800a8a4:	46aa      	mov	sl, r5
 800a8a6:	46b3      	mov	fp, r6
 800a8a8:	e7de      	b.n	800a868 <_scanf_float+0x2e0>
 800a8aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	2965      	cmp	r1, #101	@ 0x65
 800a8b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8ba:	6123      	str	r3, [r4, #16]
 800a8bc:	d00c      	beq.n	800a8d8 <_scanf_float+0x350>
 800a8be:	2945      	cmp	r1, #69	@ 0x45
 800a8c0:	d00a      	beq.n	800a8d8 <_scanf_float+0x350>
 800a8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8c6:	464a      	mov	r2, r9
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4798      	blx	r3
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	1eb5      	subs	r5, r6, #2
 800a8d6:	6123      	str	r3, [r4, #16]
 800a8d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8dc:	464a      	mov	r2, r9
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4798      	blx	r3
 800a8e2:	462e      	mov	r6, r5
 800a8e4:	6822      	ldr	r2, [r4, #0]
 800a8e6:	f012 0210 	ands.w	r2, r2, #16
 800a8ea:	d001      	beq.n	800a8f0 <_scanf_float+0x368>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e68e      	b.n	800a60e <_scanf_float+0x86>
 800a8f0:	7032      	strb	r2, [r6, #0]
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a8f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8fc:	d125      	bne.n	800a94a <_scanf_float+0x3c2>
 800a8fe:	9b02      	ldr	r3, [sp, #8]
 800a900:	429f      	cmp	r7, r3
 800a902:	d00a      	beq.n	800a91a <_scanf_float+0x392>
 800a904:	1bda      	subs	r2, r3, r7
 800a906:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a90a:	429e      	cmp	r6, r3
 800a90c:	bf28      	it	cs
 800a90e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a912:	4922      	ldr	r1, [pc, #136]	@ (800a99c <_scanf_float+0x414>)
 800a914:	4630      	mov	r0, r6
 800a916:	f000 f919 	bl	800ab4c <siprintf>
 800a91a:	9901      	ldr	r1, [sp, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	4640      	mov	r0, r8
 800a920:	f002 fc06 	bl	800d130 <_strtod_r>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	6821      	ldr	r1, [r4, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f011 0f02 	tst.w	r1, #2
 800a92e:	ec57 6b10 	vmov	r6, r7, d0
 800a932:	f103 0204 	add.w	r2, r3, #4
 800a936:	d015      	beq.n	800a964 <_scanf_float+0x3dc>
 800a938:	9903      	ldr	r1, [sp, #12]
 800a93a:	600a      	str	r2, [r1, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	e9c3 6700 	strd	r6, r7, [r3]
 800a942:	68e3      	ldr	r3, [r4, #12]
 800a944:	3301      	adds	r3, #1
 800a946:	60e3      	str	r3, [r4, #12]
 800a948:	e7d0      	b.n	800a8ec <_scanf_float+0x364>
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0e4      	beq.n	800a91a <_scanf_float+0x392>
 800a950:	9905      	ldr	r1, [sp, #20]
 800a952:	230a      	movs	r3, #10
 800a954:	3101      	adds	r1, #1
 800a956:	4640      	mov	r0, r8
 800a958:	f002 fc6a 	bl	800d230 <_strtol_r>
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	9e05      	ldr	r6, [sp, #20]
 800a960:	1ac2      	subs	r2, r0, r3
 800a962:	e7d0      	b.n	800a906 <_scanf_float+0x37e>
 800a964:	f011 0f04 	tst.w	r1, #4
 800a968:	9903      	ldr	r1, [sp, #12]
 800a96a:	600a      	str	r2, [r1, #0]
 800a96c:	d1e6      	bne.n	800a93c <_scanf_float+0x3b4>
 800a96e:	681d      	ldr	r5, [r3, #0]
 800a970:	4632      	mov	r2, r6
 800a972:	463b      	mov	r3, r7
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f6 f8d8 	bl	8000b2c <__aeabi_dcmpun>
 800a97c:	b128      	cbz	r0, 800a98a <_scanf_float+0x402>
 800a97e:	4808      	ldr	r0, [pc, #32]	@ (800a9a0 <_scanf_float+0x418>)
 800a980:	f000 f9ca 	bl	800ad18 <nanf>
 800a984:	ed85 0a00 	vstr	s0, [r5]
 800a988:	e7db      	b.n	800a942 <_scanf_float+0x3ba>
 800a98a:	4630      	mov	r0, r6
 800a98c:	4639      	mov	r1, r7
 800a98e:	f7f6 f92b 	bl	8000be8 <__aeabi_d2f>
 800a992:	6028      	str	r0, [r5, #0]
 800a994:	e7d5      	b.n	800a942 <_scanf_float+0x3ba>
 800a996:	2700      	movs	r7, #0
 800a998:	e62e      	b.n	800a5f8 <_scanf_float+0x70>
 800a99a:	bf00      	nop
 800a99c:	0800f2b8 	.word	0x0800f2b8
 800a9a0:	0800f3f9 	.word	0x0800f3f9

0800a9a4 <std>:
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9b2:	6083      	str	r3, [r0, #8]
 800a9b4:	8181      	strh	r1, [r0, #12]
 800a9b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9b8:	81c2      	strh	r2, [r0, #14]
 800a9ba:	6183      	str	r3, [r0, #24]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	2208      	movs	r2, #8
 800a9c0:	305c      	adds	r0, #92	@ 0x5c
 800a9c2:	f000 f928 	bl	800ac16 <memset>
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <std+0x58>)
 800a9c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <std+0x5c>)
 800a9cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <std+0x60>)
 800a9d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <std+0x64>)
 800a9d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <std+0x68>)
 800a9d8:	6224      	str	r4, [r4, #32]
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d006      	beq.n	800a9ec <std+0x48>
 800a9de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9e2:	4294      	cmp	r4, r2
 800a9e4:	d002      	beq.n	800a9ec <std+0x48>
 800a9e6:	33d0      	adds	r3, #208	@ 0xd0
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	d105      	bne.n	800a9f8 <std+0x54>
 800a9ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f4:	f000 b98c 	b.w	800ad10 <__retarget_lock_init_recursive>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	bf00      	nop
 800a9fc:	0800ab91 	.word	0x0800ab91
 800aa00:	0800abb3 	.word	0x0800abb3
 800aa04:	0800abeb 	.word	0x0800abeb
 800aa08:	0800ac0f 	.word	0x0800ac0f
 800aa0c:	200009fc 	.word	0x200009fc

0800aa10 <stdio_exit_handler>:
 800aa10:	4a02      	ldr	r2, [pc, #8]	@ (800aa1c <stdio_exit_handler+0xc>)
 800aa12:	4903      	ldr	r1, [pc, #12]	@ (800aa20 <stdio_exit_handler+0x10>)
 800aa14:	4803      	ldr	r0, [pc, #12]	@ (800aa24 <stdio_exit_handler+0x14>)
 800aa16:	f000 b869 	b.w	800aaec <_fwalk_sglue>
 800aa1a:	bf00      	nop
 800aa1c:	20000014 	.word	0x20000014
 800aa20:	0800d871 	.word	0x0800d871
 800aa24:	20000024 	.word	0x20000024

0800aa28 <cleanup_stdio>:
 800aa28:	6841      	ldr	r1, [r0, #4]
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa5c <cleanup_stdio+0x34>)
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	d001      	beq.n	800aa38 <cleanup_stdio+0x10>
 800aa34:	f002 ff1c 	bl	800d870 <_fflush_r>
 800aa38:	68a1      	ldr	r1, [r4, #8]
 800aa3a:	4b09      	ldr	r3, [pc, #36]	@ (800aa60 <cleanup_stdio+0x38>)
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d002      	beq.n	800aa46 <cleanup_stdio+0x1e>
 800aa40:	4620      	mov	r0, r4
 800aa42:	f002 ff15 	bl	800d870 <_fflush_r>
 800aa46:	68e1      	ldr	r1, [r4, #12]
 800aa48:	4b06      	ldr	r3, [pc, #24]	@ (800aa64 <cleanup_stdio+0x3c>)
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d004      	beq.n	800aa58 <cleanup_stdio+0x30>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa54:	f002 bf0c 	b.w	800d870 <_fflush_r>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200009fc 	.word	0x200009fc
 800aa60:	20000a64 	.word	0x20000a64
 800aa64:	20000acc 	.word	0x20000acc

0800aa68 <global_stdio_init.part.0>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <global_stdio_init.part.0+0x30>)
 800aa6c:	4c0b      	ldr	r4, [pc, #44]	@ (800aa9c <global_stdio_init.part.0+0x34>)
 800aa6e:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa0 <global_stdio_init.part.0+0x38>)
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	4620      	mov	r0, r4
 800aa74:	2200      	movs	r2, #0
 800aa76:	2104      	movs	r1, #4
 800aa78:	f7ff ff94 	bl	800a9a4 <std>
 800aa7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa80:	2201      	movs	r2, #1
 800aa82:	2109      	movs	r1, #9
 800aa84:	f7ff ff8e 	bl	800a9a4 <std>
 800aa88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa92:	2112      	movs	r1, #18
 800aa94:	f7ff bf86 	b.w	800a9a4 <std>
 800aa98:	20000b34 	.word	0x20000b34
 800aa9c:	200009fc 	.word	0x200009fc
 800aaa0:	0800aa11 	.word	0x0800aa11

0800aaa4 <__sfp_lock_acquire>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__sfp_lock_acquire+0x8>)
 800aaa6:	f000 b934 	b.w	800ad12 <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20000b3d 	.word	0x20000b3d

0800aab0 <__sfp_lock_release>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__sfp_lock_release+0x8>)
 800aab2:	f000 b92f 	b.w	800ad14 <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	20000b3d 	.word	0x20000b3d

0800aabc <__sinit>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4604      	mov	r4, r0
 800aac0:	f7ff fff0 	bl	800aaa4 <__sfp_lock_acquire>
 800aac4:	6a23      	ldr	r3, [r4, #32]
 800aac6:	b11b      	cbz	r3, 800aad0 <__sinit+0x14>
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f7ff bff0 	b.w	800aab0 <__sfp_lock_release>
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <__sinit+0x28>)
 800aad2:	6223      	str	r3, [r4, #32]
 800aad4:	4b04      	ldr	r3, [pc, #16]	@ (800aae8 <__sinit+0x2c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f5      	bne.n	800aac8 <__sinit+0xc>
 800aadc:	f7ff ffc4 	bl	800aa68 <global_stdio_init.part.0>
 800aae0:	e7f2      	b.n	800aac8 <__sinit+0xc>
 800aae2:	bf00      	nop
 800aae4:	0800aa29 	.word	0x0800aa29
 800aae8:	20000b34 	.word	0x20000b34

0800aaec <_fwalk_sglue>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4688      	mov	r8, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aafc:	f1b9 0901 	subs.w	r9, r9, #1
 800ab00:	d505      	bpl.n	800ab0e <_fwalk_sglue+0x22>
 800ab02:	6824      	ldr	r4, [r4, #0]
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d1f7      	bne.n	800aaf8 <_fwalk_sglue+0xc>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d907      	bls.n	800ab24 <_fwalk_sglue+0x38>
 800ab14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	d003      	beq.n	800ab24 <_fwalk_sglue+0x38>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	4306      	orrs	r6, r0
 800ab24:	3568      	adds	r5, #104	@ 0x68
 800ab26:	e7e9      	b.n	800aafc <_fwalk_sglue+0x10>

0800ab28 <iprintf>:
 800ab28:	b40f      	push	{r0, r1, r2, r3}
 800ab2a:	b507      	push	{r0, r1, r2, lr}
 800ab2c:	4906      	ldr	r1, [pc, #24]	@ (800ab48 <iprintf+0x20>)
 800ab2e:	ab04      	add	r3, sp, #16
 800ab30:	6808      	ldr	r0, [r1, #0]
 800ab32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab36:	6881      	ldr	r1, [r0, #8]
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	f002 fcfd 	bl	800d538 <_vfiprintf_r>
 800ab3e:	b003      	add	sp, #12
 800ab40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab44:	b004      	add	sp, #16
 800ab46:	4770      	bx	lr
 800ab48:	20000020 	.word	0x20000020

0800ab4c <siprintf>:
 800ab4c:	b40e      	push	{r1, r2, r3}
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	b09d      	sub	sp, #116	@ 0x74
 800ab52:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ab54:	9002      	str	r0, [sp, #8]
 800ab56:	9006      	str	r0, [sp, #24]
 800ab58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab5c:	480a      	ldr	r0, [pc, #40]	@ (800ab88 <siprintf+0x3c>)
 800ab5e:	9107      	str	r1, [sp, #28]
 800ab60:	9104      	str	r1, [sp, #16]
 800ab62:	490a      	ldr	r1, [pc, #40]	@ (800ab8c <siprintf+0x40>)
 800ab64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab68:	9105      	str	r1, [sp, #20]
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	a902      	add	r1, sp, #8
 800ab6e:	6800      	ldr	r0, [r0, #0]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ab74:	f002 fbba 	bl	800d2ec <_svfiprintf_r>
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	701c      	strb	r4, [r3, #0]
 800ab7c:	b01d      	add	sp, #116	@ 0x74
 800ab7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab82:	b003      	add	sp, #12
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20000020 	.word	0x20000020
 800ab8c:	ffff0208 	.word	0xffff0208

0800ab90 <__sread>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	460c      	mov	r4, r1
 800ab94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab98:	f000 f86c 	bl	800ac74 <_read_r>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	bfab      	itete	ge
 800aba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aba2:	89a3      	ldrhlt	r3, [r4, #12]
 800aba4:	181b      	addge	r3, r3, r0
 800aba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abaa:	bfac      	ite	ge
 800abac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abae:	81a3      	strhlt	r3, [r4, #12]
 800abb0:	bd10      	pop	{r4, pc}

0800abb2 <__swrite>:
 800abb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb6:	461f      	mov	r7, r3
 800abb8:	898b      	ldrh	r3, [r1, #12]
 800abba:	05db      	lsls	r3, r3, #23
 800abbc:	4605      	mov	r5, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	4616      	mov	r6, r2
 800abc2:	d505      	bpl.n	800abd0 <__swrite+0x1e>
 800abc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc8:	2302      	movs	r3, #2
 800abca:	2200      	movs	r2, #0
 800abcc:	f000 f840 	bl	800ac50 <_lseek_r>
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	4632      	mov	r2, r6
 800abde:	463b      	mov	r3, r7
 800abe0:	4628      	mov	r0, r5
 800abe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe6:	f000 b857 	b.w	800ac98 <_write_r>

0800abea <__sseek>:
 800abea:	b510      	push	{r4, lr}
 800abec:	460c      	mov	r4, r1
 800abee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf2:	f000 f82d 	bl	800ac50 <_lseek_r>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	bf15      	itete	ne
 800abfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac06:	81a3      	strheq	r3, [r4, #12]
 800ac08:	bf18      	it	ne
 800ac0a:	81a3      	strhne	r3, [r4, #12]
 800ac0c:	bd10      	pop	{r4, pc}

0800ac0e <__sclose>:
 800ac0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac12:	f000 b80d 	b.w	800ac30 <_close_r>

0800ac16 <memset>:
 800ac16:	4402      	add	r2, r0
 800ac18:	4603      	mov	r3, r0
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d100      	bne.n	800ac20 <memset+0xa>
 800ac1e:	4770      	bx	lr
 800ac20:	f803 1b01 	strb.w	r1, [r3], #1
 800ac24:	e7f9      	b.n	800ac1a <memset+0x4>
	...

0800ac28 <_localeconv_r>:
 800ac28:	4800      	ldr	r0, [pc, #0]	@ (800ac2c <_localeconv_r+0x4>)
 800ac2a:	4770      	bx	lr
 800ac2c:	20000160 	.word	0x20000160

0800ac30 <_close_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	@ (800ac4c <_close_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f7 fcd2 	bl	80025e4 <_close>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_close_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_close_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	20000b38 	.word	0x20000b38

0800ac50 <_lseek_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4d07      	ldr	r5, [pc, #28]	@ (800ac70 <_lseek_r+0x20>)
 800ac54:	4604      	mov	r4, r0
 800ac56:	4608      	mov	r0, r1
 800ac58:	4611      	mov	r1, r2
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	602a      	str	r2, [r5, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f7f7 fce7 	bl	8002632 <_lseek>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_lseek_r+0x1e>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_lseek_r+0x1e>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20000b38 	.word	0x20000b38

0800ac74 <_read_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	@ (800ac94 <_read_r+0x20>)
 800ac78:	4604      	mov	r4, r0
 800ac7a:	4608      	mov	r0, r1
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	602a      	str	r2, [r5, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	f7f7 fc91 	bl	80025aa <_read>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_read_r+0x1e>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_read_r+0x1e>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	20000b38 	.word	0x20000b38

0800ac98 <_write_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d07      	ldr	r5, [pc, #28]	@ (800acb8 <_write_r+0x20>)
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	4608      	mov	r0, r1
 800aca0:	4611      	mov	r1, r2
 800aca2:	2200      	movs	r2, #0
 800aca4:	602a      	str	r2, [r5, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7f6 fcfe 	bl	80016a8 <_write>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_write_r+0x1e>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_write_r+0x1e>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	20000b38 	.word	0x20000b38

0800acbc <__errno>:
 800acbc:	4b01      	ldr	r3, [pc, #4]	@ (800acc4 <__errno+0x8>)
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	20000020 	.word	0x20000020

0800acc8 <__libc_init_array>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	4d0d      	ldr	r5, [pc, #52]	@ (800ad00 <__libc_init_array+0x38>)
 800accc:	4c0d      	ldr	r4, [pc, #52]	@ (800ad04 <__libc_init_array+0x3c>)
 800acce:	1b64      	subs	r4, r4, r5
 800acd0:	10a4      	asrs	r4, r4, #2
 800acd2:	2600      	movs	r6, #0
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	d109      	bne.n	800acec <__libc_init_array+0x24>
 800acd8:	4d0b      	ldr	r5, [pc, #44]	@ (800ad08 <__libc_init_array+0x40>)
 800acda:	4c0c      	ldr	r4, [pc, #48]	@ (800ad0c <__libc_init_array+0x44>)
 800acdc:	f003 fb7a 	bl	800e3d4 <_init>
 800ace0:	1b64      	subs	r4, r4, r5
 800ace2:	10a4      	asrs	r4, r4, #2
 800ace4:	2600      	movs	r6, #0
 800ace6:	42a6      	cmp	r6, r4
 800ace8:	d105      	bne.n	800acf6 <__libc_init_array+0x2e>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	f855 3b04 	ldr.w	r3, [r5], #4
 800acf0:	4798      	blx	r3
 800acf2:	3601      	adds	r6, #1
 800acf4:	e7ee      	b.n	800acd4 <__libc_init_array+0xc>
 800acf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfa:	4798      	blx	r3
 800acfc:	3601      	adds	r6, #1
 800acfe:	e7f2      	b.n	800ace6 <__libc_init_array+0x1e>
 800ad00:	0800f6b4 	.word	0x0800f6b4
 800ad04:	0800f6b4 	.word	0x0800f6b4
 800ad08:	0800f6b4 	.word	0x0800f6b4
 800ad0c:	0800f6b8 	.word	0x0800f6b8

0800ad10 <__retarget_lock_init_recursive>:
 800ad10:	4770      	bx	lr

0800ad12 <__retarget_lock_acquire_recursive>:
 800ad12:	4770      	bx	lr

0800ad14 <__retarget_lock_release_recursive>:
 800ad14:	4770      	bx	lr
	...

0800ad18 <nanf>:
 800ad18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ad20 <nanf+0x8>
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	7fc00000 	.word	0x7fc00000

0800ad24 <quorem>:
 800ad24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	6903      	ldr	r3, [r0, #16]
 800ad2a:	690c      	ldr	r4, [r1, #16]
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	4607      	mov	r7, r0
 800ad30:	db7e      	blt.n	800ae30 <quorem+0x10c>
 800ad32:	3c01      	subs	r4, #1
 800ad34:	f101 0814 	add.w	r8, r1, #20
 800ad38:	00a3      	lsls	r3, r4, #2
 800ad3a:	f100 0514 	add.w	r5, r0, #20
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	429a      	cmp	r2, r3
 800ad52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad56:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad5a:	d32e      	bcc.n	800adba <quorem+0x96>
 800ad5c:	f04f 0a00 	mov.w	sl, #0
 800ad60:	46c4      	mov	ip, r8
 800ad62:	46ae      	mov	lr, r5
 800ad64:	46d3      	mov	fp, sl
 800ad66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad6a:	b298      	uxth	r0, r3
 800ad6c:	fb06 a000 	mla	r0, r6, r0, sl
 800ad70:	0c02      	lsrs	r2, r0, #16
 800ad72:	0c1b      	lsrs	r3, r3, #16
 800ad74:	fb06 2303 	mla	r3, r6, r3, r2
 800ad78:	f8de 2000 	ldr.w	r2, [lr]
 800ad7c:	b280      	uxth	r0, r0
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	1a12      	subs	r2, r2, r0
 800ad82:	445a      	add	r2, fp
 800ad84:	f8de 0000 	ldr.w	r0, [lr]
 800ad88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad96:	b292      	uxth	r2, r2
 800ad98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad9c:	45e1      	cmp	r9, ip
 800ad9e:	f84e 2b04 	str.w	r2, [lr], #4
 800ada2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ada6:	d2de      	bcs.n	800ad66 <quorem+0x42>
 800ada8:	9b00      	ldr	r3, [sp, #0]
 800adaa:	58eb      	ldr	r3, [r5, r3]
 800adac:	b92b      	cbnz	r3, 800adba <quorem+0x96>
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	3b04      	subs	r3, #4
 800adb2:	429d      	cmp	r5, r3
 800adb4:	461a      	mov	r2, r3
 800adb6:	d32f      	bcc.n	800ae18 <quorem+0xf4>
 800adb8:	613c      	str	r4, [r7, #16]
 800adba:	4638      	mov	r0, r7
 800adbc:	f001 f9c8 	bl	800c150 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	db25      	blt.n	800ae10 <quorem+0xec>
 800adc4:	4629      	mov	r1, r5
 800adc6:	2000      	movs	r0, #0
 800adc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800adcc:	f8d1 c000 	ldr.w	ip, [r1]
 800add0:	fa1f fe82 	uxth.w	lr, r2
 800add4:	fa1f f38c 	uxth.w	r3, ip
 800add8:	eba3 030e 	sub.w	r3, r3, lr
 800addc:	4403      	add	r3, r0
 800adde:	0c12      	lsrs	r2, r2, #16
 800ade0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ade4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ade8:	b29b      	uxth	r3, r3
 800adea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adee:	45c1      	cmp	r9, r8
 800adf0:	f841 3b04 	str.w	r3, [r1], #4
 800adf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800adf8:	d2e6      	bcs.n	800adc8 <quorem+0xa4>
 800adfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae02:	b922      	cbnz	r2, 800ae0e <quorem+0xea>
 800ae04:	3b04      	subs	r3, #4
 800ae06:	429d      	cmp	r5, r3
 800ae08:	461a      	mov	r2, r3
 800ae0a:	d30b      	bcc.n	800ae24 <quorem+0x100>
 800ae0c:	613c      	str	r4, [r7, #16]
 800ae0e:	3601      	adds	r6, #1
 800ae10:	4630      	mov	r0, r6
 800ae12:	b003      	add	sp, #12
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	6812      	ldr	r2, [r2, #0]
 800ae1a:	3b04      	subs	r3, #4
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	d1cb      	bne.n	800adb8 <quorem+0x94>
 800ae20:	3c01      	subs	r4, #1
 800ae22:	e7c6      	b.n	800adb2 <quorem+0x8e>
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	3b04      	subs	r3, #4
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	d1ef      	bne.n	800ae0c <quorem+0xe8>
 800ae2c:	3c01      	subs	r4, #1
 800ae2e:	e7ea      	b.n	800ae06 <quorem+0xe2>
 800ae30:	2000      	movs	r0, #0
 800ae32:	e7ee      	b.n	800ae12 <quorem+0xee>
 800ae34:	0000      	movs	r0, r0
	...

0800ae38 <_dtoa_r>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	69c7      	ldr	r7, [r0, #28]
 800ae3e:	b097      	sub	sp, #92	@ 0x5c
 800ae40:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ae44:	ec55 4b10 	vmov	r4, r5, d0
 800ae48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ae4a:	9107      	str	r1, [sp, #28]
 800ae4c:	4681      	mov	r9, r0
 800ae4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae52:	b97f      	cbnz	r7, 800ae74 <_dtoa_r+0x3c>
 800ae54:	2010      	movs	r0, #16
 800ae56:	f000 fe09 	bl	800ba6c <malloc>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ae60:	b920      	cbnz	r0, 800ae6c <_dtoa_r+0x34>
 800ae62:	4ba9      	ldr	r3, [pc, #676]	@ (800b108 <_dtoa_r+0x2d0>)
 800ae64:	21ef      	movs	r1, #239	@ 0xef
 800ae66:	48a9      	ldr	r0, [pc, #676]	@ (800b10c <_dtoa_r+0x2d4>)
 800ae68:	f002 fe12 	bl	800da90 <__assert_func>
 800ae6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae70:	6007      	str	r7, [r0, #0]
 800ae72:	60c7      	str	r7, [r0, #12]
 800ae74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae78:	6819      	ldr	r1, [r3, #0]
 800ae7a:	b159      	cbz	r1, 800ae94 <_dtoa_r+0x5c>
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	604a      	str	r2, [r1, #4]
 800ae80:	2301      	movs	r3, #1
 800ae82:	4093      	lsls	r3, r2
 800ae84:	608b      	str	r3, [r1, #8]
 800ae86:	4648      	mov	r0, r9
 800ae88:	f000 fee6 	bl	800bc58 <_Bfree>
 800ae8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	1e2b      	subs	r3, r5, #0
 800ae96:	bfb9      	ittee	lt
 800ae98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae9c:	9305      	strlt	r3, [sp, #20]
 800ae9e:	2300      	movge	r3, #0
 800aea0:	6033      	strge	r3, [r6, #0]
 800aea2:	9f05      	ldr	r7, [sp, #20]
 800aea4:	4b9a      	ldr	r3, [pc, #616]	@ (800b110 <_dtoa_r+0x2d8>)
 800aea6:	bfbc      	itt	lt
 800aea8:	2201      	movlt	r2, #1
 800aeaa:	6032      	strlt	r2, [r6, #0]
 800aeac:	43bb      	bics	r3, r7
 800aeae:	d112      	bne.n	800aed6 <_dtoa_r+0x9e>
 800aeb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aeb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aebc:	4323      	orrs	r3, r4
 800aebe:	f000 855a 	beq.w	800b976 <_dtoa_r+0xb3e>
 800aec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aec4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b124 <_dtoa_r+0x2ec>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 855c 	beq.w	800b986 <_dtoa_r+0xb4e>
 800aece:	f10a 0303 	add.w	r3, sl, #3
 800aed2:	f000 bd56 	b.w	800b982 <_dtoa_r+0xb4a>
 800aed6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aeda:	2200      	movs	r2, #0
 800aedc:	ec51 0b17 	vmov	r0, r1, d7
 800aee0:	2300      	movs	r3, #0
 800aee2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aee6:	f7f5 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeea:	4680      	mov	r8, r0
 800aeec:	b158      	cbz	r0, 800af06 <_dtoa_r+0xce>
 800aeee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aef0:	2301      	movs	r3, #1
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aef6:	b113      	cbz	r3, 800aefe <_dtoa_r+0xc6>
 800aef8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aefa:	4b86      	ldr	r3, [pc, #536]	@ (800b114 <_dtoa_r+0x2dc>)
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b128 <_dtoa_r+0x2f0>
 800af02:	f000 bd40 	b.w	800b986 <_dtoa_r+0xb4e>
 800af06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800af0a:	aa14      	add	r2, sp, #80	@ 0x50
 800af0c:	a915      	add	r1, sp, #84	@ 0x54
 800af0e:	4648      	mov	r0, r9
 800af10:	f001 fa3e 	bl	800c390 <__d2b>
 800af14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af18:	9002      	str	r0, [sp, #8]
 800af1a:	2e00      	cmp	r6, #0
 800af1c:	d078      	beq.n	800b010 <_dtoa_r+0x1d8>
 800af1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800af24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af38:	4619      	mov	r1, r3
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b76      	ldr	r3, [pc, #472]	@ (800b118 <_dtoa_r+0x2e0>)
 800af3e:	f7f5 f9a3 	bl	8000288 <__aeabi_dsub>
 800af42:	a36b      	add	r3, pc, #428	@ (adr r3, 800b0f0 <_dtoa_r+0x2b8>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 fb56 	bl	80005f8 <__aeabi_dmul>
 800af4c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b0f8 <_dtoa_r+0x2c0>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 f99b 	bl	800028c <__adddf3>
 800af56:	4604      	mov	r4, r0
 800af58:	4630      	mov	r0, r6
 800af5a:	460d      	mov	r5, r1
 800af5c:	f7f5 fae2 	bl	8000524 <__aeabi_i2d>
 800af60:	a367      	add	r3, pc, #412	@ (adr r3, 800b100 <_dtoa_r+0x2c8>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 fb47 	bl	80005f8 <__aeabi_dmul>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 f98b 	bl	800028c <__adddf3>
 800af76:	4604      	mov	r4, r0
 800af78:	460d      	mov	r5, r1
 800af7a:	f7f5 fded 	bl	8000b58 <__aeabi_d2iz>
 800af7e:	2200      	movs	r2, #0
 800af80:	4607      	mov	r7, r0
 800af82:	2300      	movs	r3, #0
 800af84:	4620      	mov	r0, r4
 800af86:	4629      	mov	r1, r5
 800af88:	f7f5 fda8 	bl	8000adc <__aeabi_dcmplt>
 800af8c:	b140      	cbz	r0, 800afa0 <_dtoa_r+0x168>
 800af8e:	4638      	mov	r0, r7
 800af90:	f7f5 fac8 	bl	8000524 <__aeabi_i2d>
 800af94:	4622      	mov	r2, r4
 800af96:	462b      	mov	r3, r5
 800af98:	f7f5 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800af9c:	b900      	cbnz	r0, 800afa0 <_dtoa_r+0x168>
 800af9e:	3f01      	subs	r7, #1
 800afa0:	2f16      	cmp	r7, #22
 800afa2:	d852      	bhi.n	800b04a <_dtoa_r+0x212>
 800afa4:	4b5d      	ldr	r3, [pc, #372]	@ (800b11c <_dtoa_r+0x2e4>)
 800afa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afb2:	f7f5 fd93 	bl	8000adc <__aeabi_dcmplt>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d049      	beq.n	800b04e <_dtoa_r+0x216>
 800afba:	3f01      	subs	r7, #1
 800afbc:	2300      	movs	r3, #0
 800afbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800afc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afc2:	1b9b      	subs	r3, r3, r6
 800afc4:	1e5a      	subs	r2, r3, #1
 800afc6:	bf45      	ittet	mi
 800afc8:	f1c3 0301 	rsbmi	r3, r3, #1
 800afcc:	9300      	strmi	r3, [sp, #0]
 800afce:	2300      	movpl	r3, #0
 800afd0:	2300      	movmi	r3, #0
 800afd2:	9206      	str	r2, [sp, #24]
 800afd4:	bf54      	ite	pl
 800afd6:	9300      	strpl	r3, [sp, #0]
 800afd8:	9306      	strmi	r3, [sp, #24]
 800afda:	2f00      	cmp	r7, #0
 800afdc:	db39      	blt.n	800b052 <_dtoa_r+0x21a>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	970d      	str	r7, [sp, #52]	@ 0x34
 800afe2:	443b      	add	r3, r7
 800afe4:	9306      	str	r3, [sp, #24]
 800afe6:	2300      	movs	r3, #0
 800afe8:	9308      	str	r3, [sp, #32]
 800afea:	9b07      	ldr	r3, [sp, #28]
 800afec:	2b09      	cmp	r3, #9
 800afee:	d863      	bhi.n	800b0b8 <_dtoa_r+0x280>
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	bfc4      	itt	gt
 800aff4:	3b04      	subgt	r3, #4
 800aff6:	9307      	strgt	r3, [sp, #28]
 800aff8:	9b07      	ldr	r3, [sp, #28]
 800affa:	f1a3 0302 	sub.w	r3, r3, #2
 800affe:	bfcc      	ite	gt
 800b000:	2400      	movgt	r4, #0
 800b002:	2401      	movle	r4, #1
 800b004:	2b03      	cmp	r3, #3
 800b006:	d863      	bhi.n	800b0d0 <_dtoa_r+0x298>
 800b008:	e8df f003 	tbb	[pc, r3]
 800b00c:	2b375452 	.word	0x2b375452
 800b010:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b014:	441e      	add	r6, r3
 800b016:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	bfc1      	itttt	gt
 800b01e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b022:	409f      	lslgt	r7, r3
 800b024:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b028:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b02c:	bfd6      	itet	le
 800b02e:	f1c3 0320 	rsble	r3, r3, #32
 800b032:	ea47 0003 	orrgt.w	r0, r7, r3
 800b036:	fa04 f003 	lslle.w	r0, r4, r3
 800b03a:	f7f5 fa63 	bl	8000504 <__aeabi_ui2d>
 800b03e:	2201      	movs	r2, #1
 800b040:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b044:	3e01      	subs	r6, #1
 800b046:	9212      	str	r2, [sp, #72]	@ 0x48
 800b048:	e776      	b.n	800af38 <_dtoa_r+0x100>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e7b7      	b.n	800afbe <_dtoa_r+0x186>
 800b04e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b050:	e7b6      	b.n	800afc0 <_dtoa_r+0x188>
 800b052:	9b00      	ldr	r3, [sp, #0]
 800b054:	1bdb      	subs	r3, r3, r7
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	427b      	negs	r3, r7
 800b05a:	9308      	str	r3, [sp, #32]
 800b05c:	2300      	movs	r3, #0
 800b05e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b060:	e7c3      	b.n	800afea <_dtoa_r+0x1b2>
 800b062:	2301      	movs	r3, #1
 800b064:	9309      	str	r3, [sp, #36]	@ 0x24
 800b066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b068:	eb07 0b03 	add.w	fp, r7, r3
 800b06c:	f10b 0301 	add.w	r3, fp, #1
 800b070:	2b01      	cmp	r3, #1
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	bfb8      	it	lt
 800b076:	2301      	movlt	r3, #1
 800b078:	e006      	b.n	800b088 <_dtoa_r+0x250>
 800b07a:	2301      	movs	r3, #1
 800b07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b080:	2b00      	cmp	r3, #0
 800b082:	dd28      	ble.n	800b0d6 <_dtoa_r+0x29e>
 800b084:	469b      	mov	fp, r3
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b08c:	2100      	movs	r1, #0
 800b08e:	2204      	movs	r2, #4
 800b090:	f102 0514 	add.w	r5, r2, #20
 800b094:	429d      	cmp	r5, r3
 800b096:	d926      	bls.n	800b0e6 <_dtoa_r+0x2ae>
 800b098:	6041      	str	r1, [r0, #4]
 800b09a:	4648      	mov	r0, r9
 800b09c:	f000 fd9c 	bl	800bbd8 <_Balloc>
 800b0a0:	4682      	mov	sl, r0
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d142      	bne.n	800b12c <_dtoa_r+0x2f4>
 800b0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b120 <_dtoa_r+0x2e8>)
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0ae:	e6da      	b.n	800ae66 <_dtoa_r+0x2e>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e7e3      	b.n	800b07c <_dtoa_r+0x244>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e7d5      	b.n	800b064 <_dtoa_r+0x22c>
 800b0b8:	2401      	movs	r4, #1
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9307      	str	r3, [sp, #28]
 800b0be:	9409      	str	r4, [sp, #36]	@ 0x24
 800b0c0:	f04f 3bff 	mov.w	fp, #4294967295
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b0ca:	2312      	movs	r3, #18
 800b0cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0ce:	e7db      	b.n	800b088 <_dtoa_r+0x250>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d4:	e7f4      	b.n	800b0c0 <_dtoa_r+0x288>
 800b0d6:	f04f 0b01 	mov.w	fp, #1
 800b0da:	f8cd b00c 	str.w	fp, [sp, #12]
 800b0de:	465b      	mov	r3, fp
 800b0e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b0e4:	e7d0      	b.n	800b088 <_dtoa_r+0x250>
 800b0e6:	3101      	adds	r1, #1
 800b0e8:	0052      	lsls	r2, r2, #1
 800b0ea:	e7d1      	b.n	800b090 <_dtoa_r+0x258>
 800b0ec:	f3af 8000 	nop.w
 800b0f0:	636f4361 	.word	0x636f4361
 800b0f4:	3fd287a7 	.word	0x3fd287a7
 800b0f8:	8b60c8b3 	.word	0x8b60c8b3
 800b0fc:	3fc68a28 	.word	0x3fc68a28
 800b100:	509f79fb 	.word	0x509f79fb
 800b104:	3fd34413 	.word	0x3fd34413
 800b108:	0800f2ca 	.word	0x0800f2ca
 800b10c:	0800f2e1 	.word	0x0800f2e1
 800b110:	7ff00000 	.word	0x7ff00000
 800b114:	0800f295 	.word	0x0800f295
 800b118:	3ff80000 	.word	0x3ff80000
 800b11c:	0800f490 	.word	0x0800f490
 800b120:	0800f339 	.word	0x0800f339
 800b124:	0800f2c6 	.word	0x0800f2c6
 800b128:	0800f294 	.word	0x0800f294
 800b12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b130:	6018      	str	r0, [r3, #0]
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	2b0e      	cmp	r3, #14
 800b136:	f200 80a1 	bhi.w	800b27c <_dtoa_r+0x444>
 800b13a:	2c00      	cmp	r4, #0
 800b13c:	f000 809e 	beq.w	800b27c <_dtoa_r+0x444>
 800b140:	2f00      	cmp	r7, #0
 800b142:	dd33      	ble.n	800b1ac <_dtoa_r+0x374>
 800b144:	4b9c      	ldr	r3, [pc, #624]	@ (800b3b8 <_dtoa_r+0x580>)
 800b146:	f007 020f 	and.w	r2, r7, #15
 800b14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b14e:	ed93 7b00 	vldr	d7, [r3]
 800b152:	05f8      	lsls	r0, r7, #23
 800b154:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b15c:	d516      	bpl.n	800b18c <_dtoa_r+0x354>
 800b15e:	4b97      	ldr	r3, [pc, #604]	@ (800b3bc <_dtoa_r+0x584>)
 800b160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b168:	f7f5 fb70 	bl	800084c <__aeabi_ddiv>
 800b16c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b170:	f004 040f 	and.w	r4, r4, #15
 800b174:	2603      	movs	r6, #3
 800b176:	4d91      	ldr	r5, [pc, #580]	@ (800b3bc <_dtoa_r+0x584>)
 800b178:	b954      	cbnz	r4, 800b190 <_dtoa_r+0x358>
 800b17a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b182:	f7f5 fb63 	bl	800084c <__aeabi_ddiv>
 800b186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b18a:	e028      	b.n	800b1de <_dtoa_r+0x3a6>
 800b18c:	2602      	movs	r6, #2
 800b18e:	e7f2      	b.n	800b176 <_dtoa_r+0x33e>
 800b190:	07e1      	lsls	r1, r4, #31
 800b192:	d508      	bpl.n	800b1a6 <_dtoa_r+0x36e>
 800b194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	1064      	asrs	r4, r4, #1
 800b1a8:	3508      	adds	r5, #8
 800b1aa:	e7e5      	b.n	800b178 <_dtoa_r+0x340>
 800b1ac:	f000 80af 	beq.w	800b30e <_dtoa_r+0x4d6>
 800b1b0:	427c      	negs	r4, r7
 800b1b2:	4b81      	ldr	r3, [pc, #516]	@ (800b3b8 <_dtoa_r+0x580>)
 800b1b4:	4d81      	ldr	r5, [pc, #516]	@ (800b3bc <_dtoa_r+0x584>)
 800b1b6:	f004 020f 	and.w	r2, r4, #15
 800b1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1c6:	f7f5 fa17 	bl	80005f8 <__aeabi_dmul>
 800b1ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ce:	1124      	asrs	r4, r4, #4
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2602      	movs	r6, #2
 800b1d4:	2c00      	cmp	r4, #0
 800b1d6:	f040 808f 	bne.w	800b2f8 <_dtoa_r+0x4c0>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1d3      	bne.n	800b186 <_dtoa_r+0x34e>
 800b1de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 8094 	beq.w	800b312 <_dtoa_r+0x4da>
 800b1ea:	4b75      	ldr	r3, [pc, #468]	@ (800b3c0 <_dtoa_r+0x588>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 fc73 	bl	8000adc <__aeabi_dcmplt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f000 808b 	beq.w	800b312 <_dtoa_r+0x4da>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 8087 	beq.w	800b312 <_dtoa_r+0x4da>
 800b204:	f1bb 0f00 	cmp.w	fp, #0
 800b208:	dd34      	ble.n	800b274 <_dtoa_r+0x43c>
 800b20a:	4620      	mov	r0, r4
 800b20c:	4b6d      	ldr	r3, [pc, #436]	@ (800b3c4 <_dtoa_r+0x58c>)
 800b20e:	2200      	movs	r2, #0
 800b210:	4629      	mov	r1, r5
 800b212:	f7f5 f9f1 	bl	80005f8 <__aeabi_dmul>
 800b216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b21a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b21e:	3601      	adds	r6, #1
 800b220:	465c      	mov	r4, fp
 800b222:	4630      	mov	r0, r6
 800b224:	f7f5 f97e 	bl	8000524 <__aeabi_i2d>
 800b228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b22c:	f7f5 f9e4 	bl	80005f8 <__aeabi_dmul>
 800b230:	4b65      	ldr	r3, [pc, #404]	@ (800b3c8 <_dtoa_r+0x590>)
 800b232:	2200      	movs	r2, #0
 800b234:	f7f5 f82a 	bl	800028c <__adddf3>
 800b238:	4605      	mov	r5, r0
 800b23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b23e:	2c00      	cmp	r4, #0
 800b240:	d16a      	bne.n	800b318 <_dtoa_r+0x4e0>
 800b242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b246:	4b61      	ldr	r3, [pc, #388]	@ (800b3cc <_dtoa_r+0x594>)
 800b248:	2200      	movs	r2, #0
 800b24a:	f7f5 f81d 	bl	8000288 <__aeabi_dsub>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b256:	462a      	mov	r2, r5
 800b258:	4633      	mov	r3, r6
 800b25a:	f7f5 fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	f040 8298 	bne.w	800b794 <_dtoa_r+0x95c>
 800b264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b268:	462a      	mov	r2, r5
 800b26a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b26e:	f7f5 fc35 	bl	8000adc <__aeabi_dcmplt>
 800b272:	bb38      	cbnz	r0, 800b2c4 <_dtoa_r+0x48c>
 800b274:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b27c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f2c0 8157 	blt.w	800b532 <_dtoa_r+0x6fa>
 800b284:	2f0e      	cmp	r7, #14
 800b286:	f300 8154 	bgt.w	800b532 <_dtoa_r+0x6fa>
 800b28a:	4b4b      	ldr	r3, [pc, #300]	@ (800b3b8 <_dtoa_r+0x580>)
 800b28c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b290:	ed93 7b00 	vldr	d7, [r3]
 800b294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b296:	2b00      	cmp	r3, #0
 800b298:	ed8d 7b00 	vstr	d7, [sp]
 800b29c:	f280 80e5 	bge.w	800b46a <_dtoa_r+0x632>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f300 80e1 	bgt.w	800b46a <_dtoa_r+0x632>
 800b2a8:	d10c      	bne.n	800b2c4 <_dtoa_r+0x48c>
 800b2aa:	4b48      	ldr	r3, [pc, #288]	@ (800b3cc <_dtoa_r+0x594>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	ec51 0b17 	vmov	r0, r1, d7
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ba:	f7f5 fc23 	bl	8000b04 <__aeabi_dcmpge>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f000 8266 	beq.w	800b790 <_dtoa_r+0x958>
 800b2c4:	2400      	movs	r4, #0
 800b2c6:	4625      	mov	r5, r4
 800b2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2ca:	4656      	mov	r6, sl
 800b2cc:	ea6f 0803 	mvn.w	r8, r3
 800b2d0:	2700      	movs	r7, #0
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4648      	mov	r0, r9
 800b2d6:	f000 fcbf 	bl	800bc58 <_Bfree>
 800b2da:	2d00      	cmp	r5, #0
 800b2dc:	f000 80bd 	beq.w	800b45a <_dtoa_r+0x622>
 800b2e0:	b12f      	cbz	r7, 800b2ee <_dtoa_r+0x4b6>
 800b2e2:	42af      	cmp	r7, r5
 800b2e4:	d003      	beq.n	800b2ee <_dtoa_r+0x4b6>
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	4648      	mov	r0, r9
 800b2ea:	f000 fcb5 	bl	800bc58 <_Bfree>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f000 fcb1 	bl	800bc58 <_Bfree>
 800b2f6:	e0b0      	b.n	800b45a <_dtoa_r+0x622>
 800b2f8:	07e2      	lsls	r2, r4, #31
 800b2fa:	d505      	bpl.n	800b308 <_dtoa_r+0x4d0>
 800b2fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b300:	f7f5 f97a 	bl	80005f8 <__aeabi_dmul>
 800b304:	3601      	adds	r6, #1
 800b306:	2301      	movs	r3, #1
 800b308:	1064      	asrs	r4, r4, #1
 800b30a:	3508      	adds	r5, #8
 800b30c:	e762      	b.n	800b1d4 <_dtoa_r+0x39c>
 800b30e:	2602      	movs	r6, #2
 800b310:	e765      	b.n	800b1de <_dtoa_r+0x3a6>
 800b312:	9c03      	ldr	r4, [sp, #12]
 800b314:	46b8      	mov	r8, r7
 800b316:	e784      	b.n	800b222 <_dtoa_r+0x3ea>
 800b318:	4b27      	ldr	r3, [pc, #156]	@ (800b3b8 <_dtoa_r+0x580>)
 800b31a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b31c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b324:	4454      	add	r4, sl
 800b326:	2900      	cmp	r1, #0
 800b328:	d054      	beq.n	800b3d4 <_dtoa_r+0x59c>
 800b32a:	4929      	ldr	r1, [pc, #164]	@ (800b3d0 <_dtoa_r+0x598>)
 800b32c:	2000      	movs	r0, #0
 800b32e:	f7f5 fa8d 	bl	800084c <__aeabi_ddiv>
 800b332:	4633      	mov	r3, r6
 800b334:	462a      	mov	r2, r5
 800b336:	f7f4 ffa7 	bl	8000288 <__aeabi_dsub>
 800b33a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b33e:	4656      	mov	r6, sl
 800b340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b344:	f7f5 fc08 	bl	8000b58 <__aeabi_d2iz>
 800b348:	4605      	mov	r5, r0
 800b34a:	f7f5 f8eb 	bl	8000524 <__aeabi_i2d>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b356:	f7f4 ff97 	bl	8000288 <__aeabi_dsub>
 800b35a:	3530      	adds	r5, #48	@ 0x30
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b364:	f806 5b01 	strb.w	r5, [r6], #1
 800b368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b36c:	f7f5 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800b370:	2800      	cmp	r0, #0
 800b372:	d172      	bne.n	800b45a <_dtoa_r+0x622>
 800b374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b378:	4911      	ldr	r1, [pc, #68]	@ (800b3c0 <_dtoa_r+0x588>)
 800b37a:	2000      	movs	r0, #0
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b384:	f7f5 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800b388:	2800      	cmp	r0, #0
 800b38a:	f040 80b4 	bne.w	800b4f6 <_dtoa_r+0x6be>
 800b38e:	42a6      	cmp	r6, r4
 800b390:	f43f af70 	beq.w	800b274 <_dtoa_r+0x43c>
 800b394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b398:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c4 <_dtoa_r+0x58c>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f5 f92c 	bl	80005f8 <__aeabi_dmul>
 800b3a0:	4b08      	ldr	r3, [pc, #32]	@ (800b3c4 <_dtoa_r+0x58c>)
 800b3a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ac:	f7f5 f924 	bl	80005f8 <__aeabi_dmul>
 800b3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3b4:	e7c4      	b.n	800b340 <_dtoa_r+0x508>
 800b3b6:	bf00      	nop
 800b3b8:	0800f490 	.word	0x0800f490
 800b3bc:	0800f468 	.word	0x0800f468
 800b3c0:	3ff00000 	.word	0x3ff00000
 800b3c4:	40240000 	.word	0x40240000
 800b3c8:	401c0000 	.word	0x401c0000
 800b3cc:	40140000 	.word	0x40140000
 800b3d0:	3fe00000 	.word	0x3fe00000
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7f5 f90e 	bl	80005f8 <__aeabi_dmul>
 800b3dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b3e2:	4656      	mov	r6, sl
 800b3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3e8:	f7f5 fbb6 	bl	8000b58 <__aeabi_d2iz>
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	f7f5 f899 	bl	8000524 <__aeabi_i2d>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3fa:	f7f4 ff45 	bl	8000288 <__aeabi_dsub>
 800b3fe:	3530      	adds	r5, #48	@ 0x30
 800b400:	f806 5b01 	strb.w	r5, [r6], #1
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	42a6      	cmp	r6, r4
 800b40a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	d124      	bne.n	800b45e <_dtoa_r+0x626>
 800b414:	4baf      	ldr	r3, [pc, #700]	@ (800b6d4 <_dtoa_r+0x89c>)
 800b416:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b41a:	f7f4 ff37 	bl	800028c <__adddf3>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b426:	f7f5 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d163      	bne.n	800b4f6 <_dtoa_r+0x6be>
 800b42e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b432:	49a8      	ldr	r1, [pc, #672]	@ (800b6d4 <_dtoa_r+0x89c>)
 800b434:	2000      	movs	r0, #0
 800b436:	f7f4 ff27 	bl	8000288 <__aeabi_dsub>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b442:	f7f5 fb4b 	bl	8000adc <__aeabi_dcmplt>
 800b446:	2800      	cmp	r0, #0
 800b448:	f43f af14 	beq.w	800b274 <_dtoa_r+0x43c>
 800b44c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b44e:	1e73      	subs	r3, r6, #1
 800b450:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b456:	2b30      	cmp	r3, #48	@ 0x30
 800b458:	d0f8      	beq.n	800b44c <_dtoa_r+0x614>
 800b45a:	4647      	mov	r7, r8
 800b45c:	e03b      	b.n	800b4d6 <_dtoa_r+0x69e>
 800b45e:	4b9e      	ldr	r3, [pc, #632]	@ (800b6d8 <_dtoa_r+0x8a0>)
 800b460:	f7f5 f8ca 	bl	80005f8 <__aeabi_dmul>
 800b464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b468:	e7bc      	b.n	800b3e4 <_dtoa_r+0x5ac>
 800b46a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b46e:	4656      	mov	r6, sl
 800b470:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b474:	4620      	mov	r0, r4
 800b476:	4629      	mov	r1, r5
 800b478:	f7f5 f9e8 	bl	800084c <__aeabi_ddiv>
 800b47c:	f7f5 fb6c 	bl	8000b58 <__aeabi_d2iz>
 800b480:	4680      	mov	r8, r0
 800b482:	f7f5 f84f 	bl	8000524 <__aeabi_i2d>
 800b486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b48a:	f7f5 f8b5 	bl	80005f8 <__aeabi_dmul>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b49a:	f7f4 fef5 	bl	8000288 <__aeabi_dsub>
 800b49e:	f806 4b01 	strb.w	r4, [r6], #1
 800b4a2:	9d03      	ldr	r5, [sp, #12]
 800b4a4:	eba6 040a 	sub.w	r4, r6, sl
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	d133      	bne.n	800b518 <_dtoa_r+0x6e0>
 800b4b0:	f7f4 feec 	bl	800028c <__adddf3>
 800b4b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	f7f5 fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 800b4c0:	b9c0      	cbnz	r0, 800b4f4 <_dtoa_r+0x6bc>
 800b4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ce:	b110      	cbz	r0, 800b4d6 <_dtoa_r+0x69e>
 800b4d0:	f018 0f01 	tst.w	r8, #1
 800b4d4:	d10e      	bne.n	800b4f4 <_dtoa_r+0x6bc>
 800b4d6:	9902      	ldr	r1, [sp, #8]
 800b4d8:	4648      	mov	r0, r9
 800b4da:	f000 fbbd 	bl	800bc58 <_Bfree>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	7033      	strb	r3, [r6, #0]
 800b4e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4e4:	3701      	adds	r7, #1
 800b4e6:	601f      	str	r7, [r3, #0]
 800b4e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 824b 	beq.w	800b986 <_dtoa_r+0xb4e>
 800b4f0:	601e      	str	r6, [r3, #0]
 800b4f2:	e248      	b.n	800b986 <_dtoa_r+0xb4e>
 800b4f4:	46b8      	mov	r8, r7
 800b4f6:	4633      	mov	r3, r6
 800b4f8:	461e      	mov	r6, r3
 800b4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4fe:	2a39      	cmp	r2, #57	@ 0x39
 800b500:	d106      	bne.n	800b510 <_dtoa_r+0x6d8>
 800b502:	459a      	cmp	sl, r3
 800b504:	d1f8      	bne.n	800b4f8 <_dtoa_r+0x6c0>
 800b506:	2230      	movs	r2, #48	@ 0x30
 800b508:	f108 0801 	add.w	r8, r8, #1
 800b50c:	f88a 2000 	strb.w	r2, [sl]
 800b510:	781a      	ldrb	r2, [r3, #0]
 800b512:	3201      	adds	r2, #1
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	e7a0      	b.n	800b45a <_dtoa_r+0x622>
 800b518:	4b6f      	ldr	r3, [pc, #444]	@ (800b6d8 <_dtoa_r+0x8a0>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	f7f5 f86c 	bl	80005f8 <__aeabi_dmul>
 800b520:	2200      	movs	r2, #0
 800b522:	2300      	movs	r3, #0
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	f7f5 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d09f      	beq.n	800b470 <_dtoa_r+0x638>
 800b530:	e7d1      	b.n	800b4d6 <_dtoa_r+0x69e>
 800b532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b534:	2a00      	cmp	r2, #0
 800b536:	f000 80ea 	beq.w	800b70e <_dtoa_r+0x8d6>
 800b53a:	9a07      	ldr	r2, [sp, #28]
 800b53c:	2a01      	cmp	r2, #1
 800b53e:	f300 80cd 	bgt.w	800b6dc <_dtoa_r+0x8a4>
 800b542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b544:	2a00      	cmp	r2, #0
 800b546:	f000 80c1 	beq.w	800b6cc <_dtoa_r+0x894>
 800b54a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b54e:	9c08      	ldr	r4, [sp, #32]
 800b550:	9e00      	ldr	r6, [sp, #0]
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	441a      	add	r2, r3
 800b556:	9200      	str	r2, [sp, #0]
 800b558:	9a06      	ldr	r2, [sp, #24]
 800b55a:	2101      	movs	r1, #1
 800b55c:	441a      	add	r2, r3
 800b55e:	4648      	mov	r0, r9
 800b560:	9206      	str	r2, [sp, #24]
 800b562:	f000 fc77 	bl	800be54 <__i2b>
 800b566:	4605      	mov	r5, r0
 800b568:	b166      	cbz	r6, 800b584 <_dtoa_r+0x74c>
 800b56a:	9b06      	ldr	r3, [sp, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dd09      	ble.n	800b584 <_dtoa_r+0x74c>
 800b570:	42b3      	cmp	r3, r6
 800b572:	9a00      	ldr	r2, [sp, #0]
 800b574:	bfa8      	it	ge
 800b576:	4633      	movge	r3, r6
 800b578:	1ad2      	subs	r2, r2, r3
 800b57a:	9200      	str	r2, [sp, #0]
 800b57c:	9a06      	ldr	r2, [sp, #24]
 800b57e:	1af6      	subs	r6, r6, r3
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	9306      	str	r3, [sp, #24]
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	b30b      	cbz	r3, 800b5cc <_dtoa_r+0x794>
 800b588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 80c6 	beq.w	800b71c <_dtoa_r+0x8e4>
 800b590:	2c00      	cmp	r4, #0
 800b592:	f000 80c0 	beq.w	800b716 <_dtoa_r+0x8de>
 800b596:	4629      	mov	r1, r5
 800b598:	4622      	mov	r2, r4
 800b59a:	4648      	mov	r0, r9
 800b59c:	f000 fd12 	bl	800bfc4 <__pow5mult>
 800b5a0:	9a02      	ldr	r2, [sp, #8]
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	f000 fc6a 	bl	800be80 <__multiply>
 800b5ac:	9902      	ldr	r1, [sp, #8]
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4648      	mov	r0, r9
 800b5b2:	f000 fb51 	bl	800bc58 <_Bfree>
 800b5b6:	9b08      	ldr	r3, [sp, #32]
 800b5b8:	1b1b      	subs	r3, r3, r4
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	f000 80b1 	beq.w	800b722 <_dtoa_r+0x8ea>
 800b5c0:	9a08      	ldr	r2, [sp, #32]
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	4648      	mov	r0, r9
 800b5c6:	f000 fcfd 	bl	800bfc4 <__pow5mult>
 800b5ca:	9002      	str	r0, [sp, #8]
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f000 fc40 	bl	800be54 <__i2b>
 800b5d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 81d8 	beq.w	800b98e <_dtoa_r+0xb56>
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4601      	mov	r1, r0
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f000 fcee 	bl	800bfc4 <__pow5mult>
 800b5e8:	9b07      	ldr	r3, [sp, #28]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	f300 809f 	bgt.w	800b730 <_dtoa_r+0x8f8>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 8097 	bne.w	800b728 <_dtoa_r+0x8f0>
 800b5fa:	9b05      	ldr	r3, [sp, #20]
 800b5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 8093 	bne.w	800b72c <_dtoa_r+0x8f4>
 800b606:	9b05      	ldr	r3, [sp, #20]
 800b608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b60c:	0d1b      	lsrs	r3, r3, #20
 800b60e:	051b      	lsls	r3, r3, #20
 800b610:	b133      	cbz	r3, 800b620 <_dtoa_r+0x7e8>
 800b612:	9b00      	ldr	r3, [sp, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	9b06      	ldr	r3, [sp, #24]
 800b61a:	3301      	adds	r3, #1
 800b61c:	9306      	str	r3, [sp, #24]
 800b61e:	2301      	movs	r3, #1
 800b620:	9308      	str	r3, [sp, #32]
 800b622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 81b8 	beq.w	800b99a <_dtoa_r+0xb62>
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b630:	6918      	ldr	r0, [r3, #16]
 800b632:	f000 fbc3 	bl	800bdbc <__hi0bits>
 800b636:	f1c0 0020 	rsb	r0, r0, #32
 800b63a:	9b06      	ldr	r3, [sp, #24]
 800b63c:	4418      	add	r0, r3
 800b63e:	f010 001f 	ands.w	r0, r0, #31
 800b642:	f000 8082 	beq.w	800b74a <_dtoa_r+0x912>
 800b646:	f1c0 0320 	rsb	r3, r0, #32
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	dd73      	ble.n	800b736 <_dtoa_r+0x8fe>
 800b64e:	9b00      	ldr	r3, [sp, #0]
 800b650:	f1c0 001c 	rsb	r0, r0, #28
 800b654:	4403      	add	r3, r0
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	9b06      	ldr	r3, [sp, #24]
 800b65a:	4403      	add	r3, r0
 800b65c:	4406      	add	r6, r0
 800b65e:	9306      	str	r3, [sp, #24]
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dd05      	ble.n	800b672 <_dtoa_r+0x83a>
 800b666:	9902      	ldr	r1, [sp, #8]
 800b668:	461a      	mov	r2, r3
 800b66a:	4648      	mov	r0, r9
 800b66c:	f000 fd04 	bl	800c078 <__lshift>
 800b670:	9002      	str	r0, [sp, #8]
 800b672:	9b06      	ldr	r3, [sp, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	dd05      	ble.n	800b684 <_dtoa_r+0x84c>
 800b678:	4621      	mov	r1, r4
 800b67a:	461a      	mov	r2, r3
 800b67c:	4648      	mov	r0, r9
 800b67e:	f000 fcfb 	bl	800c078 <__lshift>
 800b682:	4604      	mov	r4, r0
 800b684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b686:	2b00      	cmp	r3, #0
 800b688:	d061      	beq.n	800b74e <_dtoa_r+0x916>
 800b68a:	9802      	ldr	r0, [sp, #8]
 800b68c:	4621      	mov	r1, r4
 800b68e:	f000 fd5f 	bl	800c150 <__mcmp>
 800b692:	2800      	cmp	r0, #0
 800b694:	da5b      	bge.n	800b74e <_dtoa_r+0x916>
 800b696:	2300      	movs	r3, #0
 800b698:	9902      	ldr	r1, [sp, #8]
 800b69a:	220a      	movs	r2, #10
 800b69c:	4648      	mov	r0, r9
 800b69e:	f000 fafd 	bl	800bc9c <__multadd>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a4:	9002      	str	r0, [sp, #8]
 800b6a6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 8177 	beq.w	800b99e <_dtoa_r+0xb66>
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	220a      	movs	r2, #10
 800b6b6:	4648      	mov	r0, r9
 800b6b8:	f000 faf0 	bl	800bc9c <__multadd>
 800b6bc:	f1bb 0f00 	cmp.w	fp, #0
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	dc6f      	bgt.n	800b7a4 <_dtoa_r+0x96c>
 800b6c4:	9b07      	ldr	r3, [sp, #28]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	dc49      	bgt.n	800b75e <_dtoa_r+0x926>
 800b6ca:	e06b      	b.n	800b7a4 <_dtoa_r+0x96c>
 800b6cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6d2:	e73c      	b.n	800b54e <_dtoa_r+0x716>
 800b6d4:	3fe00000 	.word	0x3fe00000
 800b6d8:	40240000 	.word	0x40240000
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	1e5c      	subs	r4, r3, #1
 800b6e0:	9b08      	ldr	r3, [sp, #32]
 800b6e2:	42a3      	cmp	r3, r4
 800b6e4:	db09      	blt.n	800b6fa <_dtoa_r+0x8c2>
 800b6e6:	1b1c      	subs	r4, r3, r4
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f6bf af30 	bge.w	800b550 <_dtoa_r+0x718>
 800b6f0:	9b00      	ldr	r3, [sp, #0]
 800b6f2:	9a03      	ldr	r2, [sp, #12]
 800b6f4:	1a9e      	subs	r6, r3, r2
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e72b      	b.n	800b552 <_dtoa_r+0x71a>
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6fe:	9408      	str	r4, [sp, #32]
 800b700:	1ae3      	subs	r3, r4, r3
 800b702:	441a      	add	r2, r3
 800b704:	9e00      	ldr	r6, [sp, #0]
 800b706:	9b03      	ldr	r3, [sp, #12]
 800b708:	920d      	str	r2, [sp, #52]	@ 0x34
 800b70a:	2400      	movs	r4, #0
 800b70c:	e721      	b.n	800b552 <_dtoa_r+0x71a>
 800b70e:	9c08      	ldr	r4, [sp, #32]
 800b710:	9e00      	ldr	r6, [sp, #0]
 800b712:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b714:	e728      	b.n	800b568 <_dtoa_r+0x730>
 800b716:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b71a:	e751      	b.n	800b5c0 <_dtoa_r+0x788>
 800b71c:	9a08      	ldr	r2, [sp, #32]
 800b71e:	9902      	ldr	r1, [sp, #8]
 800b720:	e750      	b.n	800b5c4 <_dtoa_r+0x78c>
 800b722:	f8cd 8008 	str.w	r8, [sp, #8]
 800b726:	e751      	b.n	800b5cc <_dtoa_r+0x794>
 800b728:	2300      	movs	r3, #0
 800b72a:	e779      	b.n	800b620 <_dtoa_r+0x7e8>
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	e777      	b.n	800b620 <_dtoa_r+0x7e8>
 800b730:	2300      	movs	r3, #0
 800b732:	9308      	str	r3, [sp, #32]
 800b734:	e779      	b.n	800b62a <_dtoa_r+0x7f2>
 800b736:	d093      	beq.n	800b660 <_dtoa_r+0x828>
 800b738:	9a00      	ldr	r2, [sp, #0]
 800b73a:	331c      	adds	r3, #28
 800b73c:	441a      	add	r2, r3
 800b73e:	9200      	str	r2, [sp, #0]
 800b740:	9a06      	ldr	r2, [sp, #24]
 800b742:	441a      	add	r2, r3
 800b744:	441e      	add	r6, r3
 800b746:	9206      	str	r2, [sp, #24]
 800b748:	e78a      	b.n	800b660 <_dtoa_r+0x828>
 800b74a:	4603      	mov	r3, r0
 800b74c:	e7f4      	b.n	800b738 <_dtoa_r+0x900>
 800b74e:	9b03      	ldr	r3, [sp, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	46b8      	mov	r8, r7
 800b754:	dc20      	bgt.n	800b798 <_dtoa_r+0x960>
 800b756:	469b      	mov	fp, r3
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	dd1e      	ble.n	800b79c <_dtoa_r+0x964>
 800b75e:	f1bb 0f00 	cmp.w	fp, #0
 800b762:	f47f adb1 	bne.w	800b2c8 <_dtoa_r+0x490>
 800b766:	4621      	mov	r1, r4
 800b768:	465b      	mov	r3, fp
 800b76a:	2205      	movs	r2, #5
 800b76c:	4648      	mov	r0, r9
 800b76e:	f000 fa95 	bl	800bc9c <__multadd>
 800b772:	4601      	mov	r1, r0
 800b774:	4604      	mov	r4, r0
 800b776:	9802      	ldr	r0, [sp, #8]
 800b778:	f000 fcea 	bl	800c150 <__mcmp>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f77f ada3 	ble.w	800b2c8 <_dtoa_r+0x490>
 800b782:	4656      	mov	r6, sl
 800b784:	2331      	movs	r3, #49	@ 0x31
 800b786:	f806 3b01 	strb.w	r3, [r6], #1
 800b78a:	f108 0801 	add.w	r8, r8, #1
 800b78e:	e59f      	b.n	800b2d0 <_dtoa_r+0x498>
 800b790:	9c03      	ldr	r4, [sp, #12]
 800b792:	46b8      	mov	r8, r7
 800b794:	4625      	mov	r5, r4
 800b796:	e7f4      	b.n	800b782 <_dtoa_r+0x94a>
 800b798:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 8101 	beq.w	800b9a6 <_dtoa_r+0xb6e>
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	dd05      	ble.n	800b7b4 <_dtoa_r+0x97c>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4648      	mov	r0, r9
 800b7ae:	f000 fc63 	bl	800c078 <__lshift>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	9b08      	ldr	r3, [sp, #32]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d05c      	beq.n	800b874 <_dtoa_r+0xa3c>
 800b7ba:	6869      	ldr	r1, [r5, #4]
 800b7bc:	4648      	mov	r0, r9
 800b7be:	f000 fa0b 	bl	800bbd8 <_Balloc>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	b928      	cbnz	r0, 800b7d2 <_dtoa_r+0x99a>
 800b7c6:	4b82      	ldr	r3, [pc, #520]	@ (800b9d0 <_dtoa_r+0xb98>)
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7ce:	f7ff bb4a 	b.w	800ae66 <_dtoa_r+0x2e>
 800b7d2:	692a      	ldr	r2, [r5, #16]
 800b7d4:	3202      	adds	r2, #2
 800b7d6:	0092      	lsls	r2, r2, #2
 800b7d8:	f105 010c 	add.w	r1, r5, #12
 800b7dc:	300c      	adds	r0, #12
 800b7de:	f002 f93f 	bl	800da60 <memcpy>
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4648      	mov	r0, r9
 800b7e8:	f000 fc46 	bl	800c078 <__lshift>
 800b7ec:	f10a 0301 	add.w	r3, sl, #1
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	eb0a 030b 	add.w	r3, sl, fp
 800b7f6:	9308      	str	r3, [sp, #32]
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	462f      	mov	r7, r5
 800b800:	9306      	str	r3, [sp, #24]
 800b802:	4605      	mov	r5, r0
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	9802      	ldr	r0, [sp, #8]
 800b808:	4621      	mov	r1, r4
 800b80a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b80e:	f7ff fa89 	bl	800ad24 <quorem>
 800b812:	4603      	mov	r3, r0
 800b814:	3330      	adds	r3, #48	@ 0x30
 800b816:	9003      	str	r0, [sp, #12]
 800b818:	4639      	mov	r1, r7
 800b81a:	9802      	ldr	r0, [sp, #8]
 800b81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81e:	f000 fc97 	bl	800c150 <__mcmp>
 800b822:	462a      	mov	r2, r5
 800b824:	9004      	str	r0, [sp, #16]
 800b826:	4621      	mov	r1, r4
 800b828:	4648      	mov	r0, r9
 800b82a:	f000 fcad 	bl	800c188 <__mdiff>
 800b82e:	68c2      	ldr	r2, [r0, #12]
 800b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b832:	4606      	mov	r6, r0
 800b834:	bb02      	cbnz	r2, 800b878 <_dtoa_r+0xa40>
 800b836:	4601      	mov	r1, r0
 800b838:	9802      	ldr	r0, [sp, #8]
 800b83a:	f000 fc89 	bl	800c150 <__mcmp>
 800b83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b840:	4602      	mov	r2, r0
 800b842:	4631      	mov	r1, r6
 800b844:	4648      	mov	r0, r9
 800b846:	920c      	str	r2, [sp, #48]	@ 0x30
 800b848:	9309      	str	r3, [sp, #36]	@ 0x24
 800b84a:	f000 fa05 	bl	800bc58 <_Bfree>
 800b84e:	9b07      	ldr	r3, [sp, #28]
 800b850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b852:	9e00      	ldr	r6, [sp, #0]
 800b854:	ea42 0103 	orr.w	r1, r2, r3
 800b858:	9b06      	ldr	r3, [sp, #24]
 800b85a:	4319      	orrs	r1, r3
 800b85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85e:	d10d      	bne.n	800b87c <_dtoa_r+0xa44>
 800b860:	2b39      	cmp	r3, #57	@ 0x39
 800b862:	d027      	beq.n	800b8b4 <_dtoa_r+0xa7c>
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	2a00      	cmp	r2, #0
 800b868:	dd01      	ble.n	800b86e <_dtoa_r+0xa36>
 800b86a:	9b03      	ldr	r3, [sp, #12]
 800b86c:	3331      	adds	r3, #49	@ 0x31
 800b86e:	f88b 3000 	strb.w	r3, [fp]
 800b872:	e52e      	b.n	800b2d2 <_dtoa_r+0x49a>
 800b874:	4628      	mov	r0, r5
 800b876:	e7b9      	b.n	800b7ec <_dtoa_r+0x9b4>
 800b878:	2201      	movs	r2, #1
 800b87a:	e7e2      	b.n	800b842 <_dtoa_r+0xa0a>
 800b87c:	9904      	ldr	r1, [sp, #16]
 800b87e:	2900      	cmp	r1, #0
 800b880:	db04      	blt.n	800b88c <_dtoa_r+0xa54>
 800b882:	9807      	ldr	r0, [sp, #28]
 800b884:	4301      	orrs	r1, r0
 800b886:	9806      	ldr	r0, [sp, #24]
 800b888:	4301      	orrs	r1, r0
 800b88a:	d120      	bne.n	800b8ce <_dtoa_r+0xa96>
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	ddee      	ble.n	800b86e <_dtoa_r+0xa36>
 800b890:	9902      	ldr	r1, [sp, #8]
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	2201      	movs	r2, #1
 800b896:	4648      	mov	r0, r9
 800b898:	f000 fbee 	bl	800c078 <__lshift>
 800b89c:	4621      	mov	r1, r4
 800b89e:	9002      	str	r0, [sp, #8]
 800b8a0:	f000 fc56 	bl	800c150 <__mcmp>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	9b00      	ldr	r3, [sp, #0]
 800b8a8:	dc02      	bgt.n	800b8b0 <_dtoa_r+0xa78>
 800b8aa:	d1e0      	bne.n	800b86e <_dtoa_r+0xa36>
 800b8ac:	07da      	lsls	r2, r3, #31
 800b8ae:	d5de      	bpl.n	800b86e <_dtoa_r+0xa36>
 800b8b0:	2b39      	cmp	r3, #57	@ 0x39
 800b8b2:	d1da      	bne.n	800b86a <_dtoa_r+0xa32>
 800b8b4:	2339      	movs	r3, #57	@ 0x39
 800b8b6:	f88b 3000 	strb.w	r3, [fp]
 800b8ba:	4633      	mov	r3, r6
 800b8bc:	461e      	mov	r6, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8c4:	2a39      	cmp	r2, #57	@ 0x39
 800b8c6:	d04e      	beq.n	800b966 <_dtoa_r+0xb2e>
 800b8c8:	3201      	adds	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]
 800b8cc:	e501      	b.n	800b2d2 <_dtoa_r+0x49a>
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	dd03      	ble.n	800b8da <_dtoa_r+0xaa2>
 800b8d2:	2b39      	cmp	r3, #57	@ 0x39
 800b8d4:	d0ee      	beq.n	800b8b4 <_dtoa_r+0xa7c>
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	e7c9      	b.n	800b86e <_dtoa_r+0xa36>
 800b8da:	9a00      	ldr	r2, [sp, #0]
 800b8dc:	9908      	ldr	r1, [sp, #32]
 800b8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8e2:	428a      	cmp	r2, r1
 800b8e4:	d028      	beq.n	800b938 <_dtoa_r+0xb00>
 800b8e6:	9902      	ldr	r1, [sp, #8]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f000 f9d5 	bl	800bc9c <__multadd>
 800b8f2:	42af      	cmp	r7, r5
 800b8f4:	9002      	str	r0, [sp, #8]
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f04f 020a 	mov.w	r2, #10
 800b8fe:	4639      	mov	r1, r7
 800b900:	4648      	mov	r0, r9
 800b902:	d107      	bne.n	800b914 <_dtoa_r+0xadc>
 800b904:	f000 f9ca 	bl	800bc9c <__multadd>
 800b908:	4607      	mov	r7, r0
 800b90a:	4605      	mov	r5, r0
 800b90c:	9b00      	ldr	r3, [sp, #0]
 800b90e:	3301      	adds	r3, #1
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	e777      	b.n	800b804 <_dtoa_r+0x9cc>
 800b914:	f000 f9c2 	bl	800bc9c <__multadd>
 800b918:	4629      	mov	r1, r5
 800b91a:	4607      	mov	r7, r0
 800b91c:	2300      	movs	r3, #0
 800b91e:	220a      	movs	r2, #10
 800b920:	4648      	mov	r0, r9
 800b922:	f000 f9bb 	bl	800bc9c <__multadd>
 800b926:	4605      	mov	r5, r0
 800b928:	e7f0      	b.n	800b90c <_dtoa_r+0xad4>
 800b92a:	f1bb 0f00 	cmp.w	fp, #0
 800b92e:	bfcc      	ite	gt
 800b930:	465e      	movgt	r6, fp
 800b932:	2601      	movle	r6, #1
 800b934:	4456      	add	r6, sl
 800b936:	2700      	movs	r7, #0
 800b938:	9902      	ldr	r1, [sp, #8]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2201      	movs	r2, #1
 800b93e:	4648      	mov	r0, r9
 800b940:	f000 fb9a 	bl	800c078 <__lshift>
 800b944:	4621      	mov	r1, r4
 800b946:	9002      	str	r0, [sp, #8]
 800b948:	f000 fc02 	bl	800c150 <__mcmp>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	dcb4      	bgt.n	800b8ba <_dtoa_r+0xa82>
 800b950:	d102      	bne.n	800b958 <_dtoa_r+0xb20>
 800b952:	9b00      	ldr	r3, [sp, #0]
 800b954:	07db      	lsls	r3, r3, #31
 800b956:	d4b0      	bmi.n	800b8ba <_dtoa_r+0xa82>
 800b958:	4633      	mov	r3, r6
 800b95a:	461e      	mov	r6, r3
 800b95c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b960:	2a30      	cmp	r2, #48	@ 0x30
 800b962:	d0fa      	beq.n	800b95a <_dtoa_r+0xb22>
 800b964:	e4b5      	b.n	800b2d2 <_dtoa_r+0x49a>
 800b966:	459a      	cmp	sl, r3
 800b968:	d1a8      	bne.n	800b8bc <_dtoa_r+0xa84>
 800b96a:	2331      	movs	r3, #49	@ 0x31
 800b96c:	f108 0801 	add.w	r8, r8, #1
 800b970:	f88a 3000 	strb.w	r3, [sl]
 800b974:	e4ad      	b.n	800b2d2 <_dtoa_r+0x49a>
 800b976:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b978:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b9d4 <_dtoa_r+0xb9c>
 800b97c:	b11b      	cbz	r3, 800b986 <_dtoa_r+0xb4e>
 800b97e:	f10a 0308 	add.w	r3, sl, #8
 800b982:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	4650      	mov	r0, sl
 800b988:	b017      	add	sp, #92	@ 0x5c
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	9b07      	ldr	r3, [sp, #28]
 800b990:	2b01      	cmp	r3, #1
 800b992:	f77f ae2e 	ble.w	800b5f2 <_dtoa_r+0x7ba>
 800b996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b998:	9308      	str	r3, [sp, #32]
 800b99a:	2001      	movs	r0, #1
 800b99c:	e64d      	b.n	800b63a <_dtoa_r+0x802>
 800b99e:	f1bb 0f00 	cmp.w	fp, #0
 800b9a2:	f77f aed9 	ble.w	800b758 <_dtoa_r+0x920>
 800b9a6:	4656      	mov	r6, sl
 800b9a8:	9802      	ldr	r0, [sp, #8]
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f7ff f9ba 	bl	800ad24 <quorem>
 800b9b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b9b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b9b8:	eba6 020a 	sub.w	r2, r6, sl
 800b9bc:	4593      	cmp	fp, r2
 800b9be:	ddb4      	ble.n	800b92a <_dtoa_r+0xaf2>
 800b9c0:	9902      	ldr	r1, [sp, #8]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	220a      	movs	r2, #10
 800b9c6:	4648      	mov	r0, r9
 800b9c8:	f000 f968 	bl	800bc9c <__multadd>
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	e7eb      	b.n	800b9a8 <_dtoa_r+0xb70>
 800b9d0:	0800f339 	.word	0x0800f339
 800b9d4:	0800f2bd 	.word	0x0800f2bd

0800b9d8 <_free_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4605      	mov	r5, r0
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d041      	beq.n	800ba64 <_free_r+0x8c>
 800b9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e4:	1f0c      	subs	r4, r1, #4
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfb8      	it	lt
 800b9ea:	18e4      	addlt	r4, r4, r3
 800b9ec:	f000 f8e8 	bl	800bbc0 <__malloc_lock>
 800b9f0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba68 <_free_r+0x90>)
 800b9f2:	6813      	ldr	r3, [r2, #0]
 800b9f4:	b933      	cbnz	r3, 800ba04 <_free_r+0x2c>
 800b9f6:	6063      	str	r3, [r4, #4]
 800b9f8:	6014      	str	r4, [r2, #0]
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba00:	f000 b8e4 	b.w	800bbcc <__malloc_unlock>
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d908      	bls.n	800ba1a <_free_r+0x42>
 800ba08:	6820      	ldr	r0, [r4, #0]
 800ba0a:	1821      	adds	r1, r4, r0
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	bf01      	itttt	eq
 800ba10:	6819      	ldreq	r1, [r3, #0]
 800ba12:	685b      	ldreq	r3, [r3, #4]
 800ba14:	1809      	addeq	r1, r1, r0
 800ba16:	6021      	streq	r1, [r4, #0]
 800ba18:	e7ed      	b.n	800b9f6 <_free_r+0x1e>
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	b10b      	cbz	r3, 800ba24 <_free_r+0x4c>
 800ba20:	42a3      	cmp	r3, r4
 800ba22:	d9fa      	bls.n	800ba1a <_free_r+0x42>
 800ba24:	6811      	ldr	r1, [r2, #0]
 800ba26:	1850      	adds	r0, r2, r1
 800ba28:	42a0      	cmp	r0, r4
 800ba2a:	d10b      	bne.n	800ba44 <_free_r+0x6c>
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	4401      	add	r1, r0
 800ba30:	1850      	adds	r0, r2, r1
 800ba32:	4283      	cmp	r3, r0
 800ba34:	6011      	str	r1, [r2, #0]
 800ba36:	d1e0      	bne.n	800b9fa <_free_r+0x22>
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	6053      	str	r3, [r2, #4]
 800ba3e:	4408      	add	r0, r1
 800ba40:	6010      	str	r0, [r2, #0]
 800ba42:	e7da      	b.n	800b9fa <_free_r+0x22>
 800ba44:	d902      	bls.n	800ba4c <_free_r+0x74>
 800ba46:	230c      	movs	r3, #12
 800ba48:	602b      	str	r3, [r5, #0]
 800ba4a:	e7d6      	b.n	800b9fa <_free_r+0x22>
 800ba4c:	6820      	ldr	r0, [r4, #0]
 800ba4e:	1821      	adds	r1, r4, r0
 800ba50:	428b      	cmp	r3, r1
 800ba52:	bf04      	itt	eq
 800ba54:	6819      	ldreq	r1, [r3, #0]
 800ba56:	685b      	ldreq	r3, [r3, #4]
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	bf04      	itt	eq
 800ba5c:	1809      	addeq	r1, r1, r0
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	6054      	str	r4, [r2, #4]
 800ba62:	e7ca      	b.n	800b9fa <_free_r+0x22>
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	bf00      	nop
 800ba68:	20000b44 	.word	0x20000b44

0800ba6c <malloc>:
 800ba6c:	4b02      	ldr	r3, [pc, #8]	@ (800ba78 <malloc+0xc>)
 800ba6e:	4601      	mov	r1, r0
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	f000 b825 	b.w	800bac0 <_malloc_r>
 800ba76:	bf00      	nop
 800ba78:	20000020 	.word	0x20000020

0800ba7c <sbrk_aligned>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	4e0f      	ldr	r6, [pc, #60]	@ (800babc <sbrk_aligned+0x40>)
 800ba80:	460c      	mov	r4, r1
 800ba82:	6831      	ldr	r1, [r6, #0]
 800ba84:	4605      	mov	r5, r0
 800ba86:	b911      	cbnz	r1, 800ba8e <sbrk_aligned+0x12>
 800ba88:	f001 ffda 	bl	800da40 <_sbrk_r>
 800ba8c:	6030      	str	r0, [r6, #0]
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4628      	mov	r0, r5
 800ba92:	f001 ffd5 	bl	800da40 <_sbrk_r>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d103      	bne.n	800baa2 <sbrk_aligned+0x26>
 800ba9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ba9e:	4620      	mov	r0, r4
 800baa0:	bd70      	pop	{r4, r5, r6, pc}
 800baa2:	1cc4      	adds	r4, r0, #3
 800baa4:	f024 0403 	bic.w	r4, r4, #3
 800baa8:	42a0      	cmp	r0, r4
 800baaa:	d0f8      	beq.n	800ba9e <sbrk_aligned+0x22>
 800baac:	1a21      	subs	r1, r4, r0
 800baae:	4628      	mov	r0, r5
 800bab0:	f001 ffc6 	bl	800da40 <_sbrk_r>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d1f2      	bne.n	800ba9e <sbrk_aligned+0x22>
 800bab8:	e7ef      	b.n	800ba9a <sbrk_aligned+0x1e>
 800baba:	bf00      	nop
 800babc:	20000b40 	.word	0x20000b40

0800bac0 <_malloc_r>:
 800bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac4:	1ccd      	adds	r5, r1, #3
 800bac6:	f025 0503 	bic.w	r5, r5, #3
 800baca:	3508      	adds	r5, #8
 800bacc:	2d0c      	cmp	r5, #12
 800bace:	bf38      	it	cc
 800bad0:	250c      	movcc	r5, #12
 800bad2:	2d00      	cmp	r5, #0
 800bad4:	4606      	mov	r6, r0
 800bad6:	db01      	blt.n	800badc <_malloc_r+0x1c>
 800bad8:	42a9      	cmp	r1, r5
 800bada:	d904      	bls.n	800bae6 <_malloc_r+0x26>
 800badc:	230c      	movs	r3, #12
 800bade:	6033      	str	r3, [r6, #0]
 800bae0:	2000      	movs	r0, #0
 800bae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbbc <_malloc_r+0xfc>
 800baea:	f000 f869 	bl	800bbc0 <__malloc_lock>
 800baee:	f8d8 3000 	ldr.w	r3, [r8]
 800baf2:	461c      	mov	r4, r3
 800baf4:	bb44      	cbnz	r4, 800bb48 <_malloc_r+0x88>
 800baf6:	4629      	mov	r1, r5
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7ff ffbf 	bl	800ba7c <sbrk_aligned>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	4604      	mov	r4, r0
 800bb02:	d158      	bne.n	800bbb6 <_malloc_r+0xf6>
 800bb04:	f8d8 4000 	ldr.w	r4, [r8]
 800bb08:	4627      	mov	r7, r4
 800bb0a:	2f00      	cmp	r7, #0
 800bb0c:	d143      	bne.n	800bb96 <_malloc_r+0xd6>
 800bb0e:	2c00      	cmp	r4, #0
 800bb10:	d04b      	beq.n	800bbaa <_malloc_r+0xea>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	4639      	mov	r1, r7
 800bb16:	4630      	mov	r0, r6
 800bb18:	eb04 0903 	add.w	r9, r4, r3
 800bb1c:	f001 ff90 	bl	800da40 <_sbrk_r>
 800bb20:	4581      	cmp	r9, r0
 800bb22:	d142      	bne.n	800bbaa <_malloc_r+0xea>
 800bb24:	6821      	ldr	r1, [r4, #0]
 800bb26:	1a6d      	subs	r5, r5, r1
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ffa6 	bl	800ba7c <sbrk_aligned>
 800bb30:	3001      	adds	r0, #1
 800bb32:	d03a      	beq.n	800bbaa <_malloc_r+0xea>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	442b      	add	r3, r5
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	bb62      	cbnz	r2, 800bb9c <_malloc_r+0xdc>
 800bb42:	f8c8 7000 	str.w	r7, [r8]
 800bb46:	e00f      	b.n	800bb68 <_malloc_r+0xa8>
 800bb48:	6822      	ldr	r2, [r4, #0]
 800bb4a:	1b52      	subs	r2, r2, r5
 800bb4c:	d420      	bmi.n	800bb90 <_malloc_r+0xd0>
 800bb4e:	2a0b      	cmp	r2, #11
 800bb50:	d917      	bls.n	800bb82 <_malloc_r+0xc2>
 800bb52:	1961      	adds	r1, r4, r5
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	6025      	str	r5, [r4, #0]
 800bb58:	bf18      	it	ne
 800bb5a:	6059      	strne	r1, [r3, #4]
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	bf08      	it	eq
 800bb60:	f8c8 1000 	streq.w	r1, [r8]
 800bb64:	5162      	str	r2, [r4, r5]
 800bb66:	604b      	str	r3, [r1, #4]
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f000 f82f 	bl	800bbcc <__malloc_unlock>
 800bb6e:	f104 000b 	add.w	r0, r4, #11
 800bb72:	1d23      	adds	r3, r4, #4
 800bb74:	f020 0007 	bic.w	r0, r0, #7
 800bb78:	1ac2      	subs	r2, r0, r3
 800bb7a:	bf1c      	itt	ne
 800bb7c:	1a1b      	subne	r3, r3, r0
 800bb7e:	50a3      	strne	r3, [r4, r2]
 800bb80:	e7af      	b.n	800bae2 <_malloc_r+0x22>
 800bb82:	6862      	ldr	r2, [r4, #4]
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	bf0c      	ite	eq
 800bb88:	f8c8 2000 	streq.w	r2, [r8]
 800bb8c:	605a      	strne	r2, [r3, #4]
 800bb8e:	e7eb      	b.n	800bb68 <_malloc_r+0xa8>
 800bb90:	4623      	mov	r3, r4
 800bb92:	6864      	ldr	r4, [r4, #4]
 800bb94:	e7ae      	b.n	800baf4 <_malloc_r+0x34>
 800bb96:	463c      	mov	r4, r7
 800bb98:	687f      	ldr	r7, [r7, #4]
 800bb9a:	e7b6      	b.n	800bb0a <_malloc_r+0x4a>
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	42a3      	cmp	r3, r4
 800bba2:	d1fb      	bne.n	800bb9c <_malloc_r+0xdc>
 800bba4:	2300      	movs	r3, #0
 800bba6:	6053      	str	r3, [r2, #4]
 800bba8:	e7de      	b.n	800bb68 <_malloc_r+0xa8>
 800bbaa:	230c      	movs	r3, #12
 800bbac:	6033      	str	r3, [r6, #0]
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f000 f80c 	bl	800bbcc <__malloc_unlock>
 800bbb4:	e794      	b.n	800bae0 <_malloc_r+0x20>
 800bbb6:	6005      	str	r5, [r0, #0]
 800bbb8:	e7d6      	b.n	800bb68 <_malloc_r+0xa8>
 800bbba:	bf00      	nop
 800bbbc:	20000b44 	.word	0x20000b44

0800bbc0 <__malloc_lock>:
 800bbc0:	4801      	ldr	r0, [pc, #4]	@ (800bbc8 <__malloc_lock+0x8>)
 800bbc2:	f7ff b8a6 	b.w	800ad12 <__retarget_lock_acquire_recursive>
 800bbc6:	bf00      	nop
 800bbc8:	20000b3c 	.word	0x20000b3c

0800bbcc <__malloc_unlock>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	@ (800bbd4 <__malloc_unlock+0x8>)
 800bbce:	f7ff b8a1 	b.w	800ad14 <__retarget_lock_release_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	20000b3c 	.word	0x20000b3c

0800bbd8 <_Balloc>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	69c6      	ldr	r6, [r0, #28]
 800bbdc:	4604      	mov	r4, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	b976      	cbnz	r6, 800bc00 <_Balloc+0x28>
 800bbe2:	2010      	movs	r0, #16
 800bbe4:	f7ff ff42 	bl	800ba6c <malloc>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	61e0      	str	r0, [r4, #28]
 800bbec:	b920      	cbnz	r0, 800bbf8 <_Balloc+0x20>
 800bbee:	4b18      	ldr	r3, [pc, #96]	@ (800bc50 <_Balloc+0x78>)
 800bbf0:	4818      	ldr	r0, [pc, #96]	@ (800bc54 <_Balloc+0x7c>)
 800bbf2:	216b      	movs	r1, #107	@ 0x6b
 800bbf4:	f001 ff4c 	bl	800da90 <__assert_func>
 800bbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbfc:	6006      	str	r6, [r0, #0]
 800bbfe:	60c6      	str	r6, [r0, #12]
 800bc00:	69e6      	ldr	r6, [r4, #28]
 800bc02:	68f3      	ldr	r3, [r6, #12]
 800bc04:	b183      	cbz	r3, 800bc28 <_Balloc+0x50>
 800bc06:	69e3      	ldr	r3, [r4, #28]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc0e:	b9b8      	cbnz	r0, 800bc40 <_Balloc+0x68>
 800bc10:	2101      	movs	r1, #1
 800bc12:	fa01 f605 	lsl.w	r6, r1, r5
 800bc16:	1d72      	adds	r2, r6, #5
 800bc18:	0092      	lsls	r2, r2, #2
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f001 ff56 	bl	800dacc <_calloc_r>
 800bc20:	b160      	cbz	r0, 800bc3c <_Balloc+0x64>
 800bc22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc26:	e00e      	b.n	800bc46 <_Balloc+0x6e>
 800bc28:	2221      	movs	r2, #33	@ 0x21
 800bc2a:	2104      	movs	r1, #4
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f001 ff4d 	bl	800dacc <_calloc_r>
 800bc32:	69e3      	ldr	r3, [r4, #28]
 800bc34:	60f0      	str	r0, [r6, #12]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e4      	bne.n	800bc06 <_Balloc+0x2e>
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	6802      	ldr	r2, [r0, #0]
 800bc42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc46:	2300      	movs	r3, #0
 800bc48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc4c:	e7f7      	b.n	800bc3e <_Balloc+0x66>
 800bc4e:	bf00      	nop
 800bc50:	0800f2ca 	.word	0x0800f2ca
 800bc54:	0800f34a 	.word	0x0800f34a

0800bc58 <_Bfree>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	69c6      	ldr	r6, [r0, #28]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b976      	cbnz	r6, 800bc80 <_Bfree+0x28>
 800bc62:	2010      	movs	r0, #16
 800bc64:	f7ff ff02 	bl	800ba6c <malloc>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	61e8      	str	r0, [r5, #28]
 800bc6c:	b920      	cbnz	r0, 800bc78 <_Bfree+0x20>
 800bc6e:	4b09      	ldr	r3, [pc, #36]	@ (800bc94 <_Bfree+0x3c>)
 800bc70:	4809      	ldr	r0, [pc, #36]	@ (800bc98 <_Bfree+0x40>)
 800bc72:	218f      	movs	r1, #143	@ 0x8f
 800bc74:	f001 ff0c 	bl	800da90 <__assert_func>
 800bc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc7c:	6006      	str	r6, [r0, #0]
 800bc7e:	60c6      	str	r6, [r0, #12]
 800bc80:	b13c      	cbz	r4, 800bc92 <_Bfree+0x3a>
 800bc82:	69eb      	ldr	r3, [r5, #28]
 800bc84:	6862      	ldr	r2, [r4, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc8c:	6021      	str	r1, [r4, #0]
 800bc8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	0800f2ca 	.word	0x0800f2ca
 800bc98:	0800f34a 	.word	0x0800f34a

0800bc9c <__multadd>:
 800bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca0:	690d      	ldr	r5, [r1, #16]
 800bca2:	4607      	mov	r7, r0
 800bca4:	460c      	mov	r4, r1
 800bca6:	461e      	mov	r6, r3
 800bca8:	f101 0c14 	add.w	ip, r1, #20
 800bcac:	2000      	movs	r0, #0
 800bcae:	f8dc 3000 	ldr.w	r3, [ip]
 800bcb2:	b299      	uxth	r1, r3
 800bcb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bcb8:	0c1e      	lsrs	r6, r3, #16
 800bcba:	0c0b      	lsrs	r3, r1, #16
 800bcbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bcc0:	b289      	uxth	r1, r1
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcc8:	4285      	cmp	r5, r0
 800bcca:	f84c 1b04 	str.w	r1, [ip], #4
 800bcce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcd2:	dcec      	bgt.n	800bcae <__multadd+0x12>
 800bcd4:	b30e      	cbz	r6, 800bd1a <__multadd+0x7e>
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	dc19      	bgt.n	800bd10 <__multadd+0x74>
 800bcdc:	6861      	ldr	r1, [r4, #4]
 800bcde:	4638      	mov	r0, r7
 800bce0:	3101      	adds	r1, #1
 800bce2:	f7ff ff79 	bl	800bbd8 <_Balloc>
 800bce6:	4680      	mov	r8, r0
 800bce8:	b928      	cbnz	r0, 800bcf6 <__multadd+0x5a>
 800bcea:	4602      	mov	r2, r0
 800bcec:	4b0c      	ldr	r3, [pc, #48]	@ (800bd20 <__multadd+0x84>)
 800bcee:	480d      	ldr	r0, [pc, #52]	@ (800bd24 <__multadd+0x88>)
 800bcf0:	21ba      	movs	r1, #186	@ 0xba
 800bcf2:	f001 fecd 	bl	800da90 <__assert_func>
 800bcf6:	6922      	ldr	r2, [r4, #16]
 800bcf8:	3202      	adds	r2, #2
 800bcfa:	f104 010c 	add.w	r1, r4, #12
 800bcfe:	0092      	lsls	r2, r2, #2
 800bd00:	300c      	adds	r0, #12
 800bd02:	f001 fead 	bl	800da60 <memcpy>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7ff ffa5 	bl	800bc58 <_Bfree>
 800bd0e:	4644      	mov	r4, r8
 800bd10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd14:	3501      	adds	r5, #1
 800bd16:	615e      	str	r6, [r3, #20]
 800bd18:	6125      	str	r5, [r4, #16]
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	0800f339 	.word	0x0800f339
 800bd24:	0800f34a 	.word	0x0800f34a

0800bd28 <__s2b>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	4615      	mov	r5, r2
 800bd30:	461f      	mov	r7, r3
 800bd32:	2209      	movs	r2, #9
 800bd34:	3308      	adds	r3, #8
 800bd36:	4606      	mov	r6, r0
 800bd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	2201      	movs	r2, #1
 800bd40:	429a      	cmp	r2, r3
 800bd42:	db09      	blt.n	800bd58 <__s2b+0x30>
 800bd44:	4630      	mov	r0, r6
 800bd46:	f7ff ff47 	bl	800bbd8 <_Balloc>
 800bd4a:	b940      	cbnz	r0, 800bd5e <__s2b+0x36>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	4b19      	ldr	r3, [pc, #100]	@ (800bdb4 <__s2b+0x8c>)
 800bd50:	4819      	ldr	r0, [pc, #100]	@ (800bdb8 <__s2b+0x90>)
 800bd52:	21d3      	movs	r1, #211	@ 0xd3
 800bd54:	f001 fe9c 	bl	800da90 <__assert_func>
 800bd58:	0052      	lsls	r2, r2, #1
 800bd5a:	3101      	adds	r1, #1
 800bd5c:	e7f0      	b.n	800bd40 <__s2b+0x18>
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	6143      	str	r3, [r0, #20]
 800bd62:	2d09      	cmp	r5, #9
 800bd64:	f04f 0301 	mov.w	r3, #1
 800bd68:	6103      	str	r3, [r0, #16]
 800bd6a:	dd16      	ble.n	800bd9a <__s2b+0x72>
 800bd6c:	f104 0909 	add.w	r9, r4, #9
 800bd70:	46c8      	mov	r8, r9
 800bd72:	442c      	add	r4, r5
 800bd74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd78:	4601      	mov	r1, r0
 800bd7a:	3b30      	subs	r3, #48	@ 0x30
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff8c 	bl	800bc9c <__multadd>
 800bd84:	45a0      	cmp	r8, r4
 800bd86:	d1f5      	bne.n	800bd74 <__s2b+0x4c>
 800bd88:	f1a5 0408 	sub.w	r4, r5, #8
 800bd8c:	444c      	add	r4, r9
 800bd8e:	1b2d      	subs	r5, r5, r4
 800bd90:	1963      	adds	r3, r4, r5
 800bd92:	42bb      	cmp	r3, r7
 800bd94:	db04      	blt.n	800bda0 <__s2b+0x78>
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	340a      	adds	r4, #10
 800bd9c:	2509      	movs	r5, #9
 800bd9e:	e7f6      	b.n	800bd8e <__s2b+0x66>
 800bda0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bda4:	4601      	mov	r1, r0
 800bda6:	3b30      	subs	r3, #48	@ 0x30
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ff76 	bl	800bc9c <__multadd>
 800bdb0:	e7ee      	b.n	800bd90 <__s2b+0x68>
 800bdb2:	bf00      	nop
 800bdb4:	0800f339 	.word	0x0800f339
 800bdb8:	0800f34a 	.word	0x0800f34a

0800bdbc <__hi0bits>:
 800bdbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	bf36      	itet	cc
 800bdc4:	0403      	lslcc	r3, r0, #16
 800bdc6:	2000      	movcs	r0, #0
 800bdc8:	2010      	movcc	r0, #16
 800bdca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdce:	bf3c      	itt	cc
 800bdd0:	021b      	lslcc	r3, r3, #8
 800bdd2:	3008      	addcc	r0, #8
 800bdd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdd8:	bf3c      	itt	cc
 800bdda:	011b      	lslcc	r3, r3, #4
 800bddc:	3004      	addcc	r0, #4
 800bdde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bde2:	bf3c      	itt	cc
 800bde4:	009b      	lslcc	r3, r3, #2
 800bde6:	3002      	addcc	r0, #2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	db05      	blt.n	800bdf8 <__hi0bits+0x3c>
 800bdec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdf0:	f100 0001 	add.w	r0, r0, #1
 800bdf4:	bf08      	it	eq
 800bdf6:	2020      	moveq	r0, #32
 800bdf8:	4770      	bx	lr

0800bdfa <__lo0bits>:
 800bdfa:	6803      	ldr	r3, [r0, #0]
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f013 0007 	ands.w	r0, r3, #7
 800be02:	d00b      	beq.n	800be1c <__lo0bits+0x22>
 800be04:	07d9      	lsls	r1, r3, #31
 800be06:	d421      	bmi.n	800be4c <__lo0bits+0x52>
 800be08:	0798      	lsls	r0, r3, #30
 800be0a:	bf49      	itett	mi
 800be0c:	085b      	lsrmi	r3, r3, #1
 800be0e:	089b      	lsrpl	r3, r3, #2
 800be10:	2001      	movmi	r0, #1
 800be12:	6013      	strmi	r3, [r2, #0]
 800be14:	bf5c      	itt	pl
 800be16:	6013      	strpl	r3, [r2, #0]
 800be18:	2002      	movpl	r0, #2
 800be1a:	4770      	bx	lr
 800be1c:	b299      	uxth	r1, r3
 800be1e:	b909      	cbnz	r1, 800be24 <__lo0bits+0x2a>
 800be20:	0c1b      	lsrs	r3, r3, #16
 800be22:	2010      	movs	r0, #16
 800be24:	b2d9      	uxtb	r1, r3
 800be26:	b909      	cbnz	r1, 800be2c <__lo0bits+0x32>
 800be28:	3008      	adds	r0, #8
 800be2a:	0a1b      	lsrs	r3, r3, #8
 800be2c:	0719      	lsls	r1, r3, #28
 800be2e:	bf04      	itt	eq
 800be30:	091b      	lsreq	r3, r3, #4
 800be32:	3004      	addeq	r0, #4
 800be34:	0799      	lsls	r1, r3, #30
 800be36:	bf04      	itt	eq
 800be38:	089b      	lsreq	r3, r3, #2
 800be3a:	3002      	addeq	r0, #2
 800be3c:	07d9      	lsls	r1, r3, #31
 800be3e:	d403      	bmi.n	800be48 <__lo0bits+0x4e>
 800be40:	085b      	lsrs	r3, r3, #1
 800be42:	f100 0001 	add.w	r0, r0, #1
 800be46:	d003      	beq.n	800be50 <__lo0bits+0x56>
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	4770      	bx	lr
 800be4c:	2000      	movs	r0, #0
 800be4e:	4770      	bx	lr
 800be50:	2020      	movs	r0, #32
 800be52:	4770      	bx	lr

0800be54 <__i2b>:
 800be54:	b510      	push	{r4, lr}
 800be56:	460c      	mov	r4, r1
 800be58:	2101      	movs	r1, #1
 800be5a:	f7ff febd 	bl	800bbd8 <_Balloc>
 800be5e:	4602      	mov	r2, r0
 800be60:	b928      	cbnz	r0, 800be6e <__i2b+0x1a>
 800be62:	4b05      	ldr	r3, [pc, #20]	@ (800be78 <__i2b+0x24>)
 800be64:	4805      	ldr	r0, [pc, #20]	@ (800be7c <__i2b+0x28>)
 800be66:	f240 1145 	movw	r1, #325	@ 0x145
 800be6a:	f001 fe11 	bl	800da90 <__assert_func>
 800be6e:	2301      	movs	r3, #1
 800be70:	6144      	str	r4, [r0, #20]
 800be72:	6103      	str	r3, [r0, #16]
 800be74:	bd10      	pop	{r4, pc}
 800be76:	bf00      	nop
 800be78:	0800f339 	.word	0x0800f339
 800be7c:	0800f34a 	.word	0x0800f34a

0800be80 <__multiply>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4617      	mov	r7, r2
 800be86:	690a      	ldr	r2, [r1, #16]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	bfa8      	it	ge
 800be8e:	463b      	movge	r3, r7
 800be90:	4689      	mov	r9, r1
 800be92:	bfa4      	itt	ge
 800be94:	460f      	movge	r7, r1
 800be96:	4699      	movge	r9, r3
 800be98:	693d      	ldr	r5, [r7, #16]
 800be9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	eb05 060a 	add.w	r6, r5, sl
 800bea6:	42b3      	cmp	r3, r6
 800bea8:	b085      	sub	sp, #20
 800beaa:	bfb8      	it	lt
 800beac:	3101      	addlt	r1, #1
 800beae:	f7ff fe93 	bl	800bbd8 <_Balloc>
 800beb2:	b930      	cbnz	r0, 800bec2 <__multiply+0x42>
 800beb4:	4602      	mov	r2, r0
 800beb6:	4b41      	ldr	r3, [pc, #260]	@ (800bfbc <__multiply+0x13c>)
 800beb8:	4841      	ldr	r0, [pc, #260]	@ (800bfc0 <__multiply+0x140>)
 800beba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bebe:	f001 fde7 	bl	800da90 <__assert_func>
 800bec2:	f100 0414 	add.w	r4, r0, #20
 800bec6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800beca:	4623      	mov	r3, r4
 800becc:	2200      	movs	r2, #0
 800bece:	4573      	cmp	r3, lr
 800bed0:	d320      	bcc.n	800bf14 <__multiply+0x94>
 800bed2:	f107 0814 	add.w	r8, r7, #20
 800bed6:	f109 0114 	add.w	r1, r9, #20
 800beda:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bede:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bee2:	9302      	str	r3, [sp, #8]
 800bee4:	1beb      	subs	r3, r5, r7
 800bee6:	3b15      	subs	r3, #21
 800bee8:	f023 0303 	bic.w	r3, r3, #3
 800beec:	3304      	adds	r3, #4
 800beee:	3715      	adds	r7, #21
 800bef0:	42bd      	cmp	r5, r7
 800bef2:	bf38      	it	cc
 800bef4:	2304      	movcc	r3, #4
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	9b02      	ldr	r3, [sp, #8]
 800befa:	9103      	str	r1, [sp, #12]
 800befc:	428b      	cmp	r3, r1
 800befe:	d80c      	bhi.n	800bf1a <__multiply+0x9a>
 800bf00:	2e00      	cmp	r6, #0
 800bf02:	dd03      	ble.n	800bf0c <__multiply+0x8c>
 800bf04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d055      	beq.n	800bfb8 <__multiply+0x138>
 800bf0c:	6106      	str	r6, [r0, #16]
 800bf0e:	b005      	add	sp, #20
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	f843 2b04 	str.w	r2, [r3], #4
 800bf18:	e7d9      	b.n	800bece <__multiply+0x4e>
 800bf1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf1e:	f1ba 0f00 	cmp.w	sl, #0
 800bf22:	d01f      	beq.n	800bf64 <__multiply+0xe4>
 800bf24:	46c4      	mov	ip, r8
 800bf26:	46a1      	mov	r9, r4
 800bf28:	2700      	movs	r7, #0
 800bf2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf2e:	f8d9 3000 	ldr.w	r3, [r9]
 800bf32:	fa1f fb82 	uxth.w	fp, r2
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf3c:	443b      	add	r3, r7
 800bf3e:	f8d9 7000 	ldr.w	r7, [r9]
 800bf42:	0c12      	lsrs	r2, r2, #16
 800bf44:	0c3f      	lsrs	r7, r7, #16
 800bf46:	fb0a 7202 	mla	r2, sl, r2, r7
 800bf4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf54:	4565      	cmp	r5, ip
 800bf56:	f849 3b04 	str.w	r3, [r9], #4
 800bf5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bf5e:	d8e4      	bhi.n	800bf2a <__multiply+0xaa>
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	50e7      	str	r7, [r4, r3]
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf6a:	3104      	adds	r1, #4
 800bf6c:	f1b9 0f00 	cmp.w	r9, #0
 800bf70:	d020      	beq.n	800bfb4 <__multiply+0x134>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4647      	mov	r7, r8
 800bf76:	46a4      	mov	ip, r4
 800bf78:	f04f 0a00 	mov.w	sl, #0
 800bf7c:	f8b7 b000 	ldrh.w	fp, [r7]
 800bf80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bf84:	fb09 220b 	mla	r2, r9, fp, r2
 800bf88:	4452      	add	r2, sl
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf90:	f84c 3b04 	str.w	r3, [ip], #4
 800bf94:	f857 3b04 	ldr.w	r3, [r7], #4
 800bf98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf9c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bfa0:	fb09 330a 	mla	r3, r9, sl, r3
 800bfa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bfa8:	42bd      	cmp	r5, r7
 800bfaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfae:	d8e5      	bhi.n	800bf7c <__multiply+0xfc>
 800bfb0:	9a01      	ldr	r2, [sp, #4]
 800bfb2:	50a3      	str	r3, [r4, r2]
 800bfb4:	3404      	adds	r4, #4
 800bfb6:	e79f      	b.n	800bef8 <__multiply+0x78>
 800bfb8:	3e01      	subs	r6, #1
 800bfba:	e7a1      	b.n	800bf00 <__multiply+0x80>
 800bfbc:	0800f339 	.word	0x0800f339
 800bfc0:	0800f34a 	.word	0x0800f34a

0800bfc4 <__pow5mult>:
 800bfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc8:	4615      	mov	r5, r2
 800bfca:	f012 0203 	ands.w	r2, r2, #3
 800bfce:	4607      	mov	r7, r0
 800bfd0:	460e      	mov	r6, r1
 800bfd2:	d007      	beq.n	800bfe4 <__pow5mult+0x20>
 800bfd4:	4c25      	ldr	r4, [pc, #148]	@ (800c06c <__pow5mult+0xa8>)
 800bfd6:	3a01      	subs	r2, #1
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfde:	f7ff fe5d 	bl	800bc9c <__multadd>
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	10ad      	asrs	r5, r5, #2
 800bfe6:	d03d      	beq.n	800c064 <__pow5mult+0xa0>
 800bfe8:	69fc      	ldr	r4, [r7, #28]
 800bfea:	b97c      	cbnz	r4, 800c00c <__pow5mult+0x48>
 800bfec:	2010      	movs	r0, #16
 800bfee:	f7ff fd3d 	bl	800ba6c <malloc>
 800bff2:	4602      	mov	r2, r0
 800bff4:	61f8      	str	r0, [r7, #28]
 800bff6:	b928      	cbnz	r0, 800c004 <__pow5mult+0x40>
 800bff8:	4b1d      	ldr	r3, [pc, #116]	@ (800c070 <__pow5mult+0xac>)
 800bffa:	481e      	ldr	r0, [pc, #120]	@ (800c074 <__pow5mult+0xb0>)
 800bffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c000:	f001 fd46 	bl	800da90 <__assert_func>
 800c004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c008:	6004      	str	r4, [r0, #0]
 800c00a:	60c4      	str	r4, [r0, #12]
 800c00c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c014:	b94c      	cbnz	r4, 800c02a <__pow5mult+0x66>
 800c016:	f240 2171 	movw	r1, #625	@ 0x271
 800c01a:	4638      	mov	r0, r7
 800c01c:	f7ff ff1a 	bl	800be54 <__i2b>
 800c020:	2300      	movs	r3, #0
 800c022:	f8c8 0008 	str.w	r0, [r8, #8]
 800c026:	4604      	mov	r4, r0
 800c028:	6003      	str	r3, [r0, #0]
 800c02a:	f04f 0900 	mov.w	r9, #0
 800c02e:	07eb      	lsls	r3, r5, #31
 800c030:	d50a      	bpl.n	800c048 <__pow5mult+0x84>
 800c032:	4631      	mov	r1, r6
 800c034:	4622      	mov	r2, r4
 800c036:	4638      	mov	r0, r7
 800c038:	f7ff ff22 	bl	800be80 <__multiply>
 800c03c:	4631      	mov	r1, r6
 800c03e:	4680      	mov	r8, r0
 800c040:	4638      	mov	r0, r7
 800c042:	f7ff fe09 	bl	800bc58 <_Bfree>
 800c046:	4646      	mov	r6, r8
 800c048:	106d      	asrs	r5, r5, #1
 800c04a:	d00b      	beq.n	800c064 <__pow5mult+0xa0>
 800c04c:	6820      	ldr	r0, [r4, #0]
 800c04e:	b938      	cbnz	r0, 800c060 <__pow5mult+0x9c>
 800c050:	4622      	mov	r2, r4
 800c052:	4621      	mov	r1, r4
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff ff13 	bl	800be80 <__multiply>
 800c05a:	6020      	str	r0, [r4, #0]
 800c05c:	f8c0 9000 	str.w	r9, [r0]
 800c060:	4604      	mov	r4, r0
 800c062:	e7e4      	b.n	800c02e <__pow5mult+0x6a>
 800c064:	4630      	mov	r0, r6
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	bf00      	nop
 800c06c:	0800f45c 	.word	0x0800f45c
 800c070:	0800f2ca 	.word	0x0800f2ca
 800c074:	0800f34a 	.word	0x0800f34a

0800c078 <__lshift>:
 800c078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	6849      	ldr	r1, [r1, #4]
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	4607      	mov	r7, r0
 800c08a:	4691      	mov	r9, r2
 800c08c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c090:	f108 0601 	add.w	r6, r8, #1
 800c094:	42b3      	cmp	r3, r6
 800c096:	db0b      	blt.n	800c0b0 <__lshift+0x38>
 800c098:	4638      	mov	r0, r7
 800c09a:	f7ff fd9d 	bl	800bbd8 <_Balloc>
 800c09e:	4605      	mov	r5, r0
 800c0a0:	b948      	cbnz	r0, 800c0b6 <__lshift+0x3e>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	4b28      	ldr	r3, [pc, #160]	@ (800c148 <__lshift+0xd0>)
 800c0a6:	4829      	ldr	r0, [pc, #164]	@ (800c14c <__lshift+0xd4>)
 800c0a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c0ac:	f001 fcf0 	bl	800da90 <__assert_func>
 800c0b0:	3101      	adds	r1, #1
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	e7ee      	b.n	800c094 <__lshift+0x1c>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f100 0114 	add.w	r1, r0, #20
 800c0bc:	f100 0210 	add.w	r2, r0, #16
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	4553      	cmp	r3, sl
 800c0c4:	db33      	blt.n	800c12e <__lshift+0xb6>
 800c0c6:	6920      	ldr	r0, [r4, #16]
 800c0c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0cc:	f104 0314 	add.w	r3, r4, #20
 800c0d0:	f019 091f 	ands.w	r9, r9, #31
 800c0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0dc:	d02b      	beq.n	800c136 <__lshift+0xbe>
 800c0de:	f1c9 0e20 	rsb	lr, r9, #32
 800c0e2:	468a      	mov	sl, r1
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	fa00 f009 	lsl.w	r0, r0, r9
 800c0ec:	4310      	orrs	r0, r2
 800c0ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f6:	459c      	cmp	ip, r3
 800c0f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0fc:	d8f3      	bhi.n	800c0e6 <__lshift+0x6e>
 800c0fe:	ebac 0304 	sub.w	r3, ip, r4
 800c102:	3b15      	subs	r3, #21
 800c104:	f023 0303 	bic.w	r3, r3, #3
 800c108:	3304      	adds	r3, #4
 800c10a:	f104 0015 	add.w	r0, r4, #21
 800c10e:	4560      	cmp	r0, ip
 800c110:	bf88      	it	hi
 800c112:	2304      	movhi	r3, #4
 800c114:	50ca      	str	r2, [r1, r3]
 800c116:	b10a      	cbz	r2, 800c11c <__lshift+0xa4>
 800c118:	f108 0602 	add.w	r6, r8, #2
 800c11c:	3e01      	subs	r6, #1
 800c11e:	4638      	mov	r0, r7
 800c120:	612e      	str	r6, [r5, #16]
 800c122:	4621      	mov	r1, r4
 800c124:	f7ff fd98 	bl	800bc58 <_Bfree>
 800c128:	4628      	mov	r0, r5
 800c12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c132:	3301      	adds	r3, #1
 800c134:	e7c5      	b.n	800c0c2 <__lshift+0x4a>
 800c136:	3904      	subs	r1, #4
 800c138:	f853 2b04 	ldr.w	r2, [r3], #4
 800c13c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c140:	459c      	cmp	ip, r3
 800c142:	d8f9      	bhi.n	800c138 <__lshift+0xc0>
 800c144:	e7ea      	b.n	800c11c <__lshift+0xa4>
 800c146:	bf00      	nop
 800c148:	0800f339 	.word	0x0800f339
 800c14c:	0800f34a 	.word	0x0800f34a

0800c150 <__mcmp>:
 800c150:	690a      	ldr	r2, [r1, #16]
 800c152:	4603      	mov	r3, r0
 800c154:	6900      	ldr	r0, [r0, #16]
 800c156:	1a80      	subs	r0, r0, r2
 800c158:	b530      	push	{r4, r5, lr}
 800c15a:	d10e      	bne.n	800c17a <__mcmp+0x2a>
 800c15c:	3314      	adds	r3, #20
 800c15e:	3114      	adds	r1, #20
 800c160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c16c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c170:	4295      	cmp	r5, r2
 800c172:	d003      	beq.n	800c17c <__mcmp+0x2c>
 800c174:	d205      	bcs.n	800c182 <__mcmp+0x32>
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	bd30      	pop	{r4, r5, pc}
 800c17c:	42a3      	cmp	r3, r4
 800c17e:	d3f3      	bcc.n	800c168 <__mcmp+0x18>
 800c180:	e7fb      	b.n	800c17a <__mcmp+0x2a>
 800c182:	2001      	movs	r0, #1
 800c184:	e7f9      	b.n	800c17a <__mcmp+0x2a>
	...

0800c188 <__mdiff>:
 800c188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	4689      	mov	r9, r1
 800c18e:	4606      	mov	r6, r0
 800c190:	4611      	mov	r1, r2
 800c192:	4648      	mov	r0, r9
 800c194:	4614      	mov	r4, r2
 800c196:	f7ff ffdb 	bl	800c150 <__mcmp>
 800c19a:	1e05      	subs	r5, r0, #0
 800c19c:	d112      	bne.n	800c1c4 <__mdiff+0x3c>
 800c19e:	4629      	mov	r1, r5
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff fd19 	bl	800bbd8 <_Balloc>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	b928      	cbnz	r0, 800c1b6 <__mdiff+0x2e>
 800c1aa:	4b3f      	ldr	r3, [pc, #252]	@ (800c2a8 <__mdiff+0x120>)
 800c1ac:	f240 2137 	movw	r1, #567	@ 0x237
 800c1b0:	483e      	ldr	r0, [pc, #248]	@ (800c2ac <__mdiff+0x124>)
 800c1b2:	f001 fc6d 	bl	800da90 <__assert_func>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1bc:	4610      	mov	r0, r2
 800c1be:	b003      	add	sp, #12
 800c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c4:	bfbc      	itt	lt
 800c1c6:	464b      	movlt	r3, r9
 800c1c8:	46a1      	movlt	r9, r4
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1d0:	bfba      	itte	lt
 800c1d2:	461c      	movlt	r4, r3
 800c1d4:	2501      	movlt	r5, #1
 800c1d6:	2500      	movge	r5, #0
 800c1d8:	f7ff fcfe 	bl	800bbd8 <_Balloc>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	b918      	cbnz	r0, 800c1e8 <__mdiff+0x60>
 800c1e0:	4b31      	ldr	r3, [pc, #196]	@ (800c2a8 <__mdiff+0x120>)
 800c1e2:	f240 2145 	movw	r1, #581	@ 0x245
 800c1e6:	e7e3      	b.n	800c1b0 <__mdiff+0x28>
 800c1e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1ec:	6926      	ldr	r6, [r4, #16]
 800c1ee:	60c5      	str	r5, [r0, #12]
 800c1f0:	f109 0310 	add.w	r3, r9, #16
 800c1f4:	f109 0514 	add.w	r5, r9, #20
 800c1f8:	f104 0e14 	add.w	lr, r4, #20
 800c1fc:	f100 0b14 	add.w	fp, r0, #20
 800c200:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c204:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	46d9      	mov	r9, fp
 800c20c:	f04f 0c00 	mov.w	ip, #0
 800c210:	9b01      	ldr	r3, [sp, #4]
 800c212:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c216:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	fa1f f38a 	uxth.w	r3, sl
 800c220:	4619      	mov	r1, r3
 800c222:	b283      	uxth	r3, r0
 800c224:	1acb      	subs	r3, r1, r3
 800c226:	0c00      	lsrs	r0, r0, #16
 800c228:	4463      	add	r3, ip
 800c22a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c22e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c232:	b29b      	uxth	r3, r3
 800c234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c238:	4576      	cmp	r6, lr
 800c23a:	f849 3b04 	str.w	r3, [r9], #4
 800c23e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c242:	d8e5      	bhi.n	800c210 <__mdiff+0x88>
 800c244:	1b33      	subs	r3, r6, r4
 800c246:	3b15      	subs	r3, #21
 800c248:	f023 0303 	bic.w	r3, r3, #3
 800c24c:	3415      	adds	r4, #21
 800c24e:	3304      	adds	r3, #4
 800c250:	42a6      	cmp	r6, r4
 800c252:	bf38      	it	cc
 800c254:	2304      	movcc	r3, #4
 800c256:	441d      	add	r5, r3
 800c258:	445b      	add	r3, fp
 800c25a:	461e      	mov	r6, r3
 800c25c:	462c      	mov	r4, r5
 800c25e:	4544      	cmp	r4, r8
 800c260:	d30e      	bcc.n	800c280 <__mdiff+0xf8>
 800c262:	f108 0103 	add.w	r1, r8, #3
 800c266:	1b49      	subs	r1, r1, r5
 800c268:	f021 0103 	bic.w	r1, r1, #3
 800c26c:	3d03      	subs	r5, #3
 800c26e:	45a8      	cmp	r8, r5
 800c270:	bf38      	it	cc
 800c272:	2100      	movcc	r1, #0
 800c274:	440b      	add	r3, r1
 800c276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c27a:	b191      	cbz	r1, 800c2a2 <__mdiff+0x11a>
 800c27c:	6117      	str	r7, [r2, #16]
 800c27e:	e79d      	b.n	800c1bc <__mdiff+0x34>
 800c280:	f854 1b04 	ldr.w	r1, [r4], #4
 800c284:	46e6      	mov	lr, ip
 800c286:	0c08      	lsrs	r0, r1, #16
 800c288:	fa1c fc81 	uxtah	ip, ip, r1
 800c28c:	4471      	add	r1, lr
 800c28e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c292:	b289      	uxth	r1, r1
 800c294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c298:	f846 1b04 	str.w	r1, [r6], #4
 800c29c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2a0:	e7dd      	b.n	800c25e <__mdiff+0xd6>
 800c2a2:	3f01      	subs	r7, #1
 800c2a4:	e7e7      	b.n	800c276 <__mdiff+0xee>
 800c2a6:	bf00      	nop
 800c2a8:	0800f339 	.word	0x0800f339
 800c2ac:	0800f34a 	.word	0x0800f34a

0800c2b0 <__ulp>:
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	ed8d 0b00 	vstr	d0, [sp]
 800c2b6:	9a01      	ldr	r2, [sp, #4]
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f8 <__ulp+0x48>)
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc08      	bgt.n	800c2d6 <__ulp+0x26>
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c2ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c2ce:	da04      	bge.n	800c2da <__ulp+0x2a>
 800c2d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c2d4:	4113      	asrs	r3, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e008      	b.n	800c2ec <__ulp+0x3c>
 800c2da:	f1a2 0314 	sub.w	r3, r2, #20
 800c2de:	2b1e      	cmp	r3, #30
 800c2e0:	bfda      	itte	le
 800c2e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c2e6:	40da      	lsrle	r2, r3
 800c2e8:	2201      	movgt	r2, #1
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	ec41 0b10 	vmov	d0, r0, r1
 800c2f4:	b002      	add	sp, #8
 800c2f6:	4770      	bx	lr
 800c2f8:	7ff00000 	.word	0x7ff00000

0800c2fc <__b2d>:
 800c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c300:	6906      	ldr	r6, [r0, #16]
 800c302:	f100 0814 	add.w	r8, r0, #20
 800c306:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c30a:	1f37      	subs	r7, r6, #4
 800c30c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c310:	4610      	mov	r0, r2
 800c312:	f7ff fd53 	bl	800bdbc <__hi0bits>
 800c316:	f1c0 0320 	rsb	r3, r0, #32
 800c31a:	280a      	cmp	r0, #10
 800c31c:	600b      	str	r3, [r1, #0]
 800c31e:	491b      	ldr	r1, [pc, #108]	@ (800c38c <__b2d+0x90>)
 800c320:	dc15      	bgt.n	800c34e <__b2d+0x52>
 800c322:	f1c0 0c0b 	rsb	ip, r0, #11
 800c326:	fa22 f30c 	lsr.w	r3, r2, ip
 800c32a:	45b8      	cmp	r8, r7
 800c32c:	ea43 0501 	orr.w	r5, r3, r1
 800c330:	bf34      	ite	cc
 800c332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c336:	2300      	movcs	r3, #0
 800c338:	3015      	adds	r0, #21
 800c33a:	fa02 f000 	lsl.w	r0, r2, r0
 800c33e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c342:	4303      	orrs	r3, r0
 800c344:	461c      	mov	r4, r3
 800c346:	ec45 4b10 	vmov	d0, r4, r5
 800c34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c34e:	45b8      	cmp	r8, r7
 800c350:	bf3a      	itte	cc
 800c352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c356:	f1a6 0708 	subcc.w	r7, r6, #8
 800c35a:	2300      	movcs	r3, #0
 800c35c:	380b      	subs	r0, #11
 800c35e:	d012      	beq.n	800c386 <__b2d+0x8a>
 800c360:	f1c0 0120 	rsb	r1, r0, #32
 800c364:	fa23 f401 	lsr.w	r4, r3, r1
 800c368:	4082      	lsls	r2, r0
 800c36a:	4322      	orrs	r2, r4
 800c36c:	4547      	cmp	r7, r8
 800c36e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c372:	bf8c      	ite	hi
 800c374:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c378:	2200      	movls	r2, #0
 800c37a:	4083      	lsls	r3, r0
 800c37c:	40ca      	lsrs	r2, r1
 800c37e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c382:	4313      	orrs	r3, r2
 800c384:	e7de      	b.n	800c344 <__b2d+0x48>
 800c386:	ea42 0501 	orr.w	r5, r2, r1
 800c38a:	e7db      	b.n	800c344 <__b2d+0x48>
 800c38c:	3ff00000 	.word	0x3ff00000

0800c390 <__d2b>:
 800c390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c394:	460f      	mov	r7, r1
 800c396:	2101      	movs	r1, #1
 800c398:	ec59 8b10 	vmov	r8, r9, d0
 800c39c:	4616      	mov	r6, r2
 800c39e:	f7ff fc1b 	bl	800bbd8 <_Balloc>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	b930      	cbnz	r0, 800c3b4 <__d2b+0x24>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	4b23      	ldr	r3, [pc, #140]	@ (800c438 <__d2b+0xa8>)
 800c3aa:	4824      	ldr	r0, [pc, #144]	@ (800c43c <__d2b+0xac>)
 800c3ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3b0:	f001 fb6e 	bl	800da90 <__assert_func>
 800c3b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3bc:	b10d      	cbz	r5, 800c3c2 <__d2b+0x32>
 800c3be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c3c8:	d023      	beq.n	800c412 <__d2b+0x82>
 800c3ca:	4668      	mov	r0, sp
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	f7ff fd14 	bl	800bdfa <__lo0bits>
 800c3d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3d6:	b1d0      	cbz	r0, 800c40e <__d2b+0x7e>
 800c3d8:	f1c0 0320 	rsb	r3, r0, #32
 800c3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e0:	430b      	orrs	r3, r1
 800c3e2:	40c2      	lsrs	r2, r0
 800c3e4:	6163      	str	r3, [r4, #20]
 800c3e6:	9201      	str	r2, [sp, #4]
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	61a3      	str	r3, [r4, #24]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	bf0c      	ite	eq
 800c3f0:	2201      	moveq	r2, #1
 800c3f2:	2202      	movne	r2, #2
 800c3f4:	6122      	str	r2, [r4, #16]
 800c3f6:	b1a5      	cbz	r5, 800c422 <__d2b+0x92>
 800c3f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3fc:	4405      	add	r5, r0
 800c3fe:	603d      	str	r5, [r7, #0]
 800c400:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c404:	6030      	str	r0, [r6, #0]
 800c406:	4620      	mov	r0, r4
 800c408:	b003      	add	sp, #12
 800c40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c40e:	6161      	str	r1, [r4, #20]
 800c410:	e7ea      	b.n	800c3e8 <__d2b+0x58>
 800c412:	a801      	add	r0, sp, #4
 800c414:	f7ff fcf1 	bl	800bdfa <__lo0bits>
 800c418:	9b01      	ldr	r3, [sp, #4]
 800c41a:	6163      	str	r3, [r4, #20]
 800c41c:	3020      	adds	r0, #32
 800c41e:	2201      	movs	r2, #1
 800c420:	e7e8      	b.n	800c3f4 <__d2b+0x64>
 800c422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c426:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c42a:	6038      	str	r0, [r7, #0]
 800c42c:	6918      	ldr	r0, [r3, #16]
 800c42e:	f7ff fcc5 	bl	800bdbc <__hi0bits>
 800c432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c436:	e7e5      	b.n	800c404 <__d2b+0x74>
 800c438:	0800f339 	.word	0x0800f339
 800c43c:	0800f34a 	.word	0x0800f34a

0800c440 <__ratio>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	b085      	sub	sp, #20
 800c446:	e9cd 1000 	strd	r1, r0, [sp]
 800c44a:	a902      	add	r1, sp, #8
 800c44c:	f7ff ff56 	bl	800c2fc <__b2d>
 800c450:	9800      	ldr	r0, [sp, #0]
 800c452:	a903      	add	r1, sp, #12
 800c454:	ec55 4b10 	vmov	r4, r5, d0
 800c458:	f7ff ff50 	bl	800c2fc <__b2d>
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	6919      	ldr	r1, [r3, #16]
 800c460:	9b00      	ldr	r3, [sp, #0]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	1ac9      	subs	r1, r1, r3
 800c466:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c46a:	1a9b      	subs	r3, r3, r2
 800c46c:	ec5b ab10 	vmov	sl, fp, d0
 800c470:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c474:	2b00      	cmp	r3, #0
 800c476:	bfce      	itee	gt
 800c478:	462a      	movgt	r2, r5
 800c47a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c47e:	465a      	movle	r2, fp
 800c480:	462f      	mov	r7, r5
 800c482:	46d9      	mov	r9, fp
 800c484:	bfcc      	ite	gt
 800c486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c48a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c48e:	464b      	mov	r3, r9
 800c490:	4652      	mov	r2, sl
 800c492:	4620      	mov	r0, r4
 800c494:	4639      	mov	r1, r7
 800c496:	f7f4 f9d9 	bl	800084c <__aeabi_ddiv>
 800c49a:	ec41 0b10 	vmov	d0, r0, r1
 800c49e:	b005      	add	sp, #20
 800c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4a4 <__copybits>:
 800c4a4:	3901      	subs	r1, #1
 800c4a6:	b570      	push	{r4, r5, r6, lr}
 800c4a8:	1149      	asrs	r1, r1, #5
 800c4aa:	6914      	ldr	r4, [r2, #16]
 800c4ac:	3101      	adds	r1, #1
 800c4ae:	f102 0314 	add.w	r3, r2, #20
 800c4b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4ba:	1f05      	subs	r5, r0, #4
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	d30c      	bcc.n	800c4da <__copybits+0x36>
 800c4c0:	1aa3      	subs	r3, r4, r2
 800c4c2:	3b11      	subs	r3, #17
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	3211      	adds	r2, #17
 800c4ca:	42a2      	cmp	r2, r4
 800c4cc:	bf88      	it	hi
 800c4ce:	2300      	movhi	r3, #0
 800c4d0:	4418      	add	r0, r3
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	4288      	cmp	r0, r1
 800c4d6:	d305      	bcc.n	800c4e4 <__copybits+0x40>
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4de:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4e2:	e7eb      	b.n	800c4bc <__copybits+0x18>
 800c4e4:	f840 3b04 	str.w	r3, [r0], #4
 800c4e8:	e7f4      	b.n	800c4d4 <__copybits+0x30>

0800c4ea <__any_on>:
 800c4ea:	f100 0214 	add.w	r2, r0, #20
 800c4ee:	6900      	ldr	r0, [r0, #16]
 800c4f0:	114b      	asrs	r3, r1, #5
 800c4f2:	4298      	cmp	r0, r3
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	db11      	blt.n	800c51c <__any_on+0x32>
 800c4f8:	dd0a      	ble.n	800c510 <__any_on+0x26>
 800c4fa:	f011 011f 	ands.w	r1, r1, #31
 800c4fe:	d007      	beq.n	800c510 <__any_on+0x26>
 800c500:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c504:	fa24 f001 	lsr.w	r0, r4, r1
 800c508:	fa00 f101 	lsl.w	r1, r0, r1
 800c50c:	428c      	cmp	r4, r1
 800c50e:	d10b      	bne.n	800c528 <__any_on+0x3e>
 800c510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c514:	4293      	cmp	r3, r2
 800c516:	d803      	bhi.n	800c520 <__any_on+0x36>
 800c518:	2000      	movs	r0, #0
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	4603      	mov	r3, r0
 800c51e:	e7f7      	b.n	800c510 <__any_on+0x26>
 800c520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c524:	2900      	cmp	r1, #0
 800c526:	d0f5      	beq.n	800c514 <__any_on+0x2a>
 800c528:	2001      	movs	r0, #1
 800c52a:	e7f6      	b.n	800c51a <__any_on+0x30>

0800c52c <sulp>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	4604      	mov	r4, r0
 800c530:	460d      	mov	r5, r1
 800c532:	ec45 4b10 	vmov	d0, r4, r5
 800c536:	4616      	mov	r6, r2
 800c538:	f7ff feba 	bl	800c2b0 <__ulp>
 800c53c:	ec51 0b10 	vmov	r0, r1, d0
 800c540:	b17e      	cbz	r6, 800c562 <sulp+0x36>
 800c542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c546:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	dd09      	ble.n	800c562 <sulp+0x36>
 800c54e:	051b      	lsls	r3, r3, #20
 800c550:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c554:	2400      	movs	r4, #0
 800c556:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c55a:	4622      	mov	r2, r4
 800c55c:	462b      	mov	r3, r5
 800c55e:	f7f4 f84b 	bl	80005f8 <__aeabi_dmul>
 800c562:	ec41 0b10 	vmov	d0, r0, r1
 800c566:	bd70      	pop	{r4, r5, r6, pc}

0800c568 <_strtod_l>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	b09f      	sub	sp, #124	@ 0x7c
 800c56e:	460c      	mov	r4, r1
 800c570:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c572:	2200      	movs	r2, #0
 800c574:	921a      	str	r2, [sp, #104]	@ 0x68
 800c576:	9005      	str	r0, [sp, #20]
 800c578:	f04f 0a00 	mov.w	sl, #0
 800c57c:	f04f 0b00 	mov.w	fp, #0
 800c580:	460a      	mov	r2, r1
 800c582:	9219      	str	r2, [sp, #100]	@ 0x64
 800c584:	7811      	ldrb	r1, [r2, #0]
 800c586:	292b      	cmp	r1, #43	@ 0x2b
 800c588:	d04a      	beq.n	800c620 <_strtod_l+0xb8>
 800c58a:	d838      	bhi.n	800c5fe <_strtod_l+0x96>
 800c58c:	290d      	cmp	r1, #13
 800c58e:	d832      	bhi.n	800c5f6 <_strtod_l+0x8e>
 800c590:	2908      	cmp	r1, #8
 800c592:	d832      	bhi.n	800c5fa <_strtod_l+0x92>
 800c594:	2900      	cmp	r1, #0
 800c596:	d03b      	beq.n	800c610 <_strtod_l+0xa8>
 800c598:	2200      	movs	r2, #0
 800c59a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c59c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c59e:	782a      	ldrb	r2, [r5, #0]
 800c5a0:	2a30      	cmp	r2, #48	@ 0x30
 800c5a2:	f040 80b2 	bne.w	800c70a <_strtod_l+0x1a2>
 800c5a6:	786a      	ldrb	r2, [r5, #1]
 800c5a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c5ac:	2a58      	cmp	r2, #88	@ 0x58
 800c5ae:	d16e      	bne.n	800c68e <_strtod_l+0x126>
 800c5b0:	9302      	str	r3, [sp, #8]
 800c5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	4a8f      	ldr	r2, [pc, #572]	@ (800c7f8 <_strtod_l+0x290>)
 800c5bc:	9805      	ldr	r0, [sp, #20]
 800c5be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c5c0:	a919      	add	r1, sp, #100	@ 0x64
 800c5c2:	f001 faff 	bl	800dbc4 <__gethex>
 800c5c6:	f010 060f 	ands.w	r6, r0, #15
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	d005      	beq.n	800c5da <_strtod_l+0x72>
 800c5ce:	2e06      	cmp	r6, #6
 800c5d0:	d128      	bne.n	800c624 <_strtod_l+0xbc>
 800c5d2:	3501      	adds	r5, #1
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f040 858e 	bne.w	800d0fe <_strtod_l+0xb96>
 800c5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5e4:	b1cb      	cbz	r3, 800c61a <_strtod_l+0xb2>
 800c5e6:	4652      	mov	r2, sl
 800c5e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c5ec:	ec43 2b10 	vmov	d0, r2, r3
 800c5f0:	b01f      	add	sp, #124	@ 0x7c
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	2920      	cmp	r1, #32
 800c5f8:	d1ce      	bne.n	800c598 <_strtod_l+0x30>
 800c5fa:	3201      	adds	r2, #1
 800c5fc:	e7c1      	b.n	800c582 <_strtod_l+0x1a>
 800c5fe:	292d      	cmp	r1, #45	@ 0x2d
 800c600:	d1ca      	bne.n	800c598 <_strtod_l+0x30>
 800c602:	2101      	movs	r1, #1
 800c604:	910e      	str	r1, [sp, #56]	@ 0x38
 800c606:	1c51      	adds	r1, r2, #1
 800c608:	9119      	str	r1, [sp, #100]	@ 0x64
 800c60a:	7852      	ldrb	r2, [r2, #1]
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d1c5      	bne.n	800c59c <_strtod_l+0x34>
 800c610:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c612:	9419      	str	r4, [sp, #100]	@ 0x64
 800c614:	2b00      	cmp	r3, #0
 800c616:	f040 8570 	bne.w	800d0fa <_strtod_l+0xb92>
 800c61a:	4652      	mov	r2, sl
 800c61c:	465b      	mov	r3, fp
 800c61e:	e7e5      	b.n	800c5ec <_strtod_l+0x84>
 800c620:	2100      	movs	r1, #0
 800c622:	e7ef      	b.n	800c604 <_strtod_l+0x9c>
 800c624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c626:	b13a      	cbz	r2, 800c638 <_strtod_l+0xd0>
 800c628:	2135      	movs	r1, #53	@ 0x35
 800c62a:	a81c      	add	r0, sp, #112	@ 0x70
 800c62c:	f7ff ff3a 	bl	800c4a4 <__copybits>
 800c630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c632:	9805      	ldr	r0, [sp, #20]
 800c634:	f7ff fb10 	bl	800bc58 <_Bfree>
 800c638:	3e01      	subs	r6, #1
 800c63a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c63c:	2e04      	cmp	r6, #4
 800c63e:	d806      	bhi.n	800c64e <_strtod_l+0xe6>
 800c640:	e8df f006 	tbb	[pc, r6]
 800c644:	201d0314 	.word	0x201d0314
 800c648:	14          	.byte	0x14
 800c649:	00          	.byte	0x00
 800c64a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c64e:	05e1      	lsls	r1, r4, #23
 800c650:	bf48      	it	mi
 800c652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c65a:	0d1b      	lsrs	r3, r3, #20
 800c65c:	051b      	lsls	r3, r3, #20
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1bb      	bne.n	800c5da <_strtod_l+0x72>
 800c662:	f7fe fb2b 	bl	800acbc <__errno>
 800c666:	2322      	movs	r3, #34	@ 0x22
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	e7b6      	b.n	800c5da <_strtod_l+0x72>
 800c66c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c67c:	e7e7      	b.n	800c64e <_strtod_l+0xe6>
 800c67e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c800 <_strtod_l+0x298>
 800c682:	e7e4      	b.n	800c64e <_strtod_l+0xe6>
 800c684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c688:	f04f 3aff 	mov.w	sl, #4294967295
 800c68c:	e7df      	b.n	800c64e <_strtod_l+0xe6>
 800c68e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	9219      	str	r2, [sp, #100]	@ 0x64
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b30      	cmp	r3, #48	@ 0x30
 800c698:	d0f9      	beq.n	800c68e <_strtod_l+0x126>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d09d      	beq.n	800c5da <_strtod_l+0x72>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	2700      	movs	r7, #0
 800c6a2:	9308      	str	r3, [sp, #32]
 800c6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c6aa:	46b9      	mov	r9, r7
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c6b0:	7805      	ldrb	r5, [r0, #0]
 800c6b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c6b6:	b2d9      	uxtb	r1, r3
 800c6b8:	2909      	cmp	r1, #9
 800c6ba:	d928      	bls.n	800c70e <_strtod_l+0x1a6>
 800c6bc:	494f      	ldr	r1, [pc, #316]	@ (800c7fc <_strtod_l+0x294>)
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f001 f9ac 	bl	800da1c <strncmp>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d032      	beq.n	800c72e <_strtod_l+0x1c6>
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	462a      	mov	r2, r5
 800c6cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6ce:	464d      	mov	r5, r9
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2a65      	cmp	r2, #101	@ 0x65
 800c6d4:	d001      	beq.n	800c6da <_strtod_l+0x172>
 800c6d6:	2a45      	cmp	r2, #69	@ 0x45
 800c6d8:	d114      	bne.n	800c704 <_strtod_l+0x19c>
 800c6da:	b91d      	cbnz	r5, 800c6e4 <_strtod_l+0x17c>
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	4302      	orrs	r2, r0
 800c6e0:	d096      	beq.n	800c610 <_strtod_l+0xa8>
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c6e6:	1c62      	adds	r2, r4, #1
 800c6e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ea:	7862      	ldrb	r2, [r4, #1]
 800c6ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800c6ee:	d07a      	beq.n	800c7e6 <_strtod_l+0x27e>
 800c6f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c6f2:	d07e      	beq.n	800c7f2 <_strtod_l+0x28a>
 800c6f4:	f04f 0c00 	mov.w	ip, #0
 800c6f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c6fc:	2909      	cmp	r1, #9
 800c6fe:	f240 8085 	bls.w	800c80c <_strtod_l+0x2a4>
 800c702:	9419      	str	r4, [sp, #100]	@ 0x64
 800c704:	f04f 0800 	mov.w	r8, #0
 800c708:	e0a5      	b.n	800c856 <_strtod_l+0x2ee>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e7c8      	b.n	800c6a0 <_strtod_l+0x138>
 800c70e:	f1b9 0f08 	cmp.w	r9, #8
 800c712:	bfd8      	it	le
 800c714:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c716:	f100 0001 	add.w	r0, r0, #1
 800c71a:	bfda      	itte	le
 800c71c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c720:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c722:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c726:	f109 0901 	add.w	r9, r9, #1
 800c72a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c72c:	e7bf      	b.n	800c6ae <_strtod_l+0x146>
 800c72e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	9219      	str	r2, [sp, #100]	@ 0x64
 800c734:	785a      	ldrb	r2, [r3, #1]
 800c736:	f1b9 0f00 	cmp.w	r9, #0
 800c73a:	d03b      	beq.n	800c7b4 <_strtod_l+0x24c>
 800c73c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c73e:	464d      	mov	r5, r9
 800c740:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c744:	2b09      	cmp	r3, #9
 800c746:	d912      	bls.n	800c76e <_strtod_l+0x206>
 800c748:	2301      	movs	r3, #1
 800c74a:	e7c2      	b.n	800c6d2 <_strtod_l+0x16a>
 800c74c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	9219      	str	r2, [sp, #100]	@ 0x64
 800c752:	785a      	ldrb	r2, [r3, #1]
 800c754:	3001      	adds	r0, #1
 800c756:	2a30      	cmp	r2, #48	@ 0x30
 800c758:	d0f8      	beq.n	800c74c <_strtod_l+0x1e4>
 800c75a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c75e:	2b08      	cmp	r3, #8
 800c760:	f200 84d2 	bhi.w	800d108 <_strtod_l+0xba0>
 800c764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c766:	900a      	str	r0, [sp, #40]	@ 0x28
 800c768:	2000      	movs	r0, #0
 800c76a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c76c:	4605      	mov	r5, r0
 800c76e:	3a30      	subs	r2, #48	@ 0x30
 800c770:	f100 0301 	add.w	r3, r0, #1
 800c774:	d018      	beq.n	800c7a8 <_strtod_l+0x240>
 800c776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c778:	4419      	add	r1, r3
 800c77a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c77c:	462e      	mov	r6, r5
 800c77e:	f04f 0e0a 	mov.w	lr, #10
 800c782:	1c71      	adds	r1, r6, #1
 800c784:	eba1 0c05 	sub.w	ip, r1, r5
 800c788:	4563      	cmp	r3, ip
 800c78a:	dc15      	bgt.n	800c7b8 <_strtod_l+0x250>
 800c78c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c790:	182b      	adds	r3, r5, r0
 800c792:	2b08      	cmp	r3, #8
 800c794:	f105 0501 	add.w	r5, r5, #1
 800c798:	4405      	add	r5, r0
 800c79a:	dc1a      	bgt.n	800c7d2 <_strtod_l+0x26a>
 800c79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c79e:	230a      	movs	r3, #10
 800c7a0:	fb03 2301 	mla	r3, r3, r1, r2
 800c7a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7aa:	1c51      	adds	r1, r2, #1
 800c7ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7ae:	7852      	ldrb	r2, [r2, #1]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	e7c5      	b.n	800c740 <_strtod_l+0x1d8>
 800c7b4:	4648      	mov	r0, r9
 800c7b6:	e7ce      	b.n	800c756 <_strtod_l+0x1ee>
 800c7b8:	2e08      	cmp	r6, #8
 800c7ba:	dc05      	bgt.n	800c7c8 <_strtod_l+0x260>
 800c7bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7be:	fb0e f606 	mul.w	r6, lr, r6
 800c7c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c7c4:	460e      	mov	r6, r1
 800c7c6:	e7dc      	b.n	800c782 <_strtod_l+0x21a>
 800c7c8:	2910      	cmp	r1, #16
 800c7ca:	bfd8      	it	le
 800c7cc:	fb0e f707 	mulle.w	r7, lr, r7
 800c7d0:	e7f8      	b.n	800c7c4 <_strtod_l+0x25c>
 800c7d2:	2b0f      	cmp	r3, #15
 800c7d4:	bfdc      	itt	le
 800c7d6:	230a      	movle	r3, #10
 800c7d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c7dc:	e7e3      	b.n	800c7a6 <_strtod_l+0x23e>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e77a      	b.n	800c6dc <_strtod_l+0x174>
 800c7e6:	f04f 0c00 	mov.w	ip, #0
 800c7ea:	1ca2      	adds	r2, r4, #2
 800c7ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7ee:	78a2      	ldrb	r2, [r4, #2]
 800c7f0:	e782      	b.n	800c6f8 <_strtod_l+0x190>
 800c7f2:	f04f 0c01 	mov.w	ip, #1
 800c7f6:	e7f8      	b.n	800c7ea <_strtod_l+0x282>
 800c7f8:	0800f56c 	.word	0x0800f56c
 800c7fc:	0800f3a3 	.word	0x0800f3a3
 800c800:	7ff00000 	.word	0x7ff00000
 800c804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c806:	1c51      	adds	r1, r2, #1
 800c808:	9119      	str	r1, [sp, #100]	@ 0x64
 800c80a:	7852      	ldrb	r2, [r2, #1]
 800c80c:	2a30      	cmp	r2, #48	@ 0x30
 800c80e:	d0f9      	beq.n	800c804 <_strtod_l+0x29c>
 800c810:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c814:	2908      	cmp	r1, #8
 800c816:	f63f af75 	bhi.w	800c704 <_strtod_l+0x19c>
 800c81a:	3a30      	subs	r2, #48	@ 0x30
 800c81c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c81e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c820:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c822:	f04f 080a 	mov.w	r8, #10
 800c826:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c828:	1c56      	adds	r6, r2, #1
 800c82a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c82c:	7852      	ldrb	r2, [r2, #1]
 800c82e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c832:	f1be 0f09 	cmp.w	lr, #9
 800c836:	d939      	bls.n	800c8ac <_strtod_l+0x344>
 800c838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c83a:	1a76      	subs	r6, r6, r1
 800c83c:	2e08      	cmp	r6, #8
 800c83e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c842:	dc03      	bgt.n	800c84c <_strtod_l+0x2e4>
 800c844:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c846:	4588      	cmp	r8, r1
 800c848:	bfa8      	it	ge
 800c84a:	4688      	movge	r8, r1
 800c84c:	f1bc 0f00 	cmp.w	ip, #0
 800c850:	d001      	beq.n	800c856 <_strtod_l+0x2ee>
 800c852:	f1c8 0800 	rsb	r8, r8, #0
 800c856:	2d00      	cmp	r5, #0
 800c858:	d14e      	bne.n	800c8f8 <_strtod_l+0x390>
 800c85a:	9908      	ldr	r1, [sp, #32]
 800c85c:	4308      	orrs	r0, r1
 800c85e:	f47f aebc 	bne.w	800c5da <_strtod_l+0x72>
 800c862:	2b00      	cmp	r3, #0
 800c864:	f47f aed4 	bne.w	800c610 <_strtod_l+0xa8>
 800c868:	2a69      	cmp	r2, #105	@ 0x69
 800c86a:	d028      	beq.n	800c8be <_strtod_l+0x356>
 800c86c:	dc25      	bgt.n	800c8ba <_strtod_l+0x352>
 800c86e:	2a49      	cmp	r2, #73	@ 0x49
 800c870:	d025      	beq.n	800c8be <_strtod_l+0x356>
 800c872:	2a4e      	cmp	r2, #78	@ 0x4e
 800c874:	f47f aecc 	bne.w	800c610 <_strtod_l+0xa8>
 800c878:	499a      	ldr	r1, [pc, #616]	@ (800cae4 <_strtod_l+0x57c>)
 800c87a:	a819      	add	r0, sp, #100	@ 0x64
 800c87c:	f001 fbc4 	bl	800e008 <__match>
 800c880:	2800      	cmp	r0, #0
 800c882:	f43f aec5 	beq.w	800c610 <_strtod_l+0xa8>
 800c886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b28      	cmp	r3, #40	@ 0x28
 800c88c:	d12e      	bne.n	800c8ec <_strtod_l+0x384>
 800c88e:	4996      	ldr	r1, [pc, #600]	@ (800cae8 <_strtod_l+0x580>)
 800c890:	aa1c      	add	r2, sp, #112	@ 0x70
 800c892:	a819      	add	r0, sp, #100	@ 0x64
 800c894:	f001 fbcc 	bl	800e030 <__hexnan>
 800c898:	2805      	cmp	r0, #5
 800c89a:	d127      	bne.n	800c8ec <_strtod_l+0x384>
 800c89c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c89e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c8a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c8a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c8aa:	e696      	b.n	800c5da <_strtod_l+0x72>
 800c8ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8ae:	fb08 2101 	mla	r1, r8, r1, r2
 800c8b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c8b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8b8:	e7b5      	b.n	800c826 <_strtod_l+0x2be>
 800c8ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800c8bc:	e7da      	b.n	800c874 <_strtod_l+0x30c>
 800c8be:	498b      	ldr	r1, [pc, #556]	@ (800caec <_strtod_l+0x584>)
 800c8c0:	a819      	add	r0, sp, #100	@ 0x64
 800c8c2:	f001 fba1 	bl	800e008 <__match>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f aea2 	beq.w	800c610 <_strtod_l+0xa8>
 800c8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8ce:	4988      	ldr	r1, [pc, #544]	@ (800caf0 <_strtod_l+0x588>)
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	a819      	add	r0, sp, #100	@ 0x64
 800c8d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c8d6:	f001 fb97 	bl	800e008 <__match>
 800c8da:	b910      	cbnz	r0, 800c8e2 <_strtod_l+0x37a>
 800c8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8de:	3301      	adds	r3, #1
 800c8e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c8e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cb00 <_strtod_l+0x598>
 800c8e6:	f04f 0a00 	mov.w	sl, #0
 800c8ea:	e676      	b.n	800c5da <_strtod_l+0x72>
 800c8ec:	4881      	ldr	r0, [pc, #516]	@ (800caf4 <_strtod_l+0x58c>)
 800c8ee:	f001 f8c7 	bl	800da80 <nan>
 800c8f2:	ec5b ab10 	vmov	sl, fp, d0
 800c8f6:	e670      	b.n	800c5da <_strtod_l+0x72>
 800c8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c8fc:	eba8 0303 	sub.w	r3, r8, r3
 800c900:	f1b9 0f00 	cmp.w	r9, #0
 800c904:	bf08      	it	eq
 800c906:	46a9      	moveq	r9, r5
 800c908:	2d10      	cmp	r5, #16
 800c90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c90c:	462c      	mov	r4, r5
 800c90e:	bfa8      	it	ge
 800c910:	2410      	movge	r4, #16
 800c912:	f7f3 fdf7 	bl	8000504 <__aeabi_ui2d>
 800c916:	2d09      	cmp	r5, #9
 800c918:	4682      	mov	sl, r0
 800c91a:	468b      	mov	fp, r1
 800c91c:	dc13      	bgt.n	800c946 <_strtod_l+0x3de>
 800c91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c920:	2b00      	cmp	r3, #0
 800c922:	f43f ae5a 	beq.w	800c5da <_strtod_l+0x72>
 800c926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c928:	dd78      	ble.n	800ca1c <_strtod_l+0x4b4>
 800c92a:	2b16      	cmp	r3, #22
 800c92c:	dc5f      	bgt.n	800c9ee <_strtod_l+0x486>
 800c92e:	4972      	ldr	r1, [pc, #456]	@ (800caf8 <_strtod_l+0x590>)
 800c930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c938:	4652      	mov	r2, sl
 800c93a:	465b      	mov	r3, fp
 800c93c:	f7f3 fe5c 	bl	80005f8 <__aeabi_dmul>
 800c940:	4682      	mov	sl, r0
 800c942:	468b      	mov	fp, r1
 800c944:	e649      	b.n	800c5da <_strtod_l+0x72>
 800c946:	4b6c      	ldr	r3, [pc, #432]	@ (800caf8 <_strtod_l+0x590>)
 800c948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c94c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c950:	f7f3 fe52 	bl	80005f8 <__aeabi_dmul>
 800c954:	4682      	mov	sl, r0
 800c956:	4638      	mov	r0, r7
 800c958:	468b      	mov	fp, r1
 800c95a:	f7f3 fdd3 	bl	8000504 <__aeabi_ui2d>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4650      	mov	r0, sl
 800c964:	4659      	mov	r1, fp
 800c966:	f7f3 fc91 	bl	800028c <__adddf3>
 800c96a:	2d0f      	cmp	r5, #15
 800c96c:	4682      	mov	sl, r0
 800c96e:	468b      	mov	fp, r1
 800c970:	ddd5      	ble.n	800c91e <_strtod_l+0x3b6>
 800c972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c974:	1b2c      	subs	r4, r5, r4
 800c976:	441c      	add	r4, r3
 800c978:	2c00      	cmp	r4, #0
 800c97a:	f340 8093 	ble.w	800caa4 <_strtod_l+0x53c>
 800c97e:	f014 030f 	ands.w	r3, r4, #15
 800c982:	d00a      	beq.n	800c99a <_strtod_l+0x432>
 800c984:	495c      	ldr	r1, [pc, #368]	@ (800caf8 <_strtod_l+0x590>)
 800c986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c98a:	4652      	mov	r2, sl
 800c98c:	465b      	mov	r3, fp
 800c98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c992:	f7f3 fe31 	bl	80005f8 <__aeabi_dmul>
 800c996:	4682      	mov	sl, r0
 800c998:	468b      	mov	fp, r1
 800c99a:	f034 040f 	bics.w	r4, r4, #15
 800c99e:	d073      	beq.n	800ca88 <_strtod_l+0x520>
 800c9a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c9a4:	dd49      	ble.n	800ca3a <_strtod_l+0x4d2>
 800c9a6:	2400      	movs	r4, #0
 800c9a8:	46a0      	mov	r8, r4
 800c9aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9ac:	46a1      	mov	r9, r4
 800c9ae:	9a05      	ldr	r2, [sp, #20]
 800c9b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cb00 <_strtod_l+0x598>
 800c9b4:	2322      	movs	r3, #34	@ 0x22
 800c9b6:	6013      	str	r3, [r2, #0]
 800c9b8:	f04f 0a00 	mov.w	sl, #0
 800c9bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f43f ae0b 	beq.w	800c5da <_strtod_l+0x72>
 800c9c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9c6:	9805      	ldr	r0, [sp, #20]
 800c9c8:	f7ff f946 	bl	800bc58 <_Bfree>
 800c9cc:	9805      	ldr	r0, [sp, #20]
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	f7ff f942 	bl	800bc58 <_Bfree>
 800c9d4:	9805      	ldr	r0, [sp, #20]
 800c9d6:	4641      	mov	r1, r8
 800c9d8:	f7ff f93e 	bl	800bc58 <_Bfree>
 800c9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9de:	9805      	ldr	r0, [sp, #20]
 800c9e0:	f7ff f93a 	bl	800bc58 <_Bfree>
 800c9e4:	9805      	ldr	r0, [sp, #20]
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	f7ff f936 	bl	800bc58 <_Bfree>
 800c9ec:	e5f5      	b.n	800c5da <_strtod_l+0x72>
 800c9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	dbbc      	blt.n	800c972 <_strtod_l+0x40a>
 800c9f8:	4c3f      	ldr	r4, [pc, #252]	@ (800caf8 <_strtod_l+0x590>)
 800c9fa:	f1c5 050f 	rsb	r5, r5, #15
 800c9fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca02:	4652      	mov	r2, sl
 800ca04:	465b      	mov	r3, fp
 800ca06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca0a:	f7f3 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	1b5d      	subs	r5, r3, r5
 800ca12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca1a:	e78f      	b.n	800c93c <_strtod_l+0x3d4>
 800ca1c:	3316      	adds	r3, #22
 800ca1e:	dba8      	blt.n	800c972 <_strtod_l+0x40a>
 800ca20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca22:	eba3 0808 	sub.w	r8, r3, r8
 800ca26:	4b34      	ldr	r3, [pc, #208]	@ (800caf8 <_strtod_l+0x590>)
 800ca28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ca2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ca30:	4650      	mov	r0, sl
 800ca32:	4659      	mov	r1, fp
 800ca34:	f7f3 ff0a 	bl	800084c <__aeabi_ddiv>
 800ca38:	e782      	b.n	800c940 <_strtod_l+0x3d8>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	4f2f      	ldr	r7, [pc, #188]	@ (800cafc <_strtod_l+0x594>)
 800ca3e:	1124      	asrs	r4, r4, #4
 800ca40:	4650      	mov	r0, sl
 800ca42:	4659      	mov	r1, fp
 800ca44:	461e      	mov	r6, r3
 800ca46:	2c01      	cmp	r4, #1
 800ca48:	dc21      	bgt.n	800ca8e <_strtod_l+0x526>
 800ca4a:	b10b      	cbz	r3, 800ca50 <_strtod_l+0x4e8>
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	468b      	mov	fp, r1
 800ca50:	492a      	ldr	r1, [pc, #168]	@ (800cafc <_strtod_l+0x594>)
 800ca52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ca56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ca5a:	4652      	mov	r2, sl
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca62:	f7f3 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ca66:	4b26      	ldr	r3, [pc, #152]	@ (800cb00 <_strtod_l+0x598>)
 800ca68:	460a      	mov	r2, r1
 800ca6a:	400b      	ands	r3, r1
 800ca6c:	4925      	ldr	r1, [pc, #148]	@ (800cb04 <_strtod_l+0x59c>)
 800ca6e:	428b      	cmp	r3, r1
 800ca70:	4682      	mov	sl, r0
 800ca72:	d898      	bhi.n	800c9a6 <_strtod_l+0x43e>
 800ca74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ca78:	428b      	cmp	r3, r1
 800ca7a:	bf86      	itte	hi
 800ca7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cb08 <_strtod_l+0x5a0>
 800ca80:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ca88:	2300      	movs	r3, #0
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	e076      	b.n	800cb7c <_strtod_l+0x614>
 800ca8e:	07e2      	lsls	r2, r4, #31
 800ca90:	d504      	bpl.n	800ca9c <_strtod_l+0x534>
 800ca92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	3601      	adds	r6, #1
 800ca9e:	1064      	asrs	r4, r4, #1
 800caa0:	3708      	adds	r7, #8
 800caa2:	e7d0      	b.n	800ca46 <_strtod_l+0x4de>
 800caa4:	d0f0      	beq.n	800ca88 <_strtod_l+0x520>
 800caa6:	4264      	negs	r4, r4
 800caa8:	f014 020f 	ands.w	r2, r4, #15
 800caac:	d00a      	beq.n	800cac4 <_strtod_l+0x55c>
 800caae:	4b12      	ldr	r3, [pc, #72]	@ (800caf8 <_strtod_l+0x590>)
 800cab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cab4:	4650      	mov	r0, sl
 800cab6:	4659      	mov	r1, fp
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 fec6 	bl	800084c <__aeabi_ddiv>
 800cac0:	4682      	mov	sl, r0
 800cac2:	468b      	mov	fp, r1
 800cac4:	1124      	asrs	r4, r4, #4
 800cac6:	d0df      	beq.n	800ca88 <_strtod_l+0x520>
 800cac8:	2c1f      	cmp	r4, #31
 800caca:	dd1f      	ble.n	800cb0c <_strtod_l+0x5a4>
 800cacc:	2400      	movs	r4, #0
 800cace:	46a0      	mov	r8, r4
 800cad0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cad2:	46a1      	mov	r9, r4
 800cad4:	9a05      	ldr	r2, [sp, #20]
 800cad6:	2322      	movs	r3, #34	@ 0x22
 800cad8:	f04f 0a00 	mov.w	sl, #0
 800cadc:	f04f 0b00 	mov.w	fp, #0
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e76b      	b.n	800c9bc <_strtod_l+0x454>
 800cae4:	0800f291 	.word	0x0800f291
 800cae8:	0800f558 	.word	0x0800f558
 800caec:	0800f289 	.word	0x0800f289
 800caf0:	0800f2c0 	.word	0x0800f2c0
 800caf4:	0800f3f9 	.word	0x0800f3f9
 800caf8:	0800f490 	.word	0x0800f490
 800cafc:	0800f468 	.word	0x0800f468
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	7ca00000 	.word	0x7ca00000
 800cb08:	7fefffff 	.word	0x7fefffff
 800cb0c:	f014 0310 	ands.w	r3, r4, #16
 800cb10:	bf18      	it	ne
 800cb12:	236a      	movne	r3, #106	@ 0x6a
 800cb14:	4ea9      	ldr	r6, [pc, #676]	@ (800cdbc <_strtod_l+0x854>)
 800cb16:	9308      	str	r3, [sp, #32]
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4659      	mov	r1, fp
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	07e7      	lsls	r7, r4, #31
 800cb20:	d504      	bpl.n	800cb2c <_strtod_l+0x5c4>
 800cb22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb26:	f7f3 fd67 	bl	80005f8 <__aeabi_dmul>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	1064      	asrs	r4, r4, #1
 800cb2e:	f106 0608 	add.w	r6, r6, #8
 800cb32:	d1f4      	bne.n	800cb1e <_strtod_l+0x5b6>
 800cb34:	b10b      	cbz	r3, 800cb3a <_strtod_l+0x5d2>
 800cb36:	4682      	mov	sl, r0
 800cb38:	468b      	mov	fp, r1
 800cb3a:	9b08      	ldr	r3, [sp, #32]
 800cb3c:	b1b3      	cbz	r3, 800cb6c <_strtod_l+0x604>
 800cb3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cb42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	4659      	mov	r1, fp
 800cb4a:	dd0f      	ble.n	800cb6c <_strtod_l+0x604>
 800cb4c:	2b1f      	cmp	r3, #31
 800cb4e:	dd56      	ble.n	800cbfe <_strtod_l+0x696>
 800cb50:	2b34      	cmp	r3, #52	@ 0x34
 800cb52:	bfde      	ittt	le
 800cb54:	f04f 33ff 	movle.w	r3, #4294967295
 800cb58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cb5c:	4093      	lslle	r3, r2
 800cb5e:	f04f 0a00 	mov.w	sl, #0
 800cb62:	bfcc      	ite	gt
 800cb64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cb68:	ea03 0b01 	andle.w	fp, r3, r1
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2300      	movs	r3, #0
 800cb70:	4650      	mov	r0, sl
 800cb72:	4659      	mov	r1, fp
 800cb74:	f7f3 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d1a7      	bne.n	800cacc <_strtod_l+0x564>
 800cb7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cb82:	9805      	ldr	r0, [sp, #20]
 800cb84:	462b      	mov	r3, r5
 800cb86:	464a      	mov	r2, r9
 800cb88:	f7ff f8ce 	bl	800bd28 <__s2b>
 800cb8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f43f af09 	beq.w	800c9a6 <_strtod_l+0x43e>
 800cb94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	eba3 0308 	sub.w	r3, r3, r8
 800cb9e:	bfa8      	it	ge
 800cba0:	2300      	movge	r3, #0
 800cba2:	9312      	str	r3, [sp, #72]	@ 0x48
 800cba4:	2400      	movs	r4, #0
 800cba6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cbaa:	9316      	str	r3, [sp, #88]	@ 0x58
 800cbac:	46a0      	mov	r8, r4
 800cbae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbb0:	9805      	ldr	r0, [sp, #20]
 800cbb2:	6859      	ldr	r1, [r3, #4]
 800cbb4:	f7ff f810 	bl	800bbd8 <_Balloc>
 800cbb8:	4681      	mov	r9, r0
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	f43f aef7 	beq.w	800c9ae <_strtod_l+0x446>
 800cbc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbc2:	691a      	ldr	r2, [r3, #16]
 800cbc4:	3202      	adds	r2, #2
 800cbc6:	f103 010c 	add.w	r1, r3, #12
 800cbca:	0092      	lsls	r2, r2, #2
 800cbcc:	300c      	adds	r0, #12
 800cbce:	f000 ff47 	bl	800da60 <memcpy>
 800cbd2:	ec4b ab10 	vmov	d0, sl, fp
 800cbd6:	9805      	ldr	r0, [sp, #20]
 800cbd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800cbda:	a91b      	add	r1, sp, #108	@ 0x6c
 800cbdc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cbe0:	f7ff fbd6 	bl	800c390 <__d2b>
 800cbe4:	901a      	str	r0, [sp, #104]	@ 0x68
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	f43f aee1 	beq.w	800c9ae <_strtod_l+0x446>
 800cbec:	9805      	ldr	r0, [sp, #20]
 800cbee:	2101      	movs	r1, #1
 800cbf0:	f7ff f930 	bl	800be54 <__i2b>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	b948      	cbnz	r0, 800cc0c <_strtod_l+0x6a4>
 800cbf8:	f04f 0800 	mov.w	r8, #0
 800cbfc:	e6d7      	b.n	800c9ae <_strtod_l+0x446>
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cc02:	fa02 f303 	lsl.w	r3, r2, r3
 800cc06:	ea03 0a0a 	and.w	sl, r3, sl
 800cc0a:	e7af      	b.n	800cb6c <_strtod_l+0x604>
 800cc0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cc0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cc10:	2d00      	cmp	r5, #0
 800cc12:	bfab      	itete	ge
 800cc14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cc16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cc18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cc1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cc1c:	bfac      	ite	ge
 800cc1e:	18ef      	addge	r7, r5, r3
 800cc20:	1b5e      	sublt	r6, r3, r5
 800cc22:	9b08      	ldr	r3, [sp, #32]
 800cc24:	1aed      	subs	r5, r5, r3
 800cc26:	4415      	add	r5, r2
 800cc28:	4b65      	ldr	r3, [pc, #404]	@ (800cdc0 <_strtod_l+0x858>)
 800cc2a:	3d01      	subs	r5, #1
 800cc2c:	429d      	cmp	r5, r3
 800cc2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cc32:	da50      	bge.n	800ccd6 <_strtod_l+0x76e>
 800cc34:	1b5b      	subs	r3, r3, r5
 800cc36:	2b1f      	cmp	r3, #31
 800cc38:	eba2 0203 	sub.w	r2, r2, r3
 800cc3c:	f04f 0101 	mov.w	r1, #1
 800cc40:	dc3d      	bgt.n	800ccbe <_strtod_l+0x756>
 800cc42:	fa01 f303 	lsl.w	r3, r1, r3
 800cc46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc4c:	18bd      	adds	r5, r7, r2
 800cc4e:	9b08      	ldr	r3, [sp, #32]
 800cc50:	42af      	cmp	r7, r5
 800cc52:	4416      	add	r6, r2
 800cc54:	441e      	add	r6, r3
 800cc56:	463b      	mov	r3, r7
 800cc58:	bfa8      	it	ge
 800cc5a:	462b      	movge	r3, r5
 800cc5c:	42b3      	cmp	r3, r6
 800cc5e:	bfa8      	it	ge
 800cc60:	4633      	movge	r3, r6
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	bfc2      	ittt	gt
 800cc66:	1aed      	subgt	r5, r5, r3
 800cc68:	1af6      	subgt	r6, r6, r3
 800cc6a:	1aff      	subgt	r7, r7, r3
 800cc6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	dd16      	ble.n	800cca0 <_strtod_l+0x738>
 800cc72:	4641      	mov	r1, r8
 800cc74:	9805      	ldr	r0, [sp, #20]
 800cc76:	461a      	mov	r2, r3
 800cc78:	f7ff f9a4 	bl	800bfc4 <__pow5mult>
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d0ba      	beq.n	800cbf8 <_strtod_l+0x690>
 800cc82:	4601      	mov	r1, r0
 800cc84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cc86:	9805      	ldr	r0, [sp, #20]
 800cc88:	f7ff f8fa 	bl	800be80 <__multiply>
 800cc8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f43f ae8d 	beq.w	800c9ae <_strtod_l+0x446>
 800cc94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc96:	9805      	ldr	r0, [sp, #20]
 800cc98:	f7fe ffde 	bl	800bc58 <_Bfree>
 800cc9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	dc1d      	bgt.n	800cce0 <_strtod_l+0x778>
 800cca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd23      	ble.n	800ccf2 <_strtod_l+0x78a>
 800ccaa:	4649      	mov	r1, r9
 800ccac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ccae:	9805      	ldr	r0, [sp, #20]
 800ccb0:	f7ff f988 	bl	800bfc4 <__pow5mult>
 800ccb4:	4681      	mov	r9, r0
 800ccb6:	b9e0      	cbnz	r0, 800ccf2 <_strtod_l+0x78a>
 800ccb8:	f04f 0900 	mov.w	r9, #0
 800ccbc:	e677      	b.n	800c9ae <_strtod_l+0x446>
 800ccbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ccc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ccc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ccca:	35e2      	adds	r5, #226	@ 0xe2
 800cccc:	fa01 f305 	lsl.w	r3, r1, r5
 800ccd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ccd4:	e7ba      	b.n	800cc4c <_strtod_l+0x6e4>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccda:	2301      	movs	r3, #1
 800ccdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccde:	e7b5      	b.n	800cc4c <_strtod_l+0x6e4>
 800cce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cce2:	9805      	ldr	r0, [sp, #20]
 800cce4:	462a      	mov	r2, r5
 800cce6:	f7ff f9c7 	bl	800c078 <__lshift>
 800ccea:	901a      	str	r0, [sp, #104]	@ 0x68
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d1d9      	bne.n	800cca4 <_strtod_l+0x73c>
 800ccf0:	e65d      	b.n	800c9ae <_strtod_l+0x446>
 800ccf2:	2e00      	cmp	r6, #0
 800ccf4:	dd07      	ble.n	800cd06 <_strtod_l+0x79e>
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	9805      	ldr	r0, [sp, #20]
 800ccfa:	4632      	mov	r2, r6
 800ccfc:	f7ff f9bc 	bl	800c078 <__lshift>
 800cd00:	4681      	mov	r9, r0
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0d8      	beq.n	800ccb8 <_strtod_l+0x750>
 800cd06:	2f00      	cmp	r7, #0
 800cd08:	dd08      	ble.n	800cd1c <_strtod_l+0x7b4>
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	9805      	ldr	r0, [sp, #20]
 800cd0e:	463a      	mov	r2, r7
 800cd10:	f7ff f9b2 	bl	800c078 <__lshift>
 800cd14:	4680      	mov	r8, r0
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f43f ae49 	beq.w	800c9ae <_strtod_l+0x446>
 800cd1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd1e:	9805      	ldr	r0, [sp, #20]
 800cd20:	464a      	mov	r2, r9
 800cd22:	f7ff fa31 	bl	800c188 <__mdiff>
 800cd26:	4604      	mov	r4, r0
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f43f ae40 	beq.w	800c9ae <_strtod_l+0x446>
 800cd2e:	68c3      	ldr	r3, [r0, #12]
 800cd30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd32:	2300      	movs	r3, #0
 800cd34:	60c3      	str	r3, [r0, #12]
 800cd36:	4641      	mov	r1, r8
 800cd38:	f7ff fa0a 	bl	800c150 <__mcmp>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	da45      	bge.n	800cdcc <_strtod_l+0x864>
 800cd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd42:	ea53 030a 	orrs.w	r3, r3, sl
 800cd46:	d16b      	bne.n	800ce20 <_strtod_l+0x8b8>
 800cd48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d167      	bne.n	800ce20 <_strtod_l+0x8b8>
 800cd50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd54:	0d1b      	lsrs	r3, r3, #20
 800cd56:	051b      	lsls	r3, r3, #20
 800cd58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd5c:	d960      	bls.n	800ce20 <_strtod_l+0x8b8>
 800cd5e:	6963      	ldr	r3, [r4, #20]
 800cd60:	b913      	cbnz	r3, 800cd68 <_strtod_l+0x800>
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	dd5b      	ble.n	800ce20 <_strtod_l+0x8b8>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	9805      	ldr	r0, [sp, #20]
 800cd6e:	f7ff f983 	bl	800c078 <__lshift>
 800cd72:	4641      	mov	r1, r8
 800cd74:	4604      	mov	r4, r0
 800cd76:	f7ff f9eb 	bl	800c150 <__mcmp>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	dd50      	ble.n	800ce20 <_strtod_l+0x8b8>
 800cd7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd82:	9a08      	ldr	r2, [sp, #32]
 800cd84:	0d1b      	lsrs	r3, r3, #20
 800cd86:	051b      	lsls	r3, r3, #20
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	d06a      	beq.n	800ce62 <_strtod_l+0x8fa>
 800cd8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd90:	d867      	bhi.n	800ce62 <_strtod_l+0x8fa>
 800cd92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cd96:	f67f ae9d 	bls.w	800cad4 <_strtod_l+0x56c>
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc4 <_strtod_l+0x85c>)
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	4659      	mov	r1, fp
 800cda0:	2200      	movs	r2, #0
 800cda2:	f7f3 fc29 	bl	80005f8 <__aeabi_dmul>
 800cda6:	4b08      	ldr	r3, [pc, #32]	@ (800cdc8 <_strtod_l+0x860>)
 800cda8:	400b      	ands	r3, r1
 800cdaa:	4682      	mov	sl, r0
 800cdac:	468b      	mov	fp, r1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f47f ae08 	bne.w	800c9c4 <_strtod_l+0x45c>
 800cdb4:	9a05      	ldr	r2, [sp, #20]
 800cdb6:	2322      	movs	r3, #34	@ 0x22
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	e603      	b.n	800c9c4 <_strtod_l+0x45c>
 800cdbc:	0800f580 	.word	0x0800f580
 800cdc0:	fffffc02 	.word	0xfffffc02
 800cdc4:	39500000 	.word	0x39500000
 800cdc8:	7ff00000 	.word	0x7ff00000
 800cdcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cdd0:	d165      	bne.n	800ce9e <_strtod_l+0x936>
 800cdd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cdd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdd8:	b35a      	cbz	r2, 800ce32 <_strtod_l+0x8ca>
 800cdda:	4a9f      	ldr	r2, [pc, #636]	@ (800d058 <_strtod_l+0xaf0>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d12b      	bne.n	800ce38 <_strtod_l+0x8d0>
 800cde0:	9b08      	ldr	r3, [sp, #32]
 800cde2:	4651      	mov	r1, sl
 800cde4:	b303      	cbz	r3, 800ce28 <_strtod_l+0x8c0>
 800cde6:	4b9d      	ldr	r3, [pc, #628]	@ (800d05c <_strtod_l+0xaf4>)
 800cde8:	465a      	mov	r2, fp
 800cdea:	4013      	ands	r3, r2
 800cdec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf4:	d81b      	bhi.n	800ce2e <_strtod_l+0x8c6>
 800cdf6:	0d1b      	lsrs	r3, r3, #20
 800cdf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d119      	bne.n	800ce38 <_strtod_l+0x8d0>
 800ce04:	4b96      	ldr	r3, [pc, #600]	@ (800d060 <_strtod_l+0xaf8>)
 800ce06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d102      	bne.n	800ce12 <_strtod_l+0x8aa>
 800ce0c:	3101      	adds	r1, #1
 800ce0e:	f43f adce 	beq.w	800c9ae <_strtod_l+0x446>
 800ce12:	4b92      	ldr	r3, [pc, #584]	@ (800d05c <_strtod_l+0xaf4>)
 800ce14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce16:	401a      	ands	r2, r3
 800ce18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ce1c:	f04f 0a00 	mov.w	sl, #0
 800ce20:	9b08      	ldr	r3, [sp, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1b9      	bne.n	800cd9a <_strtod_l+0x832>
 800ce26:	e5cd      	b.n	800c9c4 <_strtod_l+0x45c>
 800ce28:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2c:	e7e8      	b.n	800ce00 <_strtod_l+0x898>
 800ce2e:	4613      	mov	r3, r2
 800ce30:	e7e6      	b.n	800ce00 <_strtod_l+0x898>
 800ce32:	ea53 030a 	orrs.w	r3, r3, sl
 800ce36:	d0a2      	beq.n	800cd7e <_strtod_l+0x816>
 800ce38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce3a:	b1db      	cbz	r3, 800ce74 <_strtod_l+0x90c>
 800ce3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce3e:	4213      	tst	r3, r2
 800ce40:	d0ee      	beq.n	800ce20 <_strtod_l+0x8b8>
 800ce42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce44:	9a08      	ldr	r2, [sp, #32]
 800ce46:	4650      	mov	r0, sl
 800ce48:	4659      	mov	r1, fp
 800ce4a:	b1bb      	cbz	r3, 800ce7c <_strtod_l+0x914>
 800ce4c:	f7ff fb6e 	bl	800c52c <sulp>
 800ce50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce54:	ec53 2b10 	vmov	r2, r3, d0
 800ce58:	f7f3 fa18 	bl	800028c <__adddf3>
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	468b      	mov	fp, r1
 800ce60:	e7de      	b.n	800ce20 <_strtod_l+0x8b8>
 800ce62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ce66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ce6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ce6e:	f04f 3aff 	mov.w	sl, #4294967295
 800ce72:	e7d5      	b.n	800ce20 <_strtod_l+0x8b8>
 800ce74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce76:	ea13 0f0a 	tst.w	r3, sl
 800ce7a:	e7e1      	b.n	800ce40 <_strtod_l+0x8d8>
 800ce7c:	f7ff fb56 	bl	800c52c <sulp>
 800ce80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce84:	ec53 2b10 	vmov	r2, r3, d0
 800ce88:	f7f3 f9fe 	bl	8000288 <__aeabi_dsub>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4682      	mov	sl, r0
 800ce92:	468b      	mov	fp, r1
 800ce94:	f7f3 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0c1      	beq.n	800ce20 <_strtod_l+0x8b8>
 800ce9c:	e61a      	b.n	800cad4 <_strtod_l+0x56c>
 800ce9e:	4641      	mov	r1, r8
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7ff facd 	bl	800c440 <__ratio>
 800cea6:	ec57 6b10 	vmov	r6, r7, d0
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fe1c 	bl	8000af0 <__aeabi_dcmple>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d06f      	beq.n	800cf9c <_strtod_l+0xa34>
 800cebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d17a      	bne.n	800cfb8 <_strtod_l+0xa50>
 800cec2:	f1ba 0f00 	cmp.w	sl, #0
 800cec6:	d158      	bne.n	800cf7a <_strtod_l+0xa12>
 800cec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d15a      	bne.n	800cf88 <_strtod_l+0xa20>
 800ced2:	4b64      	ldr	r3, [pc, #400]	@ (800d064 <_strtod_l+0xafc>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	f7f3 fdff 	bl	8000adc <__aeabi_dcmplt>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d159      	bne.n	800cf96 <_strtod_l+0xa2e>
 800cee2:	4630      	mov	r0, r6
 800cee4:	4639      	mov	r1, r7
 800cee6:	4b60      	ldr	r3, [pc, #384]	@ (800d068 <_strtod_l+0xb00>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	f7f3 fb85 	bl	80005f8 <__aeabi_dmul>
 800ceee:	4606      	mov	r6, r0
 800cef0:	460f      	mov	r7, r1
 800cef2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cef6:	9606      	str	r6, [sp, #24]
 800cef8:	9307      	str	r3, [sp, #28]
 800cefa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cefe:	4d57      	ldr	r5, [pc, #348]	@ (800d05c <_strtod_l+0xaf4>)
 800cf00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf06:	401d      	ands	r5, r3
 800cf08:	4b58      	ldr	r3, [pc, #352]	@ (800d06c <_strtod_l+0xb04>)
 800cf0a:	429d      	cmp	r5, r3
 800cf0c:	f040 80b2 	bne.w	800d074 <_strtod_l+0xb0c>
 800cf10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cf16:	ec4b ab10 	vmov	d0, sl, fp
 800cf1a:	f7ff f9c9 	bl	800c2b0 <__ulp>
 800cf1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf22:	ec51 0b10 	vmov	r0, r1, d0
 800cf26:	f7f3 fb67 	bl	80005f8 <__aeabi_dmul>
 800cf2a:	4652      	mov	r2, sl
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	f7f3 f9ad 	bl	800028c <__adddf3>
 800cf32:	460b      	mov	r3, r1
 800cf34:	4949      	ldr	r1, [pc, #292]	@ (800d05c <_strtod_l+0xaf4>)
 800cf36:	4a4e      	ldr	r2, [pc, #312]	@ (800d070 <_strtod_l+0xb08>)
 800cf38:	4019      	ands	r1, r3
 800cf3a:	4291      	cmp	r1, r2
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	d942      	bls.n	800cfc6 <_strtod_l+0xa5e>
 800cf40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf42:	4b47      	ldr	r3, [pc, #284]	@ (800d060 <_strtod_l+0xaf8>)
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d103      	bne.n	800cf50 <_strtod_l+0x9e8>
 800cf48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	f43f ad2f 	beq.w	800c9ae <_strtod_l+0x446>
 800cf50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d060 <_strtod_l+0xaf8>
 800cf54:	f04f 3aff 	mov.w	sl, #4294967295
 800cf58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf5a:	9805      	ldr	r0, [sp, #20]
 800cf5c:	f7fe fe7c 	bl	800bc58 <_Bfree>
 800cf60:	9805      	ldr	r0, [sp, #20]
 800cf62:	4649      	mov	r1, r9
 800cf64:	f7fe fe78 	bl	800bc58 <_Bfree>
 800cf68:	9805      	ldr	r0, [sp, #20]
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	f7fe fe74 	bl	800bc58 <_Bfree>
 800cf70:	9805      	ldr	r0, [sp, #20]
 800cf72:	4621      	mov	r1, r4
 800cf74:	f7fe fe70 	bl	800bc58 <_Bfree>
 800cf78:	e619      	b.n	800cbae <_strtod_l+0x646>
 800cf7a:	f1ba 0f01 	cmp.w	sl, #1
 800cf7e:	d103      	bne.n	800cf88 <_strtod_l+0xa20>
 800cf80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f43f ada6 	beq.w	800cad4 <_strtod_l+0x56c>
 800cf88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d038 <_strtod_l+0xad0>
 800cf8c:	4f35      	ldr	r7, [pc, #212]	@ (800d064 <_strtod_l+0xafc>)
 800cf8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf92:	2600      	movs	r6, #0
 800cf94:	e7b1      	b.n	800cefa <_strtod_l+0x992>
 800cf96:	4f34      	ldr	r7, [pc, #208]	@ (800d068 <_strtod_l+0xb00>)
 800cf98:	2600      	movs	r6, #0
 800cf9a:	e7aa      	b.n	800cef2 <_strtod_l+0x98a>
 800cf9c:	4b32      	ldr	r3, [pc, #200]	@ (800d068 <_strtod_l+0xb00>)
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	4639      	mov	r1, r7
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f7f3 fb28 	bl	80005f8 <__aeabi_dmul>
 800cfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfaa:	4606      	mov	r6, r0
 800cfac:	460f      	mov	r7, r1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d09f      	beq.n	800cef2 <_strtod_l+0x98a>
 800cfb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cfb6:	e7a0      	b.n	800cefa <_strtod_l+0x992>
 800cfb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d040 <_strtod_l+0xad8>
 800cfbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cfc0:	ec57 6b17 	vmov	r6, r7, d7
 800cfc4:	e799      	b.n	800cefa <_strtod_l+0x992>
 800cfc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cfca:	9b08      	ldr	r3, [sp, #32]
 800cfcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1c1      	bne.n	800cf58 <_strtod_l+0x9f0>
 800cfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfd8:	0d1b      	lsrs	r3, r3, #20
 800cfda:	051b      	lsls	r3, r3, #20
 800cfdc:	429d      	cmp	r5, r3
 800cfde:	d1bb      	bne.n	800cf58 <_strtod_l+0x9f0>
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 fe50 	bl	8000c88 <__aeabi_d2lz>
 800cfe8:	f7f3 fad8 	bl	800059c <__aeabi_l2d>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 f948 	bl	8000288 <__aeabi_dsub>
 800cff8:	460b      	mov	r3, r1
 800cffa:	4602      	mov	r2, r0
 800cffc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d000:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d006:	ea46 060a 	orr.w	r6, r6, sl
 800d00a:	431e      	orrs	r6, r3
 800d00c:	d06f      	beq.n	800d0ee <_strtod_l+0xb86>
 800d00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d048 <_strtod_l+0xae0>)
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f7f3 fd62 	bl	8000adc <__aeabi_dcmplt>
 800d018:	2800      	cmp	r0, #0
 800d01a:	f47f acd3 	bne.w	800c9c4 <_strtod_l+0x45c>
 800d01e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d050 <_strtod_l+0xae8>)
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d028:	f7f3 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d093      	beq.n	800cf58 <_strtod_l+0x9f0>
 800d030:	e4c8      	b.n	800c9c4 <_strtod_l+0x45c>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
 800d038:	00000000 	.word	0x00000000
 800d03c:	bff00000 	.word	0xbff00000
 800d040:	00000000 	.word	0x00000000
 800d044:	3ff00000 	.word	0x3ff00000
 800d048:	94a03595 	.word	0x94a03595
 800d04c:	3fdfffff 	.word	0x3fdfffff
 800d050:	35afe535 	.word	0x35afe535
 800d054:	3fe00000 	.word	0x3fe00000
 800d058:	000fffff 	.word	0x000fffff
 800d05c:	7ff00000 	.word	0x7ff00000
 800d060:	7fefffff 	.word	0x7fefffff
 800d064:	3ff00000 	.word	0x3ff00000
 800d068:	3fe00000 	.word	0x3fe00000
 800d06c:	7fe00000 	.word	0x7fe00000
 800d070:	7c9fffff 	.word	0x7c9fffff
 800d074:	9b08      	ldr	r3, [sp, #32]
 800d076:	b323      	cbz	r3, 800d0c2 <_strtod_l+0xb5a>
 800d078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d07c:	d821      	bhi.n	800d0c2 <_strtod_l+0xb5a>
 800d07e:	a328      	add	r3, pc, #160	@ (adr r3, 800d120 <_strtod_l+0xbb8>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	4630      	mov	r0, r6
 800d086:	4639      	mov	r1, r7
 800d088:	f7f3 fd32 	bl	8000af0 <__aeabi_dcmple>
 800d08c:	b1a0      	cbz	r0, 800d0b8 <_strtod_l+0xb50>
 800d08e:	4639      	mov	r1, r7
 800d090:	4630      	mov	r0, r6
 800d092:	f7f3 fd89 	bl	8000ba8 <__aeabi_d2uiz>
 800d096:	2801      	cmp	r0, #1
 800d098:	bf38      	it	cc
 800d09a:	2001      	movcc	r0, #1
 800d09c:	f7f3 fa32 	bl	8000504 <__aeabi_ui2d>
 800d0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	b9fb      	cbnz	r3, 800d0e8 <_strtod_l+0xb80>
 800d0a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800d0ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d0b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d0be:	1b5b      	subs	r3, r3, r5
 800d0c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d0c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d0ca:	f7ff f8f1 	bl	800c2b0 <__ulp>
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	ec53 2b10 	vmov	r2, r3, d0
 800d0d4:	4659      	mov	r1, fp
 800d0d6:	f7f3 fa8f 	bl	80005f8 <__aeabi_dmul>
 800d0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d0de:	f7f3 f8d5 	bl	800028c <__adddf3>
 800d0e2:	4682      	mov	sl, r0
 800d0e4:	468b      	mov	fp, r1
 800d0e6:	e770      	b.n	800cfca <_strtod_l+0xa62>
 800d0e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d0ec:	e7e0      	b.n	800d0b0 <_strtod_l+0xb48>
 800d0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d128 <_strtod_l+0xbc0>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	f7f3 fcf2 	bl	8000adc <__aeabi_dcmplt>
 800d0f8:	e798      	b.n	800d02c <_strtod_l+0xac4>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d0fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	f7ff ba6d 	b.w	800c5e2 <_strtod_l+0x7a>
 800d108:	2a65      	cmp	r2, #101	@ 0x65
 800d10a:	f43f ab68 	beq.w	800c7de <_strtod_l+0x276>
 800d10e:	2a45      	cmp	r2, #69	@ 0x45
 800d110:	f43f ab65 	beq.w	800c7de <_strtod_l+0x276>
 800d114:	2301      	movs	r3, #1
 800d116:	f7ff bba0 	b.w	800c85a <_strtod_l+0x2f2>
 800d11a:	bf00      	nop
 800d11c:	f3af 8000 	nop.w
 800d120:	ffc00000 	.word	0xffc00000
 800d124:	41dfffff 	.word	0x41dfffff
 800d128:	94a03595 	.word	0x94a03595
 800d12c:	3fcfffff 	.word	0x3fcfffff

0800d130 <_strtod_r>:
 800d130:	4b01      	ldr	r3, [pc, #4]	@ (800d138 <_strtod_r+0x8>)
 800d132:	f7ff ba19 	b.w	800c568 <_strtod_l>
 800d136:	bf00      	nop
 800d138:	20000070 	.word	0x20000070

0800d13c <_strtol_l.isra.0>:
 800d13c:	2b24      	cmp	r3, #36	@ 0x24
 800d13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d142:	4686      	mov	lr, r0
 800d144:	4690      	mov	r8, r2
 800d146:	d801      	bhi.n	800d14c <_strtol_l.isra.0+0x10>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d106      	bne.n	800d15a <_strtol_l.isra.0+0x1e>
 800d14c:	f7fd fdb6 	bl	800acbc <__errno>
 800d150:	2316      	movs	r3, #22
 800d152:	6003      	str	r3, [r0, #0]
 800d154:	2000      	movs	r0, #0
 800d156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15a:	4834      	ldr	r0, [pc, #208]	@ (800d22c <_strtol_l.isra.0+0xf0>)
 800d15c:	460d      	mov	r5, r1
 800d15e:	462a      	mov	r2, r5
 800d160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d164:	5d06      	ldrb	r6, [r0, r4]
 800d166:	f016 0608 	ands.w	r6, r6, #8
 800d16a:	d1f8      	bne.n	800d15e <_strtol_l.isra.0+0x22>
 800d16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d16e:	d110      	bne.n	800d192 <_strtol_l.isra.0+0x56>
 800d170:	782c      	ldrb	r4, [r5, #0]
 800d172:	2601      	movs	r6, #1
 800d174:	1c95      	adds	r5, r2, #2
 800d176:	f033 0210 	bics.w	r2, r3, #16
 800d17a:	d115      	bne.n	800d1a8 <_strtol_l.isra.0+0x6c>
 800d17c:	2c30      	cmp	r4, #48	@ 0x30
 800d17e:	d10d      	bne.n	800d19c <_strtol_l.isra.0+0x60>
 800d180:	782a      	ldrb	r2, [r5, #0]
 800d182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d186:	2a58      	cmp	r2, #88	@ 0x58
 800d188:	d108      	bne.n	800d19c <_strtol_l.isra.0+0x60>
 800d18a:	786c      	ldrb	r4, [r5, #1]
 800d18c:	3502      	adds	r5, #2
 800d18e:	2310      	movs	r3, #16
 800d190:	e00a      	b.n	800d1a8 <_strtol_l.isra.0+0x6c>
 800d192:	2c2b      	cmp	r4, #43	@ 0x2b
 800d194:	bf04      	itt	eq
 800d196:	782c      	ldrbeq	r4, [r5, #0]
 800d198:	1c95      	addeq	r5, r2, #2
 800d19a:	e7ec      	b.n	800d176 <_strtol_l.isra.0+0x3a>
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f6      	bne.n	800d18e <_strtol_l.isra.0+0x52>
 800d1a0:	2c30      	cmp	r4, #48	@ 0x30
 800d1a2:	bf14      	ite	ne
 800d1a4:	230a      	movne	r3, #10
 800d1a6:	2308      	moveq	r3, #8
 800d1a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d1ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d1c0:	2f09      	cmp	r7, #9
 800d1c2:	d80f      	bhi.n	800d1e4 <_strtol_l.isra.0+0xa8>
 800d1c4:	463c      	mov	r4, r7
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	dd1b      	ble.n	800d202 <_strtol_l.isra.0+0xc6>
 800d1ca:	1c57      	adds	r7, r2, #1
 800d1cc:	d007      	beq.n	800d1de <_strtol_l.isra.0+0xa2>
 800d1ce:	4581      	cmp	r9, r0
 800d1d0:	d314      	bcc.n	800d1fc <_strtol_l.isra.0+0xc0>
 800d1d2:	d101      	bne.n	800d1d8 <_strtol_l.isra.0+0x9c>
 800d1d4:	45a2      	cmp	sl, r4
 800d1d6:	db11      	blt.n	800d1fc <_strtol_l.isra.0+0xc0>
 800d1d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1e2:	e7eb      	b.n	800d1bc <_strtol_l.isra.0+0x80>
 800d1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d1e8:	2f19      	cmp	r7, #25
 800d1ea:	d801      	bhi.n	800d1f0 <_strtol_l.isra.0+0xb4>
 800d1ec:	3c37      	subs	r4, #55	@ 0x37
 800d1ee:	e7ea      	b.n	800d1c6 <_strtol_l.isra.0+0x8a>
 800d1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d1f4:	2f19      	cmp	r7, #25
 800d1f6:	d804      	bhi.n	800d202 <_strtol_l.isra.0+0xc6>
 800d1f8:	3c57      	subs	r4, #87	@ 0x57
 800d1fa:	e7e4      	b.n	800d1c6 <_strtol_l.isra.0+0x8a>
 800d1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d200:	e7ed      	b.n	800d1de <_strtol_l.isra.0+0xa2>
 800d202:	1c53      	adds	r3, r2, #1
 800d204:	d108      	bne.n	800d218 <_strtol_l.isra.0+0xdc>
 800d206:	2322      	movs	r3, #34	@ 0x22
 800d208:	f8ce 3000 	str.w	r3, [lr]
 800d20c:	4660      	mov	r0, ip
 800d20e:	f1b8 0f00 	cmp.w	r8, #0
 800d212:	d0a0      	beq.n	800d156 <_strtol_l.isra.0+0x1a>
 800d214:	1e69      	subs	r1, r5, #1
 800d216:	e006      	b.n	800d226 <_strtol_l.isra.0+0xea>
 800d218:	b106      	cbz	r6, 800d21c <_strtol_l.isra.0+0xe0>
 800d21a:	4240      	negs	r0, r0
 800d21c:	f1b8 0f00 	cmp.w	r8, #0
 800d220:	d099      	beq.n	800d156 <_strtol_l.isra.0+0x1a>
 800d222:	2a00      	cmp	r2, #0
 800d224:	d1f6      	bne.n	800d214 <_strtol_l.isra.0+0xd8>
 800d226:	f8c8 1000 	str.w	r1, [r8]
 800d22a:	e794      	b.n	800d156 <_strtol_l.isra.0+0x1a>
 800d22c:	0800f5a9 	.word	0x0800f5a9

0800d230 <_strtol_r>:
 800d230:	f7ff bf84 	b.w	800d13c <_strtol_l.isra.0>

0800d234 <__ssputs_r>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	688e      	ldr	r6, [r1, #8]
 800d23a:	461f      	mov	r7, r3
 800d23c:	42be      	cmp	r6, r7
 800d23e:	680b      	ldr	r3, [r1, #0]
 800d240:	4682      	mov	sl, r0
 800d242:	460c      	mov	r4, r1
 800d244:	4690      	mov	r8, r2
 800d246:	d82d      	bhi.n	800d2a4 <__ssputs_r+0x70>
 800d248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d24c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d250:	d026      	beq.n	800d2a0 <__ssputs_r+0x6c>
 800d252:	6965      	ldr	r5, [r4, #20]
 800d254:	6909      	ldr	r1, [r1, #16]
 800d256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d25a:	eba3 0901 	sub.w	r9, r3, r1
 800d25e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d262:	1c7b      	adds	r3, r7, #1
 800d264:	444b      	add	r3, r9
 800d266:	106d      	asrs	r5, r5, #1
 800d268:	429d      	cmp	r5, r3
 800d26a:	bf38      	it	cc
 800d26c:	461d      	movcc	r5, r3
 800d26e:	0553      	lsls	r3, r2, #21
 800d270:	d527      	bpl.n	800d2c2 <__ssputs_r+0x8e>
 800d272:	4629      	mov	r1, r5
 800d274:	f7fe fc24 	bl	800bac0 <_malloc_r>
 800d278:	4606      	mov	r6, r0
 800d27a:	b360      	cbz	r0, 800d2d6 <__ssputs_r+0xa2>
 800d27c:	6921      	ldr	r1, [r4, #16]
 800d27e:	464a      	mov	r2, r9
 800d280:	f000 fbee 	bl	800da60 <memcpy>
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28e:	81a3      	strh	r3, [r4, #12]
 800d290:	6126      	str	r6, [r4, #16]
 800d292:	6165      	str	r5, [r4, #20]
 800d294:	444e      	add	r6, r9
 800d296:	eba5 0509 	sub.w	r5, r5, r9
 800d29a:	6026      	str	r6, [r4, #0]
 800d29c:	60a5      	str	r5, [r4, #8]
 800d29e:	463e      	mov	r6, r7
 800d2a0:	42be      	cmp	r6, r7
 800d2a2:	d900      	bls.n	800d2a6 <__ssputs_r+0x72>
 800d2a4:	463e      	mov	r6, r7
 800d2a6:	6820      	ldr	r0, [r4, #0]
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	4641      	mov	r1, r8
 800d2ac:	f000 fb9c 	bl	800d9e8 <memmove>
 800d2b0:	68a3      	ldr	r3, [r4, #8]
 800d2b2:	1b9b      	subs	r3, r3, r6
 800d2b4:	60a3      	str	r3, [r4, #8]
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	4433      	add	r3, r6
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	f000 ff61 	bl	800e18a <_realloc_r>
 800d2c8:	4606      	mov	r6, r0
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d1e0      	bne.n	800d290 <__ssputs_r+0x5c>
 800d2ce:	6921      	ldr	r1, [r4, #16]
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	f7fe fb81 	bl	800b9d8 <_free_r>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	f8ca 3000 	str.w	r3, [sl]
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e2:	81a3      	strh	r3, [r4, #12]
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e8:	e7e9      	b.n	800d2be <__ssputs_r+0x8a>
	...

0800d2ec <_svfiprintf_r>:
 800d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	4698      	mov	r8, r3
 800d2f2:	898b      	ldrh	r3, [r1, #12]
 800d2f4:	061b      	lsls	r3, r3, #24
 800d2f6:	b09d      	sub	sp, #116	@ 0x74
 800d2f8:	4607      	mov	r7, r0
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	4614      	mov	r4, r2
 800d2fe:	d510      	bpl.n	800d322 <_svfiprintf_r+0x36>
 800d300:	690b      	ldr	r3, [r1, #16]
 800d302:	b973      	cbnz	r3, 800d322 <_svfiprintf_r+0x36>
 800d304:	2140      	movs	r1, #64	@ 0x40
 800d306:	f7fe fbdb 	bl	800bac0 <_malloc_r>
 800d30a:	6028      	str	r0, [r5, #0]
 800d30c:	6128      	str	r0, [r5, #16]
 800d30e:	b930      	cbnz	r0, 800d31e <_svfiprintf_r+0x32>
 800d310:	230c      	movs	r3, #12
 800d312:	603b      	str	r3, [r7, #0]
 800d314:	f04f 30ff 	mov.w	r0, #4294967295
 800d318:	b01d      	add	sp, #116	@ 0x74
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31e:	2340      	movs	r3, #64	@ 0x40
 800d320:	616b      	str	r3, [r5, #20]
 800d322:	2300      	movs	r3, #0
 800d324:	9309      	str	r3, [sp, #36]	@ 0x24
 800d326:	2320      	movs	r3, #32
 800d328:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d330:	2330      	movs	r3, #48	@ 0x30
 800d332:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d4d0 <_svfiprintf_r+0x1e4>
 800d336:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d33a:	f04f 0901 	mov.w	r9, #1
 800d33e:	4623      	mov	r3, r4
 800d340:	469a      	mov	sl, r3
 800d342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d346:	b10a      	cbz	r2, 800d34c <_svfiprintf_r+0x60>
 800d348:	2a25      	cmp	r2, #37	@ 0x25
 800d34a:	d1f9      	bne.n	800d340 <_svfiprintf_r+0x54>
 800d34c:	ebba 0b04 	subs.w	fp, sl, r4
 800d350:	d00b      	beq.n	800d36a <_svfiprintf_r+0x7e>
 800d352:	465b      	mov	r3, fp
 800d354:	4622      	mov	r2, r4
 800d356:	4629      	mov	r1, r5
 800d358:	4638      	mov	r0, r7
 800d35a:	f7ff ff6b 	bl	800d234 <__ssputs_r>
 800d35e:	3001      	adds	r0, #1
 800d360:	f000 80a7 	beq.w	800d4b2 <_svfiprintf_r+0x1c6>
 800d364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d366:	445a      	add	r2, fp
 800d368:	9209      	str	r2, [sp, #36]	@ 0x24
 800d36a:	f89a 3000 	ldrb.w	r3, [sl]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 809f 	beq.w	800d4b2 <_svfiprintf_r+0x1c6>
 800d374:	2300      	movs	r3, #0
 800d376:	f04f 32ff 	mov.w	r2, #4294967295
 800d37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d37e:	f10a 0a01 	add.w	sl, sl, #1
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	9307      	str	r3, [sp, #28]
 800d386:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d38a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d38c:	4654      	mov	r4, sl
 800d38e:	2205      	movs	r2, #5
 800d390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d394:	484e      	ldr	r0, [pc, #312]	@ (800d4d0 <_svfiprintf_r+0x1e4>)
 800d396:	f7f2 ff1b 	bl	80001d0 <memchr>
 800d39a:	9a04      	ldr	r2, [sp, #16]
 800d39c:	b9d8      	cbnz	r0, 800d3d6 <_svfiprintf_r+0xea>
 800d39e:	06d0      	lsls	r0, r2, #27
 800d3a0:	bf44      	itt	mi
 800d3a2:	2320      	movmi	r3, #32
 800d3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3a8:	0711      	lsls	r1, r2, #28
 800d3aa:	bf44      	itt	mi
 800d3ac:	232b      	movmi	r3, #43	@ 0x2b
 800d3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b8:	d015      	beq.n	800d3e6 <_svfiprintf_r+0xfa>
 800d3ba:	9a07      	ldr	r2, [sp, #28]
 800d3bc:	4654      	mov	r4, sl
 800d3be:	2000      	movs	r0, #0
 800d3c0:	f04f 0c0a 	mov.w	ip, #10
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ca:	3b30      	subs	r3, #48	@ 0x30
 800d3cc:	2b09      	cmp	r3, #9
 800d3ce:	d94b      	bls.n	800d468 <_svfiprintf_r+0x17c>
 800d3d0:	b1b0      	cbz	r0, 800d400 <_svfiprintf_r+0x114>
 800d3d2:	9207      	str	r2, [sp, #28]
 800d3d4:	e014      	b.n	800d400 <_svfiprintf_r+0x114>
 800d3d6:	eba0 0308 	sub.w	r3, r0, r8
 800d3da:	fa09 f303 	lsl.w	r3, r9, r3
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	46a2      	mov	sl, r4
 800d3e4:	e7d2      	b.n	800d38c <_svfiprintf_r+0xa0>
 800d3e6:	9b03      	ldr	r3, [sp, #12]
 800d3e8:	1d19      	adds	r1, r3, #4
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	9103      	str	r1, [sp, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bfbb      	ittet	lt
 800d3f2:	425b      	neglt	r3, r3
 800d3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d3f8:	9307      	strge	r3, [sp, #28]
 800d3fa:	9307      	strlt	r3, [sp, #28]
 800d3fc:	bfb8      	it	lt
 800d3fe:	9204      	strlt	r2, [sp, #16]
 800d400:	7823      	ldrb	r3, [r4, #0]
 800d402:	2b2e      	cmp	r3, #46	@ 0x2e
 800d404:	d10a      	bne.n	800d41c <_svfiprintf_r+0x130>
 800d406:	7863      	ldrb	r3, [r4, #1]
 800d408:	2b2a      	cmp	r3, #42	@ 0x2a
 800d40a:	d132      	bne.n	800d472 <_svfiprintf_r+0x186>
 800d40c:	9b03      	ldr	r3, [sp, #12]
 800d40e:	1d1a      	adds	r2, r3, #4
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	9203      	str	r2, [sp, #12]
 800d414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d418:	3402      	adds	r4, #2
 800d41a:	9305      	str	r3, [sp, #20]
 800d41c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d4e0 <_svfiprintf_r+0x1f4>
 800d420:	7821      	ldrb	r1, [r4, #0]
 800d422:	2203      	movs	r2, #3
 800d424:	4650      	mov	r0, sl
 800d426:	f7f2 fed3 	bl	80001d0 <memchr>
 800d42a:	b138      	cbz	r0, 800d43c <_svfiprintf_r+0x150>
 800d42c:	9b04      	ldr	r3, [sp, #16]
 800d42e:	eba0 000a 	sub.w	r0, r0, sl
 800d432:	2240      	movs	r2, #64	@ 0x40
 800d434:	4082      	lsls	r2, r0
 800d436:	4313      	orrs	r3, r2
 800d438:	3401      	adds	r4, #1
 800d43a:	9304      	str	r3, [sp, #16]
 800d43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d440:	4824      	ldr	r0, [pc, #144]	@ (800d4d4 <_svfiprintf_r+0x1e8>)
 800d442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d446:	2206      	movs	r2, #6
 800d448:	f7f2 fec2 	bl	80001d0 <memchr>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d036      	beq.n	800d4be <_svfiprintf_r+0x1d2>
 800d450:	4b21      	ldr	r3, [pc, #132]	@ (800d4d8 <_svfiprintf_r+0x1ec>)
 800d452:	bb1b      	cbnz	r3, 800d49c <_svfiprintf_r+0x1b0>
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	3307      	adds	r3, #7
 800d458:	f023 0307 	bic.w	r3, r3, #7
 800d45c:	3308      	adds	r3, #8
 800d45e:	9303      	str	r3, [sp, #12]
 800d460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d462:	4433      	add	r3, r6
 800d464:	9309      	str	r3, [sp, #36]	@ 0x24
 800d466:	e76a      	b.n	800d33e <_svfiprintf_r+0x52>
 800d468:	fb0c 3202 	mla	r2, ip, r2, r3
 800d46c:	460c      	mov	r4, r1
 800d46e:	2001      	movs	r0, #1
 800d470:	e7a8      	b.n	800d3c4 <_svfiprintf_r+0xd8>
 800d472:	2300      	movs	r3, #0
 800d474:	3401      	adds	r4, #1
 800d476:	9305      	str	r3, [sp, #20]
 800d478:	4619      	mov	r1, r3
 800d47a:	f04f 0c0a 	mov.w	ip, #10
 800d47e:	4620      	mov	r0, r4
 800d480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d484:	3a30      	subs	r2, #48	@ 0x30
 800d486:	2a09      	cmp	r2, #9
 800d488:	d903      	bls.n	800d492 <_svfiprintf_r+0x1a6>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0c6      	beq.n	800d41c <_svfiprintf_r+0x130>
 800d48e:	9105      	str	r1, [sp, #20]
 800d490:	e7c4      	b.n	800d41c <_svfiprintf_r+0x130>
 800d492:	fb0c 2101 	mla	r1, ip, r1, r2
 800d496:	4604      	mov	r4, r0
 800d498:	2301      	movs	r3, #1
 800d49a:	e7f0      	b.n	800d47e <_svfiprintf_r+0x192>
 800d49c:	ab03      	add	r3, sp, #12
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d4dc <_svfiprintf_r+0x1f0>)
 800d4a4:	a904      	add	r1, sp, #16
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f7fc fcb8 	bl	8009e1c <_printf_float>
 800d4ac:	1c42      	adds	r2, r0, #1
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	d1d6      	bne.n	800d460 <_svfiprintf_r+0x174>
 800d4b2:	89ab      	ldrh	r3, [r5, #12]
 800d4b4:	065b      	lsls	r3, r3, #25
 800d4b6:	f53f af2d 	bmi.w	800d314 <_svfiprintf_r+0x28>
 800d4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4bc:	e72c      	b.n	800d318 <_svfiprintf_r+0x2c>
 800d4be:	ab03      	add	r3, sp, #12
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	462a      	mov	r2, r5
 800d4c4:	4b05      	ldr	r3, [pc, #20]	@ (800d4dc <_svfiprintf_r+0x1f0>)
 800d4c6:	a904      	add	r1, sp, #16
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f7fc ff3f 	bl	800a34c <_printf_i>
 800d4ce:	e7ed      	b.n	800d4ac <_svfiprintf_r+0x1c0>
 800d4d0:	0800f3a5 	.word	0x0800f3a5
 800d4d4:	0800f3af 	.word	0x0800f3af
 800d4d8:	08009e1d 	.word	0x08009e1d
 800d4dc:	0800d235 	.word	0x0800d235
 800d4e0:	0800f3ab 	.word	0x0800f3ab

0800d4e4 <__sfputc_r>:
 800d4e4:	6893      	ldr	r3, [r2, #8]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	b410      	push	{r4}
 800d4ec:	6093      	str	r3, [r2, #8]
 800d4ee:	da08      	bge.n	800d502 <__sfputc_r+0x1e>
 800d4f0:	6994      	ldr	r4, [r2, #24]
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	db01      	blt.n	800d4fa <__sfputc_r+0x16>
 800d4f6:	290a      	cmp	r1, #10
 800d4f8:	d103      	bne.n	800d502 <__sfputc_r+0x1e>
 800d4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4fe:	f000 b9df 	b.w	800d8c0 <__swbuf_r>
 800d502:	6813      	ldr	r3, [r2, #0]
 800d504:	1c58      	adds	r0, r3, #1
 800d506:	6010      	str	r0, [r2, #0]
 800d508:	7019      	strb	r1, [r3, #0]
 800d50a:	4608      	mov	r0, r1
 800d50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <__sfputs_r>:
 800d512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d514:	4606      	mov	r6, r0
 800d516:	460f      	mov	r7, r1
 800d518:	4614      	mov	r4, r2
 800d51a:	18d5      	adds	r5, r2, r3
 800d51c:	42ac      	cmp	r4, r5
 800d51e:	d101      	bne.n	800d524 <__sfputs_r+0x12>
 800d520:	2000      	movs	r0, #0
 800d522:	e007      	b.n	800d534 <__sfputs_r+0x22>
 800d524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d528:	463a      	mov	r2, r7
 800d52a:	4630      	mov	r0, r6
 800d52c:	f7ff ffda 	bl	800d4e4 <__sfputc_r>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d1f3      	bne.n	800d51c <__sfputs_r+0xa>
 800d534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d538 <_vfiprintf_r>:
 800d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53c:	460d      	mov	r5, r1
 800d53e:	b09d      	sub	sp, #116	@ 0x74
 800d540:	4614      	mov	r4, r2
 800d542:	4698      	mov	r8, r3
 800d544:	4606      	mov	r6, r0
 800d546:	b118      	cbz	r0, 800d550 <_vfiprintf_r+0x18>
 800d548:	6a03      	ldr	r3, [r0, #32]
 800d54a:	b90b      	cbnz	r3, 800d550 <_vfiprintf_r+0x18>
 800d54c:	f7fd fab6 	bl	800aabc <__sinit>
 800d550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d552:	07d9      	lsls	r1, r3, #31
 800d554:	d405      	bmi.n	800d562 <_vfiprintf_r+0x2a>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	059a      	lsls	r2, r3, #22
 800d55a:	d402      	bmi.n	800d562 <_vfiprintf_r+0x2a>
 800d55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d55e:	f7fd fbd8 	bl	800ad12 <__retarget_lock_acquire_recursive>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	071b      	lsls	r3, r3, #28
 800d566:	d501      	bpl.n	800d56c <_vfiprintf_r+0x34>
 800d568:	692b      	ldr	r3, [r5, #16]
 800d56a:	b99b      	cbnz	r3, 800d594 <_vfiprintf_r+0x5c>
 800d56c:	4629      	mov	r1, r5
 800d56e:	4630      	mov	r0, r6
 800d570:	f000 f9e4 	bl	800d93c <__swsetup_r>
 800d574:	b170      	cbz	r0, 800d594 <_vfiprintf_r+0x5c>
 800d576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d578:	07dc      	lsls	r4, r3, #31
 800d57a:	d504      	bpl.n	800d586 <_vfiprintf_r+0x4e>
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	b01d      	add	sp, #116	@ 0x74
 800d582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d586:	89ab      	ldrh	r3, [r5, #12]
 800d588:	0598      	lsls	r0, r3, #22
 800d58a:	d4f7      	bmi.n	800d57c <_vfiprintf_r+0x44>
 800d58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d58e:	f7fd fbc1 	bl	800ad14 <__retarget_lock_release_recursive>
 800d592:	e7f3      	b.n	800d57c <_vfiprintf_r+0x44>
 800d594:	2300      	movs	r3, #0
 800d596:	9309      	str	r3, [sp, #36]	@ 0x24
 800d598:	2320      	movs	r3, #32
 800d59a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5a2:	2330      	movs	r3, #48	@ 0x30
 800d5a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d754 <_vfiprintf_r+0x21c>
 800d5a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ac:	f04f 0901 	mov.w	r9, #1
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	469a      	mov	sl, r3
 800d5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5b8:	b10a      	cbz	r2, 800d5be <_vfiprintf_r+0x86>
 800d5ba:	2a25      	cmp	r2, #37	@ 0x25
 800d5bc:	d1f9      	bne.n	800d5b2 <_vfiprintf_r+0x7a>
 800d5be:	ebba 0b04 	subs.w	fp, sl, r4
 800d5c2:	d00b      	beq.n	800d5dc <_vfiprintf_r+0xa4>
 800d5c4:	465b      	mov	r3, fp
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f7ff ffa1 	bl	800d512 <__sfputs_r>
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	f000 80a7 	beq.w	800d724 <_vfiprintf_r+0x1ec>
 800d5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5d8:	445a      	add	r2, fp
 800d5da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 809f 	beq.w	800d724 <_vfiprintf_r+0x1ec>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f0:	f10a 0a01 	add.w	sl, sl, #1
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	9307      	str	r3, [sp, #28]
 800d5f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5fe:	4654      	mov	r4, sl
 800d600:	2205      	movs	r2, #5
 800d602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d606:	4853      	ldr	r0, [pc, #332]	@ (800d754 <_vfiprintf_r+0x21c>)
 800d608:	f7f2 fde2 	bl	80001d0 <memchr>
 800d60c:	9a04      	ldr	r2, [sp, #16]
 800d60e:	b9d8      	cbnz	r0, 800d648 <_vfiprintf_r+0x110>
 800d610:	06d1      	lsls	r1, r2, #27
 800d612:	bf44      	itt	mi
 800d614:	2320      	movmi	r3, #32
 800d616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d61a:	0713      	lsls	r3, r2, #28
 800d61c:	bf44      	itt	mi
 800d61e:	232b      	movmi	r3, #43	@ 0x2b
 800d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d624:	f89a 3000 	ldrb.w	r3, [sl]
 800d628:	2b2a      	cmp	r3, #42	@ 0x2a
 800d62a:	d015      	beq.n	800d658 <_vfiprintf_r+0x120>
 800d62c:	9a07      	ldr	r2, [sp, #28]
 800d62e:	4654      	mov	r4, sl
 800d630:	2000      	movs	r0, #0
 800d632:	f04f 0c0a 	mov.w	ip, #10
 800d636:	4621      	mov	r1, r4
 800d638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d63c:	3b30      	subs	r3, #48	@ 0x30
 800d63e:	2b09      	cmp	r3, #9
 800d640:	d94b      	bls.n	800d6da <_vfiprintf_r+0x1a2>
 800d642:	b1b0      	cbz	r0, 800d672 <_vfiprintf_r+0x13a>
 800d644:	9207      	str	r2, [sp, #28]
 800d646:	e014      	b.n	800d672 <_vfiprintf_r+0x13a>
 800d648:	eba0 0308 	sub.w	r3, r0, r8
 800d64c:	fa09 f303 	lsl.w	r3, r9, r3
 800d650:	4313      	orrs	r3, r2
 800d652:	9304      	str	r3, [sp, #16]
 800d654:	46a2      	mov	sl, r4
 800d656:	e7d2      	b.n	800d5fe <_vfiprintf_r+0xc6>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	1d19      	adds	r1, r3, #4
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	9103      	str	r1, [sp, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	bfbb      	ittet	lt
 800d664:	425b      	neglt	r3, r3
 800d666:	f042 0202 	orrlt.w	r2, r2, #2
 800d66a:	9307      	strge	r3, [sp, #28]
 800d66c:	9307      	strlt	r3, [sp, #28]
 800d66e:	bfb8      	it	lt
 800d670:	9204      	strlt	r2, [sp, #16]
 800d672:	7823      	ldrb	r3, [r4, #0]
 800d674:	2b2e      	cmp	r3, #46	@ 0x2e
 800d676:	d10a      	bne.n	800d68e <_vfiprintf_r+0x156>
 800d678:	7863      	ldrb	r3, [r4, #1]
 800d67a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d67c:	d132      	bne.n	800d6e4 <_vfiprintf_r+0x1ac>
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	1d1a      	adds	r2, r3, #4
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	9203      	str	r2, [sp, #12]
 800d686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d68a:	3402      	adds	r4, #2
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d764 <_vfiprintf_r+0x22c>
 800d692:	7821      	ldrb	r1, [r4, #0]
 800d694:	2203      	movs	r2, #3
 800d696:	4650      	mov	r0, sl
 800d698:	f7f2 fd9a 	bl	80001d0 <memchr>
 800d69c:	b138      	cbz	r0, 800d6ae <_vfiprintf_r+0x176>
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	eba0 000a 	sub.w	r0, r0, sl
 800d6a4:	2240      	movs	r2, #64	@ 0x40
 800d6a6:	4082      	lsls	r2, r0
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	3401      	adds	r4, #1
 800d6ac:	9304      	str	r3, [sp, #16]
 800d6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b2:	4829      	ldr	r0, [pc, #164]	@ (800d758 <_vfiprintf_r+0x220>)
 800d6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6b8:	2206      	movs	r2, #6
 800d6ba:	f7f2 fd89 	bl	80001d0 <memchr>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d03f      	beq.n	800d742 <_vfiprintf_r+0x20a>
 800d6c2:	4b26      	ldr	r3, [pc, #152]	@ (800d75c <_vfiprintf_r+0x224>)
 800d6c4:	bb1b      	cbnz	r3, 800d70e <_vfiprintf_r+0x1d6>
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	3307      	adds	r3, #7
 800d6ca:	f023 0307 	bic.w	r3, r3, #7
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d4:	443b      	add	r3, r7
 800d6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d8:	e76a      	b.n	800d5b0 <_vfiprintf_r+0x78>
 800d6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6de:	460c      	mov	r4, r1
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	e7a8      	b.n	800d636 <_vfiprintf_r+0xfe>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	3401      	adds	r4, #1
 800d6e8:	9305      	str	r3, [sp, #20]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	f04f 0c0a 	mov.w	ip, #10
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6f6:	3a30      	subs	r2, #48	@ 0x30
 800d6f8:	2a09      	cmp	r2, #9
 800d6fa:	d903      	bls.n	800d704 <_vfiprintf_r+0x1cc>
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d0c6      	beq.n	800d68e <_vfiprintf_r+0x156>
 800d700:	9105      	str	r1, [sp, #20]
 800d702:	e7c4      	b.n	800d68e <_vfiprintf_r+0x156>
 800d704:	fb0c 2101 	mla	r1, ip, r1, r2
 800d708:	4604      	mov	r4, r0
 800d70a:	2301      	movs	r3, #1
 800d70c:	e7f0      	b.n	800d6f0 <_vfiprintf_r+0x1b8>
 800d70e:	ab03      	add	r3, sp, #12
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	462a      	mov	r2, r5
 800d714:	4b12      	ldr	r3, [pc, #72]	@ (800d760 <_vfiprintf_r+0x228>)
 800d716:	a904      	add	r1, sp, #16
 800d718:	4630      	mov	r0, r6
 800d71a:	f7fc fb7f 	bl	8009e1c <_printf_float>
 800d71e:	4607      	mov	r7, r0
 800d720:	1c78      	adds	r0, r7, #1
 800d722:	d1d6      	bne.n	800d6d2 <_vfiprintf_r+0x19a>
 800d724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d726:	07d9      	lsls	r1, r3, #31
 800d728:	d405      	bmi.n	800d736 <_vfiprintf_r+0x1fe>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	059a      	lsls	r2, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_vfiprintf_r+0x1fe>
 800d730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d732:	f7fd faef 	bl	800ad14 <__retarget_lock_release_recursive>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	065b      	lsls	r3, r3, #25
 800d73a:	f53f af1f 	bmi.w	800d57c <_vfiprintf_r+0x44>
 800d73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d740:	e71e      	b.n	800d580 <_vfiprintf_r+0x48>
 800d742:	ab03      	add	r3, sp, #12
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	462a      	mov	r2, r5
 800d748:	4b05      	ldr	r3, [pc, #20]	@ (800d760 <_vfiprintf_r+0x228>)
 800d74a:	a904      	add	r1, sp, #16
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7fc fdfd 	bl	800a34c <_printf_i>
 800d752:	e7e4      	b.n	800d71e <_vfiprintf_r+0x1e6>
 800d754:	0800f3a5 	.word	0x0800f3a5
 800d758:	0800f3af 	.word	0x0800f3af
 800d75c:	08009e1d 	.word	0x08009e1d
 800d760:	0800d513 	.word	0x0800d513
 800d764:	0800f3ab 	.word	0x0800f3ab

0800d768 <__sflush_r>:
 800d768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	0716      	lsls	r6, r2, #28
 800d772:	4605      	mov	r5, r0
 800d774:	460c      	mov	r4, r1
 800d776:	d454      	bmi.n	800d822 <__sflush_r+0xba>
 800d778:	684b      	ldr	r3, [r1, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dc02      	bgt.n	800d784 <__sflush_r+0x1c>
 800d77e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d780:	2b00      	cmp	r3, #0
 800d782:	dd48      	ble.n	800d816 <__sflush_r+0xae>
 800d784:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d786:	2e00      	cmp	r6, #0
 800d788:	d045      	beq.n	800d816 <__sflush_r+0xae>
 800d78a:	2300      	movs	r3, #0
 800d78c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d790:	682f      	ldr	r7, [r5, #0]
 800d792:	6a21      	ldr	r1, [r4, #32]
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	d030      	beq.n	800d7fa <__sflush_r+0x92>
 800d798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	0759      	lsls	r1, r3, #29
 800d79e:	d505      	bpl.n	800d7ac <__sflush_r+0x44>
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	1ad2      	subs	r2, r2, r3
 800d7a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a6:	b10b      	cbz	r3, 800d7ac <__sflush_r+0x44>
 800d7a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b0:	6a21      	ldr	r1, [r4, #32]
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b0      	blx	r6
 800d7b6:	1c43      	adds	r3, r0, #1
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	d106      	bne.n	800d7ca <__sflush_r+0x62>
 800d7bc:	6829      	ldr	r1, [r5, #0]
 800d7be:	291d      	cmp	r1, #29
 800d7c0:	d82b      	bhi.n	800d81a <__sflush_r+0xb2>
 800d7c2:	4a2a      	ldr	r2, [pc, #168]	@ (800d86c <__sflush_r+0x104>)
 800d7c4:	40ca      	lsrs	r2, r1
 800d7c6:	07d6      	lsls	r6, r2, #31
 800d7c8:	d527      	bpl.n	800d81a <__sflush_r+0xb2>
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	6062      	str	r2, [r4, #4]
 800d7ce:	04d9      	lsls	r1, r3, #19
 800d7d0:	6922      	ldr	r2, [r4, #16]
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	d504      	bpl.n	800d7e0 <__sflush_r+0x78>
 800d7d6:	1c42      	adds	r2, r0, #1
 800d7d8:	d101      	bne.n	800d7de <__sflush_r+0x76>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	b903      	cbnz	r3, 800d7e0 <__sflush_r+0x78>
 800d7de:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7e2:	602f      	str	r7, [r5, #0]
 800d7e4:	b1b9      	cbz	r1, 800d816 <__sflush_r+0xae>
 800d7e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ea:	4299      	cmp	r1, r3
 800d7ec:	d002      	beq.n	800d7f4 <__sflush_r+0x8c>
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7fe f8f2 	bl	800b9d8 <_free_r>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f8:	e00d      	b.n	800d816 <__sflush_r+0xae>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b0      	blx	r6
 800d800:	4602      	mov	r2, r0
 800d802:	1c50      	adds	r0, r2, #1
 800d804:	d1c9      	bne.n	800d79a <__sflush_r+0x32>
 800d806:	682b      	ldr	r3, [r5, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0c6      	beq.n	800d79a <__sflush_r+0x32>
 800d80c:	2b1d      	cmp	r3, #29
 800d80e:	d001      	beq.n	800d814 <__sflush_r+0xac>
 800d810:	2b16      	cmp	r3, #22
 800d812:	d11e      	bne.n	800d852 <__sflush_r+0xea>
 800d814:	602f      	str	r7, [r5, #0]
 800d816:	2000      	movs	r0, #0
 800d818:	e022      	b.n	800d860 <__sflush_r+0xf8>
 800d81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81e:	b21b      	sxth	r3, r3
 800d820:	e01b      	b.n	800d85a <__sflush_r+0xf2>
 800d822:	690f      	ldr	r7, [r1, #16]
 800d824:	2f00      	cmp	r7, #0
 800d826:	d0f6      	beq.n	800d816 <__sflush_r+0xae>
 800d828:	0793      	lsls	r3, r2, #30
 800d82a:	680e      	ldr	r6, [r1, #0]
 800d82c:	bf08      	it	eq
 800d82e:	694b      	ldreq	r3, [r1, #20]
 800d830:	600f      	str	r7, [r1, #0]
 800d832:	bf18      	it	ne
 800d834:	2300      	movne	r3, #0
 800d836:	eba6 0807 	sub.w	r8, r6, r7
 800d83a:	608b      	str	r3, [r1, #8]
 800d83c:	f1b8 0f00 	cmp.w	r8, #0
 800d840:	dde9      	ble.n	800d816 <__sflush_r+0xae>
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d846:	4643      	mov	r3, r8
 800d848:	463a      	mov	r2, r7
 800d84a:	4628      	mov	r0, r5
 800d84c:	47b0      	blx	r6
 800d84e:	2800      	cmp	r0, #0
 800d850:	dc08      	bgt.n	800d864 <__sflush_r+0xfc>
 800d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d85a:	81a3      	strh	r3, [r4, #12]
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295
 800d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d864:	4407      	add	r7, r0
 800d866:	eba8 0800 	sub.w	r8, r8, r0
 800d86a:	e7e7      	b.n	800d83c <__sflush_r+0xd4>
 800d86c:	20400001 	.word	0x20400001

0800d870 <_fflush_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	690b      	ldr	r3, [r1, #16]
 800d874:	4605      	mov	r5, r0
 800d876:	460c      	mov	r4, r1
 800d878:	b913      	cbnz	r3, 800d880 <_fflush_r+0x10>
 800d87a:	2500      	movs	r5, #0
 800d87c:	4628      	mov	r0, r5
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	b118      	cbz	r0, 800d88a <_fflush_r+0x1a>
 800d882:	6a03      	ldr	r3, [r0, #32]
 800d884:	b90b      	cbnz	r3, 800d88a <_fflush_r+0x1a>
 800d886:	f7fd f919 	bl	800aabc <__sinit>
 800d88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0f3      	beq.n	800d87a <_fflush_r+0xa>
 800d892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d894:	07d0      	lsls	r0, r2, #31
 800d896:	d404      	bmi.n	800d8a2 <_fflush_r+0x32>
 800d898:	0599      	lsls	r1, r3, #22
 800d89a:	d402      	bmi.n	800d8a2 <_fflush_r+0x32>
 800d89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89e:	f7fd fa38 	bl	800ad12 <__retarget_lock_acquire_recursive>
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	f7ff ff5f 	bl	800d768 <__sflush_r>
 800d8aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8ac:	07da      	lsls	r2, r3, #31
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	d4e4      	bmi.n	800d87c <_fflush_r+0xc>
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	059b      	lsls	r3, r3, #22
 800d8b6:	d4e1      	bmi.n	800d87c <_fflush_r+0xc>
 800d8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ba:	f7fd fa2b 	bl	800ad14 <__retarget_lock_release_recursive>
 800d8be:	e7dd      	b.n	800d87c <_fflush_r+0xc>

0800d8c0 <__swbuf_r>:
 800d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c2:	460e      	mov	r6, r1
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	b118      	cbz	r0, 800d8d2 <__swbuf_r+0x12>
 800d8ca:	6a03      	ldr	r3, [r0, #32]
 800d8cc:	b90b      	cbnz	r3, 800d8d2 <__swbuf_r+0x12>
 800d8ce:	f7fd f8f5 	bl	800aabc <__sinit>
 800d8d2:	69a3      	ldr	r3, [r4, #24]
 800d8d4:	60a3      	str	r3, [r4, #8]
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	071a      	lsls	r2, r3, #28
 800d8da:	d501      	bpl.n	800d8e0 <__swbuf_r+0x20>
 800d8dc:	6923      	ldr	r3, [r4, #16]
 800d8de:	b943      	cbnz	r3, 800d8f2 <__swbuf_r+0x32>
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f000 f82a 	bl	800d93c <__swsetup_r>
 800d8e8:	b118      	cbz	r0, 800d8f2 <__swbuf_r+0x32>
 800d8ea:	f04f 37ff 	mov.w	r7, #4294967295
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	6922      	ldr	r2, [r4, #16]
 800d8f6:	1a98      	subs	r0, r3, r2
 800d8f8:	6963      	ldr	r3, [r4, #20]
 800d8fa:	b2f6      	uxtb	r6, r6
 800d8fc:	4283      	cmp	r3, r0
 800d8fe:	4637      	mov	r7, r6
 800d900:	dc05      	bgt.n	800d90e <__swbuf_r+0x4e>
 800d902:	4621      	mov	r1, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f7ff ffb3 	bl	800d870 <_fflush_r>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d1ed      	bne.n	800d8ea <__swbuf_r+0x2a>
 800d90e:	68a3      	ldr	r3, [r4, #8]
 800d910:	3b01      	subs	r3, #1
 800d912:	60a3      	str	r3, [r4, #8]
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	6022      	str	r2, [r4, #0]
 800d91a:	701e      	strb	r6, [r3, #0]
 800d91c:	6962      	ldr	r2, [r4, #20]
 800d91e:	1c43      	adds	r3, r0, #1
 800d920:	429a      	cmp	r2, r3
 800d922:	d004      	beq.n	800d92e <__swbuf_r+0x6e>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	07db      	lsls	r3, r3, #31
 800d928:	d5e1      	bpl.n	800d8ee <__swbuf_r+0x2e>
 800d92a:	2e0a      	cmp	r6, #10
 800d92c:	d1df      	bne.n	800d8ee <__swbuf_r+0x2e>
 800d92e:	4621      	mov	r1, r4
 800d930:	4628      	mov	r0, r5
 800d932:	f7ff ff9d 	bl	800d870 <_fflush_r>
 800d936:	2800      	cmp	r0, #0
 800d938:	d0d9      	beq.n	800d8ee <__swbuf_r+0x2e>
 800d93a:	e7d6      	b.n	800d8ea <__swbuf_r+0x2a>

0800d93c <__swsetup_r>:
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	4b29      	ldr	r3, [pc, #164]	@ (800d9e4 <__swsetup_r+0xa8>)
 800d940:	4605      	mov	r5, r0
 800d942:	6818      	ldr	r0, [r3, #0]
 800d944:	460c      	mov	r4, r1
 800d946:	b118      	cbz	r0, 800d950 <__swsetup_r+0x14>
 800d948:	6a03      	ldr	r3, [r0, #32]
 800d94a:	b90b      	cbnz	r3, 800d950 <__swsetup_r+0x14>
 800d94c:	f7fd f8b6 	bl	800aabc <__sinit>
 800d950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d954:	0719      	lsls	r1, r3, #28
 800d956:	d422      	bmi.n	800d99e <__swsetup_r+0x62>
 800d958:	06da      	lsls	r2, r3, #27
 800d95a:	d407      	bmi.n	800d96c <__swsetup_r+0x30>
 800d95c:	2209      	movs	r2, #9
 800d95e:	602a      	str	r2, [r5, #0]
 800d960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d964:	81a3      	strh	r3, [r4, #12]
 800d966:	f04f 30ff 	mov.w	r0, #4294967295
 800d96a:	e033      	b.n	800d9d4 <__swsetup_r+0x98>
 800d96c:	0758      	lsls	r0, r3, #29
 800d96e:	d512      	bpl.n	800d996 <__swsetup_r+0x5a>
 800d970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d972:	b141      	cbz	r1, 800d986 <__swsetup_r+0x4a>
 800d974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d978:	4299      	cmp	r1, r3
 800d97a:	d002      	beq.n	800d982 <__swsetup_r+0x46>
 800d97c:	4628      	mov	r0, r5
 800d97e:	f7fe f82b 	bl	800b9d8 <_free_r>
 800d982:	2300      	movs	r3, #0
 800d984:	6363      	str	r3, [r4, #52]	@ 0x34
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	2300      	movs	r3, #0
 800d990:	6063      	str	r3, [r4, #4]
 800d992:	6923      	ldr	r3, [r4, #16]
 800d994:	6023      	str	r3, [r4, #0]
 800d996:	89a3      	ldrh	r3, [r4, #12]
 800d998:	f043 0308 	orr.w	r3, r3, #8
 800d99c:	81a3      	strh	r3, [r4, #12]
 800d99e:	6923      	ldr	r3, [r4, #16]
 800d9a0:	b94b      	cbnz	r3, 800d9b6 <__swsetup_r+0x7a>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9ac:	d003      	beq.n	800d9b6 <__swsetup_r+0x7a>
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f000 fc5d 	bl	800e270 <__smakebuf_r>
 800d9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ba:	f013 0201 	ands.w	r2, r3, #1
 800d9be:	d00a      	beq.n	800d9d6 <__swsetup_r+0x9a>
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	60a2      	str	r2, [r4, #8]
 800d9c4:	6962      	ldr	r2, [r4, #20]
 800d9c6:	4252      	negs	r2, r2
 800d9c8:	61a2      	str	r2, [r4, #24]
 800d9ca:	6922      	ldr	r2, [r4, #16]
 800d9cc:	b942      	cbnz	r2, 800d9e0 <__swsetup_r+0xa4>
 800d9ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9d2:	d1c5      	bne.n	800d960 <__swsetup_r+0x24>
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	0799      	lsls	r1, r3, #30
 800d9d8:	bf58      	it	pl
 800d9da:	6962      	ldrpl	r2, [r4, #20]
 800d9dc:	60a2      	str	r2, [r4, #8]
 800d9de:	e7f4      	b.n	800d9ca <__swsetup_r+0x8e>
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	e7f7      	b.n	800d9d4 <__swsetup_r+0x98>
 800d9e4:	20000020 	.word	0x20000020

0800d9e8 <memmove>:
 800d9e8:	4288      	cmp	r0, r1
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	eb01 0402 	add.w	r4, r1, r2
 800d9f0:	d902      	bls.n	800d9f8 <memmove+0x10>
 800d9f2:	4284      	cmp	r4, r0
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	d807      	bhi.n	800da08 <memmove+0x20>
 800d9f8:	1e43      	subs	r3, r0, #1
 800d9fa:	42a1      	cmp	r1, r4
 800d9fc:	d008      	beq.n	800da10 <memmove+0x28>
 800d9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da06:	e7f8      	b.n	800d9fa <memmove+0x12>
 800da08:	4402      	add	r2, r0
 800da0a:	4601      	mov	r1, r0
 800da0c:	428a      	cmp	r2, r1
 800da0e:	d100      	bne.n	800da12 <memmove+0x2a>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da1a:	e7f7      	b.n	800da0c <memmove+0x24>

0800da1c <strncmp>:
 800da1c:	b510      	push	{r4, lr}
 800da1e:	b16a      	cbz	r2, 800da3c <strncmp+0x20>
 800da20:	3901      	subs	r1, #1
 800da22:	1884      	adds	r4, r0, r2
 800da24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d103      	bne.n	800da38 <strncmp+0x1c>
 800da30:	42a0      	cmp	r0, r4
 800da32:	d001      	beq.n	800da38 <strncmp+0x1c>
 800da34:	2a00      	cmp	r2, #0
 800da36:	d1f5      	bne.n	800da24 <strncmp+0x8>
 800da38:	1ad0      	subs	r0, r2, r3
 800da3a:	bd10      	pop	{r4, pc}
 800da3c:	4610      	mov	r0, r2
 800da3e:	e7fc      	b.n	800da3a <strncmp+0x1e>

0800da40 <_sbrk_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d06      	ldr	r5, [pc, #24]	@ (800da5c <_sbrk_r+0x1c>)
 800da44:	2300      	movs	r3, #0
 800da46:	4604      	mov	r4, r0
 800da48:	4608      	mov	r0, r1
 800da4a:	602b      	str	r3, [r5, #0]
 800da4c:	f7f4 fdfe 	bl	800264c <_sbrk>
 800da50:	1c43      	adds	r3, r0, #1
 800da52:	d102      	bne.n	800da5a <_sbrk_r+0x1a>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	b103      	cbz	r3, 800da5a <_sbrk_r+0x1a>
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	bd38      	pop	{r3, r4, r5, pc}
 800da5c:	20000b38 	.word	0x20000b38

0800da60 <memcpy>:
 800da60:	440a      	add	r2, r1
 800da62:	4291      	cmp	r1, r2
 800da64:	f100 33ff 	add.w	r3, r0, #4294967295
 800da68:	d100      	bne.n	800da6c <memcpy+0xc>
 800da6a:	4770      	bx	lr
 800da6c:	b510      	push	{r4, lr}
 800da6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da76:	4291      	cmp	r1, r2
 800da78:	d1f9      	bne.n	800da6e <memcpy+0xe>
 800da7a:	bd10      	pop	{r4, pc}
 800da7c:	0000      	movs	r0, r0
	...

0800da80 <nan>:
 800da80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da88 <nan+0x8>
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	00000000 	.word	0x00000000
 800da8c:	7ff80000 	.word	0x7ff80000

0800da90 <__assert_func>:
 800da90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da92:	4614      	mov	r4, r2
 800da94:	461a      	mov	r2, r3
 800da96:	4b09      	ldr	r3, [pc, #36]	@ (800dabc <__assert_func+0x2c>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4605      	mov	r5, r0
 800da9c:	68d8      	ldr	r0, [r3, #12]
 800da9e:	b14c      	cbz	r4, 800dab4 <__assert_func+0x24>
 800daa0:	4b07      	ldr	r3, [pc, #28]	@ (800dac0 <__assert_func+0x30>)
 800daa2:	9100      	str	r1, [sp, #0]
 800daa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daa8:	4906      	ldr	r1, [pc, #24]	@ (800dac4 <__assert_func+0x34>)
 800daaa:	462b      	mov	r3, r5
 800daac:	f000 fba8 	bl	800e200 <fiprintf>
 800dab0:	f000 fc3c 	bl	800e32c <abort>
 800dab4:	4b04      	ldr	r3, [pc, #16]	@ (800dac8 <__assert_func+0x38>)
 800dab6:	461c      	mov	r4, r3
 800dab8:	e7f3      	b.n	800daa2 <__assert_func+0x12>
 800daba:	bf00      	nop
 800dabc:	20000020 	.word	0x20000020
 800dac0:	0800f3be 	.word	0x0800f3be
 800dac4:	0800f3cb 	.word	0x0800f3cb
 800dac8:	0800f3f9 	.word	0x0800f3f9

0800dacc <_calloc_r>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	fba1 5402 	umull	r5, r4, r1, r2
 800dad2:	b934      	cbnz	r4, 800dae2 <_calloc_r+0x16>
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7fd fff3 	bl	800bac0 <_malloc_r>
 800dada:	4606      	mov	r6, r0
 800dadc:	b928      	cbnz	r0, 800daea <_calloc_r+0x1e>
 800dade:	4630      	mov	r0, r6
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	220c      	movs	r2, #12
 800dae4:	6002      	str	r2, [r0, #0]
 800dae6:	2600      	movs	r6, #0
 800dae8:	e7f9      	b.n	800dade <_calloc_r+0x12>
 800daea:	462a      	mov	r2, r5
 800daec:	4621      	mov	r1, r4
 800daee:	f7fd f892 	bl	800ac16 <memset>
 800daf2:	e7f4      	b.n	800dade <_calloc_r+0x12>

0800daf4 <rshift>:
 800daf4:	6903      	ldr	r3, [r0, #16]
 800daf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dafa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dafe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db02:	f100 0414 	add.w	r4, r0, #20
 800db06:	dd45      	ble.n	800db94 <rshift+0xa0>
 800db08:	f011 011f 	ands.w	r1, r1, #31
 800db0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db14:	d10c      	bne.n	800db30 <rshift+0x3c>
 800db16:	f100 0710 	add.w	r7, r0, #16
 800db1a:	4629      	mov	r1, r5
 800db1c:	42b1      	cmp	r1, r6
 800db1e:	d334      	bcc.n	800db8a <rshift+0x96>
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	1eea      	subs	r2, r5, #3
 800db26:	4296      	cmp	r6, r2
 800db28:	bf38      	it	cc
 800db2a:	2300      	movcc	r3, #0
 800db2c:	4423      	add	r3, r4
 800db2e:	e015      	b.n	800db5c <rshift+0x68>
 800db30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db34:	f1c1 0820 	rsb	r8, r1, #32
 800db38:	40cf      	lsrs	r7, r1
 800db3a:	f105 0e04 	add.w	lr, r5, #4
 800db3e:	46a1      	mov	r9, r4
 800db40:	4576      	cmp	r6, lr
 800db42:	46f4      	mov	ip, lr
 800db44:	d815      	bhi.n	800db72 <rshift+0x7e>
 800db46:	1a9a      	subs	r2, r3, r2
 800db48:	0092      	lsls	r2, r2, #2
 800db4a:	3a04      	subs	r2, #4
 800db4c:	3501      	adds	r5, #1
 800db4e:	42ae      	cmp	r6, r5
 800db50:	bf38      	it	cc
 800db52:	2200      	movcc	r2, #0
 800db54:	18a3      	adds	r3, r4, r2
 800db56:	50a7      	str	r7, [r4, r2]
 800db58:	b107      	cbz	r7, 800db5c <rshift+0x68>
 800db5a:	3304      	adds	r3, #4
 800db5c:	1b1a      	subs	r2, r3, r4
 800db5e:	42a3      	cmp	r3, r4
 800db60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db64:	bf08      	it	eq
 800db66:	2300      	moveq	r3, #0
 800db68:	6102      	str	r2, [r0, #16]
 800db6a:	bf08      	it	eq
 800db6c:	6143      	streq	r3, [r0, #20]
 800db6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db72:	f8dc c000 	ldr.w	ip, [ip]
 800db76:	fa0c fc08 	lsl.w	ip, ip, r8
 800db7a:	ea4c 0707 	orr.w	r7, ip, r7
 800db7e:	f849 7b04 	str.w	r7, [r9], #4
 800db82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db86:	40cf      	lsrs	r7, r1
 800db88:	e7da      	b.n	800db40 <rshift+0x4c>
 800db8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800db8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800db92:	e7c3      	b.n	800db1c <rshift+0x28>
 800db94:	4623      	mov	r3, r4
 800db96:	e7e1      	b.n	800db5c <rshift+0x68>

0800db98 <__hexdig_fun>:
 800db98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d802      	bhi.n	800dba6 <__hexdig_fun+0xe>
 800dba0:	3820      	subs	r0, #32
 800dba2:	b2c0      	uxtb	r0, r0
 800dba4:	4770      	bx	lr
 800dba6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dbaa:	2b05      	cmp	r3, #5
 800dbac:	d801      	bhi.n	800dbb2 <__hexdig_fun+0x1a>
 800dbae:	3847      	subs	r0, #71	@ 0x47
 800dbb0:	e7f7      	b.n	800dba2 <__hexdig_fun+0xa>
 800dbb2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dbb6:	2b05      	cmp	r3, #5
 800dbb8:	d801      	bhi.n	800dbbe <__hexdig_fun+0x26>
 800dbba:	3827      	subs	r0, #39	@ 0x27
 800dbbc:	e7f1      	b.n	800dba2 <__hexdig_fun+0xa>
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	4770      	bx	lr
	...

0800dbc4 <__gethex>:
 800dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc8:	b085      	sub	sp, #20
 800dbca:	468a      	mov	sl, r1
 800dbcc:	9302      	str	r3, [sp, #8]
 800dbce:	680b      	ldr	r3, [r1, #0]
 800dbd0:	9001      	str	r0, [sp, #4]
 800dbd2:	4690      	mov	r8, r2
 800dbd4:	1c9c      	adds	r4, r3, #2
 800dbd6:	46a1      	mov	r9, r4
 800dbd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dbdc:	2830      	cmp	r0, #48	@ 0x30
 800dbde:	d0fa      	beq.n	800dbd6 <__gethex+0x12>
 800dbe0:	eba9 0303 	sub.w	r3, r9, r3
 800dbe4:	f1a3 0b02 	sub.w	fp, r3, #2
 800dbe8:	f7ff ffd6 	bl	800db98 <__hexdig_fun>
 800dbec:	4605      	mov	r5, r0
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d168      	bne.n	800dcc4 <__gethex+0x100>
 800dbf2:	49a0      	ldr	r1, [pc, #640]	@ (800de74 <__gethex+0x2b0>)
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	4648      	mov	r0, r9
 800dbf8:	f7ff ff10 	bl	800da1c <strncmp>
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d167      	bne.n	800dcd2 <__gethex+0x10e>
 800dc02:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc06:	4626      	mov	r6, r4
 800dc08:	f7ff ffc6 	bl	800db98 <__hexdig_fun>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d062      	beq.n	800dcd6 <__gethex+0x112>
 800dc10:	4623      	mov	r3, r4
 800dc12:	7818      	ldrb	r0, [r3, #0]
 800dc14:	2830      	cmp	r0, #48	@ 0x30
 800dc16:	4699      	mov	r9, r3
 800dc18:	f103 0301 	add.w	r3, r3, #1
 800dc1c:	d0f9      	beq.n	800dc12 <__gethex+0x4e>
 800dc1e:	f7ff ffbb 	bl	800db98 <__hexdig_fun>
 800dc22:	fab0 f580 	clz	r5, r0
 800dc26:	096d      	lsrs	r5, r5, #5
 800dc28:	f04f 0b01 	mov.w	fp, #1
 800dc2c:	464a      	mov	r2, r9
 800dc2e:	4616      	mov	r6, r2
 800dc30:	3201      	adds	r2, #1
 800dc32:	7830      	ldrb	r0, [r6, #0]
 800dc34:	f7ff ffb0 	bl	800db98 <__hexdig_fun>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1f8      	bne.n	800dc2e <__gethex+0x6a>
 800dc3c:	498d      	ldr	r1, [pc, #564]	@ (800de74 <__gethex+0x2b0>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff feeb 	bl	800da1c <strncmp>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d13f      	bne.n	800dcca <__gethex+0x106>
 800dc4a:	b944      	cbnz	r4, 800dc5e <__gethex+0x9a>
 800dc4c:	1c74      	adds	r4, r6, #1
 800dc4e:	4622      	mov	r2, r4
 800dc50:	4616      	mov	r6, r2
 800dc52:	3201      	adds	r2, #1
 800dc54:	7830      	ldrb	r0, [r6, #0]
 800dc56:	f7ff ff9f 	bl	800db98 <__hexdig_fun>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d1f8      	bne.n	800dc50 <__gethex+0x8c>
 800dc5e:	1ba4      	subs	r4, r4, r6
 800dc60:	00a7      	lsls	r7, r4, #2
 800dc62:	7833      	ldrb	r3, [r6, #0]
 800dc64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dc68:	2b50      	cmp	r3, #80	@ 0x50
 800dc6a:	d13e      	bne.n	800dcea <__gethex+0x126>
 800dc6c:	7873      	ldrb	r3, [r6, #1]
 800dc6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc70:	d033      	beq.n	800dcda <__gethex+0x116>
 800dc72:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc74:	d034      	beq.n	800dce0 <__gethex+0x11c>
 800dc76:	1c71      	adds	r1, r6, #1
 800dc78:	2400      	movs	r4, #0
 800dc7a:	7808      	ldrb	r0, [r1, #0]
 800dc7c:	f7ff ff8c 	bl	800db98 <__hexdig_fun>
 800dc80:	1e43      	subs	r3, r0, #1
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b18      	cmp	r3, #24
 800dc86:	d830      	bhi.n	800dcea <__gethex+0x126>
 800dc88:	f1a0 0210 	sub.w	r2, r0, #16
 800dc8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc90:	f7ff ff82 	bl	800db98 <__hexdig_fun>
 800dc94:	f100 3cff 	add.w	ip, r0, #4294967295
 800dc98:	fa5f fc8c 	uxtb.w	ip, ip
 800dc9c:	f1bc 0f18 	cmp.w	ip, #24
 800dca0:	f04f 030a 	mov.w	r3, #10
 800dca4:	d91e      	bls.n	800dce4 <__gethex+0x120>
 800dca6:	b104      	cbz	r4, 800dcaa <__gethex+0xe6>
 800dca8:	4252      	negs	r2, r2
 800dcaa:	4417      	add	r7, r2
 800dcac:	f8ca 1000 	str.w	r1, [sl]
 800dcb0:	b1ed      	cbz	r5, 800dcee <__gethex+0x12a>
 800dcb2:	f1bb 0f00 	cmp.w	fp, #0
 800dcb6:	bf0c      	ite	eq
 800dcb8:	2506      	moveq	r5, #6
 800dcba:	2500      	movne	r5, #0
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	b005      	add	sp, #20
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	2500      	movs	r5, #0
 800dcc6:	462c      	mov	r4, r5
 800dcc8:	e7b0      	b.n	800dc2c <__gethex+0x68>
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	d1c7      	bne.n	800dc5e <__gethex+0x9a>
 800dcce:	4627      	mov	r7, r4
 800dcd0:	e7c7      	b.n	800dc62 <__gethex+0x9e>
 800dcd2:	464e      	mov	r6, r9
 800dcd4:	462f      	mov	r7, r5
 800dcd6:	2501      	movs	r5, #1
 800dcd8:	e7c3      	b.n	800dc62 <__gethex+0x9e>
 800dcda:	2400      	movs	r4, #0
 800dcdc:	1cb1      	adds	r1, r6, #2
 800dcde:	e7cc      	b.n	800dc7a <__gethex+0xb6>
 800dce0:	2401      	movs	r4, #1
 800dce2:	e7fb      	b.n	800dcdc <__gethex+0x118>
 800dce4:	fb03 0002 	mla	r0, r3, r2, r0
 800dce8:	e7ce      	b.n	800dc88 <__gethex+0xc4>
 800dcea:	4631      	mov	r1, r6
 800dcec:	e7de      	b.n	800dcac <__gethex+0xe8>
 800dcee:	eba6 0309 	sub.w	r3, r6, r9
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	2b07      	cmp	r3, #7
 800dcf8:	dc0a      	bgt.n	800dd10 <__gethex+0x14c>
 800dcfa:	9801      	ldr	r0, [sp, #4]
 800dcfc:	f7fd ff6c 	bl	800bbd8 <_Balloc>
 800dd00:	4604      	mov	r4, r0
 800dd02:	b940      	cbnz	r0, 800dd16 <__gethex+0x152>
 800dd04:	4b5c      	ldr	r3, [pc, #368]	@ (800de78 <__gethex+0x2b4>)
 800dd06:	4602      	mov	r2, r0
 800dd08:	21e4      	movs	r1, #228	@ 0xe4
 800dd0a:	485c      	ldr	r0, [pc, #368]	@ (800de7c <__gethex+0x2b8>)
 800dd0c:	f7ff fec0 	bl	800da90 <__assert_func>
 800dd10:	3101      	adds	r1, #1
 800dd12:	105b      	asrs	r3, r3, #1
 800dd14:	e7ef      	b.n	800dcf6 <__gethex+0x132>
 800dd16:	f100 0a14 	add.w	sl, r0, #20
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	4655      	mov	r5, sl
 800dd1e:	469b      	mov	fp, r3
 800dd20:	45b1      	cmp	r9, r6
 800dd22:	d337      	bcc.n	800dd94 <__gethex+0x1d0>
 800dd24:	f845 bb04 	str.w	fp, [r5], #4
 800dd28:	eba5 050a 	sub.w	r5, r5, sl
 800dd2c:	10ad      	asrs	r5, r5, #2
 800dd2e:	6125      	str	r5, [r4, #16]
 800dd30:	4658      	mov	r0, fp
 800dd32:	f7fe f843 	bl	800bdbc <__hi0bits>
 800dd36:	016d      	lsls	r5, r5, #5
 800dd38:	f8d8 6000 	ldr.w	r6, [r8]
 800dd3c:	1a2d      	subs	r5, r5, r0
 800dd3e:	42b5      	cmp	r5, r6
 800dd40:	dd54      	ble.n	800ddec <__gethex+0x228>
 800dd42:	1bad      	subs	r5, r5, r6
 800dd44:	4629      	mov	r1, r5
 800dd46:	4620      	mov	r0, r4
 800dd48:	f7fe fbcf 	bl	800c4ea <__any_on>
 800dd4c:	4681      	mov	r9, r0
 800dd4e:	b178      	cbz	r0, 800dd70 <__gethex+0x1ac>
 800dd50:	1e6b      	subs	r3, r5, #1
 800dd52:	1159      	asrs	r1, r3, #5
 800dd54:	f003 021f 	and.w	r2, r3, #31
 800dd58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dd5c:	f04f 0901 	mov.w	r9, #1
 800dd60:	fa09 f202 	lsl.w	r2, r9, r2
 800dd64:	420a      	tst	r2, r1
 800dd66:	d003      	beq.n	800dd70 <__gethex+0x1ac>
 800dd68:	454b      	cmp	r3, r9
 800dd6a:	dc36      	bgt.n	800ddda <__gethex+0x216>
 800dd6c:	f04f 0902 	mov.w	r9, #2
 800dd70:	4629      	mov	r1, r5
 800dd72:	4620      	mov	r0, r4
 800dd74:	f7ff febe 	bl	800daf4 <rshift>
 800dd78:	442f      	add	r7, r5
 800dd7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd7e:	42bb      	cmp	r3, r7
 800dd80:	da42      	bge.n	800de08 <__gethex+0x244>
 800dd82:	9801      	ldr	r0, [sp, #4]
 800dd84:	4621      	mov	r1, r4
 800dd86:	f7fd ff67 	bl	800bc58 <_Bfree>
 800dd8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	6013      	str	r3, [r2, #0]
 800dd90:	25a3      	movs	r5, #163	@ 0xa3
 800dd92:	e793      	b.n	800dcbc <__gethex+0xf8>
 800dd94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dd98:	2a2e      	cmp	r2, #46	@ 0x2e
 800dd9a:	d012      	beq.n	800ddc2 <__gethex+0x1fe>
 800dd9c:	2b20      	cmp	r3, #32
 800dd9e:	d104      	bne.n	800ddaa <__gethex+0x1e6>
 800dda0:	f845 bb04 	str.w	fp, [r5], #4
 800dda4:	f04f 0b00 	mov.w	fp, #0
 800dda8:	465b      	mov	r3, fp
 800ddaa:	7830      	ldrb	r0, [r6, #0]
 800ddac:	9303      	str	r3, [sp, #12]
 800ddae:	f7ff fef3 	bl	800db98 <__hexdig_fun>
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	f000 000f 	and.w	r0, r0, #15
 800ddb8:	4098      	lsls	r0, r3
 800ddba:	ea4b 0b00 	orr.w	fp, fp, r0
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	e7ae      	b.n	800dd20 <__gethex+0x15c>
 800ddc2:	45b1      	cmp	r9, r6
 800ddc4:	d8ea      	bhi.n	800dd9c <__gethex+0x1d8>
 800ddc6:	492b      	ldr	r1, [pc, #172]	@ (800de74 <__gethex+0x2b0>)
 800ddc8:	9303      	str	r3, [sp, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f7ff fe25 	bl	800da1c <strncmp>
 800ddd2:	9b03      	ldr	r3, [sp, #12]
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d1e1      	bne.n	800dd9c <__gethex+0x1d8>
 800ddd8:	e7a2      	b.n	800dd20 <__gethex+0x15c>
 800ddda:	1ea9      	subs	r1, r5, #2
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7fe fb84 	bl	800c4ea <__any_on>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d0c2      	beq.n	800dd6c <__gethex+0x1a8>
 800dde6:	f04f 0903 	mov.w	r9, #3
 800ddea:	e7c1      	b.n	800dd70 <__gethex+0x1ac>
 800ddec:	da09      	bge.n	800de02 <__gethex+0x23e>
 800ddee:	1b75      	subs	r5, r6, r5
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	9801      	ldr	r0, [sp, #4]
 800ddf4:	462a      	mov	r2, r5
 800ddf6:	f7fe f93f 	bl	800c078 <__lshift>
 800ddfa:	1b7f      	subs	r7, r7, r5
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	f100 0a14 	add.w	sl, r0, #20
 800de02:	f04f 0900 	mov.w	r9, #0
 800de06:	e7b8      	b.n	800dd7a <__gethex+0x1b6>
 800de08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de0c:	42bd      	cmp	r5, r7
 800de0e:	dd6f      	ble.n	800def0 <__gethex+0x32c>
 800de10:	1bed      	subs	r5, r5, r7
 800de12:	42ae      	cmp	r6, r5
 800de14:	dc34      	bgt.n	800de80 <__gethex+0x2bc>
 800de16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d022      	beq.n	800de64 <__gethex+0x2a0>
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d024      	beq.n	800de6c <__gethex+0x2a8>
 800de22:	2b01      	cmp	r3, #1
 800de24:	d115      	bne.n	800de52 <__gethex+0x28e>
 800de26:	42ae      	cmp	r6, r5
 800de28:	d113      	bne.n	800de52 <__gethex+0x28e>
 800de2a:	2e01      	cmp	r6, #1
 800de2c:	d10b      	bne.n	800de46 <__gethex+0x282>
 800de2e:	9a02      	ldr	r2, [sp, #8]
 800de30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	2301      	movs	r3, #1
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	f8ca 3000 	str.w	r3, [sl]
 800de3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de40:	2562      	movs	r5, #98	@ 0x62
 800de42:	601c      	str	r4, [r3, #0]
 800de44:	e73a      	b.n	800dcbc <__gethex+0xf8>
 800de46:	1e71      	subs	r1, r6, #1
 800de48:	4620      	mov	r0, r4
 800de4a:	f7fe fb4e 	bl	800c4ea <__any_on>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d1ed      	bne.n	800de2e <__gethex+0x26a>
 800de52:	9801      	ldr	r0, [sp, #4]
 800de54:	4621      	mov	r1, r4
 800de56:	f7fd feff 	bl	800bc58 <_Bfree>
 800de5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de5c:	2300      	movs	r3, #0
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	2550      	movs	r5, #80	@ 0x50
 800de62:	e72b      	b.n	800dcbc <__gethex+0xf8>
 800de64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1f3      	bne.n	800de52 <__gethex+0x28e>
 800de6a:	e7e0      	b.n	800de2e <__gethex+0x26a>
 800de6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1dd      	bne.n	800de2e <__gethex+0x26a>
 800de72:	e7ee      	b.n	800de52 <__gethex+0x28e>
 800de74:	0800f3a3 	.word	0x0800f3a3
 800de78:	0800f339 	.word	0x0800f339
 800de7c:	0800f3fa 	.word	0x0800f3fa
 800de80:	1e6f      	subs	r7, r5, #1
 800de82:	f1b9 0f00 	cmp.w	r9, #0
 800de86:	d130      	bne.n	800deea <__gethex+0x326>
 800de88:	b127      	cbz	r7, 800de94 <__gethex+0x2d0>
 800de8a:	4639      	mov	r1, r7
 800de8c:	4620      	mov	r0, r4
 800de8e:	f7fe fb2c 	bl	800c4ea <__any_on>
 800de92:	4681      	mov	r9, r0
 800de94:	117a      	asrs	r2, r7, #5
 800de96:	2301      	movs	r3, #1
 800de98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800de9c:	f007 071f 	and.w	r7, r7, #31
 800dea0:	40bb      	lsls	r3, r7
 800dea2:	4213      	tst	r3, r2
 800dea4:	4629      	mov	r1, r5
 800dea6:	4620      	mov	r0, r4
 800dea8:	bf18      	it	ne
 800deaa:	f049 0902 	orrne.w	r9, r9, #2
 800deae:	f7ff fe21 	bl	800daf4 <rshift>
 800deb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800deb6:	1b76      	subs	r6, r6, r5
 800deb8:	2502      	movs	r5, #2
 800deba:	f1b9 0f00 	cmp.w	r9, #0
 800debe:	d047      	beq.n	800df50 <__gethex+0x38c>
 800dec0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d015      	beq.n	800def4 <__gethex+0x330>
 800dec8:	2b03      	cmp	r3, #3
 800deca:	d017      	beq.n	800defc <__gethex+0x338>
 800decc:	2b01      	cmp	r3, #1
 800dece:	d109      	bne.n	800dee4 <__gethex+0x320>
 800ded0:	f019 0f02 	tst.w	r9, #2
 800ded4:	d006      	beq.n	800dee4 <__gethex+0x320>
 800ded6:	f8da 3000 	ldr.w	r3, [sl]
 800deda:	ea49 0903 	orr.w	r9, r9, r3
 800dede:	f019 0f01 	tst.w	r9, #1
 800dee2:	d10e      	bne.n	800df02 <__gethex+0x33e>
 800dee4:	f045 0510 	orr.w	r5, r5, #16
 800dee8:	e032      	b.n	800df50 <__gethex+0x38c>
 800deea:	f04f 0901 	mov.w	r9, #1
 800deee:	e7d1      	b.n	800de94 <__gethex+0x2d0>
 800def0:	2501      	movs	r5, #1
 800def2:	e7e2      	b.n	800deba <__gethex+0x2f6>
 800def4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800def6:	f1c3 0301 	rsb	r3, r3, #1
 800defa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800defc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0f0      	beq.n	800dee4 <__gethex+0x320>
 800df02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df06:	f104 0314 	add.w	r3, r4, #20
 800df0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df12:	f04f 0c00 	mov.w	ip, #0
 800df16:	4618      	mov	r0, r3
 800df18:	f853 2b04 	ldr.w	r2, [r3], #4
 800df1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df20:	d01b      	beq.n	800df5a <__gethex+0x396>
 800df22:	3201      	adds	r2, #1
 800df24:	6002      	str	r2, [r0, #0]
 800df26:	2d02      	cmp	r5, #2
 800df28:	f104 0314 	add.w	r3, r4, #20
 800df2c:	d13c      	bne.n	800dfa8 <__gethex+0x3e4>
 800df2e:	f8d8 2000 	ldr.w	r2, [r8]
 800df32:	3a01      	subs	r2, #1
 800df34:	42b2      	cmp	r2, r6
 800df36:	d109      	bne.n	800df4c <__gethex+0x388>
 800df38:	1171      	asrs	r1, r6, #5
 800df3a:	2201      	movs	r2, #1
 800df3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df40:	f006 061f 	and.w	r6, r6, #31
 800df44:	fa02 f606 	lsl.w	r6, r2, r6
 800df48:	421e      	tst	r6, r3
 800df4a:	d13a      	bne.n	800dfc2 <__gethex+0x3fe>
 800df4c:	f045 0520 	orr.w	r5, r5, #32
 800df50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df52:	601c      	str	r4, [r3, #0]
 800df54:	9b02      	ldr	r3, [sp, #8]
 800df56:	601f      	str	r7, [r3, #0]
 800df58:	e6b0      	b.n	800dcbc <__gethex+0xf8>
 800df5a:	4299      	cmp	r1, r3
 800df5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800df60:	d8d9      	bhi.n	800df16 <__gethex+0x352>
 800df62:	68a3      	ldr	r3, [r4, #8]
 800df64:	459b      	cmp	fp, r3
 800df66:	db17      	blt.n	800df98 <__gethex+0x3d4>
 800df68:	6861      	ldr	r1, [r4, #4]
 800df6a:	9801      	ldr	r0, [sp, #4]
 800df6c:	3101      	adds	r1, #1
 800df6e:	f7fd fe33 	bl	800bbd8 <_Balloc>
 800df72:	4681      	mov	r9, r0
 800df74:	b918      	cbnz	r0, 800df7e <__gethex+0x3ba>
 800df76:	4b1a      	ldr	r3, [pc, #104]	@ (800dfe0 <__gethex+0x41c>)
 800df78:	4602      	mov	r2, r0
 800df7a:	2184      	movs	r1, #132	@ 0x84
 800df7c:	e6c5      	b.n	800dd0a <__gethex+0x146>
 800df7e:	6922      	ldr	r2, [r4, #16]
 800df80:	3202      	adds	r2, #2
 800df82:	f104 010c 	add.w	r1, r4, #12
 800df86:	0092      	lsls	r2, r2, #2
 800df88:	300c      	adds	r0, #12
 800df8a:	f7ff fd69 	bl	800da60 <memcpy>
 800df8e:	4621      	mov	r1, r4
 800df90:	9801      	ldr	r0, [sp, #4]
 800df92:	f7fd fe61 	bl	800bc58 <_Bfree>
 800df96:	464c      	mov	r4, r9
 800df98:	6923      	ldr	r3, [r4, #16]
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfa0:	6122      	str	r2, [r4, #16]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	615a      	str	r2, [r3, #20]
 800dfa6:	e7be      	b.n	800df26 <__gethex+0x362>
 800dfa8:	6922      	ldr	r2, [r4, #16]
 800dfaa:	455a      	cmp	r2, fp
 800dfac:	dd0b      	ble.n	800dfc6 <__gethex+0x402>
 800dfae:	2101      	movs	r1, #1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7ff fd9f 	bl	800daf4 <rshift>
 800dfb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfba:	3701      	adds	r7, #1
 800dfbc:	42bb      	cmp	r3, r7
 800dfbe:	f6ff aee0 	blt.w	800dd82 <__gethex+0x1be>
 800dfc2:	2501      	movs	r5, #1
 800dfc4:	e7c2      	b.n	800df4c <__gethex+0x388>
 800dfc6:	f016 061f 	ands.w	r6, r6, #31
 800dfca:	d0fa      	beq.n	800dfc2 <__gethex+0x3fe>
 800dfcc:	4453      	add	r3, sl
 800dfce:	f1c6 0620 	rsb	r6, r6, #32
 800dfd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfd6:	f7fd fef1 	bl	800bdbc <__hi0bits>
 800dfda:	42b0      	cmp	r0, r6
 800dfdc:	dbe7      	blt.n	800dfae <__gethex+0x3ea>
 800dfde:	e7f0      	b.n	800dfc2 <__gethex+0x3fe>
 800dfe0:	0800f339 	.word	0x0800f339

0800dfe4 <L_shift>:
 800dfe4:	f1c2 0208 	rsb	r2, r2, #8
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	b570      	push	{r4, r5, r6, lr}
 800dfec:	f1c2 0620 	rsb	r6, r2, #32
 800dff0:	6843      	ldr	r3, [r0, #4]
 800dff2:	6804      	ldr	r4, [r0, #0]
 800dff4:	fa03 f506 	lsl.w	r5, r3, r6
 800dff8:	432c      	orrs	r4, r5
 800dffa:	40d3      	lsrs	r3, r2
 800dffc:	6004      	str	r4, [r0, #0]
 800dffe:	f840 3f04 	str.w	r3, [r0, #4]!
 800e002:	4288      	cmp	r0, r1
 800e004:	d3f4      	bcc.n	800dff0 <L_shift+0xc>
 800e006:	bd70      	pop	{r4, r5, r6, pc}

0800e008 <__match>:
 800e008:	b530      	push	{r4, r5, lr}
 800e00a:	6803      	ldr	r3, [r0, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e012:	b914      	cbnz	r4, 800e01a <__match+0x12>
 800e014:	6003      	str	r3, [r0, #0]
 800e016:	2001      	movs	r0, #1
 800e018:	bd30      	pop	{r4, r5, pc}
 800e01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e022:	2d19      	cmp	r5, #25
 800e024:	bf98      	it	ls
 800e026:	3220      	addls	r2, #32
 800e028:	42a2      	cmp	r2, r4
 800e02a:	d0f0      	beq.n	800e00e <__match+0x6>
 800e02c:	2000      	movs	r0, #0
 800e02e:	e7f3      	b.n	800e018 <__match+0x10>

0800e030 <__hexnan>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	680b      	ldr	r3, [r1, #0]
 800e036:	6801      	ldr	r1, [r0, #0]
 800e038:	115e      	asrs	r6, r3, #5
 800e03a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e03e:	f013 031f 	ands.w	r3, r3, #31
 800e042:	b087      	sub	sp, #28
 800e044:	bf18      	it	ne
 800e046:	3604      	addne	r6, #4
 800e048:	2500      	movs	r5, #0
 800e04a:	1f37      	subs	r7, r6, #4
 800e04c:	4682      	mov	sl, r0
 800e04e:	4690      	mov	r8, r2
 800e050:	9301      	str	r3, [sp, #4]
 800e052:	f846 5c04 	str.w	r5, [r6, #-4]
 800e056:	46b9      	mov	r9, r7
 800e058:	463c      	mov	r4, r7
 800e05a:	9502      	str	r5, [sp, #8]
 800e05c:	46ab      	mov	fp, r5
 800e05e:	784a      	ldrb	r2, [r1, #1]
 800e060:	1c4b      	adds	r3, r1, #1
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	b342      	cbz	r2, 800e0b8 <__hexnan+0x88>
 800e066:	4610      	mov	r0, r2
 800e068:	9105      	str	r1, [sp, #20]
 800e06a:	9204      	str	r2, [sp, #16]
 800e06c:	f7ff fd94 	bl	800db98 <__hexdig_fun>
 800e070:	2800      	cmp	r0, #0
 800e072:	d151      	bne.n	800e118 <__hexnan+0xe8>
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	9905      	ldr	r1, [sp, #20]
 800e078:	2a20      	cmp	r2, #32
 800e07a:	d818      	bhi.n	800e0ae <__hexnan+0x7e>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	459b      	cmp	fp, r3
 800e080:	dd13      	ble.n	800e0aa <__hexnan+0x7a>
 800e082:	454c      	cmp	r4, r9
 800e084:	d206      	bcs.n	800e094 <__hexnan+0x64>
 800e086:	2d07      	cmp	r5, #7
 800e088:	dc04      	bgt.n	800e094 <__hexnan+0x64>
 800e08a:	462a      	mov	r2, r5
 800e08c:	4649      	mov	r1, r9
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff ffa8 	bl	800dfe4 <L_shift>
 800e094:	4544      	cmp	r4, r8
 800e096:	d952      	bls.n	800e13e <__hexnan+0x10e>
 800e098:	2300      	movs	r3, #0
 800e09a:	f1a4 0904 	sub.w	r9, r4, #4
 800e09e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0a2:	f8cd b008 	str.w	fp, [sp, #8]
 800e0a6:	464c      	mov	r4, r9
 800e0a8:	461d      	mov	r5, r3
 800e0aa:	9903      	ldr	r1, [sp, #12]
 800e0ac:	e7d7      	b.n	800e05e <__hexnan+0x2e>
 800e0ae:	2a29      	cmp	r2, #41	@ 0x29
 800e0b0:	d157      	bne.n	800e162 <__hexnan+0x132>
 800e0b2:	3102      	adds	r1, #2
 800e0b4:	f8ca 1000 	str.w	r1, [sl]
 800e0b8:	f1bb 0f00 	cmp.w	fp, #0
 800e0bc:	d051      	beq.n	800e162 <__hexnan+0x132>
 800e0be:	454c      	cmp	r4, r9
 800e0c0:	d206      	bcs.n	800e0d0 <__hexnan+0xa0>
 800e0c2:	2d07      	cmp	r5, #7
 800e0c4:	dc04      	bgt.n	800e0d0 <__hexnan+0xa0>
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f7ff ff8a 	bl	800dfe4 <L_shift>
 800e0d0:	4544      	cmp	r4, r8
 800e0d2:	d936      	bls.n	800e142 <__hexnan+0x112>
 800e0d4:	f1a8 0204 	sub.w	r2, r8, #4
 800e0d8:	4623      	mov	r3, r4
 800e0da:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0de:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0e2:	429f      	cmp	r7, r3
 800e0e4:	d2f9      	bcs.n	800e0da <__hexnan+0xaa>
 800e0e6:	1b3b      	subs	r3, r7, r4
 800e0e8:	f023 0303 	bic.w	r3, r3, #3
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	3e03      	subs	r6, #3
 800e0f2:	42b4      	cmp	r4, r6
 800e0f4:	bf88      	it	hi
 800e0f6:	2304      	movhi	r3, #4
 800e0f8:	4443      	add	r3, r8
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f843 2b04 	str.w	r2, [r3], #4
 800e100:	429f      	cmp	r7, r3
 800e102:	d2fb      	bcs.n	800e0fc <__hexnan+0xcc>
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	b91b      	cbnz	r3, 800e110 <__hexnan+0xe0>
 800e108:	4547      	cmp	r7, r8
 800e10a:	d128      	bne.n	800e15e <__hexnan+0x12e>
 800e10c:	2301      	movs	r3, #1
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	2005      	movs	r0, #5
 800e112:	b007      	add	sp, #28
 800e114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e118:	3501      	adds	r5, #1
 800e11a:	2d08      	cmp	r5, #8
 800e11c:	f10b 0b01 	add.w	fp, fp, #1
 800e120:	dd06      	ble.n	800e130 <__hexnan+0x100>
 800e122:	4544      	cmp	r4, r8
 800e124:	d9c1      	bls.n	800e0aa <__hexnan+0x7a>
 800e126:	2300      	movs	r3, #0
 800e128:	f844 3c04 	str.w	r3, [r4, #-4]
 800e12c:	2501      	movs	r5, #1
 800e12e:	3c04      	subs	r4, #4
 800e130:	6822      	ldr	r2, [r4, #0]
 800e132:	f000 000f 	and.w	r0, r0, #15
 800e136:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e13a:	6020      	str	r0, [r4, #0]
 800e13c:	e7b5      	b.n	800e0aa <__hexnan+0x7a>
 800e13e:	2508      	movs	r5, #8
 800e140:	e7b3      	b.n	800e0aa <__hexnan+0x7a>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d0dd      	beq.n	800e104 <__hexnan+0xd4>
 800e148:	f1c3 0320 	rsb	r3, r3, #32
 800e14c:	f04f 32ff 	mov.w	r2, #4294967295
 800e150:	40da      	lsrs	r2, r3
 800e152:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e156:	4013      	ands	r3, r2
 800e158:	f846 3c04 	str.w	r3, [r6, #-4]
 800e15c:	e7d2      	b.n	800e104 <__hexnan+0xd4>
 800e15e:	3f04      	subs	r7, #4
 800e160:	e7d0      	b.n	800e104 <__hexnan+0xd4>
 800e162:	2004      	movs	r0, #4
 800e164:	e7d5      	b.n	800e112 <__hexnan+0xe2>

0800e166 <__ascii_mbtowc>:
 800e166:	b082      	sub	sp, #8
 800e168:	b901      	cbnz	r1, 800e16c <__ascii_mbtowc+0x6>
 800e16a:	a901      	add	r1, sp, #4
 800e16c:	b142      	cbz	r2, 800e180 <__ascii_mbtowc+0x1a>
 800e16e:	b14b      	cbz	r3, 800e184 <__ascii_mbtowc+0x1e>
 800e170:	7813      	ldrb	r3, [r2, #0]
 800e172:	600b      	str	r3, [r1, #0]
 800e174:	7812      	ldrb	r2, [r2, #0]
 800e176:	1e10      	subs	r0, r2, #0
 800e178:	bf18      	it	ne
 800e17a:	2001      	movne	r0, #1
 800e17c:	b002      	add	sp, #8
 800e17e:	4770      	bx	lr
 800e180:	4610      	mov	r0, r2
 800e182:	e7fb      	b.n	800e17c <__ascii_mbtowc+0x16>
 800e184:	f06f 0001 	mvn.w	r0, #1
 800e188:	e7f8      	b.n	800e17c <__ascii_mbtowc+0x16>

0800e18a <_realloc_r>:
 800e18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e18e:	4607      	mov	r7, r0
 800e190:	4614      	mov	r4, r2
 800e192:	460d      	mov	r5, r1
 800e194:	b921      	cbnz	r1, 800e1a0 <_realloc_r+0x16>
 800e196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e19a:	4611      	mov	r1, r2
 800e19c:	f7fd bc90 	b.w	800bac0 <_malloc_r>
 800e1a0:	b92a      	cbnz	r2, 800e1ae <_realloc_r+0x24>
 800e1a2:	f7fd fc19 	bl	800b9d8 <_free_r>
 800e1a6:	4625      	mov	r5, r4
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ae:	f000 f8c4 	bl	800e33a <_malloc_usable_size_r>
 800e1b2:	4284      	cmp	r4, r0
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	d802      	bhi.n	800e1be <_realloc_r+0x34>
 800e1b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1bc:	d8f4      	bhi.n	800e1a8 <_realloc_r+0x1e>
 800e1be:	4621      	mov	r1, r4
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f7fd fc7d 	bl	800bac0 <_malloc_r>
 800e1c6:	4680      	mov	r8, r0
 800e1c8:	b908      	cbnz	r0, 800e1ce <_realloc_r+0x44>
 800e1ca:	4645      	mov	r5, r8
 800e1cc:	e7ec      	b.n	800e1a8 <_realloc_r+0x1e>
 800e1ce:	42b4      	cmp	r4, r6
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	bf28      	it	cs
 800e1d6:	4632      	movcs	r2, r6
 800e1d8:	f7ff fc42 	bl	800da60 <memcpy>
 800e1dc:	4629      	mov	r1, r5
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f7fd fbfa 	bl	800b9d8 <_free_r>
 800e1e4:	e7f1      	b.n	800e1ca <_realloc_r+0x40>

0800e1e6 <__ascii_wctomb>:
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	b141      	cbz	r1, 800e1fe <__ascii_wctomb+0x18>
 800e1ec:	2aff      	cmp	r2, #255	@ 0xff
 800e1ee:	d904      	bls.n	800e1fa <__ascii_wctomb+0x14>
 800e1f0:	228a      	movs	r2, #138	@ 0x8a
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f8:	4770      	bx	lr
 800e1fa:	700a      	strb	r2, [r1, #0]
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	4770      	bx	lr

0800e200 <fiprintf>:
 800e200:	b40e      	push	{r1, r2, r3}
 800e202:	b503      	push	{r0, r1, lr}
 800e204:	4601      	mov	r1, r0
 800e206:	ab03      	add	r3, sp, #12
 800e208:	4805      	ldr	r0, [pc, #20]	@ (800e220 <fiprintf+0x20>)
 800e20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e20e:	6800      	ldr	r0, [r0, #0]
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	f7ff f991 	bl	800d538 <_vfiprintf_r>
 800e216:	b002      	add	sp, #8
 800e218:	f85d eb04 	ldr.w	lr, [sp], #4
 800e21c:	b003      	add	sp, #12
 800e21e:	4770      	bx	lr
 800e220:	20000020 	.word	0x20000020

0800e224 <__swhatbuf_r>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	460c      	mov	r4, r1
 800e228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e22c:	2900      	cmp	r1, #0
 800e22e:	b096      	sub	sp, #88	@ 0x58
 800e230:	4615      	mov	r5, r2
 800e232:	461e      	mov	r6, r3
 800e234:	da0d      	bge.n	800e252 <__swhatbuf_r+0x2e>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e23c:	f04f 0100 	mov.w	r1, #0
 800e240:	bf14      	ite	ne
 800e242:	2340      	movne	r3, #64	@ 0x40
 800e244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e248:	2000      	movs	r0, #0
 800e24a:	6031      	str	r1, [r6, #0]
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	b016      	add	sp, #88	@ 0x58
 800e250:	bd70      	pop	{r4, r5, r6, pc}
 800e252:	466a      	mov	r2, sp
 800e254:	f000 f848 	bl	800e2e8 <_fstat_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	dbec      	blt.n	800e236 <__swhatbuf_r+0x12>
 800e25c:	9901      	ldr	r1, [sp, #4]
 800e25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e266:	4259      	negs	r1, r3
 800e268:	4159      	adcs	r1, r3
 800e26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e26e:	e7eb      	b.n	800e248 <__swhatbuf_r+0x24>

0800e270 <__smakebuf_r>:
 800e270:	898b      	ldrh	r3, [r1, #12]
 800e272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e274:	079d      	lsls	r5, r3, #30
 800e276:	4606      	mov	r6, r0
 800e278:	460c      	mov	r4, r1
 800e27a:	d507      	bpl.n	800e28c <__smakebuf_r+0x1c>
 800e27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	2301      	movs	r3, #1
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	b003      	add	sp, #12
 800e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e28c:	ab01      	add	r3, sp, #4
 800e28e:	466a      	mov	r2, sp
 800e290:	f7ff ffc8 	bl	800e224 <__swhatbuf_r>
 800e294:	9f00      	ldr	r7, [sp, #0]
 800e296:	4605      	mov	r5, r0
 800e298:	4639      	mov	r1, r7
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7fd fc10 	bl	800bac0 <_malloc_r>
 800e2a0:	b948      	cbnz	r0, 800e2b6 <__smakebuf_r+0x46>
 800e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a6:	059a      	lsls	r2, r3, #22
 800e2a8:	d4ee      	bmi.n	800e288 <__smakebuf_r+0x18>
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	f043 0302 	orr.w	r3, r3, #2
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	e7e2      	b.n	800e27c <__smakebuf_r+0xc>
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	6020      	str	r0, [r4, #0]
 800e2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2be:	81a3      	strh	r3, [r4, #12]
 800e2c0:	9b01      	ldr	r3, [sp, #4]
 800e2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2c6:	b15b      	cbz	r3, 800e2e0 <__smakebuf_r+0x70>
 800e2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 f81d 	bl	800e30c <_isatty_r>
 800e2d2:	b128      	cbz	r0, 800e2e0 <__smakebuf_r+0x70>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f023 0303 	bic.w	r3, r3, #3
 800e2da:	f043 0301 	orr.w	r3, r3, #1
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	431d      	orrs	r5, r3
 800e2e4:	81a5      	strh	r5, [r4, #12]
 800e2e6:	e7cf      	b.n	800e288 <__smakebuf_r+0x18>

0800e2e8 <_fstat_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	@ (800e308 <_fstat_r+0x20>)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	f7f4 f981 	bl	80025fc <_fstat>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	d102      	bne.n	800e304 <_fstat_r+0x1c>
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	b103      	cbz	r3, 800e304 <_fstat_r+0x1c>
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	bd38      	pop	{r3, r4, r5, pc}
 800e306:	bf00      	nop
 800e308:	20000b38 	.word	0x20000b38

0800e30c <_isatty_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	@ (800e328 <_isatty_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f4 f980 	bl	800261c <_isatty>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_isatty_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_isatty_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	20000b38 	.word	0x20000b38

0800e32c <abort>:
 800e32c:	b508      	push	{r3, lr}
 800e32e:	2006      	movs	r0, #6
 800e330:	f000 f834 	bl	800e39c <raise>
 800e334:	2001      	movs	r0, #1
 800e336:	f7f4 f92d 	bl	8002594 <_exit>

0800e33a <_malloc_usable_size_r>:
 800e33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e33e:	1f18      	subs	r0, r3, #4
 800e340:	2b00      	cmp	r3, #0
 800e342:	bfbc      	itt	lt
 800e344:	580b      	ldrlt	r3, [r1, r0]
 800e346:	18c0      	addlt	r0, r0, r3
 800e348:	4770      	bx	lr

0800e34a <_raise_r>:
 800e34a:	291f      	cmp	r1, #31
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4605      	mov	r5, r0
 800e350:	460c      	mov	r4, r1
 800e352:	d904      	bls.n	800e35e <_raise_r+0x14>
 800e354:	2316      	movs	r3, #22
 800e356:	6003      	str	r3, [r0, #0]
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 800e35e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e360:	b112      	cbz	r2, 800e368 <_raise_r+0x1e>
 800e362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e366:	b94b      	cbnz	r3, 800e37c <_raise_r+0x32>
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 f831 	bl	800e3d0 <_getpid_r>
 800e36e:	4622      	mov	r2, r4
 800e370:	4601      	mov	r1, r0
 800e372:	4628      	mov	r0, r5
 800e374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e378:	f000 b818 	b.w	800e3ac <_kill_r>
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d00a      	beq.n	800e396 <_raise_r+0x4c>
 800e380:	1c59      	adds	r1, r3, #1
 800e382:	d103      	bne.n	800e38c <_raise_r+0x42>
 800e384:	2316      	movs	r3, #22
 800e386:	6003      	str	r3, [r0, #0]
 800e388:	2001      	movs	r0, #1
 800e38a:	e7e7      	b.n	800e35c <_raise_r+0x12>
 800e38c:	2100      	movs	r1, #0
 800e38e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e392:	4620      	mov	r0, r4
 800e394:	4798      	blx	r3
 800e396:	2000      	movs	r0, #0
 800e398:	e7e0      	b.n	800e35c <_raise_r+0x12>
	...

0800e39c <raise>:
 800e39c:	4b02      	ldr	r3, [pc, #8]	@ (800e3a8 <raise+0xc>)
 800e39e:	4601      	mov	r1, r0
 800e3a0:	6818      	ldr	r0, [r3, #0]
 800e3a2:	f7ff bfd2 	b.w	800e34a <_raise_r>
 800e3a6:	bf00      	nop
 800e3a8:	20000020 	.word	0x20000020

0800e3ac <_kill_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	4d07      	ldr	r5, [pc, #28]	@ (800e3cc <_kill_r+0x20>)
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	4608      	mov	r0, r1
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	602b      	str	r3, [r5, #0]
 800e3ba:	f7f4 f8db 	bl	8002574 <_kill>
 800e3be:	1c43      	adds	r3, r0, #1
 800e3c0:	d102      	bne.n	800e3c8 <_kill_r+0x1c>
 800e3c2:	682b      	ldr	r3, [r5, #0]
 800e3c4:	b103      	cbz	r3, 800e3c8 <_kill_r+0x1c>
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20000b38 	.word	0x20000b38

0800e3d0 <_getpid_r>:
 800e3d0:	f7f4 b8c8 	b.w	8002564 <_getpid>

0800e3d4 <_init>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	bf00      	nop
 800e3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3da:	bc08      	pop	{r3}
 800e3dc:	469e      	mov	lr, r3
 800e3de:	4770      	bx	lr

0800e3e0 <_fini>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	bf00      	nop
 800e3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3e6:	bc08      	pop	{r3}
 800e3e8:	469e      	mov	lr, r3
 800e3ea:	4770      	bx	lr
