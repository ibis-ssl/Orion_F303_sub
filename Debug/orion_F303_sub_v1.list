
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800cd00  0800cd00  0001cd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d25c  0800d25c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d25c  0800d25c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d25c  0800d25c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d260  0800d260  0001d260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000032c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001598c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000304d  00000000  00000000  00035b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00038bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e78  00000000  00000000  0003ad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d7a  00000000  00000000  0005bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c407e  00000000  00000000  0007390a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137988  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d70  00000000  00000000  001379d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cce4 	.word	0x0800cce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cce4 	.word	0x0800cce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 f983 	bl	800207c <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fdb3 	bl	80018e6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f001 ffd8 	bl	8002d40 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f000 fda6 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f001 fcd6 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f000 fd90 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001fc 	.word	0x200001fc

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 f91a 	bl	800207c <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f000 fd4a 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f001 fc7a 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 fd34 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000024c 	.word	0x2000024c
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 fa5d 	bl	80043c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f003 fa2a 	bl	80043c8 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 f86b 	bl	80030b8 <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fc7d 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200002a0 	.word	0x200002a0
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f003 f9ad 	bl	80043c8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f002 ff47 	bl	8003f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f002 ff60 	bl	8003f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x104) << 5;
 80010a2:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80010a6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x105) << 5;
 80010a8:	f242 03a0 	movw	r3, #8352	; 0x20a0
 80010ac:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;
 80010b4:	f242 0320 	movw	r3, #8224	; 0x2020
 80010b8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <CAN_Filter_Init+0x64>)
 80010cc:	f002 f8ef 	bl	80032ae <HAL_CAN_ConfigFilter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <CAN_Filter_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fc06 	bl	80018e6 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010da:	2102      	movs	r1, #2
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <CAN_Filter_Init+0x64>)
 80010de:	f002 fbe1 	bl	80038a4 <HAL_CAN_ActivateNotification>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <CAN_Filter_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 fbfd 	bl	80018e6 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002a0 	.word	0x200002a0

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_DMA_Init+0x38>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <MX_DMA_Init+0x38>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_DMA_Init+0x38>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	200e      	movs	r0, #14
 800111c:	f002 fef3 	bl	8003f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001120:	200e      	movs	r0, #14
 8001122:	f002 ff0c 	bl	8003f3e <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <MX_GPIO_Init+0x154>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <MX_GPIO_Init+0x154>)
 8001150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <MX_GPIO_Init+0x154>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_GPIO_Init+0x154>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a48      	ldr	r2, [pc, #288]	; (8001288 <MX_GPIO_Init+0x154>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_GPIO_Init+0x154>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_GPIO_Init+0x154>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <MX_GPIO_Init+0x154>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_GPIO_Init+0x154>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_GPIO_Init+0x154>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a3c      	ldr	r2, [pc, #240]	; (8001288 <MX_GPIO_Init+0x154>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <MX_GPIO_Init+0x154>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <MX_GPIO_Init+0x158>)
 80011b2:	f003 fa9b 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21c1      	movs	r1, #193	; 0xc1
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f003 fa95 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f246 0140 	movw	r1, #24640	; 0x6040
 80011c8:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_GPIO_Init+0x15c>)
 80011ca:	f003 fa8f 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 80011ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4829      	ldr	r0, [pc, #164]	; (800128c <MX_GPIO_Init+0x158>)
 80011e8:	f003 f8ee 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 80011ec:	23c1      	movs	r3, #193	; 0xc1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f003 f8df 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 800120a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_GPIO_Init+0x15c>)
 8001220:	f003 f8d2 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 8001224:	f246 0340 	movw	r3, #24640	; 0x6040
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_GPIO_Init+0x15c>)
 800123e:	f003 f8c3 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f003 f8b5 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800125e:	2338      	movs	r3, #56	; 0x38
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126e:	2305      	movs	r3, #5
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_GPIO_Init+0x15c>)
 800127a:	f003 f8a5 	bl	80043c8 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800
 8001290:	48000400 	.word	0x48000400

08001294 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <_write+0x24>)
 80012aa:	f005 fd6f 	bl	8006d8c <HAL_UART_Transmit_DMA>
	return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003ac 	.word	0x200003ac

080012bc <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0};
volatile bool uart_rx_flag = false,uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0,uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_UART_RxCpltCallback+0x5c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_UART_RxCpltCallback+0x2e>
		uart_rx_flag = true;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_UART_RxCpltCallback+0x60>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
		uart_rx_cnt++;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_RxCpltCallback+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_UART_RxCpltCallback+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	4910      	ldr	r1, [pc, #64]	; (8001324 <HAL_UART_RxCpltCallback+0x68>)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_UART_RxCpltCallback+0x6c>)
 80012e4:	f005 fd04 	bl	8006cf0 <HAL_UART_Receive_IT>
	}else if(huart->Instance == USART3){
		uart3_rx_flag = true;
		uart3_rx_cnt++;
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
	}
}
 80012e8:	e011      	b.n	800130e <HAL_UART_RxCpltCallback+0x52>
	}else if(huart->Instance == USART3){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_UART_RxCpltCallback+0x70>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10c      	bne.n	800130e <HAL_UART_RxCpltCallback+0x52>
		uart3_rx_flag = true;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_RxCpltCallback+0x74>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
		uart3_rx_cnt++;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_UART_RxCpltCallback+0x78>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_UART_RxCpltCallback+0x78>)
 8001302:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	490c      	ldr	r1, [pc, #48]	; (8001338 <HAL_UART_RxCpltCallback+0x7c>)
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_UART_RxCpltCallback+0x80>)
 800130a:	f005 fcf1 	bl	8006cf0 <HAL_UART_Receive_IT>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40013800 	.word	0x40013800
 800131c:	200002de 	.word	0x200002de
 8001320:	200002e0 	.word	0x200002e0
 8001324:	200002c8 	.word	0x200002c8
 8001328:	200003ac 	.word	0x200003ac
 800132c:	40004800 	.word	0x40004800
 8001330:	200002df 	.word	0x200002df
 8001334:	200002e4 	.word	0x200002e4
 8001338:	200002d4 	.word	0x200002d4
 800133c:	20000430 	.word	0x20000430

08001340 <HAL_CAN_RxFifo0MsgPendingCallback>:
int servo_timeout_cnt = 0,dribbler_timeout_cnt = 0;
uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800134c:	2100      	movs	r1, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f002 f996 	bl	8003680 <HAL_CAN_GetRxMessage>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 800135a:	f000 fac4 	bl	80018e6 <Error_Handler>
	}

	can_rx_cnt++;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001366:	6013      	str	r3, [r2, #0]
	switch (can_rx_header.StdId)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001370:	d01a      	beq.n	80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 8001372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001376:	d819      	bhi.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800137c:	d004      	beq.n	8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800137e:	f240 1205 	movw	r2, #261	; 0x105
 8001382:	4293      	cmp	r3, r2
 8001384:	d008      	beq.n	8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>


	case 0x300:
		break;
	default:
		break;
 8001386:	e011      	b.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		dribbler_timeout_cnt = 0;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    dribbler_speed = can_rx_buf.speed;
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001394:	6013      	str	r3, [r2, #0]
    break;
 8001396:	e00a      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		servo_timeout_cnt = 0;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		serv_angle = can_rx_buf.speed;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80013a4:	6013      	str	r3, [r2, #0]
		break;
 80013a6:	e002      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		break;
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		break;
 80013ac:	bf00      	nop
	}
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002fc 	.word	0x200002fc
 80013bc:	20000304 	.word	0x20000304
 80013c0:	200002f8 	.word	0x200002f8
 80013c4:	200002f4 	.word	0x200002f4
 80013c8:	200002ec 	.word	0x200002ec
 80013cc:	200002f0 	.word	0x200002f0
 80013d0:	200002e8 	.word	0x200002e8

080013d4 <ball_sensor>:

int32_t ball_detect[2] = {0,0};

void ball_sensor(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  static uint8_t can_data[8];

  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  switch (ball_detect_process)
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ball_sensor+0x170>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	f200 80ab 	bhi.w	8001538 <ball_sensor+0x164>
 80013e2:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <ball_sensor+0x14>)
 80013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001425 	.word	0x08001425
 80013f0:	0800143f 	.word	0x0800143f
 80013f4:	08001463 	.word	0x08001463
 80013f8:	0800147d 	.word	0x0800147d
 80013fc:	080014a1 	.word	0x080014a1
  {
  case 0:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	4850      	ldr	r0, [pc, #320]	; (8001548 <ball_sensor+0x174>)
 8001408:	f003 f970 	bl	80046ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	484d      	ldr	r0, [pc, #308]	; (8001548 <ball_sensor+0x174>)
 8001414:	f003 f96a 	bl	80046ec <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <ball_sensor+0x170>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a49      	ldr	r2, [pc, #292]	; (8001544 <ball_sensor+0x170>)
 8001420:	6013      	str	r3, [r2, #0]
    break;
 8001422:	e08d      	b.n	8001540 <ball_sensor+0x16c>
  case 1:
    adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 8001424:	4849      	ldr	r0, [pc, #292]	; (800154c <ball_sensor+0x178>)
 8001426:	f001 f91f 	bl	8002668 <HAL_ADC_GetValue>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <ball_sensor+0x17c>)
 8001430:	601a      	str	r2, [r3, #0]
    ball_detect_process++;
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <ball_sensor+0x170>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <ball_sensor+0x170>)
 800143a:	6013      	str	r3, [r2, #0]
    break;
 800143c:	e080      	b.n	8001540 <ball_sensor+0x16c>
  case 2:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	4840      	ldr	r0, [pc, #256]	; (8001548 <ball_sensor+0x174>)
 8001446:	f003 f951 	bl	80046ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001450:	483d      	ldr	r0, [pc, #244]	; (8001548 <ball_sensor+0x174>)
 8001452:	f003 f94b 	bl	80046ec <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <ball_sensor+0x170>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <ball_sensor+0x170>)
 800145e:	6013      	str	r3, [r2, #0]
    break;
 8001460:	e06e      	b.n	8001540 <ball_sensor+0x16c>
  case 3:
    adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 8001462:	483a      	ldr	r0, [pc, #232]	; (800154c <ball_sensor+0x178>)
 8001464:	f001 f900 	bl	8002668 <HAL_ADC_GetValue>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <ball_sensor+0x17c>)
 800146e:	605a      	str	r2, [r3, #4]
    ball_detect_process++;
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ball_sensor+0x170>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <ball_sensor+0x170>)
 8001478:	6013      	str	r3, [r2, #0]
    break;
 800147a:	e061      	b.n	8001540 <ball_sensor+0x16c>
  case 4:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4831      	ldr	r0, [pc, #196]	; (8001548 <ball_sensor+0x174>)
 8001484:	f003 f932 	bl	80046ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148e:	482e      	ldr	r0, [pc, #184]	; (8001548 <ball_sensor+0x174>)
 8001490:	f003 f92c 	bl	80046ec <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <ball_sensor+0x170>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <ball_sensor+0x170>)
 800149c:	6013      	str	r3, [r2, #0]
    break;
 800149e:	e04f      	b.n	8001540 <ball_sensor+0x16c>
  case 5:
    adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <ball_sensor+0x178>)
 80014a2:	f001 f8e1 	bl	8002668 <HAL_ADC_GetValue>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <ball_sensor+0x17c>)
 80014ac:	609a      	str	r2, [r3, #8]
    ball_detect_process++;
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <ball_sensor+0x170>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <ball_sensor+0x170>)
 80014b6:	6013      	str	r3, [r2, #0]
    ball_detect[0] = adc_raw[0] - adc_raw[1];
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <ball_sensor+0x17c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <ball_sensor+0x17c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <ball_sensor+0x180>)
 80014c4:	6013      	str	r3, [r2, #0]
    ball_detect[1] = adc_raw[0] - adc_raw[2];
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <ball_sensor+0x17c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <ball_sensor+0x17c>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <ball_sensor+0x180>)
 80014d2:	6053      	str	r3, [r2, #4]

    // 
    if(ball_detect[1] < 500){
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <ball_sensor+0x180>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014dc:	da06      	bge.n	80014ec <ball_sensor+0x118>
      can_data[0] = 1;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <ball_sensor+0x184>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
      can_data[1] = 0;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <ball_sensor+0x184>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	705a      	strb	r2, [r3, #1]
 80014ea:	e011      	b.n	8001510 <ball_sensor+0x13c>
    }else if(ball_detect[0] < 500){
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <ball_sensor+0x180>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f4:	da06      	bge.n	8001504 <ball_sensor+0x130>
      can_data[0] = 1;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <ball_sensor+0x184>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
      can_data[1] = 5;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <ball_sensor+0x184>)
 80014fe:	2205      	movs	r2, #5
 8001500:	705a      	strb	r2, [r3, #1]
 8001502:	e005      	b.n	8001510 <ball_sensor+0x13c>
    }else{
      can_data[0] = 0;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <ball_sensor+0x184>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
      can_data[1] = 0;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <ball_sensor+0x184>)
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]
    }
    can_header.StdId = 0x240;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <ball_sensor+0x188>)
 8001512:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001516:	601a      	str	r2, [r3, #0]
    can_header.RTR = CAN_RTR_DATA;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <ball_sensor+0x188>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    can_header.DLC = 2;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <ball_sensor+0x188>)
 8001520:	2202      	movs	r2, #2
 8001522:	611a      	str	r2, [r3, #16]
    can_header.TransmitGlobalTime = DISABLE;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <ball_sensor+0x188>)
 8001526:	2200      	movs	r2, #0
 8001528:	751a      	strb	r2, [r3, #20]
    HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <ball_sensor+0x18c>)
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <ball_sensor+0x184>)
 800152e:	490b      	ldr	r1, [pc, #44]	; (800155c <ball_sensor+0x188>)
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <ball_sensor+0x190>)
 8001532:	f001 ffca 	bl	80034ca <HAL_CAN_AddTxMessage>
    break;
 8001536:	e003      	b.n	8001540 <ball_sensor+0x16c>
  default:
	  ball_detect_process = 0;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <ball_sensor+0x170>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  break;
 800153e:	bf00      	nop
  }
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000328 	.word	0x20000328
 8001548:	48000400 	.word	0x48000400
 800154c:	2000024c 	.word	0x2000024c
 8001550:	2000032c 	.word	0x2000032c
 8001554:	20000320 	.word	0x20000320
 8001558:	20000338 	.word	0x20000338
 800155c:	20000340 	.word	0x20000340
 8001560:	20000358 	.word	0x20000358
 8001564:	200002a0 	.word	0x200002a0

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800156c:	b08d      	sub	sp, #52	; 0x34
 800156e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 fcfa 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f958 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f7ff fddc 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 800157c:	f7ff fdbc 	bl	80010f8 <MX_DMA_Init>
  MX_CAN_Init();
 8001580:	f7ff fd04 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001584:	f000 fb9a 	bl	8001cbc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001588:	f000 fbc8 	bl	8001d1c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800158c:	f000 fad8 	bl	8001b40 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001590:	f7ff fc20 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001594:	f7ff fbae 	bl	8000cf4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0426!!\n");
 8001598:	488d      	ldr	r0, [pc, #564]	; (80017d0 <main+0x268>)
 800159a:	f007 fda5 	bl	80090e8 <puts>
	HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	498c      	ldr	r1, [pc, #560]	; (80017d4 <main+0x26c>)
 80015a2:	488d      	ldr	r0, [pc, #564]	; (80017d8 <main+0x270>)
 80015a4:	f005 fba4 	bl	8006cf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	498c      	ldr	r1, [pc, #560]	; (80017dc <main+0x274>)
 80015ac:	488c      	ldr	r0, [pc, #560]	; (80017e0 <main+0x278>)
 80015ae:	f005 fb9f 	bl	8006cf0 <HAL_UART_Receive_IT>
	CAN_Filter_Init();
 80015b2:	f7ff fd6d 	bl	8001090 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 80015b6:	488b      	ldr	r0, [pc, #556]	; (80017e4 <main+0x27c>)
 80015b8:	f001 ff43 	bl	8003442 <HAL_CAN_Start>

	HAL_TIM_PWM_Init(&htim3);
 80015bc:	488a      	ldr	r0, [pc, #552]	; (80017e8 <main+0x280>)
 80015be:	f004 fcd1 	bl	8005f64 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015c2:	2108      	movs	r1, #8
 80015c4:	4888      	ldr	r0, [pc, #544]	; (80017e8 <main+0x280>)
 80015c6:	f004 fd25 	bl	8006014 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015ca:	210c      	movs	r1, #12
 80015cc:	4886      	ldr	r0, [pc, #536]	; (80017e8 <main+0x280>)
 80015ce:	f004 fd21 	bl	8006014 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR3 = 0;
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <main+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 0;
 80015da:	4b83      	ldr	r3, [pc, #524]	; (80017e8 <main+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
	servo_timeout_cnt = 0;
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <main+0x284>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
	dribbler_timeout_cnt = 0;
 80015e8:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <main+0x288>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

  uint32_t print_interval = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	487f      	ldr	r0, [pc, #508]	; (80017f4 <main+0x28c>)
 80015f6:	f001 f844 	bl	8002682 <HAL_ADCEx_Calibration_Start>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <main+0x9c>
   {
     /* Calibration Error */
  Error_Handler();
 8001600:	f000 f971 	bl	80018e6 <Error_Handler>
    }
    if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	487c      	ldr	r0, [pc, #496]	; (80017f8 <main+0x290>)
 8001608:	f001 f83b 	bl	8002682 <HAL_ADCEx_Calibration_Start>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <main+0xae>
    {
      /* Calibration Error */
      Error_Handler();
 8001612:	f000 f968 	bl	80018e6 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8001616:	4877      	ldr	r0, [pc, #476]	; (80017f4 <main+0x28c>)
 8001618:	f000 ff10 	bl	800243c <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 800161c:	4876      	ldr	r0, [pc, #472]	; (80017f8 <main+0x290>)
 800161e:	f000 ff0d 	bl	800243c <HAL_ADC_Start>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */

      HAL_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fd06 	bl	8002034 <HAL_Delay>
      ball_sensor();
 8001628:	f7ff fed4 	bl	80013d4 <ball_sensor>

      print_interval++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      if (print_interval >= 100)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b63      	cmp	r3, #99	; 0x63
 8001636:	d9f4      	bls.n	8001622 <main+0xba>
      {
			print_interval = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
      printf("can rx %3ld uart rx %4d %4d dribbler %6.3f servo %6.3f timeout %4ld %4ld ball %+5d %+5d\n", can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1]);
 800163c:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <main+0x294>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <main+0x298>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	603a      	str	r2, [r7, #0]
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <main+0x29c>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	4605      	mov	r5, r0
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <main+0x2a0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff78 	bl	8000548 <__aeabi_f2d>
 8001658:	4680      	mov	r8, r0
 800165a:	4689      	mov	r9, r1
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <main+0x2a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff71 	bl	8000548 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4961      	ldr	r1, [pc, #388]	; (80017f0 <main+0x288>)
 800166c:	6809      	ldr	r1, [r1, #0]
 800166e:	485f      	ldr	r0, [pc, #380]	; (80017ec <main+0x284>)
 8001670:	6800      	ldr	r0, [r0, #0]
 8001672:	4e67      	ldr	r6, [pc, #412]	; (8001810 <main+0x2a8>)
 8001674:	6836      	ldr	r6, [r6, #0]
 8001676:	4c66      	ldr	r4, [pc, #408]	; (8001810 <main+0x2a8>)
 8001678:	6864      	ldr	r4, [r4, #4]
 800167a:	9407      	str	r4, [sp, #28]
 800167c:	9606      	str	r6, [sp, #24]
 800167e:	9005      	str	r0, [sp, #20]
 8001680:	9104      	str	r1, [sp, #16]
 8001682:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001686:	e9cd 8900 	strd	r8, r9, [sp]
 800168a:	462b      	mov	r3, r5
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4860      	ldr	r0, [pc, #384]	; (8001814 <main+0x2ac>)
 8001692:	f007 fca3 	bl	8008fdc <iprintf>

      // TEL (LED0,PA3)
			if(uart3_rx_cnt > 0){
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <main+0x29c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <main+0x144>
			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	485c      	ldr	r0, [pc, #368]	; (8001818 <main+0x2b0>)
 80016a6:	f003 f821 	bl	80046ec <HAL_GPIO_WritePin>
 80016aa:	e005      	b.n	80016b8 <main+0x150>
			}else{

			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b2:	4859      	ldr	r0, [pc, #356]	; (8001818 <main+0x2b0>)
 80016b4:	f003 f81a 	bl	80046ec <HAL_GPIO_WritePin>
			}

			// RX (can rx,LED2,PA5)
			if(can_rx_cnt > 0){
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <main+0x294>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <main+0x166>

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	4854      	ldr	r0, [pc, #336]	; (8001818 <main+0x2b0>)
 80016c8:	f003 f810 	bl	80046ec <HAL_GPIO_WritePin>
 80016cc:	e005      	b.n	80016da <main+0x172>
			}else{

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d4:	4850      	ldr	r0, [pc, #320]	; (8001818 <main+0x2b0>)
 80016d6:	f003 f809 	bl	80046ec <HAL_GPIO_WritePin>
			}

			if(dribbler_speed != 0){
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <main+0x2a0>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	d006      	beq.n	80016f8 <main+0x190>
			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f0:	4849      	ldr	r0, [pc, #292]	; (8001818 <main+0x2b0>)
 80016f2:	f002 fffb 	bl	80046ec <HAL_GPIO_WritePin>
 80016f6:	e005      	b.n	8001704 <main+0x19c>
			}else{

			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fe:	4846      	ldr	r0, [pc, #280]	; (8001818 <main+0x2b0>)
 8001700:	f002 fff4 	bl	80046ec <HAL_GPIO_WritePin>
			}


			can_rx_cnt = 0;
 8001704:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <main+0x294>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
			uart_rx_cnt = 0;
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <main+0x298>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <main+0x29c>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f002 ffcd 	bl	80046bc <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	d112      	bne.n	800174e <main+0x1e6>
				htim3.Instance->CCR3 = 1500 + 600*dribbler_speed;	// esc
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <main+0x2a0>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800181c <main+0x2b4>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001820 <main+0x2b8>
 800173a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <main+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001746:	ee17 2a90 	vmov	r2, s15
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
 800174c:	e004      	b.n	8001758 <main+0x1f0>
			}else{
				htim3.Instance->CCR3 = 1500 + 300;	// esc
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <main+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8001758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175c:	4831      	ldr	r0, [pc, #196]	; (8001824 <main+0x2bc>)
 800175e:	f002 ffad 	bl	80046bc <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d112      	bne.n	800178e <main+0x226>
				htim3.Instance->CCR4 = 1500 + 600*serv_angle;	// servo
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <main+0x2a4>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800181c <main+0x2b4>
 8001772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001776:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001820 <main+0x2b8>
 800177a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <main+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001786:	ee17 2a90 	vmov	r2, s15
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
 800178c:	e004      	b.n	8001798 <main+0x230>
			}else{
				htim3.Instance->CCR4 = 1500 + 300;	// servo
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <main+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
			}


			dribbler_timeout_cnt++;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <main+0x288>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <main+0x288>)
 80017a0:	6013      	str	r3, [r2, #0]
			servo_timeout_cnt++;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <main+0x284>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a10      	ldr	r2, [pc, #64]	; (80017ec <main+0x284>)
 80017aa:	6013      	str	r3, [r2, #0]
			if(dribbler_timeout_cnt > 50){
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <main+0x288>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b32      	cmp	r3, #50	; 0x32
 80017b2:	dd03      	ble.n	80017bc <main+0x254>
				dribbler_speed = 0;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <main+0x2a0>)
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
			}
			if(servo_timeout_cnt > 50){
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <main+0x284>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b32      	cmp	r3, #50	; 0x32
 80017c2:	f77f af2e 	ble.w	8001622 <main+0xba>
				serv_angle = 0;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <main+0x2a4>)
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
      HAL_Delay(1);
 80017ce:	e728      	b.n	8001622 <main+0xba>
 80017d0:	0800cd00 	.word	0x0800cd00
 80017d4:	200002d4 	.word	0x200002d4
 80017d8:	20000430 	.word	0x20000430
 80017dc:	200002c8 	.word	0x200002c8
 80017e0:	200003ac 	.word	0x200003ac
 80017e4:	200002a0 	.word	0x200002a0
 80017e8:	20000360 	.word	0x20000360
 80017ec:	200002f0 	.word	0x200002f0
 80017f0:	200002f4 	.word	0x200002f4
 80017f4:	200001fc 	.word	0x200001fc
 80017f8:	2000024c 	.word	0x2000024c
 80017fc:	200002f8 	.word	0x200002f8
 8001800:	200002e0 	.word	0x200002e0
 8001804:	200002e4 	.word	0x200002e4
 8001808:	200002ec 	.word	0x200002ec
 800180c:	200002e8 	.word	0x200002e8
 8001810:	20000320 	.word	0x20000320
 8001814:	0800cd18 	.word	0x0800cd18
 8001818:	48000800 	.word	0x48000800
 800181c:	44160000 	.word	0x44160000
 8001820:	44bb8000 	.word	0x44bb8000
 8001824:	48000400 	.word	0x48000400

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b09e      	sub	sp, #120	; 0x78
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001832:	2228      	movs	r2, #40	; 0x28
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fd4e 	bl	80082d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	223c      	movs	r2, #60	; 0x3c
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fd40 	bl	80082d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001858:	2301      	movs	r3, #1
 800185a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001866:	2301      	movs	r3, #1
 8001868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186a:	2302      	movs	r3, #2
 800186c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001872:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001874:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001878:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800187e:	4618      	mov	r0, r3
 8001880:	f002 ff4c 	bl	800471c <HAL_RCC_OscConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800188a:	f000 f82c 	bl	80018e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188e:	230f      	movs	r3, #15
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001892:	2302      	movs	r3, #2
 8001894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018a8:	2102      	movs	r1, #2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 ff74 	bl	8005798 <HAL_RCC_ClockConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018b6:	f000 f816 	bl	80018e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80018ba:	2385      	movs	r3, #133	; 0x85
 80018bc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 f998 	bl	8005c04 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80018da:	f000 f804 	bl	80018e6 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	3778      	adds	r7, #120	; 0x78
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ea:	b672      	cpsid	i
}
 80018ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ee:	e7fe      	b.n	80018ee <Error_Handler+0x8>

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_MspInit+0x44>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_MspInit+0x44>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_MspInit+0x44>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x44>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x44>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x44>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 fb36 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Channel4_IRQHandler+0x10>)
 8001992:	f002 fc0b 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200004b4 	.word	0x200004b4

080019a0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80019a6:	f001 ffa3 	bl	80038f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002a0 	.word	0x200002a0

080019b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <USART1_IRQHandler+0x10>)
 80019ba:	f005 fa77 	bl	8006eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003ac 	.word	0x200003ac

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e2:	f006 fc4f 	bl	8008284 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f006 fbd0 	bl	8008284 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20008000 	.word	0x20008000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000035c 	.word	0x2000035c
 8001b18:	20000510 	.word	0x20000510

08001b1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b66:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <MX_TIM3_Init+0xc8>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b6c:	2248      	movs	r2, #72	; 0x48
 8001b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b78:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b8a:	481e      	ldr	r0, [pc, #120]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001b8c:	f004 f9ea 	bl	8005f64 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b96:	f7ff fea6 	bl	80018e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4816      	ldr	r0, [pc, #88]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001baa:	f004 ffd3 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001bb4:	f7ff fe97 	bl	80018e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	; 0x60
 8001bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8001bbc:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2208      	movs	r2, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001bd2:	f004 fb1f 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001bdc:	f7ff fe83 	bl	80018e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	220c      	movs	r2, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001be8:	f004 fb14 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001bf2:	f7ff fe78 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM3_Init+0xc4>)
 8001bf8:	f000 f828 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000360 	.word	0x20000360
 8001c08:	40000400 	.word	0x40000400

08001c0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_TIM_PWM_MspInit+0x38>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_TIM_MspPostInit+0x64>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11b      	bne.n	8001ca6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6153      	str	r3, [r2, #20]
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c86:	2303      	movs	r3, #3
 8001c88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca2:	f002 fb91 	bl	80043c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400

08001cbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cc2:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <MX_USART1_UART_Init+0x58>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <MX_USART1_UART_Init+0x5c>)
 8001cca:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_USART1_UART_Init+0x54>)
 8001cfe:	f004 ffa9 	bl	8006c54 <HAL_UART_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d08:	f7ff fded 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200003ac 	.word	0x200003ac
 8001d14:	40013800 	.word	0x40013800
 8001d18:	001e8480 	.word	0x001e8480

08001d1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_USART3_UART_Init+0x5c>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART3_UART_Init+0x58>)
 8001d60:	f004 ff78 	bl	8006c54 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f7ff fdbc 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000430 	.word	0x20000430
 8001d78:	40004800 	.word	0x40004800

08001d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_UART_MspInit+0x180>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d16a      	bne.n	8001e74 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6193      	str	r3, [r2, #24]
 8001daa:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	6153      	str	r3, [r2, #20]
 8001dc2:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de0:	2307      	movs	r3, #7
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f002 faeb 	bl	80043c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e04:	2307      	movs	r3, #7
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f002 fad9 	bl	80043c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e18:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_UART_MspInit+0x18c>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e1e:	2210      	movs	r2, #16
 8001e20:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e46:	482f      	ldr	r0, [pc, #188]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e48:	f002 f893 	bl	8003f72 <HAL_DMA_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001e52:	f7ff fd48 	bl	80018e6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <HAL_UART_MspInit+0x188>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2025      	movs	r0, #37	; 0x25
 8001e68:	f002 f84d 	bl	8003f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e6c:	2025      	movs	r0, #37	; 0x25
 8001e6e:	f002 f866 	bl	8003f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e72:	e03e      	b.n	8001ef2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_UART_MspInit+0x190>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d139      	bne.n	8001ef2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_UART_MspInit+0x184>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4811      	ldr	r0, [pc, #68]	; (8001f10 <HAL_UART_MspInit+0x194>)
 8001ecc:	f002 fa7c 	bl	80043c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <HAL_UART_MspInit+0x194>)
 8001eee:	f002 fa6b 	bl	80043c8 <HAL_GPIO_Init>
}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	; 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	200004b4 	.word	0x200004b4
 8001f08:	40020044 	.word	0x40020044
 8001f0c:	40004800 	.word	0x40004800
 8001f10:	48000400 	.word	0x48000400

08001f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490e      	ldr	r1, [pc, #56]	; (8001f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0b      	ldr	r4, [pc, #44]	; (8001f60 <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f3e:	f7ff fded 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f006 f9a5 	bl	8008290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f46:	f7ff fb0f 	bl	8001568 <main>

08001f4a <LoopForever>:

LoopForever:
    b LoopForever
 8001f4a:	e7fe      	b.n	8001f4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f58:	0800d264 	.word	0x0800d264
  ldr r2, =_sbss
 8001f5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f60:	2000050c 	.word	0x2000050c

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f001 ffb9 	bl	8003ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fcb4 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 ffd1 	bl	8003f5a <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f001 ff99 	bl	8003f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	200004f8 	.word	0x200004f8

0800201c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200004f8 	.word	0x200004f8

08002034 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b09a      	sub	sp, #104	; 0x68
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e1c9      	b.n	8002430 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d176      	bne.n	800219c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d152      	bne.n	800215c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe fedd 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d13b      	bne.n	800215c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 ff81 	bl	8002fec <ADC_Disable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12f      	bne.n	800215c <HAL_ADC_Init+0xe0>
 80020fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12b      	bne.n	800215c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800210c:	f023 0302 	bic.w	r3, r3, #2
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002126:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002136:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002138:	4b86      	ldr	r3, [pc, #536]	; (8002354 <HAL_ADC_Init+0x2d8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a86      	ldr	r2, [pc, #536]	; (8002358 <HAL_ADC_Init+0x2dc>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9a      	lsrs	r2, r3, #18
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214e:	e002      	b.n	8002156 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f9      	bne.n	8002150 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002178:	d110      	bne.n	800219c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f023 0312 	bic.w	r3, r3, #18
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8136 	bne.w	8002416 <HAL_ADC_Init+0x39a>
 80021aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8131 	bne.w	8002416 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8129 	bne.w	8002416 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021cc:	f043 0202 	orr.w	r2, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_Init+0x16c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_ADC_Init+0x2e0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_Init+0x170>
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_ADC_Init+0x2e4>)
 80021ea:	e000      	b.n	80021ee <HAL_ADC_Init+0x172>
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_ADC_Init+0x2e8>)
 80021ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_Init+0x184>
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_ADC_Init+0x2e0>)
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e01a      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_ADC_Init+0x2e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <HAL_ADC_Init+0x196>
 800220a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e011      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a54      	ldr	r2, [pc, #336]	; (8002368 <HAL_ADC_Init+0x2ec>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADC_Init+0x1a6>
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_ADC_Init+0x2f0>)
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e009      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_ADC_Init+0x2f0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_ADC_Init+0x1b6>
 800222c:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_ADC_Init+0x2ec>)
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e001      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_ADC_Init+0x1da>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x1da>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_ADC_Init+0x1dc>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11c      	bne.n	8002296 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800225c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_ADC_Init+0x202>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x202>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_ADC_Init+0x204>
 800227e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002294:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e5b      	ldrb	r3, [r3, #25]
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a0:	2a01      	cmp	r2, #1
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Init+0x22e>
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x230>
 80022aa:	2200      	movs	r2, #0
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022bc:	4313      	orrs	r3, r2
 80022be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d11b      	bne.n	8002302 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	045a      	lsls	r2, r3, #17
 80022da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022dc:	4313      	orrs	r3, r2
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
 80022e4:	e00d      	b.n	8002302 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b01      	cmp	r3, #1
 8002308:	d03a      	beq.n	8002380 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_ADC_Init+0x2ec>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_ADC_Init+0x2a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_ADC_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d128      	bne.n	8002370 <HAL_ADC_Init+0x2f4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002326:	d012      	beq.n	800234e <HAL_ADC_Init+0x2d2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002330:	d00a      	beq.n	8002348 <HAL_ADC_Init+0x2cc>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Init+0x2c6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	e018      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002346:	e015      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002348:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800234c:	e012      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 800234e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002352:	e00f      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	50000400 	.word	0x50000400
 800236c:	50000500 	.word	0x50000500
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002378:	4313      	orrs	r3, r2
 800237a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800237c:	4313      	orrs	r3, r2
 800237e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d114      	bne.n	80023b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e1b      	ldrb	r3, [r3, #24]
 80023a6:	039a      	lsls	r2, r3, #14
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4313      	orrs	r3, r2
 80023b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b4:	4313      	orrs	r3, r2
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_ADC_Init+0x3bc>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023c8:	430b      	orrs	r3, r1
 80023ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10c      	bne.n	80023ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f023 010f 	bic.w	r1, r3, #15
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	1e5a      	subs	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
 80023ec:	e007      	b.n	80023fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020f 	bic.w	r2, r2, #15
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f023 0303 	bic.w	r3, r3, #3
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
 8002414:	e00a      	b.n	800242c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f023 0312 	bic.w	r3, r3, #18
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800242c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002430:	4618      	mov	r0, r3
 8002432:	3768      	adds	r7, #104	; 0x68
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fff0c007 	.word	0xfff0c007

0800243c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80f9 	bne.w	800264a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Start+0x2a>
 8002462:	2302      	movs	r3, #2
 8002464:	e0f4      	b.n	8002650 <HAL_ADC_Start+0x214>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fd58 	bl	8002f24 <ADC_Enable>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80e0 	bne.w	8002640 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_Start+0x6c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6d      	ldr	r2, [pc, #436]	; (8002658 <HAL_ADC_Start+0x21c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_Start+0x7a>
 80024a8:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_ADC_Start+0x220>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <HAL_ADC_Start+0x9a>
 80024b4:	e005      	b.n	80024c2 <HAL_ADC_Start+0x86>
 80024b6:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_ADC_Start+0x224>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_ADC_Start+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ca:	d004      	beq.n	80024d6 <HAL_ADC_Start+0x9a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_ADC_Start+0x228>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d115      	bne.n	8002502 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d036      	beq.n	800255e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002500:	e02d      	b.n	800255e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002516:	d004      	beq.n	8002522 <HAL_ADC_Start+0xe6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a4e      	ldr	r2, [pc, #312]	; (8002658 <HAL_ADC_Start+0x21c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_Start+0xfc>
 8002522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e008      	b.n	800254a <HAL_ADC_Start+0x10e>
 8002538:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_ADC_Start+0x228>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002556:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256a:	d106      	bne.n	800257a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f023 0206 	bic.w	r2, r3, #6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
 8002578:	e002      	b.n	8002580 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	221c      	movs	r2, #28
 800258e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_Start+0x168>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2e      	ldr	r2, [pc, #184]	; (8002658 <HAL_ADC_Start+0x21c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_Start+0x176>
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_ADC_Start+0x220>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03e      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 80025b0:	e005      	b.n	80025be <HAL_ADC_Start+0x182>
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_ADC_Start+0x224>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d037      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Start+0x196>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_ADC_Start+0x21c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d106      	bne.n	80025e0 <HAL_ADC_Start+0x1a4>
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_ADC_Start+0x220>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d027      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 80025de:	e005      	b.n	80025ec <HAL_ADC_Start+0x1b0>
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_ADC_Start+0x224>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d020      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d004      	beq.n	8002600 <HAL_ADC_Start+0x1c4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_ADC_Start+0x21c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d106      	bne.n	800260e <HAL_ADC_Start+0x1d2>
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_ADC_Start+0x220>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2b09      	cmp	r3, #9
 800260a:	d010      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 800260c:	e005      	b.n	800261a <HAL_ADC_Start+0x1de>
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_ADC_Start+0x224>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b09      	cmp	r3, #9
 8002618:	d009      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002622:	d004      	beq.n	800262e <HAL_ADC_Start+0x1f2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_ADC_Start+0x228>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10f      	bne.n	800264e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0204 	orr.w	r2, r2, #4
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e006      	b.n	800264e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002648:	e001      	b.n	800264e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	50000700 	.word	0x50000700
 8002664:	50000400 	.word	0x50000400

08002668 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADCEx_Calibration_Start+0x1c>
 800269a:	2302      	movs	r3, #2
 800269c:	e05f      	b.n	800275e <HAL_ADCEx_Calibration_Start+0xdc>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fca0 	bl	8002fec <ADC_Disable>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14e      	bne.n	8002754 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026ca:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026f0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80026f2:	f7ff fc93 	bl	800201c <HAL_GetTick>
 80026f6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026f8:	e01c      	b.n	8002734 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026fa:	f7ff fc8f 	bl	800201c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d915      	bls.n	8002734 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002716:	d10d      	bne.n	8002734 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f023 0312 	bic.w	r3, r3, #18
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e014      	b.n	800275e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800273e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002742:	d0da      	beq.n	80026fa <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b09b      	sub	sp, #108	; 0x6c
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x22>
 8002786:	2302      	movs	r3, #2
 8002788:	e2ca      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x5b8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 82ae 	bne.w	8002cfe <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d81c      	bhi.n	80027e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	461a      	mov	r2, r3
 80027be:	231f      	movs	r3, #31
 80027c0:	4093      	lsls	r3, r2
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4019      	ands	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
 80027e2:	e063      	b.n	80028ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d81e      	bhi.n	800282a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	3b1e      	subs	r3, #30
 8002800:	221f      	movs	r2, #31
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	4019      	ands	r1, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	3b1e      	subs	r3, #30
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	635a      	str	r2, [r3, #52]	; 0x34
 8002828:	e040      	b.n	80028ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b0e      	cmp	r3, #14
 8002830:	d81e      	bhi.n	8002870 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	3b3c      	subs	r3, #60	; 0x3c
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	4019      	ands	r1, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	3b3c      	subs	r3, #60	; 0x3c
 8002862:	fa00 f203 	lsl.w	r2, r0, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
 800286e:	e01d      	b.n	80028ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3b5a      	subs	r3, #90	; 0x5a
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	4019      	ands	r1, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	3b5a      	subs	r3, #90	; 0x5a
 80028a0:	fa00 f203 	lsl.w	r2, r0, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 80e5 	bne.w	8002a86 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d91c      	bls.n	80028fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6999      	ldr	r1, [r3, #24]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6898      	ldr	r0, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	3b1e      	subs	r3, #30
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	619a      	str	r2, [r3, #24]
 80028fc:	e019      	b.n	8002932 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6959      	ldr	r1, [r3, #20]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	4019      	ands	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	fa00 f203 	lsl.w	r2, r0, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	3b01      	subs	r3, #1
 8002950:	2b03      	cmp	r3, #3
 8002952:	d84f      	bhi.n	80029f4 <HAL_ADC_ConfigChannel+0x28c>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_ADC_ConfigChannel+0x1f4>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	0800296d 	.word	0x0800296d
 8002960:	0800298f 	.word	0x0800298f
 8002964:	080029b1 	.word	0x080029b1
 8002968:	080029d3 	.word	0x080029d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002972:	4b9a      	ldr	r3, [pc, #616]	; (8002bdc <HAL_ADC_ConfigChannel+0x474>)
 8002974:	4013      	ands	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	0691      	lsls	r1, r2, #26
 800297c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800297e:	430a      	orrs	r2, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800298c:	e07e      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002994:	4b91      	ldr	r3, [pc, #580]	; (8002bdc <HAL_ADC_ConfigChannel+0x474>)
 8002996:	4013      	ands	r3, r2
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	0691      	lsls	r1, r2, #26
 800299e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029a0:	430a      	orrs	r2, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029ae:	e06d      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029b6:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <HAL_ADC_ConfigChannel+0x474>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	0691      	lsls	r1, r2, #26
 80029c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029c2:	430a      	orrs	r2, r1
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029d0:	e05c      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <HAL_ADC_ConfigChannel+0x474>)
 80029da:	4013      	ands	r3, r2
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	0691      	lsls	r1, r2, #26
 80029e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e4:	430a      	orrs	r2, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029f2:	e04b      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a16:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	069b      	lsls	r3, r3, #26
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a3a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a5e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	069b      	lsls	r3, r3, #26
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10a      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a82:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a84:	e001      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002a8a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d108      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x344>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x344>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_ConfigChannel+0x346>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8130 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d00f      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002ada:	e049      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d91c      	bls.n	8002b38 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6999      	ldr	r1, [r3, #24]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1b      	subs	r3, #27
 8002b10:	2207      	movs	r2, #7
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	4019      	ands	r1, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6898      	ldr	r0, [r3, #8]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1b      	subs	r3, #27
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
 8002b36:	e01b      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6959      	ldr	r1, [r3, #20]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4019      	ands	r1, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6898      	ldr	r0, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	fa00 f203 	lsl.w	r2, r0, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x41c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_ADC_ConfigChannel+0x478>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x420>
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_ADC_ConfigChannel+0x47c>)
 8002b86:	e000      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x422>
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_ADC_ConfigChannel+0x480>)
 8002b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ba4:	2b11      	cmp	r3, #17
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	f040 80ab 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 80a4 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x484>
 8002bd6:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <HAL_ADC_ConfigChannel+0x478>)
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e022      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4ba>
 8002bdc:	83fff000 	.word	0x83fff000
 8002be0:	50000100 	.word	0x50000100
 8002be4:	50000300 	.word	0x50000300
 8002be8:	50000700 	.word	0x50000700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	; (8002d2c <HAL_ADC_ConfigChannel+0x5c4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x496>
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e011      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4ba>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x4a6>
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e009      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4ba>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a48      	ldr	r2, [pc, #288]	; (8002d34 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4b6>
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4ba>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4da>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4da>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x4dc>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d150      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x502>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x502>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x504>
 8002c6a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13c      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11d      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x54c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d118      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_ADC_ConfigChannel+0x5d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_ADC_ConfigChannel+0x5d4>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	0c9a      	lsrs	r2, r3, #18
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cb2:	e02e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x56c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	d11a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce8:	e013      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002cfc:	e00a      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d12:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	376c      	adds	r7, #108	; 0x6c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	50000100 	.word	0x50000100
 8002d30:	50000400 	.word	0x50000400
 8002d34:	50000500 	.word	0x50000500
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	431bde83 	.word	0x431bde83

08002d40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b099      	sub	sp, #100	; 0x64
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d58:	d102      	bne.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	e01a      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d103      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e011      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a67      	ldr	r2, [pc, #412]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e009      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a64      	ldr	r2, [pc, #400]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	e001      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b0      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0a9      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 808d 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8086 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002de8:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002dea:	e000      	b.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002dee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d040      	beq.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e0a:	035b      	lsls	r3, r3, #13
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e12:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15c      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002e56:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d14b      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	6811      	ldr	r1, [r2, #0]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	6892      	ldr	r2, [r2, #8]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e78:	e03c      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d108      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d123      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002ec8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002edc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f02:	4618      	mov	r0, r3
 8002f04:	3764      	adds	r7, #100	; 0x64
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000400 	.word	0x50000400
 8002f18:	50000500 	.word	0x50000500
 8002f1c:	50000300 	.word	0x50000300
 8002f20:	50000700 	.word	0x50000700

08002f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d108      	bne.n	8002f50 <ADC_Enable+0x2c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <ADC_Enable+0x2c>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <ADC_Enable+0x2e>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d143      	bne.n	8002fde <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <ADC_Enable+0xc4>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e02f      	b.n	8002fe0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f90:	f7ff f844 	bl	800201c <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f96:	e01b      	b.n	8002fd0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f98:	f7ff f840 	bl	800201c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d914      	bls.n	8002fd0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d00d      	beq.n	8002fd0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d1dc      	bne.n	8002f98 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	8000003f 	.word	0x8000003f

08002fec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <ADC_Disable+0x2c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <ADC_Disable+0x2c>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <ADC_Disable+0x2e>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d047      	beq.n	80030ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030d 	and.w	r3, r3, #13
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10f      	bne.n	800304c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0202 	orr.w	r2, r2, #2
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2203      	movs	r2, #3
 8003042:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003044:	f7fe ffea 	bl	800201c <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800304a:	e029      	b.n	80030a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e023      	b.n	80030b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003068:	f7fe ffd8 	bl	800201c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d914      	bls.n	80030a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10d      	bne.n	80030a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0210 	orr.w	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e007      	b.n	80030b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d0dc      	beq.n	8003068 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0ed      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd ff8e 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ec:	f7fe ff96 	bl	800201c <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030f2:	e012      	b.n	800311a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f4:	f7fe ff92 	bl	800201c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b0a      	cmp	r3, #10
 8003100:	d90b      	bls.n	800311a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2205      	movs	r2, #5
 8003112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0c5      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0e5      	beq.n	80030f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0202 	bic.w	r2, r2, #2
 8003136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003138:	f7fe ff70 	bl	800201c <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800313e:	e012      	b.n	8003166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003140:	f7fe ff6c 	bl	800201c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d90b      	bls.n	8003166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e09f      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d108      	bne.n	800318e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e007      	b.n	800319e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7e5b      	ldrb	r3, [r3, #25]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e007      	b.n	80031c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e9b      	ldrb	r3, [r3, #26]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0220 	bic.w	r2, r2, #32
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7edb      	ldrb	r3, [r3, #27]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0210 	bic.w	r2, r2, #16
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0210 	orr.w	r2, r2, #16
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7f1b      	ldrb	r3, [r3, #28]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f5b      	ldrb	r3, [r3, #29]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0204 	orr.w	r2, r2, #4
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	ea42 0103 	orr.w	r1, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d003      	beq.n	80032d4 <HAL_CAN_ConfigFilter+0x26>
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	f040 80aa 	bne.w	8003428 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d123      	bne.n	8003356 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003330:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3248      	adds	r2, #72	; 0x48
 8003336:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800334a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	3348      	adds	r3, #72	; 0x48
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d122      	bne.n	80033a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	431a      	orrs	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800337e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3248      	adds	r2, #72	; 0x48
 8003384:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003398:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	3348      	adds	r3, #72	; 0x48
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033be:	e007      	b.n	80033d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033ea:	e007      	b.n	80033fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	431a      	orrs	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e006      	b.n	8003436 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12e      	bne.n	80034b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800346e:	f7fe fdd5 	bl	800201c <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003474:	e012      	b.n	800349c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003476:	f7fe fdd1 	bl	800201c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b0a      	cmp	r3, #10
 8003482:	d90b      	bls.n	800349c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2205      	movs	r2, #5
 8003494:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e012      	b.n	80034c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e006      	b.n	80034c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b089      	sub	sp, #36	; 0x24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d003      	beq.n	80034f6 <HAL_CAN_AddTxMessage+0x2c>
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	f040 80b8 	bne.w	8003666 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a0 	beq.w	8003656 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	0e1b      	lsrs	r3, r3, #24
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d907      	bls.n	8003536 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e09e      	b.n	8003674 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003536:	2201      	movs	r2, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	409a      	lsls	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	6809      	ldr	r1, [r1, #0]
 8003556:	431a      	orrs	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3318      	adds	r3, #24
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	440b      	add	r3, r1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00f      	b.n	8003584 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800356e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003578:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3318      	adds	r3, #24
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3318      	adds	r3, #24
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	440b      	add	r3, r1
 8003594:	3304      	adds	r3, #4
 8003596:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	7d1b      	ldrb	r3, [r3, #20]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d111      	bne.n	80035c4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3318      	adds	r3, #24
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	6811      	ldr	r1, [r2, #0]
 80035b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3318      	adds	r3, #24
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	440b      	add	r3, r1
 80035c0:	3304      	adds	r3, #4
 80035c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3307      	adds	r3, #7
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	061a      	lsls	r2, r3, #24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3306      	adds	r3, #6
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3305      	adds	r3, #5
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4313      	orrs	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	3204      	adds	r2, #4
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	4610      	mov	r0, r2
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	6811      	ldr	r1, [r2, #0]
 80035ec:	ea43 0200 	orr.w	r2, r3, r0
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3303      	adds	r3, #3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	061a      	lsls	r2, r3, #24
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3302      	adds	r3, #2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3301      	adds	r3, #1
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	4313      	orrs	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	4610      	mov	r0, r2
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	ea43 0200 	orr.w	r2, r3, r0
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	440b      	add	r3, r1
 800362c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003630:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3318      	adds	r3, #24
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	6811      	ldr	r1, [r2, #0]
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3318      	adds	r3, #24
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	440b      	add	r3, r1
 8003650:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e00e      	b.n	8003674 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e006      	b.n	8003674 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3724      	adds	r7, #36	; 0x24
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d003      	beq.n	80036a4 <HAL_CAN_GetRxMessage+0x24>
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f040 80f3 	bne.w	800388a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10e      	bne.n	80036c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0e7      	b.n	8003898 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0d8      	b.n	8003898 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	331b      	adds	r3, #27
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0204 	and.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10c      	bne.n	800371e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	331b      	adds	r3, #27
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4413      	add	r3, r2
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0d5b      	lsrs	r3, r3, #21
 8003714:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e00b      	b.n	8003736 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	331b      	adds	r3, #27
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	331b      	adds	r3, #27
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0202 	and.w	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	331b      	adds	r3, #27
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	331b      	adds	r3, #27
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	b2da      	uxtb	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	331b      	adds	r3, #27
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0a1a      	lsrs	r2, r3, #8
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0c1a      	lsrs	r2, r3, #16
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3302      	adds	r3, #2
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0e1a      	lsrs	r2, r3, #24
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3303      	adds	r3, #3
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	3304      	adds	r3, #4
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0a1a      	lsrs	r2, r3, #8
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	3305      	adds	r3, #5
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4413      	add	r3, r2
 8003834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0c1a      	lsrs	r2, r3, #16
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3306      	adds	r3, #6
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4413      	add	r3, r2
 800384e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e1a      	lsrs	r2, r3, #24
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	3307      	adds	r3, #7
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d108      	bne.n	8003876 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0220 	orr.w	r2, r2, #32
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e007      	b.n	8003886 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0220 	orr.w	r2, r2, #32
 8003884:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e006      	b.n	8003898 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <HAL_CAN_ActivateNotification+0x1e>
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d109      	bne.n	80038d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6959      	ldr	r1, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e006      	b.n	80038e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d07c      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f983 	bl	8003c5e <HAL_CAN_TxMailbox0CompleteCallback>
 8003958:	e016      	b.n	8003988 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e00c      	b.n	8003988 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	e002      	b.n	8003988 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f989 	bl	8003c9a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f963 	bl	8003c72 <HAL_CAN_TxMailbox1CompleteCallback>
 80039ac:	e016      	b.n	80039dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e00c      	b.n	80039dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
 80039d4:	e002      	b.n	80039dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f969 	bl	8003cae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d024      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f943 	bl	8003c86 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a00:	e016      	b.n	8003a30 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e00c      	b.n	8003a30 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e002      	b.n	8003a30 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f949 	bl	8003cc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f930 	bl	8003cd6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fc56 	bl	8001340 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f912 	bl	8003cfe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8f9 	bl	8003cea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8fc 	bl	8003d12 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2208      	movs	r2, #8
 8003b34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8f5 	bl	8003d26 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d07b      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d072      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d043      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03e      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bbe:	2b60      	cmp	r3, #96	; 0x60
 8003bc0:	d02b      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x32a>
 8003bc2:	2b60      	cmp	r3, #96	; 0x60
 8003bc4:	d82e      	bhi.n	8003c24 <HAL_CAN_IRQHandler+0x334>
 8003bc6:	2b50      	cmp	r3, #80	; 0x50
 8003bc8:	d022      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x320>
 8003bca:	2b50      	cmp	r3, #80	; 0x50
 8003bcc:	d82a      	bhi.n	8003c24 <HAL_CAN_IRQHandler+0x334>
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d019      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x316>
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d826      	bhi.n	8003c24 <HAL_CAN_IRQHandler+0x334>
 8003bd6:	2b30      	cmp	r3, #48	; 0x30
 8003bd8:	d010      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x30c>
 8003bda:	2b30      	cmp	r3, #48	; 0x30
 8003bdc:	d822      	bhi.n	8003c24 <HAL_CAN_IRQHandler+0x334>
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d002      	beq.n	8003be8 <HAL_CAN_IRQHandler+0x2f8>
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d005      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003be6:	e01d      	b.n	8003c24 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bf0:	e019      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bfa:	e014      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f043 0320 	orr.w	r3, r3, #32
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c04:	e00f      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c0e:	e00a      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c18:	e005      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c22:	e000      	b.n	8003c26 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c24:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c34:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f872 	bl	8003d3a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c56:	bf00      	nop
 8003c58:	3728      	adds	r7, #40	; 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <__NVIC_SetPriorityGrouping+0x44>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <__NVIC_SetPriorityGrouping+0x44>)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60d3      	str	r3, [r2, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	0a1b      	lsrs	r3, r3, #8
 8003da2:	f003 0307 	and.w	r3, r3, #7
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	db0b      	blt.n	8003dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	4907      	ldr	r1, [pc, #28]	; (8003dec <__NVIC_EnableIRQ+0x38>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000e100 	.word	0xe000e100

08003df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	db0a      	blt.n	8003e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	490c      	ldr	r1, [pc, #48]	; (8003e3c <__NVIC_SetPriority+0x4c>)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	440b      	add	r3, r1
 8003e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e18:	e00a      	b.n	8003e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4908      	ldr	r1, [pc, #32]	; (8003e40 <__NVIC_SetPriority+0x50>)
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3b04      	subs	r3, #4
 8003e28:	0112      	lsls	r2, r2, #4
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	761a      	strb	r2, [r3, #24]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000e100 	.word	0xe000e100
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	; 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f1c3 0307 	rsb	r3, r3, #7
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	bf28      	it	cs
 8003e62:	2304      	movcs	r3, #4
 8003e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d902      	bls.n	8003e74 <NVIC_EncodePriority+0x30>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3b03      	subs	r3, #3
 8003e72:	e000      	b.n	8003e76 <NVIC_EncodePriority+0x32>
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	401a      	ands	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	4313      	orrs	r3, r2
         );
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebc:	d301      	bcc.n	8003ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00f      	b.n	8003ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <SysTick_Config+0x40>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eca:	210f      	movs	r1, #15
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	f7ff ff8e 	bl	8003df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <SysTick_Config+0x40>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <SysTick_Config+0x40>)
 8003edc:	2207      	movs	r2, #7
 8003ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010

08003ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff29 	bl	8003d50 <__NVIC_SetPriorityGrouping>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b086      	sub	sp, #24
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f18:	f7ff ff3e 	bl	8003d98 <__NVIC_GetPriorityGrouping>
 8003f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	6978      	ldr	r0, [r7, #20]
 8003f24:	f7ff ff8e 	bl	8003e44 <NVIC_EncodePriority>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff5d 	bl	8003df0 <__NVIC_SetPriority>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff31 	bl	8003db4 <__NVIC_EnableIRQ>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ffa2 	bl	8003eac <SysTick_Config>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e037      	b.n	8003ff8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9b8 	bl	8004350 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}  
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DMA_Start_IT+0x20>
 800401c:	2302      	movs	r3, #2
 800401e:	e04a      	b.n	80040b6 <HAL_DMA_Start_IT+0xb6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800402e:	2b01      	cmp	r3, #1
 8004030:	d13a      	bne.n	80040a8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f94b 	bl	80042f2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 020e 	orr.w	r2, r2, #14
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e00f      	b.n	8004096 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 020a 	orr.w	r2, r2, #10
 8004084:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0204 	bic.w	r2, r2, #4
 8004094:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e005      	b.n	80040b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
 80040b2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d008      	beq.n	80040e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2204      	movs	r2, #4
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e020      	b.n	8004124 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 020e 	bic.w	r2, r2, #14
 80040f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2101      	movs	r1, #1
 800410c:	fa01 f202 	lsl.w	r2, r1, r2
 8004110:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004142:	2b02      	cmp	r3, #2
 8004144:	d005      	beq.n	8004152 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2204      	movs	r2, #4
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e027      	b.n	80041a2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020e 	bic.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
    } 
  }
  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2204      	movs	r2, #4
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d024      	beq.n	800421e <HAL_DMA_IRQHandler+0x72>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01f      	beq.n	800421e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	2104      	movs	r1, #4
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d06a      	beq.n	80042ea <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800421c:	e065      	b.n	80042ea <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2202      	movs	r2, #2
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02c      	beq.n	8004288 <HAL_DMA_IRQHandler+0xdc>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d027      	beq.n	8004288 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 020a 	bic.w	r2, r2, #10
 8004254:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	2102      	movs	r1, #2
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d035      	beq.n	80042ea <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004286:	e030      	b.n	80042ea <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2208      	movs	r2, #8
 800428e:	409a      	lsls	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <HAL_DMA_IRQHandler+0x13e>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d023      	beq.n	80042ea <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 020e 	bic.w	r2, r2, #14
 80042b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
    }
  }
}  
 80042e8:	e7ff      	b.n	80042ea <HAL_DMA_IRQHandler+0x13e>
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f202 	lsl.w	r2, r1, r2
 800430e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b10      	cmp	r3, #16
 800431e:	d108      	bne.n	8004332 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004330:	e007      	b.n	8004342 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <DMA_CalcBaseAndBitshift+0x60>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d80f      	bhi.n	8004384 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <DMA_CalcBaseAndBitshift+0x64>)
 800436c:	4413      	add	r3, r2
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <DMA_CalcBaseAndBitshift+0x6c>)
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004382:	e00e      	b.n	80043a2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <DMA_CalcBaseAndBitshift+0x70>)
 800438c:	4413      	add	r3, r2
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <DMA_CalcBaseAndBitshift+0x74>)
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40020407 	.word	0x40020407
 80043b4:	bffdfff8 	.word	0xbffdfff8
 80043b8:	cccccccd 	.word	0xcccccccd
 80043bc:	40020000 	.word	0x40020000
 80043c0:	bffdfbf8 	.word	0xbffdfbf8
 80043c4:	40020400 	.word	0x40020400

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d6:	e154      	b.n	8004682 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8146 	beq.w	800467c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d005      	beq.n	8004408 <HAL_GPIO_Init+0x40>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d130      	bne.n	800446a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	2203      	movs	r2, #3
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800443e:	2201      	movs	r2, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0201 	and.w	r2, r3, #1
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	d017      	beq.n	80044a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d123      	bne.n	80044fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	08da      	lsrs	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3208      	adds	r2, #8
 80044ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	6939      	ldr	r1, [r7, #16]
 80044f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2203      	movs	r2, #3
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0203 	and.w	r2, r3, #3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80a0 	beq.w	800467c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453c:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <HAL_GPIO_Init+0x2d8>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_GPIO_Init+0x2d8>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6193      	str	r3, [r2, #24]
 8004548:	4b55      	ldr	r3, [pc, #340]	; (80046a0 <HAL_GPIO_Init+0x2d8>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004554:	4a53      	ldr	r2, [pc, #332]	; (80046a4 <HAL_GPIO_Init+0x2dc>)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	3302      	adds	r3, #2
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800457e:	d019      	beq.n	80045b4 <HAL_GPIO_Init+0x1ec>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a49      	ldr	r2, [pc, #292]	; (80046a8 <HAL_GPIO_Init+0x2e0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <HAL_GPIO_Init+0x1e8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a48      	ldr	r2, [pc, #288]	; (80046ac <HAL_GPIO_Init+0x2e4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00d      	beq.n	80045ac <HAL_GPIO_Init+0x1e4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a47      	ldr	r2, [pc, #284]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <HAL_GPIO_Init+0x1e0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_GPIO_Init+0x1dc>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e008      	b.n	80045b6 <HAL_GPIO_Init+0x1ee>
 80045a4:	2305      	movs	r3, #5
 80045a6:	e006      	b.n	80045b6 <HAL_GPIO_Init+0x1ee>
 80045a8:	2303      	movs	r3, #3
 80045aa:	e004      	b.n	80045b6 <HAL_GPIO_Init+0x1ee>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e002      	b.n	80045b6 <HAL_GPIO_Init+0x1ee>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_GPIO_Init+0x1ee>
 80045b4:	2300      	movs	r3, #0
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	f002 0203 	and.w	r2, r2, #3
 80045bc:	0092      	lsls	r2, r2, #2
 80045be:	4093      	lsls	r3, r2
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045c6:	4937      	ldr	r1, [pc, #220]	; (80046a4 <HAL_GPIO_Init+0x2dc>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d4:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045f8:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004622:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004628:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004676:	4a10      	ldr	r2, [pc, #64]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f aea3 	bne.w	80043d8 <HAL_GPIO_Init+0x10>
  }
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010000 	.word	0x40010000
 80046a8:	48000400 	.word	0x48000400
 80046ac:	48000800 	.word	0x48000800
 80046b0:	48000c00 	.word	0x48000c00
 80046b4:	48001000 	.word	0x48001000
 80046b8:	40010400 	.word	0x40010400

080046bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e001      	b.n	80046de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
 80046f8:	4613      	mov	r3, r2
 80046fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046fc:	787b      	ldrb	r3, [r7, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004708:	e002      	b.n	8004710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004722:	af00      	add	r7, sp, #0
 8004724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800472c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f001 b823 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 817d 	beq.w	8004a52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004758:	4bbc      	ldr	r3, [pc, #752]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b04      	cmp	r3, #4
 8004762:	d00c      	beq.n	800477e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004764:	4bb9      	ldr	r3, [pc, #740]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d15c      	bne.n	800482a <HAL_RCC_OscConfig+0x10e>
 8004770:	4bb6      	ldr	r3, [pc, #728]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d155      	bne.n	800482a <HAL_RCC_OscConfig+0x10e>
 800477e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004782:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004792:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x94>
 80047aa:	4ba8      	ldr	r3, [pc, #672]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	e015      	b.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80047d8:	4b9c      	ldr	r3, [pc, #624]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047e8:	fa92 f2a2 	rbit	r2, r2
 80047ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80047f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047f4:	fab2 f282 	clz	r2, r2
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f002 021f 	and.w	r2, r2, #31
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f202 	lsl.w	r2, r1, r2
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 811f 	beq.w	8004a50 <HAL_RCC_OscConfig+0x334>
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 8116 	bne.w	8004a50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f000 bfaf 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x12e>
 800483c:	4b83      	ldr	r3, [pc, #524]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a82      	ldr	r2, [pc, #520]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e036      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 800484a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x158>
 800485a:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7b      	ldr	r2, [pc, #492]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b79      	ldr	r3, [pc, #484]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a78      	ldr	r2, [pc, #480]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800486c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e021      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x184>
 8004886:	4b71      	ldr	r3, [pc, #452]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a70      	ldr	r2, [pc, #448]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b6e      	ldr	r3, [pc, #440]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6d      	ldr	r2, [pc, #436]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 80048a0:	4b6a      	ldr	r3, [pc, #424]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a69      	ldr	r2, [pc, #420]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b67      	ldr	r3, [pc, #412]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a66      	ldr	r2, [pc, #408]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048b8:	4b64      	ldr	r3, [pc, #400]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	f023 020f 	bic.w	r2, r3, #15
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	495f      	ldr	r1, [pc, #380]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d059      	beq.n	8004996 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd fb9b 	bl	800201c <HAL_GetTick>
 80048e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fd fb96 	bl	800201c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d902      	bls.n	8004902 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	f000 bf43 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004906:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004916:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d102      	bne.n	8004934 <HAL_RCC_OscConfig+0x218>
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	e015      	b.n	8004960 <HAL_RCC_OscConfig+0x244>
 8004934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004938:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004964:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004968:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800496c:	fa92 f2a2 	rbit	r2, r2
 8004970:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004974:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004978:	fab2 f282 	clz	r2, r2
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	f042 0220 	orr.w	r2, r2, #32
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f002 021f 	and.w	r2, r2, #31
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ab      	beq.n	80048ec <HAL_RCC_OscConfig+0x1d0>
 8004994:	e05d      	b.n	8004a52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fd fb41 	bl	800201c <HAL_GetTick>
 800499a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fd fb3c 	bl	800201c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b64      	cmp	r3, #100	; 0x64
 80049ae:	d902      	bls.n	80049b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	f000 bee9 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 80049b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d102      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2cc>
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	e015      	b.n	8004a14 <HAL_RCC_OscConfig+0x2f8>
 80049e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a00:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a18:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a20:	fa92 f2a2 	rbit	r2, r2
 8004a24:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a28:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	f042 0220 	orr.w	r2, r2, #32
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	f002 021f 	and.w	r2, r2, #31
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ab      	bne.n	80049a0 <HAL_RCC_OscConfig+0x284>
 8004a48:	e003      	b.n	8004a52 <HAL_RCC_OscConfig+0x336>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 817d 	beq.w	8004d62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a68:	4ba6      	ldr	r3, [pc, #664]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a74:	4ba3      	ldr	r3, [pc, #652]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d172      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004a80:	4ba0      	ldr	r3, [pc, #640]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d16c      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d102      	bne.n	8004abc <HAL_RCC_OscConfig+0x3a0>
 8004ab6:	4b93      	ldr	r3, [pc, #588]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	e013      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c8>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ae0:	4b88      	ldr	r3, [pc, #544]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004aea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004aee:	fa92 f2a2 	rbit	r2, r2
 8004af2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004af6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f002 021f 	and.w	r2, r2, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCC_OscConfig+0x410>
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f000 be2e 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b75      	ldr	r3, [pc, #468]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	21f8      	movs	r1, #248	; 0xf8
 8004b42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b4a:	fa91 f1a1 	rbit	r1, r1
 8004b4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b56:	fab1 f181 	clz	r1, r1
 8004b5a:	b2c9      	uxtb	r1, r1
 8004b5c:	408b      	lsls	r3, r1
 8004b5e:	4969      	ldr	r1, [pc, #420]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b64:	e0fd      	b.n	8004d62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8088 	beq.w	8004c88 <HAL_RCC_OscConfig+0x56c>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fa3a 	bl	800201c <HAL_GetTick>
 8004ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bae:	f7fd fa35 	bl	800201c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d902      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f000 bde2 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d102      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4d8>
 8004bee:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e013      	b.n	8004c1c <HAL_RCC_OscConfig+0x500>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c06:	2302      	movs	r3, #2
 8004c08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c26:	fa92 f2a2 	rbit	r2, r2
 8004c2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c32:	fab2 f282 	clz	r2, r2
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	f042 0220 	orr.w	r2, r2, #32
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f002 021f 	and.w	r2, r2, #31
 8004c42:	2101      	movs	r1, #1
 8004c44:	fa01 f202 	lsl.w	r2, r1, r2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0af      	beq.n	8004bae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	21f8      	movs	r1, #248	; 0xf8
 8004c64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c6c:	fa91 f1a1 	rbit	r1, r1
 8004c70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c78:	fab1 f181 	clz	r1, r1
 8004c7c:	b2c9      	uxtb	r1, r1
 8004c7e:	408b      	lsls	r3, r1
 8004c80:	4920      	ldr	r1, [pc, #128]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
 8004c86:	e06c      	b.n	8004d62 <HAL_RCC_OscConfig+0x646>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd f9b2 	bl	800201c <HAL_GetTick>
 8004cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fd f9ad 	bl	800201c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	f000 bd5a 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d104      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5ec>
 8004cfe:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e015      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d2c:	4bc8      	ldr	r3, [pc, #800]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2202      	movs	r2, #2
 8004d32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d3a:	fa92 f2a2 	rbit	r2, r2
 8004d3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d46:	fab2 f282 	clz	r2, r2
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f002 021f 	and.w	r2, r2, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ad      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8110 	beq.w	8004f98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d079      	beq.n	8004e7c <HAL_RCC_OscConfig+0x760>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	4bab      	ldr	r3, [pc, #684]	; (8005054 <HAL_RCC_OscConfig+0x938>)
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	461a      	mov	r2, r3
 8004dae:	2301      	movs	r3, #1
 8004db0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fd f933 	bl	800201c <HAL_GetTick>
 8004db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fd f92e 	bl	800201c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d902      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f000 bcdb 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dec:	2202      	movs	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	fa93 f2a3 	rbit	r2, r3
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e10:	2202      	movs	r2, #2
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	fa93 f2a3 	rbit	r2, r3
 8004e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2c:	4b88      	ldr	r3, [pc, #544]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e38:	2102      	movs	r1, #2
 8004e3a:	6019      	str	r1, [r3, #0]
 8004e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fa93 f1a3 	rbit	r1, r3
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e52:	6019      	str	r1, [r3, #0]
  return result;
 8004e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0a0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x6a0>
 8004e7a:	e08d      	b.n	8004f98 <HAL_RCC_OscConfig+0x87c>
 8004e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	fa93 f2a3 	rbit	r2, r3
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x938>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fd f8ad 	bl	800201c <HAL_GetTick>
 8004ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fd f8a8 	bl	800201c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d902      	bls.n	8004ede <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	f000 bc55 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2e:	2202      	movs	r2, #2
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	fa93 f2a3 	rbit	r2, r3
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f56:	2102      	movs	r1, #2
 8004f58:	6019      	str	r1, [r3, #0]
 8004f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	fa93 f1a3 	rbit	r1, r3
 8004f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f70:	6019      	str	r1, [r3, #0]
  return result;
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d197      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 81a1 	beq.w	80052f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb4:	4b26      	ldr	r3, [pc, #152]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	61d3      	str	r3, [r2, #28]
 8004fcc:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fe6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11a      	bne.n	8005030 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fd f809 	bl	800201c <HAL_GetTick>
 800500a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	e009      	b.n	8005024 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005010:	f7fd f804 	bl	800201c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e3b1      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10d      	bne.n	800505c <HAL_RCC_OscConfig+0x940>
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6213      	str	r3, [r2, #32]
 800504c:	e03c      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	10908120 	.word	0x10908120
 8005058:	40007000 	.word	0x40007000
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x96a>
 800506c:	4bc1      	ldr	r3, [pc, #772]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4ac0      	ldr	r2, [pc, #768]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6213      	str	r3, [r2, #32]
 8005078:	4bbe      	ldr	r3, [pc, #760]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4abd      	ldr	r2, [pc, #756]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	e020      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x994>
 8005096:	4bb7      	ldr	r3, [pc, #732]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4ab6      	ldr	r2, [pc, #728]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800509c:	f043 0304 	orr.w	r3, r3, #4
 80050a0:	6213      	str	r3, [r2, #32]
 80050a2:	4bb4      	ldr	r3, [pc, #720]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4ab3      	ldr	r2, [pc, #716]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 80050b0:	4bb0      	ldr	r3, [pc, #704]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4aaf      	ldr	r2, [pc, #700]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	6213      	str	r3, [r2, #32]
 80050bc:	4bad      	ldr	r3, [pc, #692]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4aac      	ldr	r2, [pc, #688]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050c2:	f023 0304 	bic.w	r3, r3, #4
 80050c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8081 	beq.w	80051dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050da:	f7fc ff9f 	bl	800201c <HAL_GetTick>
 80050de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f7fc ff9a 	bl	800201c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e345      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005104:	2202      	movs	r2, #2
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	fa93 f2a3 	rbit	r2, r3
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	fa93 f2a3 	rbit	r2, r3
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005142:	601a      	str	r2, [r3, #0]
  return result;
 8005144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005148:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800514c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d102      	bne.n	8005168 <HAL_RCC_OscConfig+0xa4c>
 8005162:	4b84      	ldr	r3, [pc, #528]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	e013      	b.n	8005190 <HAL_RCC_OscConfig+0xa74>
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005170:	2202      	movs	r2, #2
 8005172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	fa93 f2a3 	rbit	r2, r3
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005194:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005198:	2102      	movs	r1, #2
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	fa92 f1a2 	rbit	r1, r2
 80051aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051b2:	6011      	str	r1, [r2, #0]
  return result;
 80051b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d084      	beq.n	80050e4 <HAL_RCC_OscConfig+0x9c8>
 80051da:	e07f      	b.n	80052dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fc ff1e 	bl	800201c <HAL_GetTick>
 80051e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e4:	e00b      	b.n	80051fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fc ff19 	bl	800201c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e2c4      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005206:	2202      	movs	r2, #2
 8005208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	fa93 f2a3 	rbit	r2, r3
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f2a3 	rbit	r2, r3
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005244:	601a      	str	r2, [r3, #0]
  return result;
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800524e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005250:	fab3 f383 	clz	r3, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f043 0302 	orr.w	r3, r3, #2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d102      	bne.n	800526a <HAL_RCC_OscConfig+0xb4e>
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	e013      	b.n	8005292 <HAL_RCC_OscConfig+0xb76>
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005272:	2202      	movs	r2, #2
 8005274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	fa93 f2a3 	rbit	r2, r3
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005296:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800529a:	2102      	movs	r1, #2
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	fa92 f1a2 	rbit	r1, r2
 80052ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052b4:	6011      	str	r1, [r2, #0]
  return result;
 80052b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	f002 021f 	and.w	r2, r2, #31
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f202 	lsl.w	r2, r1, r2
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d184      	bne.n	80051e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d105      	bne.n	80052f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e4:	4b23      	ldr	r3, [pc, #140]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80052ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8242 	beq.w	8005786 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b08      	cmp	r3, #8
 800530c:	f000 8213 	beq.w	8005736 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 8162 	bne.w	80055e6 <HAL_RCC_OscConfig+0xeca>
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800532a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	fa93 f2a3 	rbit	r2, r3
 800533e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005342:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005346:	601a      	str	r2, [r3, #0]
  return result;
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005350:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800535c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fc fe58 	bl	800201c <HAL_GetTick>
 800536c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005370:	e00c      	b.n	800538c <HAL_RCC_OscConfig+0xc70>
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fc fe50 	bl	800201c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1fd      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 800538c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005390:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	fa93 f2a3 	rbit	r2, r3
 80053a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053b0:	601a      	str	r2, [r3, #0]
  return result;
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_RCC_OscConfig+0xcba>
 80053d0:	4bb0      	ldr	r3, [pc, #704]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	e027      	b.n	8005426 <HAL_RCC_OscConfig+0xd0a>
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	fa93 f2a3 	rbit	r2, r3
 80053f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005400:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4b9c      	ldr	r3, [pc, #624]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800542a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800542e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005432:	6011      	str	r1, [r2, #0]
 8005434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005438:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	fa92 f1a2 	rbit	r1, r2
 8005442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005446:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800544a:	6011      	str	r1, [r2, #0]
  return result;
 800544c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005450:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	fab2 f282 	clz	r2, r2
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	f042 0220 	orr.w	r2, r2, #32
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	f002 021f 	and.w	r2, r2, #31
 8005466:	2101      	movs	r1, #1
 8005468:	fa01 f202 	lsl.w	r2, r1, r2
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d182      	bne.n	8005378 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005472:	4b88      	ldr	r3, [pc, #544]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	430b      	orrs	r3, r1
 8005494:	497f      	ldr	r1, [pc, #508]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
 800549a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	fa93 f2a3 	rbit	r2, r3
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054be:	601a      	str	r2, [r3, #0]
  return result;
 80054c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	461a      	mov	r2, r3
 80054dc:	2301      	movs	r3, #1
 80054de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fc fd9c 	bl	800201c <HAL_GetTick>
 80054e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e8:	e009      	b.n	80054fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ea:	f7fc fd97 	bl	800201c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e144      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80054fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005502:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800550a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005522:	601a      	str	r2, [r3, #0]
  return result;
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800552c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_RCC_OscConfig+0xe2c>
 8005542:	4b54      	ldr	r3, [pc, #336]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	e027      	b.n	8005598 <HAL_RCC_OscConfig+0xe7c>
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	fa93 f2a3 	rbit	r2, r3
 8005564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005568:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005572:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005580:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	fa93 f2a3 	rbit	r2, r3
 800558a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	4b3f      	ldr	r3, [pc, #252]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800559c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	fa92 f1a2 	rbit	r1, r2
 80055b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055bc:	6011      	str	r1, [r2, #0]
  return result;
 80055be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	fab2 f282 	clz	r2, r2
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	f042 0220 	orr.w	r2, r2, #32
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	f002 021f 	and.w	r2, r2, #31
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f202 	lsl.w	r2, r1, r2
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d082      	beq.n	80054ea <HAL_RCC_OscConfig+0xdce>
 80055e4:	e0cf      	b.n	8005786 <HAL_RCC_OscConfig+0x106a>
 80055e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	fa93 f2a3 	rbit	r2, r3
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800560a:	601a      	str	r2, [r3, #0]
  return result;
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	461a      	mov	r2, r3
 8005628:	2300      	movs	r3, #0
 800562a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fc fcf6 	bl	800201c <HAL_GetTick>
 8005630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005634:	e009      	b.n	800564a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005636:	f7fc fcf1 	bl	800201c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e09e      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 800564a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	fa93 f2a3 	rbit	r2, r3
 8005666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800566e:	601a      	str	r2, [r3, #0]
  return result;
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d104      	bne.n	8005698 <HAL_RCC_OscConfig+0xf7c>
 800568e:	4b01      	ldr	r3, [pc, #4]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	e029      	b.n	80056e8 <HAL_RCC_OscConfig+0xfcc>
 8005694:	40021000 	.word	0x40021000
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fa93 f2a3 	rbit	r2, r3
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	fa93 f2a3 	rbit	r2, r3
 80056da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCC_OscConfig+0x1078>)
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	fa92 f1a2 	rbit	r1, r2
 8005704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005708:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800570c:	6011      	str	r1, [r2, #0]
  return result;
 800570e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005712:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	f042 0220 	orr.w	r2, r2, #32
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	f002 021f 	and.w	r2, r2, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d180      	bne.n	8005636 <HAL_RCC_OscConfig+0xf1a>
 8005734:	e027      	b.n	8005786 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01e      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_OscConfig+0x1078>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005752:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005756:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800575a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	429a      	cmp	r2, r3
 8005768:	d10b      	bne.n	8005782 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800576a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800576e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000

08005798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b09e      	sub	sp, #120	; 0x78
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e162      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b90      	ldr	r3, [pc, #576]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d910      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 0207 	bic.w	r2, r3, #7
 80057c6:	498b      	ldr	r1, [pc, #556]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b89      	ldr	r3, [pc, #548]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e14a      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b82      	ldr	r3, [pc, #520]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	497f      	ldr	r1, [pc, #508]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80dc 	beq.w	80059c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d13c      	bne.n	800588e <HAL_RCC_ClockConfig+0xf6>
 8005814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005818:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581c:	fa93 f3a3 	rbit	r3, r3
 8005820:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <HAL_RCC_ClockConfig+0xa6>
 8005838:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	e00f      	b.n	800585e <HAL_RCC_ClockConfig+0xc6>
 800583e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005842:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	667b      	str	r3, [r7, #100]	; 0x64
 800584c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585a:	4b67      	ldr	r3, [pc, #412]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005862:	65ba      	str	r2, [r7, #88]	; 0x58
 8005864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005866:	fa92 f2a2 	rbit	r2, r2
 800586a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800586c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800586e:	fab2 f282 	clz	r2, r2
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	f002 021f 	and.w	r2, r2, #31
 800587e:	2101      	movs	r1, #1
 8005880:	fa01 f202 	lsl.w	r2, r1, r2
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d17b      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0f3      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d13c      	bne.n	8005910 <HAL_RCC_ClockConfig+0x178>
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a6:	fab3 f383 	clz	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x128>
 80058ba:	4b4f      	ldr	r3, [pc, #316]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	e00f      	b.n	80058e0 <HAL_RCC_ClockConfig+0x148>
 80058c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
 80058ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058d2:	643b      	str	r3, [r7, #64]	; 0x40
 80058d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80058e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e8:	fa92 f2a2 	rbit	r2, r2
 80058ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f0:	fab2 f282 	clz	r2, r2
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	f042 0220 	orr.w	r2, r2, #32
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f002 021f 	and.w	r2, r2, #31
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f202 	lsl.w	r2, r1, r2
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d13a      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0b2      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
 8005910:	2302      	movs	r3, #2
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d102      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	e00d      	b.n	8005954 <HAL_RCC_ClockConfig+0x1bc>
 8005938:	2302      	movs	r3, #2
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	2302      	movs	r3, #2
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2202      	movs	r2, #2
 8005956:	61ba      	str	r2, [r7, #24]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	fa92 f2a2 	rbit	r2, r2
 800595e:	617a      	str	r2, [r7, #20]
  return result;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	fab2 f282 	clz	r2, r2
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	f042 0220 	orr.w	r2, r2, #32
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	f002 021f 	and.w	r2, r2, #31
 8005972:	2101      	movs	r1, #1
 8005974:	fa01 f202 	lsl.w	r2, r1, r2
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e079      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	491a      	ldr	r1, [pc, #104]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005994:	f7fc fb42 	bl	800201c <HAL_GetTick>
 8005998:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fc fb3e 	bl	800201c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e061      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 020c 	and.w	r2, r3, #12
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1eb      	bne.n	800599c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d214      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0207 	bic.w	r2, r3, #7
 80059da:	4906      	ldr	r1, [pc, #24]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e040      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
 80059f4:	40022000 	.word	0x40022000
 80059f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	491a      	ldr	r1, [pc, #104]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4912      	ldr	r1, [pc, #72]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a3a:	f000 f829 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	22f0      	movs	r2, #240	; 0xf0
 8005a4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	fa92 f2a2 	rbit	r2, r2
 8005a52:	60fa      	str	r2, [r7, #12]
  return result;
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	fab2 f282 	clz	r2, r2
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	40d3      	lsrs	r3, r2
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x2ec>)
 8005a60:	5cd3      	ldrb	r3, [r2, r3]
 8005a62:	fa21 f303 	lsr.w	r3, r1, r3
 8005a66:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <HAL_RCC_ClockConfig+0x2f0>)
 8005a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_RCC_ClockConfig+0x2f4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fc fa90 	bl	8001f94 <HAL_InitTick>
  
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3778      	adds	r7, #120	; 0x78
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	0800cd74 	.word	0x0800cd74
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	20000004 	.word	0x20000004

08005a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b08b      	sub	sp, #44	; 0x2c
 8005a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005aaa:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8005abe:	e03c      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac0:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ac2:	623b      	str	r3, [r7, #32]
      break;
 8005ac4:	e03c      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005acc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ad0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	fa92 f2a2 	rbit	r2, r2
 8005ad8:	607a      	str	r2, [r7, #4]
  return result;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	fab2 f282 	clz	r2, r2
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	40d3      	lsrs	r3, r2
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ae6:	5cd3      	ldrb	r3, [r2, r3]
 8005ae8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	220f      	movs	r2, #15
 8005af4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	fa92 f2a2 	rbit	r2, r2
 8005afc:	60fa      	str	r2, [r7, #12]
  return result;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	fab2 f282 	clz	r2, r2
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	40d3      	lsrs	r3, r2
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b0a:	5cd3      	ldrb	r3, [r2, r3]
 8005b0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
 8005b28:	e004      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	623b      	str	r3, [r7, #32]
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b3c:	623b      	str	r3, [r7, #32]
      break;
 8005b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b40:	6a3b      	ldr	r3, [r7, #32]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	372c      	adds	r7, #44	; 0x2c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	007a1200 	.word	0x007a1200
 8005b58:	0800cd8c 	.word	0x0800cd8c
 8005b5c:	0800cd9c 	.word	0x0800cd9c
 8005b60:	003d0900 	.word	0x003d0900

08005b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000000 	.word	0x20000000

08005b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b82:	f7ff ffef 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005b86:	4601      	mov	r1, r0
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	fa92 f2a2 	rbit	r2, r2
 8005b9c:	603a      	str	r2, [r7, #0]
  return result;
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	fab2 f282 	clz	r2, r2
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	40d3      	lsrs	r3, r2
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	0800cd84 	.word	0x0800cd84

08005bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bc6:	f7ff ffcd 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	fa92 f2a2 	rbit	r2, r2
 8005be0:	603a      	str	r2, [r7, #0]
  return result;
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	fab2 f282 	clz	r2, r2
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	40d3      	lsrs	r3, r2
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800cd84 	.word	0x0800cd84

08005c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b092      	sub	sp, #72	; 0x48
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d4 	beq.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	61d3      	str	r3, [r2, #28]
 8005c40:	4b48      	ldr	r3, [pc, #288]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c52:	4b45      	ldr	r3, [pc, #276]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d118      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c5e:	4b42      	ldr	r3, [pc, #264]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a41      	ldr	r2, [pc, #260]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6a:	f7fc f9d7 	bl	800201c <HAL_GetTick>
 8005c6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	e008      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c72:	f7fc f9d3 	bl	800201c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e169      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	4b38      	ldr	r3, [pc, #224]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8084 	beq.w	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d07c      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cca:	fab3 f383 	clz	r3, r3
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2301      	movs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	fa93 f3a3 	rbit	r3, r3
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d02:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fc f983 	bl	800201c <HAL_GetTick>
 8005d16:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fc f97f 	bl	800201c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e113      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005d30:	2302      	movs	r3, #2
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	61fb      	str	r3, [r7, #28]
  return result;
 8005d48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d108      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d5e:	4b01      	ldr	r3, [pc, #4]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	e00d      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	10908100 	.word	0x10908100
 8005d70:	2302      	movs	r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	fa93 f3a3 	rbit	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	4b78      	ldr	r3, [pc, #480]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2202      	movs	r2, #2
 8005d82:	613a      	str	r2, [r7, #16]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	fa92 f2a2 	rbit	r2, r2
 8005d8a:	60fa      	str	r2, [r7, #12]
  return result;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	fab2 f282 	clz	r2, r2
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	f002 021f 	and.w	r2, r2, #31
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f202 	lsl.w	r2, r1, r2
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0b7      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005daa:	4b6d      	ldr	r3, [pc, #436]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	496a      	ldr	r1, [pc, #424]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ddc:	4b60      	ldr	r3, [pc, #384]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f023 0203 	bic.w	r2, r3, #3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	495d      	ldr	r1, [pc, #372]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dfa:	4b59      	ldr	r3, [pc, #356]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4956      	ldr	r1, [pc, #344]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e18:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	494e      	ldr	r1, [pc, #312]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e36:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4947      	ldr	r1, [pc, #284]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e54:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	493f      	ldr	r1, [pc, #252]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f023 0220 	bic.w	r2, r3, #32
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	4938      	ldr	r1, [pc, #224]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e90:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	4930      	ldr	r1, [pc, #192]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eae:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	4929      	ldr	r1, [pc, #164]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ecc:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4921      	ldr	r1, [pc, #132]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eea:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	491a      	ldr	r1, [pc, #104]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f08:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	4912      	ldr	r1, [pc, #72]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	490b      	ldr	r1, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	4903      	ldr	r1, [pc, #12]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3748      	adds	r7, #72	; 0x48
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000

08005f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e049      	b.n	800600a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb fe3e 	bl	8001c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f000 fa4a 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <HAL_TIM_PWM_Start+0x24>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	bf14      	ite	ne
 8006030:	2301      	movne	r3, #1
 8006032:	2300      	moveq	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	e03c      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d109      	bne.n	8006052 <HAL_TIM_PWM_Start+0x3e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e02f      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x58>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e022      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start+0x72>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e015      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start+0x8c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e008      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e097      	b.n	80061ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_Start+0xb6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c8:	e023      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d104      	bne.n	80060da <HAL_TIM_PWM_Start+0xc6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d8:	e01b      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d104      	bne.n	80060ea <HAL_TIM_PWM_Start+0xd6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	e013      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_PWM_Start+0xe6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	e00b      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d104      	bne.n	800610a <HAL_TIM_PWM_Start+0xf6>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006108:	e003      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2201      	movs	r2, #1
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fcf4 	bl	8006b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a33      	ldr	r2, [pc, #204]	; (80061f4 <HAL_TIM_PWM_Start+0x1e0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a32      	ldr	r2, [pc, #200]	; (80061f8 <HAL_TIM_PWM_Start+0x1e4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a30      	ldr	r2, [pc, #192]	; (80061fc <HAL_TIM_PWM_Start+0x1e8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2f      	ldr	r2, [pc, #188]	; (8006200 <HAL_TIM_PWM_Start+0x1ec>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2d      	ldr	r2, [pc, #180]	; (8006204 <HAL_TIM_PWM_Start+0x1f0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_Start+0x142>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <HAL_TIM_PWM_Start+0x144>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800616a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <HAL_TIM_PWM_Start+0x1e0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x194>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x194>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a20      	ldr	r2, [pc, #128]	; (8006208 <HAL_TIM_PWM_Start+0x1f4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x194>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_TIM_PWM_Start+0x1f8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x194>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_TIM_PWM_Start+0x1e4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x194>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a16      	ldr	r2, [pc, #88]	; (80061fc <HAL_TIM_PWM_Start+0x1e8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d115      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	4b18      	ldr	r3, [pc, #96]	; (8006210 <HAL_TIM_PWM_Start+0x1fc>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d015      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1d2>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d011      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e000      	b.n	80061e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	00010007 	.word	0x00010007

08006214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800622e:	2302      	movs	r3, #2
 8006230:	e0ff      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b14      	cmp	r3, #20
 800623e:	f200 80f0 	bhi.w	8006422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006423 	.word	0x08006423
 8006250:	08006423 	.word	0x08006423
 8006254:	08006423 	.word	0x08006423
 8006258:	080062dd 	.word	0x080062dd
 800625c:	08006423 	.word	0x08006423
 8006260:	08006423 	.word	0x08006423
 8006264:	08006423 	.word	0x08006423
 8006268:	0800631f 	.word	0x0800631f
 800626c:	08006423 	.word	0x08006423
 8006270:	08006423 	.word	0x08006423
 8006274:	08006423 	.word	0x08006423
 8006278:	0800635f 	.word	0x0800635f
 800627c:	08006423 	.word	0x08006423
 8006280:	08006423 	.word	0x08006423
 8006284:	08006423 	.word	0x08006423
 8006288:	080063a1 	.word	0x080063a1
 800628c:	08006423 	.word	0x08006423
 8006290:	08006423 	.word	0x08006423
 8006294:	08006423 	.word	0x08006423
 8006298:	080063e1 	.word	0x080063e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f95a 	bl	800655c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0204 	bic.w	r2, r2, #4
 80062c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
      break;
 80062da:	e0a5      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f9ca 	bl	800667c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	021a      	lsls	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	619a      	str	r2, [r3, #24]
      break;
 800631c:	e084      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fa33 	bl	8006790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0208 	orr.w	r2, r2, #8
 8006338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0204 	bic.w	r2, r2, #4
 8006348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69d9      	ldr	r1, [r3, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	61da      	str	r2, [r3, #28]
      break;
 800635c:	e064      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fa9b 	bl	80068a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69d9      	ldr	r1, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	021a      	lsls	r2, r3, #8
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	61da      	str	r2, [r3, #28]
      break;
 800639e:	e043      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fae4 	bl	8006974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0208 	orr.w	r2, r2, #8
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0204 	bic.w	r2, r2, #4
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063de:	e023      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fb28 	bl	8006a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006420:	e002      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <TIM_Base_SetConfig+0x104>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00f      	beq.n	8006474 <TIM_Base_SetConfig+0x38>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d00b      	beq.n	8006474 <TIM_Base_SetConfig+0x38>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a39      	ldr	r2, [pc, #228]	; (8006544 <TIM_Base_SetConfig+0x108>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_Base_SetConfig+0x38>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a38      	ldr	r2, [pc, #224]	; (8006548 <TIM_Base_SetConfig+0x10c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_Base_SetConfig+0x38>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a37      	ldr	r2, [pc, #220]	; (800654c <TIM_Base_SetConfig+0x110>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <TIM_Base_SetConfig+0x104>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <TIM_Base_SetConfig+0x108>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a29      	ldr	r2, [pc, #164]	; (8006548 <TIM_Base_SetConfig+0x10c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a28      	ldr	r2, [pc, #160]	; (800654c <TIM_Base_SetConfig+0x110>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a27      	ldr	r2, [pc, #156]	; (8006550 <TIM_Base_SetConfig+0x114>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a26      	ldr	r2, [pc, #152]	; (8006554 <TIM_Base_SetConfig+0x118>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0x8a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a25      	ldr	r2, [pc, #148]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <TIM_Base_SetConfig+0x104>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0xe8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <TIM_Base_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0xe8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a10      	ldr	r2, [pc, #64]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0xe8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <TIM_Base_SetConfig+0x118>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0xe8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a0e      	ldr	r2, [pc, #56]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <TIM_OC1_SetConfig+0x10c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00f      	beq.n	80065dc <TIM_OC1_SetConfig+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a2b      	ldr	r2, [pc, #172]	; (800666c <TIM_OC1_SetConfig+0x110>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00b      	beq.n	80065dc <TIM_OC1_SetConfig+0x80>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <TIM_OC1_SetConfig+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_OC1_SetConfig+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a29      	ldr	r2, [pc, #164]	; (8006674 <TIM_OC1_SetConfig+0x118>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_OC1_SetConfig+0x80>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a28      	ldr	r2, [pc, #160]	; (8006678 <TIM_OC1_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d10c      	bne.n	80065f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0308 	bic.w	r3, r3, #8
 80065e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 0304 	bic.w	r3, r3, #4
 80065f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <TIM_OC1_SetConfig+0x10c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_OC1_SetConfig+0xc2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <TIM_OC1_SetConfig+0x110>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_OC1_SetConfig+0xc2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a19      	ldr	r2, [pc, #100]	; (8006670 <TIM_OC1_SetConfig+0x114>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_OC1_SetConfig+0xc2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a18      	ldr	r2, [pc, #96]	; (8006674 <TIM_OC1_SetConfig+0x118>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_OC1_SetConfig+0xc2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a17      	ldr	r2, [pc, #92]	; (8006678 <TIM_OC1_SetConfig+0x11c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d111      	bne.n	8006642 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f023 0210 	bic.w	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0320 	bic.w	r3, r3, #32
 80066ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a28      	ldr	r2, [pc, #160]	; (800677c <TIM_OC2_SetConfig+0x100>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0x6c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a27      	ldr	r2, [pc, #156]	; (8006780 <TIM_OC2_SetConfig+0x104>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d10d      	bne.n	8006704 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a1d      	ldr	r2, [pc, #116]	; (800677c <TIM_OC2_SetConfig+0x100>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00f      	beq.n	800672c <TIM_OC2_SetConfig+0xb0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <TIM_OC2_SetConfig+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00b      	beq.n	800672c <TIM_OC2_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <TIM_OC2_SetConfig+0x108>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d007      	beq.n	800672c <TIM_OC2_SetConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1a      	ldr	r2, [pc, #104]	; (8006788 <TIM_OC2_SetConfig+0x10c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d003      	beq.n	800672c <TIM_OC2_SetConfig+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a19      	ldr	r2, [pc, #100]	; (800678c <TIM_OC2_SetConfig+0x110>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d113      	bne.n	8006754 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006732:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <TIM_OC3_SetConfig+0xfc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_OC3_SetConfig+0x6a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a26      	ldr	r2, [pc, #152]	; (8006890 <TIM_OC3_SetConfig+0x100>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d10d      	bne.n	8006816 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006814:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1c      	ldr	r2, [pc, #112]	; (800688c <TIM_OC3_SetConfig+0xfc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_OC3_SetConfig+0xae>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <TIM_OC3_SetConfig+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_OC3_SetConfig+0xae>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <TIM_OC3_SetConfig+0x104>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_OC3_SetConfig+0xae>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a19      	ldr	r2, [pc, #100]	; (8006898 <TIM_OC3_SetConfig+0x108>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC3_SetConfig+0xae>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a18      	ldr	r2, [pc, #96]	; (800689c <TIM_OC3_SetConfig+0x10c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d113      	bne.n	8006866 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	621a      	str	r2, [r3, #32]
}
 8006880:	bf00      	nop
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40013400 	.word	0x40013400
 8006894:	40014000 	.word	0x40014000
 8006898:	40014400 	.word	0x40014400
 800689c:	40014800 	.word	0x40014800

080068a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	031b      	lsls	r3, r3, #12
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <TIM_OC4_SetConfig+0xc0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00f      	beq.n	8006924 <TIM_OC4_SetConfig+0x84>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a17      	ldr	r2, [pc, #92]	; (8006964 <TIM_OC4_SetConfig+0xc4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00b      	beq.n	8006924 <TIM_OC4_SetConfig+0x84>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a16      	ldr	r2, [pc, #88]	; (8006968 <TIM_OC4_SetConfig+0xc8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_OC4_SetConfig+0x84>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <TIM_OC4_SetConfig+0xcc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC4_SetConfig+0x84>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a14      	ldr	r2, [pc, #80]	; (8006970 <TIM_OC4_SetConfig+0xd0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d109      	bne.n	8006938 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40012c00 	.word	0x40012c00
 8006964:	40013400 	.word	0x40013400
 8006968:	40014000 	.word	0x40014000
 800696c:	40014400 	.word	0x40014400
 8006970:	40014800 	.word	0x40014800

08006974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <TIM_OC5_SetConfig+0xb4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00f      	beq.n	80069ee <TIM_OC5_SetConfig+0x7a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <TIM_OC5_SetConfig+0xb8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00b      	beq.n	80069ee <TIM_OC5_SetConfig+0x7a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <TIM_OC5_SetConfig+0xbc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d007      	beq.n	80069ee <TIM_OC5_SetConfig+0x7a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a14      	ldr	r2, [pc, #80]	; (8006a34 <TIM_OC5_SetConfig+0xc0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_OC5_SetConfig+0x7a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <TIM_OC5_SetConfig+0xc4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d109      	bne.n	8006a02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40013400 	.word	0x40013400
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	40014800 	.word	0x40014800

08006a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	051b      	lsls	r3, r3, #20
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <TIM_OC6_SetConfig+0xb8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_OC6_SetConfig+0x7c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <TIM_OC6_SetConfig+0xbc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_OC6_SetConfig+0x7c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <TIM_OC6_SetConfig+0xc0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_OC6_SetConfig+0x7c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <TIM_OC6_SetConfig+0xc4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC6_SetConfig+0x7c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <TIM_OC6_SetConfig+0xc8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d109      	bne.n	8006acc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	401a      	ands	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e063      	b.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2b      	ldr	r2, [pc, #172]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d108      	bne.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d018      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d013      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40000400 	.word	0x40000400
 8006c4c:	40000800 	.word	0x40000800
 8006c50:	40014000 	.word	0x40014000

08006c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e040      	b.n	8006ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fb f880 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2224      	movs	r2, #36	; 0x24
 8006c80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fc12 	bl	80074bc <UART_SetConfig>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e022      	b.n	8006ce8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fddc 	bl	8007868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fe63 	bl	80079ac <UART_CheckIdleState>
 8006ce6:	4603      	mov	r3, r0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	; 0x28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d13d      	bne.n	8006d82 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_UART_Receive_IT+0x22>
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e036      	b.n	8006d84 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_UART_Receive_IT+0x34>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e02f      	b.n	8006d84 <HAL_UART_Receive_IT+0x94>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d018      	beq.n	8006d72 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	69f9      	ldr	r1, [r7, #28]
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	461a      	mov	r2, r3
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 ff25 	bl	8007bc8 <UART_Start_Receive_IT>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	e000      	b.n	8006d84 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d178      	bne.n	8006e94 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_UART_Transmit_DMA+0x22>
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e071      	b.n	8006e96 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Transmit_DMA+0x34>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e06a      	b.n	8006e96 <HAL_UART_Transmit_DMA+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	88fa      	ldrh	r2, [r7, #6]
 8006dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02b      	beq.n	8006e4c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df8:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <HAL_UART_Transmit_DMA+0x114>)
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	4a28      	ldr	r2, [pc, #160]	; (8006ea4 <HAL_UART_Transmit_DMA+0x118>)
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e08:	4a27      	ldr	r2, [pc, #156]	; (8006ea8 <HAL_UART_Transmit_DMA+0x11c>)
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e10:	2200      	movs	r2, #0
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3328      	adds	r3, #40	; 0x28
 8006e24:	461a      	mov	r2, r3
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	f7fd f8ea 	bl	8004000 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2210      	movs	r2, #16
 8006e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e024      	b.n	8006e96 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7c:	623a      	str	r2, [r7, #32]
 8006e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3728      	adds	r7, #40	; 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08007e0b 	.word	0x08007e0b
 8006ea4:	08007e9f 	.word	0x08007e9f
 8006ea8:	08007ebb 	.word	0x08007ebb

08006eac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b0ba      	sub	sp, #232	; 0xe8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ed2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ed6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006eda:	4013      	ands	r3, r2
 8006edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d115      	bne.n	8006f14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00f      	beq.n	8006f14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 82a3 	beq.w	8007450 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
      }
      return;
 8006f12:	e29d      	b.n	8007450 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8117 	beq.w	800714c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f2e:	4b85      	ldr	r3, [pc, #532]	; (8007144 <HAL_UART_IRQHandler+0x298>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 810a 	beq.w	800714c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d011      	beq.n	8006f68 <HAL_UART_IRQHandler+0xbc>
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5e:	f043 0201 	orr.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d011      	beq.n	8006f98 <HAL_UART_IRQHandler+0xec>
 8006f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2202      	movs	r2, #2
 8006f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8e:	f043 0204 	orr.w	r2, r3, #4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d011      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
 8006fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fbe:	f043 0202 	orr.w	r2, r3, #2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffa:	f043 0208 	orr.w	r2, r3, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800700c:	2b00      	cmp	r3, #0
 800700e:	d012      	beq.n	8007036 <HAL_UART_IRQHandler+0x18a>
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8209 	beq.w	8007454 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007086:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800708a:	2b00      	cmp	r3, #0
 800708c:	d04f      	beq.n	800712e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fe58 	bl	8007d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d141      	bne.n	8007126 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1d9      	bne.n	80070a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d013      	beq.n	800711e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	4a13      	ldr	r2, [pc, #76]	; (8007148 <HAL_UART_IRQHandler+0x29c>)
 80070fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	4618      	mov	r0, r3
 8007104:	f7fd f814 	bl	8004130 <HAL_DMA_Abort_IT>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d017      	beq.n	800713e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e00f      	b.n	800713e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9b6 	bl	8007490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e00b      	b.n	800713e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9b2 	bl	8007490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	e007      	b.n	800713e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f9ae 	bl	8007490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800713c:	e18a      	b.n	8007454 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713e:	bf00      	nop
    return;
 8007140:	e188      	b.n	8007454 <HAL_UART_IRQHandler+0x5a8>
 8007142:	bf00      	nop
 8007144:	04000120 	.word	0x04000120
 8007148:	08007f37 	.word	0x08007f37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007150:	2b01      	cmp	r3, #1
 8007152:	f040 8143 	bne.w	80073dc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 813c 	beq.w	80073dc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8135 	beq.w	80073dc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2210      	movs	r2, #16
 8007178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	f040 80b1 	bne.w	80072ec <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007196:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 815c 	beq.w	8007458 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071aa:	429a      	cmp	r2, r3
 80071ac:	f080 8154 	bcs.w	8007458 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	f000 8085 	beq.w	80072d0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1da      	bne.n	80071c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007234:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007238:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800723c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e1      	bne.n	8007210 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3308      	adds	r3, #8
 8007252:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800725c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007270:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007276:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800727e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e3      	bne.n	800724c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800729e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a0:	f023 0310 	bic.w	r3, r3, #16
 80072a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80072b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e4      	bne.n	8007290 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fc fef7 	bl	80040be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8dd 	bl	80074a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ea:	e0b5      	b.n	8007458 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80a7 	beq.w	800745c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800730e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80a2 	beq.w	800745c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
 800733c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e4      	bne.n	8007318 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	623b      	str	r3, [r7, #32]
   return(result);
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007372:	633a      	str	r2, [r7, #48]	; 0x30
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e3      	bne.n	800734e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f023 0310 	bic.w	r3, r3, #16
 80073ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	69b9      	ldr	r1, [r7, #24]
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	617b      	str	r3, [r7, #20]
   return(result);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e4      	bne.n	8007398 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f865 	bl	80074a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073da:	e03f      	b.n	800745c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_UART_IRQHandler+0x55a>
 80073e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 ff35 	bl	800826e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007404:	e02d      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
    }
    return;
 800742e:	e017      	b.n	8007460 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d012      	beq.n	8007462 <HAL_UART_IRQHandler+0x5b6>
 800743c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00c      	beq.n	8007462 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fd8a 	bl	8007f62 <UART_EndTransmit_IT>
    return;
 800744e:	e008      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007450:	bf00      	nop
 8007452:	e006      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007454:	bf00      	nop
 8007456:	e004      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
      return;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007460:	bf00      	nop
  }

}
 8007462:	37e8      	adds	r7, #232	; 0xe8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80074ea:	f023 030c 	bic.w	r3, r3, #12
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4aa8      	ldr	r2, [pc, #672]	; (80077d8 <UART_SetConfig+0x31c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d120      	bne.n	800757e <UART_SetConfig+0xc2>
 800753c:	4ba7      	ldr	r3, [pc, #668]	; (80077dc <UART_SetConfig+0x320>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	2b03      	cmp	r3, #3
 8007546:	d817      	bhi.n	8007578 <UART_SetConfig+0xbc>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x94>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007561 	.word	0x08007561
 8007554:	0800756d 	.word	0x0800756d
 8007558:	08007573 	.word	0x08007573
 800755c:	08007567 	.word	0x08007567
 8007560:	2301      	movs	r3, #1
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e0b5      	b.n	80076d2 <UART_SetConfig+0x216>
 8007566:	2302      	movs	r3, #2
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e0b2      	b.n	80076d2 <UART_SetConfig+0x216>
 800756c:	2304      	movs	r3, #4
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e0af      	b.n	80076d2 <UART_SetConfig+0x216>
 8007572:	2308      	movs	r3, #8
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e0ac      	b.n	80076d2 <UART_SetConfig+0x216>
 8007578:	2310      	movs	r3, #16
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e0a9      	b.n	80076d2 <UART_SetConfig+0x216>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a97      	ldr	r2, [pc, #604]	; (80077e0 <UART_SetConfig+0x324>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d124      	bne.n	80075d2 <UART_SetConfig+0x116>
 8007588:	4b94      	ldr	r3, [pc, #592]	; (80077dc <UART_SetConfig+0x320>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007594:	d011      	beq.n	80075ba <UART_SetConfig+0xfe>
 8007596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800759a:	d817      	bhi.n	80075cc <UART_SetConfig+0x110>
 800759c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075a0:	d011      	beq.n	80075c6 <UART_SetConfig+0x10a>
 80075a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075a6:	d811      	bhi.n	80075cc <UART_SetConfig+0x110>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <UART_SetConfig+0xf8>
 80075ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b0:	d006      	beq.n	80075c0 <UART_SetConfig+0x104>
 80075b2:	e00b      	b.n	80075cc <UART_SetConfig+0x110>
 80075b4:	2300      	movs	r3, #0
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e08b      	b.n	80076d2 <UART_SetConfig+0x216>
 80075ba:	2302      	movs	r3, #2
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e088      	b.n	80076d2 <UART_SetConfig+0x216>
 80075c0:	2304      	movs	r3, #4
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e085      	b.n	80076d2 <UART_SetConfig+0x216>
 80075c6:	2308      	movs	r3, #8
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e082      	b.n	80076d2 <UART_SetConfig+0x216>
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e07f      	b.n	80076d2 <UART_SetConfig+0x216>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a83      	ldr	r2, [pc, #524]	; (80077e4 <UART_SetConfig+0x328>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d124      	bne.n	8007626 <UART_SetConfig+0x16a>
 80075dc:	4b7f      	ldr	r3, [pc, #508]	; (80077dc <UART_SetConfig+0x320>)
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80075e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80075e8:	d011      	beq.n	800760e <UART_SetConfig+0x152>
 80075ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80075ee:	d817      	bhi.n	8007620 <UART_SetConfig+0x164>
 80075f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075f4:	d011      	beq.n	800761a <UART_SetConfig+0x15e>
 80075f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075fa:	d811      	bhi.n	8007620 <UART_SetConfig+0x164>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <UART_SetConfig+0x14c>
 8007600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007604:	d006      	beq.n	8007614 <UART_SetConfig+0x158>
 8007606:	e00b      	b.n	8007620 <UART_SetConfig+0x164>
 8007608:	2300      	movs	r3, #0
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e061      	b.n	80076d2 <UART_SetConfig+0x216>
 800760e:	2302      	movs	r3, #2
 8007610:	77fb      	strb	r3, [r7, #31]
 8007612:	e05e      	b.n	80076d2 <UART_SetConfig+0x216>
 8007614:	2304      	movs	r3, #4
 8007616:	77fb      	strb	r3, [r7, #31]
 8007618:	e05b      	b.n	80076d2 <UART_SetConfig+0x216>
 800761a:	2308      	movs	r3, #8
 800761c:	77fb      	strb	r3, [r7, #31]
 800761e:	e058      	b.n	80076d2 <UART_SetConfig+0x216>
 8007620:	2310      	movs	r3, #16
 8007622:	77fb      	strb	r3, [r7, #31]
 8007624:	e055      	b.n	80076d2 <UART_SetConfig+0x216>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6f      	ldr	r2, [pc, #444]	; (80077e8 <UART_SetConfig+0x32c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d124      	bne.n	800767a <UART_SetConfig+0x1be>
 8007630:	4b6a      	ldr	r3, [pc, #424]	; (80077dc <UART_SetConfig+0x320>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800763c:	d011      	beq.n	8007662 <UART_SetConfig+0x1a6>
 800763e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007642:	d817      	bhi.n	8007674 <UART_SetConfig+0x1b8>
 8007644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007648:	d011      	beq.n	800766e <UART_SetConfig+0x1b2>
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800764e:	d811      	bhi.n	8007674 <UART_SetConfig+0x1b8>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <UART_SetConfig+0x1a0>
 8007654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007658:	d006      	beq.n	8007668 <UART_SetConfig+0x1ac>
 800765a:	e00b      	b.n	8007674 <UART_SetConfig+0x1b8>
 800765c:	2300      	movs	r3, #0
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e037      	b.n	80076d2 <UART_SetConfig+0x216>
 8007662:	2302      	movs	r3, #2
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e034      	b.n	80076d2 <UART_SetConfig+0x216>
 8007668:	2304      	movs	r3, #4
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e031      	b.n	80076d2 <UART_SetConfig+0x216>
 800766e:	2308      	movs	r3, #8
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e02e      	b.n	80076d2 <UART_SetConfig+0x216>
 8007674:	2310      	movs	r3, #16
 8007676:	77fb      	strb	r3, [r7, #31]
 8007678:	e02b      	b.n	80076d2 <UART_SetConfig+0x216>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a5b      	ldr	r2, [pc, #364]	; (80077ec <UART_SetConfig+0x330>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d124      	bne.n	80076ce <UART_SetConfig+0x212>
 8007684:	4b55      	ldr	r3, [pc, #340]	; (80077dc <UART_SetConfig+0x320>)
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800768c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007690:	d011      	beq.n	80076b6 <UART_SetConfig+0x1fa>
 8007692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007696:	d817      	bhi.n	80076c8 <UART_SetConfig+0x20c>
 8007698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769c:	d011      	beq.n	80076c2 <UART_SetConfig+0x206>
 800769e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a2:	d811      	bhi.n	80076c8 <UART_SetConfig+0x20c>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <UART_SetConfig+0x1f4>
 80076a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ac:	d006      	beq.n	80076bc <UART_SetConfig+0x200>
 80076ae:	e00b      	b.n	80076c8 <UART_SetConfig+0x20c>
 80076b0:	2300      	movs	r3, #0
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e00d      	b.n	80076d2 <UART_SetConfig+0x216>
 80076b6:	2302      	movs	r3, #2
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e00a      	b.n	80076d2 <UART_SetConfig+0x216>
 80076bc:	2304      	movs	r3, #4
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e007      	b.n	80076d2 <UART_SetConfig+0x216>
 80076c2:	2308      	movs	r3, #8
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e004      	b.n	80076d2 <UART_SetConfig+0x216>
 80076c8:	2310      	movs	r3, #16
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e001      	b.n	80076d2 <UART_SetConfig+0x216>
 80076ce:	2310      	movs	r3, #16
 80076d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076da:	d15c      	bne.n	8007796 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d827      	bhi.n	8007732 <UART_SetConfig+0x276>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x22c>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007733 	.word	0x08007733
 80076f8:	08007723 	.word	0x08007723
 80076fc:	08007733 	.word	0x08007733
 8007700:	08007733 	.word	0x08007733
 8007704:	08007733 	.word	0x08007733
 8007708:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fe fa36 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 8007710:	61b8      	str	r0, [r7, #24]
        break;
 8007712:	e013      	b.n	800773c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fe fa54 	bl	8005bc0 <HAL_RCC_GetPCLK2Freq>
 8007718:	61b8      	str	r0, [r7, #24]
        break;
 800771a:	e00f      	b.n	800773c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b34      	ldr	r3, [pc, #208]	; (80077f0 <UART_SetConfig+0x334>)
 800771e:	61bb      	str	r3, [r7, #24]
        break;
 8007720:	e00c      	b.n	800773c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fe f9b5 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8007726:	61b8      	str	r0, [r7, #24]
        break;
 8007728:	e008      	b.n	800773c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772e:	61bb      	str	r3, [r7, #24]
        break;
 8007730:	e004      	b.n	800773c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	77bb      	strb	r3, [r7, #30]
        break;
 800773a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8084 	beq.w	800784c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	005a      	lsls	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d916      	bls.n	8007790 <UART_SetConfig+0x2d4>
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d212      	bcs.n	8007790 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f023 030f 	bic.w	r3, r3, #15
 8007772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	b29a      	uxth	r2, r3
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	4313      	orrs	r3, r2
 8007784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	89fa      	ldrh	r2, [r7, #14]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	e05d      	b.n	800784c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	77bb      	strb	r3, [r7, #30]
 8007794:	e05a      	b.n	800784c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d836      	bhi.n	800780a <UART_SetConfig+0x34e>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x2e8>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	0800780b 	.word	0x0800780b
 80077b4:	080077fb 	.word	0x080077fb
 80077b8:	0800780b 	.word	0x0800780b
 80077bc:	0800780b 	.word	0x0800780b
 80077c0:	0800780b 	.word	0x0800780b
 80077c4:	08007803 	.word	0x08007803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fe f9d8 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 80077cc:	61b8      	str	r0, [r7, #24]
        break;
 80077ce:	e021      	b.n	8007814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fe f9f6 	bl	8005bc0 <HAL_RCC_GetPCLK2Freq>
 80077d4:	61b8      	str	r0, [r7, #24]
        break;
 80077d6:	e01d      	b.n	8007814 <UART_SetConfig+0x358>
 80077d8:	40013800 	.word	0x40013800
 80077dc:	40021000 	.word	0x40021000
 80077e0:	40004400 	.word	0x40004400
 80077e4:	40004800 	.word	0x40004800
 80077e8:	40004c00 	.word	0x40004c00
 80077ec:	40005000 	.word	0x40005000
 80077f0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <UART_SetConfig+0x3a8>)
 80077f6:	61bb      	str	r3, [r7, #24]
        break;
 80077f8:	e00c      	b.n	8007814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fe f949 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 80077fe:	61b8      	str	r0, [r7, #24]
        break;
 8007800:	e008      	b.n	8007814 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	61bb      	str	r3, [r7, #24]
        break;
 8007808:	e004      	b.n	8007814 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	77bb      	strb	r3, [r7, #30]
        break;
 8007812:	bf00      	nop
    }

    if (pclk != 0U)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d018      	beq.n	800784c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	085a      	lsrs	r2, r3, #1
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	441a      	add	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	fbb2 f3f3 	udiv	r3, r2, r3
 800782c:	b29b      	uxth	r3, r3
 800782e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b0f      	cmp	r3, #15
 8007834:	d908      	bls.n	8007848 <UART_SetConfig+0x38c>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783c:	d204      	bcs.n	8007848 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	e001      	b.n	800784c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007858:	7fbb      	ldrb	r3, [r7, #30]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	007a1200 	.word	0x007a1200

08007868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01a      	beq.n	800797e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007966:	d10a      	bne.n	800797e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079bc:	f7fa fb2e 	bl	800201c <HAL_GetTick>
 80079c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d10e      	bne.n	80079ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f82d 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e023      	b.n	8007a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d10e      	bne.n	8007a1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f817 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e00d      	b.n	8007a36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b09c      	sub	sp, #112	; 0x70
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	e0a5      	b.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	f000 80a1 	beq.w	8007b9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5a:	f7fa fadf 	bl	800201c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d302      	bcc.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d13e      	bne.n	8007aee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a84:	667b      	str	r3, [r7, #100]	; 0x64
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e067      	b.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d04f      	beq.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0a:	d147      	bne.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	613b      	str	r3, [r7, #16]
   return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 0301 	bic.w	r3, r3, #1
 8007b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b68:	623a      	str	r2, [r7, #32]
 8007b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e010      	b.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69da      	ldr	r2, [r3, #28]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f43f af4a 	beq.w	8007a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3770      	adds	r7, #112	; 0x70
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b091      	sub	sp, #68	; 0x44
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d10e      	bne.n	8007c1a <UART_Start_Receive_IT+0x52>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <UART_Start_Receive_IT+0x48>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0e:	e01a      	b.n	8007c46 <UART_Start_Receive_IT+0x7e>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	22ff      	movs	r2, #255	; 0xff
 8007c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c18:	e015      	b.n	8007c46 <UART_Start_Receive_IT+0x7e>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <UART_Start_Receive_IT+0x76>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <UART_Start_Receive_IT+0x6c>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	22ff      	movs	r2, #255	; 0xff
 8007c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c32:	e008      	b.n	8007c46 <UART_Start_Receive_IT+0x7e>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	227f      	movs	r2, #127	; 0x7f
 8007c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c3c:	e003      	b.n	8007c46 <UART_Start_Receive_IT+0x7e>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2222      	movs	r2, #34	; 0x22
 8007c52:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c74:	637a      	str	r2, [r7, #52]	; 0x34
 8007c76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c90:	d107      	bne.n	8007ca2 <UART_Start_Receive_IT+0xda>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4a14      	ldr	r2, [pc, #80]	; (8007cf0 <UART_Start_Receive_IT+0x128>)
 8007c9e:	665a      	str	r2, [r3, #100]	; 0x64
 8007ca0:	e002      	b.n	8007ca8 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <UART_Start_Receive_IT+0x12c>)
 8007ca6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	623b      	str	r3, [r7, #32]
 8007cd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	69f9      	ldr	r1, [r7, #28]
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3744      	adds	r7, #68	; 0x44
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	08008113 	.word	0x08008113
 8007cf4:	08007fb7 	.word	0x08007fb7

08007cf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	; 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6979      	ldr	r1, [r7, #20]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e6      	bne.n	8007d00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007d38:	bf00      	nop
 8007d3a:	3724      	adds	r7, #36	; 0x24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b095      	sub	sp, #84	; 0x54
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f023 0301 	bic.w	r3, r3, #1
 8007d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d118      	bne.n	8007dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f023 0310 	bic.w	r3, r3, #16
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6979      	ldr	r1, [r7, #20]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	613b      	str	r3, [r7, #16]
   return(result);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007dfe:	bf00      	nop
 8007e00:	3754      	adds	r7, #84	; 0x54
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b090      	sub	sp, #64	; 0x40
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d037      	beq.n	8007e90 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	623b      	str	r3, [r7, #32]
   return(result);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e48:	633a      	str	r2, [r7, #48]	; 0x30
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e5      	bne.n	8007e28 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	69b9      	ldr	r1, [r7, #24]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	617b      	str	r3, [r7, #20]
   return(result);
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e8e:	e002      	b.n	8007e96 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007e90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e92:	f7ff fae9 	bl	8007468 <HAL_UART_TxCpltCallback>
}
 8007e96:	bf00      	nop
 8007e98:	3740      	adds	r7, #64	; 0x40
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff fae5 	bl	800747c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb2:	bf00      	nop
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ecc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d109      	bne.n	8007ef6 <UART_DMAError+0x3c>
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b21      	cmp	r3, #33	; 0x21
 8007ee6:	d106      	bne.n	8007ef6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f7ff ff01 	bl	8007cf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f00:	2b40      	cmp	r3, #64	; 0x40
 8007f02:	d109      	bne.n	8007f18 <UART_DMAError+0x5e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b22      	cmp	r3, #34	; 0x22
 8007f08:	d106      	bne.n	8007f18 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	f7ff ff16 	bl	8007d44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1e:	f043 0210 	orr.w	r2, r3, #16
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f28:	6978      	ldr	r0, [r7, #20]
 8007f2a:	f7ff fab1 	bl	8007490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7ff fa9b 	bl	8007490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b088      	sub	sp, #32
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6979      	ldr	r1, [r7, #20]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff fa5d 	bl	8007468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b096      	sub	sp, #88	; 0x58
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fcc:	2b22      	cmp	r3, #34	; 0x22
 8007fce:	f040 8094 	bne.w	80080fa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fdc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007fe0:	b2d9      	uxtb	r1, r3
 8007fe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	400a      	ands	r2, r1
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d177      	bne.n	800810a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800802e:	653b      	str	r3, [r7, #80]	; 0x50
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008038:	647b      	str	r3, [r7, #68]	; 0x44
 800803a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800803e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	623b      	str	r3, [r7, #32]
   return(result);
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3308      	adds	r3, #8
 800806a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800806c:	633a      	str	r2, [r7, #48]	; 0x30
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e5      	bne.n	800804c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	2b01      	cmp	r3, #1
 8008092:	d12e      	bne.n	80080f2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0310 	bic.w	r3, r3, #16
 80080ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	69b9      	ldr	r1, [r7, #24]
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	617b      	str	r3, [r7, #20]
   return(result);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e6      	bne.n	800809a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d103      	bne.n	80080e2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2210      	movs	r2, #16
 80080e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff f9da 	bl	80074a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080f0:	e00b      	b.n	800810a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 f8e2 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 80080f8:	e007      	b.n	800810a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0208 	orr.w	r2, r2, #8
 8008108:	619a      	str	r2, [r3, #24]
}
 800810a:	bf00      	nop
 800810c:	3758      	adds	r7, #88	; 0x58
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b096      	sub	sp, #88	; 0x58
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008120:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008128:	2b22      	cmp	r3, #34	; 0x22
 800812a:	f040 8094 	bne.w	8008256 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008134:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800813e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008142:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008146:	4013      	ands	r3, r2
 8008148:	b29a      	uxth	r2, r3
 800814a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	1c9a      	adds	r2, r3, #2
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d177      	bne.n	8008266 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008194:	643b      	str	r3, [r7, #64]	; 0x40
 8008196:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800819a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e6      	bne.n	8008176 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f023 0301 	bic.w	r3, r3, #1
 80081be:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e5      	bne.n	80081a8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d12e      	bne.n	800824e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	60bb      	str	r3, [r7, #8]
   return(result);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f023 0310 	bic.w	r3, r3, #16
 800820a:	647b      	str	r3, [r7, #68]	; 0x44
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008214:	61bb      	str	r3, [r7, #24]
 8008216:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6979      	ldr	r1, [r7, #20]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	613b      	str	r3, [r7, #16]
   return(result);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e6      	bne.n	80081f6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f003 0310 	and.w	r3, r3, #16
 8008232:	2b10      	cmp	r3, #16
 8008234:	d103      	bne.n	800823e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2210      	movs	r2, #16
 800823c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff f92c 	bl	80074a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800824c:	e00b      	b.n	8008266 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7f9 f834 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 8008254:	e007      	b.n	8008266 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699a      	ldr	r2, [r3, #24]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0208 	orr.w	r2, r2, #8
 8008264:	619a      	str	r2, [r3, #24]
}
 8008266:	bf00      	nop
 8008268:	3758      	adds	r7, #88	; 0x58
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	2000000c 	.word	0x2000000c

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4d0d      	ldr	r5, [pc, #52]	; (80082c8 <__libc_init_array+0x38>)
 8008294:	4c0d      	ldr	r4, [pc, #52]	; (80082cc <__libc_init_array+0x3c>)
 8008296:	1b64      	subs	r4, r4, r5
 8008298:	10a4      	asrs	r4, r4, #2
 800829a:	2600      	movs	r6, #0
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	4d0b      	ldr	r5, [pc, #44]	; (80082d0 <__libc_init_array+0x40>)
 80082a2:	4c0c      	ldr	r4, [pc, #48]	; (80082d4 <__libc_init_array+0x44>)
 80082a4:	f004 fd1e 	bl	800cce4 <_init>
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	2600      	movs	r6, #0
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	0800d25c 	.word	0x0800d25c
 80082cc:	0800d25c 	.word	0x0800d25c
 80082d0:	0800d25c 	.word	0x0800d25c
 80082d4:	0800d260 	.word	0x0800d260

080082d8 <memset>:
 80082d8:	4402      	add	r2, r0
 80082da:	4603      	mov	r3, r0
 80082dc:	4293      	cmp	r3, r2
 80082de:	d100      	bne.n	80082e2 <memset+0xa>
 80082e0:	4770      	bx	lr
 80082e2:	f803 1b01 	strb.w	r1, [r3], #1
 80082e6:	e7f9      	b.n	80082dc <memset+0x4>

080082e8 <__cvt>:
 80082e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	ec55 4b10 	vmov	r4, r5, d0
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	460e      	mov	r6, r1
 80082f4:	4619      	mov	r1, r3
 80082f6:	462b      	mov	r3, r5
 80082f8:	bfbb      	ittet	lt
 80082fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082fe:	461d      	movlt	r5, r3
 8008300:	2300      	movge	r3, #0
 8008302:	232d      	movlt	r3, #45	; 0x2d
 8008304:	700b      	strb	r3, [r1, #0]
 8008306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800830c:	4691      	mov	r9, r2
 800830e:	f023 0820 	bic.w	r8, r3, #32
 8008312:	bfbc      	itt	lt
 8008314:	4622      	movlt	r2, r4
 8008316:	4614      	movlt	r4, r2
 8008318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800831c:	d005      	beq.n	800832a <__cvt+0x42>
 800831e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008322:	d100      	bne.n	8008326 <__cvt+0x3e>
 8008324:	3601      	adds	r6, #1
 8008326:	2102      	movs	r1, #2
 8008328:	e000      	b.n	800832c <__cvt+0x44>
 800832a:	2103      	movs	r1, #3
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	ab02      	add	r3, sp, #8
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	ec45 4b10 	vmov	d0, r4, r5
 8008338:	4653      	mov	r3, sl
 800833a:	4632      	mov	r2, r6
 800833c:	f001 fefc 	bl	800a138 <_dtoa_r>
 8008340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008344:	4607      	mov	r7, r0
 8008346:	d102      	bne.n	800834e <__cvt+0x66>
 8008348:	f019 0f01 	tst.w	r9, #1
 800834c:	d022      	beq.n	8008394 <__cvt+0xac>
 800834e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008352:	eb07 0906 	add.w	r9, r7, r6
 8008356:	d110      	bne.n	800837a <__cvt+0x92>
 8008358:	783b      	ldrb	r3, [r7, #0]
 800835a:	2b30      	cmp	r3, #48	; 0x30
 800835c:	d10a      	bne.n	8008374 <__cvt+0x8c>
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	f7f8 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800836a:	b918      	cbnz	r0, 8008374 <__cvt+0x8c>
 800836c:	f1c6 0601 	rsb	r6, r6, #1
 8008370:	f8ca 6000 	str.w	r6, [sl]
 8008374:	f8da 3000 	ldr.w	r3, [sl]
 8008378:	4499      	add	r9, r3
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008386:	b108      	cbz	r0, 800838c <__cvt+0xa4>
 8008388:	f8cd 900c 	str.w	r9, [sp, #12]
 800838c:	2230      	movs	r2, #48	; 0x30
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	454b      	cmp	r3, r9
 8008392:	d307      	bcc.n	80083a4 <__cvt+0xbc>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008398:	1bdb      	subs	r3, r3, r7
 800839a:	4638      	mov	r0, r7
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	b004      	add	sp, #16
 80083a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a4:	1c59      	adds	r1, r3, #1
 80083a6:	9103      	str	r1, [sp, #12]
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e7f0      	b.n	800838e <__cvt+0xa6>

080083ac <__exponent>:
 80083ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ae:	4603      	mov	r3, r0
 80083b0:	2900      	cmp	r1, #0
 80083b2:	bfb8      	it	lt
 80083b4:	4249      	neglt	r1, r1
 80083b6:	f803 2b02 	strb.w	r2, [r3], #2
 80083ba:	bfb4      	ite	lt
 80083bc:	222d      	movlt	r2, #45	; 0x2d
 80083be:	222b      	movge	r2, #43	; 0x2b
 80083c0:	2909      	cmp	r1, #9
 80083c2:	7042      	strb	r2, [r0, #1]
 80083c4:	dd2a      	ble.n	800841c <__exponent+0x70>
 80083c6:	f10d 0407 	add.w	r4, sp, #7
 80083ca:	46a4      	mov	ip, r4
 80083cc:	270a      	movs	r7, #10
 80083ce:	46a6      	mov	lr, r4
 80083d0:	460a      	mov	r2, r1
 80083d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80083d6:	fb07 1516 	mls	r5, r7, r6, r1
 80083da:	3530      	adds	r5, #48	; 0x30
 80083dc:	2a63      	cmp	r2, #99	; 0x63
 80083de:	f104 34ff 	add.w	r4, r4, #4294967295
 80083e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083e6:	4631      	mov	r1, r6
 80083e8:	dcf1      	bgt.n	80083ce <__exponent+0x22>
 80083ea:	3130      	adds	r1, #48	; 0x30
 80083ec:	f1ae 0502 	sub.w	r5, lr, #2
 80083f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083f4:	1c44      	adds	r4, r0, #1
 80083f6:	4629      	mov	r1, r5
 80083f8:	4561      	cmp	r1, ip
 80083fa:	d30a      	bcc.n	8008412 <__exponent+0x66>
 80083fc:	f10d 0209 	add.w	r2, sp, #9
 8008400:	eba2 020e 	sub.w	r2, r2, lr
 8008404:	4565      	cmp	r5, ip
 8008406:	bf88      	it	hi
 8008408:	2200      	movhi	r2, #0
 800840a:	4413      	add	r3, r2
 800840c:	1a18      	subs	r0, r3, r0
 800840e:	b003      	add	sp, #12
 8008410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008416:	f804 2f01 	strb.w	r2, [r4, #1]!
 800841a:	e7ed      	b.n	80083f8 <__exponent+0x4c>
 800841c:	2330      	movs	r3, #48	; 0x30
 800841e:	3130      	adds	r1, #48	; 0x30
 8008420:	7083      	strb	r3, [r0, #2]
 8008422:	70c1      	strb	r1, [r0, #3]
 8008424:	1d03      	adds	r3, r0, #4
 8008426:	e7f1      	b.n	800840c <__exponent+0x60>

08008428 <_printf_float>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ed2d 8b02 	vpush	{d8}
 8008430:	b08d      	sub	sp, #52	; 0x34
 8008432:	460c      	mov	r4, r1
 8008434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008438:	4616      	mov	r6, r2
 800843a:	461f      	mov	r7, r3
 800843c:	4605      	mov	r5, r0
 800843e:	f003 f98f 	bl	800b760 <_localeconv_r>
 8008442:	f8d0 a000 	ldr.w	sl, [r0]
 8008446:	4650      	mov	r0, sl
 8008448:	f7f7 fec2 	bl	80001d0 <strlen>
 800844c:	2300      	movs	r3, #0
 800844e:	930a      	str	r3, [sp, #40]	; 0x28
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	f8d8 3000 	ldr.w	r3, [r8]
 8008458:	f894 b018 	ldrb.w	fp, [r4, #24]
 800845c:	3307      	adds	r3, #7
 800845e:	f023 0307 	bic.w	r3, r3, #7
 8008462:	f103 0208 	add.w	r2, r3, #8
 8008466:	f8c8 2000 	str.w	r2, [r8]
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800847a:	9307      	str	r3, [sp, #28]
 800847c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008480:	ee08 0a10 	vmov	s16, r0
 8008484:	4b9f      	ldr	r3, [pc, #636]	; (8008704 <_printf_float+0x2dc>)
 8008486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848a:	f04f 32ff 	mov.w	r2, #4294967295
 800848e:	f7f8 fb4d 	bl	8000b2c <__aeabi_dcmpun>
 8008492:	bb88      	cbnz	r0, 80084f8 <_printf_float+0xd0>
 8008494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008498:	4b9a      	ldr	r3, [pc, #616]	; (8008704 <_printf_float+0x2dc>)
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	f7f8 fb27 	bl	8000af0 <__aeabi_dcmple>
 80084a2:	bb48      	cbnz	r0, 80084f8 <_printf_float+0xd0>
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb16 	bl	8000adc <__aeabi_dcmplt>
 80084b0:	b110      	cbz	r0, 80084b8 <_printf_float+0x90>
 80084b2:	232d      	movs	r3, #45	; 0x2d
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b8:	4b93      	ldr	r3, [pc, #588]	; (8008708 <_printf_float+0x2e0>)
 80084ba:	4894      	ldr	r0, [pc, #592]	; (800870c <_printf_float+0x2e4>)
 80084bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084c0:	bf94      	ite	ls
 80084c2:	4698      	movls	r8, r3
 80084c4:	4680      	movhi	r8, r0
 80084c6:	2303      	movs	r3, #3
 80084c8:	6123      	str	r3, [r4, #16]
 80084ca:	9b05      	ldr	r3, [sp, #20]
 80084cc:	f023 0204 	bic.w	r2, r3, #4
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	9700      	str	r7, [sp, #0]
 80084d8:	4633      	mov	r3, r6
 80084da:	aa0b      	add	r2, sp, #44	; 0x2c
 80084dc:	4621      	mov	r1, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 f9d8 	bl	8008894 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	f040 8090 	bne.w	800860a <_printf_float+0x1e2>
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	b00d      	add	sp, #52	; 0x34
 80084f0:	ecbd 8b02 	vpop	{d8}
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	4649      	mov	r1, r9
 8008500:	f7f8 fb14 	bl	8000b2c <__aeabi_dcmpun>
 8008504:	b140      	cbz	r0, 8008518 <_printf_float+0xf0>
 8008506:	464b      	mov	r3, r9
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfbc      	itt	lt
 800850c:	232d      	movlt	r3, #45	; 0x2d
 800850e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008512:	487f      	ldr	r0, [pc, #508]	; (8008710 <_printf_float+0x2e8>)
 8008514:	4b7f      	ldr	r3, [pc, #508]	; (8008714 <_printf_float+0x2ec>)
 8008516:	e7d1      	b.n	80084bc <_printf_float+0x94>
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800851e:	9206      	str	r2, [sp, #24]
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	d13f      	bne.n	80085a4 <_printf_float+0x17c>
 8008524:	2306      	movs	r3, #6
 8008526:	6063      	str	r3, [r4, #4]
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	6861      	ldr	r1, [r4, #4]
 800852c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008530:	2300      	movs	r3, #0
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	ab0a      	add	r3, sp, #40	; 0x28
 8008536:	e9cd b301 	strd	fp, r3, [sp, #4]
 800853a:	ab09      	add	r3, sp, #36	; 0x24
 800853c:	ec49 8b10 	vmov	d0, r8, r9
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008548:	4628      	mov	r0, r5
 800854a:	f7ff fecd 	bl	80082e8 <__cvt>
 800854e:	9b06      	ldr	r3, [sp, #24]
 8008550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008552:	2b47      	cmp	r3, #71	; 0x47
 8008554:	4680      	mov	r8, r0
 8008556:	d108      	bne.n	800856a <_printf_float+0x142>
 8008558:	1cc8      	adds	r0, r1, #3
 800855a:	db02      	blt.n	8008562 <_printf_float+0x13a>
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	4299      	cmp	r1, r3
 8008560:	dd41      	ble.n	80085e6 <_printf_float+0x1be>
 8008562:	f1ab 0b02 	sub.w	fp, fp, #2
 8008566:	fa5f fb8b 	uxtb.w	fp, fp
 800856a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800856e:	d820      	bhi.n	80085b2 <_printf_float+0x18a>
 8008570:	3901      	subs	r1, #1
 8008572:	465a      	mov	r2, fp
 8008574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008578:	9109      	str	r1, [sp, #36]	; 0x24
 800857a:	f7ff ff17 	bl	80083ac <__exponent>
 800857e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008580:	1813      	adds	r3, r2, r0
 8008582:	2a01      	cmp	r2, #1
 8008584:	4681      	mov	r9, r0
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	dc02      	bgt.n	8008590 <_printf_float+0x168>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	07d2      	lsls	r2, r2, #31
 800858e:	d501      	bpl.n	8008594 <_printf_float+0x16c>
 8008590:	3301      	adds	r3, #1
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008598:	2b00      	cmp	r3, #0
 800859a:	d09c      	beq.n	80084d6 <_printf_float+0xae>
 800859c:	232d      	movs	r3, #45	; 0x2d
 800859e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a2:	e798      	b.n	80084d6 <_printf_float+0xae>
 80085a4:	9a06      	ldr	r2, [sp, #24]
 80085a6:	2a47      	cmp	r2, #71	; 0x47
 80085a8:	d1be      	bne.n	8008528 <_printf_float+0x100>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1bc      	bne.n	8008528 <_printf_float+0x100>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7b9      	b.n	8008526 <_printf_float+0xfe>
 80085b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085b6:	d118      	bne.n	80085ea <_printf_float+0x1c2>
 80085b8:	2900      	cmp	r1, #0
 80085ba:	6863      	ldr	r3, [r4, #4]
 80085bc:	dd0b      	ble.n	80085d6 <_printf_float+0x1ae>
 80085be:	6121      	str	r1, [r4, #16]
 80085c0:	b913      	cbnz	r3, 80085c8 <_printf_float+0x1a0>
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	07d0      	lsls	r0, r2, #31
 80085c6:	d502      	bpl.n	80085ce <_printf_float+0x1a6>
 80085c8:	3301      	adds	r3, #1
 80085ca:	440b      	add	r3, r1
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80085d0:	f04f 0900 	mov.w	r9, #0
 80085d4:	e7de      	b.n	8008594 <_printf_float+0x16c>
 80085d6:	b913      	cbnz	r3, 80085de <_printf_float+0x1b6>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	07d2      	lsls	r2, r2, #31
 80085dc:	d501      	bpl.n	80085e2 <_printf_float+0x1ba>
 80085de:	3302      	adds	r3, #2
 80085e0:	e7f4      	b.n	80085cc <_printf_float+0x1a4>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7f2      	b.n	80085cc <_printf_float+0x1a4>
 80085e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ec:	4299      	cmp	r1, r3
 80085ee:	db05      	blt.n	80085fc <_printf_float+0x1d4>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	6121      	str	r1, [r4, #16]
 80085f4:	07d8      	lsls	r0, r3, #31
 80085f6:	d5ea      	bpl.n	80085ce <_printf_float+0x1a6>
 80085f8:	1c4b      	adds	r3, r1, #1
 80085fa:	e7e7      	b.n	80085cc <_printf_float+0x1a4>
 80085fc:	2900      	cmp	r1, #0
 80085fe:	bfd4      	ite	le
 8008600:	f1c1 0202 	rsble	r2, r1, #2
 8008604:	2201      	movgt	r2, #1
 8008606:	4413      	add	r3, r2
 8008608:	e7e0      	b.n	80085cc <_printf_float+0x1a4>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	055a      	lsls	r2, r3, #21
 800860e:	d407      	bmi.n	8008620 <_printf_float+0x1f8>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	4642      	mov	r2, r8
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	d12c      	bne.n	8008678 <_printf_float+0x250>
 800861e:	e764      	b.n	80084ea <_printf_float+0xc2>
 8008620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008624:	f240 80e0 	bls.w	80087e8 <_printf_float+0x3c0>
 8008628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	f7f8 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008634:	2800      	cmp	r0, #0
 8008636:	d034      	beq.n	80086a2 <_printf_float+0x27a>
 8008638:	4a37      	ldr	r2, [pc, #220]	; (8008718 <_printf_float+0x2f0>)
 800863a:	2301      	movs	r3, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af51 	beq.w	80084ea <_printf_float+0xc2>
 8008648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864c:	429a      	cmp	r2, r3
 800864e:	db02      	blt.n	8008656 <_printf_float+0x22e>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07d8      	lsls	r0, r3, #31
 8008654:	d510      	bpl.n	8008678 <_printf_float+0x250>
 8008656:	ee18 3a10 	vmov	r3, s16
 800865a:	4652      	mov	r2, sl
 800865c:	4631      	mov	r1, r6
 800865e:	4628      	mov	r0, r5
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	f43f af41 	beq.w	80084ea <_printf_float+0xc2>
 8008668:	f04f 0800 	mov.w	r8, #0
 800866c:	f104 091a 	add.w	r9, r4, #26
 8008670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008672:	3b01      	subs	r3, #1
 8008674:	4543      	cmp	r3, r8
 8008676:	dc09      	bgt.n	800868c <_printf_float+0x264>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	079b      	lsls	r3, r3, #30
 800867c:	f100 8105 	bmi.w	800888a <_printf_float+0x462>
 8008680:	68e0      	ldr	r0, [r4, #12]
 8008682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008684:	4298      	cmp	r0, r3
 8008686:	bfb8      	it	lt
 8008688:	4618      	movlt	r0, r3
 800868a:	e730      	b.n	80084ee <_printf_float+0xc6>
 800868c:	2301      	movs	r3, #1
 800868e:	464a      	mov	r2, r9
 8008690:	4631      	mov	r1, r6
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	f43f af27 	beq.w	80084ea <_printf_float+0xc2>
 800869c:	f108 0801 	add.w	r8, r8, #1
 80086a0:	e7e6      	b.n	8008670 <_printf_float+0x248>
 80086a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dc39      	bgt.n	800871c <_printf_float+0x2f4>
 80086a8:	4a1b      	ldr	r2, [pc, #108]	; (8008718 <_printf_float+0x2f0>)
 80086aa:	2301      	movs	r3, #1
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f af19 	beq.w	80084ea <_printf_float+0xc2>
 80086b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086bc:	4313      	orrs	r3, r2
 80086be:	d102      	bne.n	80086c6 <_printf_float+0x29e>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	07d9      	lsls	r1, r3, #31
 80086c4:	d5d8      	bpl.n	8008678 <_printf_float+0x250>
 80086c6:	ee18 3a10 	vmov	r3, s16
 80086ca:	4652      	mov	r2, sl
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	f43f af09 	beq.w	80084ea <_printf_float+0xc2>
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	f104 0a1a 	add.w	sl, r4, #26
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	425b      	negs	r3, r3
 80086e4:	454b      	cmp	r3, r9
 80086e6:	dc01      	bgt.n	80086ec <_printf_float+0x2c4>
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	e792      	b.n	8008612 <_printf_float+0x1ea>
 80086ec:	2301      	movs	r3, #1
 80086ee:	4652      	mov	r2, sl
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	f43f aef7 	beq.w	80084ea <_printf_float+0xc2>
 80086fc:	f109 0901 	add.w	r9, r9, #1
 8008700:	e7ee      	b.n	80086e0 <_printf_float+0x2b8>
 8008702:	bf00      	nop
 8008704:	7fefffff 	.word	0x7fefffff
 8008708:	0800cdb0 	.word	0x0800cdb0
 800870c:	0800cdb4 	.word	0x0800cdb4
 8008710:	0800cdbc 	.word	0x0800cdbc
 8008714:	0800cdb8 	.word	0x0800cdb8
 8008718:	0800cdc0 	.word	0x0800cdc0
 800871c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800871e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008720:	429a      	cmp	r2, r3
 8008722:	bfa8      	it	ge
 8008724:	461a      	movge	r2, r3
 8008726:	2a00      	cmp	r2, #0
 8008728:	4691      	mov	r9, r2
 800872a:	dc37      	bgt.n	800879c <_printf_float+0x374>
 800872c:	f04f 0b00 	mov.w	fp, #0
 8008730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008734:	f104 021a 	add.w	r2, r4, #26
 8008738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	eba3 0309 	sub.w	r3, r3, r9
 8008740:	455b      	cmp	r3, fp
 8008742:	dc33      	bgt.n	80087ac <_printf_float+0x384>
 8008744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008748:	429a      	cmp	r2, r3
 800874a:	db3b      	blt.n	80087c4 <_printf_float+0x39c>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	07da      	lsls	r2, r3, #31
 8008750:	d438      	bmi.n	80087c4 <_printf_float+0x39c>
 8008752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008754:	9a05      	ldr	r2, [sp, #20]
 8008756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008758:	1a9a      	subs	r2, r3, r2
 800875a:	eba3 0901 	sub.w	r9, r3, r1
 800875e:	4591      	cmp	r9, r2
 8008760:	bfa8      	it	ge
 8008762:	4691      	movge	r9, r2
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	dc35      	bgt.n	80087d6 <_printf_float+0x3ae>
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008772:	f104 0a1a 	add.w	sl, r4, #26
 8008776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	eba3 0309 	sub.w	r3, r3, r9
 8008780:	4543      	cmp	r3, r8
 8008782:	f77f af79 	ble.w	8008678 <_printf_float+0x250>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f aeaa 	beq.w	80084ea <_printf_float+0xc2>
 8008796:	f108 0801 	add.w	r8, r8, #1
 800879a:	e7ec      	b.n	8008776 <_printf_float+0x34e>
 800879c:	4613      	mov	r3, r2
 800879e:	4631      	mov	r1, r6
 80087a0:	4642      	mov	r2, r8
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	d1c0      	bne.n	800872c <_printf_float+0x304>
 80087aa:	e69e      	b.n	80084ea <_printf_float+0xc2>
 80087ac:	2301      	movs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	9205      	str	r2, [sp, #20]
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f ae97 	beq.w	80084ea <_printf_float+0xc2>
 80087bc:	9a05      	ldr	r2, [sp, #20]
 80087be:	f10b 0b01 	add.w	fp, fp, #1
 80087c2:	e7b9      	b.n	8008738 <_printf_float+0x310>
 80087c4:	ee18 3a10 	vmov	r3, s16
 80087c8:	4652      	mov	r2, sl
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	d1be      	bne.n	8008752 <_printf_float+0x32a>
 80087d4:	e689      	b.n	80084ea <_printf_float+0xc2>
 80087d6:	9a05      	ldr	r2, [sp, #20]
 80087d8:	464b      	mov	r3, r9
 80087da:	4442      	add	r2, r8
 80087dc:	4631      	mov	r1, r6
 80087de:	4628      	mov	r0, r5
 80087e0:	47b8      	blx	r7
 80087e2:	3001      	adds	r0, #1
 80087e4:	d1c1      	bne.n	800876a <_printf_float+0x342>
 80087e6:	e680      	b.n	80084ea <_printf_float+0xc2>
 80087e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087ea:	2a01      	cmp	r2, #1
 80087ec:	dc01      	bgt.n	80087f2 <_printf_float+0x3ca>
 80087ee:	07db      	lsls	r3, r3, #31
 80087f0:	d538      	bpl.n	8008864 <_printf_float+0x43c>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4642      	mov	r2, r8
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae74 	beq.w	80084ea <_printf_float+0xc2>
 8008802:	ee18 3a10 	vmov	r3, s16
 8008806:	4652      	mov	r2, sl
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f ae6b 	beq.w	80084ea <_printf_float+0xc2>
 8008814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	f7f8 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8008820:	b9d8      	cbnz	r0, 800885a <_printf_float+0x432>
 8008822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008824:	f108 0201 	add.w	r2, r8, #1
 8008828:	3b01      	subs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	d10e      	bne.n	8008852 <_printf_float+0x42a>
 8008834:	e659      	b.n	80084ea <_printf_float+0xc2>
 8008836:	2301      	movs	r3, #1
 8008838:	4652      	mov	r2, sl
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	f43f ae52 	beq.w	80084ea <_printf_float+0xc2>
 8008846:	f108 0801 	add.w	r8, r8, #1
 800884a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884c:	3b01      	subs	r3, #1
 800884e:	4543      	cmp	r3, r8
 8008850:	dcf1      	bgt.n	8008836 <_printf_float+0x40e>
 8008852:	464b      	mov	r3, r9
 8008854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008858:	e6dc      	b.n	8008614 <_printf_float+0x1ec>
 800885a:	f04f 0800 	mov.w	r8, #0
 800885e:	f104 0a1a 	add.w	sl, r4, #26
 8008862:	e7f2      	b.n	800884a <_printf_float+0x422>
 8008864:	2301      	movs	r3, #1
 8008866:	4642      	mov	r2, r8
 8008868:	e7df      	b.n	800882a <_printf_float+0x402>
 800886a:	2301      	movs	r3, #1
 800886c:	464a      	mov	r2, r9
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f ae38 	beq.w	80084ea <_printf_float+0xc2>
 800887a:	f108 0801 	add.w	r8, r8, #1
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008882:	1a5b      	subs	r3, r3, r1
 8008884:	4543      	cmp	r3, r8
 8008886:	dcf0      	bgt.n	800886a <_printf_float+0x442>
 8008888:	e6fa      	b.n	8008680 <_printf_float+0x258>
 800888a:	f04f 0800 	mov.w	r8, #0
 800888e:	f104 0919 	add.w	r9, r4, #25
 8008892:	e7f4      	b.n	800887e <_printf_float+0x456>

08008894 <_printf_common>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	4616      	mov	r6, r2
 800889a:	4699      	mov	r9, r3
 800889c:	688a      	ldr	r2, [r1, #8]
 800889e:	690b      	ldr	r3, [r1, #16]
 80088a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	bfb8      	it	lt
 80088a8:	4613      	movlt	r3, r2
 80088aa:	6033      	str	r3, [r6, #0]
 80088ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088b0:	4607      	mov	r7, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	b10a      	cbz	r2, 80088ba <_printf_common+0x26>
 80088b6:	3301      	adds	r3, #1
 80088b8:	6033      	str	r3, [r6, #0]
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	0699      	lsls	r1, r3, #26
 80088be:	bf42      	ittt	mi
 80088c0:	6833      	ldrmi	r3, [r6, #0]
 80088c2:	3302      	addmi	r3, #2
 80088c4:	6033      	strmi	r3, [r6, #0]
 80088c6:	6825      	ldr	r5, [r4, #0]
 80088c8:	f015 0506 	ands.w	r5, r5, #6
 80088cc:	d106      	bne.n	80088dc <_printf_common+0x48>
 80088ce:	f104 0a19 	add.w	sl, r4, #25
 80088d2:	68e3      	ldr	r3, [r4, #12]
 80088d4:	6832      	ldr	r2, [r6, #0]
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	42ab      	cmp	r3, r5
 80088da:	dc26      	bgt.n	800892a <_printf_common+0x96>
 80088dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088e0:	1e13      	subs	r3, r2, #0
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	bf18      	it	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	0692      	lsls	r2, r2, #26
 80088ea:	d42b      	bmi.n	8008944 <_printf_common+0xb0>
 80088ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088f0:	4649      	mov	r1, r9
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d01e      	beq.n	8008938 <_printf_common+0xa4>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	68e5      	ldr	r5, [r4, #12]
 80088fe:	6832      	ldr	r2, [r6, #0]
 8008900:	f003 0306 	and.w	r3, r3, #6
 8008904:	2b04      	cmp	r3, #4
 8008906:	bf08      	it	eq
 8008908:	1aad      	subeq	r5, r5, r2
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	bf0c      	ite	eq
 8008910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008914:	2500      	movne	r5, #0
 8008916:	4293      	cmp	r3, r2
 8008918:	bfc4      	itt	gt
 800891a:	1a9b      	subgt	r3, r3, r2
 800891c:	18ed      	addgt	r5, r5, r3
 800891e:	2600      	movs	r6, #0
 8008920:	341a      	adds	r4, #26
 8008922:	42b5      	cmp	r5, r6
 8008924:	d11a      	bne.n	800895c <_printf_common+0xc8>
 8008926:	2000      	movs	r0, #0
 8008928:	e008      	b.n	800893c <_printf_common+0xa8>
 800892a:	2301      	movs	r3, #1
 800892c:	4652      	mov	r2, sl
 800892e:	4649      	mov	r1, r9
 8008930:	4638      	mov	r0, r7
 8008932:	47c0      	blx	r8
 8008934:	3001      	adds	r0, #1
 8008936:	d103      	bne.n	8008940 <_printf_common+0xac>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008940:	3501      	adds	r5, #1
 8008942:	e7c6      	b.n	80088d2 <_printf_common+0x3e>
 8008944:	18e1      	adds	r1, r4, r3
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	2030      	movs	r0, #48	; 0x30
 800894a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800894e:	4422      	add	r2, r4
 8008950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008958:	3302      	adds	r3, #2
 800895a:	e7c7      	b.n	80088ec <_printf_common+0x58>
 800895c:	2301      	movs	r3, #1
 800895e:	4622      	mov	r2, r4
 8008960:	4649      	mov	r1, r9
 8008962:	4638      	mov	r0, r7
 8008964:	47c0      	blx	r8
 8008966:	3001      	adds	r0, #1
 8008968:	d0e6      	beq.n	8008938 <_printf_common+0xa4>
 800896a:	3601      	adds	r6, #1
 800896c:	e7d9      	b.n	8008922 <_printf_common+0x8e>
	...

08008970 <_printf_i>:
 8008970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	7e0f      	ldrb	r7, [r1, #24]
 8008976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008978:	2f78      	cmp	r7, #120	; 0x78
 800897a:	4691      	mov	r9, r2
 800897c:	4680      	mov	r8, r0
 800897e:	460c      	mov	r4, r1
 8008980:	469a      	mov	sl, r3
 8008982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008986:	d807      	bhi.n	8008998 <_printf_i+0x28>
 8008988:	2f62      	cmp	r7, #98	; 0x62
 800898a:	d80a      	bhi.n	80089a2 <_printf_i+0x32>
 800898c:	2f00      	cmp	r7, #0
 800898e:	f000 80d8 	beq.w	8008b42 <_printf_i+0x1d2>
 8008992:	2f58      	cmp	r7, #88	; 0x58
 8008994:	f000 80a3 	beq.w	8008ade <_printf_i+0x16e>
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089a0:	e03a      	b.n	8008a18 <_printf_i+0xa8>
 80089a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089a6:	2b15      	cmp	r3, #21
 80089a8:	d8f6      	bhi.n	8008998 <_printf_i+0x28>
 80089aa:	a101      	add	r1, pc, #4	; (adr r1, 80089b0 <_printf_i+0x40>)
 80089ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	08008a1d 	.word	0x08008a1d
 80089b8:	08008999 	.word	0x08008999
 80089bc:	08008999 	.word	0x08008999
 80089c0:	08008999 	.word	0x08008999
 80089c4:	08008999 	.word	0x08008999
 80089c8:	08008a1d 	.word	0x08008a1d
 80089cc:	08008999 	.word	0x08008999
 80089d0:	08008999 	.word	0x08008999
 80089d4:	08008999 	.word	0x08008999
 80089d8:	08008999 	.word	0x08008999
 80089dc:	08008b29 	.word	0x08008b29
 80089e0:	08008a4d 	.word	0x08008a4d
 80089e4:	08008b0b 	.word	0x08008b0b
 80089e8:	08008999 	.word	0x08008999
 80089ec:	08008999 	.word	0x08008999
 80089f0:	08008b4b 	.word	0x08008b4b
 80089f4:	08008999 	.word	0x08008999
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008999 	.word	0x08008999
 8008a00:	08008999 	.word	0x08008999
 8008a04:	08008b13 	.word	0x08008b13
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0a3      	b.n	8008b64 <_printf_i+0x1f4>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	6829      	ldr	r1, [r5, #0]
 8008a20:	0606      	lsls	r6, r0, #24
 8008a22:	f101 0304 	add.w	r3, r1, #4
 8008a26:	d50a      	bpl.n	8008a3e <_printf_i+0xce>
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	da03      	bge.n	8008a38 <_printf_i+0xc8>
 8008a30:	232d      	movs	r3, #45	; 0x2d
 8008a32:	4276      	negs	r6, r6
 8008a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a38:	485e      	ldr	r0, [pc, #376]	; (8008bb4 <_printf_i+0x244>)
 8008a3a:	230a      	movs	r3, #10
 8008a3c:	e019      	b.n	8008a72 <_printf_i+0x102>
 8008a3e:	680e      	ldr	r6, [r1, #0]
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a46:	bf18      	it	ne
 8008a48:	b236      	sxthne	r6, r6
 8008a4a:	e7ef      	b.n	8008a2c <_printf_i+0xbc>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	1d19      	adds	r1, r3, #4
 8008a52:	6029      	str	r1, [r5, #0]
 8008a54:	0601      	lsls	r1, r0, #24
 8008a56:	d501      	bpl.n	8008a5c <_printf_i+0xec>
 8008a58:	681e      	ldr	r6, [r3, #0]
 8008a5a:	e002      	b.n	8008a62 <_printf_i+0xf2>
 8008a5c:	0646      	lsls	r6, r0, #25
 8008a5e:	d5fb      	bpl.n	8008a58 <_printf_i+0xe8>
 8008a60:	881e      	ldrh	r6, [r3, #0]
 8008a62:	4854      	ldr	r0, [pc, #336]	; (8008bb4 <_printf_i+0x244>)
 8008a64:	2f6f      	cmp	r7, #111	; 0x6f
 8008a66:	bf0c      	ite	eq
 8008a68:	2308      	moveq	r3, #8
 8008a6a:	230a      	movne	r3, #10
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a72:	6865      	ldr	r5, [r4, #4]
 8008a74:	60a5      	str	r5, [r4, #8]
 8008a76:	2d00      	cmp	r5, #0
 8008a78:	bfa2      	ittt	ge
 8008a7a:	6821      	ldrge	r1, [r4, #0]
 8008a7c:	f021 0104 	bicge.w	r1, r1, #4
 8008a80:	6021      	strge	r1, [r4, #0]
 8008a82:	b90e      	cbnz	r6, 8008a88 <_printf_i+0x118>
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	d04d      	beq.n	8008b24 <_printf_i+0x1b4>
 8008a88:	4615      	mov	r5, r2
 8008a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a92:	5dc7      	ldrb	r7, [r0, r7]
 8008a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a98:	4637      	mov	r7, r6
 8008a9a:	42bb      	cmp	r3, r7
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	d9f4      	bls.n	8008a8a <_printf_i+0x11a>
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d10b      	bne.n	8008abc <_printf_i+0x14c>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07de      	lsls	r6, r3, #31
 8008aa8:	d508      	bpl.n	8008abc <_printf_i+0x14c>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	6861      	ldr	r1, [r4, #4]
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	bfde      	ittt	le
 8008ab2:	2330      	movle	r3, #48	; 0x30
 8008ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008abc:	1b52      	subs	r2, r2, r5
 8008abe:	6122      	str	r2, [r4, #16]
 8008ac0:	f8cd a000 	str.w	sl, [sp]
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	aa03      	add	r2, sp, #12
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7ff fee2 	bl	8008894 <_printf_common>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d14c      	bne.n	8008b6e <_printf_i+0x1fe>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b004      	add	sp, #16
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	4835      	ldr	r0, [pc, #212]	; (8008bb4 <_printf_i+0x244>)
 8008ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aec:	6029      	str	r1, [r5, #0]
 8008aee:	061d      	lsls	r5, r3, #24
 8008af0:	d514      	bpl.n	8008b1c <_printf_i+0x1ac>
 8008af2:	07df      	lsls	r7, r3, #31
 8008af4:	bf44      	itt	mi
 8008af6:	f043 0320 	orrmi.w	r3, r3, #32
 8008afa:	6023      	strmi	r3, [r4, #0]
 8008afc:	b91e      	cbnz	r6, 8008b06 <_printf_i+0x196>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	f023 0320 	bic.w	r3, r3, #32
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	2310      	movs	r3, #16
 8008b08:	e7b0      	b.n	8008a6c <_printf_i+0xfc>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f043 0320 	orr.w	r3, r3, #32
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	2378      	movs	r3, #120	; 0x78
 8008b14:	4828      	ldr	r0, [pc, #160]	; (8008bb8 <_printf_i+0x248>)
 8008b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b1a:	e7e3      	b.n	8008ae4 <_printf_i+0x174>
 8008b1c:	0659      	lsls	r1, r3, #25
 8008b1e:	bf48      	it	mi
 8008b20:	b2b6      	uxthmi	r6, r6
 8008b22:	e7e6      	b.n	8008af2 <_printf_i+0x182>
 8008b24:	4615      	mov	r5, r2
 8008b26:	e7bb      	b.n	8008aa0 <_printf_i+0x130>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	6826      	ldr	r6, [r4, #0]
 8008b2c:	6961      	ldr	r1, [r4, #20]
 8008b2e:	1d18      	adds	r0, r3, #4
 8008b30:	6028      	str	r0, [r5, #0]
 8008b32:	0635      	lsls	r5, r6, #24
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0x1cc>
 8008b38:	6019      	str	r1, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <_printf_i+0x1d2>
 8008b3c:	0670      	lsls	r0, r6, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0x1c8>
 8008b40:	8019      	strh	r1, [r3, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	4615      	mov	r5, r2
 8008b48:	e7ba      	b.n	8008ac0 <_printf_i+0x150>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	602a      	str	r2, [r5, #0]
 8008b50:	681d      	ldr	r5, [r3, #0]
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4628      	mov	r0, r5
 8008b58:	f7f7 fb42 	bl	80001e0 <memchr>
 8008b5c:	b108      	cbz	r0, 8008b62 <_printf_i+0x1f2>
 8008b5e:	1b40      	subs	r0, r0, r5
 8008b60:	6060      	str	r0, [r4, #4]
 8008b62:	6863      	ldr	r3, [r4, #4]
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	2300      	movs	r3, #0
 8008b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b6c:	e7a8      	b.n	8008ac0 <_printf_i+0x150>
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	462a      	mov	r2, r5
 8008b72:	4649      	mov	r1, r9
 8008b74:	4640      	mov	r0, r8
 8008b76:	47d0      	blx	sl
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d0ab      	beq.n	8008ad4 <_printf_i+0x164>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	079b      	lsls	r3, r3, #30
 8008b80:	d413      	bmi.n	8008baa <_printf_i+0x23a>
 8008b82:	68e0      	ldr	r0, [r4, #12]
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	4298      	cmp	r0, r3
 8008b88:	bfb8      	it	lt
 8008b8a:	4618      	movlt	r0, r3
 8008b8c:	e7a4      	b.n	8008ad8 <_printf_i+0x168>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4632      	mov	r2, r6
 8008b92:	4649      	mov	r1, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	47d0      	blx	sl
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d09b      	beq.n	8008ad4 <_printf_i+0x164>
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	9903      	ldr	r1, [sp, #12]
 8008ba2:	1a5b      	subs	r3, r3, r1
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dcf2      	bgt.n	8008b8e <_printf_i+0x21e>
 8008ba8:	e7eb      	b.n	8008b82 <_printf_i+0x212>
 8008baa:	2500      	movs	r5, #0
 8008bac:	f104 0619 	add.w	r6, r4, #25
 8008bb0:	e7f5      	b.n	8008b9e <_printf_i+0x22e>
 8008bb2:	bf00      	nop
 8008bb4:	0800cdc2 	.word	0x0800cdc2
 8008bb8:	0800cdd3 	.word	0x0800cdd3

08008bbc <_scanf_float>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	4617      	mov	r7, r2
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	688b      	ldr	r3, [r1, #8]
 8008bc8:	1e5a      	subs	r2, r3, #1
 8008bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008bce:	bf83      	ittte	hi
 8008bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008bd4:	195b      	addhi	r3, r3, r5
 8008bd6:	9302      	strhi	r3, [sp, #8]
 8008bd8:	2300      	movls	r3, #0
 8008bda:	bf86      	itte	hi
 8008bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008be0:	608b      	strhi	r3, [r1, #8]
 8008be2:	9302      	strls	r3, [sp, #8]
 8008be4:	680b      	ldr	r3, [r1, #0]
 8008be6:	468b      	mov	fp, r1
 8008be8:	2500      	movs	r5, #0
 8008bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8008bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	465e      	mov	r6, fp
 8008bfc:	46aa      	mov	sl, r5
 8008bfe:	46a9      	mov	r9, r5
 8008c00:	9501      	str	r5, [sp, #4]
 8008c02:	68a2      	ldr	r2, [r4, #8]
 8008c04:	b152      	cbz	r2, 8008c1c <_scanf_float+0x60>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8008c0c:	d864      	bhi.n	8008cd8 <_scanf_float+0x11c>
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d83c      	bhi.n	8008c8c <_scanf_float+0xd0>
 8008c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c16:	b2c8      	uxtb	r0, r1
 8008c18:	280e      	cmp	r0, #14
 8008c1a:	d93a      	bls.n	8008c92 <_scanf_float+0xd6>
 8008c1c:	f1b9 0f00 	cmp.w	r9, #0
 8008c20:	d003      	beq.n	8008c2a <_scanf_float+0x6e>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c2e:	f1ba 0f01 	cmp.w	sl, #1
 8008c32:	f200 8113 	bhi.w	8008e5c <_scanf_float+0x2a0>
 8008c36:	455e      	cmp	r6, fp
 8008c38:	f200 8105 	bhi.w	8008e46 <_scanf_float+0x28a>
 8008c3c:	2501      	movs	r5, #1
 8008c3e:	4628      	mov	r0, r5
 8008c40:	b007      	add	sp, #28
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c4a:	2a0d      	cmp	r2, #13
 8008c4c:	d8e6      	bhi.n	8008c1c <_scanf_float+0x60>
 8008c4e:	a101      	add	r1, pc, #4	; (adr r1, 8008c54 <_scanf_float+0x98>)
 8008c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c54:	08008d93 	.word	0x08008d93
 8008c58:	08008c1d 	.word	0x08008c1d
 8008c5c:	08008c1d 	.word	0x08008c1d
 8008c60:	08008c1d 	.word	0x08008c1d
 8008c64:	08008df3 	.word	0x08008df3
 8008c68:	08008dcb 	.word	0x08008dcb
 8008c6c:	08008c1d 	.word	0x08008c1d
 8008c70:	08008c1d 	.word	0x08008c1d
 8008c74:	08008da1 	.word	0x08008da1
 8008c78:	08008c1d 	.word	0x08008c1d
 8008c7c:	08008c1d 	.word	0x08008c1d
 8008c80:	08008c1d 	.word	0x08008c1d
 8008c84:	08008c1d 	.word	0x08008c1d
 8008c88:	08008d59 	.word	0x08008d59
 8008c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c90:	e7db      	b.n	8008c4a <_scanf_float+0x8e>
 8008c92:	290e      	cmp	r1, #14
 8008c94:	d8c2      	bhi.n	8008c1c <_scanf_float+0x60>
 8008c96:	a001      	add	r0, pc, #4	; (adr r0, 8008c9c <_scanf_float+0xe0>)
 8008c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c9c:	08008d4b 	.word	0x08008d4b
 8008ca0:	08008c1d 	.word	0x08008c1d
 8008ca4:	08008d4b 	.word	0x08008d4b
 8008ca8:	08008ddf 	.word	0x08008ddf
 8008cac:	08008c1d 	.word	0x08008c1d
 8008cb0:	08008cf9 	.word	0x08008cf9
 8008cb4:	08008d35 	.word	0x08008d35
 8008cb8:	08008d35 	.word	0x08008d35
 8008cbc:	08008d35 	.word	0x08008d35
 8008cc0:	08008d35 	.word	0x08008d35
 8008cc4:	08008d35 	.word	0x08008d35
 8008cc8:	08008d35 	.word	0x08008d35
 8008ccc:	08008d35 	.word	0x08008d35
 8008cd0:	08008d35 	.word	0x08008d35
 8008cd4:	08008d35 	.word	0x08008d35
 8008cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8008cda:	d809      	bhi.n	8008cf0 <_scanf_float+0x134>
 8008cdc:	2b60      	cmp	r3, #96	; 0x60
 8008cde:	d8b2      	bhi.n	8008c46 <_scanf_float+0x8a>
 8008ce0:	2b54      	cmp	r3, #84	; 0x54
 8008ce2:	d077      	beq.n	8008dd4 <_scanf_float+0x218>
 8008ce4:	2b59      	cmp	r3, #89	; 0x59
 8008ce6:	d199      	bne.n	8008c1c <_scanf_float+0x60>
 8008ce8:	2d07      	cmp	r5, #7
 8008cea:	d197      	bne.n	8008c1c <_scanf_float+0x60>
 8008cec:	2508      	movs	r5, #8
 8008cee:	e029      	b.n	8008d44 <_scanf_float+0x188>
 8008cf0:	2b74      	cmp	r3, #116	; 0x74
 8008cf2:	d06f      	beq.n	8008dd4 <_scanf_float+0x218>
 8008cf4:	2b79      	cmp	r3, #121	; 0x79
 8008cf6:	e7f6      	b.n	8008ce6 <_scanf_float+0x12a>
 8008cf8:	6821      	ldr	r1, [r4, #0]
 8008cfa:	05c8      	lsls	r0, r1, #23
 8008cfc:	d51a      	bpl.n	8008d34 <_scanf_float+0x178>
 8008cfe:	9b02      	ldr	r3, [sp, #8]
 8008d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d04:	6021      	str	r1, [r4, #0]
 8008d06:	f109 0901 	add.w	r9, r9, #1
 8008d0a:	b11b      	cbz	r3, 8008d14 <_scanf_float+0x158>
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	3201      	adds	r2, #1
 8008d10:	9302      	str	r3, [sp, #8]
 8008d12:	60a2      	str	r2, [r4, #8]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	60a3      	str	r3, [r4, #8]
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	607b      	str	r3, [r7, #4]
 8008d28:	f340 8084 	ble.w	8008e34 <_scanf_float+0x278>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	e766      	b.n	8008c02 <_scanf_float+0x46>
 8008d34:	eb1a 0f05 	cmn.w	sl, r5
 8008d38:	f47f af70 	bne.w	8008c1c <_scanf_float+0x60>
 8008d3c:	6822      	ldr	r2, [r4, #0]
 8008d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d42:	6022      	str	r2, [r4, #0]
 8008d44:	f806 3b01 	strb.w	r3, [r6], #1
 8008d48:	e7e4      	b.n	8008d14 <_scanf_float+0x158>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	0610      	lsls	r0, r2, #24
 8008d4e:	f57f af65 	bpl.w	8008c1c <_scanf_float+0x60>
 8008d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d56:	e7f4      	b.n	8008d42 <_scanf_float+0x186>
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d10e      	bne.n	8008d7c <_scanf_float+0x1c0>
 8008d5e:	f1b9 0f00 	cmp.w	r9, #0
 8008d62:	d10e      	bne.n	8008d82 <_scanf_float+0x1c6>
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d6e:	d108      	bne.n	8008d82 <_scanf_float+0x1c6>
 8008d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d74:	6022      	str	r2, [r4, #0]
 8008d76:	f04f 0a01 	mov.w	sl, #1
 8008d7a:	e7e3      	b.n	8008d44 <_scanf_float+0x188>
 8008d7c:	f1ba 0f02 	cmp.w	sl, #2
 8008d80:	d055      	beq.n	8008e2e <_scanf_float+0x272>
 8008d82:	2d01      	cmp	r5, #1
 8008d84:	d002      	beq.n	8008d8c <_scanf_float+0x1d0>
 8008d86:	2d04      	cmp	r5, #4
 8008d88:	f47f af48 	bne.w	8008c1c <_scanf_float+0x60>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	b2ed      	uxtb	r5, r5
 8008d90:	e7d8      	b.n	8008d44 <_scanf_float+0x188>
 8008d92:	f1ba 0f01 	cmp.w	sl, #1
 8008d96:	f47f af41 	bne.w	8008c1c <_scanf_float+0x60>
 8008d9a:	f04f 0a02 	mov.w	sl, #2
 8008d9e:	e7d1      	b.n	8008d44 <_scanf_float+0x188>
 8008da0:	b97d      	cbnz	r5, 8008dc2 <_scanf_float+0x206>
 8008da2:	f1b9 0f00 	cmp.w	r9, #0
 8008da6:	f47f af3c 	bne.w	8008c22 <_scanf_float+0x66>
 8008daa:	6822      	ldr	r2, [r4, #0]
 8008dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008db4:	f47f af39 	bne.w	8008c2a <_scanf_float+0x6e>
 8008db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	2501      	movs	r5, #1
 8008dc0:	e7c0      	b.n	8008d44 <_scanf_float+0x188>
 8008dc2:	2d03      	cmp	r5, #3
 8008dc4:	d0e2      	beq.n	8008d8c <_scanf_float+0x1d0>
 8008dc6:	2d05      	cmp	r5, #5
 8008dc8:	e7de      	b.n	8008d88 <_scanf_float+0x1cc>
 8008dca:	2d02      	cmp	r5, #2
 8008dcc:	f47f af26 	bne.w	8008c1c <_scanf_float+0x60>
 8008dd0:	2503      	movs	r5, #3
 8008dd2:	e7b7      	b.n	8008d44 <_scanf_float+0x188>
 8008dd4:	2d06      	cmp	r5, #6
 8008dd6:	f47f af21 	bne.w	8008c1c <_scanf_float+0x60>
 8008dda:	2507      	movs	r5, #7
 8008ddc:	e7b2      	b.n	8008d44 <_scanf_float+0x188>
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	0591      	lsls	r1, r2, #22
 8008de2:	f57f af1b 	bpl.w	8008c1c <_scanf_float+0x60>
 8008de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008df0:	e7a8      	b.n	8008d44 <_scanf_float+0x188>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008dfc:	d006      	beq.n	8008e0c <_scanf_float+0x250>
 8008dfe:	0550      	lsls	r0, r2, #21
 8008e00:	f57f af0c 	bpl.w	8008c1c <_scanf_float+0x60>
 8008e04:	f1b9 0f00 	cmp.w	r9, #0
 8008e08:	f43f af0f 	beq.w	8008c2a <_scanf_float+0x6e>
 8008e0c:	0591      	lsls	r1, r2, #22
 8008e0e:	bf58      	it	pl
 8008e10:	9901      	ldrpl	r1, [sp, #4]
 8008e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e16:	bf58      	it	pl
 8008e18:	eba9 0101 	subpl.w	r1, r9, r1
 8008e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e20:	bf58      	it	pl
 8008e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e26:	6022      	str	r2, [r4, #0]
 8008e28:	f04f 0900 	mov.w	r9, #0
 8008e2c:	e78a      	b.n	8008d44 <_scanf_float+0x188>
 8008e2e:	f04f 0a03 	mov.w	sl, #3
 8008e32:	e787      	b.n	8008d44 <_scanf_float+0x188>
 8008e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4798      	blx	r3
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f43f aedf 	beq.w	8008c02 <_scanf_float+0x46>
 8008e44:	e6ea      	b.n	8008c1c <_scanf_float+0x60>
 8008e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e4e:	463a      	mov	r2, r7
 8008e50:	4640      	mov	r0, r8
 8008e52:	4798      	blx	r3
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	e6ec      	b.n	8008c36 <_scanf_float+0x7a>
 8008e5c:	1e6b      	subs	r3, r5, #1
 8008e5e:	2b06      	cmp	r3, #6
 8008e60:	d825      	bhi.n	8008eae <_scanf_float+0x2f2>
 8008e62:	2d02      	cmp	r5, #2
 8008e64:	d836      	bhi.n	8008ed4 <_scanf_float+0x318>
 8008e66:	455e      	cmp	r6, fp
 8008e68:	f67f aee8 	bls.w	8008c3c <_scanf_float+0x80>
 8008e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e74:	463a      	mov	r2, r7
 8008e76:	4640      	mov	r0, r8
 8008e78:	4798      	blx	r3
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	6123      	str	r3, [r4, #16]
 8008e80:	e7f1      	b.n	8008e66 <_scanf_float+0x2aa>
 8008e82:	9802      	ldr	r0, [sp, #8]
 8008e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	463a      	mov	r2, r7
 8008e90:	4640      	mov	r0, r8
 8008e92:	4798      	blx	r3
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8008ea2:	f1ba 0f02 	cmp.w	sl, #2
 8008ea6:	d1ec      	bne.n	8008e82 <_scanf_float+0x2c6>
 8008ea8:	3d03      	subs	r5, #3
 8008eaa:	b2ed      	uxtb	r5, r5
 8008eac:	1b76      	subs	r6, r6, r5
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	05da      	lsls	r2, r3, #23
 8008eb2:	d52f      	bpl.n	8008f14 <_scanf_float+0x358>
 8008eb4:	055b      	lsls	r3, r3, #21
 8008eb6:	d510      	bpl.n	8008eda <_scanf_float+0x31e>
 8008eb8:	455e      	cmp	r6, fp
 8008eba:	f67f aebf 	bls.w	8008c3c <_scanf_float+0x80>
 8008ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ec6:	463a      	mov	r2, r7
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4798      	blx	r3
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	e7f1      	b.n	8008eb8 <_scanf_float+0x2fc>
 8008ed4:	46aa      	mov	sl, r5
 8008ed6:	9602      	str	r6, [sp, #8]
 8008ed8:	e7df      	b.n	8008e9a <_scanf_float+0x2de>
 8008eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	2965      	cmp	r1, #101	; 0x65
 8008ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	d00c      	beq.n	8008f08 <_scanf_float+0x34c>
 8008eee:	2945      	cmp	r1, #69	; 0x45
 8008ef0:	d00a      	beq.n	8008f08 <_scanf_float+0x34c>
 8008ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ef6:	463a      	mov	r2, r7
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4798      	blx	r3
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	1eb5      	subs	r5, r6, #2
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f0c:	463a      	mov	r2, r7
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4798      	blx	r3
 8008f12:	462e      	mov	r6, r5
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	f015 0510 	ands.w	r5, r5, #16
 8008f1a:	d159      	bne.n	8008fd0 <_scanf_float+0x414>
 8008f1c:	7035      	strb	r5, [r6, #0]
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f28:	d11b      	bne.n	8008f62 <_scanf_float+0x3a6>
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	454b      	cmp	r3, r9
 8008f2e:	eba3 0209 	sub.w	r2, r3, r9
 8008f32:	d123      	bne.n	8008f7c <_scanf_float+0x3c0>
 8008f34:	2200      	movs	r2, #0
 8008f36:	4659      	mov	r1, fp
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f000 ff27 	bl	8009d8c <_strtod_r>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	f012 0f02 	tst.w	r2, #2
 8008f46:	ec57 6b10 	vmov	r6, r7, d0
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	d021      	beq.n	8008f92 <_scanf_float+0x3d6>
 8008f4e:	9903      	ldr	r1, [sp, #12]
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	600a      	str	r2, [r1, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	e9c3 6700 	strd	r6, r7, [r3]
 8008f5a:	68e3      	ldr	r3, [r4, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	60e3      	str	r3, [r4, #12]
 8008f60:	e66d      	b.n	8008c3e <_scanf_float+0x82>
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0e5      	beq.n	8008f34 <_scanf_float+0x378>
 8008f68:	9905      	ldr	r1, [sp, #20]
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	3101      	adds	r1, #1
 8008f70:	4640      	mov	r0, r8
 8008f72:	f000 ff93 	bl	8009e9c <_strtol_r>
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	9e05      	ldr	r6, [sp, #20]
 8008f7a:	1ac2      	subs	r2, r0, r3
 8008f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f80:	429e      	cmp	r6, r3
 8008f82:	bf28      	it	cs
 8008f84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f88:	4912      	ldr	r1, [pc, #72]	; (8008fd4 <_scanf_float+0x418>)
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f000 f8ba 	bl	8009104 <siprintf>
 8008f90:	e7d0      	b.n	8008f34 <_scanf_float+0x378>
 8008f92:	9903      	ldr	r1, [sp, #12]
 8008f94:	f012 0f04 	tst.w	r2, #4
 8008f98:	f103 0204 	add.w	r2, r3, #4
 8008f9c:	600a      	str	r2, [r1, #0]
 8008f9e:	d1d9      	bne.n	8008f54 <_scanf_float+0x398>
 8008fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8008fa4:	ee10 2a10 	vmov	r2, s0
 8008fa8:	ee10 0a10 	vmov	r0, s0
 8008fac:	463b      	mov	r3, r7
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8008fb4:	b128      	cbz	r0, 8008fc2 <_scanf_float+0x406>
 8008fb6:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <_scanf_float+0x41c>)
 8008fb8:	f000 f89e 	bl	80090f8 <nanf>
 8008fbc:	ed88 0a00 	vstr	s0, [r8]
 8008fc0:	e7cb      	b.n	8008f5a <_scanf_float+0x39e>
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 fe0f 	bl	8000be8 <__aeabi_d2f>
 8008fca:	f8c8 0000 	str.w	r0, [r8]
 8008fce:	e7c4      	b.n	8008f5a <_scanf_float+0x39e>
 8008fd0:	2500      	movs	r5, #0
 8008fd2:	e634      	b.n	8008c3e <_scanf_float+0x82>
 8008fd4:	0800cde4 	.word	0x0800cde4
 8008fd8:	0800d258 	.word	0x0800d258

08008fdc <iprintf>:
 8008fdc:	b40f      	push	{r0, r1, r2, r3}
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <iprintf+0x2c>)
 8008fe0:	b513      	push	{r0, r1, r4, lr}
 8008fe2:	681c      	ldr	r4, [r3, #0]
 8008fe4:	b124      	cbz	r4, 8008ff0 <iprintf+0x14>
 8008fe6:	69a3      	ldr	r3, [r4, #24]
 8008fe8:	b913      	cbnz	r3, 8008ff0 <iprintf+0x14>
 8008fea:	4620      	mov	r0, r4
 8008fec:	f001 ffac 	bl	800af48 <__sinit>
 8008ff0:	ab05      	add	r3, sp, #20
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	68a1      	ldr	r1, [r4, #8]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f003 fb83 	bl	800c704 <_vfiprintf_r>
 8008ffe:	b002      	add	sp, #8
 8009000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009004:	b004      	add	sp, #16
 8009006:	4770      	bx	lr
 8009008:	2000000c 	.word	0x2000000c

0800900c <_puts_r>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	460e      	mov	r6, r1
 8009010:	4605      	mov	r5, r0
 8009012:	b118      	cbz	r0, 800901c <_puts_r+0x10>
 8009014:	6983      	ldr	r3, [r0, #24]
 8009016:	b90b      	cbnz	r3, 800901c <_puts_r+0x10>
 8009018:	f001 ff96 	bl	800af48 <__sinit>
 800901c:	69ab      	ldr	r3, [r5, #24]
 800901e:	68ac      	ldr	r4, [r5, #8]
 8009020:	b913      	cbnz	r3, 8009028 <_puts_r+0x1c>
 8009022:	4628      	mov	r0, r5
 8009024:	f001 ff90 	bl	800af48 <__sinit>
 8009028:	4b2c      	ldr	r3, [pc, #176]	; (80090dc <_puts_r+0xd0>)
 800902a:	429c      	cmp	r4, r3
 800902c:	d120      	bne.n	8009070 <_puts_r+0x64>
 800902e:	686c      	ldr	r4, [r5, #4]
 8009030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009032:	07db      	lsls	r3, r3, #31
 8009034:	d405      	bmi.n	8009042 <_puts_r+0x36>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	0598      	lsls	r0, r3, #22
 800903a:	d402      	bmi.n	8009042 <_puts_r+0x36>
 800903c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903e:	f002 fb94 	bl	800b76a <__retarget_lock_acquire_recursive>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	0719      	lsls	r1, r3, #28
 8009046:	d51d      	bpl.n	8009084 <_puts_r+0x78>
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b1db      	cbz	r3, 8009084 <_puts_r+0x78>
 800904c:	3e01      	subs	r6, #1
 800904e:	68a3      	ldr	r3, [r4, #8]
 8009050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009054:	3b01      	subs	r3, #1
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	bb39      	cbnz	r1, 80090aa <_puts_r+0x9e>
 800905a:	2b00      	cmp	r3, #0
 800905c:	da38      	bge.n	80090d0 <_puts_r+0xc4>
 800905e:	4622      	mov	r2, r4
 8009060:	210a      	movs	r1, #10
 8009062:	4628      	mov	r0, r5
 8009064:	f000 ff1c 	bl	8009ea0 <__swbuf_r>
 8009068:	3001      	adds	r0, #1
 800906a:	d011      	beq.n	8009090 <_puts_r+0x84>
 800906c:	250a      	movs	r5, #10
 800906e:	e011      	b.n	8009094 <_puts_r+0x88>
 8009070:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <_puts_r+0xd4>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <_puts_r+0x6e>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7da      	b.n	8009030 <_puts_r+0x24>
 800907a:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <_puts_r+0xd8>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7d5      	b.n	8009030 <_puts_r+0x24>
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f000 ff5c 	bl	8009f44 <__swsetup_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0dd      	beq.n	800904c <_puts_r+0x40>
 8009090:	f04f 35ff 	mov.w	r5, #4294967295
 8009094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d405      	bmi.n	80090a6 <_puts_r+0x9a>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	059b      	lsls	r3, r3, #22
 800909e:	d402      	bmi.n	80090a6 <_puts_r+0x9a>
 80090a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a2:	f002 fb63 	bl	800b76c <__retarget_lock_release_recursive>
 80090a6:	4628      	mov	r0, r5
 80090a8:	bd70      	pop	{r4, r5, r6, pc}
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da04      	bge.n	80090b8 <_puts_r+0xac>
 80090ae:	69a2      	ldr	r2, [r4, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	dc06      	bgt.n	80090c2 <_puts_r+0xb6>
 80090b4:	290a      	cmp	r1, #10
 80090b6:	d004      	beq.n	80090c2 <_puts_r+0xb6>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	7019      	strb	r1, [r3, #0]
 80090c0:	e7c5      	b.n	800904e <_puts_r+0x42>
 80090c2:	4622      	mov	r2, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 feeb 	bl	8009ea0 <__swbuf_r>
 80090ca:	3001      	adds	r0, #1
 80090cc:	d1bf      	bne.n	800904e <_puts_r+0x42>
 80090ce:	e7df      	b.n	8009090 <_puts_r+0x84>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	250a      	movs	r5, #10
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	6022      	str	r2, [r4, #0]
 80090d8:	701d      	strb	r5, [r3, #0]
 80090da:	e7db      	b.n	8009094 <_puts_r+0x88>
 80090dc:	0800cff4 	.word	0x0800cff4
 80090e0:	0800d014 	.word	0x0800d014
 80090e4:	0800cfd4 	.word	0x0800cfd4

080090e8 <puts>:
 80090e8:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <puts+0xc>)
 80090ea:	4601      	mov	r1, r0
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	f7ff bf8d 	b.w	800900c <_puts_r>
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c

080090f8 <nanf>:
 80090f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009100 <nanf+0x8>
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	7fc00000 	.word	0x7fc00000

08009104 <siprintf>:
 8009104:	b40e      	push	{r1, r2, r3}
 8009106:	b500      	push	{lr}
 8009108:	b09c      	sub	sp, #112	; 0x70
 800910a:	ab1d      	add	r3, sp, #116	; 0x74
 800910c:	9002      	str	r0, [sp, #8]
 800910e:	9006      	str	r0, [sp, #24]
 8009110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009114:	4809      	ldr	r0, [pc, #36]	; (800913c <siprintf+0x38>)
 8009116:	9107      	str	r1, [sp, #28]
 8009118:	9104      	str	r1, [sp, #16]
 800911a:	4909      	ldr	r1, [pc, #36]	; (8009140 <siprintf+0x3c>)
 800911c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009120:	9105      	str	r1, [sp, #20]
 8009122:	6800      	ldr	r0, [r0, #0]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	a902      	add	r1, sp, #8
 8009128:	f003 f9c2 	bl	800c4b0 <_svfiprintf_r>
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
 8009132:	b01c      	add	sp, #112	; 0x70
 8009134:	f85d eb04 	ldr.w	lr, [sp], #4
 8009138:	b003      	add	sp, #12
 800913a:	4770      	bx	lr
 800913c:	2000000c 	.word	0x2000000c
 8009140:	ffff0208 	.word	0xffff0208

08009144 <sulp>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	ec45 4b10 	vmov	d0, r4, r5
 800914e:	4616      	mov	r6, r2
 8009150:	f002 ff0c 	bl	800bf6c <__ulp>
 8009154:	ec51 0b10 	vmov	r0, r1, d0
 8009158:	b17e      	cbz	r6, 800917a <sulp+0x36>
 800915a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800915e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd09      	ble.n	800917a <sulp+0x36>
 8009166:	051b      	lsls	r3, r3, #20
 8009168:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800916c:	2400      	movs	r4, #0
 800916e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0000      	movs	r0, r0
	...

08009180 <_strtod_l>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	ed2d 8b02 	vpush	{d8}
 8009188:	b09d      	sub	sp, #116	; 0x74
 800918a:	461f      	mov	r7, r3
 800918c:	2300      	movs	r3, #0
 800918e:	9318      	str	r3, [sp, #96]	; 0x60
 8009190:	4ba2      	ldr	r3, [pc, #648]	; (800941c <_strtod_l+0x29c>)
 8009192:	9213      	str	r2, [sp, #76]	; 0x4c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	4604      	mov	r4, r0
 800919a:	4618      	mov	r0, r3
 800919c:	4688      	mov	r8, r1
 800919e:	f7f7 f817 	bl	80001d0 <strlen>
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	4605      	mov	r5, r0
 80091a8:	f04f 0b00 	mov.w	fp, #0
 80091ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	2a2b      	cmp	r2, #43	; 0x2b
 80091b6:	d04e      	beq.n	8009256 <_strtod_l+0xd6>
 80091b8:	d83b      	bhi.n	8009232 <_strtod_l+0xb2>
 80091ba:	2a0d      	cmp	r2, #13
 80091bc:	d834      	bhi.n	8009228 <_strtod_l+0xa8>
 80091be:	2a08      	cmp	r2, #8
 80091c0:	d834      	bhi.n	800922c <_strtod_l+0xac>
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d03e      	beq.n	8009244 <_strtod_l+0xc4>
 80091c6:	2300      	movs	r3, #0
 80091c8:	930a      	str	r3, [sp, #40]	; 0x28
 80091ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80091cc:	7833      	ldrb	r3, [r6, #0]
 80091ce:	2b30      	cmp	r3, #48	; 0x30
 80091d0:	f040 80b0 	bne.w	8009334 <_strtod_l+0x1b4>
 80091d4:	7873      	ldrb	r3, [r6, #1]
 80091d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091da:	2b58      	cmp	r3, #88	; 0x58
 80091dc:	d168      	bne.n	80092b0 <_strtod_l+0x130>
 80091de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	ab18      	add	r3, sp, #96	; 0x60
 80091e4:	9702      	str	r7, [sp, #8]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4a8d      	ldr	r2, [pc, #564]	; (8009420 <_strtod_l+0x2a0>)
 80091ea:	ab19      	add	r3, sp, #100	; 0x64
 80091ec:	a917      	add	r1, sp, #92	; 0x5c
 80091ee:	4620      	mov	r0, r4
 80091f0:	f001 ffae 	bl	800b150 <__gethex>
 80091f4:	f010 0707 	ands.w	r7, r0, #7
 80091f8:	4605      	mov	r5, r0
 80091fa:	d005      	beq.n	8009208 <_strtod_l+0x88>
 80091fc:	2f06      	cmp	r7, #6
 80091fe:	d12c      	bne.n	800925a <_strtod_l+0xda>
 8009200:	3601      	adds	r6, #1
 8009202:	2300      	movs	r3, #0
 8009204:	9617      	str	r6, [sp, #92]	; 0x5c
 8009206:	930a      	str	r3, [sp, #40]	; 0x28
 8009208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800920a:	2b00      	cmp	r3, #0
 800920c:	f040 8590 	bne.w	8009d30 <_strtod_l+0xbb0>
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	b1eb      	cbz	r3, 8009250 <_strtod_l+0xd0>
 8009214:	4652      	mov	r2, sl
 8009216:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800921a:	ec43 2b10 	vmov	d0, r2, r3
 800921e:	b01d      	add	sp, #116	; 0x74
 8009220:	ecbd 8b02 	vpop	{d8}
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	2a20      	cmp	r2, #32
 800922a:	d1cc      	bne.n	80091c6 <_strtod_l+0x46>
 800922c:	3301      	adds	r3, #1
 800922e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009230:	e7be      	b.n	80091b0 <_strtod_l+0x30>
 8009232:	2a2d      	cmp	r2, #45	; 0x2d
 8009234:	d1c7      	bne.n	80091c6 <_strtod_l+0x46>
 8009236:	2201      	movs	r2, #1
 8009238:	920a      	str	r2, [sp, #40]	; 0x28
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	9217      	str	r2, [sp, #92]	; 0x5c
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1c2      	bne.n	80091ca <_strtod_l+0x4a>
 8009244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009246:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 856e 	bne.w	8009d2c <_strtod_l+0xbac>
 8009250:	4652      	mov	r2, sl
 8009252:	465b      	mov	r3, fp
 8009254:	e7e1      	b.n	800921a <_strtod_l+0x9a>
 8009256:	2200      	movs	r2, #0
 8009258:	e7ee      	b.n	8009238 <_strtod_l+0xb8>
 800925a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800925c:	b13a      	cbz	r2, 800926e <_strtod_l+0xee>
 800925e:	2135      	movs	r1, #53	; 0x35
 8009260:	a81a      	add	r0, sp, #104	; 0x68
 8009262:	f002 ff8e 	bl	800c182 <__copybits>
 8009266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009268:	4620      	mov	r0, r4
 800926a:	f002 fb4d 	bl	800b908 <_Bfree>
 800926e:	3f01      	subs	r7, #1
 8009270:	2f04      	cmp	r7, #4
 8009272:	d806      	bhi.n	8009282 <_strtod_l+0x102>
 8009274:	e8df f007 	tbb	[pc, r7]
 8009278:	1714030a 	.word	0x1714030a
 800927c:	0a          	.byte	0x0a
 800927d:	00          	.byte	0x00
 800927e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009282:	0728      	lsls	r0, r5, #28
 8009284:	d5c0      	bpl.n	8009208 <_strtod_l+0x88>
 8009286:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800928a:	e7bd      	b.n	8009208 <_strtod_l+0x88>
 800928c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009290:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800929a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800929e:	e7f0      	b.n	8009282 <_strtod_l+0x102>
 80092a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009424 <_strtod_l+0x2a4>
 80092a4:	e7ed      	b.n	8009282 <_strtod_l+0x102>
 80092a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80092aa:	f04f 3aff 	mov.w	sl, #4294967295
 80092ae:	e7e8      	b.n	8009282 <_strtod_l+0x102>
 80092b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b30      	cmp	r3, #48	; 0x30
 80092ba:	d0f9      	beq.n	80092b0 <_strtod_l+0x130>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0a3      	beq.n	8009208 <_strtod_l+0x88>
 80092c0:	2301      	movs	r3, #1
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ca:	9308      	str	r3, [sp, #32]
 80092cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80092d0:	464f      	mov	r7, r9
 80092d2:	220a      	movs	r2, #10
 80092d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092d6:	7806      	ldrb	r6, [r0, #0]
 80092d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80092dc:	b2d9      	uxtb	r1, r3
 80092de:	2909      	cmp	r1, #9
 80092e0:	d92a      	bls.n	8009338 <_strtod_l+0x1b8>
 80092e2:	9905      	ldr	r1, [sp, #20]
 80092e4:	462a      	mov	r2, r5
 80092e6:	f003 fb9a 	bl	800ca1e <strncmp>
 80092ea:	b398      	cbz	r0, 8009354 <_strtod_l+0x1d4>
 80092ec:	2000      	movs	r0, #0
 80092ee:	4632      	mov	r2, r6
 80092f0:	463d      	mov	r5, r7
 80092f2:	9005      	str	r0, [sp, #20]
 80092f4:	4603      	mov	r3, r0
 80092f6:	2a65      	cmp	r2, #101	; 0x65
 80092f8:	d001      	beq.n	80092fe <_strtod_l+0x17e>
 80092fa:	2a45      	cmp	r2, #69	; 0x45
 80092fc:	d118      	bne.n	8009330 <_strtod_l+0x1b0>
 80092fe:	b91d      	cbnz	r5, 8009308 <_strtod_l+0x188>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	4302      	orrs	r2, r0
 8009304:	d09e      	beq.n	8009244 <_strtod_l+0xc4>
 8009306:	2500      	movs	r5, #0
 8009308:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800930c:	f108 0201 	add.w	r2, r8, #1
 8009310:	9217      	str	r2, [sp, #92]	; 0x5c
 8009312:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009316:	2a2b      	cmp	r2, #43	; 0x2b
 8009318:	d075      	beq.n	8009406 <_strtod_l+0x286>
 800931a:	2a2d      	cmp	r2, #45	; 0x2d
 800931c:	d07b      	beq.n	8009416 <_strtod_l+0x296>
 800931e:	f04f 0c00 	mov.w	ip, #0
 8009322:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009326:	2909      	cmp	r1, #9
 8009328:	f240 8082 	bls.w	8009430 <_strtod_l+0x2b0>
 800932c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009330:	2600      	movs	r6, #0
 8009332:	e09d      	b.n	8009470 <_strtod_l+0x2f0>
 8009334:	2300      	movs	r3, #0
 8009336:	e7c4      	b.n	80092c2 <_strtod_l+0x142>
 8009338:	2f08      	cmp	r7, #8
 800933a:	bfd8      	it	le
 800933c:	9907      	ldrle	r1, [sp, #28]
 800933e:	f100 0001 	add.w	r0, r0, #1
 8009342:	bfda      	itte	le
 8009344:	fb02 3301 	mlale	r3, r2, r1, r3
 8009348:	9307      	strle	r3, [sp, #28]
 800934a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800934e:	3701      	adds	r7, #1
 8009350:	9017      	str	r0, [sp, #92]	; 0x5c
 8009352:	e7bf      	b.n	80092d4 <_strtod_l+0x154>
 8009354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009356:	195a      	adds	r2, r3, r5
 8009358:	9217      	str	r2, [sp, #92]	; 0x5c
 800935a:	5d5a      	ldrb	r2, [r3, r5]
 800935c:	2f00      	cmp	r7, #0
 800935e:	d037      	beq.n	80093d0 <_strtod_l+0x250>
 8009360:	9005      	str	r0, [sp, #20]
 8009362:	463d      	mov	r5, r7
 8009364:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009368:	2b09      	cmp	r3, #9
 800936a:	d912      	bls.n	8009392 <_strtod_l+0x212>
 800936c:	2301      	movs	r3, #1
 800936e:	e7c2      	b.n	80092f6 <_strtod_l+0x176>
 8009370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	9217      	str	r2, [sp, #92]	; 0x5c
 8009376:	785a      	ldrb	r2, [r3, #1]
 8009378:	3001      	adds	r0, #1
 800937a:	2a30      	cmp	r2, #48	; 0x30
 800937c:	d0f8      	beq.n	8009370 <_strtod_l+0x1f0>
 800937e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009382:	2b08      	cmp	r3, #8
 8009384:	f200 84d9 	bhi.w	8009d3a <_strtod_l+0xbba>
 8009388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800938a:	9005      	str	r0, [sp, #20]
 800938c:	2000      	movs	r0, #0
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	4605      	mov	r5, r0
 8009392:	3a30      	subs	r2, #48	; 0x30
 8009394:	f100 0301 	add.w	r3, r0, #1
 8009398:	d014      	beq.n	80093c4 <_strtod_l+0x244>
 800939a:	9905      	ldr	r1, [sp, #20]
 800939c:	4419      	add	r1, r3
 800939e:	9105      	str	r1, [sp, #20]
 80093a0:	462b      	mov	r3, r5
 80093a2:	eb00 0e05 	add.w	lr, r0, r5
 80093a6:	210a      	movs	r1, #10
 80093a8:	4573      	cmp	r3, lr
 80093aa:	d113      	bne.n	80093d4 <_strtod_l+0x254>
 80093ac:	182b      	adds	r3, r5, r0
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	f105 0501 	add.w	r5, r5, #1
 80093b4:	4405      	add	r5, r0
 80093b6:	dc1c      	bgt.n	80093f2 <_strtod_l+0x272>
 80093b8:	9907      	ldr	r1, [sp, #28]
 80093ba:	230a      	movs	r3, #10
 80093bc:	fb03 2301 	mla	r3, r3, r1, r2
 80093c0:	9307      	str	r3, [sp, #28]
 80093c2:	2300      	movs	r3, #0
 80093c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093c6:	1c51      	adds	r1, r2, #1
 80093c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80093ca:	7852      	ldrb	r2, [r2, #1]
 80093cc:	4618      	mov	r0, r3
 80093ce:	e7c9      	b.n	8009364 <_strtod_l+0x1e4>
 80093d0:	4638      	mov	r0, r7
 80093d2:	e7d2      	b.n	800937a <_strtod_l+0x1fa>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	dc04      	bgt.n	80093e2 <_strtod_l+0x262>
 80093d8:	9e07      	ldr	r6, [sp, #28]
 80093da:	434e      	muls	r6, r1
 80093dc:	9607      	str	r6, [sp, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	e7e2      	b.n	80093a8 <_strtod_l+0x228>
 80093e2:	f103 0c01 	add.w	ip, r3, #1
 80093e6:	f1bc 0f10 	cmp.w	ip, #16
 80093ea:	bfd8      	it	le
 80093ec:	fb01 f909 	mulle.w	r9, r1, r9
 80093f0:	e7f5      	b.n	80093de <_strtod_l+0x25e>
 80093f2:	2d10      	cmp	r5, #16
 80093f4:	bfdc      	itt	le
 80093f6:	230a      	movle	r3, #10
 80093f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80093fc:	e7e1      	b.n	80093c2 <_strtod_l+0x242>
 80093fe:	2300      	movs	r3, #0
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	2301      	movs	r3, #1
 8009404:	e77c      	b.n	8009300 <_strtod_l+0x180>
 8009406:	f04f 0c00 	mov.w	ip, #0
 800940a:	f108 0202 	add.w	r2, r8, #2
 800940e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009410:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009414:	e785      	b.n	8009322 <_strtod_l+0x1a2>
 8009416:	f04f 0c01 	mov.w	ip, #1
 800941a:	e7f6      	b.n	800940a <_strtod_l+0x28a>
 800941c:	0800d09c 	.word	0x0800d09c
 8009420:	0800cdec 	.word	0x0800cdec
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800942a:	1c51      	adds	r1, r2, #1
 800942c:	9117      	str	r1, [sp, #92]	; 0x5c
 800942e:	7852      	ldrb	r2, [r2, #1]
 8009430:	2a30      	cmp	r2, #48	; 0x30
 8009432:	d0f9      	beq.n	8009428 <_strtod_l+0x2a8>
 8009434:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009438:	2908      	cmp	r1, #8
 800943a:	f63f af79 	bhi.w	8009330 <_strtod_l+0x1b0>
 800943e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009442:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009444:	9206      	str	r2, [sp, #24]
 8009446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009448:	1c51      	adds	r1, r2, #1
 800944a:	9117      	str	r1, [sp, #92]	; 0x5c
 800944c:	7852      	ldrb	r2, [r2, #1]
 800944e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009452:	2e09      	cmp	r6, #9
 8009454:	d937      	bls.n	80094c6 <_strtod_l+0x346>
 8009456:	9e06      	ldr	r6, [sp, #24]
 8009458:	1b89      	subs	r1, r1, r6
 800945a:	2908      	cmp	r1, #8
 800945c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009460:	dc02      	bgt.n	8009468 <_strtod_l+0x2e8>
 8009462:	4576      	cmp	r6, lr
 8009464:	bfa8      	it	ge
 8009466:	4676      	movge	r6, lr
 8009468:	f1bc 0f00 	cmp.w	ip, #0
 800946c:	d000      	beq.n	8009470 <_strtod_l+0x2f0>
 800946e:	4276      	negs	r6, r6
 8009470:	2d00      	cmp	r5, #0
 8009472:	d14d      	bne.n	8009510 <_strtod_l+0x390>
 8009474:	9904      	ldr	r1, [sp, #16]
 8009476:	4301      	orrs	r1, r0
 8009478:	f47f aec6 	bne.w	8009208 <_strtod_l+0x88>
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f aee1 	bne.w	8009244 <_strtod_l+0xc4>
 8009482:	2a69      	cmp	r2, #105	; 0x69
 8009484:	d027      	beq.n	80094d6 <_strtod_l+0x356>
 8009486:	dc24      	bgt.n	80094d2 <_strtod_l+0x352>
 8009488:	2a49      	cmp	r2, #73	; 0x49
 800948a:	d024      	beq.n	80094d6 <_strtod_l+0x356>
 800948c:	2a4e      	cmp	r2, #78	; 0x4e
 800948e:	f47f aed9 	bne.w	8009244 <_strtod_l+0xc4>
 8009492:	499f      	ldr	r1, [pc, #636]	; (8009710 <_strtod_l+0x590>)
 8009494:	a817      	add	r0, sp, #92	; 0x5c
 8009496:	f002 f8b3 	bl	800b600 <__match>
 800949a:	2800      	cmp	r0, #0
 800949c:	f43f aed2 	beq.w	8009244 <_strtod_l+0xc4>
 80094a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b28      	cmp	r3, #40	; 0x28
 80094a6:	d12d      	bne.n	8009504 <_strtod_l+0x384>
 80094a8:	499a      	ldr	r1, [pc, #616]	; (8009714 <_strtod_l+0x594>)
 80094aa:	aa1a      	add	r2, sp, #104	; 0x68
 80094ac:	a817      	add	r0, sp, #92	; 0x5c
 80094ae:	f002 f8bb 	bl	800b628 <__hexnan>
 80094b2:	2805      	cmp	r0, #5
 80094b4:	d126      	bne.n	8009504 <_strtod_l+0x384>
 80094b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80094bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80094c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80094c4:	e6a0      	b.n	8009208 <_strtod_l+0x88>
 80094c6:	210a      	movs	r1, #10
 80094c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80094cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80094d0:	e7b9      	b.n	8009446 <_strtod_l+0x2c6>
 80094d2:	2a6e      	cmp	r2, #110	; 0x6e
 80094d4:	e7db      	b.n	800948e <_strtod_l+0x30e>
 80094d6:	4990      	ldr	r1, [pc, #576]	; (8009718 <_strtod_l+0x598>)
 80094d8:	a817      	add	r0, sp, #92	; 0x5c
 80094da:	f002 f891 	bl	800b600 <__match>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aeb0 	beq.w	8009244 <_strtod_l+0xc4>
 80094e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e6:	498d      	ldr	r1, [pc, #564]	; (800971c <_strtod_l+0x59c>)
 80094e8:	3b01      	subs	r3, #1
 80094ea:	a817      	add	r0, sp, #92	; 0x5c
 80094ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ee:	f002 f887 	bl	800b600 <__match>
 80094f2:	b910      	cbnz	r0, 80094fa <_strtod_l+0x37a>
 80094f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f6:	3301      	adds	r3, #1
 80094f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80094fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800972c <_strtod_l+0x5ac>
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	e681      	b.n	8009208 <_strtod_l+0x88>
 8009504:	4886      	ldr	r0, [pc, #536]	; (8009720 <_strtod_l+0x5a0>)
 8009506:	f003 fa2f 	bl	800c968 <nan>
 800950a:	ec5b ab10 	vmov	sl, fp, d0
 800950e:	e67b      	b.n	8009208 <_strtod_l+0x88>
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	9807      	ldr	r0, [sp, #28]
 8009514:	1af3      	subs	r3, r6, r3
 8009516:	2f00      	cmp	r7, #0
 8009518:	bf08      	it	eq
 800951a:	462f      	moveq	r7, r5
 800951c:	2d10      	cmp	r5, #16
 800951e:	9306      	str	r3, [sp, #24]
 8009520:	46a8      	mov	r8, r5
 8009522:	bfa8      	it	ge
 8009524:	f04f 0810 	movge.w	r8, #16
 8009528:	f7f6 ffec 	bl	8000504 <__aeabi_ui2d>
 800952c:	2d09      	cmp	r5, #9
 800952e:	4682      	mov	sl, r0
 8009530:	468b      	mov	fp, r1
 8009532:	dd13      	ble.n	800955c <_strtod_l+0x3dc>
 8009534:	4b7b      	ldr	r3, [pc, #492]	; (8009724 <_strtod_l+0x5a4>)
 8009536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800953a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	4682      	mov	sl, r0
 8009544:	4648      	mov	r0, r9
 8009546:	468b      	mov	fp, r1
 8009548:	f7f6 ffdc 	bl	8000504 <__aeabi_ui2d>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4650      	mov	r0, sl
 8009552:	4659      	mov	r1, fp
 8009554:	f7f6 fe9a 	bl	800028c <__adddf3>
 8009558:	4682      	mov	sl, r0
 800955a:	468b      	mov	fp, r1
 800955c:	2d0f      	cmp	r5, #15
 800955e:	dc38      	bgt.n	80095d2 <_strtod_l+0x452>
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f43f ae50 	beq.w	8009208 <_strtod_l+0x88>
 8009568:	dd24      	ble.n	80095b4 <_strtod_l+0x434>
 800956a:	2b16      	cmp	r3, #22
 800956c:	dc0b      	bgt.n	8009586 <_strtod_l+0x406>
 800956e:	496d      	ldr	r1, [pc, #436]	; (8009724 <_strtod_l+0x5a4>)
 8009570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009578:	4652      	mov	r2, sl
 800957a:	465b      	mov	r3, fp
 800957c:	f7f7 f83c 	bl	80005f8 <__aeabi_dmul>
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	e640      	b.n	8009208 <_strtod_l+0x88>
 8009586:	9a06      	ldr	r2, [sp, #24]
 8009588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800958c:	4293      	cmp	r3, r2
 800958e:	db20      	blt.n	80095d2 <_strtod_l+0x452>
 8009590:	4c64      	ldr	r4, [pc, #400]	; (8009724 <_strtod_l+0x5a4>)
 8009592:	f1c5 050f 	rsb	r5, r5, #15
 8009596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800959a:	4652      	mov	r2, sl
 800959c:	465b      	mov	r3, fp
 800959e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a2:	f7f7 f829 	bl	80005f8 <__aeabi_dmul>
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	1b5d      	subs	r5, r3, r5
 80095aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095b2:	e7e3      	b.n	800957c <_strtod_l+0x3fc>
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	3316      	adds	r3, #22
 80095b8:	db0b      	blt.n	80095d2 <_strtod_l+0x452>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	1b9e      	subs	r6, r3, r6
 80095be:	4b59      	ldr	r3, [pc, #356]	; (8009724 <_strtod_l+0x5a4>)
 80095c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80095c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095c8:	4650      	mov	r0, sl
 80095ca:	4659      	mov	r1, fp
 80095cc:	f7f7 f93e 	bl	800084c <__aeabi_ddiv>
 80095d0:	e7d6      	b.n	8009580 <_strtod_l+0x400>
 80095d2:	9b06      	ldr	r3, [sp, #24]
 80095d4:	eba5 0808 	sub.w	r8, r5, r8
 80095d8:	4498      	add	r8, r3
 80095da:	f1b8 0f00 	cmp.w	r8, #0
 80095de:	dd74      	ble.n	80096ca <_strtod_l+0x54a>
 80095e0:	f018 030f 	ands.w	r3, r8, #15
 80095e4:	d00a      	beq.n	80095fc <_strtod_l+0x47c>
 80095e6:	494f      	ldr	r1, [pc, #316]	; (8009724 <_strtod_l+0x5a4>)
 80095e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	f038 080f 	bics.w	r8, r8, #15
 8009600:	d04f      	beq.n	80096a2 <_strtod_l+0x522>
 8009602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009606:	dd22      	ble.n	800964e <_strtod_l+0x4ce>
 8009608:	2500      	movs	r5, #0
 800960a:	462e      	mov	r6, r5
 800960c:	9507      	str	r5, [sp, #28]
 800960e:	9505      	str	r5, [sp, #20]
 8009610:	2322      	movs	r3, #34	; 0x22
 8009612:	f8df b118 	ldr.w	fp, [pc, #280]	; 800972c <_strtod_l+0x5ac>
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f43f adf2 	beq.w	8009208 <_strtod_l+0x88>
 8009624:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009626:	4620      	mov	r0, r4
 8009628:	f002 f96e 	bl	800b908 <_Bfree>
 800962c:	9905      	ldr	r1, [sp, #20]
 800962e:	4620      	mov	r0, r4
 8009630:	f002 f96a 	bl	800b908 <_Bfree>
 8009634:	4631      	mov	r1, r6
 8009636:	4620      	mov	r0, r4
 8009638:	f002 f966 	bl	800b908 <_Bfree>
 800963c:	9907      	ldr	r1, [sp, #28]
 800963e:	4620      	mov	r0, r4
 8009640:	f002 f962 	bl	800b908 <_Bfree>
 8009644:	4629      	mov	r1, r5
 8009646:	4620      	mov	r0, r4
 8009648:	f002 f95e 	bl	800b908 <_Bfree>
 800964c:	e5dc      	b.n	8009208 <_strtod_l+0x88>
 800964e:	4b36      	ldr	r3, [pc, #216]	; (8009728 <_strtod_l+0x5a8>)
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	4699      	mov	r9, r3
 800965e:	f1b8 0f01 	cmp.w	r8, #1
 8009662:	dc21      	bgt.n	80096a8 <_strtod_l+0x528>
 8009664:	b10b      	cbz	r3, 800966a <_strtod_l+0x4ea>
 8009666:	4682      	mov	sl, r0
 8009668:	468b      	mov	fp, r1
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <_strtod_l+0x5a8>)
 800966c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009670:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009674:	4652      	mov	r2, sl
 8009676:	465b      	mov	r3, fp
 8009678:	e9d9 0100 	ldrd	r0, r1, [r9]
 800967c:	f7f6 ffbc 	bl	80005f8 <__aeabi_dmul>
 8009680:	4b2a      	ldr	r3, [pc, #168]	; (800972c <_strtod_l+0x5ac>)
 8009682:	460a      	mov	r2, r1
 8009684:	400b      	ands	r3, r1
 8009686:	492a      	ldr	r1, [pc, #168]	; (8009730 <_strtod_l+0x5b0>)
 8009688:	428b      	cmp	r3, r1
 800968a:	4682      	mov	sl, r0
 800968c:	d8bc      	bhi.n	8009608 <_strtod_l+0x488>
 800968e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009692:	428b      	cmp	r3, r1
 8009694:	bf86      	itte	hi
 8009696:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009734 <_strtod_l+0x5b4>
 800969a:	f04f 3aff 	movhi.w	sl, #4294967295
 800969e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80096a2:	2300      	movs	r3, #0
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	e084      	b.n	80097b2 <_strtod_l+0x632>
 80096a8:	f018 0f01 	tst.w	r8, #1
 80096ac:	d005      	beq.n	80096ba <_strtod_l+0x53a>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	2301      	movs	r3, #1
 80096ba:	9a04      	ldr	r2, [sp, #16]
 80096bc:	3208      	adds	r2, #8
 80096be:	f109 0901 	add.w	r9, r9, #1
 80096c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096c6:	9204      	str	r2, [sp, #16]
 80096c8:	e7c9      	b.n	800965e <_strtod_l+0x4de>
 80096ca:	d0ea      	beq.n	80096a2 <_strtod_l+0x522>
 80096cc:	f1c8 0800 	rsb	r8, r8, #0
 80096d0:	f018 020f 	ands.w	r2, r8, #15
 80096d4:	d00a      	beq.n	80096ec <_strtod_l+0x56c>
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <_strtod_l+0x5a4>)
 80096d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f7 f8b2 	bl	800084c <__aeabi_ddiv>
 80096e8:	4682      	mov	sl, r0
 80096ea:	468b      	mov	fp, r1
 80096ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80096f0:	d0d7      	beq.n	80096a2 <_strtod_l+0x522>
 80096f2:	f1b8 0f1f 	cmp.w	r8, #31
 80096f6:	dd1f      	ble.n	8009738 <_strtod_l+0x5b8>
 80096f8:	2500      	movs	r5, #0
 80096fa:	462e      	mov	r6, r5
 80096fc:	9507      	str	r5, [sp, #28]
 80096fe:	9505      	str	r5, [sp, #20]
 8009700:	2322      	movs	r3, #34	; 0x22
 8009702:	f04f 0a00 	mov.w	sl, #0
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	e786      	b.n	800961c <_strtod_l+0x49c>
 800970e:	bf00      	nop
 8009710:	0800cdbd 	.word	0x0800cdbd
 8009714:	0800ce00 	.word	0x0800ce00
 8009718:	0800cdb5 	.word	0x0800cdb5
 800971c:	0800cf44 	.word	0x0800cf44
 8009720:	0800d258 	.word	0x0800d258
 8009724:	0800d138 	.word	0x0800d138
 8009728:	0800d110 	.word	0x0800d110
 800972c:	7ff00000 	.word	0x7ff00000
 8009730:	7ca00000 	.word	0x7ca00000
 8009734:	7fefffff 	.word	0x7fefffff
 8009738:	f018 0310 	ands.w	r3, r8, #16
 800973c:	bf18      	it	ne
 800973e:	236a      	movne	r3, #106	; 0x6a
 8009740:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009af0 <_strtod_l+0x970>
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	4650      	mov	r0, sl
 8009748:	4659      	mov	r1, fp
 800974a:	2300      	movs	r3, #0
 800974c:	f018 0f01 	tst.w	r8, #1
 8009750:	d004      	beq.n	800975c <_strtod_l+0x5dc>
 8009752:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009756:	f7f6 ff4f 	bl	80005f8 <__aeabi_dmul>
 800975a:	2301      	movs	r3, #1
 800975c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009760:	f109 0908 	add.w	r9, r9, #8
 8009764:	d1f2      	bne.n	800974c <_strtod_l+0x5cc>
 8009766:	b10b      	cbz	r3, 800976c <_strtod_l+0x5ec>
 8009768:	4682      	mov	sl, r0
 800976a:	468b      	mov	fp, r1
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	b1c3      	cbz	r3, 80097a2 <_strtod_l+0x622>
 8009770:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009774:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009778:	2b00      	cmp	r3, #0
 800977a:	4659      	mov	r1, fp
 800977c:	dd11      	ble.n	80097a2 <_strtod_l+0x622>
 800977e:	2b1f      	cmp	r3, #31
 8009780:	f340 8124 	ble.w	80099cc <_strtod_l+0x84c>
 8009784:	2b34      	cmp	r3, #52	; 0x34
 8009786:	bfde      	ittt	le
 8009788:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800978c:	f04f 33ff 	movle.w	r3, #4294967295
 8009790:	fa03 f202 	lslle.w	r2, r3, r2
 8009794:	f04f 0a00 	mov.w	sl, #0
 8009798:	bfcc      	ite	gt
 800979a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800979e:	ea02 0b01 	andle.w	fp, r2, r1
 80097a2:	2200      	movs	r2, #0
 80097a4:	2300      	movs	r3, #0
 80097a6:	4650      	mov	r0, sl
 80097a8:	4659      	mov	r1, fp
 80097aa:	f7f7 f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d1a2      	bne.n	80096f8 <_strtod_l+0x578>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	9908      	ldr	r1, [sp, #32]
 80097b8:	462b      	mov	r3, r5
 80097ba:	463a      	mov	r2, r7
 80097bc:	4620      	mov	r0, r4
 80097be:	f002 f90b 	bl	800b9d8 <__s2b>
 80097c2:	9007      	str	r0, [sp, #28]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f43f af1f 	beq.w	8009608 <_strtod_l+0x488>
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfb4      	ite	lt
 80097d4:	4633      	movlt	r3, r6
 80097d6:	2300      	movge	r3, #0
 80097d8:	930c      	str	r3, [sp, #48]	; 0x30
 80097da:	9b06      	ldr	r3, [sp, #24]
 80097dc:	2500      	movs	r5, #0
 80097de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097e2:	9312      	str	r3, [sp, #72]	; 0x48
 80097e4:	462e      	mov	r6, r5
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	4620      	mov	r0, r4
 80097ea:	6859      	ldr	r1, [r3, #4]
 80097ec:	f002 f84c 	bl	800b888 <_Balloc>
 80097f0:	9005      	str	r0, [sp, #20]
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f43f af0c 	beq.w	8009610 <_strtod_l+0x490>
 80097f8:	9b07      	ldr	r3, [sp, #28]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	3202      	adds	r2, #2
 80097fe:	f103 010c 	add.w	r1, r3, #12
 8009802:	0092      	lsls	r2, r2, #2
 8009804:	300c      	adds	r0, #12
 8009806:	f002 f831 	bl	800b86c <memcpy>
 800980a:	ec4b ab10 	vmov	d0, sl, fp
 800980e:	aa1a      	add	r2, sp, #104	; 0x68
 8009810:	a919      	add	r1, sp, #100	; 0x64
 8009812:	4620      	mov	r0, r4
 8009814:	f002 fc26 	bl	800c064 <__d2b>
 8009818:	ec4b ab18 	vmov	d8, sl, fp
 800981c:	9018      	str	r0, [sp, #96]	; 0x60
 800981e:	2800      	cmp	r0, #0
 8009820:	f43f aef6 	beq.w	8009610 <_strtod_l+0x490>
 8009824:	2101      	movs	r1, #1
 8009826:	4620      	mov	r0, r4
 8009828:	f002 f970 	bl	800bb0c <__i2b>
 800982c:	4606      	mov	r6, r0
 800982e:	2800      	cmp	r0, #0
 8009830:	f43f aeee 	beq.w	8009610 <_strtod_l+0x490>
 8009834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009836:	9904      	ldr	r1, [sp, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfab      	itete	ge
 800983c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800983e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009840:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009842:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009846:	bfac      	ite	ge
 8009848:	eb03 0902 	addge.w	r9, r3, r2
 800984c:	1ad7      	sublt	r7, r2, r3
 800984e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009850:	eba3 0801 	sub.w	r8, r3, r1
 8009854:	4490      	add	r8, r2
 8009856:	4ba1      	ldr	r3, [pc, #644]	; (8009adc <_strtod_l+0x95c>)
 8009858:	f108 38ff 	add.w	r8, r8, #4294967295
 800985c:	4598      	cmp	r8, r3
 800985e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009862:	f280 80c7 	bge.w	80099f4 <_strtod_l+0x874>
 8009866:	eba3 0308 	sub.w	r3, r3, r8
 800986a:	2b1f      	cmp	r3, #31
 800986c:	eba2 0203 	sub.w	r2, r2, r3
 8009870:	f04f 0101 	mov.w	r1, #1
 8009874:	f300 80b1 	bgt.w	80099da <_strtod_l+0x85a>
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	930d      	str	r3, [sp, #52]	; 0x34
 800987e:	2300      	movs	r3, #0
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	eb09 0802 	add.w	r8, r9, r2
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	45c1      	cmp	r9, r8
 800988a:	4417      	add	r7, r2
 800988c:	441f      	add	r7, r3
 800988e:	464b      	mov	r3, r9
 8009890:	bfa8      	it	ge
 8009892:	4643      	movge	r3, r8
 8009894:	42bb      	cmp	r3, r7
 8009896:	bfa8      	it	ge
 8009898:	463b      	movge	r3, r7
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfc2      	ittt	gt
 800989e:	eba8 0803 	subgt.w	r8, r8, r3
 80098a2:	1aff      	subgt	r7, r7, r3
 80098a4:	eba9 0903 	subgt.w	r9, r9, r3
 80098a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dd17      	ble.n	80098de <_strtod_l+0x75e>
 80098ae:	4631      	mov	r1, r6
 80098b0:	461a      	mov	r2, r3
 80098b2:	4620      	mov	r0, r4
 80098b4:	f002 f9ea 	bl	800bc8c <__pow5mult>
 80098b8:	4606      	mov	r6, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f aea8 	beq.w	8009610 <_strtod_l+0x490>
 80098c0:	4601      	mov	r1, r0
 80098c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098c4:	4620      	mov	r0, r4
 80098c6:	f002 f937 	bl	800bb38 <__multiply>
 80098ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f ae9f 	beq.w	8009610 <_strtod_l+0x490>
 80098d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098d4:	4620      	mov	r0, r4
 80098d6:	f002 f817 	bl	800b908 <_Bfree>
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	9318      	str	r3, [sp, #96]	; 0x60
 80098de:	f1b8 0f00 	cmp.w	r8, #0
 80098e2:	f300 808c 	bgt.w	80099fe <_strtod_l+0x87e>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dd08      	ble.n	80098fe <_strtod_l+0x77e>
 80098ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ee:	9905      	ldr	r1, [sp, #20]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f002 f9cb 	bl	800bc8c <__pow5mult>
 80098f6:	9005      	str	r0, [sp, #20]
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f43f ae89 	beq.w	8009610 <_strtod_l+0x490>
 80098fe:	2f00      	cmp	r7, #0
 8009900:	dd08      	ble.n	8009914 <_strtod_l+0x794>
 8009902:	9905      	ldr	r1, [sp, #20]
 8009904:	463a      	mov	r2, r7
 8009906:	4620      	mov	r0, r4
 8009908:	f002 fa1a 	bl	800bd40 <__lshift>
 800990c:	9005      	str	r0, [sp, #20]
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f ae7e 	beq.w	8009610 <_strtod_l+0x490>
 8009914:	f1b9 0f00 	cmp.w	r9, #0
 8009918:	dd08      	ble.n	800992c <_strtod_l+0x7ac>
 800991a:	4631      	mov	r1, r6
 800991c:	464a      	mov	r2, r9
 800991e:	4620      	mov	r0, r4
 8009920:	f002 fa0e 	bl	800bd40 <__lshift>
 8009924:	4606      	mov	r6, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f ae72 	beq.w	8009610 <_strtod_l+0x490>
 800992c:	9a05      	ldr	r2, [sp, #20]
 800992e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009930:	4620      	mov	r0, r4
 8009932:	f002 fa91 	bl	800be58 <__mdiff>
 8009936:	4605      	mov	r5, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	f43f ae69 	beq.w	8009610 <_strtod_l+0x490>
 800993e:	68c3      	ldr	r3, [r0, #12]
 8009940:	930b      	str	r3, [sp, #44]	; 0x2c
 8009942:	2300      	movs	r3, #0
 8009944:	60c3      	str	r3, [r0, #12]
 8009946:	4631      	mov	r1, r6
 8009948:	f002 fa6a 	bl	800be20 <__mcmp>
 800994c:	2800      	cmp	r0, #0
 800994e:	da60      	bge.n	8009a12 <_strtod_l+0x892>
 8009950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009952:	ea53 030a 	orrs.w	r3, r3, sl
 8009956:	f040 8082 	bne.w	8009a5e <_strtod_l+0x8de>
 800995a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800995e:	2b00      	cmp	r3, #0
 8009960:	d17d      	bne.n	8009a5e <_strtod_l+0x8de>
 8009962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009966:	0d1b      	lsrs	r3, r3, #20
 8009968:	051b      	lsls	r3, r3, #20
 800996a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800996e:	d976      	bls.n	8009a5e <_strtod_l+0x8de>
 8009970:	696b      	ldr	r3, [r5, #20]
 8009972:	b913      	cbnz	r3, 800997a <_strtod_l+0x7fa>
 8009974:	692b      	ldr	r3, [r5, #16]
 8009976:	2b01      	cmp	r3, #1
 8009978:	dd71      	ble.n	8009a5e <_strtod_l+0x8de>
 800997a:	4629      	mov	r1, r5
 800997c:	2201      	movs	r2, #1
 800997e:	4620      	mov	r0, r4
 8009980:	f002 f9de 	bl	800bd40 <__lshift>
 8009984:	4631      	mov	r1, r6
 8009986:	4605      	mov	r5, r0
 8009988:	f002 fa4a 	bl	800be20 <__mcmp>
 800998c:	2800      	cmp	r0, #0
 800998e:	dd66      	ble.n	8009a5e <_strtod_l+0x8de>
 8009990:	9904      	ldr	r1, [sp, #16]
 8009992:	4a53      	ldr	r2, [pc, #332]	; (8009ae0 <_strtod_l+0x960>)
 8009994:	465b      	mov	r3, fp
 8009996:	2900      	cmp	r1, #0
 8009998:	f000 8081 	beq.w	8009a9e <_strtod_l+0x91e>
 800999c:	ea02 010b 	and.w	r1, r2, fp
 80099a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099a4:	dc7b      	bgt.n	8009a9e <_strtod_l+0x91e>
 80099a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099aa:	f77f aea9 	ble.w	8009700 <_strtod_l+0x580>
 80099ae:	4b4d      	ldr	r3, [pc, #308]	; (8009ae4 <_strtod_l+0x964>)
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	2200      	movs	r2, #0
 80099b6:	f7f6 fe1f 	bl	80005f8 <__aeabi_dmul>
 80099ba:	460b      	mov	r3, r1
 80099bc:	4303      	orrs	r3, r0
 80099be:	bf08      	it	eq
 80099c0:	2322      	moveq	r3, #34	; 0x22
 80099c2:	4682      	mov	sl, r0
 80099c4:	468b      	mov	fp, r1
 80099c6:	bf08      	it	eq
 80099c8:	6023      	streq	r3, [r4, #0]
 80099ca:	e62b      	b.n	8009624 <_strtod_l+0x4a4>
 80099cc:	f04f 32ff 	mov.w	r2, #4294967295
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	ea03 0a0a 	and.w	sl, r3, sl
 80099d8:	e6e3      	b.n	80097a2 <_strtod_l+0x622>
 80099da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80099de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80099e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80099e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80099ea:	fa01 f308 	lsl.w	r3, r1, r8
 80099ee:	9308      	str	r3, [sp, #32]
 80099f0:	910d      	str	r1, [sp, #52]	; 0x34
 80099f2:	e746      	b.n	8009882 <_strtod_l+0x702>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9308      	str	r3, [sp, #32]
 80099f8:	2301      	movs	r3, #1
 80099fa:	930d      	str	r3, [sp, #52]	; 0x34
 80099fc:	e741      	b.n	8009882 <_strtod_l+0x702>
 80099fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a00:	4642      	mov	r2, r8
 8009a02:	4620      	mov	r0, r4
 8009a04:	f002 f99c 	bl	800bd40 <__lshift>
 8009a08:	9018      	str	r0, [sp, #96]	; 0x60
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f47f af6b 	bne.w	80098e6 <_strtod_l+0x766>
 8009a10:	e5fe      	b.n	8009610 <_strtod_l+0x490>
 8009a12:	465f      	mov	r7, fp
 8009a14:	d16e      	bne.n	8009af4 <_strtod_l+0x974>
 8009a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1c:	b342      	cbz	r2, 8009a70 <_strtod_l+0x8f0>
 8009a1e:	4a32      	ldr	r2, [pc, #200]	; (8009ae8 <_strtod_l+0x968>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d128      	bne.n	8009a76 <_strtod_l+0x8f6>
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	4651      	mov	r1, sl
 8009a28:	b1eb      	cbz	r3, 8009a66 <_strtod_l+0x8e6>
 8009a2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <_strtod_l+0x960>)
 8009a2c:	403b      	ands	r3, r7
 8009a2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	d819      	bhi.n	8009a6c <_strtod_l+0x8ec>
 8009a38:	0d1b      	lsrs	r3, r3, #20
 8009a3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d117      	bne.n	8009a76 <_strtod_l+0x8f6>
 8009a46:	4b29      	ldr	r3, [pc, #164]	; (8009aec <_strtod_l+0x96c>)
 8009a48:	429f      	cmp	r7, r3
 8009a4a:	d102      	bne.n	8009a52 <_strtod_l+0x8d2>
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f43f addf 	beq.w	8009610 <_strtod_l+0x490>
 8009a52:	4b23      	ldr	r3, [pc, #140]	; (8009ae0 <_strtod_l+0x960>)
 8009a54:	403b      	ands	r3, r7
 8009a56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009a5a:	f04f 0a00 	mov.w	sl, #0
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1a4      	bne.n	80099ae <_strtod_l+0x82e>
 8009a64:	e5de      	b.n	8009624 <_strtod_l+0x4a4>
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6a:	e7ea      	b.n	8009a42 <_strtod_l+0x8c2>
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	e7e8      	b.n	8009a42 <_strtod_l+0x8c2>
 8009a70:	ea53 030a 	orrs.w	r3, r3, sl
 8009a74:	d08c      	beq.n	8009990 <_strtod_l+0x810>
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	b1db      	cbz	r3, 8009ab2 <_strtod_l+0x932>
 8009a7a:	423b      	tst	r3, r7
 8009a7c:	d0ef      	beq.n	8009a5e <_strtod_l+0x8de>
 8009a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a80:	9a04      	ldr	r2, [sp, #16]
 8009a82:	4650      	mov	r0, sl
 8009a84:	4659      	mov	r1, fp
 8009a86:	b1c3      	cbz	r3, 8009aba <_strtod_l+0x93a>
 8009a88:	f7ff fb5c 	bl	8009144 <sulp>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	ec51 0b18 	vmov	r0, r1, d8
 8009a94:	f7f6 fbfa 	bl	800028c <__adddf3>
 8009a98:	4682      	mov	sl, r0
 8009a9a:	468b      	mov	fp, r1
 8009a9c:	e7df      	b.n	8009a5e <_strtod_l+0x8de>
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009aa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009aa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009aac:	f04f 3aff 	mov.w	sl, #4294967295
 8009ab0:	e7d5      	b.n	8009a5e <_strtod_l+0x8de>
 8009ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab4:	ea13 0f0a 	tst.w	r3, sl
 8009ab8:	e7e0      	b.n	8009a7c <_strtod_l+0x8fc>
 8009aba:	f7ff fb43 	bl	8009144 <sulp>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	ec51 0b18 	vmov	r0, r1, d8
 8009ac6:	f7f6 fbdf 	bl	8000288 <__aeabi_dsub>
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	4682      	mov	sl, r0
 8009ad0:	468b      	mov	fp, r1
 8009ad2:	f7f6 fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0c1      	beq.n	8009a5e <_strtod_l+0x8de>
 8009ada:	e611      	b.n	8009700 <_strtod_l+0x580>
 8009adc:	fffffc02 	.word	0xfffffc02
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	39500000 	.word	0x39500000
 8009ae8:	000fffff 	.word	0x000fffff
 8009aec:	7fefffff 	.word	0x7fefffff
 8009af0:	0800ce18 	.word	0x0800ce18
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	f002 fb10 	bl	800c11c <__ratio>
 8009afc:	ec59 8b10 	vmov	r8, r9, d0
 8009b00:	ee10 0a10 	vmov	r0, s0
 8009b04:	2200      	movs	r2, #0
 8009b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	f7f6 fff0 	bl	8000af0 <__aeabi_dcmple>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d07a      	beq.n	8009c0a <_strtod_l+0xa8a>
 8009b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d04a      	beq.n	8009bb0 <_strtod_l+0xa30>
 8009b1a:	4b95      	ldr	r3, [pc, #596]	; (8009d70 <_strtod_l+0xbf0>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009d70 <_strtod_l+0xbf0>
 8009b26:	f04f 0800 	mov.w	r8, #0
 8009b2a:	4b92      	ldr	r3, [pc, #584]	; (8009d74 <_strtod_l+0xbf4>)
 8009b2c:	403b      	ands	r3, r7
 8009b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b32:	4b91      	ldr	r3, [pc, #580]	; (8009d78 <_strtod_l+0xbf8>)
 8009b34:	429a      	cmp	r2, r3
 8009b36:	f040 80b0 	bne.w	8009c9a <_strtod_l+0xb1a>
 8009b3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009b42:	ec4b ab10 	vmov	d0, sl, fp
 8009b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b4a:	f002 fa0f 	bl	800bf6c <__ulp>
 8009b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b52:	ec53 2b10 	vmov	r2, r3, d0
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	f7f6 fb95 	bl	800028c <__adddf3>
 8009b62:	460b      	mov	r3, r1
 8009b64:	4983      	ldr	r1, [pc, #524]	; (8009d74 <_strtod_l+0xbf4>)
 8009b66:	4a85      	ldr	r2, [pc, #532]	; (8009d7c <_strtod_l+0xbfc>)
 8009b68:	4019      	ands	r1, r3
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	d960      	bls.n	8009c32 <_strtod_l+0xab2>
 8009b70:	ee18 3a90 	vmov	r3, s17
 8009b74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d104      	bne.n	8009b86 <_strtod_l+0xa06>
 8009b7c:	ee18 3a10 	vmov	r3, s16
 8009b80:	3301      	adds	r3, #1
 8009b82:	f43f ad45 	beq.w	8009610 <_strtod_l+0x490>
 8009b86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009d88 <_strtod_l+0xc08>
 8009b8a:	f04f 3aff 	mov.w	sl, #4294967295
 8009b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b90:	4620      	mov	r0, r4
 8009b92:	f001 feb9 	bl	800b908 <_Bfree>
 8009b96:	9905      	ldr	r1, [sp, #20]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 feb5 	bl	800b908 <_Bfree>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 feb1 	bl	800b908 <_Bfree>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f001 fead 	bl	800b908 <_Bfree>
 8009bae:	e61a      	b.n	80097e6 <_strtod_l+0x666>
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d11b      	bne.n	8009bee <_strtod_l+0xa6e>
 8009bb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bba:	b9f3      	cbnz	r3, 8009bfa <_strtod_l+0xa7a>
 8009bbc:	4b6c      	ldr	r3, [pc, #432]	; (8009d70 <_strtod_l+0xbf0>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	f7f6 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8009bc8:	b9d0      	cbnz	r0, 8009c00 <_strtod_l+0xa80>
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	4b6c      	ldr	r3, [pc, #432]	; (8009d80 <_strtod_l+0xc00>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f7f6 fd11 	bl	80005f8 <__aeabi_dmul>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009be2:	9315      	str	r3, [sp, #84]	; 0x54
 8009be4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009be8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bec:	e79d      	b.n	8009b2a <_strtod_l+0x9aa>
 8009bee:	f1ba 0f01 	cmp.w	sl, #1
 8009bf2:	d102      	bne.n	8009bfa <_strtod_l+0xa7a>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f43f ad83 	beq.w	8009700 <_strtod_l+0x580>
 8009bfa:	4b62      	ldr	r3, [pc, #392]	; (8009d84 <_strtod_l+0xc04>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	e78e      	b.n	8009b1e <_strtod_l+0x99e>
 8009c00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009d80 <_strtod_l+0xc00>
 8009c04:	f04f 0800 	mov.w	r8, #0
 8009c08:	e7e7      	b.n	8009bda <_strtod_l+0xa5a>
 8009c0a:	4b5d      	ldr	r3, [pc, #372]	; (8009d80 <_strtod_l+0xc00>)
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	2200      	movs	r2, #0
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	b933      	cbnz	r3, 8009c2c <_strtod_l+0xaac>
 8009c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c22:	900e      	str	r0, [sp, #56]	; 0x38
 8009c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c2a:	e7dd      	b.n	8009be8 <_strtod_l+0xa68>
 8009c2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009c30:	e7f9      	b.n	8009c26 <_strtod_l+0xaa6>
 8009c32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1a8      	bne.n	8009b8e <_strtod_l+0xa0e>
 8009c3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c42:	0d1b      	lsrs	r3, r3, #20
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d1a1      	bne.n	8009b8e <_strtod_l+0xa0e>
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f7 f81b 	bl	8000c88 <__aeabi_d2lz>
 8009c52:	f7f6 fca3 	bl	800059c <__aeabi_l2d>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f6 fb13 	bl	8000288 <__aeabi_dsub>
 8009c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c68:	ea43 030a 	orr.w	r3, r3, sl
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4689      	mov	r9, r1
 8009c72:	d055      	beq.n	8009d20 <_strtod_l+0xba0>
 8009c74:	a336      	add	r3, pc, #216	; (adr r3, 8009d50 <_strtod_l+0xbd0>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f47f acd0 	bne.w	8009624 <_strtod_l+0x4a4>
 8009c84:	a334      	add	r3, pc, #208	; (adr r3, 8009d58 <_strtod_l+0xbd8>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 ff43 	bl	8000b18 <__aeabi_dcmpgt>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f af7b 	beq.w	8009b8e <_strtod_l+0xa0e>
 8009c98:	e4c4      	b.n	8009624 <_strtod_l+0x4a4>
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	b333      	cbz	r3, 8009cec <_strtod_l+0xb6c>
 8009c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ca4:	d822      	bhi.n	8009cec <_strtod_l+0xb6c>
 8009ca6:	a32e      	add	r3, pc, #184	; (adr r3, 8009d60 <_strtod_l+0xbe0>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 ff1e 	bl	8000af0 <__aeabi_dcmple>
 8009cb4:	b1a0      	cbz	r0, 8009ce0 <_strtod_l+0xb60>
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4640      	mov	r0, r8
 8009cba:	f7f6 ff75 	bl	8000ba8 <__aeabi_d2uiz>
 8009cbe:	2801      	cmp	r0, #1
 8009cc0:	bf38      	it	cc
 8009cc2:	2001      	movcc	r0, #1
 8009cc4:	f7f6 fc1e 	bl	8000504 <__aeabi_ui2d>
 8009cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cca:	4680      	mov	r8, r0
 8009ccc:	4689      	mov	r9, r1
 8009cce:	bb23      	cbnz	r3, 8009d1a <_strtod_l+0xb9a>
 8009cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cd4:	9010      	str	r0, [sp, #64]	; 0x40
 8009cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8009cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8009cf4:	eef0 0a68 	vmov.f32	s1, s17
 8009cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cfc:	f002 f936 	bl	800bf6c <__ulp>
 8009d00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d04:	ec53 2b10 	vmov	r2, r3, d0
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	ec53 2b18 	vmov	r2, r3, d8
 8009d10:	f7f6 fabc 	bl	800028c <__adddf3>
 8009d14:	4682      	mov	sl, r0
 8009d16:	468b      	mov	fp, r1
 8009d18:	e78d      	b.n	8009c36 <_strtod_l+0xab6>
 8009d1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009d1e:	e7db      	b.n	8009cd8 <_strtod_l+0xb58>
 8009d20:	a311      	add	r3, pc, #68	; (adr r3, 8009d68 <_strtod_l+0xbe8>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fed9 	bl	8000adc <__aeabi_dcmplt>
 8009d2a:	e7b2      	b.n	8009c92 <_strtod_l+0xb12>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	f7ff ba6b 	b.w	8009210 <_strtod_l+0x90>
 8009d3a:	2a65      	cmp	r2, #101	; 0x65
 8009d3c:	f43f ab5f 	beq.w	80093fe <_strtod_l+0x27e>
 8009d40:	2a45      	cmp	r2, #69	; 0x45
 8009d42:	f43f ab5c 	beq.w	80093fe <_strtod_l+0x27e>
 8009d46:	2301      	movs	r3, #1
 8009d48:	f7ff bb94 	b.w	8009474 <_strtod_l+0x2f4>
 8009d4c:	f3af 8000 	nop.w
 8009d50:	94a03595 	.word	0x94a03595
 8009d54:	3fdfffff 	.word	0x3fdfffff
 8009d58:	35afe535 	.word	0x35afe535
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	ffc00000 	.word	0xffc00000
 8009d64:	41dfffff 	.word	0x41dfffff
 8009d68:	94a03595 	.word	0x94a03595
 8009d6c:	3fcfffff 	.word	0x3fcfffff
 8009d70:	3ff00000 	.word	0x3ff00000
 8009d74:	7ff00000 	.word	0x7ff00000
 8009d78:	7fe00000 	.word	0x7fe00000
 8009d7c:	7c9fffff 	.word	0x7c9fffff
 8009d80:	3fe00000 	.word	0x3fe00000
 8009d84:	bff00000 	.word	0xbff00000
 8009d88:	7fefffff 	.word	0x7fefffff

08009d8c <_strtod_r>:
 8009d8c:	4b01      	ldr	r3, [pc, #4]	; (8009d94 <_strtod_r+0x8>)
 8009d8e:	f7ff b9f7 	b.w	8009180 <_strtod_l>
 8009d92:	bf00      	nop
 8009d94:	20000074 	.word	0x20000074

08009d98 <_strtol_l.constprop.0>:
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9e:	d001      	beq.n	8009da4 <_strtol_l.constprop.0+0xc>
 8009da0:	2b24      	cmp	r3, #36	; 0x24
 8009da2:	d906      	bls.n	8009db2 <_strtol_l.constprop.0+0x1a>
 8009da4:	f7fe fa6e 	bl	8008284 <__errno>
 8009da8:	2316      	movs	r3, #22
 8009daa:	6003      	str	r3, [r0, #0]
 8009dac:	2000      	movs	r0, #0
 8009dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009e98 <_strtol_l.constprop.0+0x100>
 8009db6:	460d      	mov	r5, r1
 8009db8:	462e      	mov	r6, r5
 8009dba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009dc2:	f017 0708 	ands.w	r7, r7, #8
 8009dc6:	d1f7      	bne.n	8009db8 <_strtol_l.constprop.0+0x20>
 8009dc8:	2c2d      	cmp	r4, #45	; 0x2d
 8009dca:	d132      	bne.n	8009e32 <_strtol_l.constprop.0+0x9a>
 8009dcc:	782c      	ldrb	r4, [r5, #0]
 8009dce:	2701      	movs	r7, #1
 8009dd0:	1cb5      	adds	r5, r6, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d05b      	beq.n	8009e8e <_strtol_l.constprop.0+0xf6>
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d109      	bne.n	8009dee <_strtol_l.constprop.0+0x56>
 8009dda:	2c30      	cmp	r4, #48	; 0x30
 8009ddc:	d107      	bne.n	8009dee <_strtol_l.constprop.0+0x56>
 8009dde:	782c      	ldrb	r4, [r5, #0]
 8009de0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009de4:	2c58      	cmp	r4, #88	; 0x58
 8009de6:	d14d      	bne.n	8009e84 <_strtol_l.constprop.0+0xec>
 8009de8:	786c      	ldrb	r4, [r5, #1]
 8009dea:	2310      	movs	r3, #16
 8009dec:	3502      	adds	r5, #2
 8009dee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009df2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009df6:	f04f 0c00 	mov.w	ip, #0
 8009dfa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009dfe:	4666      	mov	r6, ip
 8009e00:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009e08:	f1be 0f09 	cmp.w	lr, #9
 8009e0c:	d816      	bhi.n	8009e3c <_strtol_l.constprop.0+0xa4>
 8009e0e:	4674      	mov	r4, lr
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	dd24      	ble.n	8009e5e <_strtol_l.constprop.0+0xc6>
 8009e14:	f1bc 0f00 	cmp.w	ip, #0
 8009e18:	db1e      	blt.n	8009e58 <_strtol_l.constprop.0+0xc0>
 8009e1a:	45b1      	cmp	r9, r6
 8009e1c:	d31c      	bcc.n	8009e58 <_strtol_l.constprop.0+0xc0>
 8009e1e:	d101      	bne.n	8009e24 <_strtol_l.constprop.0+0x8c>
 8009e20:	45a2      	cmp	sl, r4
 8009e22:	db19      	blt.n	8009e58 <_strtol_l.constprop.0+0xc0>
 8009e24:	fb06 4603 	mla	r6, r6, r3, r4
 8009e28:	f04f 0c01 	mov.w	ip, #1
 8009e2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e30:	e7e8      	b.n	8009e04 <_strtol_l.constprop.0+0x6c>
 8009e32:	2c2b      	cmp	r4, #43	; 0x2b
 8009e34:	bf04      	itt	eq
 8009e36:	782c      	ldrbeq	r4, [r5, #0]
 8009e38:	1cb5      	addeq	r5, r6, #2
 8009e3a:	e7ca      	b.n	8009dd2 <_strtol_l.constprop.0+0x3a>
 8009e3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009e40:	f1be 0f19 	cmp.w	lr, #25
 8009e44:	d801      	bhi.n	8009e4a <_strtol_l.constprop.0+0xb2>
 8009e46:	3c37      	subs	r4, #55	; 0x37
 8009e48:	e7e2      	b.n	8009e10 <_strtol_l.constprop.0+0x78>
 8009e4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009e4e:	f1be 0f19 	cmp.w	lr, #25
 8009e52:	d804      	bhi.n	8009e5e <_strtol_l.constprop.0+0xc6>
 8009e54:	3c57      	subs	r4, #87	; 0x57
 8009e56:	e7db      	b.n	8009e10 <_strtol_l.constprop.0+0x78>
 8009e58:	f04f 3cff 	mov.w	ip, #4294967295
 8009e5c:	e7e6      	b.n	8009e2c <_strtol_l.constprop.0+0x94>
 8009e5e:	f1bc 0f00 	cmp.w	ip, #0
 8009e62:	da05      	bge.n	8009e70 <_strtol_l.constprop.0+0xd8>
 8009e64:	2322      	movs	r3, #34	; 0x22
 8009e66:	6003      	str	r3, [r0, #0]
 8009e68:	4646      	mov	r6, r8
 8009e6a:	b942      	cbnz	r2, 8009e7e <_strtol_l.constprop.0+0xe6>
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	e79e      	b.n	8009dae <_strtol_l.constprop.0+0x16>
 8009e70:	b107      	cbz	r7, 8009e74 <_strtol_l.constprop.0+0xdc>
 8009e72:	4276      	negs	r6, r6
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d0f9      	beq.n	8009e6c <_strtol_l.constprop.0+0xd4>
 8009e78:	f1bc 0f00 	cmp.w	ip, #0
 8009e7c:	d000      	beq.n	8009e80 <_strtol_l.constprop.0+0xe8>
 8009e7e:	1e69      	subs	r1, r5, #1
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	e7f3      	b.n	8009e6c <_strtol_l.constprop.0+0xd4>
 8009e84:	2430      	movs	r4, #48	; 0x30
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1b1      	bne.n	8009dee <_strtol_l.constprop.0+0x56>
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	e7af      	b.n	8009dee <_strtol_l.constprop.0+0x56>
 8009e8e:	2c30      	cmp	r4, #48	; 0x30
 8009e90:	d0a5      	beq.n	8009dde <_strtol_l.constprop.0+0x46>
 8009e92:	230a      	movs	r3, #10
 8009e94:	e7ab      	b.n	8009dee <_strtol_l.constprop.0+0x56>
 8009e96:	bf00      	nop
 8009e98:	0800ce41 	.word	0x0800ce41

08009e9c <_strtol_r>:
 8009e9c:	f7ff bf7c 	b.w	8009d98 <_strtol_l.constprop.0>

08009ea0 <__swbuf_r>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	460e      	mov	r6, r1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	b118      	cbz	r0, 8009eb2 <__swbuf_r+0x12>
 8009eaa:	6983      	ldr	r3, [r0, #24]
 8009eac:	b90b      	cbnz	r3, 8009eb2 <__swbuf_r+0x12>
 8009eae:	f001 f84b 	bl	800af48 <__sinit>
 8009eb2:	4b21      	ldr	r3, [pc, #132]	; (8009f38 <__swbuf_r+0x98>)
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	d12b      	bne.n	8009f10 <__swbuf_r+0x70>
 8009eb8:	686c      	ldr	r4, [r5, #4]
 8009eba:	69a3      	ldr	r3, [r4, #24]
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	071a      	lsls	r2, r3, #28
 8009ec2:	d52f      	bpl.n	8009f24 <__swbuf_r+0x84>
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	b36b      	cbz	r3, 8009f24 <__swbuf_r+0x84>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	6820      	ldr	r0, [r4, #0]
 8009ecc:	1ac0      	subs	r0, r0, r3
 8009ece:	6963      	ldr	r3, [r4, #20]
 8009ed0:	b2f6      	uxtb	r6, r6
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	4637      	mov	r7, r6
 8009ed6:	dc04      	bgt.n	8009ee2 <__swbuf_r+0x42>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 ffa0 	bl	800ae20 <_fflush_r>
 8009ee0:	bb30      	cbnz	r0, 8009f30 <__swbuf_r+0x90>
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	60a3      	str	r3, [r4, #8]
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	6022      	str	r2, [r4, #0]
 8009eee:	701e      	strb	r6, [r3, #0]
 8009ef0:	6963      	ldr	r3, [r4, #20]
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	4283      	cmp	r3, r0
 8009ef6:	d004      	beq.n	8009f02 <__swbuf_r+0x62>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	07db      	lsls	r3, r3, #31
 8009efc:	d506      	bpl.n	8009f0c <__swbuf_r+0x6c>
 8009efe:	2e0a      	cmp	r6, #10
 8009f00:	d104      	bne.n	8009f0c <__swbuf_r+0x6c>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4628      	mov	r0, r5
 8009f06:	f000 ff8b 	bl	800ae20 <_fflush_r>
 8009f0a:	b988      	cbnz	r0, 8009f30 <__swbuf_r+0x90>
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f10:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <__swbuf_r+0x9c>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d101      	bne.n	8009f1a <__swbuf_r+0x7a>
 8009f16:	68ac      	ldr	r4, [r5, #8]
 8009f18:	e7cf      	b.n	8009eba <__swbuf_r+0x1a>
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <__swbuf_r+0xa0>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	bf08      	it	eq
 8009f20:	68ec      	ldreq	r4, [r5, #12]
 8009f22:	e7ca      	b.n	8009eba <__swbuf_r+0x1a>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 f80c 	bl	8009f44 <__swsetup_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d0cb      	beq.n	8009ec8 <__swbuf_r+0x28>
 8009f30:	f04f 37ff 	mov.w	r7, #4294967295
 8009f34:	e7ea      	b.n	8009f0c <__swbuf_r+0x6c>
 8009f36:	bf00      	nop
 8009f38:	0800cff4 	.word	0x0800cff4
 8009f3c:	0800d014 	.word	0x0800d014
 8009f40:	0800cfd4 	.word	0x0800cfd4

08009f44 <__swsetup_r>:
 8009f44:	4b32      	ldr	r3, [pc, #200]	; (800a010 <__swsetup_r+0xcc>)
 8009f46:	b570      	push	{r4, r5, r6, lr}
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	b125      	cbz	r5, 8009f5a <__swsetup_r+0x16>
 8009f50:	69ab      	ldr	r3, [r5, #24]
 8009f52:	b913      	cbnz	r3, 8009f5a <__swsetup_r+0x16>
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 fff7 	bl	800af48 <__sinit>
 8009f5a:	4b2e      	ldr	r3, [pc, #184]	; (800a014 <__swsetup_r+0xd0>)
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	d10f      	bne.n	8009f80 <__swsetup_r+0x3c>
 8009f60:	686c      	ldr	r4, [r5, #4]
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f68:	0719      	lsls	r1, r3, #28
 8009f6a:	d42c      	bmi.n	8009fc6 <__swsetup_r+0x82>
 8009f6c:	06dd      	lsls	r5, r3, #27
 8009f6e:	d411      	bmi.n	8009f94 <__swsetup_r+0x50>
 8009f70:	2309      	movs	r3, #9
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7e:	e03e      	b.n	8009ffe <__swsetup_r+0xba>
 8009f80:	4b25      	ldr	r3, [pc, #148]	; (800a018 <__swsetup_r+0xd4>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d101      	bne.n	8009f8a <__swsetup_r+0x46>
 8009f86:	68ac      	ldr	r4, [r5, #8]
 8009f88:	e7eb      	b.n	8009f62 <__swsetup_r+0x1e>
 8009f8a:	4b24      	ldr	r3, [pc, #144]	; (800a01c <__swsetup_r+0xd8>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	bf08      	it	eq
 8009f90:	68ec      	ldreq	r4, [r5, #12]
 8009f92:	e7e6      	b.n	8009f62 <__swsetup_r+0x1e>
 8009f94:	0758      	lsls	r0, r3, #29
 8009f96:	d512      	bpl.n	8009fbe <__swsetup_r+0x7a>
 8009f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f9a:	b141      	cbz	r1, 8009fae <__swsetup_r+0x6a>
 8009f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	d002      	beq.n	8009faa <__swsetup_r+0x66>
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f002 f947 	bl	800c238 <_free_r>
 8009faa:	2300      	movs	r3, #0
 8009fac:	6363      	str	r3, [r4, #52]	; 0x34
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f043 0308 	orr.w	r3, r3, #8
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	b94b      	cbnz	r3, 8009fde <__swsetup_r+0x9a>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd4:	d003      	beq.n	8009fde <__swsetup_r+0x9a>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f001 fbed 	bl	800b7b8 <__smakebuf_r>
 8009fde:	89a0      	ldrh	r0, [r4, #12]
 8009fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe4:	f010 0301 	ands.w	r3, r0, #1
 8009fe8:	d00a      	beq.n	800a000 <__swsetup_r+0xbc>
 8009fea:	2300      	movs	r3, #0
 8009fec:	60a3      	str	r3, [r4, #8]
 8009fee:	6963      	ldr	r3, [r4, #20]
 8009ff0:	425b      	negs	r3, r3
 8009ff2:	61a3      	str	r3, [r4, #24]
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	b943      	cbnz	r3, 800a00a <__swsetup_r+0xc6>
 8009ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ffc:	d1ba      	bne.n	8009f74 <__swsetup_r+0x30>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
 800a000:	0781      	lsls	r1, r0, #30
 800a002:	bf58      	it	pl
 800a004:	6963      	ldrpl	r3, [r4, #20]
 800a006:	60a3      	str	r3, [r4, #8]
 800a008:	e7f4      	b.n	8009ff4 <__swsetup_r+0xb0>
 800a00a:	2000      	movs	r0, #0
 800a00c:	e7f7      	b.n	8009ffe <__swsetup_r+0xba>
 800a00e:	bf00      	nop
 800a010:	2000000c 	.word	0x2000000c
 800a014:	0800cff4 	.word	0x0800cff4
 800a018:	0800d014 	.word	0x0800d014
 800a01c:	0800cfd4 	.word	0x0800cfd4

0800a020 <quorem>:
 800a020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	6903      	ldr	r3, [r0, #16]
 800a026:	690c      	ldr	r4, [r1, #16]
 800a028:	42a3      	cmp	r3, r4
 800a02a:	4607      	mov	r7, r0
 800a02c:	f2c0 8081 	blt.w	800a132 <quorem+0x112>
 800a030:	3c01      	subs	r4, #1
 800a032:	f101 0814 	add.w	r8, r1, #20
 800a036:	f100 0514 	add.w	r5, r0, #20
 800a03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a048:	3301      	adds	r3, #1
 800a04a:	429a      	cmp	r2, r3
 800a04c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a054:	fbb2 f6f3 	udiv	r6, r2, r3
 800a058:	d331      	bcc.n	800a0be <quorem+0x9e>
 800a05a:	f04f 0e00 	mov.w	lr, #0
 800a05e:	4640      	mov	r0, r8
 800a060:	46ac      	mov	ip, r5
 800a062:	46f2      	mov	sl, lr
 800a064:	f850 2b04 	ldr.w	r2, [r0], #4
 800a068:	b293      	uxth	r3, r2
 800a06a:	fb06 e303 	mla	r3, r6, r3, lr
 800a06e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a072:	b29b      	uxth	r3, r3
 800a074:	ebaa 0303 	sub.w	r3, sl, r3
 800a078:	f8dc a000 	ldr.w	sl, [ip]
 800a07c:	0c12      	lsrs	r2, r2, #16
 800a07e:	fa13 f38a 	uxtah	r3, r3, sl
 800a082:	fb06 e202 	mla	r2, r6, r2, lr
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	9b00      	ldr	r3, [sp, #0]
 800a08a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a08e:	b292      	uxth	r2, r2
 800a090:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a094:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a098:	f8bd 3000 	ldrh.w	r3, [sp]
 800a09c:	4581      	cmp	r9, r0
 800a09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0aa:	d2db      	bcs.n	800a064 <quorem+0x44>
 800a0ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0b0:	b92b      	cbnz	r3, 800a0be <quorem+0x9e>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	3b04      	subs	r3, #4
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	d32e      	bcc.n	800a11a <quorem+0xfa>
 800a0bc:	613c      	str	r4, [r7, #16]
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f001 feae 	bl	800be20 <__mcmp>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	db24      	blt.n	800a112 <quorem+0xf2>
 800a0c8:	3601      	adds	r6, #1
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f04f 0c00 	mov.w	ip, #0
 800a0d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0d4:	f8d0 e000 	ldr.w	lr, [r0]
 800a0d8:	b293      	uxth	r3, r2
 800a0da:	ebac 0303 	sub.w	r3, ip, r3
 800a0de:	0c12      	lsrs	r2, r2, #16
 800a0e0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0f2:	45c1      	cmp	r9, r8
 800a0f4:	f840 3b04 	str.w	r3, [r0], #4
 800a0f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0fc:	d2e8      	bcs.n	800a0d0 <quorem+0xb0>
 800a0fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a106:	b922      	cbnz	r2, 800a112 <quorem+0xf2>
 800a108:	3b04      	subs	r3, #4
 800a10a:	429d      	cmp	r5, r3
 800a10c:	461a      	mov	r2, r3
 800a10e:	d30a      	bcc.n	800a126 <quorem+0x106>
 800a110:	613c      	str	r4, [r7, #16]
 800a112:	4630      	mov	r0, r6
 800a114:	b003      	add	sp, #12
 800a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11a:	6812      	ldr	r2, [r2, #0]
 800a11c:	3b04      	subs	r3, #4
 800a11e:	2a00      	cmp	r2, #0
 800a120:	d1cc      	bne.n	800a0bc <quorem+0x9c>
 800a122:	3c01      	subs	r4, #1
 800a124:	e7c7      	b.n	800a0b6 <quorem+0x96>
 800a126:	6812      	ldr	r2, [r2, #0]
 800a128:	3b04      	subs	r3, #4
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	d1f0      	bne.n	800a110 <quorem+0xf0>
 800a12e:	3c01      	subs	r4, #1
 800a130:	e7eb      	b.n	800a10a <quorem+0xea>
 800a132:	2000      	movs	r0, #0
 800a134:	e7ee      	b.n	800a114 <quorem+0xf4>
	...

0800a138 <_dtoa_r>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	ed2d 8b04 	vpush	{d8-d9}
 800a140:	ec57 6b10 	vmov	r6, r7, d0
 800a144:	b093      	sub	sp, #76	; 0x4c
 800a146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a14c:	9106      	str	r1, [sp, #24]
 800a14e:	ee10 aa10 	vmov	sl, s0
 800a152:	4604      	mov	r4, r0
 800a154:	9209      	str	r2, [sp, #36]	; 0x24
 800a156:	930c      	str	r3, [sp, #48]	; 0x30
 800a158:	46bb      	mov	fp, r7
 800a15a:	b975      	cbnz	r5, 800a17a <_dtoa_r+0x42>
 800a15c:	2010      	movs	r0, #16
 800a15e:	f001 fb6b 	bl	800b838 <malloc>
 800a162:	4602      	mov	r2, r0
 800a164:	6260      	str	r0, [r4, #36]	; 0x24
 800a166:	b920      	cbnz	r0, 800a172 <_dtoa_r+0x3a>
 800a168:	4ba7      	ldr	r3, [pc, #668]	; (800a408 <_dtoa_r+0x2d0>)
 800a16a:	21ea      	movs	r1, #234	; 0xea
 800a16c:	48a7      	ldr	r0, [pc, #668]	; (800a40c <_dtoa_r+0x2d4>)
 800a16e:	f002 fc89 	bl	800ca84 <__assert_func>
 800a172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a176:	6005      	str	r5, [r0, #0]
 800a178:	60c5      	str	r5, [r0, #12]
 800a17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	b151      	cbz	r1, 800a196 <_dtoa_r+0x5e>
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	604a      	str	r2, [r1, #4]
 800a184:	2301      	movs	r3, #1
 800a186:	4093      	lsls	r3, r2
 800a188:	608b      	str	r3, [r1, #8]
 800a18a:	4620      	mov	r0, r4
 800a18c:	f001 fbbc 	bl	800b908 <_Bfree>
 800a190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	1e3b      	subs	r3, r7, #0
 800a198:	bfaa      	itet	ge
 800a19a:	2300      	movge	r3, #0
 800a19c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1a0:	f8c8 3000 	strge.w	r3, [r8]
 800a1a4:	4b9a      	ldr	r3, [pc, #616]	; (800a410 <_dtoa_r+0x2d8>)
 800a1a6:	bfbc      	itt	lt
 800a1a8:	2201      	movlt	r2, #1
 800a1aa:	f8c8 2000 	strlt.w	r2, [r8]
 800a1ae:	ea33 030b 	bics.w	r3, r3, fp
 800a1b2:	d11b      	bne.n	800a1ec <_dtoa_r+0xb4>
 800a1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1c0:	4333      	orrs	r3, r6
 800a1c2:	f000 8592 	beq.w	800acea <_dtoa_r+0xbb2>
 800a1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1c8:	b963      	cbnz	r3, 800a1e4 <_dtoa_r+0xac>
 800a1ca:	4b92      	ldr	r3, [pc, #584]	; (800a414 <_dtoa_r+0x2dc>)
 800a1cc:	e022      	b.n	800a214 <_dtoa_r+0xdc>
 800a1ce:	4b92      	ldr	r3, [pc, #584]	; (800a418 <_dtoa_r+0x2e0>)
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	9801      	ldr	r0, [sp, #4]
 800a1da:	b013      	add	sp, #76	; 0x4c
 800a1dc:	ecbd 8b04 	vpop	{d8-d9}
 800a1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e4:	4b8b      	ldr	r3, [pc, #556]	; (800a414 <_dtoa_r+0x2dc>)
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	3303      	adds	r3, #3
 800a1ea:	e7f3      	b.n	800a1d4 <_dtoa_r+0x9c>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4650      	mov	r0, sl
 800a1f2:	4659      	mov	r1, fp
 800a1f4:	f7f6 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f8:	ec4b ab19 	vmov	d9, sl, fp
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	b158      	cbz	r0, 800a218 <_dtoa_r+0xe0>
 800a200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a202:	2301      	movs	r3, #1
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 856b 	beq.w	800ace4 <_dtoa_r+0xbac>
 800a20e:	4883      	ldr	r0, [pc, #524]	; (800a41c <_dtoa_r+0x2e4>)
 800a210:	6018      	str	r0, [r3, #0]
 800a212:	1e43      	subs	r3, r0, #1
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	e7df      	b.n	800a1d8 <_dtoa_r+0xa0>
 800a218:	ec4b ab10 	vmov	d0, sl, fp
 800a21c:	aa10      	add	r2, sp, #64	; 0x40
 800a21e:	a911      	add	r1, sp, #68	; 0x44
 800a220:	4620      	mov	r0, r4
 800a222:	f001 ff1f 	bl	800c064 <__d2b>
 800a226:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a22a:	ee08 0a10 	vmov	s16, r0
 800a22e:	2d00      	cmp	r5, #0
 800a230:	f000 8084 	beq.w	800a33c <_dtoa_r+0x204>
 800a234:	ee19 3a90 	vmov	r3, s19
 800a238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a23c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a240:	4656      	mov	r6, sl
 800a242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a24a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a24e:	4b74      	ldr	r3, [pc, #464]	; (800a420 <_dtoa_r+0x2e8>)
 800a250:	2200      	movs	r2, #0
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	f7f6 f817 	bl	8000288 <__aeabi_dsub>
 800a25a:	a365      	add	r3, pc, #404	; (adr r3, 800a3f0 <_dtoa_r+0x2b8>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f9ca 	bl	80005f8 <__aeabi_dmul>
 800a264:	a364      	add	r3, pc, #400	; (adr r3, 800a3f8 <_dtoa_r+0x2c0>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f6 f80f 	bl	800028c <__adddf3>
 800a26e:	4606      	mov	r6, r0
 800a270:	4628      	mov	r0, r5
 800a272:	460f      	mov	r7, r1
 800a274:	f7f6 f956 	bl	8000524 <__aeabi_i2d>
 800a278:	a361      	add	r3, pc, #388	; (adr r3, 800a400 <_dtoa_r+0x2c8>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9bb 	bl	80005f8 <__aeabi_dmul>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f5 ffff 	bl	800028c <__adddf3>
 800a28e:	4606      	mov	r6, r0
 800a290:	460f      	mov	r7, r1
 800a292:	f7f6 fc61 	bl	8000b58 <__aeabi_d2iz>
 800a296:	2200      	movs	r2, #0
 800a298:	9000      	str	r0, [sp, #0]
 800a29a:	2300      	movs	r3, #0
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7f6 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800a2a4:	b150      	cbz	r0, 800a2bc <_dtoa_r+0x184>
 800a2a6:	9800      	ldr	r0, [sp, #0]
 800a2a8:	f7f6 f93c 	bl	8000524 <__aeabi_i2d>
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	f7f6 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2b4:	b910      	cbnz	r0, 800a2bc <_dtoa_r+0x184>
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	9b00      	ldr	r3, [sp, #0]
 800a2be:	2b16      	cmp	r3, #22
 800a2c0:	d85a      	bhi.n	800a378 <_dtoa_r+0x240>
 800a2c2:	9a00      	ldr	r2, [sp, #0]
 800a2c4:	4b57      	ldr	r3, [pc, #348]	; (800a424 <_dtoa_r+0x2ec>)
 800a2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	ec51 0b19 	vmov	r0, r1, d9
 800a2d2:	f7f6 fc03 	bl	8000adc <__aeabi_dcmplt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d050      	beq.n	800a37c <_dtoa_r+0x244>
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2e6:	1b5d      	subs	r5, r3, r5
 800a2e8:	1e6b      	subs	r3, r5, #1
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	bf45      	ittet	mi
 800a2ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2f2:	9304      	strmi	r3, [sp, #16]
 800a2f4:	2300      	movpl	r3, #0
 800a2f6:	2300      	movmi	r3, #0
 800a2f8:	bf4c      	ite	mi
 800a2fa:	9305      	strmi	r3, [sp, #20]
 800a2fc:	9304      	strpl	r3, [sp, #16]
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	db3d      	blt.n	800a380 <_dtoa_r+0x248>
 800a304:	9b05      	ldr	r3, [sp, #20]
 800a306:	9a00      	ldr	r2, [sp, #0]
 800a308:	920a      	str	r2, [sp, #40]	; 0x28
 800a30a:	4413      	add	r3, r2
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	2300      	movs	r3, #0
 800a310:	9307      	str	r3, [sp, #28]
 800a312:	9b06      	ldr	r3, [sp, #24]
 800a314:	2b09      	cmp	r3, #9
 800a316:	f200 8089 	bhi.w	800a42c <_dtoa_r+0x2f4>
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	bfc4      	itt	gt
 800a31e:	3b04      	subgt	r3, #4
 800a320:	9306      	strgt	r3, [sp, #24]
 800a322:	9b06      	ldr	r3, [sp, #24]
 800a324:	f1a3 0302 	sub.w	r3, r3, #2
 800a328:	bfcc      	ite	gt
 800a32a:	2500      	movgt	r5, #0
 800a32c:	2501      	movle	r5, #1
 800a32e:	2b03      	cmp	r3, #3
 800a330:	f200 8087 	bhi.w	800a442 <_dtoa_r+0x30a>
 800a334:	e8df f003 	tbb	[pc, r3]
 800a338:	59383a2d 	.word	0x59383a2d
 800a33c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a340:	441d      	add	r5, r3
 800a342:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a346:	2b20      	cmp	r3, #32
 800a348:	bfc1      	itttt	gt
 800a34a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a34e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a352:	fa0b f303 	lslgt.w	r3, fp, r3
 800a356:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a35a:	bfda      	itte	le
 800a35c:	f1c3 0320 	rsble	r3, r3, #32
 800a360:	fa06 f003 	lslle.w	r0, r6, r3
 800a364:	4318      	orrgt	r0, r3
 800a366:	f7f6 f8cd 	bl	8000504 <__aeabi_ui2d>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4606      	mov	r6, r0
 800a36e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a372:	3d01      	subs	r5, #1
 800a374:	930e      	str	r3, [sp, #56]	; 0x38
 800a376:	e76a      	b.n	800a24e <_dtoa_r+0x116>
 800a378:	2301      	movs	r3, #1
 800a37a:	e7b2      	b.n	800a2e2 <_dtoa_r+0x1aa>
 800a37c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a37e:	e7b1      	b.n	800a2e4 <_dtoa_r+0x1ac>
 800a380:	9b04      	ldr	r3, [sp, #16]
 800a382:	9a00      	ldr	r2, [sp, #0]
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	4253      	negs	r3, r2
 800a38a:	9307      	str	r3, [sp, #28]
 800a38c:	2300      	movs	r3, #0
 800a38e:	930a      	str	r3, [sp, #40]	; 0x28
 800a390:	e7bf      	b.n	800a312 <_dtoa_r+0x1da>
 800a392:	2300      	movs	r3, #0
 800a394:	9308      	str	r3, [sp, #32]
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dc55      	bgt.n	800a448 <_dtoa_r+0x310>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a6:	e00c      	b.n	800a3c2 <_dtoa_r+0x28a>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e7f3      	b.n	800a394 <_dtoa_r+0x25c>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b0:	9308      	str	r3, [sp, #32]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	bfb8      	it	lt
 800a3c0:	2301      	movlt	r3, #1
 800a3c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	6042      	str	r2, [r0, #4]
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	f102 0614 	add.w	r6, r2, #20
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	6841      	ldr	r1, [r0, #4]
 800a3d2:	d93d      	bls.n	800a450 <_dtoa_r+0x318>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f001 fa57 	bl	800b888 <_Balloc>
 800a3da:	9001      	str	r0, [sp, #4]
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d13b      	bne.n	800a458 <_dtoa_r+0x320>
 800a3e0:	4b11      	ldr	r3, [pc, #68]	; (800a428 <_dtoa_r+0x2f0>)
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3e8:	e6c0      	b.n	800a16c <_dtoa_r+0x34>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e7df      	b.n	800a3ae <_dtoa_r+0x276>
 800a3ee:	bf00      	nop
 800a3f0:	636f4361 	.word	0x636f4361
 800a3f4:	3fd287a7 	.word	0x3fd287a7
 800a3f8:	8b60c8b3 	.word	0x8b60c8b3
 800a3fc:	3fc68a28 	.word	0x3fc68a28
 800a400:	509f79fb 	.word	0x509f79fb
 800a404:	3fd34413 	.word	0x3fd34413
 800a408:	0800cf4e 	.word	0x0800cf4e
 800a40c:	0800cf65 	.word	0x0800cf65
 800a410:	7ff00000 	.word	0x7ff00000
 800a414:	0800cf4a 	.word	0x0800cf4a
 800a418:	0800cf41 	.word	0x0800cf41
 800a41c:	0800cdc1 	.word	0x0800cdc1
 800a420:	3ff80000 	.word	0x3ff80000
 800a424:	0800d138 	.word	0x0800d138
 800a428:	0800cfc0 	.word	0x0800cfc0
 800a42c:	2501      	movs	r5, #1
 800a42e:	2300      	movs	r3, #0
 800a430:	9306      	str	r3, [sp, #24]
 800a432:	9508      	str	r5, [sp, #32]
 800a434:	f04f 33ff 	mov.w	r3, #4294967295
 800a438:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a43c:	2200      	movs	r2, #0
 800a43e:	2312      	movs	r3, #18
 800a440:	e7b0      	b.n	800a3a4 <_dtoa_r+0x26c>
 800a442:	2301      	movs	r3, #1
 800a444:	9308      	str	r3, [sp, #32]
 800a446:	e7f5      	b.n	800a434 <_dtoa_r+0x2fc>
 800a448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a44a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a44e:	e7b8      	b.n	800a3c2 <_dtoa_r+0x28a>
 800a450:	3101      	adds	r1, #1
 800a452:	6041      	str	r1, [r0, #4]
 800a454:	0052      	lsls	r2, r2, #1
 800a456:	e7b8      	b.n	800a3ca <_dtoa_r+0x292>
 800a458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a45a:	9a01      	ldr	r2, [sp, #4]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	2b0e      	cmp	r3, #14
 800a462:	f200 809d 	bhi.w	800a5a0 <_dtoa_r+0x468>
 800a466:	2d00      	cmp	r5, #0
 800a468:	f000 809a 	beq.w	800a5a0 <_dtoa_r+0x468>
 800a46c:	9b00      	ldr	r3, [sp, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd32      	ble.n	800a4d8 <_dtoa_r+0x3a0>
 800a472:	4ab7      	ldr	r2, [pc, #732]	; (800a750 <_dtoa_r+0x618>)
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	05d8      	lsls	r0, r3, #23
 800a484:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a488:	d516      	bpl.n	800a4b8 <_dtoa_r+0x380>
 800a48a:	4bb2      	ldr	r3, [pc, #712]	; (800a754 <_dtoa_r+0x61c>)
 800a48c:	ec51 0b19 	vmov	r0, r1, d9
 800a490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a494:	f7f6 f9da 	bl	800084c <__aeabi_ddiv>
 800a498:	f007 070f 	and.w	r7, r7, #15
 800a49c:	4682      	mov	sl, r0
 800a49e:	468b      	mov	fp, r1
 800a4a0:	2503      	movs	r5, #3
 800a4a2:	4eac      	ldr	r6, [pc, #688]	; (800a754 <_dtoa_r+0x61c>)
 800a4a4:	b957      	cbnz	r7, 800a4bc <_dtoa_r+0x384>
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	f7f6 f9cd 	bl	800084c <__aeabi_ddiv>
 800a4b2:	4682      	mov	sl, r0
 800a4b4:	468b      	mov	fp, r1
 800a4b6:	e028      	b.n	800a50a <_dtoa_r+0x3d2>
 800a4b8:	2502      	movs	r5, #2
 800a4ba:	e7f2      	b.n	800a4a2 <_dtoa_r+0x36a>
 800a4bc:	07f9      	lsls	r1, r7, #31
 800a4be:	d508      	bpl.n	800a4d2 <_dtoa_r+0x39a>
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4689      	mov	r9, r1
 800a4d2:	107f      	asrs	r7, r7, #1
 800a4d4:	3608      	adds	r6, #8
 800a4d6:	e7e5      	b.n	800a4a4 <_dtoa_r+0x36c>
 800a4d8:	f000 809b 	beq.w	800a612 <_dtoa_r+0x4da>
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	4f9d      	ldr	r7, [pc, #628]	; (800a754 <_dtoa_r+0x61c>)
 800a4e0:	425e      	negs	r6, r3
 800a4e2:	4b9b      	ldr	r3, [pc, #620]	; (800a750 <_dtoa_r+0x618>)
 800a4e4:	f006 020f 	and.w	r2, r6, #15
 800a4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	ec51 0b19 	vmov	r0, r1, d9
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	1136      	asrs	r6, r6, #4
 800a4fa:	4682      	mov	sl, r0
 800a4fc:	468b      	mov	fp, r1
 800a4fe:	2300      	movs	r3, #0
 800a500:	2502      	movs	r5, #2
 800a502:	2e00      	cmp	r6, #0
 800a504:	d17a      	bne.n	800a5fc <_dtoa_r+0x4c4>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1d3      	bne.n	800a4b2 <_dtoa_r+0x37a>
 800a50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 8082 	beq.w	800a616 <_dtoa_r+0x4de>
 800a512:	4b91      	ldr	r3, [pc, #580]	; (800a758 <_dtoa_r+0x620>)
 800a514:	2200      	movs	r2, #0
 800a516:	4650      	mov	r0, sl
 800a518:	4659      	mov	r1, fp
 800a51a:	f7f6 fadf 	bl	8000adc <__aeabi_dcmplt>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d079      	beq.n	800a616 <_dtoa_r+0x4de>
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d076      	beq.n	800a616 <_dtoa_r+0x4de>
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd36      	ble.n	800a59c <_dtoa_r+0x464>
 800a52e:	9b00      	ldr	r3, [sp, #0]
 800a530:	4650      	mov	r0, sl
 800a532:	4659      	mov	r1, fp
 800a534:	1e5f      	subs	r7, r3, #1
 800a536:	2200      	movs	r2, #0
 800a538:	4b88      	ldr	r3, [pc, #544]	; (800a75c <_dtoa_r+0x624>)
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	9e02      	ldr	r6, [sp, #8]
 800a540:	4682      	mov	sl, r0
 800a542:	468b      	mov	fp, r1
 800a544:	3501      	adds	r5, #1
 800a546:	4628      	mov	r0, r5
 800a548:	f7f5 ffec 	bl	8000524 <__aeabi_i2d>
 800a54c:	4652      	mov	r2, sl
 800a54e:	465b      	mov	r3, fp
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	4b82      	ldr	r3, [pc, #520]	; (800a760 <_dtoa_r+0x628>)
 800a556:	2200      	movs	r2, #0
 800a558:	f7f5 fe98 	bl	800028c <__adddf3>
 800a55c:	46d0      	mov	r8, sl
 800a55e:	46d9      	mov	r9, fp
 800a560:	4682      	mov	sl, r0
 800a562:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a566:	2e00      	cmp	r6, #0
 800a568:	d158      	bne.n	800a61c <_dtoa_r+0x4e4>
 800a56a:	4b7e      	ldr	r3, [pc, #504]	; (800a764 <_dtoa_r+0x62c>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	4640      	mov	r0, r8
 800a570:	4649      	mov	r1, r9
 800a572:	f7f5 fe89 	bl	8000288 <__aeabi_dsub>
 800a576:	4652      	mov	r2, sl
 800a578:	465b      	mov	r3, fp
 800a57a:	4680      	mov	r8, r0
 800a57c:	4689      	mov	r9, r1
 800a57e:	f7f6 facb 	bl	8000b18 <__aeabi_dcmpgt>
 800a582:	2800      	cmp	r0, #0
 800a584:	f040 8295 	bne.w	800aab2 <_dtoa_r+0x97a>
 800a588:	4652      	mov	r2, sl
 800a58a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a58e:	4640      	mov	r0, r8
 800a590:	4649      	mov	r1, r9
 800a592:	f7f6 faa3 	bl	8000adc <__aeabi_dcmplt>
 800a596:	2800      	cmp	r0, #0
 800a598:	f040 8289 	bne.w	800aaae <_dtoa_r+0x976>
 800a59c:	ec5b ab19 	vmov	sl, fp, d9
 800a5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f2c0 8148 	blt.w	800a838 <_dtoa_r+0x700>
 800a5a8:	9a00      	ldr	r2, [sp, #0]
 800a5aa:	2a0e      	cmp	r2, #14
 800a5ac:	f300 8144 	bgt.w	800a838 <_dtoa_r+0x700>
 800a5b0:	4b67      	ldr	r3, [pc, #412]	; (800a750 <_dtoa_r+0x618>)
 800a5b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f280 80d5 	bge.w	800a76c <_dtoa_r+0x634>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f300 80d1 	bgt.w	800a76c <_dtoa_r+0x634>
 800a5ca:	f040 826f 	bne.w	800aaac <_dtoa_r+0x974>
 800a5ce:	4b65      	ldr	r3, [pc, #404]	; (800a764 <_dtoa_r+0x62c>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	4652      	mov	r2, sl
 800a5dc:	465b      	mov	r3, fp
 800a5de:	f7f6 fa91 	bl	8000b04 <__aeabi_dcmpge>
 800a5e2:	9e03      	ldr	r6, [sp, #12]
 800a5e4:	4637      	mov	r7, r6
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 8245 	bne.w	800aa76 <_dtoa_r+0x93e>
 800a5ec:	9d01      	ldr	r5, [sp, #4]
 800a5ee:	2331      	movs	r3, #49	; 0x31
 800a5f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a5f4:	9b00      	ldr	r3, [sp, #0]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	e240      	b.n	800aa7e <_dtoa_r+0x946>
 800a5fc:	07f2      	lsls	r2, r6, #31
 800a5fe:	d505      	bpl.n	800a60c <_dtoa_r+0x4d4>
 800a600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	3501      	adds	r5, #1
 800a60a:	2301      	movs	r3, #1
 800a60c:	1076      	asrs	r6, r6, #1
 800a60e:	3708      	adds	r7, #8
 800a610:	e777      	b.n	800a502 <_dtoa_r+0x3ca>
 800a612:	2502      	movs	r5, #2
 800a614:	e779      	b.n	800a50a <_dtoa_r+0x3d2>
 800a616:	9f00      	ldr	r7, [sp, #0]
 800a618:	9e03      	ldr	r6, [sp, #12]
 800a61a:	e794      	b.n	800a546 <_dtoa_r+0x40e>
 800a61c:	9901      	ldr	r1, [sp, #4]
 800a61e:	4b4c      	ldr	r3, [pc, #304]	; (800a750 <_dtoa_r+0x618>)
 800a620:	4431      	add	r1, r6
 800a622:	910d      	str	r1, [sp, #52]	; 0x34
 800a624:	9908      	ldr	r1, [sp, #32]
 800a626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a62a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a62e:	2900      	cmp	r1, #0
 800a630:	d043      	beq.n	800a6ba <_dtoa_r+0x582>
 800a632:	494d      	ldr	r1, [pc, #308]	; (800a768 <_dtoa_r+0x630>)
 800a634:	2000      	movs	r0, #0
 800a636:	f7f6 f909 	bl	800084c <__aeabi_ddiv>
 800a63a:	4652      	mov	r2, sl
 800a63c:	465b      	mov	r3, fp
 800a63e:	f7f5 fe23 	bl	8000288 <__aeabi_dsub>
 800a642:	9d01      	ldr	r5, [sp, #4]
 800a644:	4682      	mov	sl, r0
 800a646:	468b      	mov	fp, r1
 800a648:	4649      	mov	r1, r9
 800a64a:	4640      	mov	r0, r8
 800a64c:	f7f6 fa84 	bl	8000b58 <__aeabi_d2iz>
 800a650:	4606      	mov	r6, r0
 800a652:	f7f5 ff67 	bl	8000524 <__aeabi_i2d>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 fe13 	bl	8000288 <__aeabi_dsub>
 800a662:	3630      	adds	r6, #48	; 0x30
 800a664:	f805 6b01 	strb.w	r6, [r5], #1
 800a668:	4652      	mov	r2, sl
 800a66a:	465b      	mov	r3, fp
 800a66c:	4680      	mov	r8, r0
 800a66e:	4689      	mov	r9, r1
 800a670:	f7f6 fa34 	bl	8000adc <__aeabi_dcmplt>
 800a674:	2800      	cmp	r0, #0
 800a676:	d163      	bne.n	800a740 <_dtoa_r+0x608>
 800a678:	4642      	mov	r2, r8
 800a67a:	464b      	mov	r3, r9
 800a67c:	4936      	ldr	r1, [pc, #216]	; (800a758 <_dtoa_r+0x620>)
 800a67e:	2000      	movs	r0, #0
 800a680:	f7f5 fe02 	bl	8000288 <__aeabi_dsub>
 800a684:	4652      	mov	r2, sl
 800a686:	465b      	mov	r3, fp
 800a688:	f7f6 fa28 	bl	8000adc <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 80b5 	bne.w	800a7fc <_dtoa_r+0x6c4>
 800a692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a694:	429d      	cmp	r5, r3
 800a696:	d081      	beq.n	800a59c <_dtoa_r+0x464>
 800a698:	4b30      	ldr	r3, [pc, #192]	; (800a75c <_dtoa_r+0x624>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	4650      	mov	r0, sl
 800a69e:	4659      	mov	r1, fp
 800a6a0:	f7f5 ffaa 	bl	80005f8 <__aeabi_dmul>
 800a6a4:	4b2d      	ldr	r3, [pc, #180]	; (800a75c <_dtoa_r+0x624>)
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	468b      	mov	fp, r1
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	4689      	mov	r9, r1
 800a6b8:	e7c6      	b.n	800a648 <_dtoa_r+0x510>
 800a6ba:	4650      	mov	r0, sl
 800a6bc:	4659      	mov	r1, fp
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c4:	9d01      	ldr	r5, [sp, #4]
 800a6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	468b      	mov	fp, r1
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7f6 fa42 	bl	8000b58 <__aeabi_d2iz>
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	f7f5 ff25 	bl	8000524 <__aeabi_i2d>
 800a6da:	3630      	adds	r6, #48	; 0x30
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	f7f5 fdd0 	bl	8000288 <__aeabi_dsub>
 800a6e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4689      	mov	r9, r1
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	d124      	bne.n	800a744 <_dtoa_r+0x60c>
 800a6fa:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <_dtoa_r+0x630>)
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	4659      	mov	r1, fp
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4640      	mov	r0, r8
 800a70a:	4649      	mov	r1, r9
 800a70c:	f7f6 fa04 	bl	8000b18 <__aeabi_dcmpgt>
 800a710:	2800      	cmp	r0, #0
 800a712:	d173      	bne.n	800a7fc <_dtoa_r+0x6c4>
 800a714:	4652      	mov	r2, sl
 800a716:	465b      	mov	r3, fp
 800a718:	4913      	ldr	r1, [pc, #76]	; (800a768 <_dtoa_r+0x630>)
 800a71a:	2000      	movs	r0, #0
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4640      	mov	r0, r8
 800a726:	4649      	mov	r1, r9
 800a728:	f7f6 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f43f af35 	beq.w	800a59c <_dtoa_r+0x464>
 800a732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a734:	1e6b      	subs	r3, r5, #1
 800a736:	930f      	str	r3, [sp, #60]	; 0x3c
 800a738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a73c:	2b30      	cmp	r3, #48	; 0x30
 800a73e:	d0f8      	beq.n	800a732 <_dtoa_r+0x5fa>
 800a740:	9700      	str	r7, [sp, #0]
 800a742:	e049      	b.n	800a7d8 <_dtoa_r+0x6a0>
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <_dtoa_r+0x624>)
 800a746:	f7f5 ff57 	bl	80005f8 <__aeabi_dmul>
 800a74a:	4680      	mov	r8, r0
 800a74c:	4689      	mov	r9, r1
 800a74e:	e7bd      	b.n	800a6cc <_dtoa_r+0x594>
 800a750:	0800d138 	.word	0x0800d138
 800a754:	0800d110 	.word	0x0800d110
 800a758:	3ff00000 	.word	0x3ff00000
 800a75c:	40240000 	.word	0x40240000
 800a760:	401c0000 	.word	0x401c0000
 800a764:	40140000 	.word	0x40140000
 800a768:	3fe00000 	.word	0x3fe00000
 800a76c:	9d01      	ldr	r5, [sp, #4]
 800a76e:	4656      	mov	r6, sl
 800a770:	465f      	mov	r7, fp
 800a772:	4642      	mov	r2, r8
 800a774:	464b      	mov	r3, r9
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f6 f867 	bl	800084c <__aeabi_ddiv>
 800a77e:	f7f6 f9eb 	bl	8000b58 <__aeabi_d2iz>
 800a782:	4682      	mov	sl, r0
 800a784:	f7f5 fece 	bl	8000524 <__aeabi_i2d>
 800a788:	4642      	mov	r2, r8
 800a78a:	464b      	mov	r3, r9
 800a78c:	f7f5 ff34 	bl	80005f8 <__aeabi_dmul>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a79c:	f7f5 fd74 	bl	8000288 <__aeabi_dsub>
 800a7a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7a4:	9e01      	ldr	r6, [sp, #4]
 800a7a6:	9f03      	ldr	r7, [sp, #12]
 800a7a8:	1bae      	subs	r6, r5, r6
 800a7aa:	42b7      	cmp	r7, r6
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	d135      	bne.n	800a81e <_dtoa_r+0x6e6>
 800a7b2:	f7f5 fd6b 	bl	800028c <__adddf3>
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	f7f6 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 800a7c2:	b9d0      	cbnz	r0, 800a7fa <_dtoa_r+0x6c2>
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f6 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d0:	b110      	cbz	r0, 800a7d8 <_dtoa_r+0x6a0>
 800a7d2:	f01a 0f01 	tst.w	sl, #1
 800a7d6:	d110      	bne.n	800a7fa <_dtoa_r+0x6c2>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	ee18 1a10 	vmov	r1, s16
 800a7de:	f001 f893 	bl	800b908 <_Bfree>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9800      	ldr	r0, [sp, #0]
 800a7e6:	702b      	strb	r3, [r5, #0]
 800a7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	6018      	str	r0, [r3, #0]
 800a7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f43f acf1 	beq.w	800a1d8 <_dtoa_r+0xa0>
 800a7f6:	601d      	str	r5, [r3, #0]
 800a7f8:	e4ee      	b.n	800a1d8 <_dtoa_r+0xa0>
 800a7fa:	9f00      	ldr	r7, [sp, #0]
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	461d      	mov	r5, r3
 800a800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a804:	2a39      	cmp	r2, #57	; 0x39
 800a806:	d106      	bne.n	800a816 <_dtoa_r+0x6de>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d1f7      	bne.n	800a7fe <_dtoa_r+0x6c6>
 800a80e:	9901      	ldr	r1, [sp, #4]
 800a810:	2230      	movs	r2, #48	; 0x30
 800a812:	3701      	adds	r7, #1
 800a814:	700a      	strb	r2, [r1, #0]
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	3201      	adds	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	e790      	b.n	800a740 <_dtoa_r+0x608>
 800a81e:	4ba6      	ldr	r3, [pc, #664]	; (800aab8 <_dtoa_r+0x980>)
 800a820:	2200      	movs	r2, #0
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	2200      	movs	r2, #0
 800a828:	2300      	movs	r3, #0
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	f7f6 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a832:	2800      	cmp	r0, #0
 800a834:	d09d      	beq.n	800a772 <_dtoa_r+0x63a>
 800a836:	e7cf      	b.n	800a7d8 <_dtoa_r+0x6a0>
 800a838:	9a08      	ldr	r2, [sp, #32]
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	f000 80d7 	beq.w	800a9ee <_dtoa_r+0x8b6>
 800a840:	9a06      	ldr	r2, [sp, #24]
 800a842:	2a01      	cmp	r2, #1
 800a844:	f300 80ba 	bgt.w	800a9bc <_dtoa_r+0x884>
 800a848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	f000 80b2 	beq.w	800a9b4 <_dtoa_r+0x87c>
 800a850:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a854:	9e07      	ldr	r6, [sp, #28]
 800a856:	9d04      	ldr	r5, [sp, #16]
 800a858:	9a04      	ldr	r2, [sp, #16]
 800a85a:	441a      	add	r2, r3
 800a85c:	9204      	str	r2, [sp, #16]
 800a85e:	9a05      	ldr	r2, [sp, #20]
 800a860:	2101      	movs	r1, #1
 800a862:	441a      	add	r2, r3
 800a864:	4620      	mov	r0, r4
 800a866:	9205      	str	r2, [sp, #20]
 800a868:	f001 f950 	bl	800bb0c <__i2b>
 800a86c:	4607      	mov	r7, r0
 800a86e:	2d00      	cmp	r5, #0
 800a870:	dd0c      	ble.n	800a88c <_dtoa_r+0x754>
 800a872:	9b05      	ldr	r3, [sp, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd09      	ble.n	800a88c <_dtoa_r+0x754>
 800a878:	42ab      	cmp	r3, r5
 800a87a:	9a04      	ldr	r2, [sp, #16]
 800a87c:	bfa8      	it	ge
 800a87e:	462b      	movge	r3, r5
 800a880:	1ad2      	subs	r2, r2, r3
 800a882:	9204      	str	r2, [sp, #16]
 800a884:	9a05      	ldr	r2, [sp, #20]
 800a886:	1aed      	subs	r5, r5, r3
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	9305      	str	r3, [sp, #20]
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	b31b      	cbz	r3, 800a8d8 <_dtoa_r+0x7a0>
 800a890:	9b08      	ldr	r3, [sp, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 80af 	beq.w	800a9f6 <_dtoa_r+0x8be>
 800a898:	2e00      	cmp	r6, #0
 800a89a:	dd13      	ble.n	800a8c4 <_dtoa_r+0x78c>
 800a89c:	4639      	mov	r1, r7
 800a89e:	4632      	mov	r2, r6
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f001 f9f3 	bl	800bc8c <__pow5mult>
 800a8a6:	ee18 2a10 	vmov	r2, s16
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f001 f942 	bl	800bb38 <__multiply>
 800a8b4:	ee18 1a10 	vmov	r1, s16
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f001 f824 	bl	800b908 <_Bfree>
 800a8c0:	ee08 8a10 	vmov	s16, r8
 800a8c4:	9b07      	ldr	r3, [sp, #28]
 800a8c6:	1b9a      	subs	r2, r3, r6
 800a8c8:	d006      	beq.n	800a8d8 <_dtoa_r+0x7a0>
 800a8ca:	ee18 1a10 	vmov	r1, s16
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f001 f9dc 	bl	800bc8c <__pow5mult>
 800a8d4:	ee08 0a10 	vmov	s16, r0
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f001 f916 	bl	800bb0c <__i2b>
 800a8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	f340 8088 	ble.w	800a9fa <_dtoa_r+0x8c2>
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f001 f9cc 	bl	800bc8c <__pow5mult>
 800a8f4:	9b06      	ldr	r3, [sp, #24]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	f340 8081 	ble.w	800aa00 <_dtoa_r+0x8c8>
 800a8fe:	f04f 0800 	mov.w	r8, #0
 800a902:	6933      	ldr	r3, [r6, #16]
 800a904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a908:	6918      	ldr	r0, [r3, #16]
 800a90a:	f001 f8af 	bl	800ba6c <__hi0bits>
 800a90e:	f1c0 0020 	rsb	r0, r0, #32
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	4418      	add	r0, r3
 800a916:	f010 001f 	ands.w	r0, r0, #31
 800a91a:	f000 8092 	beq.w	800aa42 <_dtoa_r+0x90a>
 800a91e:	f1c0 0320 	rsb	r3, r0, #32
 800a922:	2b04      	cmp	r3, #4
 800a924:	f340 808a 	ble.w	800aa3c <_dtoa_r+0x904>
 800a928:	f1c0 001c 	rsb	r0, r0, #28
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	4403      	add	r3, r0
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	4403      	add	r3, r0
 800a936:	4405      	add	r5, r0
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dd07      	ble.n	800a950 <_dtoa_r+0x818>
 800a940:	ee18 1a10 	vmov	r1, s16
 800a944:	461a      	mov	r2, r3
 800a946:	4620      	mov	r0, r4
 800a948:	f001 f9fa 	bl	800bd40 <__lshift>
 800a94c:	ee08 0a10 	vmov	s16, r0
 800a950:	9b05      	ldr	r3, [sp, #20]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dd05      	ble.n	800a962 <_dtoa_r+0x82a>
 800a956:	4631      	mov	r1, r6
 800a958:	461a      	mov	r2, r3
 800a95a:	4620      	mov	r0, r4
 800a95c:	f001 f9f0 	bl	800bd40 <__lshift>
 800a960:	4606      	mov	r6, r0
 800a962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d06e      	beq.n	800aa46 <_dtoa_r+0x90e>
 800a968:	ee18 0a10 	vmov	r0, s16
 800a96c:	4631      	mov	r1, r6
 800a96e:	f001 fa57 	bl	800be20 <__mcmp>
 800a972:	2800      	cmp	r0, #0
 800a974:	da67      	bge.n	800aa46 <_dtoa_r+0x90e>
 800a976:	9b00      	ldr	r3, [sp, #0]
 800a978:	3b01      	subs	r3, #1
 800a97a:	ee18 1a10 	vmov	r1, s16
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	220a      	movs	r2, #10
 800a982:	2300      	movs	r3, #0
 800a984:	4620      	mov	r0, r4
 800a986:	f000 ffe1 	bl	800b94c <__multadd>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	ee08 0a10 	vmov	s16, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 81b1 	beq.w	800acf8 <_dtoa_r+0xbc0>
 800a996:	2300      	movs	r3, #0
 800a998:	4639      	mov	r1, r7
 800a99a:	220a      	movs	r2, #10
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 ffd5 	bl	800b94c <__multadd>
 800a9a2:	9b02      	ldr	r3, [sp, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	f300 808e 	bgt.w	800aac8 <_dtoa_r+0x990>
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	dc51      	bgt.n	800aa56 <_dtoa_r+0x91e>
 800a9b2:	e089      	b.n	800aac8 <_dtoa_r+0x990>
 800a9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9ba:	e74b      	b.n	800a854 <_dtoa_r+0x71c>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	1e5e      	subs	r6, r3, #1
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	42b3      	cmp	r3, r6
 800a9c4:	bfbf      	itttt	lt
 800a9c6:	9b07      	ldrlt	r3, [sp, #28]
 800a9c8:	9607      	strlt	r6, [sp, #28]
 800a9ca:	1af2      	sublt	r2, r6, r3
 800a9cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9ce:	bfb6      	itet	lt
 800a9d0:	189b      	addlt	r3, r3, r2
 800a9d2:	1b9e      	subge	r6, r3, r6
 800a9d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	bfb8      	it	lt
 800a9da:	2600      	movlt	r6, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bfb7      	itett	lt
 800a9e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a9e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a9e8:	1a9d      	sublt	r5, r3, r2
 800a9ea:	2300      	movlt	r3, #0
 800a9ec:	e734      	b.n	800a858 <_dtoa_r+0x720>
 800a9ee:	9e07      	ldr	r6, [sp, #28]
 800a9f0:	9d04      	ldr	r5, [sp, #16]
 800a9f2:	9f08      	ldr	r7, [sp, #32]
 800a9f4:	e73b      	b.n	800a86e <_dtoa_r+0x736>
 800a9f6:	9a07      	ldr	r2, [sp, #28]
 800a9f8:	e767      	b.n	800a8ca <_dtoa_r+0x792>
 800a9fa:	9b06      	ldr	r3, [sp, #24]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	dc18      	bgt.n	800aa32 <_dtoa_r+0x8fa>
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	d115      	bne.n	800aa32 <_dtoa_r+0x8fa>
 800aa06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa0a:	b993      	cbnz	r3, 800aa32 <_dtoa_r+0x8fa>
 800aa0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa10:	0d1b      	lsrs	r3, r3, #20
 800aa12:	051b      	lsls	r3, r3, #20
 800aa14:	b183      	cbz	r3, 800aa38 <_dtoa_r+0x900>
 800aa16:	9b04      	ldr	r3, [sp, #16]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	9b05      	ldr	r3, [sp, #20]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	f04f 0801 	mov.w	r8, #1
 800aa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f47f af6a 	bne.w	800a902 <_dtoa_r+0x7ca>
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e76f      	b.n	800a912 <_dtoa_r+0x7da>
 800aa32:	f04f 0800 	mov.w	r8, #0
 800aa36:	e7f6      	b.n	800aa26 <_dtoa_r+0x8ee>
 800aa38:	4698      	mov	r8, r3
 800aa3a:	e7f4      	b.n	800aa26 <_dtoa_r+0x8ee>
 800aa3c:	f43f af7d 	beq.w	800a93a <_dtoa_r+0x802>
 800aa40:	4618      	mov	r0, r3
 800aa42:	301c      	adds	r0, #28
 800aa44:	e772      	b.n	800a92c <_dtoa_r+0x7f4>
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dc37      	bgt.n	800aabc <_dtoa_r+0x984>
 800aa4c:	9b06      	ldr	r3, [sp, #24]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	dd34      	ble.n	800aabc <_dtoa_r+0x984>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	9302      	str	r3, [sp, #8]
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	b96b      	cbnz	r3, 800aa76 <_dtoa_r+0x93e>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 ff74 	bl	800b94c <__multadd>
 800aa64:	4601      	mov	r1, r0
 800aa66:	4606      	mov	r6, r0
 800aa68:	ee18 0a10 	vmov	r0, s16
 800aa6c:	f001 f9d8 	bl	800be20 <__mcmp>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	f73f adbb 	bgt.w	800a5ec <_dtoa_r+0x4b4>
 800aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa78:	9d01      	ldr	r5, [sp, #4]
 800aa7a:	43db      	mvns	r3, r3
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	4631      	mov	r1, r6
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 ff3f 	bl	800b908 <_Bfree>
 800aa8a:	2f00      	cmp	r7, #0
 800aa8c:	f43f aea4 	beq.w	800a7d8 <_dtoa_r+0x6a0>
 800aa90:	f1b8 0f00 	cmp.w	r8, #0
 800aa94:	d005      	beq.n	800aaa2 <_dtoa_r+0x96a>
 800aa96:	45b8      	cmp	r8, r7
 800aa98:	d003      	beq.n	800aaa2 <_dtoa_r+0x96a>
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 ff33 	bl	800b908 <_Bfree>
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 ff2f 	bl	800b908 <_Bfree>
 800aaaa:	e695      	b.n	800a7d8 <_dtoa_r+0x6a0>
 800aaac:	2600      	movs	r6, #0
 800aaae:	4637      	mov	r7, r6
 800aab0:	e7e1      	b.n	800aa76 <_dtoa_r+0x93e>
 800aab2:	9700      	str	r7, [sp, #0]
 800aab4:	4637      	mov	r7, r6
 800aab6:	e599      	b.n	800a5ec <_dtoa_r+0x4b4>
 800aab8:	40240000 	.word	0x40240000
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 80ca 	beq.w	800ac58 <_dtoa_r+0xb20>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	9302      	str	r3, [sp, #8]
 800aac8:	2d00      	cmp	r5, #0
 800aaca:	dd05      	ble.n	800aad8 <_dtoa_r+0x9a0>
 800aacc:	4639      	mov	r1, r7
 800aace:	462a      	mov	r2, r5
 800aad0:	4620      	mov	r0, r4
 800aad2:	f001 f935 	bl	800bd40 <__lshift>
 800aad6:	4607      	mov	r7, r0
 800aad8:	f1b8 0f00 	cmp.w	r8, #0
 800aadc:	d05b      	beq.n	800ab96 <_dtoa_r+0xa5e>
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 fed1 	bl	800b888 <_Balloc>
 800aae6:	4605      	mov	r5, r0
 800aae8:	b928      	cbnz	r0, 800aaf6 <_dtoa_r+0x9be>
 800aaea:	4b87      	ldr	r3, [pc, #540]	; (800ad08 <_dtoa_r+0xbd0>)
 800aaec:	4602      	mov	r2, r0
 800aaee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaf2:	f7ff bb3b 	b.w	800a16c <_dtoa_r+0x34>
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	3202      	adds	r2, #2
 800aafa:	0092      	lsls	r2, r2, #2
 800aafc:	f107 010c 	add.w	r1, r7, #12
 800ab00:	300c      	adds	r0, #12
 800ab02:	f000 feb3 	bl	800b86c <memcpy>
 800ab06:	2201      	movs	r2, #1
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f001 f918 	bl	800bd40 <__lshift>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	f103 0901 	add.w	r9, r3, #1
 800ab16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	f00a 0301 	and.w	r3, sl, #1
 800ab22:	46b8      	mov	r8, r7
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	4607      	mov	r7, r0
 800ab28:	4631      	mov	r1, r6
 800ab2a:	ee18 0a10 	vmov	r0, s16
 800ab2e:	f7ff fa77 	bl	800a020 <quorem>
 800ab32:	4641      	mov	r1, r8
 800ab34:	9002      	str	r0, [sp, #8]
 800ab36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab3a:	ee18 0a10 	vmov	r0, s16
 800ab3e:	f001 f96f 	bl	800be20 <__mcmp>
 800ab42:	463a      	mov	r2, r7
 800ab44:	9003      	str	r0, [sp, #12]
 800ab46:	4631      	mov	r1, r6
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f001 f985 	bl	800be58 <__mdiff>
 800ab4e:	68c2      	ldr	r2, [r0, #12]
 800ab50:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab54:	4605      	mov	r5, r0
 800ab56:	bb02      	cbnz	r2, 800ab9a <_dtoa_r+0xa62>
 800ab58:	4601      	mov	r1, r0
 800ab5a:	ee18 0a10 	vmov	r0, s16
 800ab5e:	f001 f95f 	bl	800be20 <__mcmp>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4629      	mov	r1, r5
 800ab66:	4620      	mov	r0, r4
 800ab68:	9207      	str	r2, [sp, #28]
 800ab6a:	f000 fecd 	bl	800b908 <_Bfree>
 800ab6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab72:	ea43 0102 	orr.w	r1, r3, r2
 800ab76:	9b04      	ldr	r3, [sp, #16]
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	464d      	mov	r5, r9
 800ab7c:	d10f      	bne.n	800ab9e <_dtoa_r+0xa66>
 800ab7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab82:	d02a      	beq.n	800abda <_dtoa_r+0xaa2>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dd02      	ble.n	800ab90 <_dtoa_r+0xa58>
 800ab8a:	9b02      	ldr	r3, [sp, #8]
 800ab8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab90:	f88b a000 	strb.w	sl, [fp]
 800ab94:	e775      	b.n	800aa82 <_dtoa_r+0x94a>
 800ab96:	4638      	mov	r0, r7
 800ab98:	e7ba      	b.n	800ab10 <_dtoa_r+0x9d8>
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	e7e2      	b.n	800ab64 <_dtoa_r+0xa2c>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	db04      	blt.n	800abae <_dtoa_r+0xa76>
 800aba4:	9906      	ldr	r1, [sp, #24]
 800aba6:	430b      	orrs	r3, r1
 800aba8:	9904      	ldr	r1, [sp, #16]
 800abaa:	430b      	orrs	r3, r1
 800abac:	d122      	bne.n	800abf4 <_dtoa_r+0xabc>
 800abae:	2a00      	cmp	r2, #0
 800abb0:	ddee      	ble.n	800ab90 <_dtoa_r+0xa58>
 800abb2:	ee18 1a10 	vmov	r1, s16
 800abb6:	2201      	movs	r2, #1
 800abb8:	4620      	mov	r0, r4
 800abba:	f001 f8c1 	bl	800bd40 <__lshift>
 800abbe:	4631      	mov	r1, r6
 800abc0:	ee08 0a10 	vmov	s16, r0
 800abc4:	f001 f92c 	bl	800be20 <__mcmp>
 800abc8:	2800      	cmp	r0, #0
 800abca:	dc03      	bgt.n	800abd4 <_dtoa_r+0xa9c>
 800abcc:	d1e0      	bne.n	800ab90 <_dtoa_r+0xa58>
 800abce:	f01a 0f01 	tst.w	sl, #1
 800abd2:	d0dd      	beq.n	800ab90 <_dtoa_r+0xa58>
 800abd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abd8:	d1d7      	bne.n	800ab8a <_dtoa_r+0xa52>
 800abda:	2339      	movs	r3, #57	; 0x39
 800abdc:	f88b 3000 	strb.w	r3, [fp]
 800abe0:	462b      	mov	r3, r5
 800abe2:	461d      	mov	r5, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abea:	2a39      	cmp	r2, #57	; 0x39
 800abec:	d071      	beq.n	800acd2 <_dtoa_r+0xb9a>
 800abee:	3201      	adds	r2, #1
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e746      	b.n	800aa82 <_dtoa_r+0x94a>
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	dd07      	ble.n	800ac08 <_dtoa_r+0xad0>
 800abf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abfc:	d0ed      	beq.n	800abda <_dtoa_r+0xaa2>
 800abfe:	f10a 0301 	add.w	r3, sl, #1
 800ac02:	f88b 3000 	strb.w	r3, [fp]
 800ac06:	e73c      	b.n	800aa82 <_dtoa_r+0x94a>
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac0e:	4599      	cmp	r9, r3
 800ac10:	d047      	beq.n	800aca2 <_dtoa_r+0xb6a>
 800ac12:	ee18 1a10 	vmov	r1, s16
 800ac16:	2300      	movs	r3, #0
 800ac18:	220a      	movs	r2, #10
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 fe96 	bl	800b94c <__multadd>
 800ac20:	45b8      	cmp	r8, r7
 800ac22:	ee08 0a10 	vmov	s16, r0
 800ac26:	f04f 0300 	mov.w	r3, #0
 800ac2a:	f04f 020a 	mov.w	r2, #10
 800ac2e:	4641      	mov	r1, r8
 800ac30:	4620      	mov	r0, r4
 800ac32:	d106      	bne.n	800ac42 <_dtoa_r+0xb0a>
 800ac34:	f000 fe8a 	bl	800b94c <__multadd>
 800ac38:	4680      	mov	r8, r0
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	f109 0901 	add.w	r9, r9, #1
 800ac40:	e772      	b.n	800ab28 <_dtoa_r+0x9f0>
 800ac42:	f000 fe83 	bl	800b94c <__multadd>
 800ac46:	4639      	mov	r1, r7
 800ac48:	4680      	mov	r8, r0
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	220a      	movs	r2, #10
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fe7c 	bl	800b94c <__multadd>
 800ac54:	4607      	mov	r7, r0
 800ac56:	e7f1      	b.n	800ac3c <_dtoa_r+0xb04>
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	9302      	str	r3, [sp, #8]
 800ac5c:	9d01      	ldr	r5, [sp, #4]
 800ac5e:	ee18 0a10 	vmov	r0, s16
 800ac62:	4631      	mov	r1, r6
 800ac64:	f7ff f9dc 	bl	800a020 <quorem>
 800ac68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac6c:	9b01      	ldr	r3, [sp, #4]
 800ac6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ac72:	1aea      	subs	r2, r5, r3
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	dd09      	ble.n	800ac8e <_dtoa_r+0xb56>
 800ac7a:	ee18 1a10 	vmov	r1, s16
 800ac7e:	2300      	movs	r3, #0
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fe62 	bl	800b94c <__multadd>
 800ac88:	ee08 0a10 	vmov	s16, r0
 800ac8c:	e7e7      	b.n	800ac5e <_dtoa_r+0xb26>
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bfc8      	it	gt
 800ac94:	461d      	movgt	r5, r3
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	bfd8      	it	le
 800ac9a:	2501      	movle	r5, #1
 800ac9c:	441d      	add	r5, r3
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	ee18 1a10 	vmov	r1, s16
 800aca6:	2201      	movs	r2, #1
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 f849 	bl	800bd40 <__lshift>
 800acae:	4631      	mov	r1, r6
 800acb0:	ee08 0a10 	vmov	s16, r0
 800acb4:	f001 f8b4 	bl	800be20 <__mcmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	dc91      	bgt.n	800abe0 <_dtoa_r+0xaa8>
 800acbc:	d102      	bne.n	800acc4 <_dtoa_r+0xb8c>
 800acbe:	f01a 0f01 	tst.w	sl, #1
 800acc2:	d18d      	bne.n	800abe0 <_dtoa_r+0xaa8>
 800acc4:	462b      	mov	r3, r5
 800acc6:	461d      	mov	r5, r3
 800acc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800accc:	2a30      	cmp	r2, #48	; 0x30
 800acce:	d0fa      	beq.n	800acc6 <_dtoa_r+0xb8e>
 800acd0:	e6d7      	b.n	800aa82 <_dtoa_r+0x94a>
 800acd2:	9a01      	ldr	r2, [sp, #4]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d184      	bne.n	800abe2 <_dtoa_r+0xaaa>
 800acd8:	9b00      	ldr	r3, [sp, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	2331      	movs	r3, #49	; 0x31
 800ace0:	7013      	strb	r3, [r2, #0]
 800ace2:	e6ce      	b.n	800aa82 <_dtoa_r+0x94a>
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <_dtoa_r+0xbd4>)
 800ace6:	f7ff ba95 	b.w	800a214 <_dtoa_r+0xdc>
 800acea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acec:	2b00      	cmp	r3, #0
 800acee:	f47f aa6e 	bne.w	800a1ce <_dtoa_r+0x96>
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <_dtoa_r+0xbd8>)
 800acf4:	f7ff ba8e 	b.w	800a214 <_dtoa_r+0xdc>
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	dcae      	bgt.n	800ac5c <_dtoa_r+0xb24>
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	f73f aea8 	bgt.w	800aa56 <_dtoa_r+0x91e>
 800ad06:	e7a9      	b.n	800ac5c <_dtoa_r+0xb24>
 800ad08:	0800cfc0 	.word	0x0800cfc0
 800ad0c:	0800cdc0 	.word	0x0800cdc0
 800ad10:	0800cf41 	.word	0x0800cf41

0800ad14 <__sflush_r>:
 800ad14:	898a      	ldrh	r2, [r1, #12]
 800ad16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	0710      	lsls	r0, r2, #28
 800ad1e:	460c      	mov	r4, r1
 800ad20:	d458      	bmi.n	800add4 <__sflush_r+0xc0>
 800ad22:	684b      	ldr	r3, [r1, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dc05      	bgt.n	800ad34 <__sflush_r+0x20>
 800ad28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	dc02      	bgt.n	800ad34 <__sflush_r+0x20>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad36:	2e00      	cmp	r6, #0
 800ad38:	d0f9      	beq.n	800ad2e <__sflush_r+0x1a>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad40:	682f      	ldr	r7, [r5, #0]
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	d032      	beq.n	800adac <__sflush_r+0x98>
 800ad46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	075a      	lsls	r2, r3, #29
 800ad4c:	d505      	bpl.n	800ad5a <__sflush_r+0x46>
 800ad4e:	6863      	ldr	r3, [r4, #4]
 800ad50:	1ac0      	subs	r0, r0, r3
 800ad52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad54:	b10b      	cbz	r3, 800ad5a <__sflush_r+0x46>
 800ad56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad58:	1ac0      	subs	r0, r0, r3
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad60:	6a21      	ldr	r1, [r4, #32]
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b0      	blx	r6
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	d106      	bne.n	800ad7a <__sflush_r+0x66>
 800ad6c:	6829      	ldr	r1, [r5, #0]
 800ad6e:	291d      	cmp	r1, #29
 800ad70:	d82c      	bhi.n	800adcc <__sflush_r+0xb8>
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <__sflush_r+0x108>)
 800ad74:	40ca      	lsrs	r2, r1
 800ad76:	07d6      	lsls	r6, r2, #31
 800ad78:	d528      	bpl.n	800adcc <__sflush_r+0xb8>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6062      	str	r2, [r4, #4]
 800ad7e:	04d9      	lsls	r1, r3, #19
 800ad80:	6922      	ldr	r2, [r4, #16]
 800ad82:	6022      	str	r2, [r4, #0]
 800ad84:	d504      	bpl.n	800ad90 <__sflush_r+0x7c>
 800ad86:	1c42      	adds	r2, r0, #1
 800ad88:	d101      	bne.n	800ad8e <__sflush_r+0x7a>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	b903      	cbnz	r3, 800ad90 <__sflush_r+0x7c>
 800ad8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad92:	602f      	str	r7, [r5, #0]
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d0ca      	beq.n	800ad2e <__sflush_r+0x1a>
 800ad98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad9c:	4299      	cmp	r1, r3
 800ad9e:	d002      	beq.n	800ada6 <__sflush_r+0x92>
 800ada0:	4628      	mov	r0, r5
 800ada2:	f001 fa49 	bl	800c238 <_free_r>
 800ada6:	2000      	movs	r0, #0
 800ada8:	6360      	str	r0, [r4, #52]	; 0x34
 800adaa:	e7c1      	b.n	800ad30 <__sflush_r+0x1c>
 800adac:	6a21      	ldr	r1, [r4, #32]
 800adae:	2301      	movs	r3, #1
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b0      	blx	r6
 800adb4:	1c41      	adds	r1, r0, #1
 800adb6:	d1c7      	bne.n	800ad48 <__sflush_r+0x34>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0c4      	beq.n	800ad48 <__sflush_r+0x34>
 800adbe:	2b1d      	cmp	r3, #29
 800adc0:	d001      	beq.n	800adc6 <__sflush_r+0xb2>
 800adc2:	2b16      	cmp	r3, #22
 800adc4:	d101      	bne.n	800adca <__sflush_r+0xb6>
 800adc6:	602f      	str	r7, [r5, #0]
 800adc8:	e7b1      	b.n	800ad2e <__sflush_r+0x1a>
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	e7ad      	b.n	800ad30 <__sflush_r+0x1c>
 800add4:	690f      	ldr	r7, [r1, #16]
 800add6:	2f00      	cmp	r7, #0
 800add8:	d0a9      	beq.n	800ad2e <__sflush_r+0x1a>
 800adda:	0793      	lsls	r3, r2, #30
 800addc:	680e      	ldr	r6, [r1, #0]
 800adde:	bf08      	it	eq
 800ade0:	694b      	ldreq	r3, [r1, #20]
 800ade2:	600f      	str	r7, [r1, #0]
 800ade4:	bf18      	it	ne
 800ade6:	2300      	movne	r3, #0
 800ade8:	eba6 0807 	sub.w	r8, r6, r7
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	f1b8 0f00 	cmp.w	r8, #0
 800adf2:	dd9c      	ble.n	800ad2e <__sflush_r+0x1a>
 800adf4:	6a21      	ldr	r1, [r4, #32]
 800adf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adf8:	4643      	mov	r3, r8
 800adfa:	463a      	mov	r2, r7
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b0      	blx	r6
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dc06      	bgt.n	800ae12 <__sflush_r+0xfe>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e78e      	b.n	800ad30 <__sflush_r+0x1c>
 800ae12:	4407      	add	r7, r0
 800ae14:	eba8 0800 	sub.w	r8, r8, r0
 800ae18:	e7e9      	b.n	800adee <__sflush_r+0xda>
 800ae1a:	bf00      	nop
 800ae1c:	20400001 	.word	0x20400001

0800ae20 <_fflush_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	690b      	ldr	r3, [r1, #16]
 800ae24:	4605      	mov	r5, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b913      	cbnz	r3, 800ae30 <_fflush_r+0x10>
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	b118      	cbz	r0, 800ae3a <_fflush_r+0x1a>
 800ae32:	6983      	ldr	r3, [r0, #24]
 800ae34:	b90b      	cbnz	r3, 800ae3a <_fflush_r+0x1a>
 800ae36:	f000 f887 	bl	800af48 <__sinit>
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <_fflush_r+0x6c>)
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d11b      	bne.n	800ae78 <_fflush_r+0x58>
 800ae40:	686c      	ldr	r4, [r5, #4]
 800ae42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ef      	beq.n	800ae2a <_fflush_r+0xa>
 800ae4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae4c:	07d0      	lsls	r0, r2, #31
 800ae4e:	d404      	bmi.n	800ae5a <_fflush_r+0x3a>
 800ae50:	0599      	lsls	r1, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_fflush_r+0x3a>
 800ae54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae56:	f000 fc88 	bl	800b76a <__retarget_lock_acquire_recursive>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f7ff ff59 	bl	800ad14 <__sflush_r>
 800ae62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae64:	07da      	lsls	r2, r3, #31
 800ae66:	4605      	mov	r5, r0
 800ae68:	d4e0      	bmi.n	800ae2c <_fflush_r+0xc>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	059b      	lsls	r3, r3, #22
 800ae6e:	d4dd      	bmi.n	800ae2c <_fflush_r+0xc>
 800ae70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae72:	f000 fc7b 	bl	800b76c <__retarget_lock_release_recursive>
 800ae76:	e7d9      	b.n	800ae2c <_fflush_r+0xc>
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <_fflush_r+0x70>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d101      	bne.n	800ae82 <_fflush_r+0x62>
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	e7df      	b.n	800ae42 <_fflush_r+0x22>
 800ae82:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <_fflush_r+0x74>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	bf08      	it	eq
 800ae88:	68ec      	ldreq	r4, [r5, #12]
 800ae8a:	e7da      	b.n	800ae42 <_fflush_r+0x22>
 800ae8c:	0800cff4 	.word	0x0800cff4
 800ae90:	0800d014 	.word	0x0800d014
 800ae94:	0800cfd4 	.word	0x0800cfd4

0800ae98 <std>:
 800ae98:	2300      	movs	r3, #0
 800ae9a:	b510      	push	{r4, lr}
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aea6:	6083      	str	r3, [r0, #8]
 800aea8:	8181      	strh	r1, [r0, #12]
 800aeaa:	6643      	str	r3, [r0, #100]	; 0x64
 800aeac:	81c2      	strh	r2, [r0, #14]
 800aeae:	6183      	str	r3, [r0, #24]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2208      	movs	r2, #8
 800aeb4:	305c      	adds	r0, #92	; 0x5c
 800aeb6:	f7fd fa0f 	bl	80082d8 <memset>
 800aeba:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <std+0x38>)
 800aebc:	6263      	str	r3, [r4, #36]	; 0x24
 800aebe:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <std+0x3c>)
 800aec0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <std+0x40>)
 800aec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aec6:	4b05      	ldr	r3, [pc, #20]	; (800aedc <std+0x44>)
 800aec8:	6224      	str	r4, [r4, #32]
 800aeca:	6323      	str	r3, [r4, #48]	; 0x30
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop
 800aed0:	0800c999 	.word	0x0800c999
 800aed4:	0800c9bb 	.word	0x0800c9bb
 800aed8:	0800c9f3 	.word	0x0800c9f3
 800aedc:	0800ca17 	.word	0x0800ca17

0800aee0 <_cleanup_r>:
 800aee0:	4901      	ldr	r1, [pc, #4]	; (800aee8 <_cleanup_r+0x8>)
 800aee2:	f000 b8af 	b.w	800b044 <_fwalk_reent>
 800aee6:	bf00      	nop
 800aee8:	0800ae21 	.word	0x0800ae21

0800aeec <__sfmoreglue>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	2268      	movs	r2, #104	; 0x68
 800aef0:	1e4d      	subs	r5, r1, #1
 800aef2:	4355      	muls	r5, r2
 800aef4:	460e      	mov	r6, r1
 800aef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aefa:	f001 fa09 	bl	800c310 <_malloc_r>
 800aefe:	4604      	mov	r4, r0
 800af00:	b140      	cbz	r0, 800af14 <__sfmoreglue+0x28>
 800af02:	2100      	movs	r1, #0
 800af04:	e9c0 1600 	strd	r1, r6, [r0]
 800af08:	300c      	adds	r0, #12
 800af0a:	60a0      	str	r0, [r4, #8]
 800af0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af10:	f7fd f9e2 	bl	80082d8 <memset>
 800af14:	4620      	mov	r0, r4
 800af16:	bd70      	pop	{r4, r5, r6, pc}

0800af18 <__sfp_lock_acquire>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__sfp_lock_acquire+0x8>)
 800af1a:	f000 bc26 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	200004fd 	.word	0x200004fd

0800af24 <__sfp_lock_release>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__sfp_lock_release+0x8>)
 800af26:	f000 bc21 	b.w	800b76c <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	200004fd 	.word	0x200004fd

0800af30 <__sinit_lock_acquire>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__sinit_lock_acquire+0x8>)
 800af32:	f000 bc1a 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800af36:	bf00      	nop
 800af38:	200004fe 	.word	0x200004fe

0800af3c <__sinit_lock_release>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__sinit_lock_release+0x8>)
 800af3e:	f000 bc15 	b.w	800b76c <__retarget_lock_release_recursive>
 800af42:	bf00      	nop
 800af44:	200004fe 	.word	0x200004fe

0800af48 <__sinit>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	4604      	mov	r4, r0
 800af4c:	f7ff fff0 	bl	800af30 <__sinit_lock_acquire>
 800af50:	69a3      	ldr	r3, [r4, #24]
 800af52:	b11b      	cbz	r3, 800af5c <__sinit+0x14>
 800af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af58:	f7ff bff0 	b.w	800af3c <__sinit_lock_release>
 800af5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af60:	6523      	str	r3, [r4, #80]	; 0x50
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <__sinit+0x68>)
 800af64:	4a13      	ldr	r2, [pc, #76]	; (800afb4 <__sinit+0x6c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	62a2      	str	r2, [r4, #40]	; 0x28
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	bf04      	itt	eq
 800af6e:	2301      	moveq	r3, #1
 800af70:	61a3      	streq	r3, [r4, #24]
 800af72:	4620      	mov	r0, r4
 800af74:	f000 f820 	bl	800afb8 <__sfp>
 800af78:	6060      	str	r0, [r4, #4]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 f81c 	bl	800afb8 <__sfp>
 800af80:	60a0      	str	r0, [r4, #8]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f818 	bl	800afb8 <__sfp>
 800af88:	2200      	movs	r2, #0
 800af8a:	60e0      	str	r0, [r4, #12]
 800af8c:	2104      	movs	r1, #4
 800af8e:	6860      	ldr	r0, [r4, #4]
 800af90:	f7ff ff82 	bl	800ae98 <std>
 800af94:	68a0      	ldr	r0, [r4, #8]
 800af96:	2201      	movs	r2, #1
 800af98:	2109      	movs	r1, #9
 800af9a:	f7ff ff7d 	bl	800ae98 <std>
 800af9e:	68e0      	ldr	r0, [r4, #12]
 800afa0:	2202      	movs	r2, #2
 800afa2:	2112      	movs	r1, #18
 800afa4:	f7ff ff78 	bl	800ae98 <std>
 800afa8:	2301      	movs	r3, #1
 800afaa:	61a3      	str	r3, [r4, #24]
 800afac:	e7d2      	b.n	800af54 <__sinit+0xc>
 800afae:	bf00      	nop
 800afb0:	0800cdac 	.word	0x0800cdac
 800afb4:	0800aee1 	.word	0x0800aee1

0800afb8 <__sfp>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	4607      	mov	r7, r0
 800afbc:	f7ff ffac 	bl	800af18 <__sfp_lock_acquire>
 800afc0:	4b1e      	ldr	r3, [pc, #120]	; (800b03c <__sfp+0x84>)
 800afc2:	681e      	ldr	r6, [r3, #0]
 800afc4:	69b3      	ldr	r3, [r6, #24]
 800afc6:	b913      	cbnz	r3, 800afce <__sfp+0x16>
 800afc8:	4630      	mov	r0, r6
 800afca:	f7ff ffbd 	bl	800af48 <__sinit>
 800afce:	3648      	adds	r6, #72	; 0x48
 800afd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	d503      	bpl.n	800afe0 <__sfp+0x28>
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	b30b      	cbz	r3, 800b020 <__sfp+0x68>
 800afdc:	6836      	ldr	r6, [r6, #0]
 800afde:	e7f7      	b.n	800afd0 <__sfp+0x18>
 800afe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afe4:	b9d5      	cbnz	r5, 800b01c <__sfp+0x64>
 800afe6:	4b16      	ldr	r3, [pc, #88]	; (800b040 <__sfp+0x88>)
 800afe8:	60e3      	str	r3, [r4, #12]
 800afea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afee:	6665      	str	r5, [r4, #100]	; 0x64
 800aff0:	f000 fbba 	bl	800b768 <__retarget_lock_init_recursive>
 800aff4:	f7ff ff96 	bl	800af24 <__sfp_lock_release>
 800aff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800affc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b000:	6025      	str	r5, [r4, #0]
 800b002:	61a5      	str	r5, [r4, #24]
 800b004:	2208      	movs	r2, #8
 800b006:	4629      	mov	r1, r5
 800b008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b00c:	f7fd f964 	bl	80082d8 <memset>
 800b010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b018:	4620      	mov	r0, r4
 800b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b01c:	3468      	adds	r4, #104	; 0x68
 800b01e:	e7d9      	b.n	800afd4 <__sfp+0x1c>
 800b020:	2104      	movs	r1, #4
 800b022:	4638      	mov	r0, r7
 800b024:	f7ff ff62 	bl	800aeec <__sfmoreglue>
 800b028:	4604      	mov	r4, r0
 800b02a:	6030      	str	r0, [r6, #0]
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1d5      	bne.n	800afdc <__sfp+0x24>
 800b030:	f7ff ff78 	bl	800af24 <__sfp_lock_release>
 800b034:	230c      	movs	r3, #12
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	e7ee      	b.n	800b018 <__sfp+0x60>
 800b03a:	bf00      	nop
 800b03c:	0800cdac 	.word	0x0800cdac
 800b040:	ffff0001 	.word	0xffff0001

0800b044 <_fwalk_reent>:
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b048:	4606      	mov	r6, r0
 800b04a:	4688      	mov	r8, r1
 800b04c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b050:	2700      	movs	r7, #0
 800b052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b056:	f1b9 0901 	subs.w	r9, r9, #1
 800b05a:	d505      	bpl.n	800b068 <_fwalk_reent+0x24>
 800b05c:	6824      	ldr	r4, [r4, #0]
 800b05e:	2c00      	cmp	r4, #0
 800b060:	d1f7      	bne.n	800b052 <_fwalk_reent+0xe>
 800b062:	4638      	mov	r0, r7
 800b064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b068:	89ab      	ldrh	r3, [r5, #12]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d907      	bls.n	800b07e <_fwalk_reent+0x3a>
 800b06e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b072:	3301      	adds	r3, #1
 800b074:	d003      	beq.n	800b07e <_fwalk_reent+0x3a>
 800b076:	4629      	mov	r1, r5
 800b078:	4630      	mov	r0, r6
 800b07a:	47c0      	blx	r8
 800b07c:	4307      	orrs	r7, r0
 800b07e:	3568      	adds	r5, #104	; 0x68
 800b080:	e7e9      	b.n	800b056 <_fwalk_reent+0x12>

0800b082 <rshift>:
 800b082:	6903      	ldr	r3, [r0, #16]
 800b084:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b08c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b090:	f100 0414 	add.w	r4, r0, #20
 800b094:	dd45      	ble.n	800b122 <rshift+0xa0>
 800b096:	f011 011f 	ands.w	r1, r1, #31
 800b09a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b09e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0a2:	d10c      	bne.n	800b0be <rshift+0x3c>
 800b0a4:	f100 0710 	add.w	r7, r0, #16
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	42b1      	cmp	r1, r6
 800b0ac:	d334      	bcc.n	800b118 <rshift+0x96>
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	1eea      	subs	r2, r5, #3
 800b0b4:	4296      	cmp	r6, r2
 800b0b6:	bf38      	it	cc
 800b0b8:	2300      	movcc	r3, #0
 800b0ba:	4423      	add	r3, r4
 800b0bc:	e015      	b.n	800b0ea <rshift+0x68>
 800b0be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0c2:	f1c1 0820 	rsb	r8, r1, #32
 800b0c6:	40cf      	lsrs	r7, r1
 800b0c8:	f105 0e04 	add.w	lr, r5, #4
 800b0cc:	46a1      	mov	r9, r4
 800b0ce:	4576      	cmp	r6, lr
 800b0d0:	46f4      	mov	ip, lr
 800b0d2:	d815      	bhi.n	800b100 <rshift+0x7e>
 800b0d4:	1a9a      	subs	r2, r3, r2
 800b0d6:	0092      	lsls	r2, r2, #2
 800b0d8:	3a04      	subs	r2, #4
 800b0da:	3501      	adds	r5, #1
 800b0dc:	42ae      	cmp	r6, r5
 800b0de:	bf38      	it	cc
 800b0e0:	2200      	movcc	r2, #0
 800b0e2:	18a3      	adds	r3, r4, r2
 800b0e4:	50a7      	str	r7, [r4, r2]
 800b0e6:	b107      	cbz	r7, 800b0ea <rshift+0x68>
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	1b1a      	subs	r2, r3, r4
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0f2:	bf08      	it	eq
 800b0f4:	2300      	moveq	r3, #0
 800b0f6:	6102      	str	r2, [r0, #16]
 800b0f8:	bf08      	it	eq
 800b0fa:	6143      	streq	r3, [r0, #20]
 800b0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b100:	f8dc c000 	ldr.w	ip, [ip]
 800b104:	fa0c fc08 	lsl.w	ip, ip, r8
 800b108:	ea4c 0707 	orr.w	r7, ip, r7
 800b10c:	f849 7b04 	str.w	r7, [r9], #4
 800b110:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b114:	40cf      	lsrs	r7, r1
 800b116:	e7da      	b.n	800b0ce <rshift+0x4c>
 800b118:	f851 cb04 	ldr.w	ip, [r1], #4
 800b11c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b120:	e7c3      	b.n	800b0aa <rshift+0x28>
 800b122:	4623      	mov	r3, r4
 800b124:	e7e1      	b.n	800b0ea <rshift+0x68>

0800b126 <__hexdig_fun>:
 800b126:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b12a:	2b09      	cmp	r3, #9
 800b12c:	d802      	bhi.n	800b134 <__hexdig_fun+0xe>
 800b12e:	3820      	subs	r0, #32
 800b130:	b2c0      	uxtb	r0, r0
 800b132:	4770      	bx	lr
 800b134:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b138:	2b05      	cmp	r3, #5
 800b13a:	d801      	bhi.n	800b140 <__hexdig_fun+0x1a>
 800b13c:	3847      	subs	r0, #71	; 0x47
 800b13e:	e7f7      	b.n	800b130 <__hexdig_fun+0xa>
 800b140:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b144:	2b05      	cmp	r3, #5
 800b146:	d801      	bhi.n	800b14c <__hexdig_fun+0x26>
 800b148:	3827      	subs	r0, #39	; 0x27
 800b14a:	e7f1      	b.n	800b130 <__hexdig_fun+0xa>
 800b14c:	2000      	movs	r0, #0
 800b14e:	4770      	bx	lr

0800b150 <__gethex>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	ed2d 8b02 	vpush	{d8}
 800b158:	b089      	sub	sp, #36	; 0x24
 800b15a:	ee08 0a10 	vmov	s16, r0
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	4bb4      	ldr	r3, [pc, #720]	; (800b434 <__gethex+0x2e4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	468b      	mov	fp, r1
 800b16a:	4690      	mov	r8, r2
 800b16c:	f7f5 f830 	bl	80001d0 <strlen>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	f8db 2000 	ldr.w	r2, [fp]
 800b176:	4403      	add	r3, r0
 800b178:	4682      	mov	sl, r0
 800b17a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b17e:	9305      	str	r3, [sp, #20]
 800b180:	1c93      	adds	r3, r2, #2
 800b182:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b186:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b18a:	32fe      	adds	r2, #254	; 0xfe
 800b18c:	18d1      	adds	r1, r2, r3
 800b18e:	461f      	mov	r7, r3
 800b190:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b194:	9100      	str	r1, [sp, #0]
 800b196:	2830      	cmp	r0, #48	; 0x30
 800b198:	d0f8      	beq.n	800b18c <__gethex+0x3c>
 800b19a:	f7ff ffc4 	bl	800b126 <__hexdig_fun>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d13a      	bne.n	800b21a <__gethex+0xca>
 800b1a4:	9901      	ldr	r1, [sp, #4]
 800b1a6:	4652      	mov	r2, sl
 800b1a8:	4638      	mov	r0, r7
 800b1aa:	f001 fc38 	bl	800ca1e <strncmp>
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d168      	bne.n	800b286 <__gethex+0x136>
 800b1b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b1b8:	eb07 060a 	add.w	r6, r7, sl
 800b1bc:	f7ff ffb3 	bl	800b126 <__hexdig_fun>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d062      	beq.n	800b28a <__gethex+0x13a>
 800b1c4:	4633      	mov	r3, r6
 800b1c6:	7818      	ldrb	r0, [r3, #0]
 800b1c8:	2830      	cmp	r0, #48	; 0x30
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	f103 0301 	add.w	r3, r3, #1
 800b1d0:	d0f9      	beq.n	800b1c6 <__gethex+0x76>
 800b1d2:	f7ff ffa8 	bl	800b126 <__hexdig_fun>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	fab0 f480 	clz	r4, r0
 800b1dc:	0964      	lsrs	r4, r4, #5
 800b1de:	4635      	mov	r5, r6
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	3201      	adds	r2, #1
 800b1e8:	7830      	ldrb	r0, [r6, #0]
 800b1ea:	f7ff ff9c 	bl	800b126 <__hexdig_fun>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d1f8      	bne.n	800b1e4 <__gethex+0x94>
 800b1f2:	9901      	ldr	r1, [sp, #4]
 800b1f4:	4652      	mov	r2, sl
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f001 fc11 	bl	800ca1e <strncmp>
 800b1fc:	b980      	cbnz	r0, 800b220 <__gethex+0xd0>
 800b1fe:	b94d      	cbnz	r5, 800b214 <__gethex+0xc4>
 800b200:	eb06 050a 	add.w	r5, r6, sl
 800b204:	462a      	mov	r2, r5
 800b206:	4616      	mov	r6, r2
 800b208:	3201      	adds	r2, #1
 800b20a:	7830      	ldrb	r0, [r6, #0]
 800b20c:	f7ff ff8b 	bl	800b126 <__hexdig_fun>
 800b210:	2800      	cmp	r0, #0
 800b212:	d1f8      	bne.n	800b206 <__gethex+0xb6>
 800b214:	1bad      	subs	r5, r5, r6
 800b216:	00ad      	lsls	r5, r5, #2
 800b218:	e004      	b.n	800b224 <__gethex+0xd4>
 800b21a:	2400      	movs	r4, #0
 800b21c:	4625      	mov	r5, r4
 800b21e:	e7e0      	b.n	800b1e2 <__gethex+0x92>
 800b220:	2d00      	cmp	r5, #0
 800b222:	d1f7      	bne.n	800b214 <__gethex+0xc4>
 800b224:	7833      	ldrb	r3, [r6, #0]
 800b226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b22a:	2b50      	cmp	r3, #80	; 0x50
 800b22c:	d13b      	bne.n	800b2a6 <__gethex+0x156>
 800b22e:	7873      	ldrb	r3, [r6, #1]
 800b230:	2b2b      	cmp	r3, #43	; 0x2b
 800b232:	d02c      	beq.n	800b28e <__gethex+0x13e>
 800b234:	2b2d      	cmp	r3, #45	; 0x2d
 800b236:	d02e      	beq.n	800b296 <__gethex+0x146>
 800b238:	1c71      	adds	r1, r6, #1
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	7808      	ldrb	r0, [r1, #0]
 800b240:	f7ff ff71 	bl	800b126 <__hexdig_fun>
 800b244:	1e43      	subs	r3, r0, #1
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b18      	cmp	r3, #24
 800b24a:	d82c      	bhi.n	800b2a6 <__gethex+0x156>
 800b24c:	f1a0 0210 	sub.w	r2, r0, #16
 800b250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b254:	f7ff ff67 	bl	800b126 <__hexdig_fun>
 800b258:	1e43      	subs	r3, r0, #1
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b18      	cmp	r3, #24
 800b25e:	d91d      	bls.n	800b29c <__gethex+0x14c>
 800b260:	f1b9 0f00 	cmp.w	r9, #0
 800b264:	d000      	beq.n	800b268 <__gethex+0x118>
 800b266:	4252      	negs	r2, r2
 800b268:	4415      	add	r5, r2
 800b26a:	f8cb 1000 	str.w	r1, [fp]
 800b26e:	b1e4      	cbz	r4, 800b2aa <__gethex+0x15a>
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	bf14      	ite	ne
 800b276:	2700      	movne	r7, #0
 800b278:	2706      	moveq	r7, #6
 800b27a:	4638      	mov	r0, r7
 800b27c:	b009      	add	sp, #36	; 0x24
 800b27e:	ecbd 8b02 	vpop	{d8}
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b286:	463e      	mov	r6, r7
 800b288:	4625      	mov	r5, r4
 800b28a:	2401      	movs	r4, #1
 800b28c:	e7ca      	b.n	800b224 <__gethex+0xd4>
 800b28e:	f04f 0900 	mov.w	r9, #0
 800b292:	1cb1      	adds	r1, r6, #2
 800b294:	e7d3      	b.n	800b23e <__gethex+0xee>
 800b296:	f04f 0901 	mov.w	r9, #1
 800b29a:	e7fa      	b.n	800b292 <__gethex+0x142>
 800b29c:	230a      	movs	r3, #10
 800b29e:	fb03 0202 	mla	r2, r3, r2, r0
 800b2a2:	3a10      	subs	r2, #16
 800b2a4:	e7d4      	b.n	800b250 <__gethex+0x100>
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	e7df      	b.n	800b26a <__gethex+0x11a>
 800b2aa:	1bf3      	subs	r3, r6, r7
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	2b07      	cmp	r3, #7
 800b2b2:	dc0b      	bgt.n	800b2cc <__gethex+0x17c>
 800b2b4:	ee18 0a10 	vmov	r0, s16
 800b2b8:	f000 fae6 	bl	800b888 <_Balloc>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	b940      	cbnz	r0, 800b2d2 <__gethex+0x182>
 800b2c0:	4b5d      	ldr	r3, [pc, #372]	; (800b438 <__gethex+0x2e8>)
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	21de      	movs	r1, #222	; 0xde
 800b2c6:	485d      	ldr	r0, [pc, #372]	; (800b43c <__gethex+0x2ec>)
 800b2c8:	f001 fbdc 	bl	800ca84 <__assert_func>
 800b2cc:	3101      	adds	r1, #1
 800b2ce:	105b      	asrs	r3, r3, #1
 800b2d0:	e7ee      	b.n	800b2b0 <__gethex+0x160>
 800b2d2:	f100 0914 	add.w	r9, r0, #20
 800b2d6:	f04f 0b00 	mov.w	fp, #0
 800b2da:	f1ca 0301 	rsb	r3, sl, #1
 800b2de:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2e2:	f8cd b000 	str.w	fp, [sp]
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	42b7      	cmp	r7, r6
 800b2ea:	d340      	bcc.n	800b36e <__gethex+0x21e>
 800b2ec:	9802      	ldr	r0, [sp, #8]
 800b2ee:	9b00      	ldr	r3, [sp, #0]
 800b2f0:	f840 3b04 	str.w	r3, [r0], #4
 800b2f4:	eba0 0009 	sub.w	r0, r0, r9
 800b2f8:	1080      	asrs	r0, r0, #2
 800b2fa:	0146      	lsls	r6, r0, #5
 800b2fc:	6120      	str	r0, [r4, #16]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 fbb4 	bl	800ba6c <__hi0bits>
 800b304:	1a30      	subs	r0, r6, r0
 800b306:	f8d8 6000 	ldr.w	r6, [r8]
 800b30a:	42b0      	cmp	r0, r6
 800b30c:	dd63      	ble.n	800b3d6 <__gethex+0x286>
 800b30e:	1b87      	subs	r7, r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	4620      	mov	r0, r4
 800b314:	f000 ff58 	bl	800c1c8 <__any_on>
 800b318:	4682      	mov	sl, r0
 800b31a:	b1a8      	cbz	r0, 800b348 <__gethex+0x1f8>
 800b31c:	1e7b      	subs	r3, r7, #1
 800b31e:	1159      	asrs	r1, r3, #5
 800b320:	f003 021f 	and.w	r2, r3, #31
 800b324:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b328:	f04f 0a01 	mov.w	sl, #1
 800b32c:	fa0a f202 	lsl.w	r2, sl, r2
 800b330:	420a      	tst	r2, r1
 800b332:	d009      	beq.n	800b348 <__gethex+0x1f8>
 800b334:	4553      	cmp	r3, sl
 800b336:	dd05      	ble.n	800b344 <__gethex+0x1f4>
 800b338:	1eb9      	subs	r1, r7, #2
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 ff44 	bl	800c1c8 <__any_on>
 800b340:	2800      	cmp	r0, #0
 800b342:	d145      	bne.n	800b3d0 <__gethex+0x280>
 800b344:	f04f 0a02 	mov.w	sl, #2
 800b348:	4639      	mov	r1, r7
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7ff fe99 	bl	800b082 <rshift>
 800b350:	443d      	add	r5, r7
 800b352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b356:	42ab      	cmp	r3, r5
 800b358:	da4c      	bge.n	800b3f4 <__gethex+0x2a4>
 800b35a:	ee18 0a10 	vmov	r0, s16
 800b35e:	4621      	mov	r1, r4
 800b360:	f000 fad2 	bl	800b908 <_Bfree>
 800b364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b366:	2300      	movs	r3, #0
 800b368:	6013      	str	r3, [r2, #0]
 800b36a:	27a3      	movs	r7, #163	; 0xa3
 800b36c:	e785      	b.n	800b27a <__gethex+0x12a>
 800b36e:	1e73      	subs	r3, r6, #1
 800b370:	9a05      	ldr	r2, [sp, #20]
 800b372:	9303      	str	r3, [sp, #12]
 800b374:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b378:	4293      	cmp	r3, r2
 800b37a:	d019      	beq.n	800b3b0 <__gethex+0x260>
 800b37c:	f1bb 0f20 	cmp.w	fp, #32
 800b380:	d107      	bne.n	800b392 <__gethex+0x242>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	9a00      	ldr	r2, [sp, #0]
 800b386:	f843 2b04 	str.w	r2, [r3], #4
 800b38a:	9302      	str	r3, [sp, #8]
 800b38c:	2300      	movs	r3, #0
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	469b      	mov	fp, r3
 800b392:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b396:	f7ff fec6 	bl	800b126 <__hexdig_fun>
 800b39a:	9b00      	ldr	r3, [sp, #0]
 800b39c:	f000 000f 	and.w	r0, r0, #15
 800b3a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b3a4:	4303      	orrs	r3, r0
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	f10b 0b04 	add.w	fp, fp, #4
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	e00d      	b.n	800b3cc <__gethex+0x27c>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	9a06      	ldr	r2, [sp, #24]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	42bb      	cmp	r3, r7
 800b3b8:	d3e0      	bcc.n	800b37c <__gethex+0x22c>
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	f001 fb2c 	bl	800ca1e <strncmp>
 800b3c6:	9b07      	ldr	r3, [sp, #28]
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d1d7      	bne.n	800b37c <__gethex+0x22c>
 800b3cc:	461e      	mov	r6, r3
 800b3ce:	e78b      	b.n	800b2e8 <__gethex+0x198>
 800b3d0:	f04f 0a03 	mov.w	sl, #3
 800b3d4:	e7b8      	b.n	800b348 <__gethex+0x1f8>
 800b3d6:	da0a      	bge.n	800b3ee <__gethex+0x29e>
 800b3d8:	1a37      	subs	r7, r6, r0
 800b3da:	4621      	mov	r1, r4
 800b3dc:	ee18 0a10 	vmov	r0, s16
 800b3e0:	463a      	mov	r2, r7
 800b3e2:	f000 fcad 	bl	800bd40 <__lshift>
 800b3e6:	1bed      	subs	r5, r5, r7
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	f100 0914 	add.w	r9, r0, #20
 800b3ee:	f04f 0a00 	mov.w	sl, #0
 800b3f2:	e7ae      	b.n	800b352 <__gethex+0x202>
 800b3f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b3f8:	42a8      	cmp	r0, r5
 800b3fa:	dd72      	ble.n	800b4e2 <__gethex+0x392>
 800b3fc:	1b45      	subs	r5, r0, r5
 800b3fe:	42ae      	cmp	r6, r5
 800b400:	dc36      	bgt.n	800b470 <__gethex+0x320>
 800b402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d02a      	beq.n	800b460 <__gethex+0x310>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d02c      	beq.n	800b468 <__gethex+0x318>
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d11c      	bne.n	800b44c <__gethex+0x2fc>
 800b412:	42ae      	cmp	r6, r5
 800b414:	d11a      	bne.n	800b44c <__gethex+0x2fc>
 800b416:	2e01      	cmp	r6, #1
 800b418:	d112      	bne.n	800b440 <__gethex+0x2f0>
 800b41a:	9a04      	ldr	r2, [sp, #16]
 800b41c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	2301      	movs	r3, #1
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	f8c9 3000 	str.w	r3, [r9]
 800b42a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b42c:	2762      	movs	r7, #98	; 0x62
 800b42e:	601c      	str	r4, [r3, #0]
 800b430:	e723      	b.n	800b27a <__gethex+0x12a>
 800b432:	bf00      	nop
 800b434:	0800d09c 	.word	0x0800d09c
 800b438:	0800cfc0 	.word	0x0800cfc0
 800b43c:	0800d034 	.word	0x0800d034
 800b440:	1e71      	subs	r1, r6, #1
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fec0 	bl	800c1c8 <__any_on>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d1e6      	bne.n	800b41a <__gethex+0x2ca>
 800b44c:	ee18 0a10 	vmov	r0, s16
 800b450:	4621      	mov	r1, r4
 800b452:	f000 fa59 	bl	800b908 <_Bfree>
 800b456:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b458:	2300      	movs	r3, #0
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	2750      	movs	r7, #80	; 0x50
 800b45e:	e70c      	b.n	800b27a <__gethex+0x12a>
 800b460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1f2      	bne.n	800b44c <__gethex+0x2fc>
 800b466:	e7d8      	b.n	800b41a <__gethex+0x2ca>
 800b468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1d5      	bne.n	800b41a <__gethex+0x2ca>
 800b46e:	e7ed      	b.n	800b44c <__gethex+0x2fc>
 800b470:	1e6f      	subs	r7, r5, #1
 800b472:	f1ba 0f00 	cmp.w	sl, #0
 800b476:	d131      	bne.n	800b4dc <__gethex+0x38c>
 800b478:	b127      	cbz	r7, 800b484 <__gethex+0x334>
 800b47a:	4639      	mov	r1, r7
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fea3 	bl	800c1c8 <__any_on>
 800b482:	4682      	mov	sl, r0
 800b484:	117b      	asrs	r3, r7, #5
 800b486:	2101      	movs	r1, #1
 800b488:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b48c:	f007 071f 	and.w	r7, r7, #31
 800b490:	fa01 f707 	lsl.w	r7, r1, r7
 800b494:	421f      	tst	r7, r3
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	bf18      	it	ne
 800b49c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b4a0:	1b76      	subs	r6, r6, r5
 800b4a2:	f7ff fdee 	bl	800b082 <rshift>
 800b4a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4aa:	2702      	movs	r7, #2
 800b4ac:	f1ba 0f00 	cmp.w	sl, #0
 800b4b0:	d048      	beq.n	800b544 <__gethex+0x3f4>
 800b4b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d015      	beq.n	800b4e6 <__gethex+0x396>
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d017      	beq.n	800b4ee <__gethex+0x39e>
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d109      	bne.n	800b4d6 <__gethex+0x386>
 800b4c2:	f01a 0f02 	tst.w	sl, #2
 800b4c6:	d006      	beq.n	800b4d6 <__gethex+0x386>
 800b4c8:	f8d9 0000 	ldr.w	r0, [r9]
 800b4cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800b4d0:	f01a 0f01 	tst.w	sl, #1
 800b4d4:	d10e      	bne.n	800b4f4 <__gethex+0x3a4>
 800b4d6:	f047 0710 	orr.w	r7, r7, #16
 800b4da:	e033      	b.n	800b544 <__gethex+0x3f4>
 800b4dc:	f04f 0a01 	mov.w	sl, #1
 800b4e0:	e7d0      	b.n	800b484 <__gethex+0x334>
 800b4e2:	2701      	movs	r7, #1
 800b4e4:	e7e2      	b.n	800b4ac <__gethex+0x35c>
 800b4e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4e8:	f1c3 0301 	rsb	r3, r3, #1
 800b4ec:	9315      	str	r3, [sp, #84]	; 0x54
 800b4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0f0      	beq.n	800b4d6 <__gethex+0x386>
 800b4f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4f8:	f104 0314 	add.w	r3, r4, #20
 800b4fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b500:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b504:	f04f 0c00 	mov.w	ip, #0
 800b508:	4618      	mov	r0, r3
 800b50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b512:	d01c      	beq.n	800b54e <__gethex+0x3fe>
 800b514:	3201      	adds	r2, #1
 800b516:	6002      	str	r2, [r0, #0]
 800b518:	2f02      	cmp	r7, #2
 800b51a:	f104 0314 	add.w	r3, r4, #20
 800b51e:	d13f      	bne.n	800b5a0 <__gethex+0x450>
 800b520:	f8d8 2000 	ldr.w	r2, [r8]
 800b524:	3a01      	subs	r2, #1
 800b526:	42b2      	cmp	r2, r6
 800b528:	d10a      	bne.n	800b540 <__gethex+0x3f0>
 800b52a:	1171      	asrs	r1, r6, #5
 800b52c:	2201      	movs	r2, #1
 800b52e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b532:	f006 061f 	and.w	r6, r6, #31
 800b536:	fa02 f606 	lsl.w	r6, r2, r6
 800b53a:	421e      	tst	r6, r3
 800b53c:	bf18      	it	ne
 800b53e:	4617      	movne	r7, r2
 800b540:	f047 0720 	orr.w	r7, r7, #32
 800b544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b546:	601c      	str	r4, [r3, #0]
 800b548:	9b04      	ldr	r3, [sp, #16]
 800b54a:	601d      	str	r5, [r3, #0]
 800b54c:	e695      	b.n	800b27a <__gethex+0x12a>
 800b54e:	4299      	cmp	r1, r3
 800b550:	f843 cc04 	str.w	ip, [r3, #-4]
 800b554:	d8d8      	bhi.n	800b508 <__gethex+0x3b8>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	459b      	cmp	fp, r3
 800b55a:	db19      	blt.n	800b590 <__gethex+0x440>
 800b55c:	6861      	ldr	r1, [r4, #4]
 800b55e:	ee18 0a10 	vmov	r0, s16
 800b562:	3101      	adds	r1, #1
 800b564:	f000 f990 	bl	800b888 <_Balloc>
 800b568:	4681      	mov	r9, r0
 800b56a:	b918      	cbnz	r0, 800b574 <__gethex+0x424>
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <__gethex+0x488>)
 800b56e:	4602      	mov	r2, r0
 800b570:	2184      	movs	r1, #132	; 0x84
 800b572:	e6a8      	b.n	800b2c6 <__gethex+0x176>
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	3202      	adds	r2, #2
 800b578:	f104 010c 	add.w	r1, r4, #12
 800b57c:	0092      	lsls	r2, r2, #2
 800b57e:	300c      	adds	r0, #12
 800b580:	f000 f974 	bl	800b86c <memcpy>
 800b584:	4621      	mov	r1, r4
 800b586:	ee18 0a10 	vmov	r0, s16
 800b58a:	f000 f9bd 	bl	800b908 <_Bfree>
 800b58e:	464c      	mov	r4, r9
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b598:	6122      	str	r2, [r4, #16]
 800b59a:	2201      	movs	r2, #1
 800b59c:	615a      	str	r2, [r3, #20]
 800b59e:	e7bb      	b.n	800b518 <__gethex+0x3c8>
 800b5a0:	6922      	ldr	r2, [r4, #16]
 800b5a2:	455a      	cmp	r2, fp
 800b5a4:	dd0b      	ble.n	800b5be <__gethex+0x46e>
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff fd6a 	bl	800b082 <rshift>
 800b5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5b2:	3501      	adds	r5, #1
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	f6ff aed0 	blt.w	800b35a <__gethex+0x20a>
 800b5ba:	2701      	movs	r7, #1
 800b5bc:	e7c0      	b.n	800b540 <__gethex+0x3f0>
 800b5be:	f016 061f 	ands.w	r6, r6, #31
 800b5c2:	d0fa      	beq.n	800b5ba <__gethex+0x46a>
 800b5c4:	4453      	add	r3, sl
 800b5c6:	f1c6 0620 	rsb	r6, r6, #32
 800b5ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b5ce:	f000 fa4d 	bl	800ba6c <__hi0bits>
 800b5d2:	42b0      	cmp	r0, r6
 800b5d4:	dbe7      	blt.n	800b5a6 <__gethex+0x456>
 800b5d6:	e7f0      	b.n	800b5ba <__gethex+0x46a>
 800b5d8:	0800cfc0 	.word	0x0800cfc0

0800b5dc <L_shift>:
 800b5dc:	f1c2 0208 	rsb	r2, r2, #8
 800b5e0:	0092      	lsls	r2, r2, #2
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	f1c2 0620 	rsb	r6, r2, #32
 800b5e8:	6843      	ldr	r3, [r0, #4]
 800b5ea:	6804      	ldr	r4, [r0, #0]
 800b5ec:	fa03 f506 	lsl.w	r5, r3, r6
 800b5f0:	432c      	orrs	r4, r5
 800b5f2:	40d3      	lsrs	r3, r2
 800b5f4:	6004      	str	r4, [r0, #0]
 800b5f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5fa:	4288      	cmp	r0, r1
 800b5fc:	d3f4      	bcc.n	800b5e8 <L_shift+0xc>
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <__match>:
 800b600:	b530      	push	{r4, r5, lr}
 800b602:	6803      	ldr	r3, [r0, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b60a:	b914      	cbnz	r4, 800b612 <__match+0x12>
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	2001      	movs	r0, #1
 800b610:	bd30      	pop	{r4, r5, pc}
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b61a:	2d19      	cmp	r5, #25
 800b61c:	bf98      	it	ls
 800b61e:	3220      	addls	r2, #32
 800b620:	42a2      	cmp	r2, r4
 800b622:	d0f0      	beq.n	800b606 <__match+0x6>
 800b624:	2000      	movs	r0, #0
 800b626:	e7f3      	b.n	800b610 <__match+0x10>

0800b628 <__hexnan>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	680b      	ldr	r3, [r1, #0]
 800b62e:	115e      	asrs	r6, r3, #5
 800b630:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b634:	f013 031f 	ands.w	r3, r3, #31
 800b638:	b087      	sub	sp, #28
 800b63a:	bf18      	it	ne
 800b63c:	3604      	addne	r6, #4
 800b63e:	2500      	movs	r5, #0
 800b640:	1f37      	subs	r7, r6, #4
 800b642:	4690      	mov	r8, r2
 800b644:	6802      	ldr	r2, [r0, #0]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	4682      	mov	sl, r0
 800b64a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b64e:	46b9      	mov	r9, r7
 800b650:	463c      	mov	r4, r7
 800b652:	9502      	str	r5, [sp, #8]
 800b654:	46ab      	mov	fp, r5
 800b656:	7851      	ldrb	r1, [r2, #1]
 800b658:	1c53      	adds	r3, r2, #1
 800b65a:	9303      	str	r3, [sp, #12]
 800b65c:	b341      	cbz	r1, 800b6b0 <__hexnan+0x88>
 800b65e:	4608      	mov	r0, r1
 800b660:	9205      	str	r2, [sp, #20]
 800b662:	9104      	str	r1, [sp, #16]
 800b664:	f7ff fd5f 	bl	800b126 <__hexdig_fun>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d14f      	bne.n	800b70c <__hexnan+0xe4>
 800b66c:	9904      	ldr	r1, [sp, #16]
 800b66e:	9a05      	ldr	r2, [sp, #20]
 800b670:	2920      	cmp	r1, #32
 800b672:	d818      	bhi.n	800b6a6 <__hexnan+0x7e>
 800b674:	9b02      	ldr	r3, [sp, #8]
 800b676:	459b      	cmp	fp, r3
 800b678:	dd13      	ble.n	800b6a2 <__hexnan+0x7a>
 800b67a:	454c      	cmp	r4, r9
 800b67c:	d206      	bcs.n	800b68c <__hexnan+0x64>
 800b67e:	2d07      	cmp	r5, #7
 800b680:	dc04      	bgt.n	800b68c <__hexnan+0x64>
 800b682:	462a      	mov	r2, r5
 800b684:	4649      	mov	r1, r9
 800b686:	4620      	mov	r0, r4
 800b688:	f7ff ffa8 	bl	800b5dc <L_shift>
 800b68c:	4544      	cmp	r4, r8
 800b68e:	d950      	bls.n	800b732 <__hexnan+0x10a>
 800b690:	2300      	movs	r3, #0
 800b692:	f1a4 0904 	sub.w	r9, r4, #4
 800b696:	f844 3c04 	str.w	r3, [r4, #-4]
 800b69a:	f8cd b008 	str.w	fp, [sp, #8]
 800b69e:	464c      	mov	r4, r9
 800b6a0:	461d      	mov	r5, r3
 800b6a2:	9a03      	ldr	r2, [sp, #12]
 800b6a4:	e7d7      	b.n	800b656 <__hexnan+0x2e>
 800b6a6:	2929      	cmp	r1, #41	; 0x29
 800b6a8:	d156      	bne.n	800b758 <__hexnan+0x130>
 800b6aa:	3202      	adds	r2, #2
 800b6ac:	f8ca 2000 	str.w	r2, [sl]
 800b6b0:	f1bb 0f00 	cmp.w	fp, #0
 800b6b4:	d050      	beq.n	800b758 <__hexnan+0x130>
 800b6b6:	454c      	cmp	r4, r9
 800b6b8:	d206      	bcs.n	800b6c8 <__hexnan+0xa0>
 800b6ba:	2d07      	cmp	r5, #7
 800b6bc:	dc04      	bgt.n	800b6c8 <__hexnan+0xa0>
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7ff ff8a 	bl	800b5dc <L_shift>
 800b6c8:	4544      	cmp	r4, r8
 800b6ca:	d934      	bls.n	800b736 <__hexnan+0x10e>
 800b6cc:	f1a8 0204 	sub.w	r2, r8, #4
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b6da:	429f      	cmp	r7, r3
 800b6dc:	d2f9      	bcs.n	800b6d2 <__hexnan+0xaa>
 800b6de:	1b3b      	subs	r3, r7, r4
 800b6e0:	f023 0303 	bic.w	r3, r3, #3
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	3401      	adds	r4, #1
 800b6e8:	3e03      	subs	r6, #3
 800b6ea:	42b4      	cmp	r4, r6
 800b6ec:	bf88      	it	hi
 800b6ee:	2304      	movhi	r3, #4
 800b6f0:	4443      	add	r3, r8
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f843 2b04 	str.w	r2, [r3], #4
 800b6f8:	429f      	cmp	r7, r3
 800b6fa:	d2fb      	bcs.n	800b6f4 <__hexnan+0xcc>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	b91b      	cbnz	r3, 800b708 <__hexnan+0xe0>
 800b700:	4547      	cmp	r7, r8
 800b702:	d127      	bne.n	800b754 <__hexnan+0x12c>
 800b704:	2301      	movs	r3, #1
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	2005      	movs	r0, #5
 800b70a:	e026      	b.n	800b75a <__hexnan+0x132>
 800b70c:	3501      	adds	r5, #1
 800b70e:	2d08      	cmp	r5, #8
 800b710:	f10b 0b01 	add.w	fp, fp, #1
 800b714:	dd06      	ble.n	800b724 <__hexnan+0xfc>
 800b716:	4544      	cmp	r4, r8
 800b718:	d9c3      	bls.n	800b6a2 <__hexnan+0x7a>
 800b71a:	2300      	movs	r3, #0
 800b71c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b720:	2501      	movs	r5, #1
 800b722:	3c04      	subs	r4, #4
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	f000 000f 	and.w	r0, r0, #15
 800b72a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b72e:	6022      	str	r2, [r4, #0]
 800b730:	e7b7      	b.n	800b6a2 <__hexnan+0x7a>
 800b732:	2508      	movs	r5, #8
 800b734:	e7b5      	b.n	800b6a2 <__hexnan+0x7a>
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0df      	beq.n	800b6fc <__hexnan+0xd4>
 800b73c:	f04f 32ff 	mov.w	r2, #4294967295
 800b740:	f1c3 0320 	rsb	r3, r3, #32
 800b744:	fa22 f303 	lsr.w	r3, r2, r3
 800b748:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b74c:	401a      	ands	r2, r3
 800b74e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b752:	e7d3      	b.n	800b6fc <__hexnan+0xd4>
 800b754:	3f04      	subs	r7, #4
 800b756:	e7d1      	b.n	800b6fc <__hexnan+0xd4>
 800b758:	2004      	movs	r0, #4
 800b75a:	b007      	add	sp, #28
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b760 <_localeconv_r>:
 800b760:	4800      	ldr	r0, [pc, #0]	; (800b764 <_localeconv_r+0x4>)
 800b762:	4770      	bx	lr
 800b764:	20000164 	.word	0x20000164

0800b768 <__retarget_lock_init_recursive>:
 800b768:	4770      	bx	lr

0800b76a <__retarget_lock_acquire_recursive>:
 800b76a:	4770      	bx	lr

0800b76c <__retarget_lock_release_recursive>:
 800b76c:	4770      	bx	lr

0800b76e <__swhatbuf_r>:
 800b76e:	b570      	push	{r4, r5, r6, lr}
 800b770:	460e      	mov	r6, r1
 800b772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b776:	2900      	cmp	r1, #0
 800b778:	b096      	sub	sp, #88	; 0x58
 800b77a:	4614      	mov	r4, r2
 800b77c:	461d      	mov	r5, r3
 800b77e:	da08      	bge.n	800b792 <__swhatbuf_r+0x24>
 800b780:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	602a      	str	r2, [r5, #0]
 800b788:	061a      	lsls	r2, r3, #24
 800b78a:	d410      	bmi.n	800b7ae <__swhatbuf_r+0x40>
 800b78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b790:	e00e      	b.n	800b7b0 <__swhatbuf_r+0x42>
 800b792:	466a      	mov	r2, sp
 800b794:	f001 f9b6 	bl	800cb04 <_fstat_r>
 800b798:	2800      	cmp	r0, #0
 800b79a:	dbf1      	blt.n	800b780 <__swhatbuf_r+0x12>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7a6:	425a      	negs	r2, r3
 800b7a8:	415a      	adcs	r2, r3
 800b7aa:	602a      	str	r2, [r5, #0]
 800b7ac:	e7ee      	b.n	800b78c <__swhatbuf_r+0x1e>
 800b7ae:	2340      	movs	r3, #64	; 0x40
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	b016      	add	sp, #88	; 0x58
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}

0800b7b8 <__smakebuf_r>:
 800b7b8:	898b      	ldrh	r3, [r1, #12]
 800b7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7bc:	079d      	lsls	r5, r3, #30
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	d507      	bpl.n	800b7d4 <__smakebuf_r+0x1c>
 800b7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	6163      	str	r3, [r4, #20]
 800b7d0:	b002      	add	sp, #8
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	ab01      	add	r3, sp, #4
 800b7d6:	466a      	mov	r2, sp
 800b7d8:	f7ff ffc9 	bl	800b76e <__swhatbuf_r>
 800b7dc:	9900      	ldr	r1, [sp, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 fd95 	bl	800c310 <_malloc_r>
 800b7e6:	b948      	cbnz	r0, 800b7fc <__smakebuf_r+0x44>
 800b7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ec:	059a      	lsls	r2, r3, #22
 800b7ee:	d4ef      	bmi.n	800b7d0 <__smakebuf_r+0x18>
 800b7f0:	f023 0303 	bic.w	r3, r3, #3
 800b7f4:	f043 0302 	orr.w	r3, r3, #2
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e7e3      	b.n	800b7c4 <__smakebuf_r+0xc>
 800b7fc:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <__smakebuf_r+0x7c>)
 800b7fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	6163      	str	r3, [r4, #20]
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	6120      	str	r0, [r4, #16]
 800b812:	b15b      	cbz	r3, 800b82c <__smakebuf_r+0x74>
 800b814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b818:	4630      	mov	r0, r6
 800b81a:	f001 f985 	bl	800cb28 <_isatty_r>
 800b81e:	b128      	cbz	r0, 800b82c <__smakebuf_r+0x74>
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	81a3      	strh	r3, [r4, #12]
 800b82c:	89a0      	ldrh	r0, [r4, #12]
 800b82e:	4305      	orrs	r5, r0
 800b830:	81a5      	strh	r5, [r4, #12]
 800b832:	e7cd      	b.n	800b7d0 <__smakebuf_r+0x18>
 800b834:	0800aee1 	.word	0x0800aee1

0800b838 <malloc>:
 800b838:	4b02      	ldr	r3, [pc, #8]	; (800b844 <malloc+0xc>)
 800b83a:	4601      	mov	r1, r0
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	f000 bd67 	b.w	800c310 <_malloc_r>
 800b842:	bf00      	nop
 800b844:	2000000c 	.word	0x2000000c

0800b848 <__ascii_mbtowc>:
 800b848:	b082      	sub	sp, #8
 800b84a:	b901      	cbnz	r1, 800b84e <__ascii_mbtowc+0x6>
 800b84c:	a901      	add	r1, sp, #4
 800b84e:	b142      	cbz	r2, 800b862 <__ascii_mbtowc+0x1a>
 800b850:	b14b      	cbz	r3, 800b866 <__ascii_mbtowc+0x1e>
 800b852:	7813      	ldrb	r3, [r2, #0]
 800b854:	600b      	str	r3, [r1, #0]
 800b856:	7812      	ldrb	r2, [r2, #0]
 800b858:	1e10      	subs	r0, r2, #0
 800b85a:	bf18      	it	ne
 800b85c:	2001      	movne	r0, #1
 800b85e:	b002      	add	sp, #8
 800b860:	4770      	bx	lr
 800b862:	4610      	mov	r0, r2
 800b864:	e7fb      	b.n	800b85e <__ascii_mbtowc+0x16>
 800b866:	f06f 0001 	mvn.w	r0, #1
 800b86a:	e7f8      	b.n	800b85e <__ascii_mbtowc+0x16>

0800b86c <memcpy>:
 800b86c:	440a      	add	r2, r1
 800b86e:	4291      	cmp	r1, r2
 800b870:	f100 33ff 	add.w	r3, r0, #4294967295
 800b874:	d100      	bne.n	800b878 <memcpy+0xc>
 800b876:	4770      	bx	lr
 800b878:	b510      	push	{r4, lr}
 800b87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b882:	4291      	cmp	r1, r2
 800b884:	d1f9      	bne.n	800b87a <memcpy+0xe>
 800b886:	bd10      	pop	{r4, pc}

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7ff ffd0 	bl	800b838 <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	6260      	str	r0, [r4, #36]	; 0x24
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	; (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	; (800b904 <_Balloc+0x7c>)
 800b8a2:	2166      	movs	r1, #102	; 0x66
 800b8a4:	f001 f8ee 	bl	800ca84 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fc9d 	bl	800c20a <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	; 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fc94 	bl	800c20a <_calloc_r>
 800b8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0800cf4e 	.word	0x0800cf4e
 800b904:	0800d0b0 	.word	0x0800d0b0

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7ff ff90 	bl	800b838 <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	6268      	str	r0, [r5, #36]	; 0x24
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	; (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	; (800b948 <_Bfree+0x40>)
 800b922:	218a      	movs	r1, #138	; 0x8a
 800b924:	f001 f8ae 	bl	800ca84 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0800cf4e 	.word	0x0800cf4e
 800b948:	0800d0b0 	.word	0x0800d0b0

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	; (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	; (800b9d4 <__multadd+0x88>)
 800b9a0:	21b5      	movs	r1, #181	; 0xb5
 800b9a2:	f001 f86f 	bl	800ca84 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f7ff ff5b 	bl	800b86c <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0800cfc0 	.word	0x0800cfc0
 800b9d4:	0800d0b0 	.word	0x0800d0b0

0800b9d8 <__s2b>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	4615      	mov	r5, r2
 800b9e0:	461f      	mov	r7, r3
 800b9e2:	2209      	movs	r2, #9
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db09      	blt.n	800ba08 <__s2b+0x30>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff ff47 	bl	800b888 <_Balloc>
 800b9fa:	b940      	cbnz	r0, 800ba0e <__s2b+0x36>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	4b19      	ldr	r3, [pc, #100]	; (800ba64 <__s2b+0x8c>)
 800ba00:	4819      	ldr	r0, [pc, #100]	; (800ba68 <__s2b+0x90>)
 800ba02:	21ce      	movs	r1, #206	; 0xce
 800ba04:	f001 f83e 	bl	800ca84 <__assert_func>
 800ba08:	0052      	lsls	r2, r2, #1
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	e7f0      	b.n	800b9f0 <__s2b+0x18>
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	6143      	str	r3, [r0, #20]
 800ba12:	2d09      	cmp	r5, #9
 800ba14:	f04f 0301 	mov.w	r3, #1
 800ba18:	6103      	str	r3, [r0, #16]
 800ba1a:	dd16      	ble.n	800ba4a <__s2b+0x72>
 800ba1c:	f104 0909 	add.w	r9, r4, #9
 800ba20:	46c8      	mov	r8, r9
 800ba22:	442c      	add	r4, r5
 800ba24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	3b30      	subs	r3, #48	; 0x30
 800ba2c:	220a      	movs	r2, #10
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ff8c 	bl	800b94c <__multadd>
 800ba34:	45a0      	cmp	r8, r4
 800ba36:	d1f5      	bne.n	800ba24 <__s2b+0x4c>
 800ba38:	f1a5 0408 	sub.w	r4, r5, #8
 800ba3c:	444c      	add	r4, r9
 800ba3e:	1b2d      	subs	r5, r5, r4
 800ba40:	1963      	adds	r3, r4, r5
 800ba42:	42bb      	cmp	r3, r7
 800ba44:	db04      	blt.n	800ba50 <__s2b+0x78>
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	340a      	adds	r4, #10
 800ba4c:	2509      	movs	r5, #9
 800ba4e:	e7f6      	b.n	800ba3e <__s2b+0x66>
 800ba50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba54:	4601      	mov	r1, r0
 800ba56:	3b30      	subs	r3, #48	; 0x30
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff76 	bl	800b94c <__multadd>
 800ba60:	e7ee      	b.n	800ba40 <__s2b+0x68>
 800ba62:	bf00      	nop
 800ba64:	0800cfc0 	.word	0x0800cfc0
 800ba68:	0800d0b0 	.word	0x0800d0b0

0800ba6c <__hi0bits>:
 800ba6c:	0c03      	lsrs	r3, r0, #16
 800ba6e:	041b      	lsls	r3, r3, #16
 800ba70:	b9d3      	cbnz	r3, 800baa8 <__hi0bits+0x3c>
 800ba72:	0400      	lsls	r0, r0, #16
 800ba74:	2310      	movs	r3, #16
 800ba76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba7a:	bf04      	itt	eq
 800ba7c:	0200      	lsleq	r0, r0, #8
 800ba7e:	3308      	addeq	r3, #8
 800ba80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba84:	bf04      	itt	eq
 800ba86:	0100      	lsleq	r0, r0, #4
 800ba88:	3304      	addeq	r3, #4
 800ba8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba8e:	bf04      	itt	eq
 800ba90:	0080      	lsleq	r0, r0, #2
 800ba92:	3302      	addeq	r3, #2
 800ba94:	2800      	cmp	r0, #0
 800ba96:	db05      	blt.n	800baa4 <__hi0bits+0x38>
 800ba98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba9c:	f103 0301 	add.w	r3, r3, #1
 800baa0:	bf08      	it	eq
 800baa2:	2320      	moveq	r3, #32
 800baa4:	4618      	mov	r0, r3
 800baa6:	4770      	bx	lr
 800baa8:	2300      	movs	r3, #0
 800baaa:	e7e4      	b.n	800ba76 <__hi0bits+0xa>

0800baac <__lo0bits>:
 800baac:	6803      	ldr	r3, [r0, #0]
 800baae:	f013 0207 	ands.w	r2, r3, #7
 800bab2:	4601      	mov	r1, r0
 800bab4:	d00b      	beq.n	800bace <__lo0bits+0x22>
 800bab6:	07da      	lsls	r2, r3, #31
 800bab8:	d423      	bmi.n	800bb02 <__lo0bits+0x56>
 800baba:	0798      	lsls	r0, r3, #30
 800babc:	bf49      	itett	mi
 800babe:	085b      	lsrmi	r3, r3, #1
 800bac0:	089b      	lsrpl	r3, r3, #2
 800bac2:	2001      	movmi	r0, #1
 800bac4:	600b      	strmi	r3, [r1, #0]
 800bac6:	bf5c      	itt	pl
 800bac8:	600b      	strpl	r3, [r1, #0]
 800baca:	2002      	movpl	r0, #2
 800bacc:	4770      	bx	lr
 800bace:	b298      	uxth	r0, r3
 800bad0:	b9a8      	cbnz	r0, 800bafe <__lo0bits+0x52>
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	2010      	movs	r0, #16
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	b90a      	cbnz	r2, 800bade <__lo0bits+0x32>
 800bada:	3008      	adds	r0, #8
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	071a      	lsls	r2, r3, #28
 800bae0:	bf04      	itt	eq
 800bae2:	091b      	lsreq	r3, r3, #4
 800bae4:	3004      	addeq	r0, #4
 800bae6:	079a      	lsls	r2, r3, #30
 800bae8:	bf04      	itt	eq
 800baea:	089b      	lsreq	r3, r3, #2
 800baec:	3002      	addeq	r0, #2
 800baee:	07da      	lsls	r2, r3, #31
 800baf0:	d403      	bmi.n	800bafa <__lo0bits+0x4e>
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	f100 0001 	add.w	r0, r0, #1
 800baf8:	d005      	beq.n	800bb06 <__lo0bits+0x5a>
 800bafa:	600b      	str	r3, [r1, #0]
 800bafc:	4770      	bx	lr
 800bafe:	4610      	mov	r0, r2
 800bb00:	e7e9      	b.n	800bad6 <__lo0bits+0x2a>
 800bb02:	2000      	movs	r0, #0
 800bb04:	4770      	bx	lr
 800bb06:	2020      	movs	r0, #32
 800bb08:	4770      	bx	lr
	...

0800bb0c <__i2b>:
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	460c      	mov	r4, r1
 800bb10:	2101      	movs	r1, #1
 800bb12:	f7ff feb9 	bl	800b888 <_Balloc>
 800bb16:	4602      	mov	r2, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__i2b+0x1a>
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <__i2b+0x24>)
 800bb1c:	4805      	ldr	r0, [pc, #20]	; (800bb34 <__i2b+0x28>)
 800bb1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb22:	f000 ffaf 	bl	800ca84 <__assert_func>
 800bb26:	2301      	movs	r3, #1
 800bb28:	6144      	str	r4, [r0, #20]
 800bb2a:	6103      	str	r3, [r0, #16]
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop
 800bb30:	0800cfc0 	.word	0x0800cfc0
 800bb34:	0800d0b0 	.word	0x0800d0b0

0800bb38 <__multiply>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4691      	mov	r9, r2
 800bb3e:	690a      	ldr	r2, [r1, #16]
 800bb40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	bfb8      	it	lt
 800bb48:	460b      	movlt	r3, r1
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	bfbc      	itt	lt
 800bb4e:	464c      	movlt	r4, r9
 800bb50:	4699      	movlt	r9, r3
 800bb52:	6927      	ldr	r7, [r4, #16]
 800bb54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	6861      	ldr	r1, [r4, #4]
 800bb5c:	eb07 060a 	add.w	r6, r7, sl
 800bb60:	42b3      	cmp	r3, r6
 800bb62:	b085      	sub	sp, #20
 800bb64:	bfb8      	it	lt
 800bb66:	3101      	addlt	r1, #1
 800bb68:	f7ff fe8e 	bl	800b888 <_Balloc>
 800bb6c:	b930      	cbnz	r0, 800bb7c <__multiply+0x44>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b44      	ldr	r3, [pc, #272]	; (800bc84 <__multiply+0x14c>)
 800bb72:	4845      	ldr	r0, [pc, #276]	; (800bc88 <__multiply+0x150>)
 800bb74:	f240 115d 	movw	r1, #349	; 0x15d
 800bb78:	f000 ff84 	bl	800ca84 <__assert_func>
 800bb7c:	f100 0514 	add.w	r5, r0, #20
 800bb80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb84:	462b      	mov	r3, r5
 800bb86:	2200      	movs	r2, #0
 800bb88:	4543      	cmp	r3, r8
 800bb8a:	d321      	bcc.n	800bbd0 <__multiply+0x98>
 800bb8c:	f104 0314 	add.w	r3, r4, #20
 800bb90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb94:	f109 0314 	add.w	r3, r9, #20
 800bb98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb9c:	9202      	str	r2, [sp, #8]
 800bb9e:	1b3a      	subs	r2, r7, r4
 800bba0:	3a15      	subs	r2, #21
 800bba2:	f022 0203 	bic.w	r2, r2, #3
 800bba6:	3204      	adds	r2, #4
 800bba8:	f104 0115 	add.w	r1, r4, #21
 800bbac:	428f      	cmp	r7, r1
 800bbae:	bf38      	it	cc
 800bbb0:	2204      	movcc	r2, #4
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	9a02      	ldr	r2, [sp, #8]
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d80c      	bhi.n	800bbd6 <__multiply+0x9e>
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	dd03      	ble.n	800bbc8 <__multiply+0x90>
 800bbc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d05a      	beq.n	800bc7e <__multiply+0x146>
 800bbc8:	6106      	str	r6, [r0, #16]
 800bbca:	b005      	add	sp, #20
 800bbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd0:	f843 2b04 	str.w	r2, [r3], #4
 800bbd4:	e7d8      	b.n	800bb88 <__multiply+0x50>
 800bbd6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbda:	f1ba 0f00 	cmp.w	sl, #0
 800bbde:	d024      	beq.n	800bc2a <__multiply+0xf2>
 800bbe0:	f104 0e14 	add.w	lr, r4, #20
 800bbe4:	46a9      	mov	r9, r5
 800bbe6:	f04f 0c00 	mov.w	ip, #0
 800bbea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbee:	f8d9 1000 	ldr.w	r1, [r9]
 800bbf2:	fa1f fb82 	uxth.w	fp, r2
 800bbf6:	b289      	uxth	r1, r1
 800bbf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc00:	f8d9 2000 	ldr.w	r2, [r9]
 800bc04:	4461      	add	r1, ip
 800bc06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc12:	b289      	uxth	r1, r1
 800bc14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc18:	4577      	cmp	r7, lr
 800bc1a:	f849 1b04 	str.w	r1, [r9], #4
 800bc1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc22:	d8e2      	bhi.n	800bbea <__multiply+0xb2>
 800bc24:	9a01      	ldr	r2, [sp, #4]
 800bc26:	f845 c002 	str.w	ip, [r5, r2]
 800bc2a:	9a03      	ldr	r2, [sp, #12]
 800bc2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc30:	3304      	adds	r3, #4
 800bc32:	f1b9 0f00 	cmp.w	r9, #0
 800bc36:	d020      	beq.n	800bc7a <__multiply+0x142>
 800bc38:	6829      	ldr	r1, [r5, #0]
 800bc3a:	f104 0c14 	add.w	ip, r4, #20
 800bc3e:	46ae      	mov	lr, r5
 800bc40:	f04f 0a00 	mov.w	sl, #0
 800bc44:	f8bc b000 	ldrh.w	fp, [ip]
 800bc48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc4c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc50:	4492      	add	sl, r2
 800bc52:	b289      	uxth	r1, r1
 800bc54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc58:	f84e 1b04 	str.w	r1, [lr], #4
 800bc5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc60:	f8be 1000 	ldrh.w	r1, [lr]
 800bc64:	0c12      	lsrs	r2, r2, #16
 800bc66:	fb09 1102 	mla	r1, r9, r2, r1
 800bc6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc6e:	4567      	cmp	r7, ip
 800bc70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc74:	d8e6      	bhi.n	800bc44 <__multiply+0x10c>
 800bc76:	9a01      	ldr	r2, [sp, #4]
 800bc78:	50a9      	str	r1, [r5, r2]
 800bc7a:	3504      	adds	r5, #4
 800bc7c:	e79a      	b.n	800bbb4 <__multiply+0x7c>
 800bc7e:	3e01      	subs	r6, #1
 800bc80:	e79c      	b.n	800bbbc <__multiply+0x84>
 800bc82:	bf00      	nop
 800bc84:	0800cfc0 	.word	0x0800cfc0
 800bc88:	0800d0b0 	.word	0x0800d0b0

0800bc8c <__pow5mult>:
 800bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	4615      	mov	r5, r2
 800bc92:	f012 0203 	ands.w	r2, r2, #3
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	d007      	beq.n	800bcac <__pow5mult+0x20>
 800bc9c:	4c25      	ldr	r4, [pc, #148]	; (800bd34 <__pow5mult+0xa8>)
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	2300      	movs	r3, #0
 800bca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bca6:	f7ff fe51 	bl	800b94c <__multadd>
 800bcaa:	4607      	mov	r7, r0
 800bcac:	10ad      	asrs	r5, r5, #2
 800bcae:	d03d      	beq.n	800bd2c <__pow5mult+0xa0>
 800bcb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcb2:	b97c      	cbnz	r4, 800bcd4 <__pow5mult+0x48>
 800bcb4:	2010      	movs	r0, #16
 800bcb6:	f7ff fdbf 	bl	800b838 <malloc>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	6270      	str	r0, [r6, #36]	; 0x24
 800bcbe:	b928      	cbnz	r0, 800bccc <__pow5mult+0x40>
 800bcc0:	4b1d      	ldr	r3, [pc, #116]	; (800bd38 <__pow5mult+0xac>)
 800bcc2:	481e      	ldr	r0, [pc, #120]	; (800bd3c <__pow5mult+0xb0>)
 800bcc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcc8:	f000 fedc 	bl	800ca84 <__assert_func>
 800bccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcd0:	6004      	str	r4, [r0, #0]
 800bcd2:	60c4      	str	r4, [r0, #12]
 800bcd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcdc:	b94c      	cbnz	r4, 800bcf2 <__pow5mult+0x66>
 800bcde:	f240 2171 	movw	r1, #625	; 0x271
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff12 	bl	800bb0c <__i2b>
 800bce8:	2300      	movs	r3, #0
 800bcea:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcee:	4604      	mov	r4, r0
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	f04f 0900 	mov.w	r9, #0
 800bcf6:	07eb      	lsls	r3, r5, #31
 800bcf8:	d50a      	bpl.n	800bd10 <__pow5mult+0x84>
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ff1a 	bl	800bb38 <__multiply>
 800bd04:	4639      	mov	r1, r7
 800bd06:	4680      	mov	r8, r0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fdfd 	bl	800b908 <_Bfree>
 800bd0e:	4647      	mov	r7, r8
 800bd10:	106d      	asrs	r5, r5, #1
 800bd12:	d00b      	beq.n	800bd2c <__pow5mult+0xa0>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	b938      	cbnz	r0, 800bd28 <__pow5mult+0x9c>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff ff0b 	bl	800bb38 <__multiply>
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	f8c0 9000 	str.w	r9, [r0]
 800bd28:	4604      	mov	r4, r0
 800bd2a:	e7e4      	b.n	800bcf6 <__pow5mult+0x6a>
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd32:	bf00      	nop
 800bd34:	0800d200 	.word	0x0800d200
 800bd38:	0800cf4e 	.word	0x0800cf4e
 800bd3c:	0800d0b0 	.word	0x0800d0b0

0800bd40 <__lshift>:
 800bd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	460c      	mov	r4, r1
 800bd46:	6849      	ldr	r1, [r1, #4]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd4e:	68a3      	ldr	r3, [r4, #8]
 800bd50:	4607      	mov	r7, r0
 800bd52:	4691      	mov	r9, r2
 800bd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd58:	f108 0601 	add.w	r6, r8, #1
 800bd5c:	42b3      	cmp	r3, r6
 800bd5e:	db0b      	blt.n	800bd78 <__lshift+0x38>
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff fd91 	bl	800b888 <_Balloc>
 800bd66:	4605      	mov	r5, r0
 800bd68:	b948      	cbnz	r0, 800bd7e <__lshift+0x3e>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	4b2a      	ldr	r3, [pc, #168]	; (800be18 <__lshift+0xd8>)
 800bd6e:	482b      	ldr	r0, [pc, #172]	; (800be1c <__lshift+0xdc>)
 800bd70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd74:	f000 fe86 	bl	800ca84 <__assert_func>
 800bd78:	3101      	adds	r1, #1
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	e7ee      	b.n	800bd5c <__lshift+0x1c>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f100 0114 	add.w	r1, r0, #20
 800bd84:	f100 0210 	add.w	r2, r0, #16
 800bd88:	4618      	mov	r0, r3
 800bd8a:	4553      	cmp	r3, sl
 800bd8c:	db37      	blt.n	800bdfe <__lshift+0xbe>
 800bd8e:	6920      	ldr	r0, [r4, #16]
 800bd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd94:	f104 0314 	add.w	r3, r4, #20
 800bd98:	f019 091f 	ands.w	r9, r9, #31
 800bd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bda0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bda4:	d02f      	beq.n	800be06 <__lshift+0xc6>
 800bda6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdaa:	468a      	mov	sl, r1
 800bdac:	f04f 0c00 	mov.w	ip, #0
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	fa02 f209 	lsl.w	r2, r2, r9
 800bdb6:	ea42 020c 	orr.w	r2, r2, ip
 800bdba:	f84a 2b04 	str.w	r2, [sl], #4
 800bdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc2:	4298      	cmp	r0, r3
 800bdc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bdc8:	d8f2      	bhi.n	800bdb0 <__lshift+0x70>
 800bdca:	1b03      	subs	r3, r0, r4
 800bdcc:	3b15      	subs	r3, #21
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	f104 0215 	add.w	r2, r4, #21
 800bdd8:	4290      	cmp	r0, r2
 800bdda:	bf38      	it	cc
 800bddc:	2304      	movcc	r3, #4
 800bdde:	f841 c003 	str.w	ip, [r1, r3]
 800bde2:	f1bc 0f00 	cmp.w	ip, #0
 800bde6:	d001      	beq.n	800bdec <__lshift+0xac>
 800bde8:	f108 0602 	add.w	r6, r8, #2
 800bdec:	3e01      	subs	r6, #1
 800bdee:	4638      	mov	r0, r7
 800bdf0:	612e      	str	r6, [r5, #16]
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	f7ff fd88 	bl	800b908 <_Bfree>
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800be02:	3301      	adds	r3, #1
 800be04:	e7c1      	b.n	800bd8a <__lshift+0x4a>
 800be06:	3904      	subs	r1, #4
 800be08:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be10:	4298      	cmp	r0, r3
 800be12:	d8f9      	bhi.n	800be08 <__lshift+0xc8>
 800be14:	e7ea      	b.n	800bdec <__lshift+0xac>
 800be16:	bf00      	nop
 800be18:	0800cfc0 	.word	0x0800cfc0
 800be1c:	0800d0b0 	.word	0x0800d0b0

0800be20 <__mcmp>:
 800be20:	b530      	push	{r4, r5, lr}
 800be22:	6902      	ldr	r2, [r0, #16]
 800be24:	690c      	ldr	r4, [r1, #16]
 800be26:	1b12      	subs	r2, r2, r4
 800be28:	d10e      	bne.n	800be48 <__mcmp+0x28>
 800be2a:	f100 0314 	add.w	r3, r0, #20
 800be2e:	3114      	adds	r1, #20
 800be30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be40:	42a5      	cmp	r5, r4
 800be42:	d003      	beq.n	800be4c <__mcmp+0x2c>
 800be44:	d305      	bcc.n	800be52 <__mcmp+0x32>
 800be46:	2201      	movs	r2, #1
 800be48:	4610      	mov	r0, r2
 800be4a:	bd30      	pop	{r4, r5, pc}
 800be4c:	4283      	cmp	r3, r0
 800be4e:	d3f3      	bcc.n	800be38 <__mcmp+0x18>
 800be50:	e7fa      	b.n	800be48 <__mcmp+0x28>
 800be52:	f04f 32ff 	mov.w	r2, #4294967295
 800be56:	e7f7      	b.n	800be48 <__mcmp+0x28>

0800be58 <__mdiff>:
 800be58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	460c      	mov	r4, r1
 800be5e:	4606      	mov	r6, r0
 800be60:	4611      	mov	r1, r2
 800be62:	4620      	mov	r0, r4
 800be64:	4690      	mov	r8, r2
 800be66:	f7ff ffdb 	bl	800be20 <__mcmp>
 800be6a:	1e05      	subs	r5, r0, #0
 800be6c:	d110      	bne.n	800be90 <__mdiff+0x38>
 800be6e:	4629      	mov	r1, r5
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff fd09 	bl	800b888 <_Balloc>
 800be76:	b930      	cbnz	r0, 800be86 <__mdiff+0x2e>
 800be78:	4b3a      	ldr	r3, [pc, #232]	; (800bf64 <__mdiff+0x10c>)
 800be7a:	4602      	mov	r2, r0
 800be7c:	f240 2132 	movw	r1, #562	; 0x232
 800be80:	4839      	ldr	r0, [pc, #228]	; (800bf68 <__mdiff+0x110>)
 800be82:	f000 fdff 	bl	800ca84 <__assert_func>
 800be86:	2301      	movs	r3, #1
 800be88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	bfa4      	itt	ge
 800be92:	4643      	movge	r3, r8
 800be94:	46a0      	movge	r8, r4
 800be96:	4630      	mov	r0, r6
 800be98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be9c:	bfa6      	itte	ge
 800be9e:	461c      	movge	r4, r3
 800bea0:	2500      	movge	r5, #0
 800bea2:	2501      	movlt	r5, #1
 800bea4:	f7ff fcf0 	bl	800b888 <_Balloc>
 800bea8:	b920      	cbnz	r0, 800beb4 <__mdiff+0x5c>
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <__mdiff+0x10c>)
 800beac:	4602      	mov	r2, r0
 800beae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800beb2:	e7e5      	b.n	800be80 <__mdiff+0x28>
 800beb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800beb8:	6926      	ldr	r6, [r4, #16]
 800beba:	60c5      	str	r5, [r0, #12]
 800bebc:	f104 0914 	add.w	r9, r4, #20
 800bec0:	f108 0514 	add.w	r5, r8, #20
 800bec4:	f100 0e14 	add.w	lr, r0, #20
 800bec8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800becc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bed0:	f108 0210 	add.w	r2, r8, #16
 800bed4:	46f2      	mov	sl, lr
 800bed6:	2100      	movs	r1, #0
 800bed8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bedc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bee0:	fa1f f883 	uxth.w	r8, r3
 800bee4:	fa11 f18b 	uxtah	r1, r1, fp
 800bee8:	0c1b      	lsrs	r3, r3, #16
 800beea:	eba1 0808 	sub.w	r8, r1, r8
 800beee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bef6:	fa1f f888 	uxth.w	r8, r8
 800befa:	1419      	asrs	r1, r3, #16
 800befc:	454e      	cmp	r6, r9
 800befe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf02:	f84a 3b04 	str.w	r3, [sl], #4
 800bf06:	d8e7      	bhi.n	800bed8 <__mdiff+0x80>
 800bf08:	1b33      	subs	r3, r6, r4
 800bf0a:	3b15      	subs	r3, #21
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	3304      	adds	r3, #4
 800bf12:	3415      	adds	r4, #21
 800bf14:	42a6      	cmp	r6, r4
 800bf16:	bf38      	it	cc
 800bf18:	2304      	movcc	r3, #4
 800bf1a:	441d      	add	r5, r3
 800bf1c:	4473      	add	r3, lr
 800bf1e:	469e      	mov	lr, r3
 800bf20:	462e      	mov	r6, r5
 800bf22:	4566      	cmp	r6, ip
 800bf24:	d30e      	bcc.n	800bf44 <__mdiff+0xec>
 800bf26:	f10c 0203 	add.w	r2, ip, #3
 800bf2a:	1b52      	subs	r2, r2, r5
 800bf2c:	f022 0203 	bic.w	r2, r2, #3
 800bf30:	3d03      	subs	r5, #3
 800bf32:	45ac      	cmp	ip, r5
 800bf34:	bf38      	it	cc
 800bf36:	2200      	movcc	r2, #0
 800bf38:	441a      	add	r2, r3
 800bf3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf3e:	b17b      	cbz	r3, 800bf60 <__mdiff+0x108>
 800bf40:	6107      	str	r7, [r0, #16]
 800bf42:	e7a3      	b.n	800be8c <__mdiff+0x34>
 800bf44:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf48:	fa11 f288 	uxtah	r2, r1, r8
 800bf4c:	1414      	asrs	r4, r2, #16
 800bf4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf52:	b292      	uxth	r2, r2
 800bf54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf58:	f84e 2b04 	str.w	r2, [lr], #4
 800bf5c:	1421      	asrs	r1, r4, #16
 800bf5e:	e7e0      	b.n	800bf22 <__mdiff+0xca>
 800bf60:	3f01      	subs	r7, #1
 800bf62:	e7ea      	b.n	800bf3a <__mdiff+0xe2>
 800bf64:	0800cfc0 	.word	0x0800cfc0
 800bf68:	0800d0b0 	.word	0x0800d0b0

0800bf6c <__ulp>:
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	ed8d 0b00 	vstr	d0, [sp]
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	4912      	ldr	r1, [pc, #72]	; (800bfc0 <__ulp+0x54>)
 800bf76:	4019      	ands	r1, r3
 800bf78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	dd05      	ble.n	800bf8c <__ulp+0x20>
 800bf80:	2200      	movs	r2, #0
 800bf82:	460b      	mov	r3, r1
 800bf84:	ec43 2b10 	vmov	d0, r2, r3
 800bf88:	b002      	add	sp, #8
 800bf8a:	4770      	bx	lr
 800bf8c:	4249      	negs	r1, r1
 800bf8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bf92:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	f04f 0300 	mov.w	r3, #0
 800bf9e:	da04      	bge.n	800bfaa <__ulp+0x3e>
 800bfa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bfa4:	fa41 f300 	asr.w	r3, r1, r0
 800bfa8:	e7ec      	b.n	800bf84 <__ulp+0x18>
 800bfaa:	f1a0 0114 	sub.w	r1, r0, #20
 800bfae:	291e      	cmp	r1, #30
 800bfb0:	bfda      	itte	le
 800bfb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bfb6:	fa20 f101 	lsrle.w	r1, r0, r1
 800bfba:	2101      	movgt	r1, #1
 800bfbc:	460a      	mov	r2, r1
 800bfbe:	e7e1      	b.n	800bf84 <__ulp+0x18>
 800bfc0:	7ff00000 	.word	0x7ff00000

0800bfc4 <__b2d>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	6905      	ldr	r5, [r0, #16]
 800bfc8:	f100 0714 	add.w	r7, r0, #20
 800bfcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bfd0:	1f2e      	subs	r6, r5, #4
 800bfd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff fd48 	bl	800ba6c <__hi0bits>
 800bfdc:	f1c0 0320 	rsb	r3, r0, #32
 800bfe0:	280a      	cmp	r0, #10
 800bfe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c060 <__b2d+0x9c>
 800bfe6:	600b      	str	r3, [r1, #0]
 800bfe8:	dc14      	bgt.n	800c014 <__b2d+0x50>
 800bfea:	f1c0 0e0b 	rsb	lr, r0, #11
 800bfee:	fa24 f10e 	lsr.w	r1, r4, lr
 800bff2:	42b7      	cmp	r7, r6
 800bff4:	ea41 030c 	orr.w	r3, r1, ip
 800bff8:	bf34      	ite	cc
 800bffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bffe:	2100      	movcs	r1, #0
 800c000:	3015      	adds	r0, #21
 800c002:	fa04 f000 	lsl.w	r0, r4, r0
 800c006:	fa21 f10e 	lsr.w	r1, r1, lr
 800c00a:	ea40 0201 	orr.w	r2, r0, r1
 800c00e:	ec43 2b10 	vmov	d0, r2, r3
 800c012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c014:	42b7      	cmp	r7, r6
 800c016:	bf3a      	itte	cc
 800c018:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c01c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c020:	2100      	movcs	r1, #0
 800c022:	380b      	subs	r0, #11
 800c024:	d017      	beq.n	800c056 <__b2d+0x92>
 800c026:	f1c0 0c20 	rsb	ip, r0, #32
 800c02a:	fa04 f500 	lsl.w	r5, r4, r0
 800c02e:	42be      	cmp	r6, r7
 800c030:	fa21 f40c 	lsr.w	r4, r1, ip
 800c034:	ea45 0504 	orr.w	r5, r5, r4
 800c038:	bf8c      	ite	hi
 800c03a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c03e:	2400      	movls	r4, #0
 800c040:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c044:	fa01 f000 	lsl.w	r0, r1, r0
 800c048:	fa24 f40c 	lsr.w	r4, r4, ip
 800c04c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c050:	ea40 0204 	orr.w	r2, r0, r4
 800c054:	e7db      	b.n	800c00e <__b2d+0x4a>
 800c056:	ea44 030c 	orr.w	r3, r4, ip
 800c05a:	460a      	mov	r2, r1
 800c05c:	e7d7      	b.n	800c00e <__b2d+0x4a>
 800c05e:	bf00      	nop
 800c060:	3ff00000 	.word	0x3ff00000

0800c064 <__d2b>:
 800c064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c068:	4689      	mov	r9, r1
 800c06a:	2101      	movs	r1, #1
 800c06c:	ec57 6b10 	vmov	r6, r7, d0
 800c070:	4690      	mov	r8, r2
 800c072:	f7ff fc09 	bl	800b888 <_Balloc>
 800c076:	4604      	mov	r4, r0
 800c078:	b930      	cbnz	r0, 800c088 <__d2b+0x24>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4b25      	ldr	r3, [pc, #148]	; (800c114 <__d2b+0xb0>)
 800c07e:	4826      	ldr	r0, [pc, #152]	; (800c118 <__d2b+0xb4>)
 800c080:	f240 310a 	movw	r1, #778	; 0x30a
 800c084:	f000 fcfe 	bl	800ca84 <__assert_func>
 800c088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c08c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c090:	bb35      	cbnz	r5, 800c0e0 <__d2b+0x7c>
 800c092:	2e00      	cmp	r6, #0
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	d028      	beq.n	800c0ea <__d2b+0x86>
 800c098:	4668      	mov	r0, sp
 800c09a:	9600      	str	r6, [sp, #0]
 800c09c:	f7ff fd06 	bl	800baac <__lo0bits>
 800c0a0:	9900      	ldr	r1, [sp, #0]
 800c0a2:	b300      	cbz	r0, 800c0e6 <__d2b+0x82>
 800c0a4:	9a01      	ldr	r2, [sp, #4]
 800c0a6:	f1c0 0320 	rsb	r3, r0, #32
 800c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	40c2      	lsrs	r2, r0
 800c0b2:	6163      	str	r3, [r4, #20]
 800c0b4:	9201      	str	r2, [sp, #4]
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	61a3      	str	r3, [r4, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bf14      	ite	ne
 800c0be:	2202      	movne	r2, #2
 800c0c0:	2201      	moveq	r2, #1
 800c0c2:	6122      	str	r2, [r4, #16]
 800c0c4:	b1d5      	cbz	r5, 800c0fc <__d2b+0x98>
 800c0c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0ca:	4405      	add	r5, r0
 800c0cc:	f8c9 5000 	str.w	r5, [r9]
 800c0d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0d4:	f8c8 0000 	str.w	r0, [r8]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	b003      	add	sp, #12
 800c0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0e4:	e7d5      	b.n	800c092 <__d2b+0x2e>
 800c0e6:	6161      	str	r1, [r4, #20]
 800c0e8:	e7e5      	b.n	800c0b6 <__d2b+0x52>
 800c0ea:	a801      	add	r0, sp, #4
 800c0ec:	f7ff fcde 	bl	800baac <__lo0bits>
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	6163      	str	r3, [r4, #20]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	6122      	str	r2, [r4, #16]
 800c0f8:	3020      	adds	r0, #32
 800c0fa:	e7e3      	b.n	800c0c4 <__d2b+0x60>
 800c0fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c104:	f8c9 0000 	str.w	r0, [r9]
 800c108:	6918      	ldr	r0, [r3, #16]
 800c10a:	f7ff fcaf 	bl	800ba6c <__hi0bits>
 800c10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c112:	e7df      	b.n	800c0d4 <__d2b+0x70>
 800c114:	0800cfc0 	.word	0x0800cfc0
 800c118:	0800d0b0 	.word	0x0800d0b0

0800c11c <__ratio>:
 800c11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	4688      	mov	r8, r1
 800c122:	4669      	mov	r1, sp
 800c124:	4681      	mov	r9, r0
 800c126:	f7ff ff4d 	bl	800bfc4 <__b2d>
 800c12a:	a901      	add	r1, sp, #4
 800c12c:	4640      	mov	r0, r8
 800c12e:	ec55 4b10 	vmov	r4, r5, d0
 800c132:	f7ff ff47 	bl	800bfc4 <__b2d>
 800c136:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c13a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c13e:	eba3 0c02 	sub.w	ip, r3, r2
 800c142:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c14c:	ec51 0b10 	vmov	r0, r1, d0
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfd6      	itet	le
 800c154:	460a      	movle	r2, r1
 800c156:	462a      	movgt	r2, r5
 800c158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c15c:	468b      	mov	fp, r1
 800c15e:	462f      	mov	r7, r5
 800c160:	bfd4      	ite	le
 800c162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c166:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c16a:	4620      	mov	r0, r4
 800c16c:	ee10 2a10 	vmov	r2, s0
 800c170:	465b      	mov	r3, fp
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fb6a 	bl	800084c <__aeabi_ddiv>
 800c178:	ec41 0b10 	vmov	d0, r0, r1
 800c17c:	b003      	add	sp, #12
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c182 <__copybits>:
 800c182:	3901      	subs	r1, #1
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	1149      	asrs	r1, r1, #5
 800c188:	6914      	ldr	r4, [r2, #16]
 800c18a:	3101      	adds	r1, #1
 800c18c:	f102 0314 	add.w	r3, r2, #20
 800c190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c194:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c198:	1f05      	subs	r5, r0, #4
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	d30c      	bcc.n	800c1b8 <__copybits+0x36>
 800c19e:	1aa3      	subs	r3, r4, r2
 800c1a0:	3b11      	subs	r3, #17
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	3211      	adds	r2, #17
 800c1a8:	42a2      	cmp	r2, r4
 800c1aa:	bf88      	it	hi
 800c1ac:	2300      	movhi	r3, #0
 800c1ae:	4418      	add	r0, r3
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4288      	cmp	r0, r1
 800c1b4:	d305      	bcc.n	800c1c2 <__copybits+0x40>
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1c0:	e7eb      	b.n	800c19a <__copybits+0x18>
 800c1c2:	f840 3b04 	str.w	r3, [r0], #4
 800c1c6:	e7f4      	b.n	800c1b2 <__copybits+0x30>

0800c1c8 <__any_on>:
 800c1c8:	f100 0214 	add.w	r2, r0, #20
 800c1cc:	6900      	ldr	r0, [r0, #16]
 800c1ce:	114b      	asrs	r3, r1, #5
 800c1d0:	4298      	cmp	r0, r3
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	db11      	blt.n	800c1fa <__any_on+0x32>
 800c1d6:	dd0a      	ble.n	800c1ee <__any_on+0x26>
 800c1d8:	f011 011f 	ands.w	r1, r1, #31
 800c1dc:	d007      	beq.n	800c1ee <__any_on+0x26>
 800c1de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1e2:	fa24 f001 	lsr.w	r0, r4, r1
 800c1e6:	fa00 f101 	lsl.w	r1, r0, r1
 800c1ea:	428c      	cmp	r4, r1
 800c1ec:	d10b      	bne.n	800c206 <__any_on+0x3e>
 800c1ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d803      	bhi.n	800c1fe <__any_on+0x36>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	e7f7      	b.n	800c1ee <__any_on+0x26>
 800c1fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c202:	2900      	cmp	r1, #0
 800c204:	d0f5      	beq.n	800c1f2 <__any_on+0x2a>
 800c206:	2001      	movs	r0, #1
 800c208:	e7f6      	b.n	800c1f8 <__any_on+0x30>

0800c20a <_calloc_r>:
 800c20a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20c:	fba1 2402 	umull	r2, r4, r1, r2
 800c210:	b94c      	cbnz	r4, 800c226 <_calloc_r+0x1c>
 800c212:	4611      	mov	r1, r2
 800c214:	9201      	str	r2, [sp, #4]
 800c216:	f000 f87b 	bl	800c310 <_malloc_r>
 800c21a:	9a01      	ldr	r2, [sp, #4]
 800c21c:	4605      	mov	r5, r0
 800c21e:	b930      	cbnz	r0, 800c22e <_calloc_r+0x24>
 800c220:	4628      	mov	r0, r5
 800c222:	b003      	add	sp, #12
 800c224:	bd30      	pop	{r4, r5, pc}
 800c226:	220c      	movs	r2, #12
 800c228:	6002      	str	r2, [r0, #0]
 800c22a:	2500      	movs	r5, #0
 800c22c:	e7f8      	b.n	800c220 <_calloc_r+0x16>
 800c22e:	4621      	mov	r1, r4
 800c230:	f7fc f852 	bl	80082d8 <memset>
 800c234:	e7f4      	b.n	800c220 <_calloc_r+0x16>
	...

0800c238 <_free_r>:
 800c238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c23a:	2900      	cmp	r1, #0
 800c23c:	d044      	beq.n	800c2c8 <_free_r+0x90>
 800c23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c242:	9001      	str	r0, [sp, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	f1a1 0404 	sub.w	r4, r1, #4
 800c24a:	bfb8      	it	lt
 800c24c:	18e4      	addlt	r4, r4, r3
 800c24e:	f000 fca7 	bl	800cba0 <__malloc_lock>
 800c252:	4a1e      	ldr	r2, [pc, #120]	; (800c2cc <_free_r+0x94>)
 800c254:	9801      	ldr	r0, [sp, #4]
 800c256:	6813      	ldr	r3, [r2, #0]
 800c258:	b933      	cbnz	r3, 800c268 <_free_r+0x30>
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	6014      	str	r4, [r2, #0]
 800c25e:	b003      	add	sp, #12
 800c260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c264:	f000 bca2 	b.w	800cbac <__malloc_unlock>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d908      	bls.n	800c27e <_free_r+0x46>
 800c26c:	6825      	ldr	r5, [r4, #0]
 800c26e:	1961      	adds	r1, r4, r5
 800c270:	428b      	cmp	r3, r1
 800c272:	bf01      	itttt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	1949      	addeq	r1, r1, r5
 800c27a:	6021      	streq	r1, [r4, #0]
 800c27c:	e7ed      	b.n	800c25a <_free_r+0x22>
 800c27e:	461a      	mov	r2, r3
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b10b      	cbz	r3, 800c288 <_free_r+0x50>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d9fa      	bls.n	800c27e <_free_r+0x46>
 800c288:	6811      	ldr	r1, [r2, #0]
 800c28a:	1855      	adds	r5, r2, r1
 800c28c:	42a5      	cmp	r5, r4
 800c28e:	d10b      	bne.n	800c2a8 <_free_r+0x70>
 800c290:	6824      	ldr	r4, [r4, #0]
 800c292:	4421      	add	r1, r4
 800c294:	1854      	adds	r4, r2, r1
 800c296:	42a3      	cmp	r3, r4
 800c298:	6011      	str	r1, [r2, #0]
 800c29a:	d1e0      	bne.n	800c25e <_free_r+0x26>
 800c29c:	681c      	ldr	r4, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	6053      	str	r3, [r2, #4]
 800c2a2:	4421      	add	r1, r4
 800c2a4:	6011      	str	r1, [r2, #0]
 800c2a6:	e7da      	b.n	800c25e <_free_r+0x26>
 800c2a8:	d902      	bls.n	800c2b0 <_free_r+0x78>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	6003      	str	r3, [r0, #0]
 800c2ae:	e7d6      	b.n	800c25e <_free_r+0x26>
 800c2b0:	6825      	ldr	r5, [r4, #0]
 800c2b2:	1961      	adds	r1, r4, r5
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf04      	itt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	bf04      	itt	eq
 800c2c0:	1949      	addeq	r1, r1, r5
 800c2c2:	6021      	streq	r1, [r4, #0]
 800c2c4:	6054      	str	r4, [r2, #4]
 800c2c6:	e7ca      	b.n	800c25e <_free_r+0x26>
 800c2c8:	b003      	add	sp, #12
 800c2ca:	bd30      	pop	{r4, r5, pc}
 800c2cc:	20000500 	.word	0x20000500

0800c2d0 <sbrk_aligned>:
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	4e0e      	ldr	r6, [pc, #56]	; (800c30c <sbrk_aligned+0x3c>)
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	6831      	ldr	r1, [r6, #0]
 800c2d8:	4605      	mov	r5, r0
 800c2da:	b911      	cbnz	r1, 800c2e2 <sbrk_aligned+0x12>
 800c2dc:	f000 fb4c 	bl	800c978 <_sbrk_r>
 800c2e0:	6030      	str	r0, [r6, #0]
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f000 fb47 	bl	800c978 <_sbrk_r>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	d00a      	beq.n	800c304 <sbrk_aligned+0x34>
 800c2ee:	1cc4      	adds	r4, r0, #3
 800c2f0:	f024 0403 	bic.w	r4, r4, #3
 800c2f4:	42a0      	cmp	r0, r4
 800c2f6:	d007      	beq.n	800c308 <sbrk_aligned+0x38>
 800c2f8:	1a21      	subs	r1, r4, r0
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f000 fb3c 	bl	800c978 <_sbrk_r>
 800c300:	3001      	adds	r0, #1
 800c302:	d101      	bne.n	800c308 <sbrk_aligned+0x38>
 800c304:	f04f 34ff 	mov.w	r4, #4294967295
 800c308:	4620      	mov	r0, r4
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	20000504 	.word	0x20000504

0800c310 <_malloc_r>:
 800c310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c314:	1ccd      	adds	r5, r1, #3
 800c316:	f025 0503 	bic.w	r5, r5, #3
 800c31a:	3508      	adds	r5, #8
 800c31c:	2d0c      	cmp	r5, #12
 800c31e:	bf38      	it	cc
 800c320:	250c      	movcc	r5, #12
 800c322:	2d00      	cmp	r5, #0
 800c324:	4607      	mov	r7, r0
 800c326:	db01      	blt.n	800c32c <_malloc_r+0x1c>
 800c328:	42a9      	cmp	r1, r5
 800c32a:	d905      	bls.n	800c338 <_malloc_r+0x28>
 800c32c:	230c      	movs	r3, #12
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	2600      	movs	r6, #0
 800c332:	4630      	mov	r0, r6
 800c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c338:	4e2e      	ldr	r6, [pc, #184]	; (800c3f4 <_malloc_r+0xe4>)
 800c33a:	f000 fc31 	bl	800cba0 <__malloc_lock>
 800c33e:	6833      	ldr	r3, [r6, #0]
 800c340:	461c      	mov	r4, r3
 800c342:	bb34      	cbnz	r4, 800c392 <_malloc_r+0x82>
 800c344:	4629      	mov	r1, r5
 800c346:	4638      	mov	r0, r7
 800c348:	f7ff ffc2 	bl	800c2d0 <sbrk_aligned>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	4604      	mov	r4, r0
 800c350:	d14d      	bne.n	800c3ee <_malloc_r+0xde>
 800c352:	6834      	ldr	r4, [r6, #0]
 800c354:	4626      	mov	r6, r4
 800c356:	2e00      	cmp	r6, #0
 800c358:	d140      	bne.n	800c3dc <_malloc_r+0xcc>
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	4631      	mov	r1, r6
 800c35e:	4638      	mov	r0, r7
 800c360:	eb04 0803 	add.w	r8, r4, r3
 800c364:	f000 fb08 	bl	800c978 <_sbrk_r>
 800c368:	4580      	cmp	r8, r0
 800c36a:	d13a      	bne.n	800c3e2 <_malloc_r+0xd2>
 800c36c:	6821      	ldr	r1, [r4, #0]
 800c36e:	3503      	adds	r5, #3
 800c370:	1a6d      	subs	r5, r5, r1
 800c372:	f025 0503 	bic.w	r5, r5, #3
 800c376:	3508      	adds	r5, #8
 800c378:	2d0c      	cmp	r5, #12
 800c37a:	bf38      	it	cc
 800c37c:	250c      	movcc	r5, #12
 800c37e:	4629      	mov	r1, r5
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff ffa5 	bl	800c2d0 <sbrk_aligned>
 800c386:	3001      	adds	r0, #1
 800c388:	d02b      	beq.n	800c3e2 <_malloc_r+0xd2>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	442b      	add	r3, r5
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	e00e      	b.n	800c3b0 <_malloc_r+0xa0>
 800c392:	6822      	ldr	r2, [r4, #0]
 800c394:	1b52      	subs	r2, r2, r5
 800c396:	d41e      	bmi.n	800c3d6 <_malloc_r+0xc6>
 800c398:	2a0b      	cmp	r2, #11
 800c39a:	d916      	bls.n	800c3ca <_malloc_r+0xba>
 800c39c:	1961      	adds	r1, r4, r5
 800c39e:	42a3      	cmp	r3, r4
 800c3a0:	6025      	str	r5, [r4, #0]
 800c3a2:	bf18      	it	ne
 800c3a4:	6059      	strne	r1, [r3, #4]
 800c3a6:	6863      	ldr	r3, [r4, #4]
 800c3a8:	bf08      	it	eq
 800c3aa:	6031      	streq	r1, [r6, #0]
 800c3ac:	5162      	str	r2, [r4, r5]
 800c3ae:	604b      	str	r3, [r1, #4]
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f104 060b 	add.w	r6, r4, #11
 800c3b6:	f000 fbf9 	bl	800cbac <__malloc_unlock>
 800c3ba:	f026 0607 	bic.w	r6, r6, #7
 800c3be:	1d23      	adds	r3, r4, #4
 800c3c0:	1af2      	subs	r2, r6, r3
 800c3c2:	d0b6      	beq.n	800c332 <_malloc_r+0x22>
 800c3c4:	1b9b      	subs	r3, r3, r6
 800c3c6:	50a3      	str	r3, [r4, r2]
 800c3c8:	e7b3      	b.n	800c332 <_malloc_r+0x22>
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	bf0c      	ite	eq
 800c3d0:	6032      	streq	r2, [r6, #0]
 800c3d2:	605a      	strne	r2, [r3, #4]
 800c3d4:	e7ec      	b.n	800c3b0 <_malloc_r+0xa0>
 800c3d6:	4623      	mov	r3, r4
 800c3d8:	6864      	ldr	r4, [r4, #4]
 800c3da:	e7b2      	b.n	800c342 <_malloc_r+0x32>
 800c3dc:	4634      	mov	r4, r6
 800c3de:	6876      	ldr	r6, [r6, #4]
 800c3e0:	e7b9      	b.n	800c356 <_malloc_r+0x46>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f000 fbe0 	bl	800cbac <__malloc_unlock>
 800c3ec:	e7a1      	b.n	800c332 <_malloc_r+0x22>
 800c3ee:	6025      	str	r5, [r4, #0]
 800c3f0:	e7de      	b.n	800c3b0 <_malloc_r+0xa0>
 800c3f2:	bf00      	nop
 800c3f4:	20000500 	.word	0x20000500

0800c3f8 <__ssputs_r>:
 800c3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fc:	688e      	ldr	r6, [r1, #8]
 800c3fe:	429e      	cmp	r6, r3
 800c400:	4682      	mov	sl, r0
 800c402:	460c      	mov	r4, r1
 800c404:	4690      	mov	r8, r2
 800c406:	461f      	mov	r7, r3
 800c408:	d838      	bhi.n	800c47c <__ssputs_r+0x84>
 800c40a:	898a      	ldrh	r2, [r1, #12]
 800c40c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c410:	d032      	beq.n	800c478 <__ssputs_r+0x80>
 800c412:	6825      	ldr	r5, [r4, #0]
 800c414:	6909      	ldr	r1, [r1, #16]
 800c416:	eba5 0901 	sub.w	r9, r5, r1
 800c41a:	6965      	ldr	r5, [r4, #20]
 800c41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c424:	3301      	adds	r3, #1
 800c426:	444b      	add	r3, r9
 800c428:	106d      	asrs	r5, r5, #1
 800c42a:	429d      	cmp	r5, r3
 800c42c:	bf38      	it	cc
 800c42e:	461d      	movcc	r5, r3
 800c430:	0553      	lsls	r3, r2, #21
 800c432:	d531      	bpl.n	800c498 <__ssputs_r+0xa0>
 800c434:	4629      	mov	r1, r5
 800c436:	f7ff ff6b 	bl	800c310 <_malloc_r>
 800c43a:	4606      	mov	r6, r0
 800c43c:	b950      	cbnz	r0, 800c454 <__ssputs_r+0x5c>
 800c43e:	230c      	movs	r3, #12
 800c440:	f8ca 3000 	str.w	r3, [sl]
 800c444:	89a3      	ldrh	r3, [r4, #12]
 800c446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c454:	6921      	ldr	r1, [r4, #16]
 800c456:	464a      	mov	r2, r9
 800c458:	f7ff fa08 	bl	800b86c <memcpy>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	6126      	str	r6, [r4, #16]
 800c46a:	6165      	str	r5, [r4, #20]
 800c46c:	444e      	add	r6, r9
 800c46e:	eba5 0509 	sub.w	r5, r5, r9
 800c472:	6026      	str	r6, [r4, #0]
 800c474:	60a5      	str	r5, [r4, #8]
 800c476:	463e      	mov	r6, r7
 800c478:	42be      	cmp	r6, r7
 800c47a:	d900      	bls.n	800c47e <__ssputs_r+0x86>
 800c47c:	463e      	mov	r6, r7
 800c47e:	6820      	ldr	r0, [r4, #0]
 800c480:	4632      	mov	r2, r6
 800c482:	4641      	mov	r1, r8
 800c484:	f000 fb72 	bl	800cb6c <memmove>
 800c488:	68a3      	ldr	r3, [r4, #8]
 800c48a:	1b9b      	subs	r3, r3, r6
 800c48c:	60a3      	str	r3, [r4, #8]
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	4433      	add	r3, r6
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e7db      	b.n	800c450 <__ssputs_r+0x58>
 800c498:	462a      	mov	r2, r5
 800c49a:	f000 fb8d 	bl	800cbb8 <_realloc_r>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d1e1      	bne.n	800c468 <__ssputs_r+0x70>
 800c4a4:	6921      	ldr	r1, [r4, #16]
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	f7ff fec6 	bl	800c238 <_free_r>
 800c4ac:	e7c7      	b.n	800c43e <__ssputs_r+0x46>
	...

0800c4b0 <_svfiprintf_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4698      	mov	r8, r3
 800c4b6:	898b      	ldrh	r3, [r1, #12]
 800c4b8:	061b      	lsls	r3, r3, #24
 800c4ba:	b09d      	sub	sp, #116	; 0x74
 800c4bc:	4607      	mov	r7, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	d50e      	bpl.n	800c4e2 <_svfiprintf_r+0x32>
 800c4c4:	690b      	ldr	r3, [r1, #16]
 800c4c6:	b963      	cbnz	r3, 800c4e2 <_svfiprintf_r+0x32>
 800c4c8:	2140      	movs	r1, #64	; 0x40
 800c4ca:	f7ff ff21 	bl	800c310 <_malloc_r>
 800c4ce:	6028      	str	r0, [r5, #0]
 800c4d0:	6128      	str	r0, [r5, #16]
 800c4d2:	b920      	cbnz	r0, 800c4de <_svfiprintf_r+0x2e>
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e0d1      	b.n	800c682 <_svfiprintf_r+0x1d2>
 800c4de:	2340      	movs	r3, #64	; 0x40
 800c4e0:	616b      	str	r3, [r5, #20]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e6:	2320      	movs	r3, #32
 800c4e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f0:	2330      	movs	r3, #48	; 0x30
 800c4f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c69c <_svfiprintf_r+0x1ec>
 800c4f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4fa:	f04f 0901 	mov.w	r9, #1
 800c4fe:	4623      	mov	r3, r4
 800c500:	469a      	mov	sl, r3
 800c502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c506:	b10a      	cbz	r2, 800c50c <_svfiprintf_r+0x5c>
 800c508:	2a25      	cmp	r2, #37	; 0x25
 800c50a:	d1f9      	bne.n	800c500 <_svfiprintf_r+0x50>
 800c50c:	ebba 0b04 	subs.w	fp, sl, r4
 800c510:	d00b      	beq.n	800c52a <_svfiprintf_r+0x7a>
 800c512:	465b      	mov	r3, fp
 800c514:	4622      	mov	r2, r4
 800c516:	4629      	mov	r1, r5
 800c518:	4638      	mov	r0, r7
 800c51a:	f7ff ff6d 	bl	800c3f8 <__ssputs_r>
 800c51e:	3001      	adds	r0, #1
 800c520:	f000 80aa 	beq.w	800c678 <_svfiprintf_r+0x1c8>
 800c524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c526:	445a      	add	r2, fp
 800c528:	9209      	str	r2, [sp, #36]	; 0x24
 800c52a:	f89a 3000 	ldrb.w	r3, [sl]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 80a2 	beq.w	800c678 <_svfiprintf_r+0x1c8>
 800c534:	2300      	movs	r3, #0
 800c536:	f04f 32ff 	mov.w	r2, #4294967295
 800c53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c53e:	f10a 0a01 	add.w	sl, sl, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	9307      	str	r3, [sp, #28]
 800c546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c54a:	931a      	str	r3, [sp, #104]	; 0x68
 800c54c:	4654      	mov	r4, sl
 800c54e:	2205      	movs	r2, #5
 800c550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c554:	4851      	ldr	r0, [pc, #324]	; (800c69c <_svfiprintf_r+0x1ec>)
 800c556:	f7f3 fe43 	bl	80001e0 <memchr>
 800c55a:	9a04      	ldr	r2, [sp, #16]
 800c55c:	b9d8      	cbnz	r0, 800c596 <_svfiprintf_r+0xe6>
 800c55e:	06d0      	lsls	r0, r2, #27
 800c560:	bf44      	itt	mi
 800c562:	2320      	movmi	r3, #32
 800c564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c568:	0711      	lsls	r1, r2, #28
 800c56a:	bf44      	itt	mi
 800c56c:	232b      	movmi	r3, #43	; 0x2b
 800c56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c572:	f89a 3000 	ldrb.w	r3, [sl]
 800c576:	2b2a      	cmp	r3, #42	; 0x2a
 800c578:	d015      	beq.n	800c5a6 <_svfiprintf_r+0xf6>
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	4654      	mov	r4, sl
 800c57e:	2000      	movs	r0, #0
 800c580:	f04f 0c0a 	mov.w	ip, #10
 800c584:	4621      	mov	r1, r4
 800c586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c58a:	3b30      	subs	r3, #48	; 0x30
 800c58c:	2b09      	cmp	r3, #9
 800c58e:	d94e      	bls.n	800c62e <_svfiprintf_r+0x17e>
 800c590:	b1b0      	cbz	r0, 800c5c0 <_svfiprintf_r+0x110>
 800c592:	9207      	str	r2, [sp, #28]
 800c594:	e014      	b.n	800c5c0 <_svfiprintf_r+0x110>
 800c596:	eba0 0308 	sub.w	r3, r0, r8
 800c59a:	fa09 f303 	lsl.w	r3, r9, r3
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	46a2      	mov	sl, r4
 800c5a4:	e7d2      	b.n	800c54c <_svfiprintf_r+0x9c>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	1d19      	adds	r1, r3, #4
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	9103      	str	r1, [sp, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bfbb      	ittet	lt
 800c5b2:	425b      	neglt	r3, r3
 800c5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5b8:	9307      	strge	r3, [sp, #28]
 800c5ba:	9307      	strlt	r3, [sp, #28]
 800c5bc:	bfb8      	it	lt
 800c5be:	9204      	strlt	r2, [sp, #16]
 800c5c0:	7823      	ldrb	r3, [r4, #0]
 800c5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5c4:	d10c      	bne.n	800c5e0 <_svfiprintf_r+0x130>
 800c5c6:	7863      	ldrb	r3, [r4, #1]
 800c5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ca:	d135      	bne.n	800c638 <_svfiprintf_r+0x188>
 800c5cc:	9b03      	ldr	r3, [sp, #12]
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	9203      	str	r2, [sp, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bfb8      	it	lt
 800c5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5dc:	3402      	adds	r4, #2
 800c5de:	9305      	str	r3, [sp, #20]
 800c5e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6ac <_svfiprintf_r+0x1fc>
 800c5e4:	7821      	ldrb	r1, [r4, #0]
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	4650      	mov	r0, sl
 800c5ea:	f7f3 fdf9 	bl	80001e0 <memchr>
 800c5ee:	b140      	cbz	r0, 800c602 <_svfiprintf_r+0x152>
 800c5f0:	2340      	movs	r3, #64	; 0x40
 800c5f2:	eba0 000a 	sub.w	r0, r0, sl
 800c5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c5fa:	9b04      	ldr	r3, [sp, #16]
 800c5fc:	4303      	orrs	r3, r0
 800c5fe:	3401      	adds	r4, #1
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c606:	4826      	ldr	r0, [pc, #152]	; (800c6a0 <_svfiprintf_r+0x1f0>)
 800c608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c60c:	2206      	movs	r2, #6
 800c60e:	f7f3 fde7 	bl	80001e0 <memchr>
 800c612:	2800      	cmp	r0, #0
 800c614:	d038      	beq.n	800c688 <_svfiprintf_r+0x1d8>
 800c616:	4b23      	ldr	r3, [pc, #140]	; (800c6a4 <_svfiprintf_r+0x1f4>)
 800c618:	bb1b      	cbnz	r3, 800c662 <_svfiprintf_r+0x1b2>
 800c61a:	9b03      	ldr	r3, [sp, #12]
 800c61c:	3307      	adds	r3, #7
 800c61e:	f023 0307 	bic.w	r3, r3, #7
 800c622:	3308      	adds	r3, #8
 800c624:	9303      	str	r3, [sp, #12]
 800c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c628:	4433      	add	r3, r6
 800c62a:	9309      	str	r3, [sp, #36]	; 0x24
 800c62c:	e767      	b.n	800c4fe <_svfiprintf_r+0x4e>
 800c62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c632:	460c      	mov	r4, r1
 800c634:	2001      	movs	r0, #1
 800c636:	e7a5      	b.n	800c584 <_svfiprintf_r+0xd4>
 800c638:	2300      	movs	r3, #0
 800c63a:	3401      	adds	r4, #1
 800c63c:	9305      	str	r3, [sp, #20]
 800c63e:	4619      	mov	r1, r3
 800c640:	f04f 0c0a 	mov.w	ip, #10
 800c644:	4620      	mov	r0, r4
 800c646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c64a:	3a30      	subs	r2, #48	; 0x30
 800c64c:	2a09      	cmp	r2, #9
 800c64e:	d903      	bls.n	800c658 <_svfiprintf_r+0x1a8>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0c5      	beq.n	800c5e0 <_svfiprintf_r+0x130>
 800c654:	9105      	str	r1, [sp, #20]
 800c656:	e7c3      	b.n	800c5e0 <_svfiprintf_r+0x130>
 800c658:	fb0c 2101 	mla	r1, ip, r1, r2
 800c65c:	4604      	mov	r4, r0
 800c65e:	2301      	movs	r3, #1
 800c660:	e7f0      	b.n	800c644 <_svfiprintf_r+0x194>
 800c662:	ab03      	add	r3, sp, #12
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	462a      	mov	r2, r5
 800c668:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <_svfiprintf_r+0x1f8>)
 800c66a:	a904      	add	r1, sp, #16
 800c66c:	4638      	mov	r0, r7
 800c66e:	f7fb fedb 	bl	8008428 <_printf_float>
 800c672:	1c42      	adds	r2, r0, #1
 800c674:	4606      	mov	r6, r0
 800c676:	d1d6      	bne.n	800c626 <_svfiprintf_r+0x176>
 800c678:	89ab      	ldrh	r3, [r5, #12]
 800c67a:	065b      	lsls	r3, r3, #25
 800c67c:	f53f af2c 	bmi.w	800c4d8 <_svfiprintf_r+0x28>
 800c680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c682:	b01d      	add	sp, #116	; 0x74
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	ab03      	add	r3, sp, #12
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	462a      	mov	r2, r5
 800c68e:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <_svfiprintf_r+0x1f8>)
 800c690:	a904      	add	r1, sp, #16
 800c692:	4638      	mov	r0, r7
 800c694:	f7fc f96c 	bl	8008970 <_printf_i>
 800c698:	e7eb      	b.n	800c672 <_svfiprintf_r+0x1c2>
 800c69a:	bf00      	nop
 800c69c:	0800d20c 	.word	0x0800d20c
 800c6a0:	0800d216 	.word	0x0800d216
 800c6a4:	08008429 	.word	0x08008429
 800c6a8:	0800c3f9 	.word	0x0800c3f9
 800c6ac:	0800d212 	.word	0x0800d212

0800c6b0 <__sfputc_r>:
 800c6b0:	6893      	ldr	r3, [r2, #8]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	b410      	push	{r4}
 800c6b8:	6093      	str	r3, [r2, #8]
 800c6ba:	da08      	bge.n	800c6ce <__sfputc_r+0x1e>
 800c6bc:	6994      	ldr	r4, [r2, #24]
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	db01      	blt.n	800c6c6 <__sfputc_r+0x16>
 800c6c2:	290a      	cmp	r1, #10
 800c6c4:	d103      	bne.n	800c6ce <__sfputc_r+0x1e>
 800c6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ca:	f7fd bbe9 	b.w	8009ea0 <__swbuf_r>
 800c6ce:	6813      	ldr	r3, [r2, #0]
 800c6d0:	1c58      	adds	r0, r3, #1
 800c6d2:	6010      	str	r0, [r2, #0]
 800c6d4:	7019      	strb	r1, [r3, #0]
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <__sfputs_r>:
 800c6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	460f      	mov	r7, r1
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	18d5      	adds	r5, r2, r3
 800c6e8:	42ac      	cmp	r4, r5
 800c6ea:	d101      	bne.n	800c6f0 <__sfputs_r+0x12>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e007      	b.n	800c700 <__sfputs_r+0x22>
 800c6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f4:	463a      	mov	r2, r7
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff ffda 	bl	800c6b0 <__sfputc_r>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d1f3      	bne.n	800c6e8 <__sfputs_r+0xa>
 800c700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c704 <_vfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	460d      	mov	r5, r1
 800c70a:	b09d      	sub	sp, #116	; 0x74
 800c70c:	4614      	mov	r4, r2
 800c70e:	4698      	mov	r8, r3
 800c710:	4606      	mov	r6, r0
 800c712:	b118      	cbz	r0, 800c71c <_vfiprintf_r+0x18>
 800c714:	6983      	ldr	r3, [r0, #24]
 800c716:	b90b      	cbnz	r3, 800c71c <_vfiprintf_r+0x18>
 800c718:	f7fe fc16 	bl	800af48 <__sinit>
 800c71c:	4b89      	ldr	r3, [pc, #548]	; (800c944 <_vfiprintf_r+0x240>)
 800c71e:	429d      	cmp	r5, r3
 800c720:	d11b      	bne.n	800c75a <_vfiprintf_r+0x56>
 800c722:	6875      	ldr	r5, [r6, #4]
 800c724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c726:	07d9      	lsls	r1, r3, #31
 800c728:	d405      	bmi.n	800c736 <_vfiprintf_r+0x32>
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	059a      	lsls	r2, r3, #22
 800c72e:	d402      	bmi.n	800c736 <_vfiprintf_r+0x32>
 800c730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c732:	f7ff f81a 	bl	800b76a <__retarget_lock_acquire_recursive>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	071b      	lsls	r3, r3, #28
 800c73a:	d501      	bpl.n	800c740 <_vfiprintf_r+0x3c>
 800c73c:	692b      	ldr	r3, [r5, #16]
 800c73e:	b9eb      	cbnz	r3, 800c77c <_vfiprintf_r+0x78>
 800c740:	4629      	mov	r1, r5
 800c742:	4630      	mov	r0, r6
 800c744:	f7fd fbfe 	bl	8009f44 <__swsetup_r>
 800c748:	b1c0      	cbz	r0, 800c77c <_vfiprintf_r+0x78>
 800c74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74c:	07dc      	lsls	r4, r3, #31
 800c74e:	d50e      	bpl.n	800c76e <_vfiprintf_r+0x6a>
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	b01d      	add	sp, #116	; 0x74
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	4b7b      	ldr	r3, [pc, #492]	; (800c948 <_vfiprintf_r+0x244>)
 800c75c:	429d      	cmp	r5, r3
 800c75e:	d101      	bne.n	800c764 <_vfiprintf_r+0x60>
 800c760:	68b5      	ldr	r5, [r6, #8]
 800c762:	e7df      	b.n	800c724 <_vfiprintf_r+0x20>
 800c764:	4b79      	ldr	r3, [pc, #484]	; (800c94c <_vfiprintf_r+0x248>)
 800c766:	429d      	cmp	r5, r3
 800c768:	bf08      	it	eq
 800c76a:	68f5      	ldreq	r5, [r6, #12]
 800c76c:	e7da      	b.n	800c724 <_vfiprintf_r+0x20>
 800c76e:	89ab      	ldrh	r3, [r5, #12]
 800c770:	0598      	lsls	r0, r3, #22
 800c772:	d4ed      	bmi.n	800c750 <_vfiprintf_r+0x4c>
 800c774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c776:	f7fe fff9 	bl	800b76c <__retarget_lock_release_recursive>
 800c77a:	e7e9      	b.n	800c750 <_vfiprintf_r+0x4c>
 800c77c:	2300      	movs	r3, #0
 800c77e:	9309      	str	r3, [sp, #36]	; 0x24
 800c780:	2320      	movs	r3, #32
 800c782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c786:	f8cd 800c 	str.w	r8, [sp, #12]
 800c78a:	2330      	movs	r3, #48	; 0x30
 800c78c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c950 <_vfiprintf_r+0x24c>
 800c790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c794:	f04f 0901 	mov.w	r9, #1
 800c798:	4623      	mov	r3, r4
 800c79a:	469a      	mov	sl, r3
 800c79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a0:	b10a      	cbz	r2, 800c7a6 <_vfiprintf_r+0xa2>
 800c7a2:	2a25      	cmp	r2, #37	; 0x25
 800c7a4:	d1f9      	bne.n	800c79a <_vfiprintf_r+0x96>
 800c7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7aa:	d00b      	beq.n	800c7c4 <_vfiprintf_r+0xc0>
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff ff93 	bl	800c6de <__sfputs_r>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f000 80aa 	beq.w	800c912 <_vfiprintf_r+0x20e>
 800c7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c0:	445a      	add	r2, fp
 800c7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80a2 	beq.w	800c912 <_vfiprintf_r+0x20e>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d8:	f10a 0a01 	add.w	sl, sl, #1
 800c7dc:	9304      	str	r3, [sp, #16]
 800c7de:	9307      	str	r3, [sp, #28]
 800c7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7e6:	4654      	mov	r4, sl
 800c7e8:	2205      	movs	r2, #5
 800c7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ee:	4858      	ldr	r0, [pc, #352]	; (800c950 <_vfiprintf_r+0x24c>)
 800c7f0:	f7f3 fcf6 	bl	80001e0 <memchr>
 800c7f4:	9a04      	ldr	r2, [sp, #16]
 800c7f6:	b9d8      	cbnz	r0, 800c830 <_vfiprintf_r+0x12c>
 800c7f8:	06d1      	lsls	r1, r2, #27
 800c7fa:	bf44      	itt	mi
 800c7fc:	2320      	movmi	r3, #32
 800c7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c802:	0713      	lsls	r3, r2, #28
 800c804:	bf44      	itt	mi
 800c806:	232b      	movmi	r3, #43	; 0x2b
 800c808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80c:	f89a 3000 	ldrb.w	r3, [sl]
 800c810:	2b2a      	cmp	r3, #42	; 0x2a
 800c812:	d015      	beq.n	800c840 <_vfiprintf_r+0x13c>
 800c814:	9a07      	ldr	r2, [sp, #28]
 800c816:	4654      	mov	r4, sl
 800c818:	2000      	movs	r0, #0
 800c81a:	f04f 0c0a 	mov.w	ip, #10
 800c81e:	4621      	mov	r1, r4
 800c820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c824:	3b30      	subs	r3, #48	; 0x30
 800c826:	2b09      	cmp	r3, #9
 800c828:	d94e      	bls.n	800c8c8 <_vfiprintf_r+0x1c4>
 800c82a:	b1b0      	cbz	r0, 800c85a <_vfiprintf_r+0x156>
 800c82c:	9207      	str	r2, [sp, #28]
 800c82e:	e014      	b.n	800c85a <_vfiprintf_r+0x156>
 800c830:	eba0 0308 	sub.w	r3, r0, r8
 800c834:	fa09 f303 	lsl.w	r3, r9, r3
 800c838:	4313      	orrs	r3, r2
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	46a2      	mov	sl, r4
 800c83e:	e7d2      	b.n	800c7e6 <_vfiprintf_r+0xe2>
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	1d19      	adds	r1, r3, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	9103      	str	r1, [sp, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bfbb      	ittet	lt
 800c84c:	425b      	neglt	r3, r3
 800c84e:	f042 0202 	orrlt.w	r2, r2, #2
 800c852:	9307      	strge	r3, [sp, #28]
 800c854:	9307      	strlt	r3, [sp, #28]
 800c856:	bfb8      	it	lt
 800c858:	9204      	strlt	r2, [sp, #16]
 800c85a:	7823      	ldrb	r3, [r4, #0]
 800c85c:	2b2e      	cmp	r3, #46	; 0x2e
 800c85e:	d10c      	bne.n	800c87a <_vfiprintf_r+0x176>
 800c860:	7863      	ldrb	r3, [r4, #1]
 800c862:	2b2a      	cmp	r3, #42	; 0x2a
 800c864:	d135      	bne.n	800c8d2 <_vfiprintf_r+0x1ce>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	1d1a      	adds	r2, r3, #4
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	9203      	str	r2, [sp, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfb8      	it	lt
 800c872:	f04f 33ff 	movlt.w	r3, #4294967295
 800c876:	3402      	adds	r4, #2
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c960 <_vfiprintf_r+0x25c>
 800c87e:	7821      	ldrb	r1, [r4, #0]
 800c880:	2203      	movs	r2, #3
 800c882:	4650      	mov	r0, sl
 800c884:	f7f3 fcac 	bl	80001e0 <memchr>
 800c888:	b140      	cbz	r0, 800c89c <_vfiprintf_r+0x198>
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	eba0 000a 	sub.w	r0, r0, sl
 800c890:	fa03 f000 	lsl.w	r0, r3, r0
 800c894:	9b04      	ldr	r3, [sp, #16]
 800c896:	4303      	orrs	r3, r0
 800c898:	3401      	adds	r4, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	482c      	ldr	r0, [pc, #176]	; (800c954 <_vfiprintf_r+0x250>)
 800c8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8a6:	2206      	movs	r2, #6
 800c8a8:	f7f3 fc9a 	bl	80001e0 <memchr>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d03f      	beq.n	800c930 <_vfiprintf_r+0x22c>
 800c8b0:	4b29      	ldr	r3, [pc, #164]	; (800c958 <_vfiprintf_r+0x254>)
 800c8b2:	bb1b      	cbnz	r3, 800c8fc <_vfiprintf_r+0x1f8>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	3307      	adds	r3, #7
 800c8b8:	f023 0307 	bic.w	r3, r3, #7
 800c8bc:	3308      	adds	r3, #8
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c2:	443b      	add	r3, r7
 800c8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c6:	e767      	b.n	800c798 <_vfiprintf_r+0x94>
 800c8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7a5      	b.n	800c81e <_vfiprintf_r+0x11a>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f04f 0c0a 	mov.w	ip, #10
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e4:	3a30      	subs	r2, #48	; 0x30
 800c8e6:	2a09      	cmp	r2, #9
 800c8e8:	d903      	bls.n	800c8f2 <_vfiprintf_r+0x1ee>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0c5      	beq.n	800c87a <_vfiprintf_r+0x176>
 800c8ee:	9105      	str	r1, [sp, #20]
 800c8f0:	e7c3      	b.n	800c87a <_vfiprintf_r+0x176>
 800c8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e7f0      	b.n	800c8de <_vfiprintf_r+0x1da>
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462a      	mov	r2, r5
 800c902:	4b16      	ldr	r3, [pc, #88]	; (800c95c <_vfiprintf_r+0x258>)
 800c904:	a904      	add	r1, sp, #16
 800c906:	4630      	mov	r0, r6
 800c908:	f7fb fd8e 	bl	8008428 <_printf_float>
 800c90c:	4607      	mov	r7, r0
 800c90e:	1c78      	adds	r0, r7, #1
 800c910:	d1d6      	bne.n	800c8c0 <_vfiprintf_r+0x1bc>
 800c912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c914:	07d9      	lsls	r1, r3, #31
 800c916:	d405      	bmi.n	800c924 <_vfiprintf_r+0x220>
 800c918:	89ab      	ldrh	r3, [r5, #12]
 800c91a:	059a      	lsls	r2, r3, #22
 800c91c:	d402      	bmi.n	800c924 <_vfiprintf_r+0x220>
 800c91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c920:	f7fe ff24 	bl	800b76c <__retarget_lock_release_recursive>
 800c924:	89ab      	ldrh	r3, [r5, #12]
 800c926:	065b      	lsls	r3, r3, #25
 800c928:	f53f af12 	bmi.w	800c750 <_vfiprintf_r+0x4c>
 800c92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c92e:	e711      	b.n	800c754 <_vfiprintf_r+0x50>
 800c930:	ab03      	add	r3, sp, #12
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	462a      	mov	r2, r5
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <_vfiprintf_r+0x258>)
 800c938:	a904      	add	r1, sp, #16
 800c93a:	4630      	mov	r0, r6
 800c93c:	f7fc f818 	bl	8008970 <_printf_i>
 800c940:	e7e4      	b.n	800c90c <_vfiprintf_r+0x208>
 800c942:	bf00      	nop
 800c944:	0800cff4 	.word	0x0800cff4
 800c948:	0800d014 	.word	0x0800d014
 800c94c:	0800cfd4 	.word	0x0800cfd4
 800c950:	0800d20c 	.word	0x0800d20c
 800c954:	0800d216 	.word	0x0800d216
 800c958:	08008429 	.word	0x08008429
 800c95c:	0800c6df 	.word	0x0800c6df
 800c960:	0800d212 	.word	0x0800d212
 800c964:	00000000 	.word	0x00000000

0800c968 <nan>:
 800c968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c970 <nan+0x8>
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	00000000 	.word	0x00000000
 800c974:	7ff80000 	.word	0x7ff80000

0800c978 <_sbrk_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d06      	ldr	r5, [pc, #24]	; (800c994 <_sbrk_r+0x1c>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	f7f5 f894 	bl	8001ab0 <_sbrk>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d102      	bne.n	800c992 <_sbrk_r+0x1a>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	b103      	cbz	r3, 800c992 <_sbrk_r+0x1a>
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	20000508 	.word	0x20000508

0800c998 <__sread>:
 800c998:	b510      	push	{r4, lr}
 800c99a:	460c      	mov	r4, r1
 800c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a0:	f000 f93a 	bl	800cc18 <_read_r>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	bfab      	itete	ge
 800c9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c9ac:	181b      	addge	r3, r3, r0
 800c9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9b2:	bfac      	ite	ge
 800c9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9b6:	81a3      	strhlt	r3, [r4, #12]
 800c9b8:	bd10      	pop	{r4, pc}

0800c9ba <__swrite>:
 800c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9be:	461f      	mov	r7, r3
 800c9c0:	898b      	ldrh	r3, [r1, #12]
 800c9c2:	05db      	lsls	r3, r3, #23
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	4616      	mov	r6, r2
 800c9ca:	d505      	bpl.n	800c9d8 <__swrite+0x1e>
 800c9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f000 f8b8 	bl	800cb48 <_lseek_r>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ee:	f000 b837 	b.w	800ca60 <_write_r>

0800c9f2 <__sseek>:
 800c9f2:	b510      	push	{r4, lr}
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fa:	f000 f8a5 	bl	800cb48 <_lseek_r>
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	bf15      	itete	ne
 800ca04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca0e:	81a3      	strheq	r3, [r4, #12]
 800ca10:	bf18      	it	ne
 800ca12:	81a3      	strhne	r3, [r4, #12]
 800ca14:	bd10      	pop	{r4, pc}

0800ca16 <__sclose>:
 800ca16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1a:	f000 b851 	b.w	800cac0 <_close_r>

0800ca1e <strncmp>:
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	b17a      	cbz	r2, 800ca42 <strncmp+0x24>
 800ca22:	4603      	mov	r3, r0
 800ca24:	3901      	subs	r1, #1
 800ca26:	1884      	adds	r4, r0, r2
 800ca28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ca30:	4290      	cmp	r0, r2
 800ca32:	d101      	bne.n	800ca38 <strncmp+0x1a>
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	d101      	bne.n	800ca3c <strncmp+0x1e>
 800ca38:	1a80      	subs	r0, r0, r2
 800ca3a:	bd10      	pop	{r4, pc}
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d1f3      	bne.n	800ca28 <strncmp+0xa>
 800ca40:	e7fa      	b.n	800ca38 <strncmp+0x1a>
 800ca42:	4610      	mov	r0, r2
 800ca44:	e7f9      	b.n	800ca3a <strncmp+0x1c>

0800ca46 <__ascii_wctomb>:
 800ca46:	b149      	cbz	r1, 800ca5c <__ascii_wctomb+0x16>
 800ca48:	2aff      	cmp	r2, #255	; 0xff
 800ca4a:	bf85      	ittet	hi
 800ca4c:	238a      	movhi	r3, #138	; 0x8a
 800ca4e:	6003      	strhi	r3, [r0, #0]
 800ca50:	700a      	strbls	r2, [r1, #0]
 800ca52:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca56:	bf98      	it	ls
 800ca58:	2001      	movls	r0, #1
 800ca5a:	4770      	bx	lr
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	4770      	bx	lr

0800ca60 <_write_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	; (800ca80 <_write_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f4 fc10 	bl	8001294 <_write>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_write_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_write_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	20000508 	.word	0x20000508

0800ca84 <__assert_func>:
 800ca84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca86:	4614      	mov	r4, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <__assert_func+0x2c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4605      	mov	r5, r0
 800ca90:	68d8      	ldr	r0, [r3, #12]
 800ca92:	b14c      	cbz	r4, 800caa8 <__assert_func+0x24>
 800ca94:	4b07      	ldr	r3, [pc, #28]	; (800cab4 <__assert_func+0x30>)
 800ca96:	9100      	str	r1, [sp, #0]
 800ca98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca9c:	4906      	ldr	r1, [pc, #24]	; (800cab8 <__assert_func+0x34>)
 800ca9e:	462b      	mov	r3, r5
 800caa0:	f000 f81e 	bl	800cae0 <fiprintf>
 800caa4:	f000 f8ca 	bl	800cc3c <abort>
 800caa8:	4b04      	ldr	r3, [pc, #16]	; (800cabc <__assert_func+0x38>)
 800caaa:	461c      	mov	r4, r3
 800caac:	e7f3      	b.n	800ca96 <__assert_func+0x12>
 800caae:	bf00      	nop
 800cab0:	2000000c 	.word	0x2000000c
 800cab4:	0800d21d 	.word	0x0800d21d
 800cab8:	0800d22a 	.word	0x0800d22a
 800cabc:	0800d258 	.word	0x0800d258

0800cac0 <_close_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d06      	ldr	r5, [pc, #24]	; (800cadc <_close_r+0x1c>)
 800cac4:	2300      	movs	r3, #0
 800cac6:	4604      	mov	r4, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	602b      	str	r3, [r5, #0]
 800cacc:	f7f4 ffbb 	bl	8001a46 <_close>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d102      	bne.n	800cada <_close_r+0x1a>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	b103      	cbz	r3, 800cada <_close_r+0x1a>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	20000508 	.word	0x20000508

0800cae0 <fiprintf>:
 800cae0:	b40e      	push	{r1, r2, r3}
 800cae2:	b503      	push	{r0, r1, lr}
 800cae4:	4601      	mov	r1, r0
 800cae6:	ab03      	add	r3, sp, #12
 800cae8:	4805      	ldr	r0, [pc, #20]	; (800cb00 <fiprintf+0x20>)
 800caea:	f853 2b04 	ldr.w	r2, [r3], #4
 800caee:	6800      	ldr	r0, [r0, #0]
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f7ff fe07 	bl	800c704 <_vfiprintf_r>
 800caf6:	b002      	add	sp, #8
 800caf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cafc:	b003      	add	sp, #12
 800cafe:	4770      	bx	lr
 800cb00:	2000000c 	.word	0x2000000c

0800cb04 <_fstat_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	; (800cb24 <_fstat_r+0x20>)
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	4608      	mov	r0, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	f7f4 ffa4 	bl	8001a5e <_fstat>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d102      	bne.n	800cb20 <_fstat_r+0x1c>
 800cb1a:	682b      	ldr	r3, [r5, #0]
 800cb1c:	b103      	cbz	r3, 800cb20 <_fstat_r+0x1c>
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	bd38      	pop	{r3, r4, r5, pc}
 800cb22:	bf00      	nop
 800cb24:	20000508 	.word	0x20000508

0800cb28 <_isatty_r>:
 800cb28:	b538      	push	{r3, r4, r5, lr}
 800cb2a:	4d06      	ldr	r5, [pc, #24]	; (800cb44 <_isatty_r+0x1c>)
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	4608      	mov	r0, r1
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	f7f4 ffa3 	bl	8001a7e <_isatty>
 800cb38:	1c43      	adds	r3, r0, #1
 800cb3a:	d102      	bne.n	800cb42 <_isatty_r+0x1a>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	b103      	cbz	r3, 800cb42 <_isatty_r+0x1a>
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	bd38      	pop	{r3, r4, r5, pc}
 800cb44:	20000508 	.word	0x20000508

0800cb48 <_lseek_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4d07      	ldr	r5, [pc, #28]	; (800cb68 <_lseek_r+0x20>)
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	4608      	mov	r0, r1
 800cb50:	4611      	mov	r1, r2
 800cb52:	2200      	movs	r2, #0
 800cb54:	602a      	str	r2, [r5, #0]
 800cb56:	461a      	mov	r2, r3
 800cb58:	f7f4 ff9c 	bl	8001a94 <_lseek>
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d102      	bne.n	800cb66 <_lseek_r+0x1e>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	b103      	cbz	r3, 800cb66 <_lseek_r+0x1e>
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	20000508 	.word	0x20000508

0800cb6c <memmove>:
 800cb6c:	4288      	cmp	r0, r1
 800cb6e:	b510      	push	{r4, lr}
 800cb70:	eb01 0402 	add.w	r4, r1, r2
 800cb74:	d902      	bls.n	800cb7c <memmove+0x10>
 800cb76:	4284      	cmp	r4, r0
 800cb78:	4623      	mov	r3, r4
 800cb7a:	d807      	bhi.n	800cb8c <memmove+0x20>
 800cb7c:	1e43      	subs	r3, r0, #1
 800cb7e:	42a1      	cmp	r1, r4
 800cb80:	d008      	beq.n	800cb94 <memmove+0x28>
 800cb82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb8a:	e7f8      	b.n	800cb7e <memmove+0x12>
 800cb8c:	4402      	add	r2, r0
 800cb8e:	4601      	mov	r1, r0
 800cb90:	428a      	cmp	r2, r1
 800cb92:	d100      	bne.n	800cb96 <memmove+0x2a>
 800cb94:	bd10      	pop	{r4, pc}
 800cb96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb9e:	e7f7      	b.n	800cb90 <memmove+0x24>

0800cba0 <__malloc_lock>:
 800cba0:	4801      	ldr	r0, [pc, #4]	; (800cba8 <__malloc_lock+0x8>)
 800cba2:	f7fe bde2 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800cba6:	bf00      	nop
 800cba8:	200004fc 	.word	0x200004fc

0800cbac <__malloc_unlock>:
 800cbac:	4801      	ldr	r0, [pc, #4]	; (800cbb4 <__malloc_unlock+0x8>)
 800cbae:	f7fe bddd 	b.w	800b76c <__retarget_lock_release_recursive>
 800cbb2:	bf00      	nop
 800cbb4:	200004fc 	.word	0x200004fc

0800cbb8 <_realloc_r>:
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	4614      	mov	r4, r2
 800cbc0:	460e      	mov	r6, r1
 800cbc2:	b921      	cbnz	r1, 800cbce <_realloc_r+0x16>
 800cbc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	4611      	mov	r1, r2
 800cbca:	f7ff bba1 	b.w	800c310 <_malloc_r>
 800cbce:	b92a      	cbnz	r2, 800cbdc <_realloc_r+0x24>
 800cbd0:	f7ff fb32 	bl	800c238 <_free_r>
 800cbd4:	4625      	mov	r5, r4
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbdc:	f000 f835 	bl	800cc4a <_malloc_usable_size_r>
 800cbe0:	4284      	cmp	r4, r0
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	d802      	bhi.n	800cbec <_realloc_r+0x34>
 800cbe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbea:	d812      	bhi.n	800cc12 <_realloc_r+0x5a>
 800cbec:	4621      	mov	r1, r4
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f7ff fb8e 	bl	800c310 <_malloc_r>
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d0ed      	beq.n	800cbd6 <_realloc_r+0x1e>
 800cbfa:	42bc      	cmp	r4, r7
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4631      	mov	r1, r6
 800cc00:	bf28      	it	cs
 800cc02:	463a      	movcs	r2, r7
 800cc04:	f7fe fe32 	bl	800b86c <memcpy>
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7ff fb14 	bl	800c238 <_free_r>
 800cc10:	e7e1      	b.n	800cbd6 <_realloc_r+0x1e>
 800cc12:	4635      	mov	r5, r6
 800cc14:	e7df      	b.n	800cbd6 <_realloc_r+0x1e>
	...

0800cc18 <_read_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4d07      	ldr	r5, [pc, #28]	; (800cc38 <_read_r+0x20>)
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	4608      	mov	r0, r1
 800cc20:	4611      	mov	r1, r2
 800cc22:	2200      	movs	r2, #0
 800cc24:	602a      	str	r2, [r5, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	f7f4 fef0 	bl	8001a0c <_read>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_read_r+0x1e>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_read_r+0x1e>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	20000508 	.word	0x20000508

0800cc3c <abort>:
 800cc3c:	b508      	push	{r3, lr}
 800cc3e:	2006      	movs	r0, #6
 800cc40:	f000 f834 	bl	800ccac <raise>
 800cc44:	2001      	movs	r0, #1
 800cc46:	f7f4 fed7 	bl	80019f8 <_exit>

0800cc4a <_malloc_usable_size_r>:
 800cc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc4e:	1f18      	subs	r0, r3, #4
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bfbc      	itt	lt
 800cc54:	580b      	ldrlt	r3, [r1, r0]
 800cc56:	18c0      	addlt	r0, r0, r3
 800cc58:	4770      	bx	lr

0800cc5a <_raise_r>:
 800cc5a:	291f      	cmp	r1, #31
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4604      	mov	r4, r0
 800cc60:	460d      	mov	r5, r1
 800cc62:	d904      	bls.n	800cc6e <_raise_r+0x14>
 800cc64:	2316      	movs	r3, #22
 800cc66:	6003      	str	r3, [r0, #0]
 800cc68:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6c:	bd38      	pop	{r3, r4, r5, pc}
 800cc6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc70:	b112      	cbz	r2, 800cc78 <_raise_r+0x1e>
 800cc72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc76:	b94b      	cbnz	r3, 800cc8c <_raise_r+0x32>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f831 	bl	800cce0 <_getpid_r>
 800cc7e:	462a      	mov	r2, r5
 800cc80:	4601      	mov	r1, r0
 800cc82:	4620      	mov	r0, r4
 800cc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc88:	f000 b818 	b.w	800ccbc <_kill_r>
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d00a      	beq.n	800cca6 <_raise_r+0x4c>
 800cc90:	1c59      	adds	r1, r3, #1
 800cc92:	d103      	bne.n	800cc9c <_raise_r+0x42>
 800cc94:	2316      	movs	r3, #22
 800cc96:	6003      	str	r3, [r0, #0]
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e7e7      	b.n	800cc6c <_raise_r+0x12>
 800cc9c:	2400      	movs	r4, #0
 800cc9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cca2:	4628      	mov	r0, r5
 800cca4:	4798      	blx	r3
 800cca6:	2000      	movs	r0, #0
 800cca8:	e7e0      	b.n	800cc6c <_raise_r+0x12>
	...

0800ccac <raise>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <raise+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f7ff bfd2 	b.w	800cc5a <_raise_r>
 800ccb6:	bf00      	nop
 800ccb8:	2000000c 	.word	0x2000000c

0800ccbc <_kill_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d07      	ldr	r5, [pc, #28]	; (800ccdc <_kill_r+0x20>)
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	602b      	str	r3, [r5, #0]
 800ccca:	f7f4 fe85 	bl	80019d8 <_kill>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	d102      	bne.n	800ccd8 <_kill_r+0x1c>
 800ccd2:	682b      	ldr	r3, [r5, #0]
 800ccd4:	b103      	cbz	r3, 800ccd8 <_kill_r+0x1c>
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	bd38      	pop	{r3, r4, r5, pc}
 800ccda:	bf00      	nop
 800ccdc:	20000508 	.word	0x20000508

0800cce0 <_getpid_r>:
 800cce0:	f7f4 be72 	b.w	80019c8 <_getpid>

0800cce4 <_init>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	bf00      	nop
 800cce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccea:	bc08      	pop	{r3}
 800ccec:	469e      	mov	lr, r3
 800ccee:	4770      	bx	lr

0800ccf0 <_fini>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	bf00      	nop
 800ccf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf6:	bc08      	pop	{r3}
 800ccf8:	469e      	mov	lr, r3
 800ccfa:	4770      	bx	lr
