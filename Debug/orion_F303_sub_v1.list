
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b80  08007b80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007b80  08007b80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b80  08007b80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000278  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015158  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300d  00000000  00000000  000351f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00038208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  00039340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e54  00000000  00000000  0003a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a7e  00000000  00000000  0005b174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3ef1  00000000  00000000  00072bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136ae3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed8  00000000  00000000  00136b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a78 	.word	0x08007a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007a78 	.word	0x08007a78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_ADC4_Init>:

ADC_HandleTypeDef hadc4;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	463b      	mov	r3, r7
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000286:	4b27      	ldr	r3, [pc, #156]	; (8000324 <MX_ADC4_Init+0xb4>)
 8000288:	4a27      	ldr	r2, [pc, #156]	; (8000328 <MX_ADC4_Init+0xb8>)
 800028a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <MX_ADC4_Init+0xb4>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000292:	4b24      	ldr	r3, [pc, #144]	; (8000324 <MX_ADC4_Init+0xb4>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <MX_ADC4_Init+0xb4>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002ce:	2204      	movs	r2, #4
 80002d0:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <MX_ADC4_Init+0xb4>)
 80002e0:	f000 fe70 	bl	8000fc4 <HAL_ADC_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80002ea:	f000 fadb 	bl	80008a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ee:	2303      	movs	r3, #3
 80002f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000306:	463b      	mov	r3, r7
 8000308:	4619      	mov	r1, r3
 800030a:	4806      	ldr	r0, [pc, #24]	; (8000324 <MX_ADC4_Init+0xb4>)
 800030c:	f001 f83a 	bl	8001384 <HAL_ADC_ConfigChannel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000316:	f000 fac5 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000008c 	.word	0x2000008c
 8000328:	50000500 	.word	0x50000500

0800032c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC4)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <HAL_ADC_MspInit+0x74>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d124      	bne.n	8000398 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* ADC4 clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 8000354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 800036c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_ADC_MspInit+0x78>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB12     ------> ADC4_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800037e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000384:	2303      	movs	r3, #3
 8000386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	4619      	mov	r1, r3
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <HAL_ADC_MspInit+0x7c>)
 8000394:	f002 fbf4 	bl	8002b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	; 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	50000500 	.word	0x50000500
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000400 	.word	0x48000400

080003ac <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_CAN_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <MX_CAN_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_CAN_Init+0x64>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_CAN_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_CAN_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_CAN_Init+0x64>)
 80003ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_CAN_Init+0x64>)
 80003d2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80003d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <MX_CAN_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_CAN_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_CAN_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_CAN_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_CAN_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_CAN_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_CAN_Init+0x64>)
 80003fe:	f001 fb13 	bl	8001a28 <HAL_CAN_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000408:	f000 fa4c 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200000dc 	.word	0x200000dc
 8000414:	40006400 	.word	0x40006400

08000418 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <HAL_CAN_MspInit+0xa0>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d139      	bne.n	80004ae <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 8000440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a19      	ldr	r2, [pc, #100]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_CAN_MspInit+0xa4>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800046a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800046e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800047c:	2309      	movs	r3, #9
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f002 fb79 	bl	8002b80 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	2013      	movs	r0, #19
 8000494:	f002 f913 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000498:	2013      	movs	r0, #19
 800049a:	f002 f92c 	bl	80026f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	2014      	movs	r0, #20
 80004a4:	f002 f90b 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80004a8:	2014      	movs	r0, #20
 80004aa:	f002 f924 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004ae:	bf00      	nop
 80004b0:	3728      	adds	r7, #40	; 0x28
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40006400 	.word	0x40006400
 80004bc:	40021000 	.word	0x40021000

080004c0 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	3380      	adds	r3, #128	; 0x80
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	015b      	lsls	r3, r3, #5
 80004de:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterIdLow = (0x300 + board_addr * 2) << 5;
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	015b      	lsls	r3, r3, #5
 80004ea:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	f203 1301 	addw	r3, r3, #257	; 0x101
 80004f4:	015b      	lsls	r3, r3, #5
 80004f6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr * 2) << 5;
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	f203 3301 	addw	r3, r3, #769	; 0x301
 8000500:	015b      	lsls	r3, r3, #5
 8000502:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.SlaveStartFilterBank = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	4619      	mov	r1, r3
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <CAN_Filter_Init+0x80>)
 8000518:	f001 fb81 	bl	8001c1e <HAL_CAN_ConfigFilter>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <CAN_Filter_Init+0x66>
  {
    Error_Handler();
 8000522:	f000 f9bf 	bl	80008a4 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000526:	2102      	movs	r1, #2
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <CAN_Filter_Init+0x80>)
 800052a:	f001 fd98 	bl	800205e <HAL_CAN_ActivateNotification>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <CAN_Filter_Init+0x78>
  {
    Error_Handler();
 8000534:	f000 f9b6 	bl	80008a4 <Error_Handler>
  }
}
 8000538:	bf00      	nop
 800053a:	3730      	adds	r7, #48	; 0x30
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000dc 	.word	0x200000dc

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_DMA_Init+0x38>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <MX_DMA_Init+0x38>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_DMA_Init+0x38>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	200e      	movs	r0, #14
 8000568:	f002 f8a9 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800056c:	200e      	movs	r0, #14
 800056e:	f002 f8c2 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <MX_GPIO_Init+0xf0>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a35      	ldr	r2, [pc, #212]	; (8000670 <MX_GPIO_Init+0xf0>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a29      	ldr	r2, [pc, #164]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_GPIO_Init+0xf0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	21f8      	movs	r1, #248	; 0xf8
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f002 fc45 	bl	8002e74 <HAL_GPIO_WritePin>
                          |LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005f0:	4820      	ldr	r0, [pc, #128]	; (8000674 <MX_GPIO_Init+0xf4>)
 80005f2:	f002 fc3f 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80005f6:	23f8      	movs	r3, #248	; 0xf8
 80005f8:	60fb      	str	r3, [r7, #12]
                          |LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f002 fab6 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin;
 8000614:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <MX_GPIO_Init+0xf4>)
 800062e:	f002 faa7 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_0_Pin;
 8000632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_0_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <MX_GPIO_Init+0xf4>)
 8000648:	f002 fa9a 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 800064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f002 fa8c 	bl	8002b80 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400

08000678 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	b29b      	uxth	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <_write+0x24>)
 800068e:	f004 ff41 	bl	8005514 <HAL_UART_Transmit_DMA>
	return len;
 8000692:	687b      	ldr	r3, [r7, #4]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000188 	.word	0x20000188

080006a0 <HAL_UART_RxCpltCallback>:

uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uart_rx_flag = true;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_UART_RxCpltCallback+0x1c>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000010e 	.word	0x2000010e

080006c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f001 fbb3 	bl	8001e3a <HAL_CAN_GetRxMessage>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 80006da:	f000 f8e3 	bl	80008a4 <Error_Handler>
	}

	can_rx_cnt++;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80006e6:	6013      	str	r3, [r2, #0]
	switch (can_rx_header.StdId)
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80006f0:	d212      	bcs.n	8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 80006f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006f6:	d312      	bcc.n	800071e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 80006f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d80e      	bhi.n	800071e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8000700:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	0800071f 	.word	0x0800071f
 800070c:	0800071f 	.word	0x0800071f
 8000710:	0800071f 	.word	0x0800071f
 8000714:	0800071f 	.word	0x0800071f
 8000718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800071c:	d001      	beq.n	8000722 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	case 0x103:
		break;
	case 0x300:
		break;
	default:
		break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		break;
 8000722:	bf00      	nop
	}
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000114 	.word	0x20000114
 8000730:	2000011c 	.word	0x2000011c
 8000734:	20000110 	.word	0x20000110

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fbb8 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f850 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff ff1c 	bl	8000580 <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f7ff fefc 	bl	8000544 <MX_DMA_Init>
  MX_CAN_Init();
 800074c:	f7ff fe2e 	bl	80003ac <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000750:	f000 fa7c 	bl	8000c4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000754:	f000 faaa 	bl	8000cac <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8000758:	f7ff fd8a 	bl	8000270 <MX_ADC4_Init>
  MX_TIM3_Init();
 800075c:	f000 f9b8 	bl	8000ad0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board!!\n");
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <main+0x8c>)
 8000762:	f006 fa0b 	bl	8006b7c <puts>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	4917      	ldr	r1, [pc, #92]	; (80007c8 <main+0x90>)
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0x94>)
 800076c:	f004 fe84 	bl	8005478 <HAL_UART_Receive_IT>
	CAN_Filter_Init(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fea5 	bl	80004c0 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 8000776:	4816      	ldr	r0, [pc, #88]	; (80007d0 <main+0x98>)
 8000778:	f001 fb1b 	bl	8001db2 <HAL_CAN_Start>

	HAL_TIM_PWM_Init(&htim3);
 800077c:	4815      	ldr	r0, [pc, #84]	; (80007d4 <main+0x9c>)
 800077e:	f003 ffb5 	bl	80046ec <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000782:	2108      	movs	r1, #8
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <main+0x9c>)
 8000786:	f004 f809 	bl	800479c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800078a:	210c      	movs	r1, #12
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <main+0x9c>)
 800078e:	f004 f805 	bl	800479c <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if (uart_rx_flag)
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <main+0xa0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d007      	beq.n	80007aa <main+0x72>
		{
			uart_rx_flag = false;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0xa0>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	4909      	ldr	r1, [pc, #36]	; (80007c8 <main+0x90>)
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <main+0x94>)
 80007a6:	f004 fe67 	bl	8005478 <HAL_UART_Receive_IT>
		}
		HAL_Delay(100);
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f000 fbe6 	bl	8000f7c <HAL_Delay>
		printf("rx cnt %d\n",can_rx_cnt);
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <main+0xa4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <main+0xa8>)
 80007b8:	f006 f95a 	bl	8006a70 <iprintf>
		can_rx_cnt = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0xa4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
		if (uart_rx_flag)
 80007c2:	e7e6      	b.n	8000792 <main+0x5a>
 80007c4:	08007a90 	.word	0x08007a90
 80007c8:	20000104 	.word	0x20000104
 80007cc:	20000188 	.word	0x20000188
 80007d0:	200000dc 	.word	0x200000dc
 80007d4:	2000013c 	.word	0x2000013c
 80007d8:	2000010e 	.word	0x2000010e
 80007dc:	20000110 	.word	0x20000110
 80007e0:	08007aa4 	.word	0x08007aa4

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09e      	sub	sp, #120	; 0x78
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 f934 	bl	8006a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	223c      	movs	r2, #60	; 0x3c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f006 f926 	bl	8006a60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000822:	2301      	movs	r3, #1
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000830:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000834:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb32 	bl	8002ea4 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000846:	f000 f82d 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fb5a 	bl	8003f20 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000872:	f000 f817 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000876:	f240 1305 	movw	r3, #261	; 0x105
 800087a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fd7d 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000898:	f000 f804 	bl	80008a4 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3778      	adds	r7, #120	; 0x78
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 fafa 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <DMA1_Channel4_IRQHandler+0x10>)
 8000952:	f002 f807 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000290 	.word	0x20000290

08000960 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8000966:	f001 fba0 	bl	80020aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000dc 	.word	0x200000dc

08000974 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800097a:	f001 fb96 	bl	80020aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc

08000988 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <USART1_IRQHandler+0x10>)
 800098e:	f004 fe51 	bl	8005634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000188 	.word	0x20000188

0800099c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
	}

return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f005 ffcc 	bl	8006a0c <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20008000 	.word	0x20008000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000138 	.word	0x20000138
 8000aa8:	200002e8 	.word	0x200002e8

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <MX_TIM3_Init+0xc8>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000afc:	2248      	movs	r2, #72	; 0x48
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b08:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b1c:	f003 fde6 	bl	80046ec <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b26:	f7ff febd 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b3a:	f004 fbcf 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b44:	f7ff feae 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8000b4c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000b50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b62:	f003 ff1b 	bl	800499c <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000b6c:	f7ff fe9a 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	220c      	movs	r2, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b78:	f003 ff10 	bl	800499c <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000b82:	f7ff fe8f 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM3_Init+0xc4>)
 8000b88:	f000 f828 	bl	8000bdc <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000013c 	.word	0x2000013c
 8000b98:	40000400 	.word	0x40000400

08000b9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x38>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10b      	bne.n	8000bc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_TIM_MspPostInit+0x64>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d11b      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_TIM_MspPostInit+0x68>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_TIM_MspPostInit+0x68>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c16:	2303      	movs	r3, #3
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_TIM_MspPostInit+0x6c>)
 8000c32:	f001 ffa5 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40000400 	.word	0x40000400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <MX_USART1_UART_Init+0x5c>)
 8000c5a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c70:	220c      	movs	r2, #12
 8000c72:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c8e:	f004 fba5 	bl	80053dc <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000c98:	f7ff fe04 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000188 	.word	0x20000188
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	001e8480 	.word	0x001e8480

08000cac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_USART3_UART_Init+0x5c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cf0:	f004 fb74 	bl	80053dc <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f7ff fdd3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000020c 	.word	0x2000020c
 8000d08:	40004800 	.word	0x40004800

08000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <HAL_UART_MspInit+0x138>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d158      	bne.n	8000de0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d70:	2307      	movs	r3, #7
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f001 feff 	bl	8002b80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <HAL_UART_MspInit+0x144>)
 8000d86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000db4:	f001 fcb9 	bl	800272a <HAL_DMA_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000dbe:	f7ff fd71 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000dc6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2025      	movs	r0, #37	; 0x25
 8000dd4:	f001 fc73 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dd8:	2025      	movs	r0, #37	; 0x25
 8000dda:	f001 fc8c 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dde:	e02d      	b.n	8000e3c <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x148>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d128      	bne.n	8000e3c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <HAL_UART_MspInit+0x14c>)
 8000e38:	f001 fea2 	bl	8002b80 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	20000290 	.word	0x20000290
 8000e50:	40020044 	.word	0x40020044
 8000e54:	40004800 	.word	0x40004800
 8000e58:	48000400 	.word	0x48000400

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e86:	f7ff fe11 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f005 fdc5 	bl	8006a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fc53 	bl	8000738 <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea0:	08007b88 	.word	0x08007b88
  ldr r2, =_sbss
 8000ea4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea8:	200002e8 	.word	0x200002e8

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f001 fbf1 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fcf0 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fc09 	bl	8002712 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f001 fbd1 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200002d4 	.word	0x200002d4

08000f64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200002d4 	.word	0x200002d4

08000f7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09a      	sub	sp, #104	; 0x68
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e1c9      	b.n	8001378 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d176      	bne.n	80010e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d152      	bne.n	80010a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff f987 	bl	800032c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d13b      	bne.n	80010a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fc95 	bl	800195c <ADC_Disable>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12f      	bne.n	80010a4 <HAL_ADC_Init+0xe0>
 8001044:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12b      	bne.n	80010a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001054:	f023 0302 	bic.w	r3, r3, #2
 8001058:	f043 0202 	orr.w	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800106e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800107e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001080:	4b86      	ldr	r3, [pc, #536]	; (800129c <HAL_ADC_Init+0x2d8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a86      	ldr	r2, [pc, #536]	; (80012a0 <HAL_ADC_Init+0x2dc>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9a      	lsrs	r2, r3, #18
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001096:	e002      	b.n	800109e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3b01      	subs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f9      	bne.n	8001098 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c0:	d110      	bne.n	80010e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f023 0312 	bic.w	r3, r3, #18
 80010ca:	f043 0210 	orr.w	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 8136 	bne.w	800135e <HAL_ADC_Init+0x39a>
 80010f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8131 	bne.w	800135e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8129 	bne.w	800135e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001124:	d004      	beq.n	8001130 <HAL_ADC_Init+0x16c>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <HAL_ADC_Init+0x2e0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_ADC_Init+0x170>
 8001130:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_ADC_Init+0x2e4>)
 8001132:	e000      	b.n	8001136 <HAL_ADC_Init+0x172>
 8001134:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <HAL_ADC_Init+0x2e8>)
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001140:	d102      	bne.n	8001148 <HAL_ADC_Init+0x184>
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <HAL_ADC_Init+0x2e0>)
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e01a      	b.n	800117e <HAL_ADC_Init+0x1ba>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_ADC_Init+0x2e0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d103      	bne.n	800115a <HAL_ADC_Init+0x196>
 8001152:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e011      	b.n	800117e <HAL_ADC_Init+0x1ba>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_ADC_Init+0x2ec>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d102      	bne.n	800116a <HAL_ADC_Init+0x1a6>
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_ADC_Init+0x2f0>)
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e009      	b.n	800117e <HAL_ADC_Init+0x1ba>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_ADC_Init+0x2f0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d102      	bne.n	800117a <HAL_ADC_Init+0x1b6>
 8001174:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <HAL_ADC_Init+0x2ec>)
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e001      	b.n	800117e <HAL_ADC_Init+0x1ba>
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <HAL_ADC_Init+0x1da>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x1da>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_ADC_Init+0x1dc>
 800119e:	2300      	movs	r3, #0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d11c      	bne.n	80011de <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d010      	beq.n	80011cc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_ADC_Init+0x202>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_Init+0x202>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_ADC_Init+0x204>
 80011c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d108      	bne.n	80011de <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	431a      	orrs	r2, r3
 80011da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e5b      	ldrb	r3, [r3, #25]
 80011e2:	035b      	lsls	r3, r3, #13
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d002      	beq.n	80011f2 <HAL_ADC_Init+0x22e>
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	e000      	b.n	80011f4 <HAL_ADC_Init+0x230>
 80011f2:	2200      	movs	r2, #0
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4313      	orrs	r3, r2
 8001202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001204:	4313      	orrs	r3, r2
 8001206:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11b      	bne.n	800124a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e5b      	ldrb	r3, [r3, #25]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	3b01      	subs	r3, #1
 8001220:	045a      	lsls	r2, r3, #17
 8001222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001224:	4313      	orrs	r3, r2
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	663b      	str	r3, [r7, #96]	; 0x60
 800122c:	e00d      	b.n	800124a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001236:	f043 0220 	orr.w	r2, r3, #32
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	2b01      	cmp	r3, #1
 8001250:	d03a      	beq.n	80012c8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_ADC_Init+0x2ec>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d004      	beq.n	8001266 <HAL_ADC_Init+0x2a2>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_ADC_Init+0x2f0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d128      	bne.n	80012b8 <HAL_ADC_Init+0x2f4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800126e:	d012      	beq.n	8001296 <HAL_ADC_Init+0x2d2>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001278:	d00a      	beq.n	8001290 <HAL_ADC_Init+0x2cc>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001282:	d002      	beq.n	800128a <HAL_ADC_Init+0x2c6>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	e018      	b.n	80012bc <HAL_ADC_Init+0x2f8>
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128e:	e015      	b.n	80012bc <HAL_ADC_Init+0x2f8>
 8001290:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001294:	e012      	b.n	80012bc <HAL_ADC_Init+0x2f8>
 8001296:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800129a:	e00f      	b.n	80012bc <HAL_ADC_Init+0x2f8>
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83
 80012a4:	50000100 	.word	0x50000100
 80012a8:	50000300 	.word	0x50000300
 80012ac:	50000700 	.word	0x50000700
 80012b0:	50000400 	.word	0x50000400
 80012b4:	50000500 	.word	0x50000500
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c4:	4313      	orrs	r3, r2
 80012c6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d114      	bne.n	8001300 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012e4:	f023 0302 	bic.w	r3, r3, #2
 80012e8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e1b      	ldrb	r3, [r3, #24]
 80012ee:	039a      	lsls	r2, r3, #14
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4313      	orrs	r3, r2
 80012fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fc:	4313      	orrs	r3, r2
 80012fe:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_ADC_Init+0x3bc>)
 8001308:	4013      	ands	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001310:	430b      	orrs	r3, r1
 8001312:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10c      	bne.n	8001336 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f023 010f 	bic.w	r1, r3, #15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
 8001334:	e007      	b.n	8001346 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020f 	bic.w	r2, r2, #15
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
 800135c:	e00a      	b.n	8001374 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 0312 	bic.w	r3, r3, #18
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001378:	4618      	mov	r0, r3
 800137a:	3768      	adds	r7, #104	; 0x68
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	fff0c007 	.word	0xfff0c007

08001384 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001384:	b480      	push	{r7}
 8001386:	b09b      	sub	sp, #108	; 0x6c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x22>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e2ca      	b.n	800193c <HAL_ADC_ConfigChannel+0x5b8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 82ae 	bne.w	800191a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d81c      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	461a      	mov	r2, r3
 80013da:	231f      	movs	r3, #31
 80013dc:	4093      	lsls	r3, r2
 80013de:	43db      	mvns	r3, r3
 80013e0:	4019      	ands	r1, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	e063      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b09      	cmp	r3, #9
 8001406:	d81e      	bhi.n	8001446 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3b1e      	subs	r3, #30
 800141c:	221f      	movs	r2, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	4019      	ands	r1, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	3b1e      	subs	r3, #30
 8001438:	fa00 f203 	lsl.w	r2, r0, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
 8001444:	e040      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b0e      	cmp	r3, #14
 800144c:	d81e      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	3b3c      	subs	r3, #60	; 0x3c
 8001462:	221f      	movs	r2, #31
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4019      	ands	r1, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	3b3c      	subs	r3, #60	; 0x3c
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
 800148a:	e01d      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3b5a      	subs	r3, #90	; 0x5a
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4019      	ands	r1, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3b5a      	subs	r3, #90	; 0x5a
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80e5 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d91c      	bls.n	800151a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6999      	ldr	r1, [r3, #24]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3b1e      	subs	r3, #30
 80014f2:	2207      	movs	r2, #7
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4019      	ands	r1, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6898      	ldr	r0, [r3, #8]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	3b1e      	subs	r3, #30
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	e019      	b.n	800154e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	2207      	movs	r2, #7
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	4019      	ands	r1, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6898      	ldr	r0, [r3, #8]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	fa00 f203 	lsl.w	r2, r0, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	2b03      	cmp	r3, #3
 800156e:	d84f      	bhi.n	8001610 <HAL_ADC_ConfigChannel+0x28c>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_ADC_ConfigChannel+0x1f4>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001589 	.word	0x08001589
 800157c:	080015ab 	.word	0x080015ab
 8001580:	080015cd 	.word	0x080015cd
 8001584:	080015ef 	.word	0x080015ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158e:	4b9a      	ldr	r3, [pc, #616]	; (80017f8 <HAL_ADC_ConfigChannel+0x474>)
 8001590:	4013      	ands	r3, r2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	0691      	lsls	r1, r2, #26
 8001598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800159a:	430a      	orrs	r2, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015a8:	e07e      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b0:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <HAL_ADC_ConfigChannel+0x474>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	0691      	lsls	r1, r2, #26
 80015ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015bc:	430a      	orrs	r2, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015ca:	e06d      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015d2:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <HAL_ADC_ConfigChannel+0x474>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	0691      	lsls	r1, r2, #26
 80015dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015de:	430a      	orrs	r2, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015ec:	e05c      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <HAL_ADC_ConfigChannel+0x474>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	0691      	lsls	r1, r2, #26
 80015fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001600:	430a      	orrs	r2, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800160c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800160e:	e04b      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	069b      	lsls	r3, r3, #26
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001632:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800163a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	069b      	lsls	r3, r3, #26
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001656:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800165e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	069b      	lsls	r3, r3, #26
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800167a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	069b      	lsls	r3, r3, #26
 800168c:	429a      	cmp	r2, r3
 800168e:	d10a      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800169e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016a0:	e001      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80016a6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x344>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x344>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_ADC_ConfigChannel+0x346>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8130 	bne.w	8001930 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00f      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	400a      	ands	r2, r1
 80016f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016f6:	e049      	b.n	800178c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b09      	cmp	r3, #9
 8001718:	d91c      	bls.n	8001754 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6999      	ldr	r1, [r3, #24]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	3b1b      	subs	r3, #27
 800172c:	2207      	movs	r2, #7
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	4019      	ands	r1, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6898      	ldr	r0, [r3, #8]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1b      	subs	r3, #27
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	e01b      	b.n	800178c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6959      	ldr	r1, [r3, #20]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	2207      	movs	r2, #7
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6898      	ldr	r0, [r3, #8]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001794:	d004      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x41c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <HAL_ADC_ConfigChannel+0x478>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x420>
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_ADC_ConfigChannel+0x47c>)
 80017a2:	e000      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x422>
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_ADC_ConfigChannel+0x480>)
 80017a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d015      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d105      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	f040 80ab 	bne.w	8001930 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80a4 	bne.w	8001930 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f0:	d10a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x484>
 80017f2:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_ADC_ConfigChannel+0x478>)
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e022      	b.n	800183e <HAL_ADC_ConfigChannel+0x4ba>
 80017f8:	83fff000 	.word	0x83fff000
 80017fc:	50000100 	.word	0x50000100
 8001800:	50000300 	.word	0x50000300
 8001804:	50000700 	.word	0x50000700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_ADC_ConfigChannel+0x5c4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d103      	bne.n	800181a <HAL_ADC_ConfigChannel+0x496>
 8001812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e011      	b.n	800183e <HAL_ADC_ConfigChannel+0x4ba>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_ADC_ConfigChannel+0x5c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <HAL_ADC_ConfigChannel+0x4a6>
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_ADC_ConfigChannel+0x5cc>)
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e009      	b.n	800183e <HAL_ADC_ConfigChannel+0x4ba>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a48      	ldr	r2, [pc, #288]	; (8001950 <HAL_ADC_ConfigChannel+0x5cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d102      	bne.n	800183a <HAL_ADC_ConfigChannel+0x4b6>
 8001834:	4b45      	ldr	r3, [pc, #276]	; (800194c <HAL_ADC_ConfigChannel+0x5c8>)
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e001      	b.n	800183e <HAL_ADC_ConfigChannel+0x4ba>
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_ADC_ConfigChannel+0x4da>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_ConfigChannel+0x4da>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x4dc>
 800185e:	2300      	movs	r3, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d150      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001864:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d010      	beq.n	800188c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x502>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x502>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_ADC_ConfigChannel+0x504>
 8001886:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001888:	2b00      	cmp	r3, #0
 800188a:	d13c      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b10      	cmp	r3, #16
 8001892:	d11d      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x54c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189c:	d118      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800189e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_ADC_ConfigChannel+0x5d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_ADC_ConfigChannel+0x5d4>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9a      	lsrs	r2, r3, #18
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c0:	e002      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ce:	e02e      	b.n	800192e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b11      	cmp	r3, #17
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x56c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ee:	e01e      	b.n	800192e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d11a      	bne.n	800192e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001904:	e013      	b.n	800192e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f043 0220 	orr.w	r2, r3, #32
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001918:	e00a      	b.n	8001930 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f043 0220 	orr.w	r2, r3, #32
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800192c:	e000      	b.n	8001930 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800192e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001938:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800193c:	4618      	mov	r0, r3
 800193e:	376c      	adds	r7, #108	; 0x6c
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	50000100 	.word	0x50000100
 800194c:	50000400 	.word	0x50000400
 8001950:	50000500 	.word	0x50000500
 8001954:	20000000 	.word	0x20000000
 8001958:	431bde83 	.word	0x431bde83

0800195c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <ADC_Disable+0x2c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <ADC_Disable+0x2c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <ADC_Disable+0x2e>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d047      	beq.n	8001a1e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030d 	and.w	r3, r3, #13
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10f      	bne.n	80019bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0202 	orr.w	r2, r2, #2
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2203      	movs	r2, #3
 80019b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fad6 	bl	8000f64 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ba:	e029      	b.n	8001a10 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e023      	b.n	8001a20 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d8:	f7ff fac4 	bl	8000f64 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d914      	bls.n	8001a10 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10d      	bne.n	8001a10 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e007      	b.n	8001a20 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d0dc      	beq.n	80019d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0ed      	b.n	8001c16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fce6 	bl	8000418 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7ff fa82 	bl	8000f64 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a62:	e012      	b.n	8001a8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a64:	f7ff fa7e 	bl	8000f64 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d90b      	bls.n	8001a8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2205      	movs	r2, #5
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0c5      	b.n	8001c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0e5      	beq.n	8001a64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0202 	bic.w	r2, r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa8:	f7ff fa5c 	bl	8000f64 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aae:	e012      	b.n	8001ad6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab0:	f7ff fa58 	bl	8000f64 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d90b      	bls.n	8001ad6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2205      	movs	r2, #5
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e09f      	b.n	8001c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e5      	bne.n	8001ab0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e1b      	ldrb	r3, [r3, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7e5b      	ldrb	r3, [r3, #25]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e007      	b.n	8001b38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e9b      	ldrb	r3, [r3, #26]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0220 	bic.w	r2, r2, #32
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7edb      	ldrb	r3, [r3, #27]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0210 	bic.w	r2, r2, #16
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e007      	b.n	8001b8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0210 	orr.w	r2, r2, #16
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7f1b      	ldrb	r3, [r3, #28]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0208 	orr.w	r2, r2, #8
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0208 	bic.w	r2, r2, #8
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7f5b      	ldrb	r3, [r3, #29]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0204 	orr.w	r2, r2, #4
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0204 	bic.w	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	ea42 0103 	orr.w	r1, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d003      	beq.n	8001c44 <HAL_CAN_ConfigFilter+0x26>
 8001c3c:	7cfb      	ldrb	r3, [r7, #19]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	f040 80aa 	bne.w	8001d98 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d123      	bne.n	8001cc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	401a      	ands	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ca0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3248      	adds	r2, #72	; 0x48
 8001ca6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cbc:	6979      	ldr	r1, [r7, #20]
 8001cbe:	3348      	adds	r3, #72	; 0x48
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d122      	bne.n	8001d14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3248      	adds	r2, #72	; 0x48
 8001cf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d0a:	6979      	ldr	r1, [r7, #20]
 8001d0c:	3348      	adds	r3, #72	; 0x48
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d8a:	f023 0201 	bic.w	r2, r3, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e006      	b.n	8001da6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d12e      	bne.n	8001e24 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dde:	f7ff f8c1 	bl	8000f64 <HAL_GetTick>
 8001de2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001de4:	e012      	b.n	8001e0c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de6:	f7ff f8bd 	bl	8000f64 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b0a      	cmp	r3, #10
 8001df2:	d90b      	bls.n	8001e0c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2205      	movs	r2, #5
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e012      	b.n	8001e32 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e5      	bne.n	8001de6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e006      	b.n	8001e32 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d003      	beq.n	8001e5e <HAL_CAN_GetRxMessage+0x24>
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f040 80f3 	bne.w	8002044 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10e      	bne.n	8001e82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e7      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d8      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	331b      	adds	r3, #27
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0204 	and.w	r2, r3, #4
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	331b      	adds	r3, #27
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0d5b      	lsrs	r3, r3, #21
 8001ece:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	331b      	adds	r3, #27
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0202 	and.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	331b      	adds	r3, #27
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	331b      	adds	r3, #27
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0a1a      	lsrs	r2, r3, #8
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0c1a      	lsrs	r2, r3, #16
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3302      	adds	r3, #2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e1a      	lsrs	r2, r3, #24
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3303      	adds	r3, #3
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0a1a      	lsrs	r2, r3, #8
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3305      	adds	r3, #5
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0c1a      	lsrs	r2, r3, #16
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e1a      	lsrs	r2, r3, #24
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3307      	adds	r3, #7
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	e007      	b.n	8002040 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e006      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d002      	beq.n	800207c <HAL_CAN_ActivateNotification+0x1e>
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d109      	bne.n	8002090 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6959      	ldr	r1, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e006      	b.n	800209e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	; 0x28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d07c      	beq.n	80021ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d023      	beq.n	8002142 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f983 	bl	8002418 <HAL_CAN_TxMailbox0CompleteCallback>
 8002112:	e016      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	e00c      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e002      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f989 	bl	8002454 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d024      	beq.n	8002196 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f963 	bl	800242c <HAL_CAN_TxMailbox1CompleteCallback>
 8002166:	e016      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	e00c      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e002      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f969 	bl	8002468 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f943 	bl	8002440 <HAL_CAN_TxMailbox2CompleteCallback>
 80021ba:	e016      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e00c      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e002      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f949 	bl	800247c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2210      	movs	r2, #16
 800220c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f930 	bl	8002490 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe fa39 	bl	80006c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2210      	movs	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f912 	bl	80024b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8f9 	bl	80024a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2210      	movs	r2, #16
 80022cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8fc 	bl	80024cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2208      	movs	r2, #8
 80022ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8f5 	bl	80024e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d07b      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d072      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d043      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800236e:	2b00      	cmp	r3, #0
 8002370:	d03e      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002378:	2b60      	cmp	r3, #96	; 0x60
 800237a:	d02b      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
 800237c:	2b60      	cmp	r3, #96	; 0x60
 800237e:	d82e      	bhi.n	80023de <HAL_CAN_IRQHandler+0x334>
 8002380:	2b50      	cmp	r3, #80	; 0x50
 8002382:	d022      	beq.n	80023ca <HAL_CAN_IRQHandler+0x320>
 8002384:	2b50      	cmp	r3, #80	; 0x50
 8002386:	d82a      	bhi.n	80023de <HAL_CAN_IRQHandler+0x334>
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d019      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x316>
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d826      	bhi.n	80023de <HAL_CAN_IRQHandler+0x334>
 8002390:	2b30      	cmp	r3, #48	; 0x30
 8002392:	d010      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x30c>
 8002394:	2b30      	cmp	r3, #48	; 0x30
 8002396:	d822      	bhi.n	80023de <HAL_CAN_IRQHandler+0x334>
 8002398:	2b10      	cmp	r3, #16
 800239a:	d002      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x2f8>
 800239c:	2b20      	cmp	r3, #32
 800239e:	d005      	beq.n	80023ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023a0:	e01d      	b.n	80023de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023aa:	e019      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b4:	e014      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023be:	e00f      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023c8:	e00a      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d2:	e005      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023dc:	e000      	b.n	80023e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80023de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2204      	movs	r2, #4
 80023f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f872 	bl	80024f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e037      	b.n	80027b0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002756:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800275a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9b8 	bl	8002b08 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}  
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x20>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e04a      	b.n	800286e <HAL_DMA_Start_IT+0xb6>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d13a      	bne.n	8002860 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f94b 	bl	8002aaa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 020e 	orr.w	r2, r2, #14
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e00f      	b.n	800284e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 020a 	orr.w	r2, r2, #10
 800283c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0204 	bic.w	r2, r2, #4
 800284c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e005      	b.n	800286c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800286c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002884:	2b02      	cmp	r3, #2
 8002886:	d008      	beq.n	800289a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2204      	movs	r2, #4
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e020      	b.n	80028dc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020e 	bic.w	r2, r2, #14
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d005      	beq.n	800290a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e027      	b.n	800295a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 020e 	bic.w	r2, r2, #14
 8002918:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
    } 
  }
  return status;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2204      	movs	r2, #4
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d024      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x72>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01f      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2104      	movs	r1, #4
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d06a      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029d4:	e065      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2202      	movs	r2, #2
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02c      	beq.n	8002a40 <HAL_DMA_IRQHandler+0xdc>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d027      	beq.n	8002a40 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 020a 	bic.w	r2, r2, #10
 8002a0c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	2102      	movs	r1, #2
 8002a20:	fa01 f202 	lsl.w	r2, r1, r2
 8002a24:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d035      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a3e:	e030      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2208      	movs	r2, #8
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d028      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d023      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 020e 	bic.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    }
  }
}  
 8002aa0:	e7ff      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x13e>
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d108      	bne.n	8002aea <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ae8:	e007      	b.n	8002afa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <DMA_CalcBaseAndBitshift+0x60>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d80f      	bhi.n	8002b3c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <DMA_CalcBaseAndBitshift+0x64>)
 8002b24:	4413      	add	r3, r2
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <DMA_CalcBaseAndBitshift+0x68>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	009a      	lsls	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b3a:	e00e      	b.n	8002b5a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <DMA_CalcBaseAndBitshift+0x70>)
 8002b44:	4413      	add	r3, r2
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <DMA_CalcBaseAndBitshift+0x74>)
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40020407 	.word	0x40020407
 8002b6c:	bffdfff8 	.word	0xbffdfff8
 8002b70:	cccccccd 	.word	0xcccccccd
 8002b74:	40020000 	.word	0x40020000
 8002b78:	bffdfbf8 	.word	0xbffdfbf8
 8002b7c:	40020400 	.word	0x40020400

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8e:	e154      	b.n	8002e3a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8146 	beq.w	8002e34 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d005      	beq.n	8002bc0 <HAL_GPIO_Init+0x40>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d130      	bne.n	8002c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0201 	and.w	r2, r3, #1
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d017      	beq.n	8002c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d123      	bne.n	8002cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	6939      	ldr	r1, [r7, #16]
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0203 	and.w	r2, r3, #3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a0 	beq.w	8002e34 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf4:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_GPIO_Init+0x2d8>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_GPIO_Init+0x2d8>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x2d8>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d0c:	4a53      	ldr	r2, [pc, #332]	; (8002e5c <HAL_GPIO_Init+0x2dc>)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d36:	d019      	beq.n	8002d6c <HAL_GPIO_Init+0x1ec>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2e0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_GPIO_Init+0x1e8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2e4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00d      	beq.n	8002d64 <HAL_GPIO_Init+0x1e4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_GPIO_Init+0x2e8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x1e0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_GPIO_Init+0x2ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_GPIO_Init+0x1dc>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e008      	b.n	8002d6e <HAL_GPIO_Init+0x1ee>
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	e006      	b.n	8002d6e <HAL_GPIO_Init+0x1ee>
 8002d60:	2303      	movs	r3, #3
 8002d62:	e004      	b.n	8002d6e <HAL_GPIO_Init+0x1ee>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e002      	b.n	8002d6e <HAL_GPIO_Init+0x1ee>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_GPIO_Init+0x1ee>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	f002 0203 	and.w	r2, r2, #3
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	4093      	lsls	r3, r2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d7e:	4937      	ldr	r1, [pc, #220]	; (8002e5c <HAL_GPIO_Init+0x2dc>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8c:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f aea3 	bne.w	8002b90 <HAL_GPIO_Init+0x10>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48000800 	.word	0x48000800
 8002e68:	48000c00 	.word	0x48000c00
 8002e6c:	48001000 	.word	0x48001000
 8002e70:	40010400 	.word	0x40010400

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f001 b823 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 817d 	beq.w	80031da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ee0:	4bbc      	ldr	r3, [pc, #752]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eec:	4bb9      	ldr	r3, [pc, #740]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d15c      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x10e>
 8002ef8:	4bb6      	ldr	r3, [pc, #728]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d155      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x10e>
 8002f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_OscConfig+0x94>
 8002f32:	4ba8      	ldr	r3, [pc, #672]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e015      	b.n	8002f64 <HAL_RCC_OscConfig+0xc0>
 8002f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f60:	4b9c      	ldr	r3, [pc, #624]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 811f 	beq.w	80031d8 <HAL_RCC_OscConfig+0x334>
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 8116 	bne.w	80031d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f000 bfaf 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
 8002fc4:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a82      	ldr	r2, [pc, #520]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e036      	b.n	8003040 <HAL_RCC_OscConfig+0x19c>
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x158>
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7b      	ldr	r2, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a78      	ldr	r2, [pc, #480]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e021      	b.n	8003040 <HAL_RCC_OscConfig+0x19c>
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x184>
 800300e:	4b71      	ldr	r3, [pc, #452]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a70      	ldr	r2, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6d      	ldr	r2, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x19c>
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a69      	ldr	r2, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a66      	ldr	r2, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	495f      	ldr	r1, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 8003056:	4313      	orrs	r3, r2
 8003058:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d059      	beq.n	800311e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fd ff7b 	bl	8000f64 <HAL_GetTick>
 800306e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fd ff76 	bl	8000f64 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d902      	bls.n	800308a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	f000 bf43 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 800308a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800309e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_OscConfig+0x218>
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e015      	b.n	80030e8 <HAL_RCC_OscConfig+0x244>
 80030bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80030f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030f4:	fa92 f2a2 	rbit	r2, r2
 80030f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80030fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ab      	beq.n	8003074 <HAL_RCC_OscConfig+0x1d0>
 800311c:	e05d      	b.n	80031da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fd ff21 	bl	8000f64 <HAL_GetTick>
 8003122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd ff1c 	bl	8000f64 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d902      	bls.n	800313e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	f000 bee9 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 800313e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003142:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003152:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d102      	bne.n	8003170 <HAL_RCC_OscConfig+0x2cc>
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e015      	b.n	800319c <HAL_RCC_OscConfig+0x2f8>
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800318c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCC_OscConfig+0x330>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80031a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80031b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ab      	bne.n	8003128 <HAL_RCC_OscConfig+0x284>
 80031d0:	e003      	b.n	80031da <HAL_RCC_OscConfig+0x336>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 817d 	beq.w	80034ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031f0:	4ba6      	ldr	r3, [pc, #664]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031fc:	4ba3      	ldr	r3, [pc, #652]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b08      	cmp	r3, #8
 8003206:	d172      	bne.n	80032ee <HAL_RCC_OscConfig+0x44a>
 8003208:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d16c      	bne.n	80032ee <HAL_RCC_OscConfig+0x44a>
 8003214:	2302      	movs	r3, #2
 8003216:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003226:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d102      	bne.n	8003244 <HAL_RCC_OscConfig+0x3a0>
 800323e:	4b93      	ldr	r3, [pc, #588]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	e013      	b.n	800326c <HAL_RCC_OscConfig+0x3c8>
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003256:	2302      	movs	r3, #2
 8003258:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800325c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2202      	movs	r2, #2
 800326e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003272:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800327e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003282:	fab2 f282 	clz	r2, r2
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	f042 0220 	orr.w	r2, r2, #32
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f002 021f 	and.w	r2, r2, #31
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCC_OscConfig+0x410>
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f000 be2e 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	21f8      	movs	r1, #248	; 0xf8
 80032ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032d2:	fa91 f1a1 	rbit	r1, r1
 80032d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032de:	fab1 f181 	clz	r1, r1
 80032e2:	b2c9      	uxtb	r1, r1
 80032e4:	408b      	lsls	r3, r1
 80032e6:	4969      	ldr	r1, [pc, #420]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ec:	e0fd      	b.n	80034ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8088 	beq.w	8003410 <HAL_RCC_OscConfig+0x56c>
 8003300:	2301      	movs	r3, #1
 8003302:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003312:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2301      	movs	r3, #1
 800332a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fe1a 	bl	8000f64 <HAL_GetTick>
 8003330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fd fe15 	bl	8000f64 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	f000 bde2 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800335e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d102      	bne.n	800337c <HAL_RCC_OscConfig+0x4d8>
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e013      	b.n	80033a4 <HAL_RCC_OscConfig+0x500>
 800337c:	2302      	movs	r3, #2
 800337e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800338e:	2302      	movs	r3, #2
 8003390:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003394:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80033a0:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2202      	movs	r2, #2
 80033a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80033aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033ae:	fa92 f2a2 	rbit	r2, r2
 80033b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80033b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f002 021f 	and.w	r2, r2, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0af      	beq.n	8003336 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	21f8      	movs	r1, #248	; 0xf8
 80033ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033f4:	fa91 f1a1 	rbit	r1, r1
 80033f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80033fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003400:	fab1 f181 	clz	r1, r1
 8003404:	b2c9      	uxtb	r1, r1
 8003406:	408b      	lsls	r3, r1
 8003408:	4920      	ldr	r1, [pc, #128]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
 800340e:	e06c      	b.n	80034ea <HAL_RCC_OscConfig+0x646>
 8003410:	2301      	movs	r3, #1
 8003412:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003422:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	2300      	movs	r3, #0
 800343a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fd92 	bl	8000f64 <HAL_GetTick>
 8003440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003446:	f7fd fd8d 	bl	8000f64 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	f000 bd5a 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 800345c:	2302      	movs	r3, #2
 800345e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800346e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d104      	bne.n	8003490 <HAL_RCC_OscConfig+0x5ec>
 8003486:	4b01      	ldr	r3, [pc, #4]	; (800348c <HAL_RCC_OscConfig+0x5e8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e015      	b.n	80034b8 <HAL_RCC_OscConfig+0x614>
 800348c:	40021000 	.word	0x40021000
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034a2:	2302      	movs	r3, #2
 80034a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034b4:	4bc8      	ldr	r3, [pc, #800]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2202      	movs	r2, #2
 80034ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80034be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80034ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f042 0220 	orr.w	r2, r2, #32
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 021f 	and.w	r2, r2, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ad      	bne.n	8003446 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8110 	beq.w	8003720 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d079      	beq.n	8003604 <HAL_RCC_OscConfig+0x760>
 8003510:	2301      	movs	r3, #1
 8003512:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	4bab      	ldr	r3, [pc, #684]	; (80037dc <HAL_RCC_OscConfig+0x938>)
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	461a      	mov	r2, r3
 8003536:	2301      	movs	r3, #1
 8003538:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fd fd13 	bl	8000f64 <HAL_GetTick>
 800353e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fd fd0e 	bl	8000f64 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d902      	bls.n	800355a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	f000 bcdb 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 800355a:	2302      	movs	r3, #2
 800355c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80035b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 80035b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035c0:	2102      	movs	r1, #2
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f1a3 	rbit	r1, r3
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035da:	6019      	str	r1, [r3, #0]
  return result;
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0a0      	beq.n	8003544 <HAL_RCC_OscConfig+0x6a0>
 8003602:	e08d      	b.n	8003720 <HAL_RCC_OscConfig+0x87c>
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003630:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x938>)
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	461a      	mov	r2, r3
 8003642:	2300      	movs	r3, #0
 8003644:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fd fc8d 	bl	8000f64 <HAL_GetTick>
 800364a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364e:	e00a      	b.n	8003666 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fc88 	bl	8000f64 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d902      	bls.n	8003666 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	f000 bc55 	b.w	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f2a3 	rbit	r2, r3
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003692:	2202      	movs	r2, #2
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	fa93 f2a3 	rbit	r2, r3
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036b6:	2202      	movs	r2, #2
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	fa93 f2a3 	rbit	r2, r3
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 80036d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036de:	2102      	movs	r1, #2
 80036e0:	6019      	str	r1, [r3, #0]
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f1a3 	rbit	r1, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036f8:	6019      	str	r1, [r3, #0]
  return result;
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d197      	bne.n	8003650 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 81a1 	beq.w	8003a78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	61d3      	str	r3, [r2, #28]
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800376e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCC_OscConfig+0x93c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11a      	bne.n	80037b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_RCC_OscConfig+0x93c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_RCC_OscConfig+0x93c>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fd fbe9 	bl	8000f64 <HAL_GetTick>
 8003792:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	e009      	b.n	80037ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fd fbe4 	bl	8000f64 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b64      	cmp	r3, #100	; 0x64
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e3b1      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x93c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10d      	bne.n	80037e4 <HAL_RCC_OscConfig+0x940>
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a02      	ldr	r2, [pc, #8]	; (80037d8 <HAL_RCC_OscConfig+0x934>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	e03c      	b.n	8003850 <HAL_RCC_OscConfig+0x9ac>
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	10908120 	.word	0x10908120
 80037e0:	40007000 	.word	0x40007000
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10c      	bne.n	800380e <HAL_RCC_OscConfig+0x96a>
 80037f4:	4bc1      	ldr	r3, [pc, #772]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4ac0      	ldr	r2, [pc, #768]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	4bbe      	ldr	r3, [pc, #760]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4abd      	ldr	r2, [pc, #756]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003806:	f023 0304 	bic.w	r3, r3, #4
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	e020      	b.n	8003850 <HAL_RCC_OscConfig+0x9ac>
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x994>
 800381e:	4bb7      	ldr	r3, [pc, #732]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4ab6      	ldr	r2, [pc, #728]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6213      	str	r3, [r2, #32]
 800382a:	4bb4      	ldr	r3, [pc, #720]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4ab3      	ldr	r2, [pc, #716]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x9ac>
 8003838:	4bb0      	ldr	r3, [pc, #704]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4aaf      	ldr	r2, [pc, #700]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	4bad      	ldr	r3, [pc, #692]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4aac      	ldr	r2, [pc, #688]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8081 	beq.w	8003964 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fd fb7f 	bl	8000f64 <HAL_GetTick>
 8003866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd fb7a 	bl	8000f64 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e345      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800388c:	2202      	movs	r2, #2
 800388e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	fa93 f2a3 	rbit	r2, r3
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038ca:	601a      	str	r2, [r3, #0]
  return result;
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d102      	bne.n	80038f0 <HAL_RCC_OscConfig+0xa4c>
 80038ea:	4b84      	ldr	r3, [pc, #528]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	e013      	b.n	8003918 <HAL_RCC_OscConfig+0xa74>
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	4b79      	ldr	r3, [pc, #484]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003920:	2102      	movs	r1, #2
 8003922:	6011      	str	r1, [r2, #0]
 8003924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003928:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	fa92 f1a2 	rbit	r1, r2
 8003932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003936:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800393a:	6011      	str	r1, [r2, #0]
  return result;
 800393c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003940:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d084      	beq.n	800386c <HAL_RCC_OscConfig+0x9c8>
 8003962:	e07f      	b.n	8003a64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fd fafe 	bl	8000f64 <HAL_GetTick>
 8003968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fd faf9 	bl	8000f64 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e2c4      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800398e:	2202      	movs	r2, #2
 8003990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039b2:	2202      	movs	r2, #2
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039cc:	601a      	str	r2, [r3, #0]
  return result;
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_OscConfig+0xb4e>
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	e013      	b.n	8003a1a <HAL_RCC_OscConfig+0xb76>
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a22:	2102      	movs	r1, #2
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	fa92 f1a2 	rbit	r1, r2
 8003a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a3c:	6011      	str	r1, [r2, #0]
  return result;
 8003a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f002 021f 	and.w	r2, r2, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d184      	bne.n	800396e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a64:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b23      	ldr	r3, [pc, #140]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4a22      	ldr	r2, [pc, #136]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8242 	beq.w	8003f0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <HAL_RCC_OscConfig+0xc58>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	f000 8213 	beq.w	8003ebe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f040 8162 	bne.w	8003d6e <HAL_RCC_OscConfig+0xeca>
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	fa93 f2a3 	rbit	r2, r3
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ace:	601a      	str	r2, [r3, #0]
  return result;
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ad8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fa38 	bl	8000f64 <HAL_GetTick>
 8003af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af8:	e00c      	b.n	8003b14 <HAL_RCC_OscConfig+0xc70>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fa30 	bl	8000f64 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1fd      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	fa93 f2a3 	rbit	r2, r3
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b38:	601a      	str	r2, [r3, #0]
  return result;
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_OscConfig+0xcba>
 8003b58:	4bb0      	ldr	r3, [pc, #704]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e027      	b.n	8003bae <HAL_RCC_OscConfig+0xd0a>
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fa93 f2a3 	rbit	r2, r3
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	4b9c      	ldr	r3, [pc, #624]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003bb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bba:	6011      	str	r1, [r2, #0]
 8003bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	fa92 f1a2 	rbit	r1, r2
 8003bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bd2:	6011      	str	r1, [r2, #0]
  return result;
 8003bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	fab2 f282 	clz	r2, r2
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f042 0220 	orr.w	r2, r2, #32
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	f002 021f 	and.w	r2, r2, #31
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d182      	bne.n	8003b00 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	497f      	ldr	r1, [pc, #508]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c46:	601a      	str	r2, [r3, #0]
  return result;
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	2301      	movs	r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd f97c 	bl	8000f64 <HAL_GetTick>
 8003c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd f977 	bl	8000f64 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e144      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	fa93 f2a3 	rbit	r2, r3
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003caa:	601a      	str	r2, [r3, #0]
  return result;
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xe2c>
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	e027      	b.n	8003d20 <HAL_RCC_OscConfig+0xe7c>
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d24:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d32:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	fa92 f1a2 	rbit	r1, r2
 8003d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d44:	6011      	str	r1, [r2, #0]
  return result;
 8003d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	fab2 f282 	clz	r2, r2
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	f002 021f 	and.w	r2, r2, #31
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f202 	lsl.w	r2, r1, r2
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d082      	beq.n	8003c72 <HAL_RCC_OscConfig+0xdce>
 8003d6c:	e0cf      	b.n	8003f0e <HAL_RCC_OscConfig+0x106a>
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d92:	601a      	str	r2, [r3, #0]
  return result;
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003da8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd f8d6 	bl	8000f64 <HAL_GetTick>
 8003db8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbc:	e009      	b.n	8003dd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fd f8d1 	bl	8000f64 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e09e      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	fa93 f2a3 	rbit	r2, r3
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003df6:	601a      	str	r2, [r3, #0]
  return result;
 8003df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d104      	bne.n	8003e20 <HAL_RCC_OscConfig+0xf7c>
 8003e16:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <HAL_RCC_OscConfig+0xf78>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	e029      	b.n	8003e70 <HAL_RCC_OscConfig+0xfcc>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	fa93 f2a3 	rbit	r2, r3
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	fa93 f2a3 	rbit	r2, r3
 8003e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x1078>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e7c:	6011      	str	r1, [r2, #0]
 8003e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	fa92 f1a2 	rbit	r1, r2
 8003e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e94:	6011      	str	r1, [r2, #0]
  return result;
 8003e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	fab2 f282 	clz	r2, r2
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f002 021f 	and.w	r2, r2, #31
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d180      	bne.n	8003dbe <HAL_RCC_OscConfig+0xf1a>
 8003ebc:	e027      	b.n	8003f0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e01e      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_OscConfig+0x1078>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ede:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ef2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b09e      	sub	sp, #120	; 0x78
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e162      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b90      	ldr	r3, [pc, #576]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d910      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b8d      	ldr	r3, [pc, #564]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	498b      	ldr	r1, [pc, #556]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b89      	ldr	r3, [pc, #548]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e14a      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b82      	ldr	r3, [pc, #520]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	497f      	ldr	r1, [pc, #508]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80dc 	beq.w	800414c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d13c      	bne.n	8004016 <HAL_RCC_ClockConfig+0xf6>
 8003f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xa6>
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	e00f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0xc6>
 8003fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe2:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fea:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fee:	fa92 f2a2 	rbit	r2, r2
 8003ff2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ff6:	fab2 f282 	clz	r2, r2
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	f042 0220 	orr.w	r2, r2, #32
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f002 021f 	and.w	r2, r2, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d17b      	bne.n	800410a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0f3      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d13c      	bne.n	8004098 <HAL_RCC_ClockConfig+0x178>
 800401e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800402c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_RCC_ClockConfig+0x128>
 8004042:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	e00f      	b.n	8004068 <HAL_RCC_ClockConfig+0x148>
 8004048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
 8004056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
 800405c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	4b46      	ldr	r3, [pc, #280]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406c:	63ba      	str	r2, [r7, #56]	; 0x38
 800406e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004070:	fa92 f2a2 	rbit	r2, r2
 8004074:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	f042 0220 	orr.w	r2, r2, #32
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	f002 021f 	and.w	r2, r2, #31
 8004088:	2101      	movs	r1, #1
 800408a:	fa01 f202 	lsl.w	r2, r1, r2
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d13a      	bne.n	800410a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b2      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
 8004098:	2302      	movs	r3, #2
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x1a0>
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	e00d      	b.n	80040dc <HAL_RCC_ClockConfig+0x1bc>
 80040c0:	2302      	movs	r3, #2
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2202      	movs	r2, #2
 80040de:	61ba      	str	r2, [r7, #24]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	fa92 f2a2 	rbit	r2, r2
 80040e6:	617a      	str	r2, [r7, #20]
  return result;
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e079      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	491a      	ldr	r1, [pc, #104]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fc ff22 	bl	8000f64 <HAL_GetTick>
 8004120:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fc ff1e 	bl	8000f64 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e061      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_RCC_ClockConfig+0x260>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d214      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	4906      	ldr	r1, [pc, #24]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_RCC_ClockConfig+0x25c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e040      	b.n	80041fe <HAL_RCC_ClockConfig+0x2de>
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_ClockConfig+0x2e8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	491a      	ldr	r1, [pc, #104]	; (8004208 <HAL_RCC_ClockConfig+0x2e8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCC_ClockConfig+0x2e8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4912      	ldr	r1, [pc, #72]	; (8004208 <HAL_RCC_ClockConfig+0x2e8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041c2:	f000 f829 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041c6:	4601      	mov	r1, r0
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCC_ClockConfig+0x2e8>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d0:	22f0      	movs	r2, #240	; 0xf0
 80041d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	fa92 f2a2 	rbit	r2, r2
 80041da:	60fa      	str	r2, [r7, #12]
  return result;
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	fab2 f282 	clz	r2, r2
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	40d3      	lsrs	r3, r2
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <HAL_RCC_ClockConfig+0x2ec>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	fa21 f303 	lsr.w	r3, r1, r3
 80041ee:	4a08      	ldr	r2, [pc, #32]	; (8004210 <HAL_RCC_ClockConfig+0x2f0>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_RCC_ClockConfig+0x2f4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc fe70 	bl	8000edc <HAL_InitTick>
  
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3778      	adds	r7, #120	; 0x78
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	08007ab0 	.word	0x08007ab0
 8004210:	20000000 	.word	0x20000000
 8004214:	20000004 	.word	0x20000004

08004218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b08b      	sub	sp, #44	; 0x2c
 800421c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004232:	4b29      	ldr	r3, [pc, #164]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d002      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x30>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d003      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x36>
 8004246:	e03c      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800424a:	623b      	str	r3, [r7, #32]
      break;
 800424c:	e03c      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004254:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004258:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	fa92 f2a2 	rbit	r2, r2
 8004260:	607a      	str	r2, [r7, #4]
  return result;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	40d3      	lsrs	r3, r2
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	220f      	movs	r2, #15
 800427c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	fa92 f2a2 	rbit	r2, r2
 8004284:	60fa      	str	r2, [r7, #12]
  return result;
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	fab2 f282 	clz	r2, r2
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	40d3      	lsrs	r3, r2
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	e004      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	623b      	str	r3, [r7, #32]
      break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80042c4:	623b      	str	r3, [r7, #32]
      break;
 80042c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	372c      	adds	r7, #44	; 0x2c
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	007a1200 	.word	0x007a1200
 80042e0:	08007ac8 	.word	0x08007ac8
 80042e4:	08007ad8 	.word	0x08007ad8
 80042e8:	003d0900 	.word	0x003d0900

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800430a:	f7ff ffef 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430e:	4601      	mov	r1, r0
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004318:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800431c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	fa92 f2a2 	rbit	r2, r2
 8004324:	603a      	str	r2, [r7, #0]
  return result;
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	fab2 f282 	clz	r2, r2
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	40d3      	lsrs	r3, r2
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	08007ac0 	.word	0x08007ac0

08004348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800434e:	f7ff ffcd 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004352:	4601      	mov	r1, r0
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800435c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004360:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	fa92 f2a2 	rbit	r2, r2
 8004368:	603a      	str	r2, [r7, #0]
  return result;
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	40d3      	lsrs	r3, r2
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	08007ac0 	.word	0x08007ac0

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b092      	sub	sp, #72	; 0x48
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80d4 	beq.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b0:	4b4e      	ldr	r3, [pc, #312]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10e      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	4a4a      	ldr	r2, [pc, #296]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	61d3      	str	r3, [r2, #28]
 80043c8:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043da:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d118      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e6:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f2:	f7fc fdb7 	bl	8000f64 <HAL_GetTick>
 80043f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fc fdb3 	bl	8000f64 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e169      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004418:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8084 	beq.w	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004434:	429a      	cmp	r2, r3
 8004436:	d07c      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004438:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	461a      	mov	r2, r3
 8004462:	2301      	movs	r3, #1
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800446a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	461a      	mov	r2, r3
 8004486:	2300      	movs	r3, #0
 8004488:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04b      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fc fd63 	bl	8000f64 <HAL_GetTick>
 800449e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fc fd5f 	bl	8000f64 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e113      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80044b8:	2302      	movs	r3, #2
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	2302      	movs	r3, #2
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	61fb      	str	r3, [r7, #28]
  return result;
 80044d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d108      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80044e6:	4b01      	ldr	r3, [pc, #4]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	e00d      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40007000 	.word	0x40007000
 80044f4:	10908100 	.word	0x10908100
 80044f8:	2302      	movs	r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2202      	movs	r2, #2
 800450a:	613a      	str	r2, [r7, #16]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	fa92 f2a2 	rbit	r2, r2
 8004512:	60fa      	str	r2, [r7, #12]
  return result;
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	fab2 f282 	clz	r2, r2
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	f002 021f 	and.w	r2, r2, #31
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0b7      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	496a      	ldr	r1, [pc, #424]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4a65      	ldr	r2, [pc, #404]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004564:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	f023 0203 	bic.w	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	495d      	ldr	r1, [pc, #372]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004582:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4956      	ldr	r1, [pc, #344]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045a0:	4b51      	ldr	r3, [pc, #324]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	494e      	ldr	r1, [pc, #312]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4947      	ldr	r1, [pc, #284]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	493f      	ldr	r1, [pc, #252]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f023 0220 	bic.w	r2, r3, #32
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4938      	ldr	r1, [pc, #224]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004618:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	4930      	ldr	r1, [pc, #192]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4929      	ldr	r1, [pc, #164]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4921      	ldr	r1, [pc, #132]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004672:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	491a      	ldr	r1, [pc, #104]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	4912      	ldr	r1, [pc, #72]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	490b      	ldr	r1, [pc, #44]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	4903      	ldr	r1, [pc, #12]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3748      	adds	r7, #72	; 0x48
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000

080046ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e049      	b.n	8004792 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fa42 	bl	8000b9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fa4a 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x24>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e03c      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d109      	bne.n	80047da <HAL_TIM_PWM_Start+0x3e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e02f      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start+0x58>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e022      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d109      	bne.n	800480e <HAL_TIM_PWM_Start+0x72>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e015      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x8c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e008      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e097      	b.n	8004972 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0xb6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	e023      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0xc6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e01b      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xd6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	e013      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Start+0xe6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004880:	e00b      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b10      	cmp	r3, #16
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Start+0xf6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	e003      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2201      	movs	r2, #1
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fcf4 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a33      	ldr	r2, [pc, #204]	; (800497c <HAL_TIM_PWM_Start+0x1e0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a32      	ldr	r2, [pc, #200]	; (8004980 <HAL_TIM_PWM_Start+0x1e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_TIM_PWM_Start+0x1e8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <HAL_TIM_PWM_Start+0x1ec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_TIM_PWM_Start+0x1f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_Start+0x142>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_TIM_PWM_Start+0x144>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_TIM_PWM_Start+0x1e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d013      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_TIM_PWM_Start+0x1f4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_TIM_PWM_Start+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_TIM_PWM_Start+0x1e4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_TIM_PWM_Start+0x1e8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d115      	bne.n	800495c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_TIM_PWM_Start+0x1fc>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b06      	cmp	r3, #6
 8004940:	d015      	beq.n	800496e <HAL_TIM_PWM_Start+0x1d2>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d011      	beq.n	800496e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	e008      	b.n	800496e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e000      	b.n	8004970 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	00010007 	.word	0x00010007

0800499c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0ff      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b14      	cmp	r3, #20
 80049c6:	f200 80f0 	bhi.w	8004baa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a25 	.word	0x08004a25
 80049d4:	08004bab 	.word	0x08004bab
 80049d8:	08004bab 	.word	0x08004bab
 80049dc:	08004bab 	.word	0x08004bab
 80049e0:	08004a65 	.word	0x08004a65
 80049e4:	08004bab 	.word	0x08004bab
 80049e8:	08004bab 	.word	0x08004bab
 80049ec:	08004bab 	.word	0x08004bab
 80049f0:	08004aa7 	.word	0x08004aa7
 80049f4:	08004bab 	.word	0x08004bab
 80049f8:	08004bab 	.word	0x08004bab
 80049fc:	08004bab 	.word	0x08004bab
 8004a00:	08004ae7 	.word	0x08004ae7
 8004a04:	08004bab 	.word	0x08004bab
 8004a08:	08004bab 	.word	0x08004bab
 8004a0c:	08004bab 	.word	0x08004bab
 8004a10:	08004b29 	.word	0x08004b29
 8004a14:	08004bab 	.word	0x08004bab
 8004a18:	08004bab 	.word	0x08004bab
 8004a1c:	08004bab 	.word	0x08004bab
 8004a20:	08004b69 	.word	0x08004b69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f95a 	bl	8004ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0208 	orr.w	r2, r2, #8
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
      break;
 8004a62:	e0a5      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f9ca 	bl	8004e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
      break;
 8004aa4:	e084      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fa33 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0208 	orr.w	r2, r2, #8
 8004ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0204 	bic.w	r2, r2, #4
 8004ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	61da      	str	r2, [r3, #28]
      break;
 8004ae4:	e064      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fa9b 	bl	8005028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	61da      	str	r2, [r3, #28]
      break;
 8004b26:	e043      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fae4 	bl	80050fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b66:	e023      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb28 	bl	80051c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ba8:	e002      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
      break;
 8004bae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <TIM_Base_SetConfig+0x104>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a39      	ldr	r2, [pc, #228]	; (8004ccc <TIM_Base_SetConfig+0x108>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <TIM_Base_SetConfig+0x10c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a37      	ldr	r2, [pc, #220]	; (8004cd4 <TIM_Base_SetConfig+0x110>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <TIM_Base_SetConfig+0x104>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01b      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d017      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0x108>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_Base_SetConfig+0x10c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <TIM_Base_SetConfig+0x110>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d108      	bne.n	8004c60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <TIM_Base_SetConfig+0x104>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00f      	beq.n	8004cac <TIM_Base_SetConfig+0xe8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <TIM_Base_SetConfig+0x110>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_Base_SetConfig+0xe8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_Base_SetConfig+0xe8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0xe8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a0e      	ldr	r2, [pc, #56]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d103      	bne.n	8004cb4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10c      	bne.n	8004d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0308 	bic.w	r3, r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d111      	bne.n	8004dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0210 	bic.w	r2, r3, #16
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a28      	ldr	r2, [pc, #160]	; (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0x6c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <TIM_OC2_SetConfig+0x108>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <TIM_OC2_SetConfig+0x10c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <TIM_OC2_SetConfig+0x110>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d113      	bne.n	8004edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC3_SetConfig+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_OC3_SetConfig+0x100>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10d      	bne.n	8004f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <TIM_OC3_SetConfig+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <TIM_OC3_SetConfig+0x104>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <TIM_OC3_SetConfig+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <TIM_OC3_SetConfig+0x10c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800

08005028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <TIM_OC4_SetConfig+0xc0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <TIM_OC4_SetConfig+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <TIM_OC4_SetConfig+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <TIM_OC4_SetConfig+0xcc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC4_SetConfig+0xd0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <TIM_OC5_SetConfig+0xb4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <TIM_OC5_SetConfig+0xb8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <TIM_OC5_SetConfig+0xbc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <TIM_OC5_SetConfig+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <TIM_OC5_SetConfig+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d109      	bne.n	800518a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800520a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	051b      	lsls	r3, r3, #20
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <TIM_OC6_SetConfig+0xb8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a17      	ldr	r2, [pc, #92]	; (8005280 <TIM_OC6_SetConfig+0xbc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a16      	ldr	r2, [pc, #88]	; (8005284 <TIM_OC6_SetConfig+0xc0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <TIM_OC6_SetConfig+0xc4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a14      	ldr	r2, [pc, #80]	; (800528c <TIM_OC6_SetConfig+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2201      	movs	r2, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e063      	b.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d013      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a17      	ldr	r2, [pc, #92]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a12      	ldr	r2, [pc, #72]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40013400 	.word	0x40013400
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e040      	b.n	8005470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb fc84 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fc12 	bl	8005c44 <UART_SetConfig>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e022      	b.n	8005470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fddc 	bl	8005ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fe63 	bl	8006134 <UART_CheckIdleState>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548a:	2b20      	cmp	r3, #32
 800548c:	d13d      	bne.n	800550a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_Receive_IT+0x22>
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e036      	b.n	800550c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Receive_IT+0x34>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e02f      	b.n	800550c <HAL_UART_Receive_IT+0x94>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	613b      	str	r3, [r7, #16]
   return(result);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	69f9      	ldr	r1, [r7, #28]
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e6      	bne.n	80054c8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	461a      	mov	r2, r3
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 ff25 	bl	8006350 <UART_Start_Receive_IT>
 8005506:	4603      	mov	r3, r0
 8005508:	e000      	b.n	800550c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005526:	2b20      	cmp	r3, #32
 8005528:	d178      	bne.n	800561c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_UART_Transmit_DMA+0x22>
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e071      	b.n	800561e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_UART_Transmit_DMA+0x34>
 8005544:	2302      	movs	r3, #2
 8005546:	e06a      	b.n	800561e <HAL_UART_Transmit_DMA+0x10a>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	88fa      	ldrh	r2, [r7, #6]
 8005562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2221      	movs	r2, #33	; 0x21
 8005572:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02b      	beq.n	80055d4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <HAL_UART_Transmit_DMA+0x114>)
 8005582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	4a28      	ldr	r2, [pc, #160]	; (800562c <HAL_UART_Transmit_DMA+0x118>)
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	4a27      	ldr	r2, [pc, #156]	; (8005630 <HAL_UART_Transmit_DMA+0x11c>)
 8005592:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005598:	2200      	movs	r2, #0
 800559a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a4:	4619      	mov	r1, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3328      	adds	r3, #40	; 0x28
 80055ac:	461a      	mov	r2, r3
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	f7fd f902 	bl	80027b8 <HAL_DMA_Start_IT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2210      	movs	r2, #16
 80055be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e024      	b.n	800561e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	613b      	str	r3, [r7, #16]
   return(result);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	623a      	str	r2, [r7, #32]
 8005606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	61bb      	str	r3, [r7, #24]
   return(result);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	08006593 	.word	0x08006593
 800562c:	08006627 	.word	0x08006627
 8005630:	08006643 	.word	0x08006643

08005634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b0ba      	sub	sp, #232	; 0xe8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800565a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800565e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005662:	4013      	ands	r3, r2
 8005664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d115      	bne.n	800569c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00f      	beq.n	800569c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 82a3 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
      }
      return;
 800569a:	e29d      	b.n	8005bd8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800569c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8117 	beq.w	80058d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056b6:	4b85      	ldr	r3, [pc, #532]	; (80058cc <HAL_UART_IRQHandler+0x298>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 810a 	beq.w	80058d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d011      	beq.n	80056f0 <HAL_UART_IRQHandler+0xbc>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d011      	beq.n	8005720 <HAL_UART_IRQHandler+0xec>
 80056fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2202      	movs	r2, #2
 800570e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <HAL_UART_IRQHandler+0x11c>
 800572c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2204      	movs	r2, #4
 800573e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005746:	f043 0202 	orr.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d017      	beq.n	800578c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800576c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2208      	movs	r2, #8
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005782:	f043 0208 	orr.w	r2, r3, #8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005794:	2b00      	cmp	r3, #0
 8005796:	d012      	beq.n	80057be <HAL_UART_IRQHandler+0x18a>
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8209 	beq.w	8005bdc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00d      	beq.n	80057f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800580a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04f      	beq.n	80058b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fe58 	bl	80064cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d141      	bne.n	80058ae <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800586e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1d9      	bne.n	800582a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <HAL_UART_IRQHandler+0x29c>)
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd f82c 	bl	80028e8 <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00f      	b.n	80058c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9b6 	bl	8005c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e00b      	b.n	80058c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9b2 	bl	8005c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	e007      	b.n	80058c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9ae 	bl	8005c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80058c4:	e18a      	b.n	8005bdc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c6:	bf00      	nop
    return;
 80058c8:	e188      	b.n	8005bdc <HAL_UART_IRQHandler+0x5a8>
 80058ca:	bf00      	nop
 80058cc:	04000120 	.word	0x04000120
 80058d0:	080066bf 	.word	0x080066bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d8:	2b01      	cmp	r3, #1
 80058da:	f040 8143 	bne.w	8005b64 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 813c 	beq.w	8005b64 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8135 	beq.w	8005b64 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2210      	movs	r2, #16
 8005900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	f040 80b1 	bne.w	8005a74 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800591e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 815c 	beq.w	8005be0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800592e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005932:	429a      	cmp	r2, r3
 8005934:	f080 8154 	bcs.w	8005be0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800593e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	2b20      	cmp	r3, #32
 800594a:	f000 8085 	beq.w	8005a58 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800597c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005984:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1da      	bne.n	800594e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e1      	bne.n	8005998 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e3      	bne.n	80059d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e4      	bne.n	8005a18 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc ff0f 	bl	8002876 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8dd 	bl	8005c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a72:	e0b5      	b.n	8005be0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80a7 	beq.w	8005be4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80a2 	beq.w	8005be4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e4      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005afa:	633a      	str	r2, [r7, #48]	; 0x30
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	69b9      	ldr	r1, [r7, #24]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e4      	bne.n	8005b20 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f865 	bl	8005c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b62:	e03f      	b.n	8005be4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x55a>
 8005b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 ff35 	bl	80069f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b8c:	e02d      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01c      	beq.n	8005be8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
    }
    return;
 8005bb6:	e017      	b.n	8005be8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d012      	beq.n	8005bea <HAL_UART_IRQHandler+0x5b6>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00c      	beq.n	8005bea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fd8a 	bl	80066ea <UART_EndTransmit_IT>
    return;
 8005bd6:	e008      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
      return;
 8005bd8:	bf00      	nop
 8005bda:	e006      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
    return;
 8005bdc:	bf00      	nop
 8005bde:	e004      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
      return;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
      return;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <HAL_UART_IRQHandler+0x5b6>
    return;
 8005be8:	bf00      	nop
  }

}
 8005bea:	37e8      	adds	r7, #232	; 0xe8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c72:	f023 030c 	bic.w	r3, r3, #12
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4aa8      	ldr	r2, [pc, #672]	; (8005f60 <UART_SetConfig+0x31c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d120      	bne.n	8005d06 <UART_SetConfig+0xc2>
 8005cc4:	4ba7      	ldr	r3, [pc, #668]	; (8005f64 <UART_SetConfig+0x320>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d817      	bhi.n	8005d00 <UART_SetConfig+0xbc>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x94>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cfb 	.word	0x08005cfb
 8005ce4:	08005cef 	.word	0x08005cef
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e0b5      	b.n	8005e5a <UART_SetConfig+0x216>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e0b2      	b.n	8005e5a <UART_SetConfig+0x216>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e0af      	b.n	8005e5a <UART_SetConfig+0x216>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e0ac      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d00:	2310      	movs	r3, #16
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e0a9      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a97      	ldr	r2, [pc, #604]	; (8005f68 <UART_SetConfig+0x324>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d124      	bne.n	8005d5a <UART_SetConfig+0x116>
 8005d10:	4b94      	ldr	r3, [pc, #592]	; (8005f64 <UART_SetConfig+0x320>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d1c:	d011      	beq.n	8005d42 <UART_SetConfig+0xfe>
 8005d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d22:	d817      	bhi.n	8005d54 <UART_SetConfig+0x110>
 8005d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d28:	d011      	beq.n	8005d4e <UART_SetConfig+0x10a>
 8005d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2e:	d811      	bhi.n	8005d54 <UART_SetConfig+0x110>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <UART_SetConfig+0xf8>
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d006      	beq.n	8005d48 <UART_SetConfig+0x104>
 8005d3a:	e00b      	b.n	8005d54 <UART_SetConfig+0x110>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e08b      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d42:	2302      	movs	r3, #2
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e088      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e085      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d4e:	2308      	movs	r3, #8
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e082      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d54:	2310      	movs	r3, #16
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e07f      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a83      	ldr	r2, [pc, #524]	; (8005f6c <UART_SetConfig+0x328>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d124      	bne.n	8005dae <UART_SetConfig+0x16a>
 8005d64:	4b7f      	ldr	r3, [pc, #508]	; (8005f64 <UART_SetConfig+0x320>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d70:	d011      	beq.n	8005d96 <UART_SetConfig+0x152>
 8005d72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d76:	d817      	bhi.n	8005da8 <UART_SetConfig+0x164>
 8005d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d7c:	d011      	beq.n	8005da2 <UART_SetConfig+0x15e>
 8005d7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d82:	d811      	bhi.n	8005da8 <UART_SetConfig+0x164>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <UART_SetConfig+0x14c>
 8005d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d8c:	d006      	beq.n	8005d9c <UART_SetConfig+0x158>
 8005d8e:	e00b      	b.n	8005da8 <UART_SetConfig+0x164>
 8005d90:	2300      	movs	r3, #0
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e061      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d96:	2302      	movs	r3, #2
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e05e      	b.n	8005e5a <UART_SetConfig+0x216>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e05b      	b.n	8005e5a <UART_SetConfig+0x216>
 8005da2:	2308      	movs	r3, #8
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e058      	b.n	8005e5a <UART_SetConfig+0x216>
 8005da8:	2310      	movs	r3, #16
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e055      	b.n	8005e5a <UART_SetConfig+0x216>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6f      	ldr	r2, [pc, #444]	; (8005f70 <UART_SetConfig+0x32c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d124      	bne.n	8005e02 <UART_SetConfig+0x1be>
 8005db8:	4b6a      	ldr	r3, [pc, #424]	; (8005f64 <UART_SetConfig+0x320>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc4:	d011      	beq.n	8005dea <UART_SetConfig+0x1a6>
 8005dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dca:	d817      	bhi.n	8005dfc <UART_SetConfig+0x1b8>
 8005dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd0:	d011      	beq.n	8005df6 <UART_SetConfig+0x1b2>
 8005dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd6:	d811      	bhi.n	8005dfc <UART_SetConfig+0x1b8>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0x1a0>
 8005ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x1ac>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x1b8>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e037      	b.n	8005e5a <UART_SetConfig+0x216>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e034      	b.n	8005e5a <UART_SetConfig+0x216>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e031      	b.n	8005e5a <UART_SetConfig+0x216>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e02e      	b.n	8005e5a <UART_SetConfig+0x216>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e02b      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5b      	ldr	r2, [pc, #364]	; (8005f74 <UART_SetConfig+0x330>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d124      	bne.n	8005e56 <UART_SetConfig+0x212>
 8005e0c:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <UART_SetConfig+0x320>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e18:	d011      	beq.n	8005e3e <UART_SetConfig+0x1fa>
 8005e1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0x20c>
 8005e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e24:	d011      	beq.n	8005e4a <UART_SetConfig+0x206>
 8005e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e2a:	d811      	bhi.n	8005e50 <UART_SetConfig+0x20c>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x1f4>
 8005e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0x200>
 8005e36:	e00b      	b.n	8005e50 <UART_SetConfig+0x20c>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e00d      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e00a      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e007      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e004      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e001      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e56:	2310      	movs	r3, #16
 8005e58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e62:	d15c      	bne.n	8005f1e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d827      	bhi.n	8005eba <UART_SetConfig+0x276>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x22c>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	08005ebb 	.word	0x08005ebb
 8005e80:	08005eab 	.word	0x08005eab
 8005e84:	08005ebb 	.word	0x08005ebb
 8005e88:	08005ebb 	.word	0x08005ebb
 8005e8c:	08005ebb 	.word	0x08005ebb
 8005e90:	08005eb3 	.word	0x08005eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fe fa36 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8005e98:	61b8      	str	r0, [r7, #24]
        break;
 8005e9a:	e013      	b.n	8005ec4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e9c:	f7fe fa54 	bl	8004348 <HAL_RCC_GetPCLK2Freq>
 8005ea0:	61b8      	str	r0, [r7, #24]
        break;
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea4:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <UART_SetConfig+0x334>)
 8005ea6:	61bb      	str	r3, [r7, #24]
        break;
 8005ea8:	e00c      	b.n	8005ec4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eaa:	f7fe f9b5 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005eae:	61b8      	str	r0, [r7, #24]
        break;
 8005eb0:	e008      	b.n	8005ec4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	61bb      	str	r3, [r7, #24]
        break;
 8005eb8:	e004      	b.n	8005ec4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8084 	beq.w	8005fd4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	005a      	lsls	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	441a      	add	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d916      	bls.n	8005f18 <UART_SetConfig+0x2d4>
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef0:	d212      	bcs.n	8005f18 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f023 030f 	bic.w	r3, r3, #15
 8005efa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	89fb      	ldrh	r3, [r7, #14]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	89fa      	ldrh	r2, [r7, #14]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	e05d      	b.n	8005fd4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	77bb      	strb	r3, [r7, #30]
 8005f1c:	e05a      	b.n	8005fd4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d836      	bhi.n	8005f92 <UART_SetConfig+0x34e>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x2e8>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f93 	.word	0x08005f93
 8005f3c:	08005f83 	.word	0x08005f83
 8005f40:	08005f93 	.word	0x08005f93
 8005f44:	08005f93 	.word	0x08005f93
 8005f48:	08005f93 	.word	0x08005f93
 8005f4c:	08005f8b 	.word	0x08005f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe f9d8 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61b8      	str	r0, [r7, #24]
        break;
 8005f56:	e021      	b.n	8005f9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe f9f6 	bl	8004348 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	61b8      	str	r0, [r7, #24]
        break;
 8005f5e:	e01d      	b.n	8005f9c <UART_SetConfig+0x358>
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40004400 	.word	0x40004400
 8005f6c:	40004800 	.word	0x40004800
 8005f70:	40004c00 	.word	0x40004c00
 8005f74:	40005000 	.word	0x40005000
 8005f78:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <UART_SetConfig+0x3a8>)
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e00c      	b.n	8005f9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f82:	f7fe f949 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005f86:	61b8      	str	r0, [r7, #24]
        break;
 8005f88:	e008      	b.n	8005f9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8e:	61bb      	str	r3, [r7, #24]
        break;
 8005f90:	e004      	b.n	8005f9c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	77bb      	strb	r3, [r7, #30]
        break;
 8005f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085a      	lsrs	r2, r3, #1
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	441a      	add	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d908      	bls.n	8005fd0 <UART_SetConfig+0x38c>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d204      	bcs.n	8005fd0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e001      	b.n	8005fd4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	007a1200 	.word	0x007a1200

08005ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01a      	beq.n	8006106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ee:	d10a      	bne.n	8006106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006144:	f7fa ff0e 	bl	8000f64 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10e      	bne.n	8006176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f82d 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e023      	b.n	80061be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d10e      	bne.n	80061a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f817 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00d      	b.n	80061be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b09c      	sub	sp, #112	; 0x70
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	e0a5      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	f000 80a1 	beq.w	8006324 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7fa febf 	bl	8000f64 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80061f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d13e      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800620c:	667b      	str	r3, [r7, #100]	; 0x64
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006218:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800621c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e6      	bne.n	80061f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	663b      	str	r3, [r7, #96]	; 0x60
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800624a:	64ba      	str	r2, [r7, #72]	; 0x48
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e067      	b.n	8006346 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d04f      	beq.n	8006324 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d147      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800629c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	613b      	str	r3, [r7, #16]
   return(result);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062f0:	623a      	str	r2, [r7, #32]
 80062f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	69f9      	ldr	r1, [r7, #28]
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e010      	b.n	8006346 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69da      	ldr	r2, [r3, #28]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	bf0c      	ite	eq
 8006334:	2301      	moveq	r3, #1
 8006336:	2300      	movne	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	429a      	cmp	r2, r3
 8006340:	f43f af4a 	beq.w	80061d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3770      	adds	r7, #112	; 0x70
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006350:	b480      	push	{r7}
 8006352:	b091      	sub	sp, #68	; 0x44
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d10e      	bne.n	80063a2 <UART_Start_Receive_IT+0x52>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <UART_Start_Receive_IT+0x48>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006396:	e01a      	b.n	80063ce <UART_Start_Receive_IT+0x7e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	22ff      	movs	r2, #255	; 0xff
 800639c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a0:	e015      	b.n	80063ce <UART_Start_Receive_IT+0x7e>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <UART_Start_Receive_IT+0x76>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <UART_Start_Receive_IT+0x6c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ba:	e008      	b.n	80063ce <UART_Start_Receive_IT+0x7e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	227f      	movs	r2, #127	; 0x7f
 80063c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063c4:	e003      	b.n	80063ce <UART_Start_Receive_IT+0x7e>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2222      	movs	r2, #34	; 0x22
 80063da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063fc:	637a      	str	r2, [r7, #52]	; 0x34
 80063fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006418:	d107      	bne.n	800642a <UART_Start_Receive_IT+0xda>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a14      	ldr	r2, [pc, #80]	; (8006478 <UART_Start_Receive_IT+0x128>)
 8006426:	665a      	str	r2, [r3, #100]	; 0x64
 8006428:	e002      	b.n	8006430 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <UART_Start_Receive_IT+0x12c>)
 800642e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	613b      	str	r3, [r7, #16]
   return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	61bb      	str	r3, [r7, #24]
   return(result);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3744      	adds	r7, #68	; 0x44
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	0800689b 	.word	0x0800689b
 800647c:	0800673f 	.word	0x0800673f

08006480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	60bb      	str	r3, [r7, #8]
   return(result);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	613b      	str	r3, [r7, #16]
   return(result);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e6      	bne.n	8006488 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	679a      	str	r2, [r3, #120]	; 0x78
}
 80064c0:	bf00      	nop
 80064c2:	3724      	adds	r7, #36	; 0x24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b095      	sub	sp, #84	; 0x54
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	643b      	str	r3, [r7, #64]	; 0x40
 80064f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e6      	bne.n	80064d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	61fb      	str	r3, [r7, #28]
   return(result);
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	64bb      	str	r3, [r7, #72]	; 0x48
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3308      	adds	r3, #8
 8006524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800652c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e5      	bne.n	8006506 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653e:	2b01      	cmp	r3, #1
 8006540:	d118      	bne.n	8006574 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	613b      	str	r3, [r7, #16]
   return(result);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006586:	bf00      	nop
 8006588:	3754      	adds	r7, #84	; 0x54
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b090      	sub	sp, #64	; 0x40
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d037      	beq.n	8006618 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	623b      	str	r3, [r7, #32]
   return(result);
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d0:	633a      	str	r2, [r7, #48]	; 0x30
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	617b      	str	r3, [r7, #20]
   return(result);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006616:	e002      	b.n	800661e <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800661a:	f7ff fae9 	bl	8005bf0 <HAL_UART_TxCpltCallback>
}
 800661e:	bf00      	nop
 8006620:	3740      	adds	r7, #64	; 0x40
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fae5 	bl	8005c04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006654:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800665a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d109      	bne.n	800667e <UART_DMAError+0x3c>
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b21      	cmp	r3, #33	; 0x21
 800666e:	d106      	bne.n	800667e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006678:	6978      	ldr	r0, [r7, #20]
 800667a:	f7ff ff01 	bl	8006480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d109      	bne.n	80066a0 <UART_DMAError+0x5e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b22      	cmp	r3, #34	; 0x22
 8006690:	d106      	bne.n	80066a0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff16 	bl	80064cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	f043 0210 	orr.w	r2, r3, #16
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f7ff fab1 	bl	8005c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fa9b 	bl	8005c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b088      	sub	sp, #32
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6979      	ldr	r1, [r7, #20]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	613b      	str	r3, [r7, #16]
   return(result);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e6      	bne.n	80066f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fa5d 	bl	8005bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006736:	bf00      	nop
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b096      	sub	sp, #88	; 0x58
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800674c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006754:	2b22      	cmp	r3, #34	; 0x22
 8006756:	f040 8094 	bne.w	8006882 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006760:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006764:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006768:	b2d9      	uxtb	r1, r3
 800676a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	400a      	ands	r2, r1
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d177      	bne.n	8006892 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b6:	653b      	str	r3, [r7, #80]	; 0x50
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
 80067c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	623b      	str	r3, [r7, #32]
   return(result);
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f4:	633a      	str	r2, [r7, #48]	; 0x30
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006818:	2b01      	cmp	r3, #1
 800681a:	d12e      	bne.n	800687a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0310 	bic.w	r3, r3, #16
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	617b      	str	r3, [r7, #20]
   return(result);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b10      	cmp	r3, #16
 8006860:	d103      	bne.n	800686a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2210      	movs	r2, #16
 8006868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff f9da 	bl	8005c2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006878:	e00b      	b.n	8006892 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7f9 ff10 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 8006880:	e007      	b.n	8006892 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	619a      	str	r2, [r3, #24]
}
 8006892:	bf00      	nop
 8006894:	3758      	adds	r7, #88	; 0x58
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b096      	sub	sp, #88	; 0x58
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068b0:	2b22      	cmp	r3, #34	; 0x22
 80068b2:	f040 8094 	bne.w	80069de <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80068c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80068ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068ce:	4013      	ands	r3, r2
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d177      	bne.n	80069ee <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
 800691e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e6      	bne.n	80068fe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	64bb      	str	r3, [r7, #72]	; 0x48
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006974:	2b01      	cmp	r3, #1
 8006976:	d12e      	bne.n	80069d6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	60bb      	str	r3, [r7, #8]
   return(result);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6979      	ldr	r1, [r7, #20]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	613b      	str	r3, [r7, #16]
   return(result);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d103      	bne.n	80069c6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2210      	movs	r2, #16
 80069c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff f92c 	bl	8005c2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069d4:	e00b      	b.n	80069ee <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7f9 fe62 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 80069dc:	e007      	b.n	80069ee <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0208 	orr.w	r2, r2, #8
 80069ec:	619a      	str	r2, [r3, #24]
}
 80069ee:	bf00      	nop
 80069f0:	3758      	adds	r7, #88	; 0x58
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <__errno>:
 8006a0c:	4b01      	ldr	r3, [pc, #4]	; (8006a14 <__errno+0x8>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <__libc_init_array>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	4d0d      	ldr	r5, [pc, #52]	; (8006a50 <__libc_init_array+0x38>)
 8006a1c:	4c0d      	ldr	r4, [pc, #52]	; (8006a54 <__libc_init_array+0x3c>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	2600      	movs	r6, #0
 8006a24:	42a6      	cmp	r6, r4
 8006a26:	d109      	bne.n	8006a3c <__libc_init_array+0x24>
 8006a28:	4d0b      	ldr	r5, [pc, #44]	; (8006a58 <__libc_init_array+0x40>)
 8006a2a:	4c0c      	ldr	r4, [pc, #48]	; (8006a5c <__libc_init_array+0x44>)
 8006a2c:	f001 f824 	bl	8007a78 <_init>
 8006a30:	1b64      	subs	r4, r4, r5
 8006a32:	10a4      	asrs	r4, r4, #2
 8006a34:	2600      	movs	r6, #0
 8006a36:	42a6      	cmp	r6, r4
 8006a38:	d105      	bne.n	8006a46 <__libc_init_array+0x2e>
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a40:	4798      	blx	r3
 8006a42:	3601      	adds	r6, #1
 8006a44:	e7ee      	b.n	8006a24 <__libc_init_array+0xc>
 8006a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4a:	4798      	blx	r3
 8006a4c:	3601      	adds	r6, #1
 8006a4e:	e7f2      	b.n	8006a36 <__libc_init_array+0x1e>
 8006a50:	08007b80 	.word	0x08007b80
 8006a54:	08007b80 	.word	0x08007b80
 8006a58:	08007b80 	.word	0x08007b80
 8006a5c:	08007b84 	.word	0x08007b84

08006a60 <memset>:
 8006a60:	4402      	add	r2, r0
 8006a62:	4603      	mov	r3, r0
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d100      	bne.n	8006a6a <memset+0xa>
 8006a68:	4770      	bx	lr
 8006a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6e:	e7f9      	b.n	8006a64 <memset+0x4>

08006a70 <iprintf>:
 8006a70:	b40f      	push	{r0, r1, r2, r3}
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <iprintf+0x2c>)
 8006a74:	b513      	push	{r0, r1, r4, lr}
 8006a76:	681c      	ldr	r4, [r3, #0]
 8006a78:	b124      	cbz	r4, 8006a84 <iprintf+0x14>
 8006a7a:	69a3      	ldr	r3, [r4, #24]
 8006a7c:	b913      	cbnz	r3, 8006a84 <iprintf+0x14>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 fa5e 	bl	8006f40 <__sinit>
 8006a84:	ab05      	add	r3, sp, #20
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fc67 	bl	8007360 <_vfiprintf_r>
 8006a92:	b002      	add	sp, #8
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <_puts_r>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	460e      	mov	r6, r1
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	b118      	cbz	r0, 8006ab0 <_puts_r+0x10>
 8006aa8:	6983      	ldr	r3, [r0, #24]
 8006aaa:	b90b      	cbnz	r3, 8006ab0 <_puts_r+0x10>
 8006aac:	f000 fa48 	bl	8006f40 <__sinit>
 8006ab0:	69ab      	ldr	r3, [r5, #24]
 8006ab2:	68ac      	ldr	r4, [r5, #8]
 8006ab4:	b913      	cbnz	r3, 8006abc <_puts_r+0x1c>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 fa42 	bl	8006f40 <__sinit>
 8006abc:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <_puts_r+0xd0>)
 8006abe:	429c      	cmp	r4, r3
 8006ac0:	d120      	bne.n	8006b04 <_puts_r+0x64>
 8006ac2:	686c      	ldr	r4, [r5, #4]
 8006ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d405      	bmi.n	8006ad6 <_puts_r+0x36>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	0598      	lsls	r0, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_puts_r+0x36>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f000 fad3 	bl	800707c <__retarget_lock_acquire_recursive>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	0719      	lsls	r1, r3, #28
 8006ada:	d51d      	bpl.n	8006b18 <_puts_r+0x78>
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	b1db      	cbz	r3, 8006b18 <_puts_r+0x78>
 8006ae0:	3e01      	subs	r6, #1
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	60a3      	str	r3, [r4, #8]
 8006aec:	bb39      	cbnz	r1, 8006b3e <_puts_r+0x9e>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da38      	bge.n	8006b64 <_puts_r+0xc4>
 8006af2:	4622      	mov	r2, r4
 8006af4:	210a      	movs	r1, #10
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 f848 	bl	8006b8c <__swbuf_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d011      	beq.n	8006b24 <_puts_r+0x84>
 8006b00:	250a      	movs	r5, #10
 8006b02:	e011      	b.n	8006b28 <_puts_r+0x88>
 8006b04:	4b1b      	ldr	r3, [pc, #108]	; (8006b74 <_puts_r+0xd4>)
 8006b06:	429c      	cmp	r4, r3
 8006b08:	d101      	bne.n	8006b0e <_puts_r+0x6e>
 8006b0a:	68ac      	ldr	r4, [r5, #8]
 8006b0c:	e7da      	b.n	8006ac4 <_puts_r+0x24>
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <_puts_r+0xd8>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	bf08      	it	eq
 8006b14:	68ec      	ldreq	r4, [r5, #12]
 8006b16:	e7d5      	b.n	8006ac4 <_puts_r+0x24>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 f888 	bl	8006c30 <__swsetup_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d0dd      	beq.n	8006ae0 <_puts_r+0x40>
 8006b24:	f04f 35ff 	mov.w	r5, #4294967295
 8006b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b2a:	07da      	lsls	r2, r3, #31
 8006b2c:	d405      	bmi.n	8006b3a <_puts_r+0x9a>
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	059b      	lsls	r3, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_puts_r+0x9a>
 8006b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b36:	f000 faa2 	bl	800707e <__retarget_lock_release_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da04      	bge.n	8006b4c <_puts_r+0xac>
 8006b42:	69a2      	ldr	r2, [r4, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	dc06      	bgt.n	8006b56 <_puts_r+0xb6>
 8006b48:	290a      	cmp	r1, #10
 8006b4a:	d004      	beq.n	8006b56 <_puts_r+0xb6>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	6022      	str	r2, [r4, #0]
 8006b52:	7019      	strb	r1, [r3, #0]
 8006b54:	e7c5      	b.n	8006ae2 <_puts_r+0x42>
 8006b56:	4622      	mov	r2, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 f817 	bl	8006b8c <__swbuf_r>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d1bf      	bne.n	8006ae2 <_puts_r+0x42>
 8006b62:	e7df      	b.n	8006b24 <_puts_r+0x84>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	250a      	movs	r5, #10
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	6022      	str	r2, [r4, #0]
 8006b6c:	701d      	strb	r5, [r3, #0]
 8006b6e:	e7db      	b.n	8006b28 <_puts_r+0x88>
 8006b70:	08007b0c 	.word	0x08007b0c
 8006b74:	08007b2c 	.word	0x08007b2c
 8006b78:	08007aec 	.word	0x08007aec

08006b7c <puts>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <puts+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bf8d 	b.w	8006aa0 <_puts_r>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <__swbuf_r>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	460e      	mov	r6, r1
 8006b90:	4614      	mov	r4, r2
 8006b92:	4605      	mov	r5, r0
 8006b94:	b118      	cbz	r0, 8006b9e <__swbuf_r+0x12>
 8006b96:	6983      	ldr	r3, [r0, #24]
 8006b98:	b90b      	cbnz	r3, 8006b9e <__swbuf_r+0x12>
 8006b9a:	f000 f9d1 	bl	8006f40 <__sinit>
 8006b9e:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <__swbuf_r+0x98>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d12b      	bne.n	8006bfc <__swbuf_r+0x70>
 8006ba4:	686c      	ldr	r4, [r5, #4]
 8006ba6:	69a3      	ldr	r3, [r4, #24]
 8006ba8:	60a3      	str	r3, [r4, #8]
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	071a      	lsls	r2, r3, #28
 8006bae:	d52f      	bpl.n	8006c10 <__swbuf_r+0x84>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	b36b      	cbz	r3, 8006c10 <__swbuf_r+0x84>
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	1ac0      	subs	r0, r0, r3
 8006bba:	6963      	ldr	r3, [r4, #20]
 8006bbc:	b2f6      	uxtb	r6, r6
 8006bbe:	4283      	cmp	r3, r0
 8006bc0:	4637      	mov	r7, r6
 8006bc2:	dc04      	bgt.n	8006bce <__swbuf_r+0x42>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f926 	bl	8006e18 <_fflush_r>
 8006bcc:	bb30      	cbnz	r0, 8006c1c <__swbuf_r+0x90>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	6022      	str	r2, [r4, #0]
 8006bda:	701e      	strb	r6, [r3, #0]
 8006bdc:	6963      	ldr	r3, [r4, #20]
 8006bde:	3001      	adds	r0, #1
 8006be0:	4283      	cmp	r3, r0
 8006be2:	d004      	beq.n	8006bee <__swbuf_r+0x62>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	07db      	lsls	r3, r3, #31
 8006be8:	d506      	bpl.n	8006bf8 <__swbuf_r+0x6c>
 8006bea:	2e0a      	cmp	r6, #10
 8006bec:	d104      	bne.n	8006bf8 <__swbuf_r+0x6c>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f911 	bl	8006e18 <_fflush_r>
 8006bf6:	b988      	cbnz	r0, 8006c1c <__swbuf_r+0x90>
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <__swbuf_r+0x9c>)
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	d101      	bne.n	8006c06 <__swbuf_r+0x7a>
 8006c02:	68ac      	ldr	r4, [r5, #8]
 8006c04:	e7cf      	b.n	8006ba6 <__swbuf_r+0x1a>
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <__swbuf_r+0xa0>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	bf08      	it	eq
 8006c0c:	68ec      	ldreq	r4, [r5, #12]
 8006c0e:	e7ca      	b.n	8006ba6 <__swbuf_r+0x1a>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f80c 	bl	8006c30 <__swsetup_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d0cb      	beq.n	8006bb4 <__swbuf_r+0x28>
 8006c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c20:	e7ea      	b.n	8006bf8 <__swbuf_r+0x6c>
 8006c22:	bf00      	nop
 8006c24:	08007b0c 	.word	0x08007b0c
 8006c28:	08007b2c 	.word	0x08007b2c
 8006c2c:	08007aec 	.word	0x08007aec

08006c30 <__swsetup_r>:
 8006c30:	4b32      	ldr	r3, [pc, #200]	; (8006cfc <__swsetup_r+0xcc>)
 8006c32:	b570      	push	{r4, r5, r6, lr}
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	4606      	mov	r6, r0
 8006c38:	460c      	mov	r4, r1
 8006c3a:	b125      	cbz	r5, 8006c46 <__swsetup_r+0x16>
 8006c3c:	69ab      	ldr	r3, [r5, #24]
 8006c3e:	b913      	cbnz	r3, 8006c46 <__swsetup_r+0x16>
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f97d 	bl	8006f40 <__sinit>
 8006c46:	4b2e      	ldr	r3, [pc, #184]	; (8006d00 <__swsetup_r+0xd0>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	d10f      	bne.n	8006c6c <__swsetup_r+0x3c>
 8006c4c:	686c      	ldr	r4, [r5, #4]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c54:	0719      	lsls	r1, r3, #28
 8006c56:	d42c      	bmi.n	8006cb2 <__swsetup_r+0x82>
 8006c58:	06dd      	lsls	r5, r3, #27
 8006c5a:	d411      	bmi.n	8006c80 <__swsetup_r+0x50>
 8006c5c:	2309      	movs	r3, #9
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	e03e      	b.n	8006cea <__swsetup_r+0xba>
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <__swsetup_r+0xd4>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d101      	bne.n	8006c76 <__swsetup_r+0x46>
 8006c72:	68ac      	ldr	r4, [r5, #8]
 8006c74:	e7eb      	b.n	8006c4e <__swsetup_r+0x1e>
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <__swsetup_r+0xd8>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	bf08      	it	eq
 8006c7c:	68ec      	ldreq	r4, [r5, #12]
 8006c7e:	e7e6      	b.n	8006c4e <__swsetup_r+0x1e>
 8006c80:	0758      	lsls	r0, r3, #29
 8006c82:	d512      	bpl.n	8006caa <__swsetup_r+0x7a>
 8006c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c86:	b141      	cbz	r1, 8006c9a <__swsetup_r+0x6a>
 8006c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d002      	beq.n	8006c96 <__swsetup_r+0x66>
 8006c90:	4630      	mov	r0, r6
 8006c92:	f000 fa5b 	bl	800714c <_free_r>
 8006c96:	2300      	movs	r3, #0
 8006c98:	6363      	str	r3, [r4, #52]	; 0x34
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f043 0308 	orr.w	r3, r3, #8
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	b94b      	cbnz	r3, 8006cca <__swsetup_r+0x9a>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d003      	beq.n	8006cca <__swsetup_r+0x9a>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 fa01 	bl	80070cc <__smakebuf_r>
 8006cca:	89a0      	ldrh	r0, [r4, #12]
 8006ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cd0:	f010 0301 	ands.w	r3, r0, #1
 8006cd4:	d00a      	beq.n	8006cec <__swsetup_r+0xbc>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60a3      	str	r3, [r4, #8]
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	425b      	negs	r3, r3
 8006cde:	61a3      	str	r3, [r4, #24]
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b943      	cbnz	r3, 8006cf6 <__swsetup_r+0xc6>
 8006ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ce8:	d1ba      	bne.n	8006c60 <__swsetup_r+0x30>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	0781      	lsls	r1, r0, #30
 8006cee:	bf58      	it	pl
 8006cf0:	6963      	ldrpl	r3, [r4, #20]
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	e7f4      	b.n	8006ce0 <__swsetup_r+0xb0>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e7f7      	b.n	8006cea <__swsetup_r+0xba>
 8006cfa:	bf00      	nop
 8006cfc:	2000000c 	.word	0x2000000c
 8006d00:	08007b0c 	.word	0x08007b0c
 8006d04:	08007b2c 	.word	0x08007b2c
 8006d08:	08007aec 	.word	0x08007aec

08006d0c <__sflush_r>:
 8006d0c:	898a      	ldrh	r2, [r1, #12]
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	4605      	mov	r5, r0
 8006d14:	0710      	lsls	r0, r2, #28
 8006d16:	460c      	mov	r4, r1
 8006d18:	d458      	bmi.n	8006dcc <__sflush_r+0xc0>
 8006d1a:	684b      	ldr	r3, [r1, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dc05      	bgt.n	8006d2c <__sflush_r+0x20>
 8006d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dc02      	bgt.n	8006d2c <__sflush_r+0x20>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	d0f9      	beq.n	8006d26 <__sflush_r+0x1a>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d38:	682f      	ldr	r7, [r5, #0]
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	d032      	beq.n	8006da4 <__sflush_r+0x98>
 8006d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	075a      	lsls	r2, r3, #29
 8006d44:	d505      	bpl.n	8006d52 <__sflush_r+0x46>
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	1ac0      	subs	r0, r0, r3
 8006d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d4c:	b10b      	cbz	r3, 8006d52 <__sflush_r+0x46>
 8006d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	2300      	movs	r3, #0
 8006d54:	4602      	mov	r2, r0
 8006d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b0      	blx	r6
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	d106      	bne.n	8006d72 <__sflush_r+0x66>
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	291d      	cmp	r1, #29
 8006d68:	d82c      	bhi.n	8006dc4 <__sflush_r+0xb8>
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <__sflush_r+0x108>)
 8006d6c:	40ca      	lsrs	r2, r1
 8006d6e:	07d6      	lsls	r6, r2, #31
 8006d70:	d528      	bpl.n	8006dc4 <__sflush_r+0xb8>
 8006d72:	2200      	movs	r2, #0
 8006d74:	6062      	str	r2, [r4, #4]
 8006d76:	04d9      	lsls	r1, r3, #19
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	d504      	bpl.n	8006d88 <__sflush_r+0x7c>
 8006d7e:	1c42      	adds	r2, r0, #1
 8006d80:	d101      	bne.n	8006d86 <__sflush_r+0x7a>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	b903      	cbnz	r3, 8006d88 <__sflush_r+0x7c>
 8006d86:	6560      	str	r0, [r4, #84]	; 0x54
 8006d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8a:	602f      	str	r7, [r5, #0]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d0ca      	beq.n	8006d26 <__sflush_r+0x1a>
 8006d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d94:	4299      	cmp	r1, r3
 8006d96:	d002      	beq.n	8006d9e <__sflush_r+0x92>
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 f9d7 	bl	800714c <_free_r>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	6360      	str	r0, [r4, #52]	; 0x34
 8006da2:	e7c1      	b.n	8006d28 <__sflush_r+0x1c>
 8006da4:	6a21      	ldr	r1, [r4, #32]
 8006da6:	2301      	movs	r3, #1
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b0      	blx	r6
 8006dac:	1c41      	adds	r1, r0, #1
 8006dae:	d1c7      	bne.n	8006d40 <__sflush_r+0x34>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0c4      	beq.n	8006d40 <__sflush_r+0x34>
 8006db6:	2b1d      	cmp	r3, #29
 8006db8:	d001      	beq.n	8006dbe <__sflush_r+0xb2>
 8006dba:	2b16      	cmp	r3, #22
 8006dbc:	d101      	bne.n	8006dc2 <__sflush_r+0xb6>
 8006dbe:	602f      	str	r7, [r5, #0]
 8006dc0:	e7b1      	b.n	8006d26 <__sflush_r+0x1a>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e7ad      	b.n	8006d28 <__sflush_r+0x1c>
 8006dcc:	690f      	ldr	r7, [r1, #16]
 8006dce:	2f00      	cmp	r7, #0
 8006dd0:	d0a9      	beq.n	8006d26 <__sflush_r+0x1a>
 8006dd2:	0793      	lsls	r3, r2, #30
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	bf08      	it	eq
 8006dd8:	694b      	ldreq	r3, [r1, #20]
 8006dda:	600f      	str	r7, [r1, #0]
 8006ddc:	bf18      	it	ne
 8006dde:	2300      	movne	r3, #0
 8006de0:	eba6 0807 	sub.w	r8, r6, r7
 8006de4:	608b      	str	r3, [r1, #8]
 8006de6:	f1b8 0f00 	cmp.w	r8, #0
 8006dea:	dd9c      	ble.n	8006d26 <__sflush_r+0x1a>
 8006dec:	6a21      	ldr	r1, [r4, #32]
 8006dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df0:	4643      	mov	r3, r8
 8006df2:	463a      	mov	r2, r7
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b0      	blx	r6
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	dc06      	bgt.n	8006e0a <__sflush_r+0xfe>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	e78e      	b.n	8006d28 <__sflush_r+0x1c>
 8006e0a:	4407      	add	r7, r0
 8006e0c:	eba8 0800 	sub.w	r8, r8, r0
 8006e10:	e7e9      	b.n	8006de6 <__sflush_r+0xda>
 8006e12:	bf00      	nop
 8006e14:	20400001 	.word	0x20400001

08006e18 <_fflush_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b913      	cbnz	r3, 8006e28 <_fflush_r+0x10>
 8006e22:	2500      	movs	r5, #0
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	b118      	cbz	r0, 8006e32 <_fflush_r+0x1a>
 8006e2a:	6983      	ldr	r3, [r0, #24]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <_fflush_r+0x1a>
 8006e2e:	f000 f887 	bl	8006f40 <__sinit>
 8006e32:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <_fflush_r+0x6c>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d11b      	bne.n	8006e70 <_fflush_r+0x58>
 8006e38:	686c      	ldr	r4, [r5, #4]
 8006e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ef      	beq.n	8006e22 <_fflush_r+0xa>
 8006e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e44:	07d0      	lsls	r0, r2, #31
 8006e46:	d404      	bmi.n	8006e52 <_fflush_r+0x3a>
 8006e48:	0599      	lsls	r1, r3, #22
 8006e4a:	d402      	bmi.n	8006e52 <_fflush_r+0x3a>
 8006e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4e:	f000 f915 	bl	800707c <__retarget_lock_acquire_recursive>
 8006e52:	4628      	mov	r0, r5
 8006e54:	4621      	mov	r1, r4
 8006e56:	f7ff ff59 	bl	8006d0c <__sflush_r>
 8006e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e5c:	07da      	lsls	r2, r3, #31
 8006e5e:	4605      	mov	r5, r0
 8006e60:	d4e0      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	059b      	lsls	r3, r3, #22
 8006e66:	d4dd      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6a:	f000 f908 	bl	800707e <__retarget_lock_release_recursive>
 8006e6e:	e7d9      	b.n	8006e24 <_fflush_r+0xc>
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <_fflush_r+0x70>)
 8006e72:	429c      	cmp	r4, r3
 8006e74:	d101      	bne.n	8006e7a <_fflush_r+0x62>
 8006e76:	68ac      	ldr	r4, [r5, #8]
 8006e78:	e7df      	b.n	8006e3a <_fflush_r+0x22>
 8006e7a:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <_fflush_r+0x74>)
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	bf08      	it	eq
 8006e80:	68ec      	ldreq	r4, [r5, #12]
 8006e82:	e7da      	b.n	8006e3a <_fflush_r+0x22>
 8006e84:	08007b0c 	.word	0x08007b0c
 8006e88:	08007b2c 	.word	0x08007b2c
 8006e8c:	08007aec 	.word	0x08007aec

08006e90 <std>:
 8006e90:	2300      	movs	r3, #0
 8006e92:	b510      	push	{r4, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e9e:	6083      	str	r3, [r0, #8]
 8006ea0:	8181      	strh	r1, [r0, #12]
 8006ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea4:	81c2      	strh	r2, [r0, #14]
 8006ea6:	6183      	str	r3, [r0, #24]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	2208      	movs	r2, #8
 8006eac:	305c      	adds	r0, #92	; 0x5c
 8006eae:	f7ff fdd7 	bl	8006a60 <memset>
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <std+0x38>)
 8006eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <std+0x3c>)
 8006eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x40>)
 8006ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x44>)
 8006ec0:	6224      	str	r4, [r4, #32]
 8006ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	bf00      	nop
 8006ec8:	08007909 	.word	0x08007909
 8006ecc:	0800792b 	.word	0x0800792b
 8006ed0:	08007963 	.word	0x08007963
 8006ed4:	08007987 	.word	0x08007987

08006ed8 <_cleanup_r>:
 8006ed8:	4901      	ldr	r1, [pc, #4]	; (8006ee0 <_cleanup_r+0x8>)
 8006eda:	f000 b8af 	b.w	800703c <_fwalk_reent>
 8006ede:	bf00      	nop
 8006ee0:	08006e19 	.word	0x08006e19

08006ee4 <__sfmoreglue>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	2268      	movs	r2, #104	; 0x68
 8006ee8:	1e4d      	subs	r5, r1, #1
 8006eea:	4355      	muls	r5, r2
 8006eec:	460e      	mov	r6, r1
 8006eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ef2:	f000 f997 	bl	8007224 <_malloc_r>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	b140      	cbz	r0, 8006f0c <__sfmoreglue+0x28>
 8006efa:	2100      	movs	r1, #0
 8006efc:	e9c0 1600 	strd	r1, r6, [r0]
 8006f00:	300c      	adds	r0, #12
 8006f02:	60a0      	str	r0, [r4, #8]
 8006f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f08:	f7ff fdaa 	bl	8006a60 <memset>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}

08006f10 <__sfp_lock_acquire>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__sfp_lock_acquire+0x8>)
 8006f12:	f000 b8b3 	b.w	800707c <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	200002d9 	.word	0x200002d9

08006f1c <__sfp_lock_release>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__sfp_lock_release+0x8>)
 8006f1e:	f000 b8ae 	b.w	800707e <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	200002d9 	.word	0x200002d9

08006f28 <__sinit_lock_acquire>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sinit_lock_acquire+0x8>)
 8006f2a:	f000 b8a7 	b.w	800707c <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	200002da 	.word	0x200002da

08006f34 <__sinit_lock_release>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sinit_lock_release+0x8>)
 8006f36:	f000 b8a2 	b.w	800707e <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	200002da 	.word	0x200002da

08006f40 <__sinit>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4604      	mov	r4, r0
 8006f44:	f7ff fff0 	bl	8006f28 <__sinit_lock_acquire>
 8006f48:	69a3      	ldr	r3, [r4, #24]
 8006f4a:	b11b      	cbz	r3, 8006f54 <__sinit+0x14>
 8006f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f50:	f7ff bff0 	b.w	8006f34 <__sinit_lock_release>
 8006f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f58:	6523      	str	r3, [r4, #80]	; 0x50
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <__sinit+0x68>)
 8006f5c:	4a13      	ldr	r2, [pc, #76]	; (8006fac <__sinit+0x6c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	bf04      	itt	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	61a3      	streq	r3, [r4, #24]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 f820 	bl	8006fb0 <__sfp>
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f81c 	bl	8006fb0 <__sfp>
 8006f78:	60a0      	str	r0, [r4, #8]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f818 	bl	8006fb0 <__sfp>
 8006f80:	2200      	movs	r2, #0
 8006f82:	60e0      	str	r0, [r4, #12]
 8006f84:	2104      	movs	r1, #4
 8006f86:	6860      	ldr	r0, [r4, #4]
 8006f88:	f7ff ff82 	bl	8006e90 <std>
 8006f8c:	68a0      	ldr	r0, [r4, #8]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	2109      	movs	r1, #9
 8006f92:	f7ff ff7d 	bl	8006e90 <std>
 8006f96:	68e0      	ldr	r0, [r4, #12]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	2112      	movs	r1, #18
 8006f9c:	f7ff ff78 	bl	8006e90 <std>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	61a3      	str	r3, [r4, #24]
 8006fa4:	e7d2      	b.n	8006f4c <__sinit+0xc>
 8006fa6:	bf00      	nop
 8006fa8:	08007ae8 	.word	0x08007ae8
 8006fac:	08006ed9 	.word	0x08006ed9

08006fb0 <__sfp>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	f7ff ffac 	bl	8006f10 <__sfp_lock_acquire>
 8006fb8:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <__sfp+0x84>)
 8006fba:	681e      	ldr	r6, [r3, #0]
 8006fbc:	69b3      	ldr	r3, [r6, #24]
 8006fbe:	b913      	cbnz	r3, 8006fc6 <__sfp+0x16>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7ff ffbd 	bl	8006f40 <__sinit>
 8006fc6:	3648      	adds	r6, #72	; 0x48
 8006fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	d503      	bpl.n	8006fd8 <__sfp+0x28>
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	b30b      	cbz	r3, 8007018 <__sfp+0x68>
 8006fd4:	6836      	ldr	r6, [r6, #0]
 8006fd6:	e7f7      	b.n	8006fc8 <__sfp+0x18>
 8006fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fdc:	b9d5      	cbnz	r5, 8007014 <__sfp+0x64>
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <__sfp+0x88>)
 8006fe0:	60e3      	str	r3, [r4, #12]
 8006fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8006fe8:	f000 f847 	bl	800707a <__retarget_lock_init_recursive>
 8006fec:	f7ff ff96 	bl	8006f1c <__sfp_lock_release>
 8006ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ff8:	6025      	str	r5, [r4, #0]
 8006ffa:	61a5      	str	r5, [r4, #24]
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	4629      	mov	r1, r5
 8007000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007004:	f7ff fd2c 	bl	8006a60 <memset>
 8007008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800700c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007010:	4620      	mov	r0, r4
 8007012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007014:	3468      	adds	r4, #104	; 0x68
 8007016:	e7d9      	b.n	8006fcc <__sfp+0x1c>
 8007018:	2104      	movs	r1, #4
 800701a:	4638      	mov	r0, r7
 800701c:	f7ff ff62 	bl	8006ee4 <__sfmoreglue>
 8007020:	4604      	mov	r4, r0
 8007022:	6030      	str	r0, [r6, #0]
 8007024:	2800      	cmp	r0, #0
 8007026:	d1d5      	bne.n	8006fd4 <__sfp+0x24>
 8007028:	f7ff ff78 	bl	8006f1c <__sfp_lock_release>
 800702c:	230c      	movs	r3, #12
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	e7ee      	b.n	8007010 <__sfp+0x60>
 8007032:	bf00      	nop
 8007034:	08007ae8 	.word	0x08007ae8
 8007038:	ffff0001 	.word	0xffff0001

0800703c <_fwalk_reent>:
 800703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007040:	4606      	mov	r6, r0
 8007042:	4688      	mov	r8, r1
 8007044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007048:	2700      	movs	r7, #0
 800704a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800704e:	f1b9 0901 	subs.w	r9, r9, #1
 8007052:	d505      	bpl.n	8007060 <_fwalk_reent+0x24>
 8007054:	6824      	ldr	r4, [r4, #0]
 8007056:	2c00      	cmp	r4, #0
 8007058:	d1f7      	bne.n	800704a <_fwalk_reent+0xe>
 800705a:	4638      	mov	r0, r7
 800705c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007060:	89ab      	ldrh	r3, [r5, #12]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d907      	bls.n	8007076 <_fwalk_reent+0x3a>
 8007066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800706a:	3301      	adds	r3, #1
 800706c:	d003      	beq.n	8007076 <_fwalk_reent+0x3a>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	47c0      	blx	r8
 8007074:	4307      	orrs	r7, r0
 8007076:	3568      	adds	r5, #104	; 0x68
 8007078:	e7e9      	b.n	800704e <_fwalk_reent+0x12>

0800707a <__retarget_lock_init_recursive>:
 800707a:	4770      	bx	lr

0800707c <__retarget_lock_acquire_recursive>:
 800707c:	4770      	bx	lr

0800707e <__retarget_lock_release_recursive>:
 800707e:	4770      	bx	lr

08007080 <__swhatbuf_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	460e      	mov	r6, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2900      	cmp	r1, #0
 800708a:	b096      	sub	sp, #88	; 0x58
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	da08      	bge.n	80070a4 <__swhatbuf_r+0x24>
 8007092:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	061a      	lsls	r2, r3, #24
 800709c:	d410      	bmi.n	80070c0 <__swhatbuf_r+0x40>
 800709e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a2:	e00e      	b.n	80070c2 <__swhatbuf_r+0x42>
 80070a4:	466a      	mov	r2, sp
 80070a6:	f000 fc95 	bl	80079d4 <_fstat_r>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	dbf1      	blt.n	8007092 <__swhatbuf_r+0x12>
 80070ae:	9a01      	ldr	r2, [sp, #4]
 80070b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b8:	425a      	negs	r2, r3
 80070ba:	415a      	adcs	r2, r3
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	e7ee      	b.n	800709e <__swhatbuf_r+0x1e>
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	2000      	movs	r0, #0
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	b016      	add	sp, #88	; 0x58
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080070cc <__smakebuf_r>:
 80070cc:	898b      	ldrh	r3, [r1, #12]
 80070ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070d0:	079d      	lsls	r5, r3, #30
 80070d2:	4606      	mov	r6, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	d507      	bpl.n	80070e8 <__smakebuf_r+0x1c>
 80070d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	2301      	movs	r3, #1
 80070e2:	6163      	str	r3, [r4, #20]
 80070e4:	b002      	add	sp, #8
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	ab01      	add	r3, sp, #4
 80070ea:	466a      	mov	r2, sp
 80070ec:	f7ff ffc8 	bl	8007080 <__swhatbuf_r>
 80070f0:	9900      	ldr	r1, [sp, #0]
 80070f2:	4605      	mov	r5, r0
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 f895 	bl	8007224 <_malloc_r>
 80070fa:	b948      	cbnz	r0, 8007110 <__smakebuf_r+0x44>
 80070fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007100:	059a      	lsls	r2, r3, #22
 8007102:	d4ef      	bmi.n	80070e4 <__smakebuf_r+0x18>
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	f043 0302 	orr.w	r3, r3, #2
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	e7e3      	b.n	80070d8 <__smakebuf_r+0xc>
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <__smakebuf_r+0x7c>)
 8007112:	62b3      	str	r3, [r6, #40]	; 0x28
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	6020      	str	r0, [r4, #0]
 8007118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	6163      	str	r3, [r4, #20]
 8007122:	9b01      	ldr	r3, [sp, #4]
 8007124:	6120      	str	r0, [r4, #16]
 8007126:	b15b      	cbz	r3, 8007140 <__smakebuf_r+0x74>
 8007128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712c:	4630      	mov	r0, r6
 800712e:	f000 fc63 	bl	80079f8 <_isatty_r>
 8007132:	b128      	cbz	r0, 8007140 <__smakebuf_r+0x74>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	89a0      	ldrh	r0, [r4, #12]
 8007142:	4305      	orrs	r5, r0
 8007144:	81a5      	strh	r5, [r4, #12]
 8007146:	e7cd      	b.n	80070e4 <__smakebuf_r+0x18>
 8007148:	08006ed9 	.word	0x08006ed9

0800714c <_free_r>:
 800714c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800714e:	2900      	cmp	r1, #0
 8007150:	d044      	beq.n	80071dc <_free_r+0x90>
 8007152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007156:	9001      	str	r0, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f1a1 0404 	sub.w	r4, r1, #4
 800715e:	bfb8      	it	lt
 8007160:	18e4      	addlt	r4, r4, r3
 8007162:	f000 fc6b 	bl	8007a3c <__malloc_lock>
 8007166:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <_free_r+0x94>)
 8007168:	9801      	ldr	r0, [sp, #4]
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	b933      	cbnz	r3, 800717c <_free_r+0x30>
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	6014      	str	r4, [r2, #0]
 8007172:	b003      	add	sp, #12
 8007174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007178:	f000 bc66 	b.w	8007a48 <__malloc_unlock>
 800717c:	42a3      	cmp	r3, r4
 800717e:	d908      	bls.n	8007192 <_free_r+0x46>
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	1961      	adds	r1, r4, r5
 8007184:	428b      	cmp	r3, r1
 8007186:	bf01      	itttt	eq
 8007188:	6819      	ldreq	r1, [r3, #0]
 800718a:	685b      	ldreq	r3, [r3, #4]
 800718c:	1949      	addeq	r1, r1, r5
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	e7ed      	b.n	800716e <_free_r+0x22>
 8007192:	461a      	mov	r2, r3
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b10b      	cbz	r3, 800719c <_free_r+0x50>
 8007198:	42a3      	cmp	r3, r4
 800719a:	d9fa      	bls.n	8007192 <_free_r+0x46>
 800719c:	6811      	ldr	r1, [r2, #0]
 800719e:	1855      	adds	r5, r2, r1
 80071a0:	42a5      	cmp	r5, r4
 80071a2:	d10b      	bne.n	80071bc <_free_r+0x70>
 80071a4:	6824      	ldr	r4, [r4, #0]
 80071a6:	4421      	add	r1, r4
 80071a8:	1854      	adds	r4, r2, r1
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	d1e0      	bne.n	8007172 <_free_r+0x26>
 80071b0:	681c      	ldr	r4, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	6053      	str	r3, [r2, #4]
 80071b6:	4421      	add	r1, r4
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	e7da      	b.n	8007172 <_free_r+0x26>
 80071bc:	d902      	bls.n	80071c4 <_free_r+0x78>
 80071be:	230c      	movs	r3, #12
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	e7d6      	b.n	8007172 <_free_r+0x26>
 80071c4:	6825      	ldr	r5, [r4, #0]
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	428b      	cmp	r3, r1
 80071ca:	bf04      	itt	eq
 80071cc:	6819      	ldreq	r1, [r3, #0]
 80071ce:	685b      	ldreq	r3, [r3, #4]
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	bf04      	itt	eq
 80071d4:	1949      	addeq	r1, r1, r5
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	6054      	str	r4, [r2, #4]
 80071da:	e7ca      	b.n	8007172 <_free_r+0x26>
 80071dc:	b003      	add	sp, #12
 80071de:	bd30      	pop	{r4, r5, pc}
 80071e0:	200002dc 	.word	0x200002dc

080071e4 <sbrk_aligned>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4e0e      	ldr	r6, [pc, #56]	; (8007220 <sbrk_aligned+0x3c>)
 80071e8:	460c      	mov	r4, r1
 80071ea:	6831      	ldr	r1, [r6, #0]
 80071ec:	4605      	mov	r5, r0
 80071ee:	b911      	cbnz	r1, 80071f6 <sbrk_aligned+0x12>
 80071f0:	f000 fb7a 	bl	80078e8 <_sbrk_r>
 80071f4:	6030      	str	r0, [r6, #0]
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 fb75 	bl	80078e8 <_sbrk_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d00a      	beq.n	8007218 <sbrk_aligned+0x34>
 8007202:	1cc4      	adds	r4, r0, #3
 8007204:	f024 0403 	bic.w	r4, r4, #3
 8007208:	42a0      	cmp	r0, r4
 800720a:	d007      	beq.n	800721c <sbrk_aligned+0x38>
 800720c:	1a21      	subs	r1, r4, r0
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fb6a 	bl	80078e8 <_sbrk_r>
 8007214:	3001      	adds	r0, #1
 8007216:	d101      	bne.n	800721c <sbrk_aligned+0x38>
 8007218:	f04f 34ff 	mov.w	r4, #4294967295
 800721c:	4620      	mov	r0, r4
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	200002e0 	.word	0x200002e0

08007224 <_malloc_r>:
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	1ccd      	adds	r5, r1, #3
 800722a:	f025 0503 	bic.w	r5, r5, #3
 800722e:	3508      	adds	r5, #8
 8007230:	2d0c      	cmp	r5, #12
 8007232:	bf38      	it	cc
 8007234:	250c      	movcc	r5, #12
 8007236:	2d00      	cmp	r5, #0
 8007238:	4607      	mov	r7, r0
 800723a:	db01      	blt.n	8007240 <_malloc_r+0x1c>
 800723c:	42a9      	cmp	r1, r5
 800723e:	d905      	bls.n	800724c <_malloc_r+0x28>
 8007240:	230c      	movs	r3, #12
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	2600      	movs	r6, #0
 8007246:	4630      	mov	r0, r6
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	4e2e      	ldr	r6, [pc, #184]	; (8007308 <_malloc_r+0xe4>)
 800724e:	f000 fbf5 	bl	8007a3c <__malloc_lock>
 8007252:	6833      	ldr	r3, [r6, #0]
 8007254:	461c      	mov	r4, r3
 8007256:	bb34      	cbnz	r4, 80072a6 <_malloc_r+0x82>
 8007258:	4629      	mov	r1, r5
 800725a:	4638      	mov	r0, r7
 800725c:	f7ff ffc2 	bl	80071e4 <sbrk_aligned>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	4604      	mov	r4, r0
 8007264:	d14d      	bne.n	8007302 <_malloc_r+0xde>
 8007266:	6834      	ldr	r4, [r6, #0]
 8007268:	4626      	mov	r6, r4
 800726a:	2e00      	cmp	r6, #0
 800726c:	d140      	bne.n	80072f0 <_malloc_r+0xcc>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	4631      	mov	r1, r6
 8007272:	4638      	mov	r0, r7
 8007274:	eb04 0803 	add.w	r8, r4, r3
 8007278:	f000 fb36 	bl	80078e8 <_sbrk_r>
 800727c:	4580      	cmp	r8, r0
 800727e:	d13a      	bne.n	80072f6 <_malloc_r+0xd2>
 8007280:	6821      	ldr	r1, [r4, #0]
 8007282:	3503      	adds	r5, #3
 8007284:	1a6d      	subs	r5, r5, r1
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	4629      	mov	r1, r5
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ffa5 	bl	80071e4 <sbrk_aligned>
 800729a:	3001      	adds	r0, #1
 800729c:	d02b      	beq.n	80072f6 <_malloc_r+0xd2>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	442b      	add	r3, r5
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	e00e      	b.n	80072c4 <_malloc_r+0xa0>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	1b52      	subs	r2, r2, r5
 80072aa:	d41e      	bmi.n	80072ea <_malloc_r+0xc6>
 80072ac:	2a0b      	cmp	r2, #11
 80072ae:	d916      	bls.n	80072de <_malloc_r+0xba>
 80072b0:	1961      	adds	r1, r4, r5
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	6025      	str	r5, [r4, #0]
 80072b6:	bf18      	it	ne
 80072b8:	6059      	strne	r1, [r3, #4]
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	bf08      	it	eq
 80072be:	6031      	streq	r1, [r6, #0]
 80072c0:	5162      	str	r2, [r4, r5]
 80072c2:	604b      	str	r3, [r1, #4]
 80072c4:	4638      	mov	r0, r7
 80072c6:	f104 060b 	add.w	r6, r4, #11
 80072ca:	f000 fbbd 	bl	8007a48 <__malloc_unlock>
 80072ce:	f026 0607 	bic.w	r6, r6, #7
 80072d2:	1d23      	adds	r3, r4, #4
 80072d4:	1af2      	subs	r2, r6, r3
 80072d6:	d0b6      	beq.n	8007246 <_malloc_r+0x22>
 80072d8:	1b9b      	subs	r3, r3, r6
 80072da:	50a3      	str	r3, [r4, r2]
 80072dc:	e7b3      	b.n	8007246 <_malloc_r+0x22>
 80072de:	6862      	ldr	r2, [r4, #4]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	bf0c      	ite	eq
 80072e4:	6032      	streq	r2, [r6, #0]
 80072e6:	605a      	strne	r2, [r3, #4]
 80072e8:	e7ec      	b.n	80072c4 <_malloc_r+0xa0>
 80072ea:	4623      	mov	r3, r4
 80072ec:	6864      	ldr	r4, [r4, #4]
 80072ee:	e7b2      	b.n	8007256 <_malloc_r+0x32>
 80072f0:	4634      	mov	r4, r6
 80072f2:	6876      	ldr	r6, [r6, #4]
 80072f4:	e7b9      	b.n	800726a <_malloc_r+0x46>
 80072f6:	230c      	movs	r3, #12
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	4638      	mov	r0, r7
 80072fc:	f000 fba4 	bl	8007a48 <__malloc_unlock>
 8007300:	e7a1      	b.n	8007246 <_malloc_r+0x22>
 8007302:	6025      	str	r5, [r4, #0]
 8007304:	e7de      	b.n	80072c4 <_malloc_r+0xa0>
 8007306:	bf00      	nop
 8007308:	200002dc 	.word	0x200002dc

0800730c <__sfputc_r>:
 800730c:	6893      	ldr	r3, [r2, #8]
 800730e:	3b01      	subs	r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	b410      	push	{r4}
 8007314:	6093      	str	r3, [r2, #8]
 8007316:	da08      	bge.n	800732a <__sfputc_r+0x1e>
 8007318:	6994      	ldr	r4, [r2, #24]
 800731a:	42a3      	cmp	r3, r4
 800731c:	db01      	blt.n	8007322 <__sfputc_r+0x16>
 800731e:	290a      	cmp	r1, #10
 8007320:	d103      	bne.n	800732a <__sfputc_r+0x1e>
 8007322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007326:	f7ff bc31 	b.w	8006b8c <__swbuf_r>
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	1c58      	adds	r0, r3, #1
 800732e:	6010      	str	r0, [r2, #0]
 8007330:	7019      	strb	r1, [r3, #0]
 8007332:	4608      	mov	r0, r1
 8007334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007338:	4770      	bx	lr

0800733a <__sfputs_r>:
 800733a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	4614      	mov	r4, r2
 8007342:	18d5      	adds	r5, r2, r3
 8007344:	42ac      	cmp	r4, r5
 8007346:	d101      	bne.n	800734c <__sfputs_r+0x12>
 8007348:	2000      	movs	r0, #0
 800734a:	e007      	b.n	800735c <__sfputs_r+0x22>
 800734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007350:	463a      	mov	r2, r7
 8007352:	4630      	mov	r0, r6
 8007354:	f7ff ffda 	bl	800730c <__sfputc_r>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d1f3      	bne.n	8007344 <__sfputs_r+0xa>
 800735c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007360 <_vfiprintf_r>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	460d      	mov	r5, r1
 8007366:	b09d      	sub	sp, #116	; 0x74
 8007368:	4614      	mov	r4, r2
 800736a:	4698      	mov	r8, r3
 800736c:	4606      	mov	r6, r0
 800736e:	b118      	cbz	r0, 8007378 <_vfiprintf_r+0x18>
 8007370:	6983      	ldr	r3, [r0, #24]
 8007372:	b90b      	cbnz	r3, 8007378 <_vfiprintf_r+0x18>
 8007374:	f7ff fde4 	bl	8006f40 <__sinit>
 8007378:	4b89      	ldr	r3, [pc, #548]	; (80075a0 <_vfiprintf_r+0x240>)
 800737a:	429d      	cmp	r5, r3
 800737c:	d11b      	bne.n	80073b6 <_vfiprintf_r+0x56>
 800737e:	6875      	ldr	r5, [r6, #4]
 8007380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007382:	07d9      	lsls	r1, r3, #31
 8007384:	d405      	bmi.n	8007392 <_vfiprintf_r+0x32>
 8007386:	89ab      	ldrh	r3, [r5, #12]
 8007388:	059a      	lsls	r2, r3, #22
 800738a:	d402      	bmi.n	8007392 <_vfiprintf_r+0x32>
 800738c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800738e:	f7ff fe75 	bl	800707c <__retarget_lock_acquire_recursive>
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	071b      	lsls	r3, r3, #28
 8007396:	d501      	bpl.n	800739c <_vfiprintf_r+0x3c>
 8007398:	692b      	ldr	r3, [r5, #16]
 800739a:	b9eb      	cbnz	r3, 80073d8 <_vfiprintf_r+0x78>
 800739c:	4629      	mov	r1, r5
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff fc46 	bl	8006c30 <__swsetup_r>
 80073a4:	b1c0      	cbz	r0, 80073d8 <_vfiprintf_r+0x78>
 80073a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a8:	07dc      	lsls	r4, r3, #31
 80073aa:	d50e      	bpl.n	80073ca <_vfiprintf_r+0x6a>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	b01d      	add	sp, #116	; 0x74
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b6:	4b7b      	ldr	r3, [pc, #492]	; (80075a4 <_vfiprintf_r+0x244>)
 80073b8:	429d      	cmp	r5, r3
 80073ba:	d101      	bne.n	80073c0 <_vfiprintf_r+0x60>
 80073bc:	68b5      	ldr	r5, [r6, #8]
 80073be:	e7df      	b.n	8007380 <_vfiprintf_r+0x20>
 80073c0:	4b79      	ldr	r3, [pc, #484]	; (80075a8 <_vfiprintf_r+0x248>)
 80073c2:	429d      	cmp	r5, r3
 80073c4:	bf08      	it	eq
 80073c6:	68f5      	ldreq	r5, [r6, #12]
 80073c8:	e7da      	b.n	8007380 <_vfiprintf_r+0x20>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	0598      	lsls	r0, r3, #22
 80073ce:	d4ed      	bmi.n	80073ac <_vfiprintf_r+0x4c>
 80073d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073d2:	f7ff fe54 	bl	800707e <__retarget_lock_release_recursive>
 80073d6:	e7e9      	b.n	80073ac <_vfiprintf_r+0x4c>
 80073d8:	2300      	movs	r3, #0
 80073da:	9309      	str	r3, [sp, #36]	; 0x24
 80073dc:	2320      	movs	r3, #32
 80073de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e6:	2330      	movs	r3, #48	; 0x30
 80073e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075ac <_vfiprintf_r+0x24c>
 80073ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f0:	f04f 0901 	mov.w	r9, #1
 80073f4:	4623      	mov	r3, r4
 80073f6:	469a      	mov	sl, r3
 80073f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fc:	b10a      	cbz	r2, 8007402 <_vfiprintf_r+0xa2>
 80073fe:	2a25      	cmp	r2, #37	; 0x25
 8007400:	d1f9      	bne.n	80073f6 <_vfiprintf_r+0x96>
 8007402:	ebba 0b04 	subs.w	fp, sl, r4
 8007406:	d00b      	beq.n	8007420 <_vfiprintf_r+0xc0>
 8007408:	465b      	mov	r3, fp
 800740a:	4622      	mov	r2, r4
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ff93 	bl	800733a <__sfputs_r>
 8007414:	3001      	adds	r0, #1
 8007416:	f000 80aa 	beq.w	800756e <_vfiprintf_r+0x20e>
 800741a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741c:	445a      	add	r2, fp
 800741e:	9209      	str	r2, [sp, #36]	; 0x24
 8007420:	f89a 3000 	ldrb.w	r3, [sl]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80a2 	beq.w	800756e <_vfiprintf_r+0x20e>
 800742a:	2300      	movs	r3, #0
 800742c:	f04f 32ff 	mov.w	r2, #4294967295
 8007430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007434:	f10a 0a01 	add.w	sl, sl, #1
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	9307      	str	r3, [sp, #28]
 800743c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007440:	931a      	str	r3, [sp, #104]	; 0x68
 8007442:	4654      	mov	r4, sl
 8007444:	2205      	movs	r2, #5
 8007446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744a:	4858      	ldr	r0, [pc, #352]	; (80075ac <_vfiprintf_r+0x24c>)
 800744c:	f7f8 fec0 	bl	80001d0 <memchr>
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	b9d8      	cbnz	r0, 800748c <_vfiprintf_r+0x12c>
 8007454:	06d1      	lsls	r1, r2, #27
 8007456:	bf44      	itt	mi
 8007458:	2320      	movmi	r3, #32
 800745a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800745e:	0713      	lsls	r3, r2, #28
 8007460:	bf44      	itt	mi
 8007462:	232b      	movmi	r3, #43	; 0x2b
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007468:	f89a 3000 	ldrb.w	r3, [sl]
 800746c:	2b2a      	cmp	r3, #42	; 0x2a
 800746e:	d015      	beq.n	800749c <_vfiprintf_r+0x13c>
 8007470:	9a07      	ldr	r2, [sp, #28]
 8007472:	4654      	mov	r4, sl
 8007474:	2000      	movs	r0, #0
 8007476:	f04f 0c0a 	mov.w	ip, #10
 800747a:	4621      	mov	r1, r4
 800747c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007480:	3b30      	subs	r3, #48	; 0x30
 8007482:	2b09      	cmp	r3, #9
 8007484:	d94e      	bls.n	8007524 <_vfiprintf_r+0x1c4>
 8007486:	b1b0      	cbz	r0, 80074b6 <_vfiprintf_r+0x156>
 8007488:	9207      	str	r2, [sp, #28]
 800748a:	e014      	b.n	80074b6 <_vfiprintf_r+0x156>
 800748c:	eba0 0308 	sub.w	r3, r0, r8
 8007490:	fa09 f303 	lsl.w	r3, r9, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	9304      	str	r3, [sp, #16]
 8007498:	46a2      	mov	sl, r4
 800749a:	e7d2      	b.n	8007442 <_vfiprintf_r+0xe2>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	1d19      	adds	r1, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9103      	str	r1, [sp, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfbb      	ittet	lt
 80074a8:	425b      	neglt	r3, r3
 80074aa:	f042 0202 	orrlt.w	r2, r2, #2
 80074ae:	9307      	strge	r3, [sp, #28]
 80074b0:	9307      	strlt	r3, [sp, #28]
 80074b2:	bfb8      	it	lt
 80074b4:	9204      	strlt	r2, [sp, #16]
 80074b6:	7823      	ldrb	r3, [r4, #0]
 80074b8:	2b2e      	cmp	r3, #46	; 0x2e
 80074ba:	d10c      	bne.n	80074d6 <_vfiprintf_r+0x176>
 80074bc:	7863      	ldrb	r3, [r4, #1]
 80074be:	2b2a      	cmp	r3, #42	; 0x2a
 80074c0:	d135      	bne.n	800752e <_vfiprintf_r+0x1ce>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	9203      	str	r2, [sp, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfb8      	it	lt
 80074ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80074d2:	3402      	adds	r4, #2
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075bc <_vfiprintf_r+0x25c>
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	2203      	movs	r2, #3
 80074de:	4650      	mov	r0, sl
 80074e0:	f7f8 fe76 	bl	80001d0 <memchr>
 80074e4:	b140      	cbz	r0, 80074f8 <_vfiprintf_r+0x198>
 80074e6:	2340      	movs	r3, #64	; 0x40
 80074e8:	eba0 000a 	sub.w	r0, r0, sl
 80074ec:	fa03 f000 	lsl.w	r0, r3, r0
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	4303      	orrs	r3, r0
 80074f4:	3401      	adds	r4, #1
 80074f6:	9304      	str	r3, [sp, #16]
 80074f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fc:	482c      	ldr	r0, [pc, #176]	; (80075b0 <_vfiprintf_r+0x250>)
 80074fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007502:	2206      	movs	r2, #6
 8007504:	f7f8 fe64 	bl	80001d0 <memchr>
 8007508:	2800      	cmp	r0, #0
 800750a:	d03f      	beq.n	800758c <_vfiprintf_r+0x22c>
 800750c:	4b29      	ldr	r3, [pc, #164]	; (80075b4 <_vfiprintf_r+0x254>)
 800750e:	bb1b      	cbnz	r3, 8007558 <_vfiprintf_r+0x1f8>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	3307      	adds	r3, #7
 8007514:	f023 0307 	bic.w	r3, r3, #7
 8007518:	3308      	adds	r3, #8
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	443b      	add	r3, r7
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	e767      	b.n	80073f4 <_vfiprintf_r+0x94>
 8007524:	fb0c 3202 	mla	r2, ip, r2, r3
 8007528:	460c      	mov	r4, r1
 800752a:	2001      	movs	r0, #1
 800752c:	e7a5      	b.n	800747a <_vfiprintf_r+0x11a>
 800752e:	2300      	movs	r3, #0
 8007530:	3401      	adds	r4, #1
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	4619      	mov	r1, r3
 8007536:	f04f 0c0a 	mov.w	ip, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007540:	3a30      	subs	r2, #48	; 0x30
 8007542:	2a09      	cmp	r2, #9
 8007544:	d903      	bls.n	800754e <_vfiprintf_r+0x1ee>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0c5      	beq.n	80074d6 <_vfiprintf_r+0x176>
 800754a:	9105      	str	r1, [sp, #20]
 800754c:	e7c3      	b.n	80074d6 <_vfiprintf_r+0x176>
 800754e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007552:	4604      	mov	r4, r0
 8007554:	2301      	movs	r3, #1
 8007556:	e7f0      	b.n	800753a <_vfiprintf_r+0x1da>
 8007558:	ab03      	add	r3, sp, #12
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	462a      	mov	r2, r5
 800755e:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <_vfiprintf_r+0x258>)
 8007560:	a904      	add	r1, sp, #16
 8007562:	4630      	mov	r0, r6
 8007564:	f3af 8000 	nop.w
 8007568:	4607      	mov	r7, r0
 800756a:	1c78      	adds	r0, r7, #1
 800756c:	d1d6      	bne.n	800751c <_vfiprintf_r+0x1bc>
 800756e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007570:	07d9      	lsls	r1, r3, #31
 8007572:	d405      	bmi.n	8007580 <_vfiprintf_r+0x220>
 8007574:	89ab      	ldrh	r3, [r5, #12]
 8007576:	059a      	lsls	r2, r3, #22
 8007578:	d402      	bmi.n	8007580 <_vfiprintf_r+0x220>
 800757a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800757c:	f7ff fd7f 	bl	800707e <__retarget_lock_release_recursive>
 8007580:	89ab      	ldrh	r3, [r5, #12]
 8007582:	065b      	lsls	r3, r3, #25
 8007584:	f53f af12 	bmi.w	80073ac <_vfiprintf_r+0x4c>
 8007588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800758a:	e711      	b.n	80073b0 <_vfiprintf_r+0x50>
 800758c:	ab03      	add	r3, sp, #12
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	462a      	mov	r2, r5
 8007592:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <_vfiprintf_r+0x258>)
 8007594:	a904      	add	r1, sp, #16
 8007596:	4630      	mov	r0, r6
 8007598:	f000 f880 	bl	800769c <_printf_i>
 800759c:	e7e4      	b.n	8007568 <_vfiprintf_r+0x208>
 800759e:	bf00      	nop
 80075a0:	08007b0c 	.word	0x08007b0c
 80075a4:	08007b2c 	.word	0x08007b2c
 80075a8:	08007aec 	.word	0x08007aec
 80075ac:	08007b4c 	.word	0x08007b4c
 80075b0:	08007b56 	.word	0x08007b56
 80075b4:	00000000 	.word	0x00000000
 80075b8:	0800733b 	.word	0x0800733b
 80075bc:	08007b52 	.word	0x08007b52

080075c0 <_printf_common>:
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	4616      	mov	r6, r2
 80075c6:	4699      	mov	r9, r3
 80075c8:	688a      	ldr	r2, [r1, #8]
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	bfb8      	it	lt
 80075d4:	4613      	movlt	r3, r2
 80075d6:	6033      	str	r3, [r6, #0]
 80075d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075dc:	4607      	mov	r7, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	b10a      	cbz	r2, 80075e6 <_printf_common+0x26>
 80075e2:	3301      	adds	r3, #1
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	0699      	lsls	r1, r3, #26
 80075ea:	bf42      	ittt	mi
 80075ec:	6833      	ldrmi	r3, [r6, #0]
 80075ee:	3302      	addmi	r3, #2
 80075f0:	6033      	strmi	r3, [r6, #0]
 80075f2:	6825      	ldr	r5, [r4, #0]
 80075f4:	f015 0506 	ands.w	r5, r5, #6
 80075f8:	d106      	bne.n	8007608 <_printf_common+0x48>
 80075fa:	f104 0a19 	add.w	sl, r4, #25
 80075fe:	68e3      	ldr	r3, [r4, #12]
 8007600:	6832      	ldr	r2, [r6, #0]
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	42ab      	cmp	r3, r5
 8007606:	dc26      	bgt.n	8007656 <_printf_common+0x96>
 8007608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800760c:	1e13      	subs	r3, r2, #0
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	bf18      	it	ne
 8007612:	2301      	movne	r3, #1
 8007614:	0692      	lsls	r2, r2, #26
 8007616:	d42b      	bmi.n	8007670 <_printf_common+0xb0>
 8007618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800761c:	4649      	mov	r1, r9
 800761e:	4638      	mov	r0, r7
 8007620:	47c0      	blx	r8
 8007622:	3001      	adds	r0, #1
 8007624:	d01e      	beq.n	8007664 <_printf_common+0xa4>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	68e5      	ldr	r5, [r4, #12]
 800762a:	6832      	ldr	r2, [r6, #0]
 800762c:	f003 0306 	and.w	r3, r3, #6
 8007630:	2b04      	cmp	r3, #4
 8007632:	bf08      	it	eq
 8007634:	1aad      	subeq	r5, r5, r2
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	bf0c      	ite	eq
 800763c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007640:	2500      	movne	r5, #0
 8007642:	4293      	cmp	r3, r2
 8007644:	bfc4      	itt	gt
 8007646:	1a9b      	subgt	r3, r3, r2
 8007648:	18ed      	addgt	r5, r5, r3
 800764a:	2600      	movs	r6, #0
 800764c:	341a      	adds	r4, #26
 800764e:	42b5      	cmp	r5, r6
 8007650:	d11a      	bne.n	8007688 <_printf_common+0xc8>
 8007652:	2000      	movs	r0, #0
 8007654:	e008      	b.n	8007668 <_printf_common+0xa8>
 8007656:	2301      	movs	r3, #1
 8007658:	4652      	mov	r2, sl
 800765a:	4649      	mov	r1, r9
 800765c:	4638      	mov	r0, r7
 800765e:	47c0      	blx	r8
 8007660:	3001      	adds	r0, #1
 8007662:	d103      	bne.n	800766c <_printf_common+0xac>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766c:	3501      	adds	r5, #1
 800766e:	e7c6      	b.n	80075fe <_printf_common+0x3e>
 8007670:	18e1      	adds	r1, r4, r3
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	2030      	movs	r0, #48	; 0x30
 8007676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800767a:	4422      	add	r2, r4
 800767c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007684:	3302      	adds	r3, #2
 8007686:	e7c7      	b.n	8007618 <_printf_common+0x58>
 8007688:	2301      	movs	r3, #1
 800768a:	4622      	mov	r2, r4
 800768c:	4649      	mov	r1, r9
 800768e:	4638      	mov	r0, r7
 8007690:	47c0      	blx	r8
 8007692:	3001      	adds	r0, #1
 8007694:	d0e6      	beq.n	8007664 <_printf_common+0xa4>
 8007696:	3601      	adds	r6, #1
 8007698:	e7d9      	b.n	800764e <_printf_common+0x8e>
	...

0800769c <_printf_i>:
 800769c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	7e0f      	ldrb	r7, [r1, #24]
 80076a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076a4:	2f78      	cmp	r7, #120	; 0x78
 80076a6:	4691      	mov	r9, r2
 80076a8:	4680      	mov	r8, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	469a      	mov	sl, r3
 80076ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076b2:	d807      	bhi.n	80076c4 <_printf_i+0x28>
 80076b4:	2f62      	cmp	r7, #98	; 0x62
 80076b6:	d80a      	bhi.n	80076ce <_printf_i+0x32>
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	f000 80d8 	beq.w	800786e <_printf_i+0x1d2>
 80076be:	2f58      	cmp	r7, #88	; 0x58
 80076c0:	f000 80a3 	beq.w	800780a <_printf_i+0x16e>
 80076c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076cc:	e03a      	b.n	8007744 <_printf_i+0xa8>
 80076ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076d2:	2b15      	cmp	r3, #21
 80076d4:	d8f6      	bhi.n	80076c4 <_printf_i+0x28>
 80076d6:	a101      	add	r1, pc, #4	; (adr r1, 80076dc <_printf_i+0x40>)
 80076d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076dc:	08007735 	.word	0x08007735
 80076e0:	08007749 	.word	0x08007749
 80076e4:	080076c5 	.word	0x080076c5
 80076e8:	080076c5 	.word	0x080076c5
 80076ec:	080076c5 	.word	0x080076c5
 80076f0:	080076c5 	.word	0x080076c5
 80076f4:	08007749 	.word	0x08007749
 80076f8:	080076c5 	.word	0x080076c5
 80076fc:	080076c5 	.word	0x080076c5
 8007700:	080076c5 	.word	0x080076c5
 8007704:	080076c5 	.word	0x080076c5
 8007708:	08007855 	.word	0x08007855
 800770c:	08007779 	.word	0x08007779
 8007710:	08007837 	.word	0x08007837
 8007714:	080076c5 	.word	0x080076c5
 8007718:	080076c5 	.word	0x080076c5
 800771c:	08007877 	.word	0x08007877
 8007720:	080076c5 	.word	0x080076c5
 8007724:	08007779 	.word	0x08007779
 8007728:	080076c5 	.word	0x080076c5
 800772c:	080076c5 	.word	0x080076c5
 8007730:	0800783f 	.word	0x0800783f
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	1d1a      	adds	r2, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	602a      	str	r2, [r5, #0]
 800773c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007744:	2301      	movs	r3, #1
 8007746:	e0a3      	b.n	8007890 <_printf_i+0x1f4>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	6829      	ldr	r1, [r5, #0]
 800774c:	0606      	lsls	r6, r0, #24
 800774e:	f101 0304 	add.w	r3, r1, #4
 8007752:	d50a      	bpl.n	800776a <_printf_i+0xce>
 8007754:	680e      	ldr	r6, [r1, #0]
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	2e00      	cmp	r6, #0
 800775a:	da03      	bge.n	8007764 <_printf_i+0xc8>
 800775c:	232d      	movs	r3, #45	; 0x2d
 800775e:	4276      	negs	r6, r6
 8007760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007764:	485e      	ldr	r0, [pc, #376]	; (80078e0 <_printf_i+0x244>)
 8007766:	230a      	movs	r3, #10
 8007768:	e019      	b.n	800779e <_printf_i+0x102>
 800776a:	680e      	ldr	r6, [r1, #0]
 800776c:	602b      	str	r3, [r5, #0]
 800776e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007772:	bf18      	it	ne
 8007774:	b236      	sxthne	r6, r6
 8007776:	e7ef      	b.n	8007758 <_printf_i+0xbc>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	1d19      	adds	r1, r3, #4
 800777e:	6029      	str	r1, [r5, #0]
 8007780:	0601      	lsls	r1, r0, #24
 8007782:	d501      	bpl.n	8007788 <_printf_i+0xec>
 8007784:	681e      	ldr	r6, [r3, #0]
 8007786:	e002      	b.n	800778e <_printf_i+0xf2>
 8007788:	0646      	lsls	r6, r0, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0xe8>
 800778c:	881e      	ldrh	r6, [r3, #0]
 800778e:	4854      	ldr	r0, [pc, #336]	; (80078e0 <_printf_i+0x244>)
 8007790:	2f6f      	cmp	r7, #111	; 0x6f
 8007792:	bf0c      	ite	eq
 8007794:	2308      	moveq	r3, #8
 8007796:	230a      	movne	r3, #10
 8007798:	2100      	movs	r1, #0
 800779a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800779e:	6865      	ldr	r5, [r4, #4]
 80077a0:	60a5      	str	r5, [r4, #8]
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	bfa2      	ittt	ge
 80077a6:	6821      	ldrge	r1, [r4, #0]
 80077a8:	f021 0104 	bicge.w	r1, r1, #4
 80077ac:	6021      	strge	r1, [r4, #0]
 80077ae:	b90e      	cbnz	r6, 80077b4 <_printf_i+0x118>
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	d04d      	beq.n	8007850 <_printf_i+0x1b4>
 80077b4:	4615      	mov	r5, r2
 80077b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80077ba:	fb03 6711 	mls	r7, r3, r1, r6
 80077be:	5dc7      	ldrb	r7, [r0, r7]
 80077c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077c4:	4637      	mov	r7, r6
 80077c6:	42bb      	cmp	r3, r7
 80077c8:	460e      	mov	r6, r1
 80077ca:	d9f4      	bls.n	80077b6 <_printf_i+0x11a>
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d10b      	bne.n	80077e8 <_printf_i+0x14c>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	07de      	lsls	r6, r3, #31
 80077d4:	d508      	bpl.n	80077e8 <_printf_i+0x14c>
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	6861      	ldr	r1, [r4, #4]
 80077da:	4299      	cmp	r1, r3
 80077dc:	bfde      	ittt	le
 80077de:	2330      	movle	r3, #48	; 0x30
 80077e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077e8:	1b52      	subs	r2, r2, r5
 80077ea:	6122      	str	r2, [r4, #16]
 80077ec:	f8cd a000 	str.w	sl, [sp]
 80077f0:	464b      	mov	r3, r9
 80077f2:	aa03      	add	r2, sp, #12
 80077f4:	4621      	mov	r1, r4
 80077f6:	4640      	mov	r0, r8
 80077f8:	f7ff fee2 	bl	80075c0 <_printf_common>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d14c      	bne.n	800789a <_printf_i+0x1fe>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	b004      	add	sp, #16
 8007806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780a:	4835      	ldr	r0, [pc, #212]	; (80078e0 <_printf_i+0x244>)
 800780c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007810:	6829      	ldr	r1, [r5, #0]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f851 6b04 	ldr.w	r6, [r1], #4
 8007818:	6029      	str	r1, [r5, #0]
 800781a:	061d      	lsls	r5, r3, #24
 800781c:	d514      	bpl.n	8007848 <_printf_i+0x1ac>
 800781e:	07df      	lsls	r7, r3, #31
 8007820:	bf44      	itt	mi
 8007822:	f043 0320 	orrmi.w	r3, r3, #32
 8007826:	6023      	strmi	r3, [r4, #0]
 8007828:	b91e      	cbnz	r6, 8007832 <_printf_i+0x196>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f023 0320 	bic.w	r3, r3, #32
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	2310      	movs	r3, #16
 8007834:	e7b0      	b.n	8007798 <_printf_i+0xfc>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	f043 0320 	orr.w	r3, r3, #32
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	2378      	movs	r3, #120	; 0x78
 8007840:	4828      	ldr	r0, [pc, #160]	; (80078e4 <_printf_i+0x248>)
 8007842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007846:	e7e3      	b.n	8007810 <_printf_i+0x174>
 8007848:	0659      	lsls	r1, r3, #25
 800784a:	bf48      	it	mi
 800784c:	b2b6      	uxthmi	r6, r6
 800784e:	e7e6      	b.n	800781e <_printf_i+0x182>
 8007850:	4615      	mov	r5, r2
 8007852:	e7bb      	b.n	80077cc <_printf_i+0x130>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	6826      	ldr	r6, [r4, #0]
 8007858:	6961      	ldr	r1, [r4, #20]
 800785a:	1d18      	adds	r0, r3, #4
 800785c:	6028      	str	r0, [r5, #0]
 800785e:	0635      	lsls	r5, r6, #24
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	d501      	bpl.n	8007868 <_printf_i+0x1cc>
 8007864:	6019      	str	r1, [r3, #0]
 8007866:	e002      	b.n	800786e <_printf_i+0x1d2>
 8007868:	0670      	lsls	r0, r6, #25
 800786a:	d5fb      	bpl.n	8007864 <_printf_i+0x1c8>
 800786c:	8019      	strh	r1, [r3, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	4615      	mov	r5, r2
 8007874:	e7ba      	b.n	80077ec <_printf_i+0x150>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	1d1a      	adds	r2, r3, #4
 800787a:	602a      	str	r2, [r5, #0]
 800787c:	681d      	ldr	r5, [r3, #0]
 800787e:	6862      	ldr	r2, [r4, #4]
 8007880:	2100      	movs	r1, #0
 8007882:	4628      	mov	r0, r5
 8007884:	f7f8 fca4 	bl	80001d0 <memchr>
 8007888:	b108      	cbz	r0, 800788e <_printf_i+0x1f2>
 800788a:	1b40      	subs	r0, r0, r5
 800788c:	6060      	str	r0, [r4, #4]
 800788e:	6863      	ldr	r3, [r4, #4]
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	2300      	movs	r3, #0
 8007894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007898:	e7a8      	b.n	80077ec <_printf_i+0x150>
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	462a      	mov	r2, r5
 800789e:	4649      	mov	r1, r9
 80078a0:	4640      	mov	r0, r8
 80078a2:	47d0      	blx	sl
 80078a4:	3001      	adds	r0, #1
 80078a6:	d0ab      	beq.n	8007800 <_printf_i+0x164>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	079b      	lsls	r3, r3, #30
 80078ac:	d413      	bmi.n	80078d6 <_printf_i+0x23a>
 80078ae:	68e0      	ldr	r0, [r4, #12]
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	4298      	cmp	r0, r3
 80078b4:	bfb8      	it	lt
 80078b6:	4618      	movlt	r0, r3
 80078b8:	e7a4      	b.n	8007804 <_printf_i+0x168>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4632      	mov	r2, r6
 80078be:	4649      	mov	r1, r9
 80078c0:	4640      	mov	r0, r8
 80078c2:	47d0      	blx	sl
 80078c4:	3001      	adds	r0, #1
 80078c6:	d09b      	beq.n	8007800 <_printf_i+0x164>
 80078c8:	3501      	adds	r5, #1
 80078ca:	68e3      	ldr	r3, [r4, #12]
 80078cc:	9903      	ldr	r1, [sp, #12]
 80078ce:	1a5b      	subs	r3, r3, r1
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dcf2      	bgt.n	80078ba <_printf_i+0x21e>
 80078d4:	e7eb      	b.n	80078ae <_printf_i+0x212>
 80078d6:	2500      	movs	r5, #0
 80078d8:	f104 0619 	add.w	r6, r4, #25
 80078dc:	e7f5      	b.n	80078ca <_printf_i+0x22e>
 80078de:	bf00      	nop
 80078e0:	08007b5d 	.word	0x08007b5d
 80078e4:	08007b6e 	.word	0x08007b6e

080078e8 <_sbrk_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_sbrk_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7f9 f8a4 	bl	8000a40 <_sbrk>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_sbrk_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_sbrk_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	200002e4 	.word	0x200002e4

08007908 <__sread>:
 8007908:	b510      	push	{r4, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	f000 f8a0 	bl	8007a54 <_read_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	bfab      	itete	ge
 8007918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800791a:	89a3      	ldrhlt	r3, [r4, #12]
 800791c:	181b      	addge	r3, r3, r0
 800791e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007922:	bfac      	ite	ge
 8007924:	6563      	strge	r3, [r4, #84]	; 0x54
 8007926:	81a3      	strhlt	r3, [r4, #12]
 8007928:	bd10      	pop	{r4, pc}

0800792a <__swrite>:
 800792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	461f      	mov	r7, r3
 8007930:	898b      	ldrh	r3, [r1, #12]
 8007932:	05db      	lsls	r3, r3, #23
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	4616      	mov	r6, r2
 800793a:	d505      	bpl.n	8007948 <__swrite+0x1e>
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2302      	movs	r3, #2
 8007942:	2200      	movs	r2, #0
 8007944:	f000 f868 	bl	8007a18 <_lseek_r>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	f000 b817 	b.w	8007990 <_write_r>

08007962 <__sseek>:
 8007962:	b510      	push	{r4, lr}
 8007964:	460c      	mov	r4, r1
 8007966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796a:	f000 f855 	bl	8007a18 <_lseek_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	bf15      	itete	ne
 8007974:	6560      	strne	r0, [r4, #84]	; 0x54
 8007976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800797a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797e:	81a3      	strheq	r3, [r4, #12]
 8007980:	bf18      	it	ne
 8007982:	81a3      	strhne	r3, [r4, #12]
 8007984:	bd10      	pop	{r4, pc}

08007986 <__sclose>:
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 b813 	b.w	80079b4 <_close_r>
	...

08007990 <_write_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d07      	ldr	r5, [pc, #28]	; (80079b0 <_write_r+0x20>)
 8007994:	4604      	mov	r4, r0
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	2200      	movs	r2, #0
 800799c:	602a      	str	r2, [r5, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f7f8 fe6a 	bl	8000678 <_write>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_write_r+0x1e>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_write_r+0x1e>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200002e4 	.word	0x200002e4

080079b4 <_close_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_close_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7f9 f809 	bl	80009d6 <_close>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_close_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_close_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	200002e4 	.word	0x200002e4

080079d4 <_fstat_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	; (80079f4 <_fstat_r+0x20>)
 80079d8:	2300      	movs	r3, #0
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	f7f9 f804 	bl	80009ee <_fstat>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d102      	bne.n	80079f0 <_fstat_r+0x1c>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	b103      	cbz	r3, 80079f0 <_fstat_r+0x1c>
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	200002e4 	.word	0x200002e4

080079f8 <_isatty_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d06      	ldr	r5, [pc, #24]	; (8007a14 <_isatty_r+0x1c>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7f9 f803 	bl	8000a0e <_isatty>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_isatty_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_isatty_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	200002e4 	.word	0x200002e4

08007a18 <_lseek_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d07      	ldr	r5, [pc, #28]	; (8007a38 <_lseek_r+0x20>)
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4611      	mov	r1, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7f8 fffc 	bl	8000a24 <_lseek>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_lseek_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_lseek_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200002e4 	.word	0x200002e4

08007a3c <__malloc_lock>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__malloc_lock+0x8>)
 8007a3e:	f7ff bb1d 	b.w	800707c <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	200002d8 	.word	0x200002d8

08007a48 <__malloc_unlock>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__malloc_unlock+0x8>)
 8007a4a:	f7ff bb18 	b.w	800707e <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	200002d8 	.word	0x200002d8

08007a54 <_read_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	; (8007a74 <_read_r+0x20>)
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	602a      	str	r2, [r5, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f7f8 ff9a 	bl	800099c <_read>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_read_r+0x1e>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_read_r+0x1e>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	200002e4 	.word	0x200002e4

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
