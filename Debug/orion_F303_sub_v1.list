
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800cd70  0800cd70  0001cd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2cc  0800d2cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2cc  0800d2cc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2cc  0800d2cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2cc  0800d2cc  0001d2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2d0  0800d2d0  0001d2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000032c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159ac  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000304d  00000000  00000000  00035bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e8a  00000000  00000000  0003ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017daa  00000000  00000000  0005bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40e6  00000000  00000000  0007396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137a52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d78  00000000  00000000  00137aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd54 	.word	0x0800cd54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cd54 	.word	0x0800cd54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 f9bd 	bl	80020f0 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fded 	bl	800195a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f002 f812 	bl	8002db4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f000 fde0 	bl	800195a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f001 fd10 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f000 fdca 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001fc 	.word	0x200001fc

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 f954 	bl	80020f0 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f000 fd84 	bl	800195a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f001 fcb4 	bl	80027dc <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 fd6e 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000024c 	.word	0x2000024c
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 fa97 	bl	800443c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f003 fa64 	bl	800443c <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 f8a5 	bl	800312c <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fcb7 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200002a0 	.word	0x200002a0
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f003 f9e7 	bl	800443c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f002 ff81 	bl	8003f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f002 ff9a 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x104) << 5;
 80010a2:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80010a6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x105) << 5;
 80010a8:	f242 03a0 	movw	r3, #8352	; 0x20a0
 80010ac:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;
 80010b4:	f242 0320 	movw	r3, #8224	; 0x2020
 80010b8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <CAN_Filter_Init+0x64>)
 80010cc:	f002 f929 	bl	8003322 <HAL_CAN_ConfigFilter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <CAN_Filter_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fc40 	bl	800195a <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010da:	2102      	movs	r1, #2
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <CAN_Filter_Init+0x64>)
 80010de:	f002 fc1b 	bl	8003918 <HAL_CAN_ActivateNotification>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <CAN_Filter_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 fc37 	bl	800195a <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002a0 	.word	0x200002a0

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_DMA_Init+0x38>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <MX_DMA_Init+0x38>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_DMA_Init+0x38>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	200e      	movs	r0, #14
 800111c:	f002 ff2d 	bl	8003f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001120:	200e      	movs	r0, #14
 8001122:	f002 ff46 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <MX_GPIO_Init+0x154>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <MX_GPIO_Init+0x154>)
 8001150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <MX_GPIO_Init+0x154>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_GPIO_Init+0x154>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a48      	ldr	r2, [pc, #288]	; (8001288 <MX_GPIO_Init+0x154>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_GPIO_Init+0x154>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_GPIO_Init+0x154>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <MX_GPIO_Init+0x154>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_GPIO_Init+0x154>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_GPIO_Init+0x154>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a3c      	ldr	r2, [pc, #240]	; (8001288 <MX_GPIO_Init+0x154>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <MX_GPIO_Init+0x154>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <MX_GPIO_Init+0x158>)
 80011b2:	f003 fad5 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21c1      	movs	r1, #193	; 0xc1
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f003 facf 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f246 0140 	movw	r1, #24640	; 0x6040
 80011c8:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_GPIO_Init+0x15c>)
 80011ca:	f003 fac9 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 80011ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4829      	ldr	r0, [pc, #164]	; (800128c <MX_GPIO_Init+0x158>)
 80011e8:	f003 f928 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 80011ec:	23c1      	movs	r3, #193	; 0xc1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f003 f919 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 800120a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_GPIO_Init+0x15c>)
 8001220:	f003 f90c 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 8001224:	f246 0340 	movw	r3, #24640	; 0x6040
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_GPIO_Init+0x15c>)
 800123e:	f003 f8fd 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f003 f8ef 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800125e:	2338      	movs	r3, #56	; 0x38
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126e:	2305      	movs	r3, #5
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_GPIO_Init+0x15c>)
 800127a:	f003 f8df 	bl	800443c <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800
 8001290:	48000400 	.word	0x48000400

08001294 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <_write+0x24>)
 80012aa:	f005 fda9 	bl	8006e00 <HAL_UART_Transmit_DMA>
	return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003ac 	.word	0x200003ac

080012bc <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0};
volatile bool uart_rx_flag = false,uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0,uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_UART_RxCpltCallback+0x5c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_UART_RxCpltCallback+0x2e>
		uart_rx_flag = true;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_UART_RxCpltCallback+0x60>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
		uart_rx_cnt++;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_RxCpltCallback+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_UART_RxCpltCallback+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	4910      	ldr	r1, [pc, #64]	; (8001324 <HAL_UART_RxCpltCallback+0x68>)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_UART_RxCpltCallback+0x6c>)
 80012e4:	f005 fd3e 	bl	8006d64 <HAL_UART_Receive_IT>
	}else if(huart->Instance == USART3){
		uart3_rx_flag = true;
		uart3_rx_cnt++;
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
	}
}
 80012e8:	e011      	b.n	800130e <HAL_UART_RxCpltCallback+0x52>
	}else if(huart->Instance == USART3){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_UART_RxCpltCallback+0x70>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10c      	bne.n	800130e <HAL_UART_RxCpltCallback+0x52>
		uart3_rx_flag = true;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_RxCpltCallback+0x74>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
		uart3_rx_cnt++;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_UART_RxCpltCallback+0x78>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_UART_RxCpltCallback+0x78>)
 8001302:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	490c      	ldr	r1, [pc, #48]	; (8001338 <HAL_UART_RxCpltCallback+0x7c>)
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_UART_RxCpltCallback+0x80>)
 800130a:	f005 fd2b 	bl	8006d64 <HAL_UART_Receive_IT>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40013800 	.word	0x40013800
 800131c:	200002de 	.word	0x200002de
 8001320:	200002e0 	.word	0x200002e0
 8001324:	200002c8 	.word	0x200002c8
 8001328:	200003ac 	.word	0x200003ac
 800132c:	40004800 	.word	0x40004800
 8001330:	200002df 	.word	0x200002df
 8001334:	200002e4 	.word	0x200002e4
 8001338:	200002d4 	.word	0x200002d4
 800133c:	20000430 	.word	0x20000430

08001340 <HAL_CAN_RxFifo0MsgPendingCallback>:
int servo_timeout_cnt = 0,dribbler_timeout_cnt = 0;
uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800134c:	2100      	movs	r1, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f002 f9d0 	bl	80036f4 <HAL_CAN_GetRxMessage>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 800135a:	f000 fafe 	bl	800195a <Error_Handler>
	}

	can_rx_cnt++;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001366:	6013      	str	r3, [r2, #0]
	switch (can_rx_header.StdId)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001370:	d01a      	beq.n	80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 8001372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001376:	d819      	bhi.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800137c:	d004      	beq.n	8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800137e:	f240 1205 	movw	r2, #261	; 0x105
 8001382:	4293      	cmp	r3, r2
 8001384:	d008      	beq.n	8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>


	case 0x300:
		break;
	default:
		break;
 8001386:	e011      	b.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		dribbler_timeout_cnt = 0;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    dribbler_speed = can_rx_buf.speed;
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001394:	6013      	str	r3, [r2, #0]
    break;
 8001396:	e00a      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		servo_timeout_cnt = 0;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		serv_angle = can_rx_buf.speed;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80013a4:	6013      	str	r3, [r2, #0]
		break;
 80013a6:	e002      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		break;
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		break;
 80013ac:	bf00      	nop
	}
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002fc 	.word	0x200002fc
 80013bc:	20000304 	.word	0x20000304
 80013c0:	200002f8 	.word	0x200002f8
 80013c4:	200002f4 	.word	0x200002f4
 80013c8:	200002ec 	.word	0x200002ec
 80013cc:	200002f0 	.word	0x200002f0
 80013d0:	200002e8 	.word	0x200002e8

080013d4 <ball_sensor>:

int32_t ball_detect[2] = {0,0};

void ball_sensor(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  bool ball_detected[2];

  switch (ball_detect_process)
 80013da:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <ball_sensor+0x1e4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	f200 80e2 	bhi.w	80015a8 <ball_sensor+0x1d4>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <ball_sensor+0x18>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001429 	.word	0x08001429
 80013f4:	08001443 	.word	0x08001443
 80013f8:	08001467 	.word	0x08001467
 80013fc:	08001481 	.word	0x08001481
 8001400:	080014a5 	.word	0x080014a5
  {
  case 0:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	486c      	ldr	r0, [pc, #432]	; (80015bc <ball_sensor+0x1e8>)
 800140c:	f003 f9a8 	bl	8004760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4869      	ldr	r0, [pc, #420]	; (80015bc <ball_sensor+0x1e8>)
 8001418:	f003 f9a2 	bl	8004760 <HAL_GPIO_WritePin>
    ball_detect_process++;
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <ball_sensor+0x1e4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <ball_sensor+0x1e4>)
 8001424:	6013      	str	r3, [r2, #0]
    break;
 8001426:	e0c3      	b.n	80015b0 <ball_sensor+0x1dc>
  case 1:
    adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 8001428:	4865      	ldr	r0, [pc, #404]	; (80015c0 <ball_sensor+0x1ec>)
 800142a:	f001 f957 	bl	80026dc <HAL_ADC_GetValue>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <ball_sensor+0x1f0>)
 8001434:	601a      	str	r2, [r3, #0]
    ball_detect_process++;
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <ball_sensor+0x1e4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a5e      	ldr	r2, [pc, #376]	; (80015b8 <ball_sensor+0x1e4>)
 800143e:	6013      	str	r3, [r2, #0]
    break;
 8001440:	e0b6      	b.n	80015b0 <ball_sensor+0x1dc>
  case 2:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	485c      	ldr	r0, [pc, #368]	; (80015bc <ball_sensor+0x1e8>)
 800144a:	f003 f989 	bl	8004760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4859      	ldr	r0, [pc, #356]	; (80015bc <ball_sensor+0x1e8>)
 8001456:	f003 f983 	bl	8004760 <HAL_GPIO_WritePin>
    ball_detect_process++;
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <ball_sensor+0x1e4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a55      	ldr	r2, [pc, #340]	; (80015b8 <ball_sensor+0x1e4>)
 8001462:	6013      	str	r3, [r2, #0]
    break;
 8001464:	e0a4      	b.n	80015b0 <ball_sensor+0x1dc>
  case 3:
    adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 8001466:	4856      	ldr	r0, [pc, #344]	; (80015c0 <ball_sensor+0x1ec>)
 8001468:	f001 f938 	bl	80026dc <HAL_ADC_GetValue>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <ball_sensor+0x1f0>)
 8001472:	605a      	str	r2, [r3, #4]
    ball_detect_process++;
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <ball_sensor+0x1e4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <ball_sensor+0x1e4>)
 800147c:	6013      	str	r3, [r2, #0]
    break;
 800147e:	e097      	b.n	80015b0 <ball_sensor+0x1dc>
  case 4:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001486:	484d      	ldr	r0, [pc, #308]	; (80015bc <ball_sensor+0x1e8>)
 8001488:	f003 f96a 	bl	8004760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001492:	484a      	ldr	r0, [pc, #296]	; (80015bc <ball_sensor+0x1e8>)
 8001494:	f003 f964 	bl	8004760 <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <ball_sensor+0x1e4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <ball_sensor+0x1e4>)
 80014a0:	6013      	str	r3, [r2, #0]
    break;
 80014a2:	e085      	b.n	80015b0 <ball_sensor+0x1dc>
  case 5:
    adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 80014a4:	4846      	ldr	r0, [pc, #280]	; (80015c0 <ball_sensor+0x1ec>)
 80014a6:	f001 f919 	bl	80026dc <HAL_ADC_GetValue>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <ball_sensor+0x1f0>)
 80014b0:	609a      	str	r2, [r3, #8]
    ball_detect_process++;
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <ball_sensor+0x1e4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a3f      	ldr	r2, [pc, #252]	; (80015b8 <ball_sensor+0x1e4>)
 80014ba:	6013      	str	r3, [r2, #0]
    ball_detect[0] = adc_raw[0] - adc_raw[1];
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <ball_sensor+0x1f0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <ball_sensor+0x1f0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a40      	ldr	r2, [pc, #256]	; (80015c8 <ball_sensor+0x1f4>)
 80014c8:	6013      	str	r3, [r2, #0]
    ball_detect[1] = adc_raw[0] - adc_raw[2];
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <ball_sensor+0x1f0>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <ball_sensor+0x1f0>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <ball_sensor+0x1f4>)
 80014d6:	6053      	str	r3, [r2, #4]


	if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET){
 80014d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014dc:	4837      	ldr	r0, [pc, #220]	; (80015bc <ball_sensor+0x1e8>)
 80014de:	f003 f927 	bl	8004730 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <ball_sensor+0x120>
		ball_detect[0] = 0;
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <ball_sensor+0x1f4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
		ball_detect[1] = 0;
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <ball_sensor+0x1f4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	}

    // 
    if(ball_detect[1] < BALL_DETECTOR_THRESH){
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <ball_sensor+0x1f4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014fc:	da08      	bge.n	8001510 <ball_sensor+0x13c>
      ball_detected[0] = true;
 80014fe:	2301      	movs	r3, #1
 8001500:	713b      	strb	r3, [r7, #4]
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f003 f929 	bl	8004760 <HAL_GPIO_WritePin>
 800150e:	e007      	b.n	8001520 <ball_sensor+0x14c>
    }else{
        ball_detected[0] = false;
 8001510:	2300      	movs	r3, #0
 8001512:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f003 f920 	bl	8004760 <HAL_GPIO_WritePin>
    }
    if(ball_detect[0] < BALL_DETECTOR_THRESH){
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <ball_sensor+0x1f4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001528:	da08      	bge.n	800153c <ball_sensor+0x168>
      ball_detected[1] = true;
 800152a:	2301      	movs	r3, #1
 800152c:	717b      	strb	r3, [r7, #5]
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f003 f913 	bl	8004760 <HAL_GPIO_WritePin>
 800153a:	e007      	b.n	800154c <ball_sensor+0x178>
    }else{
      ball_detected[1] = false;
 800153c:	2300      	movs	r3, #0
 800153e:	717b      	strb	r3, [r7, #5]
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f003 f90a 	bl	8004760 <HAL_GPIO_WritePin>
    }

    if(ball_detected[0]){
 800154c:	793b      	ldrb	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <ball_sensor+0x18c>
        can_data[0] = 1;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <ball_sensor+0x1f8>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
        can_data[1] = 0;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <ball_sensor+0x1f8>)
 800155a:	2200      	movs	r2, #0
 800155c:	705a      	strb	r2, [r3, #1]
 800155e:	e00f      	b.n	8001580 <ball_sensor+0x1ac>
    }else if(ball_detected[1]){
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <ball_sensor+0x1a0>
        can_data[0] = 1;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <ball_sensor+0x1f8>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
        can_data[1] = 5;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <ball_sensor+0x1f8>)
 800156e:	2205      	movs	r2, #5
 8001570:	705a      	strb	r2, [r3, #1]
 8001572:	e005      	b.n	8001580 <ball_sensor+0x1ac>
    }else{
        can_data[0] = 0;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <ball_sensor+0x1f8>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
        can_data[1] = 0;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <ball_sensor+0x1f8>)
 800157c:	2200      	movs	r2, #0
 800157e:	705a      	strb	r2, [r3, #1]
    }

    can_header.StdId = 0x240;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <ball_sensor+0x1fc>)
 8001582:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001586:	601a      	str	r2, [r3, #0]
    can_header.RTR = CAN_RTR_DATA;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <ball_sensor+0x1fc>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
    can_header.DLC = 2;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <ball_sensor+0x1fc>)
 8001590:	2202      	movs	r2, #2
 8001592:	611a      	str	r2, [r3, #16]
    can_header.TransmitGlobalTime = DISABLE;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <ball_sensor+0x1fc>)
 8001596:	2200      	movs	r2, #0
 8001598:	751a      	strb	r2, [r3, #20]
    HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <ball_sensor+0x200>)
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <ball_sensor+0x1f8>)
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <ball_sensor+0x1fc>)
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <ball_sensor+0x204>)
 80015a2:	f001 ffcc 	bl	800353e <HAL_CAN_AddTxMessage>
    break;
 80015a6:	e003      	b.n	80015b0 <ball_sensor+0x1dc>
  default:
	  ball_detect_process = 0;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <ball_sensor+0x1e4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  break;
 80015ae:	bf00      	nop
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000328 	.word	0x20000328
 80015bc:	48000400 	.word	0x48000400
 80015c0:	2000024c 	.word	0x2000024c
 80015c4:	2000032c 	.word	0x2000032c
 80015c8:	20000320 	.word	0x20000320
 80015cc:	20000338 	.word	0x20000338
 80015d0:	20000340 	.word	0x20000340
 80015d4:	20000358 	.word	0x20000358
 80015d8:	200002a0 	.word	0x200002a0

080015dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015e0:	b08d      	sub	sp, #52	; 0x34
 80015e2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fcfa 	bl	8001fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 f958 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ec:	f7ff fda2 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f0:	f7ff fd82 	bl	80010f8 <MX_DMA_Init>
  MX_CAN_Init();
 80015f4:	f7ff fcca 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 80015f8:	f000 fb9a 	bl	8001d30 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015fc:	f000 fbc8 	bl	8001d90 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001600:	f000 fad8 	bl	8001bb4 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001604:	f7ff fbe6 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001608:	f7ff fb74 	bl	8000cf4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0426!!\n");
 800160c:	488d      	ldr	r0, [pc, #564]	; (8001844 <main+0x268>)
 800160e:	f007 fda5 	bl	800915c <puts>
	HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	498c      	ldr	r1, [pc, #560]	; (8001848 <main+0x26c>)
 8001616:	488d      	ldr	r0, [pc, #564]	; (800184c <main+0x270>)
 8001618:	f005 fba4 	bl	8006d64 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	498c      	ldr	r1, [pc, #560]	; (8001850 <main+0x274>)
 8001620:	488c      	ldr	r0, [pc, #560]	; (8001854 <main+0x278>)
 8001622:	f005 fb9f 	bl	8006d64 <HAL_UART_Receive_IT>
	CAN_Filter_Init();
 8001626:	f7ff fd33 	bl	8001090 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 800162a:	488b      	ldr	r0, [pc, #556]	; (8001858 <main+0x27c>)
 800162c:	f001 ff43 	bl	80034b6 <HAL_CAN_Start>

	HAL_TIM_PWM_Init(&htim3);
 8001630:	488a      	ldr	r0, [pc, #552]	; (800185c <main+0x280>)
 8001632:	f004 fcd1 	bl	8005fd8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001636:	2108      	movs	r1, #8
 8001638:	4888      	ldr	r0, [pc, #544]	; (800185c <main+0x280>)
 800163a:	f004 fd25 	bl	8006088 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800163e:	210c      	movs	r1, #12
 8001640:	4886      	ldr	r0, [pc, #536]	; (800185c <main+0x280>)
 8001642:	f004 fd21 	bl	8006088 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR3 = 0;
 8001646:	4b85      	ldr	r3, [pc, #532]	; (800185c <main+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 0;
 800164e:	4b83      	ldr	r3, [pc, #524]	; (800185c <main+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
	servo_timeout_cnt = 0;
 8001656:	4b82      	ldr	r3, [pc, #520]	; (8001860 <main+0x284>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
	dribbler_timeout_cnt = 0;
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <main+0x288>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

  uint32_t print_interval = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	487f      	ldr	r0, [pc, #508]	; (8001868 <main+0x28c>)
 800166a:	f001 f844 	bl	80026f6 <HAL_ADCEx_Calibration_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <main+0x9c>
   {
     /* Calibration Error */
  Error_Handler();
 8001674:	f000 f971 	bl	800195a <Error_Handler>
    }
    if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	487c      	ldr	r0, [pc, #496]	; (800186c <main+0x290>)
 800167c:	f001 f83b 	bl	80026f6 <HAL_ADCEx_Calibration_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <main+0xae>
    {
      /* Calibration Error */
      Error_Handler();
 8001686:	f000 f968 	bl	800195a <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 800168a:	4877      	ldr	r0, [pc, #476]	; (8001868 <main+0x28c>)
 800168c:	f000 ff10 	bl	80024b0 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 8001690:	4876      	ldr	r0, [pc, #472]	; (800186c <main+0x290>)
 8001692:	f000 ff0d 	bl	80024b0 <HAL_ADC_Start>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */

      HAL_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fd06 	bl	80020a8 <HAL_Delay>
      ball_sensor();
 800169c:	f7ff fe9a 	bl	80013d4 <ball_sensor>

      print_interval++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      if (print_interval >= 100)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b63      	cmp	r3, #99	; 0x63
 80016aa:	d9f4      	bls.n	8001696 <main+0xba>
      {
			print_interval = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
      printf("can rx %3ld uart rx %4d %4d dribbler %6.3f servo %6.3f timeout %4ld %4ld ball %+5d %+5d\n", can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1]);
 80016b0:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <main+0x294>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <main+0x298>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	603a      	str	r2, [r7, #0]
 80016bc:	4b6e      	ldr	r3, [pc, #440]	; (8001878 <main+0x29c>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	4605      	mov	r5, r0
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <main+0x2a0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	4680      	mov	r8, r0
 80016ce:	4689      	mov	r9, r1
 80016d0:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <main+0x2a4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4961      	ldr	r1, [pc, #388]	; (8001864 <main+0x288>)
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	485f      	ldr	r0, [pc, #380]	; (8001860 <main+0x284>)
 80016e4:	6800      	ldr	r0, [r0, #0]
 80016e6:	4e67      	ldr	r6, [pc, #412]	; (8001884 <main+0x2a8>)
 80016e8:	6836      	ldr	r6, [r6, #0]
 80016ea:	4c66      	ldr	r4, [pc, #408]	; (8001884 <main+0x2a8>)
 80016ec:	6864      	ldr	r4, [r4, #4]
 80016ee:	9407      	str	r4, [sp, #28]
 80016f0:	9606      	str	r6, [sp, #24]
 80016f2:	9005      	str	r0, [sp, #20]
 80016f4:	9104      	str	r1, [sp, #16]
 80016f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016fa:	e9cd 8900 	strd	r8, r9, [sp]
 80016fe:	462b      	mov	r3, r5
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4860      	ldr	r0, [pc, #384]	; (8001888 <main+0x2ac>)
 8001706:	f007 fca3 	bl	8009050 <iprintf>

      // TEL (LED0,PA3)
			if(uart3_rx_cnt > 0){
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <main+0x29c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <main+0x144>
			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001718:	485c      	ldr	r0, [pc, #368]	; (800188c <main+0x2b0>)
 800171a:	f003 f821 	bl	8004760 <HAL_GPIO_WritePin>
 800171e:	e005      	b.n	800172c <main+0x150>
			}else{

			      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	4859      	ldr	r0, [pc, #356]	; (800188c <main+0x2b0>)
 8001728:	f003 f81a 	bl	8004760 <HAL_GPIO_WritePin>
			}

			// RX (can rx,LED2,PA5)
			if(can_rx_cnt > 0){
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <main+0x294>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <main+0x166>

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	4854      	ldr	r0, [pc, #336]	; (800188c <main+0x2b0>)
 800173c:	f003 f810 	bl	8004760 <HAL_GPIO_WritePin>
 8001740:	e005      	b.n	800174e <main+0x172>
			}else{

			      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001748:	4850      	ldr	r0, [pc, #320]	; (800188c <main+0x2b0>)
 800174a:	f003 f809 	bl	8004760 <HAL_GPIO_WritePin>
			}

			if(dribbler_speed != 0){
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <main+0x2a0>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d006      	beq.n	800176c <main+0x190>
			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001764:	4849      	ldr	r0, [pc, #292]	; (800188c <main+0x2b0>)
 8001766:	f002 fffb 	bl	8004760 <HAL_GPIO_WritePin>
 800176a:	e005      	b.n	8001778 <main+0x19c>
			}else{

			      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001772:	4846      	ldr	r0, [pc, #280]	; (800188c <main+0x2b0>)
 8001774:	f002 fff4 	bl	8004760 <HAL_GPIO_WritePin>
			}


			can_rx_cnt = 0;
 8001778:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <main+0x294>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
			uart_rx_cnt = 0;
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <main+0x298>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 8001784:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <main+0x29c>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_SET){
 800178a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178e:	4840      	ldr	r0, [pc, #256]	; (8001890 <main+0x2b4>)
 8001790:	f002 ffce 	bl	8004730 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d112      	bne.n	80017c0 <main+0x1e4>
				htim3.Instance->CCR3 = 1500 + 600*dribbler_speed;	// esc
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <main+0x2a0>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001894 <main+0x2b8>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001898 <main+0x2bc>
 80017ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <main+0x280>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80017be:	e004      	b.n	80017ca <main+0x1ee>
			}else{
				htim3.Instance->CCR3 = 1500 + USER_SW_ESC_PULSE_WITDH;	// esc
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <main+0x280>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80017c8:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 80017ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f002 ffad 	bl	8004730 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d112      	bne.n	8001802 <main+0x226>
				htim3.Instance->CCR4 = 1500 - 600*serv_angle;	// servo
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <main+0x2a4>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001894 <main+0x2b8>
 80017e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001898 <main+0x2bc>
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <main+0x280>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fa:	ee17 2a90 	vmov	r2, s15
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001800:	e004      	b.n	800180c <main+0x230>
			}else{
				htim3.Instance->CCR4 = 1500 - USER_SW_SERVO_PULSE_WITDH;	// servo
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <main+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
			}


			dribbler_timeout_cnt++;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <main+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <main+0x288>)
 8001814:	6013      	str	r3, [r2, #0]
			servo_timeout_cnt++;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <main+0x284>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a10      	ldr	r2, [pc, #64]	; (8001860 <main+0x284>)
 800181e:	6013      	str	r3, [r2, #0]
			if(dribbler_timeout_cnt > 50){
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <main+0x288>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b32      	cmp	r3, #50	; 0x32
 8001826:	dd03      	ble.n	8001830 <main+0x254>
				dribbler_speed = 0;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <main+0x2a0>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
			}
			if(servo_timeout_cnt > 50){
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <main+0x284>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b32      	cmp	r3, #50	; 0x32
 8001836:	f77f af2e 	ble.w	8001696 <main+0xba>
				serv_angle = 0;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <main+0x2a4>)
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
      HAL_Delay(1);
 8001842:	e728      	b.n	8001696 <main+0xba>
 8001844:	0800cd70 	.word	0x0800cd70
 8001848:	200002d4 	.word	0x200002d4
 800184c:	20000430 	.word	0x20000430
 8001850:	200002c8 	.word	0x200002c8
 8001854:	200003ac 	.word	0x200003ac
 8001858:	200002a0 	.word	0x200002a0
 800185c:	20000360 	.word	0x20000360
 8001860:	200002f0 	.word	0x200002f0
 8001864:	200002f4 	.word	0x200002f4
 8001868:	200001fc 	.word	0x200001fc
 800186c:	2000024c 	.word	0x2000024c
 8001870:	200002f8 	.word	0x200002f8
 8001874:	200002e0 	.word	0x200002e0
 8001878:	200002e4 	.word	0x200002e4
 800187c:	200002ec 	.word	0x200002ec
 8001880:	200002e8 	.word	0x200002e8
 8001884:	20000320 	.word	0x20000320
 8001888:	0800cd88 	.word	0x0800cd88
 800188c:	48000800 	.word	0x48000800
 8001890:	48000400 	.word	0x48000400
 8001894:	44160000 	.word	0x44160000
 8001898:	44bb8000 	.word	0x44bb8000

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09e      	sub	sp, #120	; 0x78
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f006 fd4e 	bl	800834c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	223c      	movs	r2, #60	; 0x3c
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 fd40 	bl	800834c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018da:	2301      	movs	r3, #1
 80018dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 ff4c 	bl	8004790 <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018fe:	f000 f82c 	bl	800195a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	230f      	movs	r3, #15
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001906:	2302      	movs	r3, #2
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f003 ff74 	bl	800580c <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800192a:	f000 f816 	bl	800195a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800192e:	2385      	movs	r3, #133	; 0x85
 8001930:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f998 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800194e:	f000 f804 	bl	800195a <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3778      	adds	r7, #120	; 0x78
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195e:	b672      	cpsid	i
}
 8001960:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001962:	e7fe      	b.n	8001962 <Error_Handler+0x8>

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_MspInit+0x44>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_MspInit+0x44>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_MspInit+0x44>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x44>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 fb36 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <DMA1_Channel4_IRQHandler+0x10>)
 8001a06:	f002 fc0b 	bl	8004220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200004b4 	.word	0x200004b4

08001a14 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001a1a:	f001 ffa3 	bl	8003964 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002a0 	.word	0x200002a0

08001a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <USART1_IRQHandler+0x10>)
 8001a2e:	f005 fa77 	bl	8006f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200003ac 	.word	0x200003ac

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a56:	f006 fc4f 	bl	80082f8 <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7e:	e7fe      	b.n	8001a7e <_exit+0x12>

08001a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e00a      	b.n	8001aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a92:	f3af 8000 	nop.w
 8001a96:	4601      	mov	r1, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf0      	blt.n	8001a92 <_read+0x12>
	}

return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_isatty>:

int _isatty(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	return 1;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f006 fbd0 	bl	80082f8 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20008000 	.word	0x20008000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	2000035c 	.word	0x2000035c
 8001b8c:	20000510 	.word	0x20000510

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <MX_TIM3_Init+0xc8>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001be0:	2248      	movs	r2, #72	; 0x48
 8001be2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001bec:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bfe:	481e      	ldr	r0, [pc, #120]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001c00:	f004 f9ea 	bl	8005fd8 <HAL_TIM_PWM_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c0a:	f7ff fea6 	bl	800195a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4816      	ldr	r0, [pc, #88]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001c1e:	f004 ffd3 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c28:	f7ff fe97 	bl	800195a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	2360      	movs	r3, #96	; 0x60
 8001c2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8001c30:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001c34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2208      	movs	r2, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001c46:	f004 fb1f 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001c50:	f7ff fe83 	bl	800195a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	220c      	movs	r2, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001c5c:	f004 fb14 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001c66:	f7ff fe78 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <MX_TIM3_Init+0xc4>)
 8001c6c:	f000 f828 	bl	8001cc0 <HAL_TIM_MspPostInit>

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000360 	.word	0x20000360
 8001c7c:	40000400 	.word	0x40000400

08001c80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_TIM_PWM_MspInit+0x38>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10b      	bne.n	8001caa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_TIM_MspPostInit+0x64>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d11b      	bne.n	8001d1a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_MspPostInit+0x68>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_TIM_MspPostInit+0x68>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_MspPostInit+0x68>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_TIM_MspPostInit+0x6c>)
 8001d16:	f002 fb91 	bl	800443c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000400 	.word	0x48000400

08001d30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d36:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <MX_USART1_UART_Init+0x58>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d3c:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <MX_USART1_UART_Init+0x5c>)
 8001d3e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d54:	220c      	movs	r2, #12
 8001d56:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_USART1_UART_Init+0x54>)
 8001d72:	f004 ffa9 	bl	8006cc8 <HAL_UART_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d7c:	f7ff fded 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200003ac 	.word	0x200003ac
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	001e8480 	.word	0x001e8480

08001d90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <MX_USART3_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dd4:	f004 ff78 	bl	8006cc8 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f7ff fdbc 	bl	800195a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000430 	.word	0x20000430
 8001dec:	40004800 	.word	0x40004800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_UART_MspInit+0x180>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d16a      	bne.n	8001ee8 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	6153      	str	r3, [r2, #20]
 8001e36:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e54:	2307      	movs	r3, #7
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f002 faeb 	bl	800443c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e86:	f002 fad9 	bl	800443c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <HAL_UART_MspInit+0x18c>)
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001e92:	2210      	movs	r2, #16
 8001e94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eba:	482f      	ldr	r0, [pc, #188]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001ebc:	f002 f893 	bl	8003fe6 <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001ec6:	f7ff fd48 	bl	800195a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001ece:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_UART_MspInit+0x188>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2025      	movs	r0, #37	; 0x25
 8001edc:	f002 f84d 	bl	8003f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ee0:	2025      	movs	r0, #37	; 0x25
 8001ee2:	f002 f866 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ee6:	e03e      	b.n	8001f66 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <HAL_UART_MspInit+0x190>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d139      	bne.n	8001f66 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6153      	str	r3, [r2, #20]
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0x184>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f34:	2307      	movs	r3, #7
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4811      	ldr	r0, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x194>)
 8001f40:	f002 fa7c 	bl	800443c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f56:	2307      	movs	r3, #7
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <HAL_UART_MspInit+0x194>)
 8001f62:	f002 fa6b 	bl	800443c <HAL_GPIO_Init>
}
 8001f66:	bf00      	nop
 8001f68:	3730      	adds	r7, #48	; 0x30
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	200004b4 	.word	0x200004b4
 8001f7c:	40020044 	.word	0x40020044
 8001f80:	40004800 	.word	0x40004800
 8001f84:	48000400 	.word	0x48000400

08001f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fb2:	f7ff fded 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f006 f9a5 	bl	8008304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fba:	f7ff fb0f 	bl	80015dc <main>

08001fbe <LoopForever>:

LoopForever:
    b LoopForever
 8001fbe:	e7fe      	b.n	8001fbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fcc:	0800d2d4 	.word	0x0800d2d4
  ldr r2, =_sbss
 8001fd0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fd4:	2000050c 	.word	0x2000050c

08001fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC1_2_IRQHandler>
	...

08001fdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_Init+0x28>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_Init+0x28>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f001 ffb9 	bl	8003f64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	200f      	movs	r0, #15
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fcb4 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000

08002008 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f001 ffd1 	bl	8003fce <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f001 ff99 	bl	8003f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000000 	.word	0x20000000
 8002060:	20000008 	.word	0x20000008
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	200004f8 	.word	0x200004f8

08002090 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;  
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200004f8 	.word	0x200004f8

080020a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff ffee 	bl	8002090 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_Delay+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffde 	bl	8002090 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008

080020f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09a      	sub	sp, #104	; 0x68
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e1c9      	b.n	80024a4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d176      	bne.n	8002210 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d152      	bne.n	80021d0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe fea3 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d13b      	bne.n	80021d0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 ff81 	bl	8003060 <ADC_Disable>
 800215e:	4603      	mov	r3, r0
 8002160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d12f      	bne.n	80021d0 <HAL_ADC_Init+0xe0>
 8002170:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002174:	2b00      	cmp	r3, #0
 8002176:	d12b      	bne.n	80021d0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002180:	f023 0302 	bic.w	r3, r3, #2
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800219a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ac:	4b86      	ldr	r3, [pc, #536]	; (80023c8 <HAL_ADC_Init+0x2d8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a86      	ldr	r2, [pc, #536]	; (80023cc <HAL_ADC_Init+0x2dc>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9a      	lsrs	r2, r3, #18
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021c2:	e002      	b.n	80021ca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ec:	d110      	bne.n	8002210 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 0312 	bic.w	r3, r3, #18
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	f040 8136 	bne.w	800248a <HAL_ADC_Init+0x39a>
 800221e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 8131 	bne.w	800248a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8129 	bne.w	800248a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002250:	d004      	beq.n	800225c <HAL_ADC_Init+0x16c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5e      	ldr	r2, [pc, #376]	; (80023d0 <HAL_ADC_Init+0x2e0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_ADC_Init+0x170>
 800225c:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_ADC_Init+0x2e4>)
 800225e:	e000      	b.n	8002262 <HAL_ADC_Init+0x172>
 8002260:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_ADC_Init+0x2e8>)
 8002262:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800226c:	d102      	bne.n	8002274 <HAL_ADC_Init+0x184>
 800226e:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HAL_ADC_Init+0x2e0>)
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e01a      	b.n	80022aa <HAL_ADC_Init+0x1ba>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <HAL_ADC_Init+0x2e0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d103      	bne.n	8002286 <HAL_ADC_Init+0x196>
 800227e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e011      	b.n	80022aa <HAL_ADC_Init+0x1ba>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a54      	ldr	r2, [pc, #336]	; (80023dc <HAL_ADC_Init+0x2ec>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_ADC_Init+0x1a6>
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_ADC_Init+0x2f0>)
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e009      	b.n	80022aa <HAL_ADC_Init+0x1ba>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <HAL_ADC_Init+0x2f0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d102      	bne.n	80022a6 <HAL_ADC_Init+0x1b6>
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_ADC_Init+0x2ec>)
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e001      	b.n	80022aa <HAL_ADC_Init+0x1ba>
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_ADC_Init+0x1da>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Init+0x1da>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_ADC_Init+0x1dc>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11c      	bne.n	800230a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_ADC_Init+0x202>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Init+0x202>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_ADC_Init+0x204>
 80022f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d108      	bne.n	800230a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002308:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e5b      	ldrb	r3, [r3, #25]
 800230e:	035b      	lsls	r3, r3, #13
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002314:	2a01      	cmp	r2, #1
 8002316:	d002      	beq.n	800231e <HAL_ADC_Init+0x22e>
 8002318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231c:	e000      	b.n	8002320 <HAL_ADC_Init+0x230>
 800231e:	2200      	movs	r2, #0
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4313      	orrs	r3, r2
 800232e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002330:	4313      	orrs	r3, r2
 8002332:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11b      	bne.n	8002376 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7e5b      	ldrb	r3, [r3, #25]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	3b01      	subs	r3, #1
 800234c:	045a      	lsls	r2, r3, #17
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	4313      	orrs	r3, r2
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	663b      	str	r3, [r7, #96]	; 0x60
 8002358:	e00d      	b.n	8002376 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002362:	f043 0220 	orr.w	r2, r3, #32
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	2b01      	cmp	r3, #1
 800237c:	d03a      	beq.n	80023f4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_ADC_Init+0x2ec>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_ADC_Init+0x2a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_ADC_Init+0x2f0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d128      	bne.n	80023e4 <HAL_ADC_Init+0x2f4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800239a:	d012      	beq.n	80023c2 <HAL_ADC_Init+0x2d2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d00a      	beq.n	80023bc <HAL_ADC_Init+0x2cc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Init+0x2c6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_Init+0x2f8>
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	e015      	b.n	80023e8 <HAL_ADC_Init+0x2f8>
 80023bc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80023c0:	e012      	b.n	80023e8 <HAL_ADC_Init+0x2f8>
 80023c2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023c6:	e00f      	b.n	80023e8 <HAL_ADC_Init+0x2f8>
 80023c8:	20000000 	.word	0x20000000
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	50000100 	.word	0x50000100
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000700 	.word	0x50000700
 80023dc:	50000400 	.word	0x50000400
 80023e0:	50000500 	.word	0x50000500
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023ec:	4313      	orrs	r3, r2
 80023ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f0:	4313      	orrs	r3, r2
 80023f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d114      	bne.n	800242c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002410:	f023 0302 	bic.w	r3, r3, #2
 8002414:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7e1b      	ldrb	r3, [r3, #24]
 800241a:	039a      	lsls	r2, r3, #14
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4313      	orrs	r3, r2
 8002426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002428:	4313      	orrs	r3, r2
 800242a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_ADC_Init+0x3bc>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800243c:	430b      	orrs	r3, r1
 800243e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10c      	bne.n	8002462 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f023 010f 	bic.w	r1, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
 8002460:	e007      	b.n	8002472 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 020f 	bic.w	r2, r2, #15
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
 8002488:	e00a      	b.n	80024a0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f023 0312 	bic.w	r3, r3, #18
 8002492:	f043 0210 	orr.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3768      	adds	r7, #104	; 0x68
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fff0c007 	.word	0xfff0c007

080024b0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80f9 	bne.w	80026be <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Start+0x2a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0f4      	b.n	80026c4 <HAL_ADC_Start+0x214>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fd58 	bl	8002f98 <ADC_Enable>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80e0 	bne.w	80026b4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002510:	d004      	beq.n	800251c <HAL_ADC_Start+0x6c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6d      	ldr	r2, [pc, #436]	; (80026cc <HAL_ADC_Start+0x21c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d106      	bne.n	800252a <HAL_ADC_Start+0x7a>
 800251c:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <HAL_ADC_Start+0x220>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_ADC_Start+0x9a>
 8002528:	e005      	b.n	8002536 <HAL_ADC_Start+0x86>
 800252a:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_ADC_Start+0x224>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_ADC_Start+0x9a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253e:	d004      	beq.n	800254a <HAL_ADC_Start+0x9a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a64      	ldr	r2, [pc, #400]	; (80026d8 <HAL_ADC_Start+0x228>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d115      	bne.n	8002576 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d036      	beq.n	80025d2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002574:	e02d      	b.n	80025d2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258a:	d004      	beq.n	8002596 <HAL_ADC_Start+0xe6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_ADC_Start+0x21c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10a      	bne.n	80025ac <HAL_ADC_Start+0xfc>
 8002596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e008      	b.n	80025be <HAL_ADC_Start+0x10e>
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_ADC_Start+0x228>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d106      	bne.n	80025ee <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f023 0206 	bic.w	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	221c      	movs	r2, #28
 8002602:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Start+0x168>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_ADC_Start+0x21c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d106      	bne.n	8002626 <HAL_ADC_Start+0x176>
 8002618:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_ADC_Start+0x220>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03e      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002624:	e005      	b.n	8002632 <HAL_ADC_Start+0x182>
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_ADC_Start+0x224>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2b00      	cmp	r3, #0
 8002630:	d037      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263a:	d004      	beq.n	8002646 <HAL_ADC_Start+0x196>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_ADC_Start+0x21c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d106      	bne.n	8002654 <HAL_ADC_Start+0x1a4>
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_ADC_Start+0x220>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2b05      	cmp	r3, #5
 8002650:	d027      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002652:	e005      	b.n	8002660 <HAL_ADC_Start+0x1b0>
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_ADC_Start+0x224>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b05      	cmp	r3, #5
 800265e:	d020      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002668:	d004      	beq.n	8002674 <HAL_ADC_Start+0x1c4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_ADC_Start+0x21c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d106      	bne.n	8002682 <HAL_ADC_Start+0x1d2>
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_ADC_Start+0x220>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2b09      	cmp	r3, #9
 800267e:	d010      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002680:	e005      	b.n	800268e <HAL_ADC_Start+0x1de>
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_ADC_Start+0x224>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b09      	cmp	r3, #9
 800268c:	d009      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002696:	d004      	beq.n	80026a2 <HAL_ADC_Start+0x1f2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_ADC_Start+0x228>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10f      	bne.n	80026c2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0204 	orr.w	r2, r2, #4
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	e006      	b.n	80026c2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026bc:	e001      	b.n	80026c2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	50000100 	.word	0x50000100
 80026d0:	50000300 	.word	0x50000300
 80026d4:	50000700 	.word	0x50000700
 80026d8:	50000400 	.word	0x50000400

080026dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADCEx_Calibration_Start+0x1c>
 800270e:	2302      	movs	r3, #2
 8002710:	e05f      	b.n	80027d2 <HAL_ADCEx_Calibration_Start+0xdc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fca0 	bl	8003060 <ADC_Disable>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14e      	bne.n	80027c8 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800273e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002754:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002764:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002766:	f7ff fc93 	bl	8002090 <HAL_GetTick>
 800276a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800276c:	e01c      	b.n	80027a8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800276e:	f7ff fc8f 	bl	8002090 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b0a      	cmp	r3, #10
 800277a:	d915      	bls.n	80027a8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800278a:	d10d      	bne.n	80027a8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f023 0312 	bic.w	r3, r3, #18
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e014      	b.n	80027d2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b6:	d0da      	beq.n	800276e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f023 0303 	bic.w	r3, r3, #3
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b09b      	sub	sp, #108	; 0x6c
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x22>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e2ca      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5b8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 82ae 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d81c      	bhi.n	8002858 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	461a      	mov	r2, r3
 8002832:	231f      	movs	r3, #31
 8002834:	4093      	lsls	r3, r2
 8002836:	43db      	mvns	r3, r3
 8002838:	4019      	ands	r1, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
 8002856:	e063      	b.n	8002920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b09      	cmp	r3, #9
 800285e:	d81e      	bhi.n	800289e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	3b1e      	subs	r3, #30
 8002874:	221f      	movs	r2, #31
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	3b1e      	subs	r3, #30
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
 800289c:	e040      	b.n	8002920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b0e      	cmp	r3, #14
 80028a4:	d81e      	bhi.n	80028e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	3b3c      	subs	r3, #60	; 0x3c
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4019      	ands	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	3b3c      	subs	r3, #60	; 0x3c
 80028d6:	fa00 f203 	lsl.w	r2, r0, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
 80028e2:	e01d      	b.n	8002920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	3b5a      	subs	r3, #90	; 0x5a
 80028f8:	221f      	movs	r2, #31
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	4019      	ands	r1, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	3b5a      	subs	r3, #90	; 0x5a
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80e5 	bne.w	8002afa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b09      	cmp	r3, #9
 8002936:	d91c      	bls.n	8002972 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	2207      	movs	r2, #7
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	4019      	ands	r1, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6898      	ldr	r0, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	3b1e      	subs	r3, #30
 8002964:	fa00 f203 	lsl.w	r2, r0, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]
 8002970:	e019      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6959      	ldr	r1, [r3, #20]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	2207      	movs	r2, #7
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	4019      	ands	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6898      	ldr	r0, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	fa00 f203 	lsl.w	r2, r0, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d84f      	bhi.n	8002a68 <HAL_ADC_ConfigChannel+0x28c>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	08002a03 	.word	0x08002a03
 80029d8:	08002a25 	.word	0x08002a25
 80029dc:	08002a47 	.word	0x08002a47
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029e6:	4b9a      	ldr	r3, [pc, #616]	; (8002c50 <HAL_ADC_ConfigChannel+0x474>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	0691      	lsls	r1, r2, #26
 80029f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029f2:	430a      	orrs	r2, r1
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a00:	e07e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a08:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <HAL_ADC_ConfigChannel+0x474>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	0691      	lsls	r1, r2, #26
 8002a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a14:	430a      	orrs	r2, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a20:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a22:	e06d      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_ADC_ConfigChannel+0x474>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	0691      	lsls	r1, r2, #26
 8002a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a42:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a44:	e05c      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a4c:	4b80      	ldr	r3, [pc, #512]	; (8002c50 <HAL_ADC_ConfigChannel+0x474>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	0691      	lsls	r1, r2, #26
 8002a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a66:	e04b      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	069b      	lsls	r3, r3, #26
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002af8:	e001      	b.n	8002afe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002afe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x344>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x344>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x346>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 8130 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d00f      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b4e:	e049      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	d91c      	bls.n	8002bac <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6999      	ldr	r1, [r3, #24]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	3b1b      	subs	r3, #27
 8002b84:	2207      	movs	r2, #7
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4019      	ands	r1, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6898      	ldr	r0, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b1b      	subs	r3, #27
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	619a      	str	r2, [r3, #24]
 8002baa:	e01b      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6959      	ldr	r1, [r3, #20]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x41c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_ADC_ConfigChannel+0x478>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x420>
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_ADC_ConfigChannel+0x47c>)
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x422>
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_ADC_ConfigChannel+0x480>)
 8002bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c18:	2b11      	cmp	r3, #17
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c2c:	2b12      	cmp	r3, #18
 8002c2e:	f040 80ab 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80a4 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c48:	d10a      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x484>
 8002c4a:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_ADC_ConfigChannel+0x478>)
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e022      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4ba>
 8002c50:	83fff000 	.word	0x83fff000
 8002c54:	50000100 	.word	0x50000100
 8002c58:	50000300 	.word	0x50000300
 8002c5c:	50000700 	.word	0x50000700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4e      	ldr	r2, [pc, #312]	; (8002da0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d103      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x496>
 8002c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e011      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4ba>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d102      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x4a6>
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e009      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4ba>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a48      	ldr	r2, [pc, #288]	; (8002da8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x4b6>
 8002c8c:	4b45      	ldr	r3, [pc, #276]	; (8002da4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e001      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4ba>
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x4da>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x4da>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x4dc>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d150      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x502>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x502>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x504>
 8002cde:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d13c      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d11d      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x54c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d118      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_ADC_ConfigChannel+0x5d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	0c9a      	lsrs	r2, r3, #18
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d18:	e002      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d26:	e02e      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b11      	cmp	r3, #17
 8002d2e:	d10b      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x56c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d46:	e01e      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d11a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d5c:	e013      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d70:	e00a      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d86:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	376c      	adds	r7, #108	; 0x6c
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	50000100 	.word	0x50000100
 8002da4:	50000400 	.word	0x50000400
 8002da8:	50000500 	.word	0x50000500
 8002dac:	20000000 	.word	0x20000000
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b099      	sub	sp, #100	; 0x64
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dcc:	d102      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e01a      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d103      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002dde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	e011      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002df0:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e009      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	e001      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b0      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0a9      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 808d 	bne.w	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 8086 	bne.w	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e50:	d004      	beq.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e5e:	e000      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d040      	beq.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7e:	035b      	lsls	r3, r3, #13
 8002e80:	430b      	orrs	r3, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e86:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15c      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002eca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d14b      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	e03c      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f3c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d112      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f4a:	f023 030f 	bic.w	r3, r3, #15
 8002f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f50:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f52:	e009      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f66:	e000      	b.n	8002f6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f68:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f76:	4618      	mov	r0, r3
 8002f78:	3764      	adds	r7, #100	; 0x64
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	50000100 	.word	0x50000100
 8002f88:	50000400 	.word	0x50000400
 8002f8c:	50000500 	.word	0x50000500
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000700 	.word	0x50000700

08002f98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <ADC_Enable+0x2c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <ADC_Enable+0x2c>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <ADC_Enable+0x2e>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d143      	bne.n	8003052 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b22      	ldr	r3, [pc, #136]	; (800305c <ADC_Enable+0xc4>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e02f      	b.n	8003054 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003004:	f7ff f844 	bl	8002090 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800300a:	e01b      	b.n	8003044 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800300c:	f7ff f840 	bl	8002090 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d914      	bls.n	8003044 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d00d      	beq.n	8003044 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e007      	b.n	8003054 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d1dc      	bne.n	800300c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	8000003f 	.word	0x8000003f

08003060 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <ADC_Disable+0x2c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <ADC_Disable+0x2c>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <ADC_Disable+0x2e>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d047      	beq.n	8003122 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030d 	and.w	r3, r3, #13
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10f      	bne.n	80030c0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0202 	orr.w	r2, r2, #2
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2203      	movs	r2, #3
 80030b6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030b8:	f7fe ffea 	bl	8002090 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030be:	e029      	b.n	8003114 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e023      	b.n	8003124 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030dc:	f7fe ffd8 	bl	8002090 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d914      	bls.n	8003114 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10d      	bne.n	8003114 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0210 	orr.w	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d0dc      	beq.n	80030dc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0ed      	b.n	800331a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ff54 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003160:	f7fe ff96 	bl	8002090 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003166:	e012      	b.n	800318e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003168:	f7fe ff92 	bl	8002090 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d90b      	bls.n	800318e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2205      	movs	r2, #5
 8003186:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0c5      	b.n	800331a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0e5      	beq.n	8003168 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0202 	bic.w	r2, r2, #2
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7fe ff70 	bl	8002090 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031b2:	e012      	b.n	80031da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031b4:	f7fe ff6c 	bl	8002090 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d90b      	bls.n	80031da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2205      	movs	r2, #5
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e09f      	b.n	800331a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e1b      	ldrb	r3, [r3, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d108      	bne.n	8003202 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e007      	b.n	8003212 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7e5b      	ldrb	r3, [r3, #25]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7e9b      	ldrb	r3, [r3, #26]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d108      	bne.n	8003256 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e007      	b.n	8003266 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0220 	bic.w	r2, r2, #32
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7edb      	ldrb	r3, [r3, #27]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d108      	bne.n	8003280 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0210 	bic.w	r2, r2, #16
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e007      	b.n	8003290 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0210 	orr.w	r2, r2, #16
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7f1b      	ldrb	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0208 	bic.w	r2, r2, #8
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7f5b      	ldrb	r3, [r3, #29]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0204 	orr.w	r2, r2, #4
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e007      	b.n	80032e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	ea42 0103 	orr.w	r1, r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003322:	b480      	push	{r7}
 8003324:	b087      	sub	sp, #28
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003338:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d003      	beq.n	8003348 <HAL_CAN_ConfigFilter+0x26>
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80aa 	bne.w	800349c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2201      	movs	r2, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d123      	bne.n	80033ca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3248      	adds	r2, #72	; 0x48
 80033aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d122      	bne.n	8003418 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	431a      	orrs	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3248      	adds	r2, #72	; 0x48
 80033f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800340c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	3348      	adds	r3, #72	; 0x48
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003432:	e007      	b.n	8003444 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800345e:	e007      	b.n	8003470 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	431a      	orrs	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e006      	b.n	80034aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12e      	bne.n	8003528 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034e2:	f7fe fdd5 	bl	8002090 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034e8:	e012      	b.n	8003510 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034ea:	f7fe fdd1 	bl	8002090 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b0a      	cmp	r3, #10
 80034f6:	d90b      	bls.n	8003510 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2205      	movs	r2, #5
 8003508:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e012      	b.n	8003536 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e5      	bne.n	80034ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e006      	b.n	8003536 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800353e:	b480      	push	{r7}
 8003540:	b089      	sub	sp, #36	; 0x24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003552:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800355c:	7ffb      	ldrb	r3, [r7, #31]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d003      	beq.n	800356a <HAL_CAN_AddTxMessage+0x2c>
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b02      	cmp	r3, #2
 8003566:	f040 80b8 	bne.w	80036da <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a0 	beq.w	80036ca <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	0e1b      	lsrs	r3, r3, #24
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d907      	bls.n	80035aa <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e09e      	b.n	80036e8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035aa:	2201      	movs	r2, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	6809      	ldr	r1, [r1, #0]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3318      	adds	r3, #24
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	440b      	add	r3, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035e2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035e8:	68f9      	ldr	r1, [r7, #12]
 80035ea:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035ec:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3318      	adds	r3, #24
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	440b      	add	r3, r1
 80035f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3318      	adds	r3, #24
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	440b      	add	r3, r1
 8003608:	3304      	adds	r3, #4
 800360a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	7d1b      	ldrb	r3, [r3, #20]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d111      	bne.n	8003638 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3318      	adds	r3, #24
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6811      	ldr	r1, [r2, #0]
 8003628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3318      	adds	r3, #24
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	440b      	add	r3, r1
 8003634:	3304      	adds	r3, #4
 8003636:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3307      	adds	r3, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	061a      	lsls	r2, r3, #24
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3306      	adds	r3, #6
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3305      	adds	r3, #5
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4313      	orrs	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	3204      	adds	r2, #4
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	4610      	mov	r0, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	6811      	ldr	r1, [r2, #0]
 8003660:	ea43 0200 	orr.w	r2, r3, r0
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	440b      	add	r3, r1
 800366a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800366e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3303      	adds	r3, #3
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	061a      	lsls	r2, r3, #24
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3302      	adds	r3, #2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3301      	adds	r3, #1
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4313      	orrs	r3, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	4610      	mov	r0, r2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	ea43 0200 	orr.w	r2, r3, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	440b      	add	r3, r1
 80036a0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	3318      	adds	r3, #24
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	4413      	add	r3, r2
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	6811      	ldr	r1, [r2, #0]
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3318      	adds	r3, #24
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	440b      	add	r3, r1
 80036c4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e00e      	b.n	80036e8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e006      	b.n	80036e8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3724      	adds	r7, #36	; 0x24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003708:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d003      	beq.n	8003718 <HAL_CAN_GetRxMessage+0x24>
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b02      	cmp	r3, #2
 8003714:	f040 80f3 	bne.w	80038fe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10e      	bne.n	800373c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0e7      	b.n	800390c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0d8      	b.n	800390c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	331b      	adds	r3, #27
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	4413      	add	r3, r2
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0204 	and.w	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10c      	bne.n	8003792 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	331b      	adds	r3, #27
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0d5b      	lsrs	r3, r3, #21
 8003788:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e00b      	b.n	80037aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	331b      	adds	r3, #27
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	331b      	adds	r3, #27
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0202 	and.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	331b      	adds	r3, #27
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	331b      	adds	r3, #27
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	331b      	adds	r3, #27
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	3304      	adds	r3, #4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0a1a      	lsrs	r2, r3, #8
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	4413      	add	r3, r2
 8003842:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0c1a      	lsrs	r2, r3, #16
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3302      	adds	r3, #2
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	4413      	add	r3, r2
 800385c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0e1a      	lsrs	r2, r3, #24
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	3303      	adds	r3, #3
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	4413      	add	r3, r2
 8003876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	3304      	adds	r3, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0a1a      	lsrs	r2, r3, #8
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3305      	adds	r3, #5
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0c1a      	lsrs	r2, r3, #16
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	3306      	adds	r3, #6
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e1a      	lsrs	r2, r3, #24
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	3307      	adds	r3, #7
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0220 	orr.w	r2, r2, #32
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	e007      	b.n	80038fa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e006      	b.n	800390c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003928:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d002      	beq.n	8003936 <HAL_CAN_ActivateNotification+0x1e>
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d109      	bne.n	800394a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e006      	b.n	8003958 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d07c      	beq.n	8003aa4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d023      	beq.n	80039fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f983 	bl	8003cd2 <HAL_CAN_TxMailbox0CompleteCallback>
 80039cc:	e016      	b.n	80039fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	e00c      	b.n	80039fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e002      	b.n	80039fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f989 	bl	8003d0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d024      	beq.n	8003a50 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f963 	bl	8003ce6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a20:	e016      	b.n	8003a50 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	e00c      	b.n	8003a50 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e002      	b.n	8003a50 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f969 	bl	8003d22 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d024      	beq.n	8003aa4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f943 	bl	8003cfa <HAL_CAN_TxMailbox2CompleteCallback>
 8003a74:	e016      	b.n	8003aa4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	e00c      	b.n	8003aa4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e002      	b.n	8003aa4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f949 	bl	8003d36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f930 	bl	8003d4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fc1c 	bl	8001340 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2208      	movs	r2, #8
 8003b46:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f912 	bl	8003d72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8f9 	bl	8003d5e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d006      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2210      	movs	r2, #16
 8003b86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8fc 	bl	8003d86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8f5 	bl	8003d9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d07b      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d072      	beq.n	8003caa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d043      	beq.n	8003caa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d03e      	beq.n	8003caa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c32:	2b60      	cmp	r3, #96	; 0x60
 8003c34:	d02b      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x32a>
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d82e      	bhi.n	8003c98 <HAL_CAN_IRQHandler+0x334>
 8003c3a:	2b50      	cmp	r3, #80	; 0x50
 8003c3c:	d022      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x320>
 8003c3e:	2b50      	cmp	r3, #80	; 0x50
 8003c40:	d82a      	bhi.n	8003c98 <HAL_CAN_IRQHandler+0x334>
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d019      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x316>
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d826      	bhi.n	8003c98 <HAL_CAN_IRQHandler+0x334>
 8003c4a:	2b30      	cmp	r3, #48	; 0x30
 8003c4c:	d010      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x30c>
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	d822      	bhi.n	8003c98 <HAL_CAN_IRQHandler+0x334>
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d002      	beq.n	8003c5c <HAL_CAN_IRQHandler+0x2f8>
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d005      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c5a:	e01d      	b.n	8003c98 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f043 0308 	orr.w	r3, r3, #8
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c64:	e019      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f043 0310 	orr.w	r3, r3, #16
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c6e:	e014      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	f043 0320 	orr.w	r3, r3, #32
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c78:	e00f      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c82:	e00a      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c8c:	e005      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c96:	e000      	b.n	8003c9a <HAL_CAN_IRQHandler+0x336>
            break;
 8003c98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ca8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f872 	bl	8003dae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de0:	4013      	ands	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <__NVIC_SetPriorityGrouping+0x44>)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	60d3      	str	r3, [r2, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <__NVIC_GetPriorityGrouping+0x18>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 0307 	and.w	r3, r3, #7
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db0b      	blt.n	8003e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	4907      	ldr	r1, [pc, #28]	; (8003e60 <__NVIC_EnableIRQ+0x38>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2001      	movs	r0, #1
 8003e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e100 	.word	0xe000e100

08003e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	490c      	ldr	r1, [pc, #48]	; (8003eb0 <__NVIC_SetPriority+0x4c>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	440b      	add	r3, r1
 8003e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e8c:	e00a      	b.n	8003ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4908      	ldr	r1, [pc, #32]	; (8003eb4 <__NVIC_SetPriority+0x50>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	761a      	strb	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f1c3 0307 	rsb	r3, r3, #7
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	bf28      	it	cs
 8003ed6:	2304      	movcs	r3, #4
 8003ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d902      	bls.n	8003ee8 <NVIC_EncodePriority+0x30>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3b03      	subs	r3, #3
 8003ee6:	e000      	b.n	8003eea <NVIC_EncodePriority+0x32>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	401a      	ands	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f00:	f04f 31ff 	mov.w	r1, #4294967295
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43d9      	mvns	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	4313      	orrs	r3, r2
         );
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f30:	d301      	bcc.n	8003f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00f      	b.n	8003f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <SysTick_Config+0x40>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f3e:	210f      	movs	r1, #15
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	f7ff ff8e 	bl	8003e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <SysTick_Config+0x40>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f4e:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <SysTick_Config+0x40>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000e010 	.word	0xe000e010

08003f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff29 	bl	8003dc4 <__NVIC_SetPriorityGrouping>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f8c:	f7ff ff3e 	bl	8003e0c <__NVIC_GetPriorityGrouping>
 8003f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff ff8e 	bl	8003eb8 <NVIC_EncodePriority>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff5d 	bl	8003e64 <__NVIC_SetPriority>
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff31 	bl	8003e28 <__NVIC_EnableIRQ>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ffa2 	bl	8003f20 <SysTick_Config>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e037      	b.n	800406c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9b8 	bl	80043c4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}  
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_DMA_Start_IT+0x20>
 8004090:	2302      	movs	r3, #2
 8004092:	e04a      	b.n	800412a <HAL_DMA_Start_IT+0xb6>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d13a      	bne.n	800411c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f94b 	bl	8004366 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 020e 	orr.w	r2, r2, #14
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e00f      	b.n	800410a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 020a 	orr.w	r2, r2, #10
 80040f8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e005      	b.n	8004128 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004128:	7dfb      	ldrb	r3, [r7, #23]
} 
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e020      	b.n	8004198 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020e 	bic.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d005      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2204      	movs	r2, #4
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e027      	b.n	8004216 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 020e 	bic.w	r2, r2, #14
 80041d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
    } 
  }
  return status;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2204      	movs	r2, #4
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d024      	beq.n	8004292 <HAL_DMA_IRQHandler+0x72>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01f      	beq.n	8004292 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	2104      	movs	r1, #4
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d06a      	beq.n	800435e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004290:	e065      	b.n	800435e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2202      	movs	r2, #2
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02c      	beq.n	80042fc <HAL_DMA_IRQHandler+0xdc>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d027      	beq.n	80042fc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 020a 	bic.w	r2, r2, #10
 80042c8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	2102      	movs	r1, #2
 80042dc:	fa01 f202 	lsl.w	r2, r1, r2
 80042e0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d035      	beq.n	800435e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80042fa:	e030      	b.n	800435e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2208      	movs	r2, #8
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d028      	beq.n	800435e <HAL_DMA_IRQHandler+0x13e>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d023      	beq.n	800435e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 020e 	bic.w	r2, r2, #14
 8004324:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
    }
  }
}  
 800435c:	e7ff      	b.n	800435e <HAL_DMA_IRQHandler+0x13e>
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d108      	bne.n	80043a6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043a4:	e007      	b.n	80043b6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <DMA_CalcBaseAndBitshift+0x60>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d80f      	bhi.n	80043f8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <DMA_CalcBaseAndBitshift+0x64>)
 80043e0:	4413      	add	r3, r2
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <DMA_CalcBaseAndBitshift+0x68>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a0f      	ldr	r2, [pc, #60]	; (8004430 <DMA_CalcBaseAndBitshift+0x6c>)
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80043f6:	e00e      	b.n	8004416 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <DMA_CalcBaseAndBitshift+0x70>)
 8004400:	4413      	add	r3, r2
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <DMA_CalcBaseAndBitshift+0x68>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	009a      	lsls	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <DMA_CalcBaseAndBitshift+0x74>)
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40020407 	.word	0x40020407
 8004428:	bffdfff8 	.word	0xbffdfff8
 800442c:	cccccccd 	.word	0xcccccccd
 8004430:	40020000 	.word	0x40020000
 8004434:	bffdfbf8 	.word	0xbffdfbf8
 8004438:	40020400 	.word	0x40020400

0800443c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800444a:	e154      	b.n	80046f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8146 	beq.w	80046f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d005      	beq.n	800447c <HAL_GPIO_Init+0x40>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d130      	bne.n	80044de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	2203      	movs	r2, #3
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b2:	2201      	movs	r2, #1
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f003 0201 	and.w	r2, r3, #1
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d017      	beq.n	800451a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d123      	bne.n	800456e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	220f      	movs	r2, #15
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	08da      	lsrs	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3208      	adds	r2, #8
 8004568:	6939      	ldr	r1, [r7, #16]
 800456a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2203      	movs	r2, #3
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 0203 	and.w	r2, r3, #3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80a0 	beq.w	80046f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b0:	4b58      	ldr	r3, [pc, #352]	; (8004714 <HAL_GPIO_Init+0x2d8>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	4a57      	ldr	r2, [pc, #348]	; (8004714 <HAL_GPIO_Init+0x2d8>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6193      	str	r3, [r2, #24]
 80045bc:	4b55      	ldr	r3, [pc, #340]	; (8004714 <HAL_GPIO_Init+0x2d8>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045c8:	4a53      	ldr	r2, [pc, #332]	; (8004718 <HAL_GPIO_Init+0x2dc>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	3302      	adds	r3, #2
 80045d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045f2:	d019      	beq.n	8004628 <HAL_GPIO_Init+0x1ec>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a49      	ldr	r2, [pc, #292]	; (800471c <HAL_GPIO_Init+0x2e0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <HAL_GPIO_Init+0x1e8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_GPIO_Init+0x2e4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00d      	beq.n	8004620 <HAL_GPIO_Init+0x1e4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a47      	ldr	r2, [pc, #284]	; (8004724 <HAL_GPIO_Init+0x2e8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d007      	beq.n	800461c <HAL_GPIO_Init+0x1e0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <HAL_GPIO_Init+0x2ec>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <HAL_GPIO_Init+0x1dc>
 8004614:	2304      	movs	r3, #4
 8004616:	e008      	b.n	800462a <HAL_GPIO_Init+0x1ee>
 8004618:	2305      	movs	r3, #5
 800461a:	e006      	b.n	800462a <HAL_GPIO_Init+0x1ee>
 800461c:	2303      	movs	r3, #3
 800461e:	e004      	b.n	800462a <HAL_GPIO_Init+0x1ee>
 8004620:	2302      	movs	r3, #2
 8004622:	e002      	b.n	800462a <HAL_GPIO_Init+0x1ee>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_GPIO_Init+0x1ee>
 8004628:	2300      	movs	r3, #0
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	f002 0203 	and.w	r2, r2, #3
 8004630:	0092      	lsls	r2, r2, #2
 8004632:	4093      	lsls	r3, r2
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800463a:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_GPIO_Init+0x2dc>)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004648:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_GPIO_Init+0x2f0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800466c:	4a2f      	ldr	r2, [pc, #188]	; (800472c <HAL_GPIO_Init+0x2f0>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004672:	4b2e      	ldr	r3, [pc, #184]	; (800472c <HAL_GPIO_Init+0x2f0>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004696:	4a25      	ldr	r2, [pc, #148]	; (800472c <HAL_GPIO_Init+0x2f0>)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469c:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_GPIO_Init+0x2f0>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_GPIO_Init+0x2f0>)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_GPIO_Init+0x2f0>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <HAL_GPIO_Init+0x2f0>)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	f47f aea3 	bne.w	800444c <HAL_GPIO_Init+0x10>
  }
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40021000 	.word	0x40021000
 8004718:	40010000 	.word	0x40010000
 800471c:	48000400 	.word	0x48000400
 8004720:	48000800 	.word	0x48000800
 8004724:	48000c00 	.word	0x48000c00
 8004728:	48001000 	.word	0x48001000
 800472c:	40010400 	.word	0x40010400

08004730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e001      	b.n	8004752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004770:	787b      	ldrb	r3, [r7, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800477c:	e002      	b.n	8004784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004796:	af00      	add	r7, sp, #0
 8004798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f001 b823 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 817d 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047cc:	4bbc      	ldr	r3, [pc, #752]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d00c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047d8:	4bb9      	ldr	r3, [pc, #740]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d15c      	bne.n	800489e <HAL_RCC_OscConfig+0x10e>
 80047e4:	4bb6      	ldr	r3, [pc, #728]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d155      	bne.n	800489e <HAL_RCC_OscConfig+0x10e>
 80047f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004806:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_RCC_OscConfig+0x94>
 800481e:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	e015      	b.n	8004850 <HAL_RCC_OscConfig+0xc0>
 8004824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004828:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004840:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800484c:	4b9c      	ldr	r3, [pc, #624]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004854:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004858:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800485c:	fa92 f2a2 	rbit	r2, r2
 8004860:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004864:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004868:	fab2 f282 	clz	r2, r2
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f002 021f 	and.w	r2, r2, #31
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 811f 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x334>
 8004886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8116 	bne.w	8004ac4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f000 bfaf 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x12e>
 80048b0:	4b83      	ldr	r3, [pc, #524]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a82      	ldr	r2, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e036      	b.n	800492c <HAL_RCC_OscConfig+0x19c>
 80048be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x158>
 80048ce:	4b7c      	ldr	r3, [pc, #496]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7b      	ldr	r2, [pc, #492]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a78      	ldr	r2, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e021      	b.n	800492c <HAL_RCC_OscConfig+0x19c>
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x184>
 80048fa:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a70      	ldr	r2, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6d      	ldr	r2, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0x19c>
 8004914:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a69      	ldr	r2, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a66      	ldr	r2, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800492c:	4b64      	ldr	r3, [pc, #400]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f023 020f 	bic.w	r2, r3, #15
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	495f      	ldr	r1, [pc, #380]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004942:	4313      	orrs	r3, r2
 8004944:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d059      	beq.n	8004a0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004956:	f7fd fb9b 	bl	8002090 <HAL_GetTick>
 800495a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd fb96 	bl	8002090 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b64      	cmp	r3, #100	; 0x64
 800496e:	d902      	bls.n	8004976 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	f000 bf43 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800498a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d102      	bne.n	80049a8 <HAL_RCC_OscConfig+0x218>
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_OscConfig+0x244>
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049d0:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80049dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049e0:	fa92 f2a2 	rbit	r2, r2
 80049e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80049e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80049ec:	fab2 f282 	clz	r2, r2
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	f042 0220 	orr.w	r2, r2, #32
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	f002 021f 	and.w	r2, r2, #31
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ab      	beq.n	8004960 <HAL_RCC_OscConfig+0x1d0>
 8004a08:	e05d      	b.n	8004ac6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fb41 	bl	8002090 <HAL_GetTick>
 8004a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fb3c 	bl	8002090 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b64      	cmp	r3, #100	; 0x64
 8004a22:	d902      	bls.n	8004a2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	f000 bee9 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2cc>
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e015      	b.n	8004a88 <HAL_RCC_OscConfig+0x2f8>
 8004a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_RCC_OscConfig+0x330>)
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a94:	fa92 f2a2 	rbit	r2, r2
 8004a98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004aa0:	fab2 f282 	clz	r2, r2
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	f002 021f 	and.w	r2, r2, #31
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ab      	bne.n	8004a14 <HAL_RCC_OscConfig+0x284>
 8004abc:	e003      	b.n	8004ac6 <HAL_RCC_OscConfig+0x336>
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 817d 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004adc:	4ba6      	ldr	r3, [pc, #664]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ae8:	4ba3      	ldr	r3, [pc, #652]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d172      	bne.n	8004bda <HAL_RCC_OscConfig+0x44a>
 8004af4:	4ba0      	ldr	r3, [pc, #640]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d16c      	bne.n	8004bda <HAL_RCC_OscConfig+0x44a>
 8004b00:	2302      	movs	r3, #2
 8004b02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_OscConfig+0x3a0>
 8004b2a:	4b93      	ldr	r3, [pc, #588]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	e013      	b.n	8004b58 <HAL_RCC_OscConfig+0x3c8>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b42:	2302      	movs	r3, #2
 8004b44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b54:	4b88      	ldr	r3, [pc, #544]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b62:	fa92 f2a2 	rbit	r2, r2
 8004b66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b6e:	fab2 f282 	clz	r2, r2
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	f002 021f 	and.w	r2, r2, #31
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x410>
 8004b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f000 be2e 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b75      	ldr	r3, [pc, #468]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	21f8      	movs	r1, #248	; 0xf8
 8004bb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004bbe:	fa91 f1a1 	rbit	r1, r1
 8004bc2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004bc6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004bca:	fab1 f181 	clz	r1, r1
 8004bce:	b2c9      	uxtb	r1, r1
 8004bd0:	408b      	lsls	r3, r1
 8004bd2:	4969      	ldr	r1, [pc, #420]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd8:	e0fd      	b.n	8004dd6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8088 	beq.w	8004cfc <HAL_RCC_OscConfig+0x56c>
 8004bec:	2301      	movs	r3, #1
 8004bee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004bfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	2301      	movs	r3, #1
 8004c16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fd fa3a 	bl	8002090 <HAL_GetTick>
 8004c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fd fa35 	bl	8002090 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d902      	bls.n	8004c38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	f000 bde2 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x4d8>
 8004c62:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e013      	b.n	8004c90 <HAL_RCC_OscConfig+0x500>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c84:	fa93 f3a3 	rbit	r3, r3
 8004c88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c8c:	4b3a      	ldr	r3, [pc, #232]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2202      	movs	r2, #2
 8004c92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c9a:	fa92 f2a2 	rbit	r2, r2
 8004c9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ca2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ca6:	fab2 f282 	clz	r2, r2
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	f042 0220 	orr.w	r2, r2, #32
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f002 021f 	and.w	r2, r2, #31
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0af      	beq.n	8004c22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	21f8      	movs	r1, #248	; 0xf8
 8004cd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ce0:	fa91 f1a1 	rbit	r1, r1
 8004ce4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ce8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004cec:	fab1 f181 	clz	r1, r1
 8004cf0:	b2c9      	uxtb	r1, r1
 8004cf2:	408b      	lsls	r3, r1
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
 8004cfa:	e06c      	b.n	8004dd6 <HAL_RCC_OscConfig+0x646>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	fab3 f383 	clz	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	461a      	mov	r2, r3
 8004d24:	2300      	movs	r3, #0
 8004d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd f9b2 	bl	8002090 <HAL_GetTick>
 8004d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d32:	f7fd f9ad 	bl	8002090 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d902      	bls.n	8004d48 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	f000 bd5a 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d104      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5ec>
 8004d72:	4b01      	ldr	r3, [pc, #4]	; (8004d78 <HAL_RCC_OscConfig+0x5e8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	e015      	b.n	8004da4 <HAL_RCC_OscConfig+0x614>
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d8e:	2302      	movs	r3, #2
 8004d90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004da0:	4bc8      	ldr	r3, [pc, #800]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2202      	movs	r2, #2
 8004da6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004daa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004dae:	fa92 f2a2 	rbit	r2, r2
 8004db2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004db6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004dba:	fab2 f282 	clz	r2, r2
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f042 0220 	orr.w	r2, r2, #32
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f002 021f 	and.w	r2, r2, #31
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ad      	bne.n	8004d32 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8110 	beq.w	800500c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d079      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x760>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4bab      	ldr	r3, [pc, #684]	; (80050c8 <HAL_RCC_OscConfig+0x938>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	461a      	mov	r2, r3
 8004e22:	2301      	movs	r3, #1
 8004e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e26:	f7fd f933 	bl	8002090 <HAL_GetTick>
 8004e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e30:	f7fd f92e 	bl	8002090 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d902      	bls.n	8004e46 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	f000 bcdb 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e60:	2202      	movs	r2, #2
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	fa93 f2a3 	rbit	r2, r3
 8004e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e84:	2202      	movs	r2, #2
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	fa93 f2a3 	rbit	r2, r3
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea0:	4b88      	ldr	r3, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 8004ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004eac:	2102      	movs	r1, #2
 8004eae:	6019      	str	r1, [r3, #0]
 8004eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	fa93 f1a3 	rbit	r1, r3
 8004ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ec6:	6019      	str	r1, [r3, #0]
  return result;
 8004ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ecc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0a0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x6a0>
 8004eee:	e08d      	b.n	800500c <HAL_RCC_OscConfig+0x87c>
 8004ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	fa93 f2a3 	rbit	r2, r3
 8004f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f12:	601a      	str	r2, [r3, #0]
  return result;
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x938>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f32:	f7fd f8ad 	bl	8002090 <HAL_GetTick>
 8004f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fd f8a8 	bl	8002090 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	f000 bc55 	b.w	80057fc <HAL_RCC_OscConfig+0x106c>
 8004f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fa93 f2a3 	rbit	r2, r3
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f7e:	2202      	movs	r2, #2
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	fa93 f2a3 	rbit	r2, r3
 8004f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	fa93 f2a3 	rbit	r2, r3
 8004fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004fbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 8004fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fca:	2102      	movs	r1, #2
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	fa93 f1a3 	rbit	r1, r3
 8004fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004fe4:	6019      	str	r1, [r3, #0]
  return result;
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2101      	movs	r1, #1
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d197      	bne.n	8004f3c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 81a1 	beq.w	8005364 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d116      	bne.n	8005062 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 800503a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503e:	61d3      	str	r3, [r2, #28]
 8005040:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005056:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800505a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <HAL_RCC_OscConfig+0x93c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <HAL_RCC_OscConfig+0x93c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_RCC_OscConfig+0x93c>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800507a:	f7fd f809 	bl	8002090 <HAL_GetTick>
 800507e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	e009      	b.n	8005098 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005084:	f7fd f804 	bl	8002090 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b64      	cmp	r3, #100	; 0x64
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e3b1      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x93c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0ef      	beq.n	8005084 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10d      	bne.n	80050d0 <HAL_RCC_OscConfig+0x940>
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <HAL_RCC_OscConfig+0x934>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6213      	str	r3, [r2, #32]
 80050c0:	e03c      	b.n	800513c <HAL_RCC_OscConfig+0x9ac>
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	10908120 	.word	0x10908120
 80050cc:	40007000 	.word	0x40007000
 80050d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <HAL_RCC_OscConfig+0x96a>
 80050e0:	4bc1      	ldr	r3, [pc, #772]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4ac0      	ldr	r2, [pc, #768]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	4bbe      	ldr	r3, [pc, #760]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4abd      	ldr	r2, [pc, #756]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	6213      	str	r3, [r2, #32]
 80050f8:	e020      	b.n	800513c <HAL_RCC_OscConfig+0x9ac>
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b05      	cmp	r3, #5
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x994>
 800510a:	4bb7      	ldr	r3, [pc, #732]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	4ab6      	ldr	r2, [pc, #728]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005110:	f043 0304 	orr.w	r3, r3, #4
 8005114:	6213      	str	r3, [r2, #32]
 8005116:	4bb4      	ldr	r3, [pc, #720]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	4ab3      	ldr	r2, [pc, #716]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6213      	str	r3, [r2, #32]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0x9ac>
 8005124:	4bb0      	ldr	r3, [pc, #704]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4aaf      	ldr	r2, [pc, #700]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	6213      	str	r3, [r2, #32]
 8005130:	4bad      	ldr	r3, [pc, #692]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4aac      	ldr	r2, [pc, #688]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005136:	f023 0304 	bic.w	r3, r3, #4
 800513a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8081 	beq.w	8005250 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514e:	f7fc ff9f 	bl	8002090 <HAL_GetTick>
 8005152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005156:	e00b      	b.n	8005170 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fc ff9a 	bl	8002090 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	; 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e345      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005178:	2202      	movs	r2, #2
 800517a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005180:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f2a3 	rbit	r2, r3
 800518a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800519c:	2202      	movs	r2, #2
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	fa93 f2a3 	rbit	r2, r3
 80051ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051b6:	601a      	str	r2, [r3, #0]
  return result;
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d102      	bne.n	80051dc <HAL_RCC_OscConfig+0xa4c>
 80051d6:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	e013      	b.n	8005204 <HAL_RCC_OscConfig+0xa74>
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80051e4:	2202      	movs	r2, #2
 80051e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	fa93 f2a3 	rbit	r2, r3
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	4b79      	ldr	r3, [pc, #484]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005208:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800520c:	2102      	movs	r1, #2
 800520e:	6011      	str	r1, [r2, #0]
 8005210:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005214:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	fa92 f1a2 	rbit	r1, r2
 800521e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005222:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005226:	6011      	str	r1, [r2, #0]
  return result;
 8005228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800522c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	fab2 f282 	clz	r2, r2
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	f002 021f 	and.w	r2, r2, #31
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f202 	lsl.w	r2, r1, r2
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d084      	beq.n	8005158 <HAL_RCC_OscConfig+0x9c8>
 800524e:	e07f      	b.n	8005350 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005250:	f7fc ff1e 	bl	8002090 <HAL_GetTick>
 8005254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005258:	e00b      	b.n	8005272 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fc ff19 	bl	8002090 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	; 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e2c4      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
 8005272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005276:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800527a:	2202      	movs	r2, #2
 800527c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005282:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	fa93 f2a3 	rbit	r2, r3
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800529e:	2202      	movs	r2, #2
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	fa93 f2a3 	rbit	r2, r3
 80052b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052b8:	601a      	str	r2, [r3, #0]
  return result;
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d102      	bne.n	80052de <HAL_RCC_OscConfig+0xb4e>
 80052d8:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	e013      	b.n	8005306 <HAL_RCC_OscConfig+0xb76>
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80052e6:	2202      	movs	r2, #2
 80052e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	fa93 f2a3 	rbit	r2, r3
 80052f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800530a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800530e:	2102      	movs	r1, #2
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005316:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	fa92 f1a2 	rbit	r1, r2
 8005320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005324:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005328:	6011      	str	r1, [r2, #0]
  return result;
 800532a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800532e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	fab2 f282 	clz	r2, r2
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	f002 021f 	and.w	r2, r2, #31
 8005344:	2101      	movs	r1, #1
 8005346:	fa01 f202 	lsl.w	r2, r1, r2
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d184      	bne.n	800525a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005350:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 800535e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005362:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8242 	beq.w	80057fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <HAL_RCC_OscConfig+0xc58>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b08      	cmp	r3, #8
 8005380:	f000 8213 	beq.w	80057aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f040 8162 	bne.w	800565a <HAL_RCC_OscConfig+0xeca>
 8005396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800539e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	fa93 f2a3 	rbit	r2, r3
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053ba:	601a      	str	r2, [r3, #0]
  return result;
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	461a      	mov	r2, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fc fe58 	bl	8002090 <HAL_GetTick>
 80053e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e4:	e00c      	b.n	8005400 <HAL_RCC_OscConfig+0xc70>
 80053e6:	bf00      	nop
 80053e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fc fe50 	bl	8002090 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1fd      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
 8005400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005404:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fa93 f2a3 	rbit	r2, r3
 800541c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005420:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005424:	601a      	str	r2, [r3, #0]
  return result;
 8005426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800542e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d102      	bne.n	800544a <HAL_RCC_OscConfig+0xcba>
 8005444:	4bb0      	ldr	r3, [pc, #704]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	e027      	b.n	800549a <HAL_RCC_OscConfig+0xd0a>
 800544a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	fa93 f2a3 	rbit	r2, r3
 8005466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	fa93 f2a3 	rbit	r2, r3
 800548c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005490:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	4b9c      	ldr	r3, [pc, #624]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054a6:	6011      	str	r1, [r2, #0]
 80054a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	fa92 f1a2 	rbit	r1, r2
 80054b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054be:	6011      	str	r1, [r2, #0]
  return result;
 80054c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	fab2 f282 	clz	r2, r2
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f042 0220 	orr.w	r2, r2, #32
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f002 021f 	and.w	r2, r2, #31
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f202 	lsl.w	r2, r1, r2
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d182      	bne.n	80053ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e6:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	430b      	orrs	r3, r1
 8005508:	497f      	ldr	r1, [pc, #508]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
 800550e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005512:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800551a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	fa93 f2a3 	rbit	r2, r3
 800552a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005532:	601a      	str	r2, [r3, #0]
  return result;
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800553c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	461a      	mov	r2, r3
 8005550:	2301      	movs	r3, #1
 8005552:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fc fd9c 	bl	8002090 <HAL_GetTick>
 8005558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800555c:	e009      	b.n	8005572 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fc fd97 	bl	8002090 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e144      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
 8005572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005576:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800557a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005584:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	fa93 f2a3 	rbit	r2, r3
 800558e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005592:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005596:	601a      	str	r2, [r3, #0]
  return result;
 8005598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d102      	bne.n	80055bc <HAL_RCC_OscConfig+0xe2c>
 80055b6:	4b54      	ldr	r3, [pc, #336]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	e027      	b.n	800560c <HAL_RCC_OscConfig+0xe7c>
 80055bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	fa93 f2a3 	rbit	r2, r3
 80055d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f2a3 	rbit	r2, r3
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	4b3f      	ldr	r3, [pc, #252]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005610:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005618:	6011      	str	r1, [r2, #0]
 800561a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800561e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	fa92 f1a2 	rbit	r1, r2
 8005628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800562c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005630:	6011      	str	r1, [r2, #0]
  return result;
 8005632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005636:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	fab2 f282 	clz	r2, r2
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	f042 0220 	orr.w	r2, r2, #32
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	f002 021f 	and.w	r2, r2, #31
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f202 	lsl.w	r2, r1, r2
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d082      	beq.n	800555e <HAL_RCC_OscConfig+0xdce>
 8005658:	e0cf      	b.n	80057fa <HAL_RCC_OscConfig+0x106a>
 800565a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	fa93 f2a3 	rbit	r2, r3
 8005676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800567e:	601a      	str	r2, [r3, #0]
  return result;
 8005680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005684:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005688:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fc fcf6 	bl	8002090 <HAL_GetTick>
 80056a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a8:	e009      	b.n	80056be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fc fcf1 	bl	8002090 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e09e      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	fa93 f2a3 	rbit	r2, r3
 80056da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056e2:	601a      	str	r2, [r3, #0]
  return result;
 80056e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d104      	bne.n	800570c <HAL_RCC_OscConfig+0xf7c>
 8005702:	4b01      	ldr	r3, [pc, #4]	; (8005708 <HAL_RCC_OscConfig+0xf78>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	e029      	b.n	800575c <HAL_RCC_OscConfig+0xfcc>
 8005708:	40021000 	.word	0x40021000
 800570c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005710:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	fa93 f2a3 	rbit	r2, r3
 8005728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005736:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800573a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005744:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	fa93 f2a3 	rbit	r2, r3
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_RCC_OscConfig+0x1078>)
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005760:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800576e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	fa92 f1a2 	rbit	r1, r2
 8005778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800577c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005780:	6011      	str	r1, [r2, #0]
  return result;
 8005782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005786:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	fab2 f282 	clz	r2, r2
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	f042 0220 	orr.w	r2, r2, #32
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	f002 021f 	and.w	r2, r2, #31
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f202 	lsl.w	r2, r1, r2
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d180      	bne.n	80056aa <HAL_RCC_OscConfig+0xf1a>
 80057a8:	e027      	b.n	80057fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e01e      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <HAL_RCC_OscConfig+0x1078>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d10b      	bne.n	80057f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000

0800580c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b09e      	sub	sp, #120	; 0x78
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e162      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d910      	bls.n	8005854 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 0207 	bic.w	r2, r3, #7
 800583a:	498b      	ldr	r1, [pc, #556]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b89      	ldr	r3, [pc, #548]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e14a      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005860:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	497f      	ldr	r1, [pc, #508]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80dc 	beq.w	8005a38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d13c      	bne.n	8005902 <HAL_RCC_ClockConfig+0xf6>
 8005888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800588c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005890:	fa93 f3a3 	rbit	r3, r3
 8005894:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d102      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xa6>
 80058ac:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	e00f      	b.n	80058d2 <HAL_RCC_ClockConfig+0xc6>
 80058b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	667b      	str	r3, [r7, #100]	; 0x64
 80058c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c4:	663b      	str	r3, [r7, #96]	; 0x60
 80058c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ce:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80058d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058da:	fa92 f2a2 	rbit	r2, r2
 80058de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058e2:	fab2 f282 	clz	r2, r2
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	f042 0220 	orr.w	r2, r2, #32
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	f002 021f 	and.w	r2, r2, #31
 80058f2:	2101      	movs	r1, #1
 80058f4:	fa01 f202 	lsl.w	r2, r1, r2
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d17b      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0f3      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d13c      	bne.n	8005984 <HAL_RCC_ClockConfig+0x178>
 800590a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800590e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005912:	fa93 f3a3 	rbit	r3, r3
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591a:	fab3 f383 	clz	r3, r3
 800591e:	b2db      	uxtb	r3, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d102      	bne.n	8005934 <HAL_RCC_ClockConfig+0x128>
 800592e:	4b4f      	ldr	r3, [pc, #316]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e00f      	b.n	8005954 <HAL_RCC_ClockConfig+0x148>
 8005934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	fa93 f3a3 	rbit	r3, r3
 8005940:	647b      	str	r3, [r7, #68]	; 0x44
 8005942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005946:	643b      	str	r3, [r7, #64]	; 0x40
 8005948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	4b46      	ldr	r3, [pc, #280]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005958:	63ba      	str	r2, [r7, #56]	; 0x38
 800595a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800595c:	fa92 f2a2 	rbit	r2, r2
 8005960:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0220 	orr.w	r2, r2, #32
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d13a      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0b2      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
 8005984:	2302      	movs	r3, #2
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005992:	fab3 f383 	clz	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d102      	bne.n	80059ac <HAL_RCC_ClockConfig+0x1a0>
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	e00d      	b.n	80059c8 <HAL_RCC_ClockConfig+0x1bc>
 80059ac:	2302      	movs	r3, #2
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	2302      	movs	r3, #2
 80059ba:	623b      	str	r3, [r7, #32]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	fa93 f3a3 	rbit	r3, r3
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2202      	movs	r2, #2
 80059ca:	61ba      	str	r2, [r7, #24]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	fa92 f2a2 	rbit	r2, r2
 80059d2:	617a      	str	r2, [r7, #20]
  return result;
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	fab2 f282 	clz	r2, r2
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	f042 0220 	orr.w	r2, r2, #32
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	f002 021f 	and.w	r2, r2, #31
 80059e6:	2101      	movs	r1, #1
 80059e8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e079      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	491a      	ldr	r1, [pc, #104]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a08:	f7fc fb42 	bl	8002090 <HAL_GetTick>
 8005a0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a10:	f7fc fb3e 	bl	8002090 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e061      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 020c 	and.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1eb      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d214      	bcs.n	8005a70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 0207 	bic.w	r2, r3, #7
 8005a4e:	4906      	ldr	r1, [pc, #24]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_RCC_ClockConfig+0x25c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e040      	b.n	8005aea <HAL_RCC_ClockConfig+0x2de>
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	491a      	ldr	r1, [pc, #104]	; (8005af4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4912      	ldr	r1, [pc, #72]	; (8005af4 <HAL_RCC_ClockConfig+0x2e8>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005aae:	f000 f829 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <HAL_RCC_ClockConfig+0x2e8>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005abc:	22f0      	movs	r2, #240	; 0xf0
 8005abe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fa92 f2a2 	rbit	r2, r2
 8005ac6:	60fa      	str	r2, [r7, #12]
  return result;
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	fab2 f282 	clz	r2, r2
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	40d3      	lsrs	r3, r2
 8005ad2:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_RCC_ClockConfig+0x2ec>)
 8005ad4:	5cd3      	ldrb	r3, [r2, r3]
 8005ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8005ada:	4a08      	ldr	r2, [pc, #32]	; (8005afc <HAL_RCC_ClockConfig+0x2f0>)
 8005adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_RCC_ClockConfig+0x2f4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fa90 	bl	8002008 <HAL_InitTick>
  
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3778      	adds	r7, #120	; 0x78
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	0800cde4 	.word	0x0800cde4
 8005afc:	20000000 	.word	0x20000000
 8005b00:	20000004 	.word	0x20000004

08005b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b08b      	sub	sp, #44	; 0x2c
 8005b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d002      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x30>
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d003      	beq.n	8005b3a <HAL_RCC_GetSysClockFreq+0x36>
 8005b32:	e03c      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b36:	623b      	str	r3, [r7, #32]
      break;
 8005b38:	e03c      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	fa92 f2a2 	rbit	r2, r2
 8005b4c:	607a      	str	r2, [r7, #4]
  return result;
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	fab2 f282 	clz	r2, r2
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	40d3      	lsrs	r3, r2
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b5e:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	220f      	movs	r2, #15
 8005b68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	fa92 f2a2 	rbit	r2, r2
 8005b70:	60fa      	str	r2, [r7, #12]
  return result;
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	fab2 f282 	clz	r2, r2
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	40d3      	lsrs	r3, r2
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b8c:	4a0e      	ldr	r2, [pc, #56]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	623b      	str	r3, [r7, #32]
      break;
 8005bac:	e002      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bb0:	623b      	str	r3, [r7, #32]
      break;
 8005bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	372c      	adds	r7, #44	; 0x2c
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	007a1200 	.word	0x007a1200
 8005bcc:	0800cdfc 	.word	0x0800cdfc
 8005bd0:	0800ce0c 	.word	0x0800ce0c
 8005bd4:	003d0900 	.word	0x003d0900

08005bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_RCC_GetHCLKFreq+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000000 	.word	0x20000000

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bf6:	f7ff ffef 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	fa92 f2a2 	rbit	r2, r2
 8005c10:	603a      	str	r2, [r7, #0]
  return result;
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	fab2 f282 	clz	r2, r2
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	40d3      	lsrs	r3, r2
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	0800cdf4 	.word	0x0800cdf4

08005c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c3a:	f7ff ffcd 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c3e:	4601      	mov	r1, r0
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	fa92 f2a2 	rbit	r2, r2
 8005c54:	603a      	str	r2, [r7, #0]
  return result;
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	fab2 f282 	clz	r2, r2
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	40d3      	lsrs	r3, r2
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	0800cdf4 	.word	0x0800cdf4

08005c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b092      	sub	sp, #72	; 0x48
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80d4 	beq.w	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9c:	4b4e      	ldr	r3, [pc, #312]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca8:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4a4a      	ldr	r2, [pc, #296]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	61d3      	str	r3, [r2, #28]
 8005cb4:	4b48      	ldr	r3, [pc, #288]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc6:	4b45      	ldr	r3, [pc, #276]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d118      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cd2:	4b42      	ldr	r3, [pc, #264]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a41      	ldr	r2, [pc, #260]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cde:	f7fc f9d7 	bl	8002090 <HAL_GetTick>
 8005ce2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce6:	f7fc f9d3 	bl	8002090 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b64      	cmp	r3, #100	; 0x64
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e169      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf8:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d04:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8084 	beq.w	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d07c      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d24:	4b2c      	ldr	r3, [pc, #176]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d3e:	fab3 f383 	clz	r3, r3
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2301      	movs	r3, #1
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	fa93 f3a3 	rbit	r3, r3
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d62:	fab3 f383 	clz	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d04b      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d86:	f7fc f983 	bl	8002090 <HAL_GetTick>
 8005d8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fc f97f 	bl	8002090 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e113      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005da4:	2302      	movs	r3, #2
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	fa93 f3a3 	rbit	r3, r3
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	2302      	movs	r3, #2
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	fa93 f3a3 	rbit	r3, r3
 8005dba:	61fb      	str	r3, [r7, #28]
  return result;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbe:	fab3 f383 	clz	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005dd2:	4b01      	ldr	r3, [pc, #4]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	e00d      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	10908100 	.word	0x10908100
 8005de4:	2302      	movs	r3, #2
 8005de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2202      	movs	r2, #2
 8005df6:	613a      	str	r2, [r7, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	fa92 f2a2 	rbit	r2, r2
 8005dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	fab2 f282 	clz	r2, r2
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	f002 021f 	and.w	r2, r2, #31
 8005e12:	2101      	movs	r1, #1
 8005e14:	fa01 f202 	lsl.w	r2, r1, r2
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0b7      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e1e:	4b6d      	ldr	r3, [pc, #436]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	496a      	ldr	r1, [pc, #424]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d105      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e38:	4b66      	ldr	r3, [pc, #408]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4a65      	ldr	r2, [pc, #404]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e50:	4b60      	ldr	r3, [pc, #384]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	f023 0203 	bic.w	r2, r3, #3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	495d      	ldr	r1, [pc, #372]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e6e:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4956      	ldr	r1, [pc, #344]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e8c:	4b51      	ldr	r3, [pc, #324]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	494e      	ldr	r1, [pc, #312]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eaa:	4b4a      	ldr	r3, [pc, #296]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	f023 0210 	bic.w	r2, r3, #16
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	4947      	ldr	r1, [pc, #284]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ec8:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	493f      	ldr	r1, [pc, #252]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f023 0220 	bic.w	r2, r3, #32
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	4938      	ldr	r1, [pc, #224]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f04:	4b33      	ldr	r3, [pc, #204]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	4930      	ldr	r1, [pc, #192]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f22:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	4929      	ldr	r1, [pc, #164]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f40:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4921      	ldr	r1, [pc, #132]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	491a      	ldr	r1, [pc, #104]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f7c:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4912      	ldr	r1, [pc, #72]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	490b      	ldr	r1, [pc, #44]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3748      	adds	r7, #72	; 0x48
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000

08005fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e049      	b.n	800607e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fe3e 	bl	8001c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f000 fa4a 	bl	80064b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_TIM_PWM_Start+0x24>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e03c      	b.n	8006126 <HAL_TIM_PWM_Start+0x9e>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d109      	bne.n	80060c6 <HAL_TIM_PWM_Start+0x3e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	e02f      	b.n	8006126 <HAL_TIM_PWM_Start+0x9e>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d109      	bne.n	80060e0 <HAL_TIM_PWM_Start+0x58>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	bf14      	ite	ne
 80060d8:	2301      	movne	r3, #1
 80060da:	2300      	moveq	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	e022      	b.n	8006126 <HAL_TIM_PWM_Start+0x9e>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b0c      	cmp	r3, #12
 80060e4:	d109      	bne.n	80060fa <HAL_TIM_PWM_Start+0x72>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	bf14      	ite	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	2300      	moveq	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	e015      	b.n	8006126 <HAL_TIM_PWM_Start+0x9e>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d109      	bne.n	8006114 <HAL_TIM_PWM_Start+0x8c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	e008      	b.n	8006126 <HAL_TIM_PWM_Start+0x9e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e097      	b.n	800625e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xb6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613c:	e023      	b.n	8006186 <HAL_TIM_PWM_Start+0xfe>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0xc6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800614c:	e01b      	b.n	8006186 <HAL_TIM_PWM_Start+0xfe>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d104      	bne.n	800615e <HAL_TIM_PWM_Start+0xd6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	e013      	b.n	8006186 <HAL_TIM_PWM_Start+0xfe>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b0c      	cmp	r3, #12
 8006162:	d104      	bne.n	800616e <HAL_TIM_PWM_Start+0xe6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800616c:	e00b      	b.n	8006186 <HAL_TIM_PWM_Start+0xfe>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b10      	cmp	r3, #16
 8006172:	d104      	bne.n	800617e <HAL_TIM_PWM_Start+0xf6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617c:	e003      	b.n	8006186 <HAL_TIM_PWM_Start+0xfe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fcf4 	bl	8006b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a33      	ldr	r2, [pc, #204]	; (8006268 <HAL_TIM_PWM_Start+0x1e0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x13e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a32      	ldr	r2, [pc, #200]	; (800626c <HAL_TIM_PWM_Start+0x1e4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x13e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a30      	ldr	r2, [pc, #192]	; (8006270 <HAL_TIM_PWM_Start+0x1e8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x13e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2f      	ldr	r2, [pc, #188]	; (8006274 <HAL_TIM_PWM_Start+0x1ec>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x13e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <HAL_TIM_PWM_Start+0x1f0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_PWM_Start+0x142>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_TIM_PWM_Start+0x144>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a20      	ldr	r2, [pc, #128]	; (8006268 <HAL_TIM_PWM_Start+0x1e0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_TIM_PWM_Start+0x194>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d013      	beq.n	800621c <HAL_TIM_PWM_Start+0x194>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_TIM_PWM_Start+0x1f4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_PWM_Start+0x194>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_TIM_PWM_Start+0x1f8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIM_PWM_Start+0x194>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a17      	ldr	r2, [pc, #92]	; (800626c <HAL_TIM_PWM_Start+0x1e4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_PWM_Start+0x194>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a16      	ldr	r2, [pc, #88]	; (8006270 <HAL_TIM_PWM_Start+0x1e8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d115      	bne.n	8006248 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <HAL_TIM_PWM_Start+0x1fc>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d015      	beq.n	800625a <HAL_TIM_PWM_Start+0x1d2>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d011      	beq.n	800625a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	e008      	b.n	800625a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e000      	b.n	800625c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0ff      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b14      	cmp	r3, #20
 80062b2:	f200 80f0 	bhi.w	8006496 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006497 	.word	0x08006497
 80062c4:	08006497 	.word	0x08006497
 80062c8:	08006497 	.word	0x08006497
 80062cc:	08006351 	.word	0x08006351
 80062d0:	08006497 	.word	0x08006497
 80062d4:	08006497 	.word	0x08006497
 80062d8:	08006497 	.word	0x08006497
 80062dc:	08006393 	.word	0x08006393
 80062e0:	08006497 	.word	0x08006497
 80062e4:	08006497 	.word	0x08006497
 80062e8:	08006497 	.word	0x08006497
 80062ec:	080063d3 	.word	0x080063d3
 80062f0:	08006497 	.word	0x08006497
 80062f4:	08006497 	.word	0x08006497
 80062f8:	08006497 	.word	0x08006497
 80062fc:	08006415 	.word	0x08006415
 8006300:	08006497 	.word	0x08006497
 8006304:	08006497 	.word	0x08006497
 8006308:	08006497 	.word	0x08006497
 800630c:	08006455 	.word	0x08006455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f95a 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0208 	orr.w	r2, r2, #8
 800632a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0204 	bic.w	r2, r2, #4
 800633a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	619a      	str	r2, [r3, #24]
      break;
 800634e:	e0a5      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f9ca 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6999      	ldr	r1, [r3, #24]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	619a      	str	r2, [r3, #24]
      break;
 8006390:	e084      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa33 	bl	8006804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0208 	orr.w	r2, r2, #8
 80063ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0204 	bic.w	r2, r2, #4
 80063bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69d9      	ldr	r1, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	61da      	str	r2, [r3, #28]
      break;
 80063d0:	e064      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fa9b 	bl	8006914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69d9      	ldr	r1, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	021a      	lsls	r2, r3, #8
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	61da      	str	r2, [r3, #28]
      break;
 8006412:	e043      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fae4 	bl	80069e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0204 	bic.w	r2, r2, #4
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006452:	e023      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fb28 	bl	8006ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006494:	e002      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
      break;
 800649a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <TIM_Base_SetConfig+0x104>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00f      	beq.n	80064e8 <TIM_Base_SetConfig+0x38>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ce:	d00b      	beq.n	80064e8 <TIM_Base_SetConfig+0x38>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <TIM_Base_SetConfig+0x108>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_Base_SetConfig+0x38>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a38      	ldr	r2, [pc, #224]	; (80065bc <TIM_Base_SetConfig+0x10c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_Base_SetConfig+0x38>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <TIM_Base_SetConfig+0x110>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d108      	bne.n	80064fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <TIM_Base_SetConfig+0x104>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01b      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006508:	d017      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <TIM_Base_SetConfig+0x108>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a29      	ldr	r2, [pc, #164]	; (80065bc <TIM_Base_SetConfig+0x10c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00f      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <TIM_Base_SetConfig+0x110>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00b      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a27      	ldr	r2, [pc, #156]	; (80065c4 <TIM_Base_SetConfig+0x114>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a26      	ldr	r2, [pc, #152]	; (80065c8 <TIM_Base_SetConfig+0x118>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a25      	ldr	r2, [pc, #148]	; (80065cc <TIM_Base_SetConfig+0x11c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d108      	bne.n	800654c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <TIM_Base_SetConfig+0x104>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <TIM_Base_SetConfig+0xe8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <TIM_Base_SetConfig+0x110>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_Base_SetConfig+0xe8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <TIM_Base_SetConfig+0x114>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_Base_SetConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <TIM_Base_SetConfig+0x118>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_Base_SetConfig+0xe8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <TIM_Base_SetConfig+0x11c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d103      	bne.n	80065a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	615a      	str	r2, [r3, #20]
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40013400 	.word	0x40013400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2c      	ldr	r2, [pc, #176]	; (80066dc <TIM_OC1_SetConfig+0x10c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00f      	beq.n	8006650 <TIM_OC1_SetConfig+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2b      	ldr	r2, [pc, #172]	; (80066e0 <TIM_OC1_SetConfig+0x110>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_OC1_SetConfig+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <TIM_OC1_SetConfig+0x114>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_OC1_SetConfig+0x80>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a29      	ldr	r2, [pc, #164]	; (80066e8 <TIM_OC1_SetConfig+0x118>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC1_SetConfig+0x80>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a28      	ldr	r2, [pc, #160]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10c      	bne.n	800666a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0308 	bic.w	r3, r3, #8
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <TIM_OC1_SetConfig+0x10c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00f      	beq.n	8006692 <TIM_OC1_SetConfig+0xc2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <TIM_OC1_SetConfig+0x110>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00b      	beq.n	8006692 <TIM_OC1_SetConfig+0xc2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <TIM_OC1_SetConfig+0x114>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <TIM_OC1_SetConfig+0xc2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <TIM_OC1_SetConfig+0x118>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC1_SetConfig+0xc2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a17      	ldr	r2, [pc, #92]	; (80066ec <TIM_OC1_SetConfig+0x11c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d111      	bne.n	80066b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0320 	bic.w	r3, r3, #32
 800673e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <TIM_OC2_SetConfig+0x100>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC2_SetConfig+0x6c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <TIM_OC2_SetConfig+0x104>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10d      	bne.n	8006778 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <TIM_OC2_SetConfig+0x100>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_OC2_SetConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <TIM_OC2_SetConfig+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_OC2_SetConfig+0xb0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <TIM_OC2_SetConfig+0x108>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_OC2_SetConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <TIM_OC2_SetConfig+0x10c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC2_SetConfig+0xb0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a19      	ldr	r2, [pc, #100]	; (8006800 <TIM_OC2_SetConfig+0x110>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d113      	bne.n	80067c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a27      	ldr	r2, [pc, #156]	; (8006900 <TIM_OC3_SetConfig+0xfc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC3_SetConfig+0x6a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a26      	ldr	r2, [pc, #152]	; (8006904 <TIM_OC3_SetConfig+0x100>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10d      	bne.n	800688a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006888:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <TIM_OC3_SetConfig+0xfc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_OC3_SetConfig+0xae>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <TIM_OC3_SetConfig+0x100>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_OC3_SetConfig+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <TIM_OC3_SetConfig+0x104>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_OC3_SetConfig+0xae>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <TIM_OC3_SetConfig+0x108>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC3_SetConfig+0xae>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <TIM_OC3_SetConfig+0x10c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d113      	bne.n	80068da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	031b      	lsls	r3, r3, #12
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <TIM_OC4_SetConfig+0xc0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_OC4_SetConfig+0x84>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <TIM_OC4_SetConfig+0xc4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00b      	beq.n	8006998 <TIM_OC4_SetConfig+0x84>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	; (80069dc <TIM_OC4_SetConfig+0xc8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_OC4_SetConfig+0x84>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC4_SetConfig+0xcc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC4_SetConfig+0x84>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <TIM_OC4_SetConfig+0xd0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	019b      	lsls	r3, r3, #6
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <TIM_OC5_SetConfig+0xb4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00f      	beq.n	8006a62 <TIM_OC5_SetConfig+0x7a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <TIM_OC5_SetConfig+0xb8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00b      	beq.n	8006a62 <TIM_OC5_SetConfig+0x7a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <TIM_OC5_SetConfig+0xbc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d007      	beq.n	8006a62 <TIM_OC5_SetConfig+0x7a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <TIM_OC5_SetConfig+0xc0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC5_SetConfig+0x7a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <TIM_OC5_SetConfig+0xc4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d109      	bne.n	8006a76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800

08006ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <TIM_OC6_SetConfig+0xb8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC6_SetConfig+0x7c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <TIM_OC6_SetConfig+0xbc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC6_SetConfig+0x7c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a16      	ldr	r2, [pc, #88]	; (8006b70 <TIM_OC6_SetConfig+0xc0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC6_SetConfig+0x7c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <TIM_OC6_SetConfig+0xc4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC6_SetConfig+0x7c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <TIM_OC6_SetConfig+0xc8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d109      	bne.n	8006b40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e063      	b.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2b      	ldr	r2, [pc, #172]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d013      	beq.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d10c      	bne.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40014000 	.word	0x40014000

08006cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e040      	b.n	8006d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fb f880 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2224      	movs	r2, #36	; 0x24
 8006cf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fc12 	bl	8007530 <UART_SetConfig>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e022      	b.n	8006d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fddc 	bl	80078dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fe63 	bl	8007a20 <UART_CheckIdleState>
 8006d5a:	4603      	mov	r3, r0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	; 0x28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d13d      	bne.n	8006df6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <HAL_UART_Receive_IT+0x22>
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e036      	b.n	8006df8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_UART_Receive_IT+0x34>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e02f      	b.n	8006df8 <HAL_UART_Receive_IT+0x94>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d018      	beq.n	8006de6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	623b      	str	r3, [r7, #32]
 8006dd4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	69f9      	ldr	r1, [r7, #28]
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 ff25 	bl	8007c3c <UART_Start_Receive_IT>
 8006df2:	4603      	mov	r3, r0
 8006df4:	e000      	b.n	8006df8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3728      	adds	r7, #40	; 0x28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d178      	bne.n	8006f08 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_UART_Transmit_DMA+0x22>
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e071      	b.n	8006f0a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_UART_Transmit_DMA+0x34>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e06a      	b.n	8006f0a <HAL_UART_Transmit_DMA+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2221      	movs	r2, #33	; 0x21
 8006e5e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02b      	beq.n	8006ec0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <HAL_UART_Transmit_DMA+0x114>)
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e74:	4a28      	ldr	r2, [pc, #160]	; (8006f18 <HAL_UART_Transmit_DMA+0x118>)
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7c:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <HAL_UART_Transmit_DMA+0x11c>)
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	2200      	movs	r2, #0
 8006e86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e90:	4619      	mov	r1, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3328      	adds	r3, #40	; 0x28
 8006e98:	461a      	mov	r2, r3
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	f7fd f8ea 	bl	8004074 <HAL_DMA_Start_IT>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e024      	b.n	8006f0a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2240      	movs	r2, #64	; 0x40
 8006ec6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	623a      	str	r2, [r7, #32]
 8006ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	69f9      	ldr	r1, [r7, #28]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08007e7f 	.word	0x08007e7f
 8006f18:	08007f13 	.word	0x08007f13
 8006f1c:	08007f2f 	.word	0x08007f2f

08006f20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b0ba      	sub	sp, #232	; 0xe8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f4e:	4013      	ands	r3, r2
 8006f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d115      	bne.n	8006f88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 82a3 	beq.w	80074c4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
      }
      return;
 8006f86:	e29d      	b.n	80074c4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8117 	beq.w	80071c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fa2:	4b85      	ldr	r3, [pc, #532]	; (80071b8 <HAL_UART_IRQHandler+0x298>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 810a 	beq.w	80071c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d011      	beq.n	8006fdc <HAL_UART_IRQHandler+0xbc>
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d011      	beq.n	800700c <HAL_UART_IRQHandler+0xec>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007002:	f043 0204 	orr.w	r2, r3, #4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d011      	beq.n	800703c <HAL_UART_IRQHandler+0x11c>
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2204      	movs	r2, #4
 800702a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d017      	beq.n	8007078 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007058:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2208      	movs	r2, #8
 8007066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706e:	f043 0208 	orr.w	r2, r3, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007080:	2b00      	cmp	r3, #0
 8007082:	d012      	beq.n	80070aa <HAL_UART_IRQHandler+0x18a>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8209 	beq.w	80074c8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d005      	beq.n	8007102 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d04f      	beq.n	80071a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fe58 	bl	8007db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d141      	bne.n	800719a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800712c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800714e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800715a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1d9      	bne.n	8007116 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	2b00      	cmp	r3, #0
 8007168:	d013      	beq.n	8007192 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	4a13      	ldr	r2, [pc, #76]	; (80071bc <HAL_UART_IRQHandler+0x29c>)
 8007170:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007176:	4618      	mov	r0, r3
 8007178:	f7fd f814 	bl	80041a4 <HAL_DMA_Abort_IT>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d017      	beq.n	80071b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	e00f      	b.n	80071b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9b6 	bl	8007504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	e00b      	b.n	80071b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9b2 	bl	8007504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a0:	e007      	b.n	80071b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9ae 	bl	8007504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80071b0:	e18a      	b.n	80074c8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b2:	bf00      	nop
    return;
 80071b4:	e188      	b.n	80074c8 <HAL_UART_IRQHandler+0x5a8>
 80071b6:	bf00      	nop
 80071b8:	04000120 	.word	0x04000120
 80071bc:	08007fab 	.word	0x08007fab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	f040 8143 	bne.w	8007450 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 813c 	beq.w	8007450 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8135 	beq.w	8007450 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2210      	movs	r2, #16
 80071ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	f040 80b1 	bne.w	8007360 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800720a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 815c 	beq.w	80074cc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800721a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800721e:	429a      	cmp	r2, r3
 8007220:	f080 8154 	bcs.w	80074cc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800722a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b20      	cmp	r3, #32
 8007236:	f000 8085 	beq.w	8007344 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800724e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007268:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007270:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800727c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1da      	bne.n	800723a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e1      	bne.n	8007284 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e3      	bne.n	80072c0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007326:	65bb      	str	r3, [r7, #88]	; 0x58
 8007328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800732c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e4      	bne.n	8007304 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	4618      	mov	r0, r3
 8007340:	f7fc fef7 	bl	8004132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007350:	b29b      	uxth	r3, r3
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	b29b      	uxth	r3, r3
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f8dd 	bl	8007518 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800735e:	e0b5      	b.n	80074cc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800736c:	b29b      	uxth	r3, r3
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a7 	beq.w	80074d0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a2 	beq.w	80074d0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
 80073b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e4      	bne.n	800738c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	623b      	str	r3, [r7, #32]
   return(result);
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073e6:	633a      	str	r2, [r7, #48]	; 0x30
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e3      	bne.n	80073c2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	60fb      	str	r3, [r7, #12]
   return(result);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f023 0310 	bic.w	r3, r3, #16
 8007420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	69b9      	ldr	r1, [r7, #24]
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	617b      	str	r3, [r7, #20]
   return(result);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e4      	bne.n	800740c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f865 	bl	8007518 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800744e:	e03f      	b.n	80074d0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <HAL_UART_IRQHandler+0x55a>
 800745c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 ff35 	bl	80082e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007478:	e02d      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00e      	beq.n	80074a4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01c      	beq.n	80074d4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
    }
    return;
 80074a2:	e017      	b.n	80074d4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d012      	beq.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fd8a 	bl	8007fd6 <UART_EndTransmit_IT>
    return;
 80074c2:	e008      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80074c4:	bf00      	nop
 80074c6:	e006      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80074c8:	bf00      	nop
 80074ca:	e004      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80074cc:	bf00      	nop
 80074ce:	e002      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80074d4:	bf00      	nop
  }

}
 80074d6:	37e8      	adds	r7, #232	; 0xe8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800755e:	f023 030c 	bic.w	r3, r3, #12
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	430b      	orrs	r3, r1
 800756a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4aa8      	ldr	r2, [pc, #672]	; (800784c <UART_SetConfig+0x31c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d120      	bne.n	80075f2 <UART_SetConfig+0xc2>
 80075b0:	4ba7      	ldr	r3, [pc, #668]	; (8007850 <UART_SetConfig+0x320>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	f003 0303 	and.w	r3, r3, #3
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d817      	bhi.n	80075ec <UART_SetConfig+0xbc>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x94>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e7 	.word	0x080075e7
 80075d0:	080075db 	.word	0x080075db
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e0b5      	b.n	8007746 <UART_SetConfig+0x216>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e0b2      	b.n	8007746 <UART_SetConfig+0x216>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e0af      	b.n	8007746 <UART_SetConfig+0x216>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e0ac      	b.n	8007746 <UART_SetConfig+0x216>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	e0a9      	b.n	8007746 <UART_SetConfig+0x216>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a97      	ldr	r2, [pc, #604]	; (8007854 <UART_SetConfig+0x324>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d124      	bne.n	8007646 <UART_SetConfig+0x116>
 80075fc:	4b94      	ldr	r3, [pc, #592]	; (8007850 <UART_SetConfig+0x320>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007608:	d011      	beq.n	800762e <UART_SetConfig+0xfe>
 800760a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800760e:	d817      	bhi.n	8007640 <UART_SetConfig+0x110>
 8007610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007614:	d011      	beq.n	800763a <UART_SetConfig+0x10a>
 8007616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800761a:	d811      	bhi.n	8007640 <UART_SetConfig+0x110>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <UART_SetConfig+0xf8>
 8007620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007624:	d006      	beq.n	8007634 <UART_SetConfig+0x104>
 8007626:	e00b      	b.n	8007640 <UART_SetConfig+0x110>
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e08b      	b.n	8007746 <UART_SetConfig+0x216>
 800762e:	2302      	movs	r3, #2
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e088      	b.n	8007746 <UART_SetConfig+0x216>
 8007634:	2304      	movs	r3, #4
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e085      	b.n	8007746 <UART_SetConfig+0x216>
 800763a:	2308      	movs	r3, #8
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e082      	b.n	8007746 <UART_SetConfig+0x216>
 8007640:	2310      	movs	r3, #16
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e07f      	b.n	8007746 <UART_SetConfig+0x216>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a83      	ldr	r2, [pc, #524]	; (8007858 <UART_SetConfig+0x328>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d124      	bne.n	800769a <UART_SetConfig+0x16a>
 8007650:	4b7f      	ldr	r3, [pc, #508]	; (8007850 <UART_SetConfig+0x320>)
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007658:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800765c:	d011      	beq.n	8007682 <UART_SetConfig+0x152>
 800765e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007662:	d817      	bhi.n	8007694 <UART_SetConfig+0x164>
 8007664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007668:	d011      	beq.n	800768e <UART_SetConfig+0x15e>
 800766a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800766e:	d811      	bhi.n	8007694 <UART_SetConfig+0x164>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <UART_SetConfig+0x14c>
 8007674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007678:	d006      	beq.n	8007688 <UART_SetConfig+0x158>
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x164>
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e061      	b.n	8007746 <UART_SetConfig+0x216>
 8007682:	2302      	movs	r3, #2
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e05e      	b.n	8007746 <UART_SetConfig+0x216>
 8007688:	2304      	movs	r3, #4
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e05b      	b.n	8007746 <UART_SetConfig+0x216>
 800768e:	2308      	movs	r3, #8
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e058      	b.n	8007746 <UART_SetConfig+0x216>
 8007694:	2310      	movs	r3, #16
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	e055      	b.n	8007746 <UART_SetConfig+0x216>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6f      	ldr	r2, [pc, #444]	; (800785c <UART_SetConfig+0x32c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d124      	bne.n	80076ee <UART_SetConfig+0x1be>
 80076a4:	4b6a      	ldr	r3, [pc, #424]	; (8007850 <UART_SetConfig+0x320>)
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076b0:	d011      	beq.n	80076d6 <UART_SetConfig+0x1a6>
 80076b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076b6:	d817      	bhi.n	80076e8 <UART_SetConfig+0x1b8>
 80076b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076bc:	d011      	beq.n	80076e2 <UART_SetConfig+0x1b2>
 80076be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c2:	d811      	bhi.n	80076e8 <UART_SetConfig+0x1b8>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <UART_SetConfig+0x1a0>
 80076c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076cc:	d006      	beq.n	80076dc <UART_SetConfig+0x1ac>
 80076ce:	e00b      	b.n	80076e8 <UART_SetConfig+0x1b8>
 80076d0:	2300      	movs	r3, #0
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e037      	b.n	8007746 <UART_SetConfig+0x216>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e034      	b.n	8007746 <UART_SetConfig+0x216>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e031      	b.n	8007746 <UART_SetConfig+0x216>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e02e      	b.n	8007746 <UART_SetConfig+0x216>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e02b      	b.n	8007746 <UART_SetConfig+0x216>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a5b      	ldr	r2, [pc, #364]	; (8007860 <UART_SetConfig+0x330>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d124      	bne.n	8007742 <UART_SetConfig+0x212>
 80076f8:	4b55      	ldr	r3, [pc, #340]	; (8007850 <UART_SetConfig+0x320>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007704:	d011      	beq.n	800772a <UART_SetConfig+0x1fa>
 8007706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800770a:	d817      	bhi.n	800773c <UART_SetConfig+0x20c>
 800770c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007710:	d011      	beq.n	8007736 <UART_SetConfig+0x206>
 8007712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007716:	d811      	bhi.n	800773c <UART_SetConfig+0x20c>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <UART_SetConfig+0x1f4>
 800771c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007720:	d006      	beq.n	8007730 <UART_SetConfig+0x200>
 8007722:	e00b      	b.n	800773c <UART_SetConfig+0x20c>
 8007724:	2300      	movs	r3, #0
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e00d      	b.n	8007746 <UART_SetConfig+0x216>
 800772a:	2302      	movs	r3, #2
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e00a      	b.n	8007746 <UART_SetConfig+0x216>
 8007730:	2304      	movs	r3, #4
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e007      	b.n	8007746 <UART_SetConfig+0x216>
 8007736:	2308      	movs	r3, #8
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e004      	b.n	8007746 <UART_SetConfig+0x216>
 800773c:	2310      	movs	r3, #16
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e001      	b.n	8007746 <UART_SetConfig+0x216>
 8007742:	2310      	movs	r3, #16
 8007744:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800774e:	d15c      	bne.n	800780a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	2b08      	cmp	r3, #8
 8007754:	d827      	bhi.n	80077a6 <UART_SetConfig+0x276>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0x22c>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a7 	.word	0x080077a7
 800776c:	08007797 	.word	0x08007797
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077a7 	.word	0x080077a7
 800777c:	0800779f 	.word	0x0800779f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fe fa36 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8007784:	61b8      	str	r0, [r7, #24]
        break;
 8007786:	e013      	b.n	80077b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007788:	f7fe fa54 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 800778c:	61b8      	str	r0, [r7, #24]
        break;
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <UART_SetConfig+0x334>)
 8007792:	61bb      	str	r3, [r7, #24]
        break;
 8007794:	e00c      	b.n	80077b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007796:	f7fe f9b5 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 800779a:	61b8      	str	r0, [r7, #24]
        break;
 800779c:	e008      	b.n	80077b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a2:	61bb      	str	r3, [r7, #24]
        break;
 80077a4:	e004      	b.n	80077b0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77bb      	strb	r3, [r7, #30]
        break;
 80077ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 8084 	beq.w	80078c0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	005a      	lsls	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	441a      	add	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b0f      	cmp	r3, #15
 80077d4:	d916      	bls.n	8007804 <UART_SetConfig+0x2d4>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077dc:	d212      	bcs.n	8007804 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f023 030f 	bic.w	r3, r3, #15
 80077e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	89fb      	ldrh	r3, [r7, #14]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	89fa      	ldrh	r2, [r7, #14]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	e05d      	b.n	80078c0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	77bb      	strb	r3, [r7, #30]
 8007808:	e05a      	b.n	80078c0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800780a:	7ffb      	ldrb	r3, [r7, #31]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d836      	bhi.n	800787e <UART_SetConfig+0x34e>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x2e8>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007845 	.word	0x08007845
 8007820:	08007869 	.word	0x08007869
 8007824:	0800787f 	.word	0x0800787f
 8007828:	0800786f 	.word	0x0800786f
 800782c:	0800787f 	.word	0x0800787f
 8007830:	0800787f 	.word	0x0800787f
 8007834:	0800787f 	.word	0x0800787f
 8007838:	08007877 	.word	0x08007877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fe f9d8 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8007840:	61b8      	str	r0, [r7, #24]
        break;
 8007842:	e021      	b.n	8007888 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007844:	f7fe f9f6 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8007848:	61b8      	str	r0, [r7, #24]
        break;
 800784a:	e01d      	b.n	8007888 <UART_SetConfig+0x358>
 800784c:	40013800 	.word	0x40013800
 8007850:	40021000 	.word	0x40021000
 8007854:	40004400 	.word	0x40004400
 8007858:	40004800 	.word	0x40004800
 800785c:	40004c00 	.word	0x40004c00
 8007860:	40005000 	.word	0x40005000
 8007864:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007868:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <UART_SetConfig+0x3a8>)
 800786a:	61bb      	str	r3, [r7, #24]
        break;
 800786c:	e00c      	b.n	8007888 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786e:	f7fe f949 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8007872:	61b8      	str	r0, [r7, #24]
        break;
 8007874:	e008      	b.n	8007888 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787a:	61bb      	str	r3, [r7, #24]
        break;
 800787c:	e004      	b.n	8007888 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	77bb      	strb	r3, [r7, #30]
        break;
 8007886:	bf00      	nop
    }

    if (pclk != 0U)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d018      	beq.n	80078c0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	085a      	lsrs	r2, r3, #1
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	441a      	add	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d908      	bls.n	80078bc <UART_SetConfig+0x38c>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d204      	bcs.n	80078bc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	e001      	b.n	80078c0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80078cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	007a1200 	.word	0x007a1200

080078dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079da:	d10a      	bne.n	80079f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a30:	f7fa fb2e 	bl	8002090 <HAL_GetTick>
 8007a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d10e      	bne.n	8007a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f82d 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e023      	b.n	8007aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d10e      	bne.n	8007a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f817 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e00d      	b.n	8007aaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b09c      	sub	sp, #112	; 0x70
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac2:	e0a5      	b.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	f000 80a1 	beq.w	8007c10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fa fadf 	bl	8002090 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d13e      	bne.n	8007b62 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af8:	667b      	str	r3, [r7, #100]	; 0x64
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e6      	bne.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e067      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d04f      	beq.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7e:	d147      	bne.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bdc:	623a      	str	r2, [r7, #32]
 8007bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e010      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	f43f af4a 	beq.w	8007ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3770      	adds	r7, #112	; 0x70
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b091      	sub	sp, #68	; 0x44
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6e:	d10e      	bne.n	8007c8e <UART_Start_Receive_IT+0x52>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d105      	bne.n	8007c84 <UART_Start_Receive_IT+0x48>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c82:	e01a      	b.n	8007cba <UART_Start_Receive_IT+0x7e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	22ff      	movs	r2, #255	; 0xff
 8007c88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c8c:	e015      	b.n	8007cba <UART_Start_Receive_IT+0x7e>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10d      	bne.n	8007cb2 <UART_Start_Receive_IT+0x76>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <UART_Start_Receive_IT+0x6c>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ca6:	e008      	b.n	8007cba <UART_Start_Receive_IT+0x7e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	227f      	movs	r2, #127	; 0x7f
 8007cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cb0:	e003      	b.n	8007cba <UART_Start_Receive_IT+0x7e>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2222      	movs	r2, #34	; 0x22
 8007cc6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d04:	d107      	bne.n	8007d16 <UART_Start_Receive_IT+0xda>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <UART_Start_Receive_IT+0x128>)
 8007d12:	665a      	str	r2, [r3, #100]	; 0x64
 8007d14:	e002      	b.n	8007d1c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <UART_Start_Receive_IT+0x12c>)
 8007d1a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	613b      	str	r3, [r7, #16]
   return(result);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	623b      	str	r3, [r7, #32]
 8007d44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	69f9      	ldr	r1, [r7, #28]
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3744      	adds	r7, #68	; 0x44
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	08008187 	.word	0x08008187
 8007d68:	0800802b 	.word	0x0800802b

08007d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b089      	sub	sp, #36	; 0x24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007dac:	bf00      	nop
 8007dae:	3724      	adds	r7, #36	; 0x24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b095      	sub	sp, #84	; 0x54
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dde:	643b      	str	r3, [r7, #64]	; 0x40
 8007de0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e6      	bne.n	8007dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	f023 0301 	bic.w	r3, r3, #1
 8007e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e5      	bne.n	8007df2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d118      	bne.n	8007e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6979      	ldr	r1, [r7, #20]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007e72:	bf00      	nop
 8007e74:	3754      	adds	r7, #84	; 0x54
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b090      	sub	sp, #64	; 0x40
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d037      	beq.n	8007f04 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e5      	bne.n	8007e9c <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	69b9      	ldr	r1, [r7, #24]
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	617b      	str	r3, [r7, #20]
   return(result);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f02:	e002      	b.n	8007f0a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007f04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f06:	f7ff fae9 	bl	80074dc <HAL_UART_TxCpltCallback>
}
 8007f0a:	bf00      	nop
 8007f0c:	3740      	adds	r7, #64	; 0x40
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fae5 	bl	80074f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f40:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d109      	bne.n	8007f6a <UART_DMAError+0x3c>
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b21      	cmp	r3, #33	; 0x21
 8007f5a:	d106      	bne.n	8007f6a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f7ff ff01 	bl	8007d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d109      	bne.n	8007f8c <UART_DMAError+0x5e>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b22      	cmp	r3, #34	; 0x22
 8007f7c:	d106      	bne.n	8007f8c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f7ff ff16 	bl	8007db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f92:	f043 0210 	orr.w	r2, r3, #16
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	6978      	ldr	r0, [r7, #20]
 8007f9e:	f7ff fab1 	bl	8007504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7ff fa9b 	bl	8007504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b088      	sub	sp, #32
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6979      	ldr	r1, [r7, #20]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	613b      	str	r3, [r7, #16]
   return(result);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e6      	bne.n	8007fde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fa5d 	bl	80074dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008022:	bf00      	nop
 8008024:	3720      	adds	r7, #32
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b096      	sub	sp, #88	; 0x58
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008038:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008040:	2b22      	cmp	r3, #34	; 0x22
 8008042:	f040 8094 	bne.w	800816e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800804c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008050:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008054:	b2d9      	uxtb	r1, r3
 8008056:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800805a:	b2da      	uxtb	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	400a      	ands	r2, r1
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	b29a      	uxth	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d177      	bne.n	800817e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080a2:	653b      	str	r3, [r7, #80]	; 0x50
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	623b      	str	r3, [r7, #32]
   return(result);
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3308      	adds	r3, #8
 80080de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080e0:	633a      	str	r2, [r7, #48]	; 0x30
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008104:	2b01      	cmp	r3, #1
 8008106:	d12e      	bne.n	8008166 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	60fb      	str	r3, [r7, #12]
   return(result);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0310 	bic.w	r3, r3, #16
 8008122:	64bb      	str	r3, [r7, #72]	; 0x48
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	69b9      	ldr	r1, [r7, #24]
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	617b      	str	r3, [r7, #20]
   return(result);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e6      	bne.n	800810e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b10      	cmp	r3, #16
 800814c:	d103      	bne.n	8008156 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2210      	movs	r2, #16
 8008154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff f9da 	bl	8007518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008164:	e00b      	b.n	800817e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7f9 f8a8 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 800816c:	e007      	b.n	800817e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0208 	orr.w	r2, r2, #8
 800817c:	619a      	str	r2, [r3, #24]
}
 800817e:	bf00      	nop
 8008180:	3758      	adds	r7, #88	; 0x58
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b096      	sub	sp, #88	; 0x58
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008194:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819c:	2b22      	cmp	r3, #34	; 0x22
 800819e:	f040 8094 	bne.w	80082ca <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80081b2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80081b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081ba:	4013      	ands	r3, r2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d177      	bne.n	80082da <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008208:	643b      	str	r3, [r7, #64]	; 0x40
 800820a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800820e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e6      	bne.n	80081ea <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3308      	adds	r3, #8
 8008222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	61fb      	str	r3, [r7, #28]
   return(result);
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f023 0301 	bic.w	r3, r3, #1
 8008232:	64bb      	str	r3, [r7, #72]	; 0x48
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3308      	adds	r3, #8
 800823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e5      	bne.n	800821c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008260:	2b01      	cmp	r3, #1
 8008262:	d12e      	bne.n	80082c2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	60bb      	str	r3, [r7, #8]
   return(result);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0310 	bic.w	r3, r3, #16
 800827e:	647b      	str	r3, [r7, #68]	; 0x44
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6979      	ldr	r1, [r7, #20]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	613b      	str	r3, [r7, #16]
   return(result);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d103      	bne.n	80082b2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2210      	movs	r2, #16
 80082b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff f92c 	bl	8007518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c0:	e00b      	b.n	80082da <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f8 fffa 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 80082c8:	e007      	b.n	80082da <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699a      	ldr	r2, [r3, #24]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0208 	orr.w	r2, r2, #8
 80082d8:	619a      	str	r2, [r3, #24]
}
 80082da:	bf00      	nop
 80082dc:	3758      	adds	r7, #88	; 0x58
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <__errno>:
 80082f8:	4b01      	ldr	r3, [pc, #4]	; (8008300 <__errno+0x8>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2000000c 	.word	0x2000000c

08008304 <__libc_init_array>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4d0d      	ldr	r5, [pc, #52]	; (800833c <__libc_init_array+0x38>)
 8008308:	4c0d      	ldr	r4, [pc, #52]	; (8008340 <__libc_init_array+0x3c>)
 800830a:	1b64      	subs	r4, r4, r5
 800830c:	10a4      	asrs	r4, r4, #2
 800830e:	2600      	movs	r6, #0
 8008310:	42a6      	cmp	r6, r4
 8008312:	d109      	bne.n	8008328 <__libc_init_array+0x24>
 8008314:	4d0b      	ldr	r5, [pc, #44]	; (8008344 <__libc_init_array+0x40>)
 8008316:	4c0c      	ldr	r4, [pc, #48]	; (8008348 <__libc_init_array+0x44>)
 8008318:	f004 fd1c 	bl	800cd54 <_init>
 800831c:	1b64      	subs	r4, r4, r5
 800831e:	10a4      	asrs	r4, r4, #2
 8008320:	2600      	movs	r6, #0
 8008322:	42a6      	cmp	r6, r4
 8008324:	d105      	bne.n	8008332 <__libc_init_array+0x2e>
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	f855 3b04 	ldr.w	r3, [r5], #4
 800832c:	4798      	blx	r3
 800832e:	3601      	adds	r6, #1
 8008330:	e7ee      	b.n	8008310 <__libc_init_array+0xc>
 8008332:	f855 3b04 	ldr.w	r3, [r5], #4
 8008336:	4798      	blx	r3
 8008338:	3601      	adds	r6, #1
 800833a:	e7f2      	b.n	8008322 <__libc_init_array+0x1e>
 800833c:	0800d2cc 	.word	0x0800d2cc
 8008340:	0800d2cc 	.word	0x0800d2cc
 8008344:	0800d2cc 	.word	0x0800d2cc
 8008348:	0800d2d0 	.word	0x0800d2d0

0800834c <memset>:
 800834c:	4402      	add	r2, r0
 800834e:	4603      	mov	r3, r0
 8008350:	4293      	cmp	r3, r2
 8008352:	d100      	bne.n	8008356 <memset+0xa>
 8008354:	4770      	bx	lr
 8008356:	f803 1b01 	strb.w	r1, [r3], #1
 800835a:	e7f9      	b.n	8008350 <memset+0x4>

0800835c <__cvt>:
 800835c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	ec55 4b10 	vmov	r4, r5, d0
 8008364:	2d00      	cmp	r5, #0
 8008366:	460e      	mov	r6, r1
 8008368:	4619      	mov	r1, r3
 800836a:	462b      	mov	r3, r5
 800836c:	bfbb      	ittet	lt
 800836e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008372:	461d      	movlt	r5, r3
 8008374:	2300      	movge	r3, #0
 8008376:	232d      	movlt	r3, #45	; 0x2d
 8008378:	700b      	strb	r3, [r1, #0]
 800837a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800837c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008380:	4691      	mov	r9, r2
 8008382:	f023 0820 	bic.w	r8, r3, #32
 8008386:	bfbc      	itt	lt
 8008388:	4622      	movlt	r2, r4
 800838a:	4614      	movlt	r4, r2
 800838c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008390:	d005      	beq.n	800839e <__cvt+0x42>
 8008392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008396:	d100      	bne.n	800839a <__cvt+0x3e>
 8008398:	3601      	adds	r6, #1
 800839a:	2102      	movs	r1, #2
 800839c:	e000      	b.n	80083a0 <__cvt+0x44>
 800839e:	2103      	movs	r1, #3
 80083a0:	ab03      	add	r3, sp, #12
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	ab02      	add	r3, sp, #8
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	ec45 4b10 	vmov	d0, r4, r5
 80083ac:	4653      	mov	r3, sl
 80083ae:	4632      	mov	r2, r6
 80083b0:	f001 fefa 	bl	800a1a8 <_dtoa_r>
 80083b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083b8:	4607      	mov	r7, r0
 80083ba:	d102      	bne.n	80083c2 <__cvt+0x66>
 80083bc:	f019 0f01 	tst.w	r9, #1
 80083c0:	d022      	beq.n	8008408 <__cvt+0xac>
 80083c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083c6:	eb07 0906 	add.w	r9, r7, r6
 80083ca:	d110      	bne.n	80083ee <__cvt+0x92>
 80083cc:	783b      	ldrb	r3, [r7, #0]
 80083ce:	2b30      	cmp	r3, #48	; 0x30
 80083d0:	d10a      	bne.n	80083e8 <__cvt+0x8c>
 80083d2:	2200      	movs	r2, #0
 80083d4:	2300      	movs	r3, #0
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80083de:	b918      	cbnz	r0, 80083e8 <__cvt+0x8c>
 80083e0:	f1c6 0601 	rsb	r6, r6, #1
 80083e4:	f8ca 6000 	str.w	r6, [sl]
 80083e8:	f8da 3000 	ldr.w	r3, [sl]
 80083ec:	4499      	add	r9, r3
 80083ee:	2200      	movs	r2, #0
 80083f0:	2300      	movs	r3, #0
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f8 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80083fa:	b108      	cbz	r0, 8008400 <__cvt+0xa4>
 80083fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008400:	2230      	movs	r2, #48	; 0x30
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	454b      	cmp	r3, r9
 8008406:	d307      	bcc.n	8008418 <__cvt+0xbc>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800840c:	1bdb      	subs	r3, r3, r7
 800840e:	4638      	mov	r0, r7
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	b004      	add	sp, #16
 8008414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008418:	1c59      	adds	r1, r3, #1
 800841a:	9103      	str	r1, [sp, #12]
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	e7f0      	b.n	8008402 <__cvt+0xa6>

08008420 <__exponent>:
 8008420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008422:	4603      	mov	r3, r0
 8008424:	2900      	cmp	r1, #0
 8008426:	bfb8      	it	lt
 8008428:	4249      	neglt	r1, r1
 800842a:	f803 2b02 	strb.w	r2, [r3], #2
 800842e:	bfb4      	ite	lt
 8008430:	222d      	movlt	r2, #45	; 0x2d
 8008432:	222b      	movge	r2, #43	; 0x2b
 8008434:	2909      	cmp	r1, #9
 8008436:	7042      	strb	r2, [r0, #1]
 8008438:	dd2a      	ble.n	8008490 <__exponent+0x70>
 800843a:	f10d 0407 	add.w	r4, sp, #7
 800843e:	46a4      	mov	ip, r4
 8008440:	270a      	movs	r7, #10
 8008442:	46a6      	mov	lr, r4
 8008444:	460a      	mov	r2, r1
 8008446:	fb91 f6f7 	sdiv	r6, r1, r7
 800844a:	fb07 1516 	mls	r5, r7, r6, r1
 800844e:	3530      	adds	r5, #48	; 0x30
 8008450:	2a63      	cmp	r2, #99	; 0x63
 8008452:	f104 34ff 	add.w	r4, r4, #4294967295
 8008456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800845a:	4631      	mov	r1, r6
 800845c:	dcf1      	bgt.n	8008442 <__exponent+0x22>
 800845e:	3130      	adds	r1, #48	; 0x30
 8008460:	f1ae 0502 	sub.w	r5, lr, #2
 8008464:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008468:	1c44      	adds	r4, r0, #1
 800846a:	4629      	mov	r1, r5
 800846c:	4561      	cmp	r1, ip
 800846e:	d30a      	bcc.n	8008486 <__exponent+0x66>
 8008470:	f10d 0209 	add.w	r2, sp, #9
 8008474:	eba2 020e 	sub.w	r2, r2, lr
 8008478:	4565      	cmp	r5, ip
 800847a:	bf88      	it	hi
 800847c:	2200      	movhi	r2, #0
 800847e:	4413      	add	r3, r2
 8008480:	1a18      	subs	r0, r3, r0
 8008482:	b003      	add	sp, #12
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800848a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800848e:	e7ed      	b.n	800846c <__exponent+0x4c>
 8008490:	2330      	movs	r3, #48	; 0x30
 8008492:	3130      	adds	r1, #48	; 0x30
 8008494:	7083      	strb	r3, [r0, #2]
 8008496:	70c1      	strb	r1, [r0, #3]
 8008498:	1d03      	adds	r3, r0, #4
 800849a:	e7f1      	b.n	8008480 <__exponent+0x60>

0800849c <_printf_float>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	ed2d 8b02 	vpush	{d8}
 80084a4:	b08d      	sub	sp, #52	; 0x34
 80084a6:	460c      	mov	r4, r1
 80084a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084ac:	4616      	mov	r6, r2
 80084ae:	461f      	mov	r7, r3
 80084b0:	4605      	mov	r5, r0
 80084b2:	f003 f98d 	bl	800b7d0 <_localeconv_r>
 80084b6:	f8d0 a000 	ldr.w	sl, [r0]
 80084ba:	4650      	mov	r0, sl
 80084bc:	f7f7 fe88 	bl	80001d0 <strlen>
 80084c0:	2300      	movs	r3, #0
 80084c2:	930a      	str	r3, [sp, #40]	; 0x28
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	9305      	str	r3, [sp, #20]
 80084c8:	f8d8 3000 	ldr.w	r3, [r8]
 80084cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80084d0:	3307      	adds	r3, #7
 80084d2:	f023 0307 	bic.w	r3, r3, #7
 80084d6:	f103 0208 	add.w	r2, r3, #8
 80084da:	f8c8 2000 	str.w	r2, [r8]
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80084ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ee:	9307      	str	r3, [sp, #28]
 80084f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80084f4:	ee08 0a10 	vmov	s16, r0
 80084f8:	4b9f      	ldr	r3, [pc, #636]	; (8008778 <_printf_float+0x2dc>)
 80084fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	f7f8 fb13 	bl	8000b2c <__aeabi_dcmpun>
 8008506:	bb88      	cbnz	r0, 800856c <_printf_float+0xd0>
 8008508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800850c:	4b9a      	ldr	r3, [pc, #616]	; (8008778 <_printf_float+0x2dc>)
 800850e:	f04f 32ff 	mov.w	r2, #4294967295
 8008512:	f7f8 faed 	bl	8000af0 <__aeabi_dcmple>
 8008516:	bb48      	cbnz	r0, 800856c <_printf_float+0xd0>
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f8 fadc 	bl	8000adc <__aeabi_dcmplt>
 8008524:	b110      	cbz	r0, 800852c <_printf_float+0x90>
 8008526:	232d      	movs	r3, #45	; 0x2d
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800852c:	4b93      	ldr	r3, [pc, #588]	; (800877c <_printf_float+0x2e0>)
 800852e:	4894      	ldr	r0, [pc, #592]	; (8008780 <_printf_float+0x2e4>)
 8008530:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008534:	bf94      	ite	ls
 8008536:	4698      	movls	r8, r3
 8008538:	4680      	movhi	r8, r0
 800853a:	2303      	movs	r3, #3
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	9b05      	ldr	r3, [sp, #20]
 8008540:	f023 0204 	bic.w	r2, r3, #4
 8008544:	6022      	str	r2, [r4, #0]
 8008546:	f04f 0900 	mov.w	r9, #0
 800854a:	9700      	str	r7, [sp, #0]
 800854c:	4633      	mov	r3, r6
 800854e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 f9d8 	bl	8008908 <_printf_common>
 8008558:	3001      	adds	r0, #1
 800855a:	f040 8090 	bne.w	800867e <_printf_float+0x1e2>
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	b00d      	add	sp, #52	; 0x34
 8008564:	ecbd 8b02 	vpop	{d8}
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 fada 	bl	8000b2c <__aeabi_dcmpun>
 8008578:	b140      	cbz	r0, 800858c <_printf_float+0xf0>
 800857a:	464b      	mov	r3, r9
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfbc      	itt	lt
 8008580:	232d      	movlt	r3, #45	; 0x2d
 8008582:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008586:	487f      	ldr	r0, [pc, #508]	; (8008784 <_printf_float+0x2e8>)
 8008588:	4b7f      	ldr	r3, [pc, #508]	; (8008788 <_printf_float+0x2ec>)
 800858a:	e7d1      	b.n	8008530 <_printf_float+0x94>
 800858c:	6863      	ldr	r3, [r4, #4]
 800858e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008592:	9206      	str	r2, [sp, #24]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	d13f      	bne.n	8008618 <_printf_float+0x17c>
 8008598:	2306      	movs	r3, #6
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	6861      	ldr	r1, [r4, #4]
 80085a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085a4:	2300      	movs	r3, #0
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	ab0a      	add	r3, sp, #40	; 0x28
 80085aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085ae:	ab09      	add	r3, sp, #36	; 0x24
 80085b0:	ec49 8b10 	vmov	d0, r8, r9
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	6022      	str	r2, [r4, #0]
 80085b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085bc:	4628      	mov	r0, r5
 80085be:	f7ff fecd 	bl	800835c <__cvt>
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085c6:	2b47      	cmp	r3, #71	; 0x47
 80085c8:	4680      	mov	r8, r0
 80085ca:	d108      	bne.n	80085de <_printf_float+0x142>
 80085cc:	1cc8      	adds	r0, r1, #3
 80085ce:	db02      	blt.n	80085d6 <_printf_float+0x13a>
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	4299      	cmp	r1, r3
 80085d4:	dd41      	ble.n	800865a <_printf_float+0x1be>
 80085d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80085da:	fa5f fb8b 	uxtb.w	fp, fp
 80085de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085e2:	d820      	bhi.n	8008626 <_printf_float+0x18a>
 80085e4:	3901      	subs	r1, #1
 80085e6:	465a      	mov	r2, fp
 80085e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085ec:	9109      	str	r1, [sp, #36]	; 0x24
 80085ee:	f7ff ff17 	bl	8008420 <__exponent>
 80085f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085f4:	1813      	adds	r3, r2, r0
 80085f6:	2a01      	cmp	r2, #1
 80085f8:	4681      	mov	r9, r0
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	dc02      	bgt.n	8008604 <_printf_float+0x168>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	07d2      	lsls	r2, r2, #31
 8008602:	d501      	bpl.n	8008608 <_printf_float+0x16c>
 8008604:	3301      	adds	r3, #1
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800860c:	2b00      	cmp	r3, #0
 800860e:	d09c      	beq.n	800854a <_printf_float+0xae>
 8008610:	232d      	movs	r3, #45	; 0x2d
 8008612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008616:	e798      	b.n	800854a <_printf_float+0xae>
 8008618:	9a06      	ldr	r2, [sp, #24]
 800861a:	2a47      	cmp	r2, #71	; 0x47
 800861c:	d1be      	bne.n	800859c <_printf_float+0x100>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1bc      	bne.n	800859c <_printf_float+0x100>
 8008622:	2301      	movs	r3, #1
 8008624:	e7b9      	b.n	800859a <_printf_float+0xfe>
 8008626:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800862a:	d118      	bne.n	800865e <_printf_float+0x1c2>
 800862c:	2900      	cmp	r1, #0
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	dd0b      	ble.n	800864a <_printf_float+0x1ae>
 8008632:	6121      	str	r1, [r4, #16]
 8008634:	b913      	cbnz	r3, 800863c <_printf_float+0x1a0>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	07d0      	lsls	r0, r2, #31
 800863a:	d502      	bpl.n	8008642 <_printf_float+0x1a6>
 800863c:	3301      	adds	r3, #1
 800863e:	440b      	add	r3, r1
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	65a1      	str	r1, [r4, #88]	; 0x58
 8008644:	f04f 0900 	mov.w	r9, #0
 8008648:	e7de      	b.n	8008608 <_printf_float+0x16c>
 800864a:	b913      	cbnz	r3, 8008652 <_printf_float+0x1b6>
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	07d2      	lsls	r2, r2, #31
 8008650:	d501      	bpl.n	8008656 <_printf_float+0x1ba>
 8008652:	3302      	adds	r3, #2
 8008654:	e7f4      	b.n	8008640 <_printf_float+0x1a4>
 8008656:	2301      	movs	r3, #1
 8008658:	e7f2      	b.n	8008640 <_printf_float+0x1a4>
 800865a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	4299      	cmp	r1, r3
 8008662:	db05      	blt.n	8008670 <_printf_float+0x1d4>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	6121      	str	r1, [r4, #16]
 8008668:	07d8      	lsls	r0, r3, #31
 800866a:	d5ea      	bpl.n	8008642 <_printf_float+0x1a6>
 800866c:	1c4b      	adds	r3, r1, #1
 800866e:	e7e7      	b.n	8008640 <_printf_float+0x1a4>
 8008670:	2900      	cmp	r1, #0
 8008672:	bfd4      	ite	le
 8008674:	f1c1 0202 	rsble	r2, r1, #2
 8008678:	2201      	movgt	r2, #1
 800867a:	4413      	add	r3, r2
 800867c:	e7e0      	b.n	8008640 <_printf_float+0x1a4>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	055a      	lsls	r2, r3, #21
 8008682:	d407      	bmi.n	8008694 <_printf_float+0x1f8>
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	4642      	mov	r2, r8
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	d12c      	bne.n	80086ec <_printf_float+0x250>
 8008692:	e764      	b.n	800855e <_printf_float+0xc2>
 8008694:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008698:	f240 80e0 	bls.w	800885c <_printf_float+0x3c0>
 800869c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086a0:	2200      	movs	r2, #0
 80086a2:	2300      	movs	r3, #0
 80086a4:	f7f8 fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d034      	beq.n	8008716 <_printf_float+0x27a>
 80086ac:	4a37      	ldr	r2, [pc, #220]	; (800878c <_printf_float+0x2f0>)
 80086ae:	2301      	movs	r3, #1
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	f43f af51 	beq.w	800855e <_printf_float+0xc2>
 80086bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086c0:	429a      	cmp	r2, r3
 80086c2:	db02      	blt.n	80086ca <_printf_float+0x22e>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07d8      	lsls	r0, r3, #31
 80086c8:	d510      	bpl.n	80086ec <_printf_float+0x250>
 80086ca:	ee18 3a10 	vmov	r3, s16
 80086ce:	4652      	mov	r2, sl
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f af41 	beq.w	800855e <_printf_float+0xc2>
 80086dc:	f04f 0800 	mov.w	r8, #0
 80086e0:	f104 091a 	add.w	r9, r4, #26
 80086e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e6:	3b01      	subs	r3, #1
 80086e8:	4543      	cmp	r3, r8
 80086ea:	dc09      	bgt.n	8008700 <_printf_float+0x264>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	079b      	lsls	r3, r3, #30
 80086f0:	f100 8105 	bmi.w	80088fe <_printf_float+0x462>
 80086f4:	68e0      	ldr	r0, [r4, #12]
 80086f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086f8:	4298      	cmp	r0, r3
 80086fa:	bfb8      	it	lt
 80086fc:	4618      	movlt	r0, r3
 80086fe:	e730      	b.n	8008562 <_printf_float+0xc6>
 8008700:	2301      	movs	r3, #1
 8008702:	464a      	mov	r2, r9
 8008704:	4631      	mov	r1, r6
 8008706:	4628      	mov	r0, r5
 8008708:	47b8      	blx	r7
 800870a:	3001      	adds	r0, #1
 800870c:	f43f af27 	beq.w	800855e <_printf_float+0xc2>
 8008710:	f108 0801 	add.w	r8, r8, #1
 8008714:	e7e6      	b.n	80086e4 <_printf_float+0x248>
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc39      	bgt.n	8008790 <_printf_float+0x2f4>
 800871c:	4a1b      	ldr	r2, [pc, #108]	; (800878c <_printf_float+0x2f0>)
 800871e:	2301      	movs	r3, #1
 8008720:	4631      	mov	r1, r6
 8008722:	4628      	mov	r0, r5
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	f43f af19 	beq.w	800855e <_printf_float+0xc2>
 800872c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008730:	4313      	orrs	r3, r2
 8008732:	d102      	bne.n	800873a <_printf_float+0x29e>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	d5d8      	bpl.n	80086ec <_printf_float+0x250>
 800873a:	ee18 3a10 	vmov	r3, s16
 800873e:	4652      	mov	r2, sl
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af09 	beq.w	800855e <_printf_float+0xc2>
 800874c:	f04f 0900 	mov.w	r9, #0
 8008750:	f104 0a1a 	add.w	sl, r4, #26
 8008754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008756:	425b      	negs	r3, r3
 8008758:	454b      	cmp	r3, r9
 800875a:	dc01      	bgt.n	8008760 <_printf_float+0x2c4>
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	e792      	b.n	8008686 <_printf_float+0x1ea>
 8008760:	2301      	movs	r3, #1
 8008762:	4652      	mov	r2, sl
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	f43f aef7 	beq.w	800855e <_printf_float+0xc2>
 8008770:	f109 0901 	add.w	r9, r9, #1
 8008774:	e7ee      	b.n	8008754 <_printf_float+0x2b8>
 8008776:	bf00      	nop
 8008778:	7fefffff 	.word	0x7fefffff
 800877c:	0800ce20 	.word	0x0800ce20
 8008780:	0800ce24 	.word	0x0800ce24
 8008784:	0800ce2c 	.word	0x0800ce2c
 8008788:	0800ce28 	.word	0x0800ce28
 800878c:	0800ce30 	.word	0x0800ce30
 8008790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008794:	429a      	cmp	r2, r3
 8008796:	bfa8      	it	ge
 8008798:	461a      	movge	r2, r3
 800879a:	2a00      	cmp	r2, #0
 800879c:	4691      	mov	r9, r2
 800879e:	dc37      	bgt.n	8008810 <_printf_float+0x374>
 80087a0:	f04f 0b00 	mov.w	fp, #0
 80087a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087a8:	f104 021a 	add.w	r2, r4, #26
 80087ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087ae:	9305      	str	r3, [sp, #20]
 80087b0:	eba3 0309 	sub.w	r3, r3, r9
 80087b4:	455b      	cmp	r3, fp
 80087b6:	dc33      	bgt.n	8008820 <_printf_float+0x384>
 80087b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087bc:	429a      	cmp	r2, r3
 80087be:	db3b      	blt.n	8008838 <_printf_float+0x39c>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	07da      	lsls	r2, r3, #31
 80087c4:	d438      	bmi.n	8008838 <_printf_float+0x39c>
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	9a05      	ldr	r2, [sp, #20]
 80087ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087cc:	1a9a      	subs	r2, r3, r2
 80087ce:	eba3 0901 	sub.w	r9, r3, r1
 80087d2:	4591      	cmp	r9, r2
 80087d4:	bfa8      	it	ge
 80087d6:	4691      	movge	r9, r2
 80087d8:	f1b9 0f00 	cmp.w	r9, #0
 80087dc:	dc35      	bgt.n	800884a <_printf_float+0x3ae>
 80087de:	f04f 0800 	mov.w	r8, #0
 80087e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087e6:	f104 0a1a 	add.w	sl, r4, #26
 80087ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	eba3 0309 	sub.w	r3, r3, r9
 80087f4:	4543      	cmp	r3, r8
 80087f6:	f77f af79 	ble.w	80086ec <_printf_float+0x250>
 80087fa:	2301      	movs	r3, #1
 80087fc:	4652      	mov	r2, sl
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f aeaa 	beq.w	800855e <_printf_float+0xc2>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	e7ec      	b.n	80087ea <_printf_float+0x34e>
 8008810:	4613      	mov	r3, r2
 8008812:	4631      	mov	r1, r6
 8008814:	4642      	mov	r2, r8
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	d1c0      	bne.n	80087a0 <_printf_float+0x304>
 800881e:	e69e      	b.n	800855e <_printf_float+0xc2>
 8008820:	2301      	movs	r3, #1
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	47b8      	blx	r7
 800882a:	3001      	adds	r0, #1
 800882c:	f43f ae97 	beq.w	800855e <_printf_float+0xc2>
 8008830:	9a05      	ldr	r2, [sp, #20]
 8008832:	f10b 0b01 	add.w	fp, fp, #1
 8008836:	e7b9      	b.n	80087ac <_printf_float+0x310>
 8008838:	ee18 3a10 	vmov	r3, s16
 800883c:	4652      	mov	r2, sl
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	d1be      	bne.n	80087c6 <_printf_float+0x32a>
 8008848:	e689      	b.n	800855e <_printf_float+0xc2>
 800884a:	9a05      	ldr	r2, [sp, #20]
 800884c:	464b      	mov	r3, r9
 800884e:	4442      	add	r2, r8
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	d1c1      	bne.n	80087de <_printf_float+0x342>
 800885a:	e680      	b.n	800855e <_printf_float+0xc2>
 800885c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800885e:	2a01      	cmp	r2, #1
 8008860:	dc01      	bgt.n	8008866 <_printf_float+0x3ca>
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	d538      	bpl.n	80088d8 <_printf_float+0x43c>
 8008866:	2301      	movs	r3, #1
 8008868:	4642      	mov	r2, r8
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	f43f ae74 	beq.w	800855e <_printf_float+0xc2>
 8008876:	ee18 3a10 	vmov	r3, s16
 800887a:	4652      	mov	r2, sl
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f ae6b 	beq.w	800855e <_printf_float+0xc2>
 8008888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	f7f8 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008894:	b9d8      	cbnz	r0, 80088ce <_printf_float+0x432>
 8008896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008898:	f108 0201 	add.w	r2, r8, #1
 800889c:	3b01      	subs	r3, #1
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	d10e      	bne.n	80088c6 <_printf_float+0x42a>
 80088a8:	e659      	b.n	800855e <_printf_float+0xc2>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4652      	mov	r2, sl
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	f43f ae52 	beq.w	800855e <_printf_float+0xc2>
 80088ba:	f108 0801 	add.w	r8, r8, #1
 80088be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c0:	3b01      	subs	r3, #1
 80088c2:	4543      	cmp	r3, r8
 80088c4:	dcf1      	bgt.n	80088aa <_printf_float+0x40e>
 80088c6:	464b      	mov	r3, r9
 80088c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088cc:	e6dc      	b.n	8008688 <_printf_float+0x1ec>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	f104 0a1a 	add.w	sl, r4, #26
 80088d6:	e7f2      	b.n	80088be <_printf_float+0x422>
 80088d8:	2301      	movs	r3, #1
 80088da:	4642      	mov	r2, r8
 80088dc:	e7df      	b.n	800889e <_printf_float+0x402>
 80088de:	2301      	movs	r3, #1
 80088e0:	464a      	mov	r2, r9
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b8      	blx	r7
 80088e8:	3001      	adds	r0, #1
 80088ea:	f43f ae38 	beq.w	800855e <_printf_float+0xc2>
 80088ee:	f108 0801 	add.w	r8, r8, #1
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088f6:	1a5b      	subs	r3, r3, r1
 80088f8:	4543      	cmp	r3, r8
 80088fa:	dcf0      	bgt.n	80088de <_printf_float+0x442>
 80088fc:	e6fa      	b.n	80086f4 <_printf_float+0x258>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	f104 0919 	add.w	r9, r4, #25
 8008906:	e7f4      	b.n	80088f2 <_printf_float+0x456>

08008908 <_printf_common>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	4616      	mov	r6, r2
 800890e:	4699      	mov	r9, r3
 8008910:	688a      	ldr	r2, [r1, #8]
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008918:	4293      	cmp	r3, r2
 800891a:	bfb8      	it	lt
 800891c:	4613      	movlt	r3, r2
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008924:	4607      	mov	r7, r0
 8008926:	460c      	mov	r4, r1
 8008928:	b10a      	cbz	r2, 800892e <_printf_common+0x26>
 800892a:	3301      	adds	r3, #1
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	0699      	lsls	r1, r3, #26
 8008932:	bf42      	ittt	mi
 8008934:	6833      	ldrmi	r3, [r6, #0]
 8008936:	3302      	addmi	r3, #2
 8008938:	6033      	strmi	r3, [r6, #0]
 800893a:	6825      	ldr	r5, [r4, #0]
 800893c:	f015 0506 	ands.w	r5, r5, #6
 8008940:	d106      	bne.n	8008950 <_printf_common+0x48>
 8008942:	f104 0a19 	add.w	sl, r4, #25
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	6832      	ldr	r2, [r6, #0]
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	42ab      	cmp	r3, r5
 800894e:	dc26      	bgt.n	800899e <_printf_common+0x96>
 8008950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008954:	1e13      	subs	r3, r2, #0
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	bf18      	it	ne
 800895a:	2301      	movne	r3, #1
 800895c:	0692      	lsls	r2, r2, #26
 800895e:	d42b      	bmi.n	80089b8 <_printf_common+0xb0>
 8008960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008964:	4649      	mov	r1, r9
 8008966:	4638      	mov	r0, r7
 8008968:	47c0      	blx	r8
 800896a:	3001      	adds	r0, #1
 800896c:	d01e      	beq.n	80089ac <_printf_common+0xa4>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	68e5      	ldr	r5, [r4, #12]
 8008972:	6832      	ldr	r2, [r6, #0]
 8008974:	f003 0306 	and.w	r3, r3, #6
 8008978:	2b04      	cmp	r3, #4
 800897a:	bf08      	it	eq
 800897c:	1aad      	subeq	r5, r5, r2
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	6922      	ldr	r2, [r4, #16]
 8008982:	bf0c      	ite	eq
 8008984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008988:	2500      	movne	r5, #0
 800898a:	4293      	cmp	r3, r2
 800898c:	bfc4      	itt	gt
 800898e:	1a9b      	subgt	r3, r3, r2
 8008990:	18ed      	addgt	r5, r5, r3
 8008992:	2600      	movs	r6, #0
 8008994:	341a      	adds	r4, #26
 8008996:	42b5      	cmp	r5, r6
 8008998:	d11a      	bne.n	80089d0 <_printf_common+0xc8>
 800899a:	2000      	movs	r0, #0
 800899c:	e008      	b.n	80089b0 <_printf_common+0xa8>
 800899e:	2301      	movs	r3, #1
 80089a0:	4652      	mov	r2, sl
 80089a2:	4649      	mov	r1, r9
 80089a4:	4638      	mov	r0, r7
 80089a6:	47c0      	blx	r8
 80089a8:	3001      	adds	r0, #1
 80089aa:	d103      	bne.n	80089b4 <_printf_common+0xac>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	3501      	adds	r5, #1
 80089b6:	e7c6      	b.n	8008946 <_printf_common+0x3e>
 80089b8:	18e1      	adds	r1, r4, r3
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	2030      	movs	r0, #48	; 0x30
 80089be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089c2:	4422      	add	r2, r4
 80089c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089cc:	3302      	adds	r3, #2
 80089ce:	e7c7      	b.n	8008960 <_printf_common+0x58>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4622      	mov	r2, r4
 80089d4:	4649      	mov	r1, r9
 80089d6:	4638      	mov	r0, r7
 80089d8:	47c0      	blx	r8
 80089da:	3001      	adds	r0, #1
 80089dc:	d0e6      	beq.n	80089ac <_printf_common+0xa4>
 80089de:	3601      	adds	r6, #1
 80089e0:	e7d9      	b.n	8008996 <_printf_common+0x8e>
	...

080089e4 <_printf_i>:
 80089e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	7e0f      	ldrb	r7, [r1, #24]
 80089ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089ec:	2f78      	cmp	r7, #120	; 0x78
 80089ee:	4691      	mov	r9, r2
 80089f0:	4680      	mov	r8, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	469a      	mov	sl, r3
 80089f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089fa:	d807      	bhi.n	8008a0c <_printf_i+0x28>
 80089fc:	2f62      	cmp	r7, #98	; 0x62
 80089fe:	d80a      	bhi.n	8008a16 <_printf_i+0x32>
 8008a00:	2f00      	cmp	r7, #0
 8008a02:	f000 80d8 	beq.w	8008bb6 <_printf_i+0x1d2>
 8008a06:	2f58      	cmp	r7, #88	; 0x58
 8008a08:	f000 80a3 	beq.w	8008b52 <_printf_i+0x16e>
 8008a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a14:	e03a      	b.n	8008a8c <_printf_i+0xa8>
 8008a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a1a:	2b15      	cmp	r3, #21
 8008a1c:	d8f6      	bhi.n	8008a0c <_printf_i+0x28>
 8008a1e:	a101      	add	r1, pc, #4	; (adr r1, 8008a24 <_printf_i+0x40>)
 8008a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a24:	08008a7d 	.word	0x08008a7d
 8008a28:	08008a91 	.word	0x08008a91
 8008a2c:	08008a0d 	.word	0x08008a0d
 8008a30:	08008a0d 	.word	0x08008a0d
 8008a34:	08008a0d 	.word	0x08008a0d
 8008a38:	08008a0d 	.word	0x08008a0d
 8008a3c:	08008a91 	.word	0x08008a91
 8008a40:	08008a0d 	.word	0x08008a0d
 8008a44:	08008a0d 	.word	0x08008a0d
 8008a48:	08008a0d 	.word	0x08008a0d
 8008a4c:	08008a0d 	.word	0x08008a0d
 8008a50:	08008b9d 	.word	0x08008b9d
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008b7f 	.word	0x08008b7f
 8008a5c:	08008a0d 	.word	0x08008a0d
 8008a60:	08008a0d 	.word	0x08008a0d
 8008a64:	08008bbf 	.word	0x08008bbf
 8008a68:	08008a0d 	.word	0x08008a0d
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008a0d 	.word	0x08008a0d
 8008a74:	08008a0d 	.word	0x08008a0d
 8008a78:	08008b87 	.word	0x08008b87
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	1d1a      	adds	r2, r3, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	602a      	str	r2, [r5, #0]
 8008a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0a3      	b.n	8008bd8 <_printf_i+0x1f4>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	6829      	ldr	r1, [r5, #0]
 8008a94:	0606      	lsls	r6, r0, #24
 8008a96:	f101 0304 	add.w	r3, r1, #4
 8008a9a:	d50a      	bpl.n	8008ab2 <_printf_i+0xce>
 8008a9c:	680e      	ldr	r6, [r1, #0]
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	2e00      	cmp	r6, #0
 8008aa2:	da03      	bge.n	8008aac <_printf_i+0xc8>
 8008aa4:	232d      	movs	r3, #45	; 0x2d
 8008aa6:	4276      	negs	r6, r6
 8008aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aac:	485e      	ldr	r0, [pc, #376]	; (8008c28 <_printf_i+0x244>)
 8008aae:	230a      	movs	r3, #10
 8008ab0:	e019      	b.n	8008ae6 <_printf_i+0x102>
 8008ab2:	680e      	ldr	r6, [r1, #0]
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008aba:	bf18      	it	ne
 8008abc:	b236      	sxthne	r6, r6
 8008abe:	e7ef      	b.n	8008aa0 <_printf_i+0xbc>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	1d19      	adds	r1, r3, #4
 8008ac6:	6029      	str	r1, [r5, #0]
 8008ac8:	0601      	lsls	r1, r0, #24
 8008aca:	d501      	bpl.n	8008ad0 <_printf_i+0xec>
 8008acc:	681e      	ldr	r6, [r3, #0]
 8008ace:	e002      	b.n	8008ad6 <_printf_i+0xf2>
 8008ad0:	0646      	lsls	r6, r0, #25
 8008ad2:	d5fb      	bpl.n	8008acc <_printf_i+0xe8>
 8008ad4:	881e      	ldrh	r6, [r3, #0]
 8008ad6:	4854      	ldr	r0, [pc, #336]	; (8008c28 <_printf_i+0x244>)
 8008ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8008ada:	bf0c      	ite	eq
 8008adc:	2308      	moveq	r3, #8
 8008ade:	230a      	movne	r3, #10
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ae6:	6865      	ldr	r5, [r4, #4]
 8008ae8:	60a5      	str	r5, [r4, #8]
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	bfa2      	ittt	ge
 8008aee:	6821      	ldrge	r1, [r4, #0]
 8008af0:	f021 0104 	bicge.w	r1, r1, #4
 8008af4:	6021      	strge	r1, [r4, #0]
 8008af6:	b90e      	cbnz	r6, 8008afc <_printf_i+0x118>
 8008af8:	2d00      	cmp	r5, #0
 8008afa:	d04d      	beq.n	8008b98 <_printf_i+0x1b4>
 8008afc:	4615      	mov	r5, r2
 8008afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b02:	fb03 6711 	mls	r7, r3, r1, r6
 8008b06:	5dc7      	ldrb	r7, [r0, r7]
 8008b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b0c:	4637      	mov	r7, r6
 8008b0e:	42bb      	cmp	r3, r7
 8008b10:	460e      	mov	r6, r1
 8008b12:	d9f4      	bls.n	8008afe <_printf_i+0x11a>
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d10b      	bne.n	8008b30 <_printf_i+0x14c>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	07de      	lsls	r6, r3, #31
 8008b1c:	d508      	bpl.n	8008b30 <_printf_i+0x14c>
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	6861      	ldr	r1, [r4, #4]
 8008b22:	4299      	cmp	r1, r3
 8008b24:	bfde      	ittt	le
 8008b26:	2330      	movle	r3, #48	; 0x30
 8008b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b30:	1b52      	subs	r2, r2, r5
 8008b32:	6122      	str	r2, [r4, #16]
 8008b34:	f8cd a000 	str.w	sl, [sp]
 8008b38:	464b      	mov	r3, r9
 8008b3a:	aa03      	add	r2, sp, #12
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7ff fee2 	bl	8008908 <_printf_common>
 8008b44:	3001      	adds	r0, #1
 8008b46:	d14c      	bne.n	8008be2 <_printf_i+0x1fe>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	b004      	add	sp, #16
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b52:	4835      	ldr	r0, [pc, #212]	; (8008c28 <_printf_i+0x244>)
 8008b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b58:	6829      	ldr	r1, [r5, #0]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b60:	6029      	str	r1, [r5, #0]
 8008b62:	061d      	lsls	r5, r3, #24
 8008b64:	d514      	bpl.n	8008b90 <_printf_i+0x1ac>
 8008b66:	07df      	lsls	r7, r3, #31
 8008b68:	bf44      	itt	mi
 8008b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b6e:	6023      	strmi	r3, [r4, #0]
 8008b70:	b91e      	cbnz	r6, 8008b7a <_printf_i+0x196>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	f023 0320 	bic.w	r3, r3, #32
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	e7b0      	b.n	8008ae0 <_printf_i+0xfc>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f043 0320 	orr.w	r3, r3, #32
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	2378      	movs	r3, #120	; 0x78
 8008b88:	4828      	ldr	r0, [pc, #160]	; (8008c2c <_printf_i+0x248>)
 8008b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b8e:	e7e3      	b.n	8008b58 <_printf_i+0x174>
 8008b90:	0659      	lsls	r1, r3, #25
 8008b92:	bf48      	it	mi
 8008b94:	b2b6      	uxthmi	r6, r6
 8008b96:	e7e6      	b.n	8008b66 <_printf_i+0x182>
 8008b98:	4615      	mov	r5, r2
 8008b9a:	e7bb      	b.n	8008b14 <_printf_i+0x130>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	6826      	ldr	r6, [r4, #0]
 8008ba0:	6961      	ldr	r1, [r4, #20]
 8008ba2:	1d18      	adds	r0, r3, #4
 8008ba4:	6028      	str	r0, [r5, #0]
 8008ba6:	0635      	lsls	r5, r6, #24
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	d501      	bpl.n	8008bb0 <_printf_i+0x1cc>
 8008bac:	6019      	str	r1, [r3, #0]
 8008bae:	e002      	b.n	8008bb6 <_printf_i+0x1d2>
 8008bb0:	0670      	lsls	r0, r6, #25
 8008bb2:	d5fb      	bpl.n	8008bac <_printf_i+0x1c8>
 8008bb4:	8019      	strh	r1, [r3, #0]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6123      	str	r3, [r4, #16]
 8008bba:	4615      	mov	r5, r2
 8008bbc:	e7ba      	b.n	8008b34 <_printf_i+0x150>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	1d1a      	adds	r2, r3, #4
 8008bc2:	602a      	str	r2, [r5, #0]
 8008bc4:	681d      	ldr	r5, [r3, #0]
 8008bc6:	6862      	ldr	r2, [r4, #4]
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7f7 fb08 	bl	80001e0 <memchr>
 8008bd0:	b108      	cbz	r0, 8008bd6 <_printf_i+0x1f2>
 8008bd2:	1b40      	subs	r0, r0, r5
 8008bd4:	6060      	str	r0, [r4, #4]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be0:	e7a8      	b.n	8008b34 <_printf_i+0x150>
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	462a      	mov	r2, r5
 8008be6:	4649      	mov	r1, r9
 8008be8:	4640      	mov	r0, r8
 8008bea:	47d0      	blx	sl
 8008bec:	3001      	adds	r0, #1
 8008bee:	d0ab      	beq.n	8008b48 <_printf_i+0x164>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	079b      	lsls	r3, r3, #30
 8008bf4:	d413      	bmi.n	8008c1e <_printf_i+0x23a>
 8008bf6:	68e0      	ldr	r0, [r4, #12]
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	bfb8      	it	lt
 8008bfe:	4618      	movlt	r0, r3
 8008c00:	e7a4      	b.n	8008b4c <_printf_i+0x168>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4632      	mov	r2, r6
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	47d0      	blx	sl
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d09b      	beq.n	8008b48 <_printf_i+0x164>
 8008c10:	3501      	adds	r5, #1
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	9903      	ldr	r1, [sp, #12]
 8008c16:	1a5b      	subs	r3, r3, r1
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	dcf2      	bgt.n	8008c02 <_printf_i+0x21e>
 8008c1c:	e7eb      	b.n	8008bf6 <_printf_i+0x212>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	f104 0619 	add.w	r6, r4, #25
 8008c24:	e7f5      	b.n	8008c12 <_printf_i+0x22e>
 8008c26:	bf00      	nop
 8008c28:	0800ce32 	.word	0x0800ce32
 8008c2c:	0800ce43 	.word	0x0800ce43

08008c30 <_scanf_float>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	b087      	sub	sp, #28
 8008c36:	4617      	mov	r7, r2
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	688b      	ldr	r3, [r1, #8]
 8008c3c:	1e5a      	subs	r2, r3, #1
 8008c3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c42:	bf83      	ittte	hi
 8008c44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c48:	195b      	addhi	r3, r3, r5
 8008c4a:	9302      	strhi	r3, [sp, #8]
 8008c4c:	2300      	movls	r3, #0
 8008c4e:	bf86      	itte	hi
 8008c50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c54:	608b      	strhi	r3, [r1, #8]
 8008c56:	9302      	strls	r3, [sp, #8]
 8008c58:	680b      	ldr	r3, [r1, #0]
 8008c5a:	468b      	mov	fp, r1
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c62:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	465e      	mov	r6, fp
 8008c70:	46aa      	mov	sl, r5
 8008c72:	46a9      	mov	r9, r5
 8008c74:	9501      	str	r5, [sp, #4]
 8008c76:	68a2      	ldr	r2, [r4, #8]
 8008c78:	b152      	cbz	r2, 8008c90 <_scanf_float+0x60>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b4e      	cmp	r3, #78	; 0x4e
 8008c80:	d864      	bhi.n	8008d4c <_scanf_float+0x11c>
 8008c82:	2b40      	cmp	r3, #64	; 0x40
 8008c84:	d83c      	bhi.n	8008d00 <_scanf_float+0xd0>
 8008c86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c8a:	b2c8      	uxtb	r0, r1
 8008c8c:	280e      	cmp	r0, #14
 8008c8e:	d93a      	bls.n	8008d06 <_scanf_float+0xd6>
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	d003      	beq.n	8008c9e <_scanf_float+0x6e>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ca2:	f1ba 0f01 	cmp.w	sl, #1
 8008ca6:	f200 8113 	bhi.w	8008ed0 <_scanf_float+0x2a0>
 8008caa:	455e      	cmp	r6, fp
 8008cac:	f200 8105 	bhi.w	8008eba <_scanf_float+0x28a>
 8008cb0:	2501      	movs	r5, #1
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	b007      	add	sp, #28
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008cbe:	2a0d      	cmp	r2, #13
 8008cc0:	d8e6      	bhi.n	8008c90 <_scanf_float+0x60>
 8008cc2:	a101      	add	r1, pc, #4	; (adr r1, 8008cc8 <_scanf_float+0x98>)
 8008cc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cc8:	08008e07 	.word	0x08008e07
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008c91 	.word	0x08008c91
 8008cd8:	08008e67 	.word	0x08008e67
 8008cdc:	08008e3f 	.word	0x08008e3f
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e15 	.word	0x08008e15
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008c91 	.word	0x08008c91
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008dcd 	.word	0x08008dcd
 8008d00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d04:	e7db      	b.n	8008cbe <_scanf_float+0x8e>
 8008d06:	290e      	cmp	r1, #14
 8008d08:	d8c2      	bhi.n	8008c90 <_scanf_float+0x60>
 8008d0a:	a001      	add	r0, pc, #4	; (adr r0, 8008d10 <_scanf_float+0xe0>)
 8008d0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d10:	08008dbf 	.word	0x08008dbf
 8008d14:	08008c91 	.word	0x08008c91
 8008d18:	08008dbf 	.word	0x08008dbf
 8008d1c:	08008e53 	.word	0x08008e53
 8008d20:	08008c91 	.word	0x08008c91
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008da9 	.word	0x08008da9
 8008d2c:	08008da9 	.word	0x08008da9
 8008d30:	08008da9 	.word	0x08008da9
 8008d34:	08008da9 	.word	0x08008da9
 8008d38:	08008da9 	.word	0x08008da9
 8008d3c:	08008da9 	.word	0x08008da9
 8008d40:	08008da9 	.word	0x08008da9
 8008d44:	08008da9 	.word	0x08008da9
 8008d48:	08008da9 	.word	0x08008da9
 8008d4c:	2b6e      	cmp	r3, #110	; 0x6e
 8008d4e:	d809      	bhi.n	8008d64 <_scanf_float+0x134>
 8008d50:	2b60      	cmp	r3, #96	; 0x60
 8008d52:	d8b2      	bhi.n	8008cba <_scanf_float+0x8a>
 8008d54:	2b54      	cmp	r3, #84	; 0x54
 8008d56:	d077      	beq.n	8008e48 <_scanf_float+0x218>
 8008d58:	2b59      	cmp	r3, #89	; 0x59
 8008d5a:	d199      	bne.n	8008c90 <_scanf_float+0x60>
 8008d5c:	2d07      	cmp	r5, #7
 8008d5e:	d197      	bne.n	8008c90 <_scanf_float+0x60>
 8008d60:	2508      	movs	r5, #8
 8008d62:	e029      	b.n	8008db8 <_scanf_float+0x188>
 8008d64:	2b74      	cmp	r3, #116	; 0x74
 8008d66:	d06f      	beq.n	8008e48 <_scanf_float+0x218>
 8008d68:	2b79      	cmp	r3, #121	; 0x79
 8008d6a:	e7f6      	b.n	8008d5a <_scanf_float+0x12a>
 8008d6c:	6821      	ldr	r1, [r4, #0]
 8008d6e:	05c8      	lsls	r0, r1, #23
 8008d70:	d51a      	bpl.n	8008da8 <_scanf_float+0x178>
 8008d72:	9b02      	ldr	r3, [sp, #8]
 8008d74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d78:	6021      	str	r1, [r4, #0]
 8008d7a:	f109 0901 	add.w	r9, r9, #1
 8008d7e:	b11b      	cbz	r3, 8008d88 <_scanf_float+0x158>
 8008d80:	3b01      	subs	r3, #1
 8008d82:	3201      	adds	r2, #1
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	60a2      	str	r2, [r4, #8]
 8008d88:	68a3      	ldr	r3, [r4, #8]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	60a3      	str	r3, [r4, #8]
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	3301      	adds	r3, #1
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	f340 8084 	ble.w	8008ea8 <_scanf_float+0x278>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	e766      	b.n	8008c76 <_scanf_float+0x46>
 8008da8:	eb1a 0f05 	cmn.w	sl, r5
 8008dac:	f47f af70 	bne.w	8008c90 <_scanf_float+0x60>
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	f806 3b01 	strb.w	r3, [r6], #1
 8008dbc:	e7e4      	b.n	8008d88 <_scanf_float+0x158>
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	0610      	lsls	r0, r2, #24
 8008dc2:	f57f af65 	bpl.w	8008c90 <_scanf_float+0x60>
 8008dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dca:	e7f4      	b.n	8008db6 <_scanf_float+0x186>
 8008dcc:	f1ba 0f00 	cmp.w	sl, #0
 8008dd0:	d10e      	bne.n	8008df0 <_scanf_float+0x1c0>
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	d10e      	bne.n	8008df6 <_scanf_float+0x1c6>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008de2:	d108      	bne.n	8008df6 <_scanf_float+0x1c6>
 8008de4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008de8:	6022      	str	r2, [r4, #0]
 8008dea:	f04f 0a01 	mov.w	sl, #1
 8008dee:	e7e3      	b.n	8008db8 <_scanf_float+0x188>
 8008df0:	f1ba 0f02 	cmp.w	sl, #2
 8008df4:	d055      	beq.n	8008ea2 <_scanf_float+0x272>
 8008df6:	2d01      	cmp	r5, #1
 8008df8:	d002      	beq.n	8008e00 <_scanf_float+0x1d0>
 8008dfa:	2d04      	cmp	r5, #4
 8008dfc:	f47f af48 	bne.w	8008c90 <_scanf_float+0x60>
 8008e00:	3501      	adds	r5, #1
 8008e02:	b2ed      	uxtb	r5, r5
 8008e04:	e7d8      	b.n	8008db8 <_scanf_float+0x188>
 8008e06:	f1ba 0f01 	cmp.w	sl, #1
 8008e0a:	f47f af41 	bne.w	8008c90 <_scanf_float+0x60>
 8008e0e:	f04f 0a02 	mov.w	sl, #2
 8008e12:	e7d1      	b.n	8008db8 <_scanf_float+0x188>
 8008e14:	b97d      	cbnz	r5, 8008e36 <_scanf_float+0x206>
 8008e16:	f1b9 0f00 	cmp.w	r9, #0
 8008e1a:	f47f af3c 	bne.w	8008c96 <_scanf_float+0x66>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e28:	f47f af39 	bne.w	8008c9e <_scanf_float+0x6e>
 8008e2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e30:	6022      	str	r2, [r4, #0]
 8008e32:	2501      	movs	r5, #1
 8008e34:	e7c0      	b.n	8008db8 <_scanf_float+0x188>
 8008e36:	2d03      	cmp	r5, #3
 8008e38:	d0e2      	beq.n	8008e00 <_scanf_float+0x1d0>
 8008e3a:	2d05      	cmp	r5, #5
 8008e3c:	e7de      	b.n	8008dfc <_scanf_float+0x1cc>
 8008e3e:	2d02      	cmp	r5, #2
 8008e40:	f47f af26 	bne.w	8008c90 <_scanf_float+0x60>
 8008e44:	2503      	movs	r5, #3
 8008e46:	e7b7      	b.n	8008db8 <_scanf_float+0x188>
 8008e48:	2d06      	cmp	r5, #6
 8008e4a:	f47f af21 	bne.w	8008c90 <_scanf_float+0x60>
 8008e4e:	2507      	movs	r5, #7
 8008e50:	e7b2      	b.n	8008db8 <_scanf_float+0x188>
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	0591      	lsls	r1, r2, #22
 8008e56:	f57f af1b 	bpl.w	8008c90 <_scanf_float+0x60>
 8008e5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e5e:	6022      	str	r2, [r4, #0]
 8008e60:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e64:	e7a8      	b.n	8008db8 <_scanf_float+0x188>
 8008e66:	6822      	ldr	r2, [r4, #0]
 8008e68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e70:	d006      	beq.n	8008e80 <_scanf_float+0x250>
 8008e72:	0550      	lsls	r0, r2, #21
 8008e74:	f57f af0c 	bpl.w	8008c90 <_scanf_float+0x60>
 8008e78:	f1b9 0f00 	cmp.w	r9, #0
 8008e7c:	f43f af0f 	beq.w	8008c9e <_scanf_float+0x6e>
 8008e80:	0591      	lsls	r1, r2, #22
 8008e82:	bf58      	it	pl
 8008e84:	9901      	ldrpl	r1, [sp, #4]
 8008e86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e8a:	bf58      	it	pl
 8008e8c:	eba9 0101 	subpl.w	r1, r9, r1
 8008e90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e94:	bf58      	it	pl
 8008e96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	f04f 0900 	mov.w	r9, #0
 8008ea0:	e78a      	b.n	8008db8 <_scanf_float+0x188>
 8008ea2:	f04f 0a03 	mov.w	sl, #3
 8008ea6:	e787      	b.n	8008db8 <_scanf_float+0x188>
 8008ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eac:	4639      	mov	r1, r7
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4798      	blx	r3
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f43f aedf 	beq.w	8008c76 <_scanf_float+0x46>
 8008eb8:	e6ea      	b.n	8008c90 <_scanf_float+0x60>
 8008eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ebe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ec2:	463a      	mov	r2, r7
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	4798      	blx	r3
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	e6ec      	b.n	8008caa <_scanf_float+0x7a>
 8008ed0:	1e6b      	subs	r3, r5, #1
 8008ed2:	2b06      	cmp	r3, #6
 8008ed4:	d825      	bhi.n	8008f22 <_scanf_float+0x2f2>
 8008ed6:	2d02      	cmp	r5, #2
 8008ed8:	d836      	bhi.n	8008f48 <_scanf_float+0x318>
 8008eda:	455e      	cmp	r6, fp
 8008edc:	f67f aee8 	bls.w	8008cb0 <_scanf_float+0x80>
 8008ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ee4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ee8:	463a      	mov	r2, r7
 8008eea:	4640      	mov	r0, r8
 8008eec:	4798      	blx	r3
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	e7f1      	b.n	8008eda <_scanf_float+0x2aa>
 8008ef6:	9802      	ldr	r0, [sp, #8]
 8008ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008efc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f00:	9002      	str	r0, [sp, #8]
 8008f02:	463a      	mov	r2, r7
 8008f04:	4640      	mov	r0, r8
 8008f06:	4798      	blx	r3
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f12:	fa5f fa8a 	uxtb.w	sl, sl
 8008f16:	f1ba 0f02 	cmp.w	sl, #2
 8008f1a:	d1ec      	bne.n	8008ef6 <_scanf_float+0x2c6>
 8008f1c:	3d03      	subs	r5, #3
 8008f1e:	b2ed      	uxtb	r5, r5
 8008f20:	1b76      	subs	r6, r6, r5
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	05da      	lsls	r2, r3, #23
 8008f26:	d52f      	bpl.n	8008f88 <_scanf_float+0x358>
 8008f28:	055b      	lsls	r3, r3, #21
 8008f2a:	d510      	bpl.n	8008f4e <_scanf_float+0x31e>
 8008f2c:	455e      	cmp	r6, fp
 8008f2e:	f67f aebf 	bls.w	8008cb0 <_scanf_float+0x80>
 8008f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4798      	blx	r3
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	e7f1      	b.n	8008f2c <_scanf_float+0x2fc>
 8008f48:	46aa      	mov	sl, r5
 8008f4a:	9602      	str	r6, [sp, #8]
 8008f4c:	e7df      	b.n	8008f0e <_scanf_float+0x2de>
 8008f4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	2965      	cmp	r1, #101	; 0x65
 8008f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	d00c      	beq.n	8008f7c <_scanf_float+0x34c>
 8008f62:	2945      	cmp	r1, #69	; 0x45
 8008f64:	d00a      	beq.n	8008f7c <_scanf_float+0x34c>
 8008f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	4798      	blx	r3
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	1eb5      	subs	r5, r6, #2
 8008f7a:	6123      	str	r3, [r4, #16]
 8008f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f80:	463a      	mov	r2, r7
 8008f82:	4640      	mov	r0, r8
 8008f84:	4798      	blx	r3
 8008f86:	462e      	mov	r6, r5
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	f015 0510 	ands.w	r5, r5, #16
 8008f8e:	d159      	bne.n	8009044 <_scanf_float+0x414>
 8008f90:	7035      	strb	r5, [r6, #0]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f9c:	d11b      	bne.n	8008fd6 <_scanf_float+0x3a6>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	454b      	cmp	r3, r9
 8008fa2:	eba3 0209 	sub.w	r2, r3, r9
 8008fa6:	d123      	bne.n	8008ff0 <_scanf_float+0x3c0>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4659      	mov	r1, fp
 8008fac:	4640      	mov	r0, r8
 8008fae:	f000 ff25 	bl	8009dfc <_strtod_r>
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	f012 0f02 	tst.w	r2, #2
 8008fba:	ec57 6b10 	vmov	r6, r7, d0
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	d021      	beq.n	8009006 <_scanf_float+0x3d6>
 8008fc2:	9903      	ldr	r1, [sp, #12]
 8008fc4:	1d1a      	adds	r2, r3, #4
 8008fc6:	600a      	str	r2, [r1, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	e9c3 6700 	strd	r6, r7, [r3]
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60e3      	str	r3, [r4, #12]
 8008fd4:	e66d      	b.n	8008cb2 <_scanf_float+0x82>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0e5      	beq.n	8008fa8 <_scanf_float+0x378>
 8008fdc:	9905      	ldr	r1, [sp, #20]
 8008fde:	230a      	movs	r3, #10
 8008fe0:	462a      	mov	r2, r5
 8008fe2:	3101      	adds	r1, #1
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	f000 ff91 	bl	8009f0c <_strtol_r>
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	9e05      	ldr	r6, [sp, #20]
 8008fee:	1ac2      	subs	r2, r0, r3
 8008ff0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ff4:	429e      	cmp	r6, r3
 8008ff6:	bf28      	it	cs
 8008ff8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008ffc:	4912      	ldr	r1, [pc, #72]	; (8009048 <_scanf_float+0x418>)
 8008ffe:	4630      	mov	r0, r6
 8009000:	f000 f8ba 	bl	8009178 <siprintf>
 8009004:	e7d0      	b.n	8008fa8 <_scanf_float+0x378>
 8009006:	9903      	ldr	r1, [sp, #12]
 8009008:	f012 0f04 	tst.w	r2, #4
 800900c:	f103 0204 	add.w	r2, r3, #4
 8009010:	600a      	str	r2, [r1, #0]
 8009012:	d1d9      	bne.n	8008fc8 <_scanf_float+0x398>
 8009014:	f8d3 8000 	ldr.w	r8, [r3]
 8009018:	ee10 2a10 	vmov	r2, s0
 800901c:	ee10 0a10 	vmov	r0, s0
 8009020:	463b      	mov	r3, r7
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 fd82 	bl	8000b2c <__aeabi_dcmpun>
 8009028:	b128      	cbz	r0, 8009036 <_scanf_float+0x406>
 800902a:	4808      	ldr	r0, [pc, #32]	; (800904c <_scanf_float+0x41c>)
 800902c:	f000 f89e 	bl	800916c <nanf>
 8009030:	ed88 0a00 	vstr	s0, [r8]
 8009034:	e7cb      	b.n	8008fce <_scanf_float+0x39e>
 8009036:	4630      	mov	r0, r6
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 fdd5 	bl	8000be8 <__aeabi_d2f>
 800903e:	f8c8 0000 	str.w	r0, [r8]
 8009042:	e7c4      	b.n	8008fce <_scanf_float+0x39e>
 8009044:	2500      	movs	r5, #0
 8009046:	e634      	b.n	8008cb2 <_scanf_float+0x82>
 8009048:	0800ce54 	.word	0x0800ce54
 800904c:	0800d2c8 	.word	0x0800d2c8

08009050 <iprintf>:
 8009050:	b40f      	push	{r0, r1, r2, r3}
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <iprintf+0x2c>)
 8009054:	b513      	push	{r0, r1, r4, lr}
 8009056:	681c      	ldr	r4, [r3, #0]
 8009058:	b124      	cbz	r4, 8009064 <iprintf+0x14>
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	b913      	cbnz	r3, 8009064 <iprintf+0x14>
 800905e:	4620      	mov	r0, r4
 8009060:	f001 ffaa 	bl	800afb8 <__sinit>
 8009064:	ab05      	add	r3, sp, #20
 8009066:	9a04      	ldr	r2, [sp, #16]
 8009068:	68a1      	ldr	r1, [r4, #8]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	4620      	mov	r0, r4
 800906e:	f003 fb81 	bl	800c774 <_vfiprintf_r>
 8009072:	b002      	add	sp, #8
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	b004      	add	sp, #16
 800907a:	4770      	bx	lr
 800907c:	2000000c 	.word	0x2000000c

08009080 <_puts_r>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	460e      	mov	r6, r1
 8009084:	4605      	mov	r5, r0
 8009086:	b118      	cbz	r0, 8009090 <_puts_r+0x10>
 8009088:	6983      	ldr	r3, [r0, #24]
 800908a:	b90b      	cbnz	r3, 8009090 <_puts_r+0x10>
 800908c:	f001 ff94 	bl	800afb8 <__sinit>
 8009090:	69ab      	ldr	r3, [r5, #24]
 8009092:	68ac      	ldr	r4, [r5, #8]
 8009094:	b913      	cbnz	r3, 800909c <_puts_r+0x1c>
 8009096:	4628      	mov	r0, r5
 8009098:	f001 ff8e 	bl	800afb8 <__sinit>
 800909c:	4b2c      	ldr	r3, [pc, #176]	; (8009150 <_puts_r+0xd0>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	d120      	bne.n	80090e4 <_puts_r+0x64>
 80090a2:	686c      	ldr	r4, [r5, #4]
 80090a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a6:	07db      	lsls	r3, r3, #31
 80090a8:	d405      	bmi.n	80090b6 <_puts_r+0x36>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	0598      	lsls	r0, r3, #22
 80090ae:	d402      	bmi.n	80090b6 <_puts_r+0x36>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f002 fb92 	bl	800b7da <__retarget_lock_acquire_recursive>
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0719      	lsls	r1, r3, #28
 80090ba:	d51d      	bpl.n	80090f8 <_puts_r+0x78>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b1db      	cbz	r3, 80090f8 <_puts_r+0x78>
 80090c0:	3e01      	subs	r6, #1
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090c8:	3b01      	subs	r3, #1
 80090ca:	60a3      	str	r3, [r4, #8]
 80090cc:	bb39      	cbnz	r1, 800911e <_puts_r+0x9e>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da38      	bge.n	8009144 <_puts_r+0xc4>
 80090d2:	4622      	mov	r2, r4
 80090d4:	210a      	movs	r1, #10
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 ff1a 	bl	8009f10 <__swbuf_r>
 80090dc:	3001      	adds	r0, #1
 80090de:	d011      	beq.n	8009104 <_puts_r+0x84>
 80090e0:	250a      	movs	r5, #10
 80090e2:	e011      	b.n	8009108 <_puts_r+0x88>
 80090e4:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <_puts_r+0xd4>)
 80090e6:	429c      	cmp	r4, r3
 80090e8:	d101      	bne.n	80090ee <_puts_r+0x6e>
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	e7da      	b.n	80090a4 <_puts_r+0x24>
 80090ee:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <_puts_r+0xd8>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	bf08      	it	eq
 80090f4:	68ec      	ldreq	r4, [r5, #12]
 80090f6:	e7d5      	b.n	80090a4 <_puts_r+0x24>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 ff5a 	bl	8009fb4 <__swsetup_r>
 8009100:	2800      	cmp	r0, #0
 8009102:	d0dd      	beq.n	80090c0 <_puts_r+0x40>
 8009104:	f04f 35ff 	mov.w	r5, #4294967295
 8009108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910a:	07da      	lsls	r2, r3, #31
 800910c:	d405      	bmi.n	800911a <_puts_r+0x9a>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	059b      	lsls	r3, r3, #22
 8009112:	d402      	bmi.n	800911a <_puts_r+0x9a>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f002 fb61 	bl	800b7dc <__retarget_lock_release_recursive>
 800911a:	4628      	mov	r0, r5
 800911c:	bd70      	pop	{r4, r5, r6, pc}
 800911e:	2b00      	cmp	r3, #0
 8009120:	da04      	bge.n	800912c <_puts_r+0xac>
 8009122:	69a2      	ldr	r2, [r4, #24]
 8009124:	429a      	cmp	r2, r3
 8009126:	dc06      	bgt.n	8009136 <_puts_r+0xb6>
 8009128:	290a      	cmp	r1, #10
 800912a:	d004      	beq.n	8009136 <_puts_r+0xb6>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	6022      	str	r2, [r4, #0]
 8009132:	7019      	strb	r1, [r3, #0]
 8009134:	e7c5      	b.n	80090c2 <_puts_r+0x42>
 8009136:	4622      	mov	r2, r4
 8009138:	4628      	mov	r0, r5
 800913a:	f000 fee9 	bl	8009f10 <__swbuf_r>
 800913e:	3001      	adds	r0, #1
 8009140:	d1bf      	bne.n	80090c2 <_puts_r+0x42>
 8009142:	e7df      	b.n	8009104 <_puts_r+0x84>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	250a      	movs	r5, #10
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	701d      	strb	r5, [r3, #0]
 800914e:	e7db      	b.n	8009108 <_puts_r+0x88>
 8009150:	0800d064 	.word	0x0800d064
 8009154:	0800d084 	.word	0x0800d084
 8009158:	0800d044 	.word	0x0800d044

0800915c <puts>:
 800915c:	4b02      	ldr	r3, [pc, #8]	; (8009168 <puts+0xc>)
 800915e:	4601      	mov	r1, r0
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f7ff bf8d 	b.w	8009080 <_puts_r>
 8009166:	bf00      	nop
 8009168:	2000000c 	.word	0x2000000c

0800916c <nanf>:
 800916c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009174 <nanf+0x8>
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	7fc00000 	.word	0x7fc00000

08009178 <siprintf>:
 8009178:	b40e      	push	{r1, r2, r3}
 800917a:	b500      	push	{lr}
 800917c:	b09c      	sub	sp, #112	; 0x70
 800917e:	ab1d      	add	r3, sp, #116	; 0x74
 8009180:	9002      	str	r0, [sp, #8]
 8009182:	9006      	str	r0, [sp, #24]
 8009184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009188:	4809      	ldr	r0, [pc, #36]	; (80091b0 <siprintf+0x38>)
 800918a:	9107      	str	r1, [sp, #28]
 800918c:	9104      	str	r1, [sp, #16]
 800918e:	4909      	ldr	r1, [pc, #36]	; (80091b4 <siprintf+0x3c>)
 8009190:	f853 2b04 	ldr.w	r2, [r3], #4
 8009194:	9105      	str	r1, [sp, #20]
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	a902      	add	r1, sp, #8
 800919c:	f003 f9c0 	bl	800c520 <_svfiprintf_r>
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	b01c      	add	sp, #112	; 0x70
 80091a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ac:	b003      	add	sp, #12
 80091ae:	4770      	bx	lr
 80091b0:	2000000c 	.word	0x2000000c
 80091b4:	ffff0208 	.word	0xffff0208

080091b8 <sulp>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	460d      	mov	r5, r1
 80091be:	ec45 4b10 	vmov	d0, r4, r5
 80091c2:	4616      	mov	r6, r2
 80091c4:	f002 ff0a 	bl	800bfdc <__ulp>
 80091c8:	ec51 0b10 	vmov	r0, r1, d0
 80091cc:	b17e      	cbz	r6, 80091ee <sulp+0x36>
 80091ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dd09      	ble.n	80091ee <sulp+0x36>
 80091da:	051b      	lsls	r3, r3, #20
 80091dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091e0:	2400      	movs	r4, #0
 80091e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091e6:	4622      	mov	r2, r4
 80091e8:	462b      	mov	r3, r5
 80091ea:	f7f7 fa05 	bl	80005f8 <__aeabi_dmul>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <_strtod_l>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ed2d 8b02 	vpush	{d8}
 80091f8:	b09d      	sub	sp, #116	; 0x74
 80091fa:	461f      	mov	r7, r3
 80091fc:	2300      	movs	r3, #0
 80091fe:	9318      	str	r3, [sp, #96]	; 0x60
 8009200:	4ba2      	ldr	r3, [pc, #648]	; (800948c <_strtod_l+0x29c>)
 8009202:	9213      	str	r2, [sp, #76]	; 0x4c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	4604      	mov	r4, r0
 800920a:	4618      	mov	r0, r3
 800920c:	4688      	mov	r8, r1
 800920e:	f7f6 ffdf 	bl	80001d0 <strlen>
 8009212:	f04f 0a00 	mov.w	sl, #0
 8009216:	4605      	mov	r5, r0
 8009218:	f04f 0b00 	mov.w	fp, #0
 800921c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	2a2b      	cmp	r2, #43	; 0x2b
 8009226:	d04e      	beq.n	80092c6 <_strtod_l+0xd6>
 8009228:	d83b      	bhi.n	80092a2 <_strtod_l+0xb2>
 800922a:	2a0d      	cmp	r2, #13
 800922c:	d834      	bhi.n	8009298 <_strtod_l+0xa8>
 800922e:	2a08      	cmp	r2, #8
 8009230:	d834      	bhi.n	800929c <_strtod_l+0xac>
 8009232:	2a00      	cmp	r2, #0
 8009234:	d03e      	beq.n	80092b4 <_strtod_l+0xc4>
 8009236:	2300      	movs	r3, #0
 8009238:	930a      	str	r3, [sp, #40]	; 0x28
 800923a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800923c:	7833      	ldrb	r3, [r6, #0]
 800923e:	2b30      	cmp	r3, #48	; 0x30
 8009240:	f040 80b0 	bne.w	80093a4 <_strtod_l+0x1b4>
 8009244:	7873      	ldrb	r3, [r6, #1]
 8009246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800924a:	2b58      	cmp	r3, #88	; 0x58
 800924c:	d168      	bne.n	8009320 <_strtod_l+0x130>
 800924e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	ab18      	add	r3, sp, #96	; 0x60
 8009254:	9702      	str	r7, [sp, #8]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4a8d      	ldr	r2, [pc, #564]	; (8009490 <_strtod_l+0x2a0>)
 800925a:	ab19      	add	r3, sp, #100	; 0x64
 800925c:	a917      	add	r1, sp, #92	; 0x5c
 800925e:	4620      	mov	r0, r4
 8009260:	f001 ffae 	bl	800b1c0 <__gethex>
 8009264:	f010 0707 	ands.w	r7, r0, #7
 8009268:	4605      	mov	r5, r0
 800926a:	d005      	beq.n	8009278 <_strtod_l+0x88>
 800926c:	2f06      	cmp	r7, #6
 800926e:	d12c      	bne.n	80092ca <_strtod_l+0xda>
 8009270:	3601      	adds	r6, #1
 8009272:	2300      	movs	r3, #0
 8009274:	9617      	str	r6, [sp, #92]	; 0x5c
 8009276:	930a      	str	r3, [sp, #40]	; 0x28
 8009278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 8590 	bne.w	8009da0 <_strtod_l+0xbb0>
 8009280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009282:	b1eb      	cbz	r3, 80092c0 <_strtod_l+0xd0>
 8009284:	4652      	mov	r2, sl
 8009286:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800928a:	ec43 2b10 	vmov	d0, r2, r3
 800928e:	b01d      	add	sp, #116	; 0x74
 8009290:	ecbd 8b02 	vpop	{d8}
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	2a20      	cmp	r2, #32
 800929a:	d1cc      	bne.n	8009236 <_strtod_l+0x46>
 800929c:	3301      	adds	r3, #1
 800929e:	9317      	str	r3, [sp, #92]	; 0x5c
 80092a0:	e7be      	b.n	8009220 <_strtod_l+0x30>
 80092a2:	2a2d      	cmp	r2, #45	; 0x2d
 80092a4:	d1c7      	bne.n	8009236 <_strtod_l+0x46>
 80092a6:	2201      	movs	r2, #1
 80092a8:	920a      	str	r2, [sp, #40]	; 0x28
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1c2      	bne.n	800923a <_strtod_l+0x4a>
 80092b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 856e 	bne.w	8009d9c <_strtod_l+0xbac>
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	e7e1      	b.n	800928a <_strtod_l+0x9a>
 80092c6:	2200      	movs	r2, #0
 80092c8:	e7ee      	b.n	80092a8 <_strtod_l+0xb8>
 80092ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092cc:	b13a      	cbz	r2, 80092de <_strtod_l+0xee>
 80092ce:	2135      	movs	r1, #53	; 0x35
 80092d0:	a81a      	add	r0, sp, #104	; 0x68
 80092d2:	f002 ff8e 	bl	800c1f2 <__copybits>
 80092d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092d8:	4620      	mov	r0, r4
 80092da:	f002 fb4d 	bl	800b978 <_Bfree>
 80092de:	3f01      	subs	r7, #1
 80092e0:	2f04      	cmp	r7, #4
 80092e2:	d806      	bhi.n	80092f2 <_strtod_l+0x102>
 80092e4:	e8df f007 	tbb	[pc, r7]
 80092e8:	1714030a 	.word	0x1714030a
 80092ec:	0a          	.byte	0x0a
 80092ed:	00          	.byte	0x00
 80092ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80092f2:	0728      	lsls	r0, r5, #28
 80092f4:	d5c0      	bpl.n	8009278 <_strtod_l+0x88>
 80092f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80092fa:	e7bd      	b.n	8009278 <_strtod_l+0x88>
 80092fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009306:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800930a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800930e:	e7f0      	b.n	80092f2 <_strtod_l+0x102>
 8009310:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009494 <_strtod_l+0x2a4>
 8009314:	e7ed      	b.n	80092f2 <_strtod_l+0x102>
 8009316:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800931a:	f04f 3aff 	mov.w	sl, #4294967295
 800931e:	e7e8      	b.n	80092f2 <_strtod_l+0x102>
 8009320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	9217      	str	r2, [sp, #92]	; 0x5c
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	d0f9      	beq.n	8009320 <_strtod_l+0x130>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0a3      	beq.n	8009278 <_strtod_l+0x88>
 8009330:	2301      	movs	r3, #1
 8009332:	f04f 0900 	mov.w	r9, #0
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009340:	464f      	mov	r7, r9
 8009342:	220a      	movs	r2, #10
 8009344:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009346:	7806      	ldrb	r6, [r0, #0]
 8009348:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800934c:	b2d9      	uxtb	r1, r3
 800934e:	2909      	cmp	r1, #9
 8009350:	d92a      	bls.n	80093a8 <_strtod_l+0x1b8>
 8009352:	9905      	ldr	r1, [sp, #20]
 8009354:	462a      	mov	r2, r5
 8009356:	f003 fb9a 	bl	800ca8e <strncmp>
 800935a:	b398      	cbz	r0, 80093c4 <_strtod_l+0x1d4>
 800935c:	2000      	movs	r0, #0
 800935e:	4632      	mov	r2, r6
 8009360:	463d      	mov	r5, r7
 8009362:	9005      	str	r0, [sp, #20]
 8009364:	4603      	mov	r3, r0
 8009366:	2a65      	cmp	r2, #101	; 0x65
 8009368:	d001      	beq.n	800936e <_strtod_l+0x17e>
 800936a:	2a45      	cmp	r2, #69	; 0x45
 800936c:	d118      	bne.n	80093a0 <_strtod_l+0x1b0>
 800936e:	b91d      	cbnz	r5, 8009378 <_strtod_l+0x188>
 8009370:	9a04      	ldr	r2, [sp, #16]
 8009372:	4302      	orrs	r2, r0
 8009374:	d09e      	beq.n	80092b4 <_strtod_l+0xc4>
 8009376:	2500      	movs	r5, #0
 8009378:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800937c:	f108 0201 	add.w	r2, r8, #1
 8009380:	9217      	str	r2, [sp, #92]	; 0x5c
 8009382:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009386:	2a2b      	cmp	r2, #43	; 0x2b
 8009388:	d075      	beq.n	8009476 <_strtod_l+0x286>
 800938a:	2a2d      	cmp	r2, #45	; 0x2d
 800938c:	d07b      	beq.n	8009486 <_strtod_l+0x296>
 800938e:	f04f 0c00 	mov.w	ip, #0
 8009392:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009396:	2909      	cmp	r1, #9
 8009398:	f240 8082 	bls.w	80094a0 <_strtod_l+0x2b0>
 800939c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093a0:	2600      	movs	r6, #0
 80093a2:	e09d      	b.n	80094e0 <_strtod_l+0x2f0>
 80093a4:	2300      	movs	r3, #0
 80093a6:	e7c4      	b.n	8009332 <_strtod_l+0x142>
 80093a8:	2f08      	cmp	r7, #8
 80093aa:	bfd8      	it	le
 80093ac:	9907      	ldrle	r1, [sp, #28]
 80093ae:	f100 0001 	add.w	r0, r0, #1
 80093b2:	bfda      	itte	le
 80093b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093b8:	9307      	strle	r3, [sp, #28]
 80093ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80093be:	3701      	adds	r7, #1
 80093c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80093c2:	e7bf      	b.n	8009344 <_strtod_l+0x154>
 80093c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093c6:	195a      	adds	r2, r3, r5
 80093c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ca:	5d5a      	ldrb	r2, [r3, r5]
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	d037      	beq.n	8009440 <_strtod_l+0x250>
 80093d0:	9005      	str	r0, [sp, #20]
 80093d2:	463d      	mov	r5, r7
 80093d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093d8:	2b09      	cmp	r3, #9
 80093da:	d912      	bls.n	8009402 <_strtod_l+0x212>
 80093dc:	2301      	movs	r3, #1
 80093de:	e7c2      	b.n	8009366 <_strtod_l+0x176>
 80093e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80093e6:	785a      	ldrb	r2, [r3, #1]
 80093e8:	3001      	adds	r0, #1
 80093ea:	2a30      	cmp	r2, #48	; 0x30
 80093ec:	d0f8      	beq.n	80093e0 <_strtod_l+0x1f0>
 80093ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	f200 84d9 	bhi.w	8009daa <_strtod_l+0xbba>
 80093f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093fa:	9005      	str	r0, [sp, #20]
 80093fc:	2000      	movs	r0, #0
 80093fe:	9308      	str	r3, [sp, #32]
 8009400:	4605      	mov	r5, r0
 8009402:	3a30      	subs	r2, #48	; 0x30
 8009404:	f100 0301 	add.w	r3, r0, #1
 8009408:	d014      	beq.n	8009434 <_strtod_l+0x244>
 800940a:	9905      	ldr	r1, [sp, #20]
 800940c:	4419      	add	r1, r3
 800940e:	9105      	str	r1, [sp, #20]
 8009410:	462b      	mov	r3, r5
 8009412:	eb00 0e05 	add.w	lr, r0, r5
 8009416:	210a      	movs	r1, #10
 8009418:	4573      	cmp	r3, lr
 800941a:	d113      	bne.n	8009444 <_strtod_l+0x254>
 800941c:	182b      	adds	r3, r5, r0
 800941e:	2b08      	cmp	r3, #8
 8009420:	f105 0501 	add.w	r5, r5, #1
 8009424:	4405      	add	r5, r0
 8009426:	dc1c      	bgt.n	8009462 <_strtod_l+0x272>
 8009428:	9907      	ldr	r1, [sp, #28]
 800942a:	230a      	movs	r3, #10
 800942c:	fb03 2301 	mla	r3, r3, r1, r2
 8009430:	9307      	str	r3, [sp, #28]
 8009432:	2300      	movs	r3, #0
 8009434:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009436:	1c51      	adds	r1, r2, #1
 8009438:	9117      	str	r1, [sp, #92]	; 0x5c
 800943a:	7852      	ldrb	r2, [r2, #1]
 800943c:	4618      	mov	r0, r3
 800943e:	e7c9      	b.n	80093d4 <_strtod_l+0x1e4>
 8009440:	4638      	mov	r0, r7
 8009442:	e7d2      	b.n	80093ea <_strtod_l+0x1fa>
 8009444:	2b08      	cmp	r3, #8
 8009446:	dc04      	bgt.n	8009452 <_strtod_l+0x262>
 8009448:	9e07      	ldr	r6, [sp, #28]
 800944a:	434e      	muls	r6, r1
 800944c:	9607      	str	r6, [sp, #28]
 800944e:	3301      	adds	r3, #1
 8009450:	e7e2      	b.n	8009418 <_strtod_l+0x228>
 8009452:	f103 0c01 	add.w	ip, r3, #1
 8009456:	f1bc 0f10 	cmp.w	ip, #16
 800945a:	bfd8      	it	le
 800945c:	fb01 f909 	mulle.w	r9, r1, r9
 8009460:	e7f5      	b.n	800944e <_strtod_l+0x25e>
 8009462:	2d10      	cmp	r5, #16
 8009464:	bfdc      	itt	le
 8009466:	230a      	movle	r3, #10
 8009468:	fb03 2909 	mlale	r9, r3, r9, r2
 800946c:	e7e1      	b.n	8009432 <_strtod_l+0x242>
 800946e:	2300      	movs	r3, #0
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	2301      	movs	r3, #1
 8009474:	e77c      	b.n	8009370 <_strtod_l+0x180>
 8009476:	f04f 0c00 	mov.w	ip, #0
 800947a:	f108 0202 	add.w	r2, r8, #2
 800947e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009480:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009484:	e785      	b.n	8009392 <_strtod_l+0x1a2>
 8009486:	f04f 0c01 	mov.w	ip, #1
 800948a:	e7f6      	b.n	800947a <_strtod_l+0x28a>
 800948c:	0800d10c 	.word	0x0800d10c
 8009490:	0800ce5c 	.word	0x0800ce5c
 8009494:	7ff00000 	.word	0x7ff00000
 8009498:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800949a:	1c51      	adds	r1, r2, #1
 800949c:	9117      	str	r1, [sp, #92]	; 0x5c
 800949e:	7852      	ldrb	r2, [r2, #1]
 80094a0:	2a30      	cmp	r2, #48	; 0x30
 80094a2:	d0f9      	beq.n	8009498 <_strtod_l+0x2a8>
 80094a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80094a8:	2908      	cmp	r1, #8
 80094aa:	f63f af79 	bhi.w	80093a0 <_strtod_l+0x1b0>
 80094ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80094b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094b4:	9206      	str	r2, [sp, #24]
 80094b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094b8:	1c51      	adds	r1, r2, #1
 80094ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80094bc:	7852      	ldrb	r2, [r2, #1]
 80094be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80094c2:	2e09      	cmp	r6, #9
 80094c4:	d937      	bls.n	8009536 <_strtod_l+0x346>
 80094c6:	9e06      	ldr	r6, [sp, #24]
 80094c8:	1b89      	subs	r1, r1, r6
 80094ca:	2908      	cmp	r1, #8
 80094cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80094d0:	dc02      	bgt.n	80094d8 <_strtod_l+0x2e8>
 80094d2:	4576      	cmp	r6, lr
 80094d4:	bfa8      	it	ge
 80094d6:	4676      	movge	r6, lr
 80094d8:	f1bc 0f00 	cmp.w	ip, #0
 80094dc:	d000      	beq.n	80094e0 <_strtod_l+0x2f0>
 80094de:	4276      	negs	r6, r6
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	d14d      	bne.n	8009580 <_strtod_l+0x390>
 80094e4:	9904      	ldr	r1, [sp, #16]
 80094e6:	4301      	orrs	r1, r0
 80094e8:	f47f aec6 	bne.w	8009278 <_strtod_l+0x88>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f47f aee1 	bne.w	80092b4 <_strtod_l+0xc4>
 80094f2:	2a69      	cmp	r2, #105	; 0x69
 80094f4:	d027      	beq.n	8009546 <_strtod_l+0x356>
 80094f6:	dc24      	bgt.n	8009542 <_strtod_l+0x352>
 80094f8:	2a49      	cmp	r2, #73	; 0x49
 80094fa:	d024      	beq.n	8009546 <_strtod_l+0x356>
 80094fc:	2a4e      	cmp	r2, #78	; 0x4e
 80094fe:	f47f aed9 	bne.w	80092b4 <_strtod_l+0xc4>
 8009502:	499f      	ldr	r1, [pc, #636]	; (8009780 <_strtod_l+0x590>)
 8009504:	a817      	add	r0, sp, #92	; 0x5c
 8009506:	f002 f8b3 	bl	800b670 <__match>
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f aed2 	beq.w	80092b4 <_strtod_l+0xc4>
 8009510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b28      	cmp	r3, #40	; 0x28
 8009516:	d12d      	bne.n	8009574 <_strtod_l+0x384>
 8009518:	499a      	ldr	r1, [pc, #616]	; (8009784 <_strtod_l+0x594>)
 800951a:	aa1a      	add	r2, sp, #104	; 0x68
 800951c:	a817      	add	r0, sp, #92	; 0x5c
 800951e:	f002 f8bb 	bl	800b698 <__hexnan>
 8009522:	2805      	cmp	r0, #5
 8009524:	d126      	bne.n	8009574 <_strtod_l+0x384>
 8009526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009528:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800952c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009530:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009534:	e6a0      	b.n	8009278 <_strtod_l+0x88>
 8009536:	210a      	movs	r1, #10
 8009538:	fb01 2e0e 	mla	lr, r1, lr, r2
 800953c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009540:	e7b9      	b.n	80094b6 <_strtod_l+0x2c6>
 8009542:	2a6e      	cmp	r2, #110	; 0x6e
 8009544:	e7db      	b.n	80094fe <_strtod_l+0x30e>
 8009546:	4990      	ldr	r1, [pc, #576]	; (8009788 <_strtod_l+0x598>)
 8009548:	a817      	add	r0, sp, #92	; 0x5c
 800954a:	f002 f891 	bl	800b670 <__match>
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f aeb0 	beq.w	80092b4 <_strtod_l+0xc4>
 8009554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009556:	498d      	ldr	r1, [pc, #564]	; (800978c <_strtod_l+0x59c>)
 8009558:	3b01      	subs	r3, #1
 800955a:	a817      	add	r0, sp, #92	; 0x5c
 800955c:	9317      	str	r3, [sp, #92]	; 0x5c
 800955e:	f002 f887 	bl	800b670 <__match>
 8009562:	b910      	cbnz	r0, 800956a <_strtod_l+0x37a>
 8009564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009566:	3301      	adds	r3, #1
 8009568:	9317      	str	r3, [sp, #92]	; 0x5c
 800956a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800979c <_strtod_l+0x5ac>
 800956e:	f04f 0a00 	mov.w	sl, #0
 8009572:	e681      	b.n	8009278 <_strtod_l+0x88>
 8009574:	4886      	ldr	r0, [pc, #536]	; (8009790 <_strtod_l+0x5a0>)
 8009576:	f003 fa2f 	bl	800c9d8 <nan>
 800957a:	ec5b ab10 	vmov	sl, fp, d0
 800957e:	e67b      	b.n	8009278 <_strtod_l+0x88>
 8009580:	9b05      	ldr	r3, [sp, #20]
 8009582:	9807      	ldr	r0, [sp, #28]
 8009584:	1af3      	subs	r3, r6, r3
 8009586:	2f00      	cmp	r7, #0
 8009588:	bf08      	it	eq
 800958a:	462f      	moveq	r7, r5
 800958c:	2d10      	cmp	r5, #16
 800958e:	9306      	str	r3, [sp, #24]
 8009590:	46a8      	mov	r8, r5
 8009592:	bfa8      	it	ge
 8009594:	f04f 0810 	movge.w	r8, #16
 8009598:	f7f6 ffb4 	bl	8000504 <__aeabi_ui2d>
 800959c:	2d09      	cmp	r5, #9
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	dd13      	ble.n	80095cc <_strtod_l+0x3dc>
 80095a4:	4b7b      	ldr	r3, [pc, #492]	; (8009794 <_strtod_l+0x5a4>)
 80095a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80095aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80095ae:	f7f7 f823 	bl	80005f8 <__aeabi_dmul>
 80095b2:	4682      	mov	sl, r0
 80095b4:	4648      	mov	r0, r9
 80095b6:	468b      	mov	fp, r1
 80095b8:	f7f6 ffa4 	bl	8000504 <__aeabi_ui2d>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4650      	mov	r0, sl
 80095c2:	4659      	mov	r1, fp
 80095c4:	f7f6 fe62 	bl	800028c <__adddf3>
 80095c8:	4682      	mov	sl, r0
 80095ca:	468b      	mov	fp, r1
 80095cc:	2d0f      	cmp	r5, #15
 80095ce:	dc38      	bgt.n	8009642 <_strtod_l+0x452>
 80095d0:	9b06      	ldr	r3, [sp, #24]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f43f ae50 	beq.w	8009278 <_strtod_l+0x88>
 80095d8:	dd24      	ble.n	8009624 <_strtod_l+0x434>
 80095da:	2b16      	cmp	r3, #22
 80095dc:	dc0b      	bgt.n	80095f6 <_strtod_l+0x406>
 80095de:	496d      	ldr	r1, [pc, #436]	; (8009794 <_strtod_l+0x5a4>)
 80095e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e8:	4652      	mov	r2, sl
 80095ea:	465b      	mov	r3, fp
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	4682      	mov	sl, r0
 80095f2:	468b      	mov	fp, r1
 80095f4:	e640      	b.n	8009278 <_strtod_l+0x88>
 80095f6:	9a06      	ldr	r2, [sp, #24]
 80095f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80095fc:	4293      	cmp	r3, r2
 80095fe:	db20      	blt.n	8009642 <_strtod_l+0x452>
 8009600:	4c64      	ldr	r4, [pc, #400]	; (8009794 <_strtod_l+0x5a4>)
 8009602:	f1c5 050f 	rsb	r5, r5, #15
 8009606:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009612:	f7f6 fff1 	bl	80005f8 <__aeabi_dmul>
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	1b5d      	subs	r5, r3, r5
 800961a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800961e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009622:	e7e3      	b.n	80095ec <_strtod_l+0x3fc>
 8009624:	9b06      	ldr	r3, [sp, #24]
 8009626:	3316      	adds	r3, #22
 8009628:	db0b      	blt.n	8009642 <_strtod_l+0x452>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	1b9e      	subs	r6, r3, r6
 800962e:	4b59      	ldr	r3, [pc, #356]	; (8009794 <_strtod_l+0x5a4>)
 8009630:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009634:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009638:	4650      	mov	r0, sl
 800963a:	4659      	mov	r1, fp
 800963c:	f7f7 f906 	bl	800084c <__aeabi_ddiv>
 8009640:	e7d6      	b.n	80095f0 <_strtod_l+0x400>
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	eba5 0808 	sub.w	r8, r5, r8
 8009648:	4498      	add	r8, r3
 800964a:	f1b8 0f00 	cmp.w	r8, #0
 800964e:	dd74      	ble.n	800973a <_strtod_l+0x54a>
 8009650:	f018 030f 	ands.w	r3, r8, #15
 8009654:	d00a      	beq.n	800966c <_strtod_l+0x47c>
 8009656:	494f      	ldr	r1, [pc, #316]	; (8009794 <_strtod_l+0x5a4>)
 8009658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800965c:	4652      	mov	r2, sl
 800965e:	465b      	mov	r3, fp
 8009660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	f038 080f 	bics.w	r8, r8, #15
 8009670:	d04f      	beq.n	8009712 <_strtod_l+0x522>
 8009672:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009676:	dd22      	ble.n	80096be <_strtod_l+0x4ce>
 8009678:	2500      	movs	r5, #0
 800967a:	462e      	mov	r6, r5
 800967c:	9507      	str	r5, [sp, #28]
 800967e:	9505      	str	r5, [sp, #20]
 8009680:	2322      	movs	r3, #34	; 0x22
 8009682:	f8df b118 	ldr.w	fp, [pc, #280]	; 800979c <_strtod_l+0x5ac>
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	f04f 0a00 	mov.w	sl, #0
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f43f adf2 	beq.w	8009278 <_strtod_l+0x88>
 8009694:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009696:	4620      	mov	r0, r4
 8009698:	f002 f96e 	bl	800b978 <_Bfree>
 800969c:	9905      	ldr	r1, [sp, #20]
 800969e:	4620      	mov	r0, r4
 80096a0:	f002 f96a 	bl	800b978 <_Bfree>
 80096a4:	4631      	mov	r1, r6
 80096a6:	4620      	mov	r0, r4
 80096a8:	f002 f966 	bl	800b978 <_Bfree>
 80096ac:	9907      	ldr	r1, [sp, #28]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f002 f962 	bl	800b978 <_Bfree>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4620      	mov	r0, r4
 80096b8:	f002 f95e 	bl	800b978 <_Bfree>
 80096bc:	e5dc      	b.n	8009278 <_strtod_l+0x88>
 80096be:	4b36      	ldr	r3, [pc, #216]	; (8009798 <_strtod_l+0x5a8>)
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	2300      	movs	r3, #0
 80096c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80096c8:	4650      	mov	r0, sl
 80096ca:	4659      	mov	r1, fp
 80096cc:	4699      	mov	r9, r3
 80096ce:	f1b8 0f01 	cmp.w	r8, #1
 80096d2:	dc21      	bgt.n	8009718 <_strtod_l+0x528>
 80096d4:	b10b      	cbz	r3, 80096da <_strtod_l+0x4ea>
 80096d6:	4682      	mov	sl, r0
 80096d8:	468b      	mov	fp, r1
 80096da:	4b2f      	ldr	r3, [pc, #188]	; (8009798 <_strtod_l+0x5a8>)
 80096dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80096e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80096ec:	f7f6 ff84 	bl	80005f8 <__aeabi_dmul>
 80096f0:	4b2a      	ldr	r3, [pc, #168]	; (800979c <_strtod_l+0x5ac>)
 80096f2:	460a      	mov	r2, r1
 80096f4:	400b      	ands	r3, r1
 80096f6:	492a      	ldr	r1, [pc, #168]	; (80097a0 <_strtod_l+0x5b0>)
 80096f8:	428b      	cmp	r3, r1
 80096fa:	4682      	mov	sl, r0
 80096fc:	d8bc      	bhi.n	8009678 <_strtod_l+0x488>
 80096fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009702:	428b      	cmp	r3, r1
 8009704:	bf86      	itte	hi
 8009706:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80097a4 <_strtod_l+0x5b4>
 800970a:	f04f 3aff 	movhi.w	sl, #4294967295
 800970e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009712:	2300      	movs	r3, #0
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	e084      	b.n	8009822 <_strtod_l+0x632>
 8009718:	f018 0f01 	tst.w	r8, #1
 800971c:	d005      	beq.n	800972a <_strtod_l+0x53a>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	2301      	movs	r3, #1
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	3208      	adds	r2, #8
 800972e:	f109 0901 	add.w	r9, r9, #1
 8009732:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009736:	9204      	str	r2, [sp, #16]
 8009738:	e7c9      	b.n	80096ce <_strtod_l+0x4de>
 800973a:	d0ea      	beq.n	8009712 <_strtod_l+0x522>
 800973c:	f1c8 0800 	rsb	r8, r8, #0
 8009740:	f018 020f 	ands.w	r2, r8, #15
 8009744:	d00a      	beq.n	800975c <_strtod_l+0x56c>
 8009746:	4b13      	ldr	r3, [pc, #76]	; (8009794 <_strtod_l+0x5a4>)
 8009748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800974c:	4650      	mov	r0, sl
 800974e:	4659      	mov	r1, fp
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f7 f87a 	bl	800084c <__aeabi_ddiv>
 8009758:	4682      	mov	sl, r0
 800975a:	468b      	mov	fp, r1
 800975c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009760:	d0d7      	beq.n	8009712 <_strtod_l+0x522>
 8009762:	f1b8 0f1f 	cmp.w	r8, #31
 8009766:	dd1f      	ble.n	80097a8 <_strtod_l+0x5b8>
 8009768:	2500      	movs	r5, #0
 800976a:	462e      	mov	r6, r5
 800976c:	9507      	str	r5, [sp, #28]
 800976e:	9505      	str	r5, [sp, #20]
 8009770:	2322      	movs	r3, #34	; 0x22
 8009772:	f04f 0a00 	mov.w	sl, #0
 8009776:	f04f 0b00 	mov.w	fp, #0
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	e786      	b.n	800968c <_strtod_l+0x49c>
 800977e:	bf00      	nop
 8009780:	0800ce2d 	.word	0x0800ce2d
 8009784:	0800ce70 	.word	0x0800ce70
 8009788:	0800ce25 	.word	0x0800ce25
 800978c:	0800cfb4 	.word	0x0800cfb4
 8009790:	0800d2c8 	.word	0x0800d2c8
 8009794:	0800d1a8 	.word	0x0800d1a8
 8009798:	0800d180 	.word	0x0800d180
 800979c:	7ff00000 	.word	0x7ff00000
 80097a0:	7ca00000 	.word	0x7ca00000
 80097a4:	7fefffff 	.word	0x7fefffff
 80097a8:	f018 0310 	ands.w	r3, r8, #16
 80097ac:	bf18      	it	ne
 80097ae:	236a      	movne	r3, #106	; 0x6a
 80097b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009b60 <_strtod_l+0x970>
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	4650      	mov	r0, sl
 80097b8:	4659      	mov	r1, fp
 80097ba:	2300      	movs	r3, #0
 80097bc:	f018 0f01 	tst.w	r8, #1
 80097c0:	d004      	beq.n	80097cc <_strtod_l+0x5dc>
 80097c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80097c6:	f7f6 ff17 	bl	80005f8 <__aeabi_dmul>
 80097ca:	2301      	movs	r3, #1
 80097cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80097d0:	f109 0908 	add.w	r9, r9, #8
 80097d4:	d1f2      	bne.n	80097bc <_strtod_l+0x5cc>
 80097d6:	b10b      	cbz	r3, 80097dc <_strtod_l+0x5ec>
 80097d8:	4682      	mov	sl, r0
 80097da:	468b      	mov	fp, r1
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	b1c3      	cbz	r3, 8009812 <_strtod_l+0x622>
 80097e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	4659      	mov	r1, fp
 80097ec:	dd11      	ble.n	8009812 <_strtod_l+0x622>
 80097ee:	2b1f      	cmp	r3, #31
 80097f0:	f340 8124 	ble.w	8009a3c <_strtod_l+0x84c>
 80097f4:	2b34      	cmp	r3, #52	; 0x34
 80097f6:	bfde      	ittt	le
 80097f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009800:	fa03 f202 	lslle.w	r2, r3, r2
 8009804:	f04f 0a00 	mov.w	sl, #0
 8009808:	bfcc      	ite	gt
 800980a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800980e:	ea02 0b01 	andle.w	fp, r2, r1
 8009812:	2200      	movs	r2, #0
 8009814:	2300      	movs	r3, #0
 8009816:	4650      	mov	r0, sl
 8009818:	4659      	mov	r1, fp
 800981a:	f7f7 f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800981e:	2800      	cmp	r0, #0
 8009820:	d1a2      	bne.n	8009768 <_strtod_l+0x578>
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	9908      	ldr	r1, [sp, #32]
 8009828:	462b      	mov	r3, r5
 800982a:	463a      	mov	r2, r7
 800982c:	4620      	mov	r0, r4
 800982e:	f002 f90b 	bl	800ba48 <__s2b>
 8009832:	9007      	str	r0, [sp, #28]
 8009834:	2800      	cmp	r0, #0
 8009836:	f43f af1f 	beq.w	8009678 <_strtod_l+0x488>
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	1b9e      	subs	r6, r3, r6
 800983e:	9b06      	ldr	r3, [sp, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfb4      	ite	lt
 8009844:	4633      	movlt	r3, r6
 8009846:	2300      	movge	r3, #0
 8009848:	930c      	str	r3, [sp, #48]	; 0x30
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2500      	movs	r5, #0
 800984e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009852:	9312      	str	r3, [sp, #72]	; 0x48
 8009854:	462e      	mov	r6, r5
 8009856:	9b07      	ldr	r3, [sp, #28]
 8009858:	4620      	mov	r0, r4
 800985a:	6859      	ldr	r1, [r3, #4]
 800985c:	f002 f84c 	bl	800b8f8 <_Balloc>
 8009860:	9005      	str	r0, [sp, #20]
 8009862:	2800      	cmp	r0, #0
 8009864:	f43f af0c 	beq.w	8009680 <_strtod_l+0x490>
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	3202      	adds	r2, #2
 800986e:	f103 010c 	add.w	r1, r3, #12
 8009872:	0092      	lsls	r2, r2, #2
 8009874:	300c      	adds	r0, #12
 8009876:	f002 f831 	bl	800b8dc <memcpy>
 800987a:	ec4b ab10 	vmov	d0, sl, fp
 800987e:	aa1a      	add	r2, sp, #104	; 0x68
 8009880:	a919      	add	r1, sp, #100	; 0x64
 8009882:	4620      	mov	r0, r4
 8009884:	f002 fc26 	bl	800c0d4 <__d2b>
 8009888:	ec4b ab18 	vmov	d8, sl, fp
 800988c:	9018      	str	r0, [sp, #96]	; 0x60
 800988e:	2800      	cmp	r0, #0
 8009890:	f43f aef6 	beq.w	8009680 <_strtod_l+0x490>
 8009894:	2101      	movs	r1, #1
 8009896:	4620      	mov	r0, r4
 8009898:	f002 f970 	bl	800bb7c <__i2b>
 800989c:	4606      	mov	r6, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f aeee 	beq.w	8009680 <_strtod_l+0x490>
 80098a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098a6:	9904      	ldr	r1, [sp, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfab      	itete	ge
 80098ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80098ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80098b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80098b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80098b6:	bfac      	ite	ge
 80098b8:	eb03 0902 	addge.w	r9, r3, r2
 80098bc:	1ad7      	sublt	r7, r2, r3
 80098be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098c0:	eba3 0801 	sub.w	r8, r3, r1
 80098c4:	4490      	add	r8, r2
 80098c6:	4ba1      	ldr	r3, [pc, #644]	; (8009b4c <_strtod_l+0x95c>)
 80098c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098cc:	4598      	cmp	r8, r3
 80098ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80098d2:	f280 80c7 	bge.w	8009a64 <_strtod_l+0x874>
 80098d6:	eba3 0308 	sub.w	r3, r3, r8
 80098da:	2b1f      	cmp	r3, #31
 80098dc:	eba2 0203 	sub.w	r2, r2, r3
 80098e0:	f04f 0101 	mov.w	r1, #1
 80098e4:	f300 80b1 	bgt.w	8009a4a <_strtod_l+0x85a>
 80098e8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ec:	930d      	str	r3, [sp, #52]	; 0x34
 80098ee:	2300      	movs	r3, #0
 80098f0:	9308      	str	r3, [sp, #32]
 80098f2:	eb09 0802 	add.w	r8, r9, r2
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	45c1      	cmp	r9, r8
 80098fa:	4417      	add	r7, r2
 80098fc:	441f      	add	r7, r3
 80098fe:	464b      	mov	r3, r9
 8009900:	bfa8      	it	ge
 8009902:	4643      	movge	r3, r8
 8009904:	42bb      	cmp	r3, r7
 8009906:	bfa8      	it	ge
 8009908:	463b      	movge	r3, r7
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfc2      	ittt	gt
 800990e:	eba8 0803 	subgt.w	r8, r8, r3
 8009912:	1aff      	subgt	r7, r7, r3
 8009914:	eba9 0903 	subgt.w	r9, r9, r3
 8009918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800991a:	2b00      	cmp	r3, #0
 800991c:	dd17      	ble.n	800994e <_strtod_l+0x75e>
 800991e:	4631      	mov	r1, r6
 8009920:	461a      	mov	r2, r3
 8009922:	4620      	mov	r0, r4
 8009924:	f002 f9ea 	bl	800bcfc <__pow5mult>
 8009928:	4606      	mov	r6, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f aea8 	beq.w	8009680 <_strtod_l+0x490>
 8009930:	4601      	mov	r1, r0
 8009932:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009934:	4620      	mov	r0, r4
 8009936:	f002 f937 	bl	800bba8 <__multiply>
 800993a:	900b      	str	r0, [sp, #44]	; 0x2c
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f ae9f 	beq.w	8009680 <_strtod_l+0x490>
 8009942:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009944:	4620      	mov	r0, r4
 8009946:	f002 f817 	bl	800b978 <_Bfree>
 800994a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800994c:	9318      	str	r3, [sp, #96]	; 0x60
 800994e:	f1b8 0f00 	cmp.w	r8, #0
 8009952:	f300 808c 	bgt.w	8009a6e <_strtod_l+0x87e>
 8009956:	9b06      	ldr	r3, [sp, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	dd08      	ble.n	800996e <_strtod_l+0x77e>
 800995c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800995e:	9905      	ldr	r1, [sp, #20]
 8009960:	4620      	mov	r0, r4
 8009962:	f002 f9cb 	bl	800bcfc <__pow5mult>
 8009966:	9005      	str	r0, [sp, #20]
 8009968:	2800      	cmp	r0, #0
 800996a:	f43f ae89 	beq.w	8009680 <_strtod_l+0x490>
 800996e:	2f00      	cmp	r7, #0
 8009970:	dd08      	ble.n	8009984 <_strtod_l+0x794>
 8009972:	9905      	ldr	r1, [sp, #20]
 8009974:	463a      	mov	r2, r7
 8009976:	4620      	mov	r0, r4
 8009978:	f002 fa1a 	bl	800bdb0 <__lshift>
 800997c:	9005      	str	r0, [sp, #20]
 800997e:	2800      	cmp	r0, #0
 8009980:	f43f ae7e 	beq.w	8009680 <_strtod_l+0x490>
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	dd08      	ble.n	800999c <_strtod_l+0x7ac>
 800998a:	4631      	mov	r1, r6
 800998c:	464a      	mov	r2, r9
 800998e:	4620      	mov	r0, r4
 8009990:	f002 fa0e 	bl	800bdb0 <__lshift>
 8009994:	4606      	mov	r6, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f ae72 	beq.w	8009680 <_strtod_l+0x490>
 800999c:	9a05      	ldr	r2, [sp, #20]
 800999e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099a0:	4620      	mov	r0, r4
 80099a2:	f002 fa91 	bl	800bec8 <__mdiff>
 80099a6:	4605      	mov	r5, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f ae69 	beq.w	8009680 <_strtod_l+0x490>
 80099ae:	68c3      	ldr	r3, [r0, #12]
 80099b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b2:	2300      	movs	r3, #0
 80099b4:	60c3      	str	r3, [r0, #12]
 80099b6:	4631      	mov	r1, r6
 80099b8:	f002 fa6a 	bl	800be90 <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	da60      	bge.n	8009a82 <_strtod_l+0x892>
 80099c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c2:	ea53 030a 	orrs.w	r3, r3, sl
 80099c6:	f040 8082 	bne.w	8009ace <_strtod_l+0x8de>
 80099ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d17d      	bne.n	8009ace <_strtod_l+0x8de>
 80099d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099d6:	0d1b      	lsrs	r3, r3, #20
 80099d8:	051b      	lsls	r3, r3, #20
 80099da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80099de:	d976      	bls.n	8009ace <_strtod_l+0x8de>
 80099e0:	696b      	ldr	r3, [r5, #20]
 80099e2:	b913      	cbnz	r3, 80099ea <_strtod_l+0x7fa>
 80099e4:	692b      	ldr	r3, [r5, #16]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	dd71      	ble.n	8009ace <_strtod_l+0x8de>
 80099ea:	4629      	mov	r1, r5
 80099ec:	2201      	movs	r2, #1
 80099ee:	4620      	mov	r0, r4
 80099f0:	f002 f9de 	bl	800bdb0 <__lshift>
 80099f4:	4631      	mov	r1, r6
 80099f6:	4605      	mov	r5, r0
 80099f8:	f002 fa4a 	bl	800be90 <__mcmp>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	dd66      	ble.n	8009ace <_strtod_l+0x8de>
 8009a00:	9904      	ldr	r1, [sp, #16]
 8009a02:	4a53      	ldr	r2, [pc, #332]	; (8009b50 <_strtod_l+0x960>)
 8009a04:	465b      	mov	r3, fp
 8009a06:	2900      	cmp	r1, #0
 8009a08:	f000 8081 	beq.w	8009b0e <_strtod_l+0x91e>
 8009a0c:	ea02 010b 	and.w	r1, r2, fp
 8009a10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a14:	dc7b      	bgt.n	8009b0e <_strtod_l+0x91e>
 8009a16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a1a:	f77f aea9 	ble.w	8009770 <_strtod_l+0x580>
 8009a1e:	4b4d      	ldr	r3, [pc, #308]	; (8009b54 <_strtod_l+0x964>)
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	2200      	movs	r2, #0
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4303      	orrs	r3, r0
 8009a2e:	bf08      	it	eq
 8009a30:	2322      	moveq	r3, #34	; 0x22
 8009a32:	4682      	mov	sl, r0
 8009a34:	468b      	mov	fp, r1
 8009a36:	bf08      	it	eq
 8009a38:	6023      	streq	r3, [r4, #0]
 8009a3a:	e62b      	b.n	8009694 <_strtod_l+0x4a4>
 8009a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	ea03 0a0a 	and.w	sl, r3, sl
 8009a48:	e6e3      	b.n	8009812 <_strtod_l+0x622>
 8009a4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009a4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009a52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009a56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009a5a:	fa01 f308 	lsl.w	r3, r1, r8
 8009a5e:	9308      	str	r3, [sp, #32]
 8009a60:	910d      	str	r1, [sp, #52]	; 0x34
 8009a62:	e746      	b.n	80098f2 <_strtod_l+0x702>
 8009a64:	2300      	movs	r3, #0
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a6c:	e741      	b.n	80098f2 <_strtod_l+0x702>
 8009a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a70:	4642      	mov	r2, r8
 8009a72:	4620      	mov	r0, r4
 8009a74:	f002 f99c 	bl	800bdb0 <__lshift>
 8009a78:	9018      	str	r0, [sp, #96]	; 0x60
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f47f af6b 	bne.w	8009956 <_strtod_l+0x766>
 8009a80:	e5fe      	b.n	8009680 <_strtod_l+0x490>
 8009a82:	465f      	mov	r7, fp
 8009a84:	d16e      	bne.n	8009b64 <_strtod_l+0x974>
 8009a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a8c:	b342      	cbz	r2, 8009ae0 <_strtod_l+0x8f0>
 8009a8e:	4a32      	ldr	r2, [pc, #200]	; (8009b58 <_strtod_l+0x968>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d128      	bne.n	8009ae6 <_strtod_l+0x8f6>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4651      	mov	r1, sl
 8009a98:	b1eb      	cbz	r3, 8009ad6 <_strtod_l+0x8e6>
 8009a9a:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <_strtod_l+0x960>)
 8009a9c:	403b      	ands	r3, r7
 8009a9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa6:	d819      	bhi.n	8009adc <_strtod_l+0x8ec>
 8009aa8:	0d1b      	lsrs	r3, r3, #20
 8009aaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	d117      	bne.n	8009ae6 <_strtod_l+0x8f6>
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <_strtod_l+0x96c>)
 8009ab8:	429f      	cmp	r7, r3
 8009aba:	d102      	bne.n	8009ac2 <_strtod_l+0x8d2>
 8009abc:	3101      	adds	r1, #1
 8009abe:	f43f addf 	beq.w	8009680 <_strtod_l+0x490>
 8009ac2:	4b23      	ldr	r3, [pc, #140]	; (8009b50 <_strtod_l+0x960>)
 8009ac4:	403b      	ands	r3, r7
 8009ac6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009aca:	f04f 0a00 	mov.w	sl, #0
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1a4      	bne.n	8009a1e <_strtod_l+0x82e>
 8009ad4:	e5de      	b.n	8009694 <_strtod_l+0x4a4>
 8009ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8009ada:	e7ea      	b.n	8009ab2 <_strtod_l+0x8c2>
 8009adc:	4613      	mov	r3, r2
 8009ade:	e7e8      	b.n	8009ab2 <_strtod_l+0x8c2>
 8009ae0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ae4:	d08c      	beq.n	8009a00 <_strtod_l+0x810>
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	b1db      	cbz	r3, 8009b22 <_strtod_l+0x932>
 8009aea:	423b      	tst	r3, r7
 8009aec:	d0ef      	beq.n	8009ace <_strtod_l+0x8de>
 8009aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	b1c3      	cbz	r3, 8009b2a <_strtod_l+0x93a>
 8009af8:	f7ff fb5e 	bl	80091b8 <sulp>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	ec51 0b18 	vmov	r0, r1, d8
 8009b04:	f7f6 fbc2 	bl	800028c <__adddf3>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	468b      	mov	fp, r1
 8009b0c:	e7df      	b.n	8009ace <_strtod_l+0x8de>
 8009b0e:	4013      	ands	r3, r2
 8009b10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b1c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b20:	e7d5      	b.n	8009ace <_strtod_l+0x8de>
 8009b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b24:	ea13 0f0a 	tst.w	r3, sl
 8009b28:	e7e0      	b.n	8009aec <_strtod_l+0x8fc>
 8009b2a:	f7ff fb45 	bl	80091b8 <sulp>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	ec51 0b18 	vmov	r0, r1, d8
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	f7f6 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0c1      	beq.n	8009ace <_strtod_l+0x8de>
 8009b4a:	e611      	b.n	8009770 <_strtod_l+0x580>
 8009b4c:	fffffc02 	.word	0xfffffc02
 8009b50:	7ff00000 	.word	0x7ff00000
 8009b54:	39500000 	.word	0x39500000
 8009b58:	000fffff 	.word	0x000fffff
 8009b5c:	7fefffff 	.word	0x7fefffff
 8009b60:	0800ce88 	.word	0x0800ce88
 8009b64:	4631      	mov	r1, r6
 8009b66:	4628      	mov	r0, r5
 8009b68:	f002 fb10 	bl	800c18c <__ratio>
 8009b6c:	ec59 8b10 	vmov	r8, r9, d0
 8009b70:	ee10 0a10 	vmov	r0, s0
 8009b74:	2200      	movs	r2, #0
 8009b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 ffb8 	bl	8000af0 <__aeabi_dcmple>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d07a      	beq.n	8009c7a <_strtod_l+0xa8a>
 8009b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d04a      	beq.n	8009c20 <_strtod_l+0xa30>
 8009b8a:	4b95      	ldr	r3, [pc, #596]	; (8009de0 <_strtod_l+0xbf0>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009de0 <_strtod_l+0xbf0>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	4b92      	ldr	r3, [pc, #584]	; (8009de4 <_strtod_l+0xbf4>)
 8009b9c:	403b      	ands	r3, r7
 8009b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8009ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ba2:	4b91      	ldr	r3, [pc, #580]	; (8009de8 <_strtod_l+0xbf8>)
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	f040 80b0 	bne.w	8009d0a <_strtod_l+0xb1a>
 8009baa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009bb2:	ec4b ab10 	vmov	d0, sl, fp
 8009bb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bba:	f002 fa0f 	bl	800bfdc <__ulp>
 8009bbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bc2:	ec53 2b10 	vmov	r2, r3, d0
 8009bc6:	f7f6 fd17 	bl	80005f8 <__aeabi_dmul>
 8009bca:	4652      	mov	r2, sl
 8009bcc:	465b      	mov	r3, fp
 8009bce:	f7f6 fb5d 	bl	800028c <__adddf3>
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4983      	ldr	r1, [pc, #524]	; (8009de4 <_strtod_l+0xbf4>)
 8009bd6:	4a85      	ldr	r2, [pc, #532]	; (8009dec <_strtod_l+0xbfc>)
 8009bd8:	4019      	ands	r1, r3
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	4682      	mov	sl, r0
 8009bde:	d960      	bls.n	8009ca2 <_strtod_l+0xab2>
 8009be0:	ee18 3a90 	vmov	r3, s17
 8009be4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d104      	bne.n	8009bf6 <_strtod_l+0xa06>
 8009bec:	ee18 3a10 	vmov	r3, s16
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	f43f ad45 	beq.w	8009680 <_strtod_l+0x490>
 8009bf6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009df8 <_strtod_l+0xc08>
 8009bfa:	f04f 3aff 	mov.w	sl, #4294967295
 8009bfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c00:	4620      	mov	r0, r4
 8009c02:	f001 feb9 	bl	800b978 <_Bfree>
 8009c06:	9905      	ldr	r1, [sp, #20]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f001 feb5 	bl	800b978 <_Bfree>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f001 feb1 	bl	800b978 <_Bfree>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f001 fead 	bl	800b978 <_Bfree>
 8009c1e:	e61a      	b.n	8009856 <_strtod_l+0x666>
 8009c20:	f1ba 0f00 	cmp.w	sl, #0
 8009c24:	d11b      	bne.n	8009c5e <_strtod_l+0xa6e>
 8009c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c2a:	b9f3      	cbnz	r3, 8009c6a <_strtod_l+0xa7a>
 8009c2c:	4b6c      	ldr	r3, [pc, #432]	; (8009de0 <_strtod_l+0xbf0>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff52 	bl	8000adc <__aeabi_dcmplt>
 8009c38:	b9d0      	cbnz	r0, 8009c70 <_strtod_l+0xa80>
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4b6c      	ldr	r3, [pc, #432]	; (8009df0 <_strtod_l+0xc00>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	f7f6 fcd9 	bl	80005f8 <__aeabi_dmul>
 8009c46:	4680      	mov	r8, r0
 8009c48:	4689      	mov	r9, r1
 8009c4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009c52:	9315      	str	r3, [sp, #84]	; 0x54
 8009c54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c5c:	e79d      	b.n	8009b9a <_strtod_l+0x9aa>
 8009c5e:	f1ba 0f01 	cmp.w	sl, #1
 8009c62:	d102      	bne.n	8009c6a <_strtod_l+0xa7a>
 8009c64:	2f00      	cmp	r7, #0
 8009c66:	f43f ad83 	beq.w	8009770 <_strtod_l+0x580>
 8009c6a:	4b62      	ldr	r3, [pc, #392]	; (8009df4 <_strtod_l+0xc04>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	e78e      	b.n	8009b8e <_strtod_l+0x99e>
 8009c70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009df0 <_strtod_l+0xc00>
 8009c74:	f04f 0800 	mov.w	r8, #0
 8009c78:	e7e7      	b.n	8009c4a <_strtod_l+0xa5a>
 8009c7a:	4b5d      	ldr	r3, [pc, #372]	; (8009df0 <_strtod_l+0xc00>)
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	2200      	movs	r2, #0
 8009c82:	f7f6 fcb9 	bl	80005f8 <__aeabi_dmul>
 8009c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4689      	mov	r9, r1
 8009c8c:	b933      	cbnz	r3, 8009c9c <_strtod_l+0xaac>
 8009c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c92:	900e      	str	r0, [sp, #56]	; 0x38
 8009c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c9a:	e7dd      	b.n	8009c58 <_strtod_l+0xa68>
 8009c9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ca0:	e7f9      	b.n	8009c96 <_strtod_l+0xaa6>
 8009ca2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1a8      	bne.n	8009bfe <_strtod_l+0xa0e>
 8009cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cb2:	0d1b      	lsrs	r3, r3, #20
 8009cb4:	051b      	lsls	r3, r3, #20
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d1a1      	bne.n	8009bfe <_strtod_l+0xa0e>
 8009cba:	4640      	mov	r0, r8
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	f7f6 ffe3 	bl	8000c88 <__aeabi_d2lz>
 8009cc2:	f7f6 fc6b 	bl	800059c <__aeabi_l2d>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	f7f6 fadb 	bl	8000288 <__aeabi_dsub>
 8009cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd8:	ea43 030a 	orr.w	r3, r3, sl
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	d055      	beq.n	8009d90 <_strtod_l+0xba0>
 8009ce4:	a336      	add	r3, pc, #216	; (adr r3, 8009dc0 <_strtod_l+0xbd0>)
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f7f6 fef7 	bl	8000adc <__aeabi_dcmplt>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f47f acd0 	bne.w	8009694 <_strtod_l+0x4a4>
 8009cf4:	a334      	add	r3, pc, #208	; (adr r3, 8009dc8 <_strtod_l+0xbd8>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	f43f af7b 	beq.w	8009bfe <_strtod_l+0xa0e>
 8009d08:	e4c4      	b.n	8009694 <_strtod_l+0x4a4>
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	b333      	cbz	r3, 8009d5c <_strtod_l+0xb6c>
 8009d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d14:	d822      	bhi.n	8009d5c <_strtod_l+0xb6c>
 8009d16:	a32e      	add	r3, pc, #184	; (adr r3, 8009dd0 <_strtod_l+0xbe0>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 fee6 	bl	8000af0 <__aeabi_dcmple>
 8009d24:	b1a0      	cbz	r0, 8009d50 <_strtod_l+0xb60>
 8009d26:	4649      	mov	r1, r9
 8009d28:	4640      	mov	r0, r8
 8009d2a:	f7f6 ff3d 	bl	8000ba8 <__aeabi_d2uiz>
 8009d2e:	2801      	cmp	r0, #1
 8009d30:	bf38      	it	cc
 8009d32:	2001      	movcc	r0, #1
 8009d34:	f7f6 fbe6 	bl	8000504 <__aeabi_ui2d>
 8009d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4689      	mov	r9, r1
 8009d3e:	bb23      	cbnz	r3, 8009d8a <_strtod_l+0xb9a>
 8009d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d44:	9010      	str	r0, [sp, #64]	; 0x40
 8009d46:	9311      	str	r3, [sp, #68]	; 0x44
 8009d48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d60:	eeb0 0a48 	vmov.f32	s0, s16
 8009d64:	eef0 0a68 	vmov.f32	s1, s17
 8009d68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d6c:	f002 f936 	bl	800bfdc <__ulp>
 8009d70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d74:	ec53 2b10 	vmov	r2, r3, d0
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	ec53 2b18 	vmov	r2, r3, d8
 8009d80:	f7f6 fa84 	bl	800028c <__adddf3>
 8009d84:	4682      	mov	sl, r0
 8009d86:	468b      	mov	fp, r1
 8009d88:	e78d      	b.n	8009ca6 <_strtod_l+0xab6>
 8009d8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009d8e:	e7db      	b.n	8009d48 <_strtod_l+0xb58>
 8009d90:	a311      	add	r3, pc, #68	; (adr r3, 8009dd8 <_strtod_l+0xbe8>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fea1 	bl	8000adc <__aeabi_dcmplt>
 8009d9a:	e7b2      	b.n	8009d02 <_strtod_l+0xb12>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009da2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	f7ff ba6b 	b.w	8009280 <_strtod_l+0x90>
 8009daa:	2a65      	cmp	r2, #101	; 0x65
 8009dac:	f43f ab5f 	beq.w	800946e <_strtod_l+0x27e>
 8009db0:	2a45      	cmp	r2, #69	; 0x45
 8009db2:	f43f ab5c 	beq.w	800946e <_strtod_l+0x27e>
 8009db6:	2301      	movs	r3, #1
 8009db8:	f7ff bb94 	b.w	80094e4 <_strtod_l+0x2f4>
 8009dbc:	f3af 8000 	nop.w
 8009dc0:	94a03595 	.word	0x94a03595
 8009dc4:	3fdfffff 	.word	0x3fdfffff
 8009dc8:	35afe535 	.word	0x35afe535
 8009dcc:	3fe00000 	.word	0x3fe00000
 8009dd0:	ffc00000 	.word	0xffc00000
 8009dd4:	41dfffff 	.word	0x41dfffff
 8009dd8:	94a03595 	.word	0x94a03595
 8009ddc:	3fcfffff 	.word	0x3fcfffff
 8009de0:	3ff00000 	.word	0x3ff00000
 8009de4:	7ff00000 	.word	0x7ff00000
 8009de8:	7fe00000 	.word	0x7fe00000
 8009dec:	7c9fffff 	.word	0x7c9fffff
 8009df0:	3fe00000 	.word	0x3fe00000
 8009df4:	bff00000 	.word	0xbff00000
 8009df8:	7fefffff 	.word	0x7fefffff

08009dfc <_strtod_r>:
 8009dfc:	4b01      	ldr	r3, [pc, #4]	; (8009e04 <_strtod_r+0x8>)
 8009dfe:	f7ff b9f7 	b.w	80091f0 <_strtod_l>
 8009e02:	bf00      	nop
 8009e04:	20000074 	.word	0x20000074

08009e08 <_strtol_l.constprop.0>:
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0e:	d001      	beq.n	8009e14 <_strtol_l.constprop.0+0xc>
 8009e10:	2b24      	cmp	r3, #36	; 0x24
 8009e12:	d906      	bls.n	8009e22 <_strtol_l.constprop.0+0x1a>
 8009e14:	f7fe fa70 	bl	80082f8 <__errno>
 8009e18:	2316      	movs	r3, #22
 8009e1a:	6003      	str	r3, [r0, #0]
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f08 <_strtol_l.constprop.0+0x100>
 8009e26:	460d      	mov	r5, r1
 8009e28:	462e      	mov	r6, r5
 8009e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e32:	f017 0708 	ands.w	r7, r7, #8
 8009e36:	d1f7      	bne.n	8009e28 <_strtol_l.constprop.0+0x20>
 8009e38:	2c2d      	cmp	r4, #45	; 0x2d
 8009e3a:	d132      	bne.n	8009ea2 <_strtol_l.constprop.0+0x9a>
 8009e3c:	782c      	ldrb	r4, [r5, #0]
 8009e3e:	2701      	movs	r7, #1
 8009e40:	1cb5      	adds	r5, r6, #2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d05b      	beq.n	8009efe <_strtol_l.constprop.0+0xf6>
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	d109      	bne.n	8009e5e <_strtol_l.constprop.0+0x56>
 8009e4a:	2c30      	cmp	r4, #48	; 0x30
 8009e4c:	d107      	bne.n	8009e5e <_strtol_l.constprop.0+0x56>
 8009e4e:	782c      	ldrb	r4, [r5, #0]
 8009e50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e54:	2c58      	cmp	r4, #88	; 0x58
 8009e56:	d14d      	bne.n	8009ef4 <_strtol_l.constprop.0+0xec>
 8009e58:	786c      	ldrb	r4, [r5, #1]
 8009e5a:	2310      	movs	r3, #16
 8009e5c:	3502      	adds	r5, #2
 8009e5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e62:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e66:	f04f 0c00 	mov.w	ip, #0
 8009e6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e6e:	4666      	mov	r6, ip
 8009e70:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009e78:	f1be 0f09 	cmp.w	lr, #9
 8009e7c:	d816      	bhi.n	8009eac <_strtol_l.constprop.0+0xa4>
 8009e7e:	4674      	mov	r4, lr
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	dd24      	ble.n	8009ece <_strtol_l.constprop.0+0xc6>
 8009e84:	f1bc 0f00 	cmp.w	ip, #0
 8009e88:	db1e      	blt.n	8009ec8 <_strtol_l.constprop.0+0xc0>
 8009e8a:	45b1      	cmp	r9, r6
 8009e8c:	d31c      	bcc.n	8009ec8 <_strtol_l.constprop.0+0xc0>
 8009e8e:	d101      	bne.n	8009e94 <_strtol_l.constprop.0+0x8c>
 8009e90:	45a2      	cmp	sl, r4
 8009e92:	db19      	blt.n	8009ec8 <_strtol_l.constprop.0+0xc0>
 8009e94:	fb06 4603 	mla	r6, r6, r3, r4
 8009e98:	f04f 0c01 	mov.w	ip, #1
 8009e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea0:	e7e8      	b.n	8009e74 <_strtol_l.constprop.0+0x6c>
 8009ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ea4:	bf04      	itt	eq
 8009ea6:	782c      	ldrbeq	r4, [r5, #0]
 8009ea8:	1cb5      	addeq	r5, r6, #2
 8009eaa:	e7ca      	b.n	8009e42 <_strtol_l.constprop.0+0x3a>
 8009eac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009eb0:	f1be 0f19 	cmp.w	lr, #25
 8009eb4:	d801      	bhi.n	8009eba <_strtol_l.constprop.0+0xb2>
 8009eb6:	3c37      	subs	r4, #55	; 0x37
 8009eb8:	e7e2      	b.n	8009e80 <_strtol_l.constprop.0+0x78>
 8009eba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009ebe:	f1be 0f19 	cmp.w	lr, #25
 8009ec2:	d804      	bhi.n	8009ece <_strtol_l.constprop.0+0xc6>
 8009ec4:	3c57      	subs	r4, #87	; 0x57
 8009ec6:	e7db      	b.n	8009e80 <_strtol_l.constprop.0+0x78>
 8009ec8:	f04f 3cff 	mov.w	ip, #4294967295
 8009ecc:	e7e6      	b.n	8009e9c <_strtol_l.constprop.0+0x94>
 8009ece:	f1bc 0f00 	cmp.w	ip, #0
 8009ed2:	da05      	bge.n	8009ee0 <_strtol_l.constprop.0+0xd8>
 8009ed4:	2322      	movs	r3, #34	; 0x22
 8009ed6:	6003      	str	r3, [r0, #0]
 8009ed8:	4646      	mov	r6, r8
 8009eda:	b942      	cbnz	r2, 8009eee <_strtol_l.constprop.0+0xe6>
 8009edc:	4630      	mov	r0, r6
 8009ede:	e79e      	b.n	8009e1e <_strtol_l.constprop.0+0x16>
 8009ee0:	b107      	cbz	r7, 8009ee4 <_strtol_l.constprop.0+0xdc>
 8009ee2:	4276      	negs	r6, r6
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	d0f9      	beq.n	8009edc <_strtol_l.constprop.0+0xd4>
 8009ee8:	f1bc 0f00 	cmp.w	ip, #0
 8009eec:	d000      	beq.n	8009ef0 <_strtol_l.constprop.0+0xe8>
 8009eee:	1e69      	subs	r1, r5, #1
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	e7f3      	b.n	8009edc <_strtol_l.constprop.0+0xd4>
 8009ef4:	2430      	movs	r4, #48	; 0x30
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1b1      	bne.n	8009e5e <_strtol_l.constprop.0+0x56>
 8009efa:	2308      	movs	r3, #8
 8009efc:	e7af      	b.n	8009e5e <_strtol_l.constprop.0+0x56>
 8009efe:	2c30      	cmp	r4, #48	; 0x30
 8009f00:	d0a5      	beq.n	8009e4e <_strtol_l.constprop.0+0x46>
 8009f02:	230a      	movs	r3, #10
 8009f04:	e7ab      	b.n	8009e5e <_strtol_l.constprop.0+0x56>
 8009f06:	bf00      	nop
 8009f08:	0800ceb1 	.word	0x0800ceb1

08009f0c <_strtol_r>:
 8009f0c:	f7ff bf7c 	b.w	8009e08 <_strtol_l.constprop.0>

08009f10 <__swbuf_r>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	460e      	mov	r6, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	4605      	mov	r5, r0
 8009f18:	b118      	cbz	r0, 8009f22 <__swbuf_r+0x12>
 8009f1a:	6983      	ldr	r3, [r0, #24]
 8009f1c:	b90b      	cbnz	r3, 8009f22 <__swbuf_r+0x12>
 8009f1e:	f001 f84b 	bl	800afb8 <__sinit>
 8009f22:	4b21      	ldr	r3, [pc, #132]	; (8009fa8 <__swbuf_r+0x98>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d12b      	bne.n	8009f80 <__swbuf_r+0x70>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	69a3      	ldr	r3, [r4, #24]
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	071a      	lsls	r2, r3, #28
 8009f32:	d52f      	bpl.n	8009f94 <__swbuf_r+0x84>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b36b      	cbz	r3, 8009f94 <__swbuf_r+0x84>
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	1ac0      	subs	r0, r0, r3
 8009f3e:	6963      	ldr	r3, [r4, #20]
 8009f40:	b2f6      	uxtb	r6, r6
 8009f42:	4283      	cmp	r3, r0
 8009f44:	4637      	mov	r7, r6
 8009f46:	dc04      	bgt.n	8009f52 <__swbuf_r+0x42>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 ffa0 	bl	800ae90 <_fflush_r>
 8009f50:	bb30      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	6022      	str	r2, [r4, #0]
 8009f5e:	701e      	strb	r6, [r3, #0]
 8009f60:	6963      	ldr	r3, [r4, #20]
 8009f62:	3001      	adds	r0, #1
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d004      	beq.n	8009f72 <__swbuf_r+0x62>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d506      	bpl.n	8009f7c <__swbuf_r+0x6c>
 8009f6e:	2e0a      	cmp	r6, #10
 8009f70:	d104      	bne.n	8009f7c <__swbuf_r+0x6c>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 ff8b 	bl	800ae90 <_fflush_r>
 8009f7a:	b988      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f80:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <__swbuf_r+0x9c>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d101      	bne.n	8009f8a <__swbuf_r+0x7a>
 8009f86:	68ac      	ldr	r4, [r5, #8]
 8009f88:	e7cf      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <__swbuf_r+0xa0>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	bf08      	it	eq
 8009f90:	68ec      	ldreq	r4, [r5, #12]
 8009f92:	e7ca      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f80c 	bl	8009fb4 <__swsetup_r>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d0cb      	beq.n	8009f38 <__swbuf_r+0x28>
 8009fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fa4:	e7ea      	b.n	8009f7c <__swbuf_r+0x6c>
 8009fa6:	bf00      	nop
 8009fa8:	0800d064 	.word	0x0800d064
 8009fac:	0800d084 	.word	0x0800d084
 8009fb0:	0800d044 	.word	0x0800d044

08009fb4 <__swsetup_r>:
 8009fb4:	4b32      	ldr	r3, [pc, #200]	; (800a080 <__swsetup_r+0xcc>)
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	b125      	cbz	r5, 8009fca <__swsetup_r+0x16>
 8009fc0:	69ab      	ldr	r3, [r5, #24]
 8009fc2:	b913      	cbnz	r3, 8009fca <__swsetup_r+0x16>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 fff7 	bl	800afb8 <__sinit>
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <__swsetup_r+0xd0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d10f      	bne.n	8009ff0 <__swsetup_r+0x3c>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	d42c      	bmi.n	800a036 <__swsetup_r+0x82>
 8009fdc:	06dd      	lsls	r5, r3, #27
 8009fde:	d411      	bmi.n	800a004 <__swsetup_r+0x50>
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	f04f 30ff 	mov.w	r0, #4294967295
 8009fee:	e03e      	b.n	800a06e <__swsetup_r+0xba>
 8009ff0:	4b25      	ldr	r3, [pc, #148]	; (800a088 <__swsetup_r+0xd4>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <__swsetup_r+0x46>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7eb      	b.n	8009fd2 <__swsetup_r+0x1e>
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <__swsetup_r+0xd8>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7e6      	b.n	8009fd2 <__swsetup_r+0x1e>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x7a>
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x6a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x66>
 800a014:	4630      	mov	r0, r6
 800a016:	f002 f947 	bl	800c2a8 <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	; 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x9a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x9a>
 800a046:	4621      	mov	r1, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	f001 fbed 	bl	800b828 <__smakebuf_r>
 800a04e:	89a0      	ldrh	r0, [r4, #12]
 800a050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a054:	f010 0301 	ands.w	r3, r0, #1
 800a058:	d00a      	beq.n	800a070 <__swsetup_r+0xbc>
 800a05a:	2300      	movs	r3, #0
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	425b      	negs	r3, r3
 800a062:	61a3      	str	r3, [r4, #24]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b943      	cbnz	r3, 800a07a <__swsetup_r+0xc6>
 800a068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a06c:	d1ba      	bne.n	8009fe4 <__swsetup_r+0x30>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	0781      	lsls	r1, r0, #30
 800a072:	bf58      	it	pl
 800a074:	6963      	ldrpl	r3, [r4, #20]
 800a076:	60a3      	str	r3, [r4, #8]
 800a078:	e7f4      	b.n	800a064 <__swsetup_r+0xb0>
 800a07a:	2000      	movs	r0, #0
 800a07c:	e7f7      	b.n	800a06e <__swsetup_r+0xba>
 800a07e:	bf00      	nop
 800a080:	2000000c 	.word	0x2000000c
 800a084:	0800d064 	.word	0x0800d064
 800a088:	0800d084 	.word	0x0800d084
 800a08c:	0800d044 	.word	0x0800d044

0800a090 <quorem>:
 800a090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	6903      	ldr	r3, [r0, #16]
 800a096:	690c      	ldr	r4, [r1, #16]
 800a098:	42a3      	cmp	r3, r4
 800a09a:	4607      	mov	r7, r0
 800a09c:	f2c0 8081 	blt.w	800a1a2 <quorem+0x112>
 800a0a0:	3c01      	subs	r4, #1
 800a0a2:	f101 0814 	add.w	r8, r1, #20
 800a0a6:	f100 0514 	add.w	r5, r0, #20
 800a0aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0c8:	d331      	bcc.n	800a12e <quorem+0x9e>
 800a0ca:	f04f 0e00 	mov.w	lr, #0
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	46ac      	mov	ip, r5
 800a0d2:	46f2      	mov	sl, lr
 800a0d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0d8:	b293      	uxth	r3, r2
 800a0da:	fb06 e303 	mla	r3, r6, r3, lr
 800a0de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0e8:	f8dc a000 	ldr.w	sl, [ip]
 800a0ec:	0c12      	lsrs	r2, r2, #16
 800a0ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a0f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0fe:	b292      	uxth	r2, r2
 800a100:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a108:	f8bd 3000 	ldrh.w	r3, [sp]
 800a10c:	4581      	cmp	r9, r0
 800a10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a112:	f84c 3b04 	str.w	r3, [ip], #4
 800a116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a11a:	d2db      	bcs.n	800a0d4 <quorem+0x44>
 800a11c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a120:	b92b      	cbnz	r3, 800a12e <quorem+0x9e>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	3b04      	subs	r3, #4
 800a126:	429d      	cmp	r5, r3
 800a128:	461a      	mov	r2, r3
 800a12a:	d32e      	bcc.n	800a18a <quorem+0xfa>
 800a12c:	613c      	str	r4, [r7, #16]
 800a12e:	4638      	mov	r0, r7
 800a130:	f001 feae 	bl	800be90 <__mcmp>
 800a134:	2800      	cmp	r0, #0
 800a136:	db24      	blt.n	800a182 <quorem+0xf2>
 800a138:	3601      	adds	r6, #1
 800a13a:	4628      	mov	r0, r5
 800a13c:	f04f 0c00 	mov.w	ip, #0
 800a140:	f858 2b04 	ldr.w	r2, [r8], #4
 800a144:	f8d0 e000 	ldr.w	lr, [r0]
 800a148:	b293      	uxth	r3, r2
 800a14a:	ebac 0303 	sub.w	r3, ip, r3
 800a14e:	0c12      	lsrs	r2, r2, #16
 800a150:	fa13 f38e 	uxtah	r3, r3, lr
 800a154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a162:	45c1      	cmp	r9, r8
 800a164:	f840 3b04 	str.w	r3, [r0], #4
 800a168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a16c:	d2e8      	bcs.n	800a140 <quorem+0xb0>
 800a16e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a176:	b922      	cbnz	r2, 800a182 <quorem+0xf2>
 800a178:	3b04      	subs	r3, #4
 800a17a:	429d      	cmp	r5, r3
 800a17c:	461a      	mov	r2, r3
 800a17e:	d30a      	bcc.n	800a196 <quorem+0x106>
 800a180:	613c      	str	r4, [r7, #16]
 800a182:	4630      	mov	r0, r6
 800a184:	b003      	add	sp, #12
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	6812      	ldr	r2, [r2, #0]
 800a18c:	3b04      	subs	r3, #4
 800a18e:	2a00      	cmp	r2, #0
 800a190:	d1cc      	bne.n	800a12c <quorem+0x9c>
 800a192:	3c01      	subs	r4, #1
 800a194:	e7c7      	b.n	800a126 <quorem+0x96>
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	3b04      	subs	r3, #4
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	d1f0      	bne.n	800a180 <quorem+0xf0>
 800a19e:	3c01      	subs	r4, #1
 800a1a0:	e7eb      	b.n	800a17a <quorem+0xea>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	e7ee      	b.n	800a184 <quorem+0xf4>
	...

0800a1a8 <_dtoa_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	ed2d 8b04 	vpush	{d8-d9}
 800a1b0:	ec57 6b10 	vmov	r6, r7, d0
 800a1b4:	b093      	sub	sp, #76	; 0x4c
 800a1b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1bc:	9106      	str	r1, [sp, #24]
 800a1be:	ee10 aa10 	vmov	sl, s0
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1c8:	46bb      	mov	fp, r7
 800a1ca:	b975      	cbnz	r5, 800a1ea <_dtoa_r+0x42>
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f001 fb6b 	bl	800b8a8 <malloc>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a1d6:	b920      	cbnz	r0, 800a1e2 <_dtoa_r+0x3a>
 800a1d8:	4ba7      	ldr	r3, [pc, #668]	; (800a478 <_dtoa_r+0x2d0>)
 800a1da:	21ea      	movs	r1, #234	; 0xea
 800a1dc:	48a7      	ldr	r0, [pc, #668]	; (800a47c <_dtoa_r+0x2d4>)
 800a1de:	f002 fc89 	bl	800caf4 <__assert_func>
 800a1e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1e6:	6005      	str	r5, [r0, #0]
 800a1e8:	60c5      	str	r5, [r0, #12]
 800a1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ec:	6819      	ldr	r1, [r3, #0]
 800a1ee:	b151      	cbz	r1, 800a206 <_dtoa_r+0x5e>
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	604a      	str	r2, [r1, #4]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4093      	lsls	r3, r2
 800a1f8:	608b      	str	r3, [r1, #8]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f001 fbbc 	bl	800b978 <_Bfree>
 800a200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	1e3b      	subs	r3, r7, #0
 800a208:	bfaa      	itet	ge
 800a20a:	2300      	movge	r3, #0
 800a20c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a210:	f8c8 3000 	strge.w	r3, [r8]
 800a214:	4b9a      	ldr	r3, [pc, #616]	; (800a480 <_dtoa_r+0x2d8>)
 800a216:	bfbc      	itt	lt
 800a218:	2201      	movlt	r2, #1
 800a21a:	f8c8 2000 	strlt.w	r2, [r8]
 800a21e:	ea33 030b 	bics.w	r3, r3, fp
 800a222:	d11b      	bne.n	800a25c <_dtoa_r+0xb4>
 800a224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a226:	f242 730f 	movw	r3, #9999	; 0x270f
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a230:	4333      	orrs	r3, r6
 800a232:	f000 8592 	beq.w	800ad5a <_dtoa_r+0xbb2>
 800a236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a238:	b963      	cbnz	r3, 800a254 <_dtoa_r+0xac>
 800a23a:	4b92      	ldr	r3, [pc, #584]	; (800a484 <_dtoa_r+0x2dc>)
 800a23c:	e022      	b.n	800a284 <_dtoa_r+0xdc>
 800a23e:	4b92      	ldr	r3, [pc, #584]	; (800a488 <_dtoa_r+0x2e0>)
 800a240:	9301      	str	r3, [sp, #4]
 800a242:	3308      	adds	r3, #8
 800a244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	9801      	ldr	r0, [sp, #4]
 800a24a:	b013      	add	sp, #76	; 0x4c
 800a24c:	ecbd 8b04 	vpop	{d8-d9}
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	4b8b      	ldr	r3, [pc, #556]	; (800a484 <_dtoa_r+0x2dc>)
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	3303      	adds	r3, #3
 800a25a:	e7f3      	b.n	800a244 <_dtoa_r+0x9c>
 800a25c:	2200      	movs	r2, #0
 800a25e:	2300      	movs	r3, #0
 800a260:	4650      	mov	r0, sl
 800a262:	4659      	mov	r1, fp
 800a264:	f7f6 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 800a268:	ec4b ab19 	vmov	d9, sl, fp
 800a26c:	4680      	mov	r8, r0
 800a26e:	b158      	cbz	r0, 800a288 <_dtoa_r+0xe0>
 800a270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a272:	2301      	movs	r3, #1
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 856b 	beq.w	800ad54 <_dtoa_r+0xbac>
 800a27e:	4883      	ldr	r0, [pc, #524]	; (800a48c <_dtoa_r+0x2e4>)
 800a280:	6018      	str	r0, [r3, #0]
 800a282:	1e43      	subs	r3, r0, #1
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	e7df      	b.n	800a248 <_dtoa_r+0xa0>
 800a288:	ec4b ab10 	vmov	d0, sl, fp
 800a28c:	aa10      	add	r2, sp, #64	; 0x40
 800a28e:	a911      	add	r1, sp, #68	; 0x44
 800a290:	4620      	mov	r0, r4
 800a292:	f001 ff1f 	bl	800c0d4 <__d2b>
 800a296:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a29a:	ee08 0a10 	vmov	s16, r0
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	f000 8084 	beq.w	800a3ac <_dtoa_r+0x204>
 800a2a4:	ee19 3a90 	vmov	r3, s19
 800a2a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2b0:	4656      	mov	r6, sl
 800a2b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a2be:	4b74      	ldr	r3, [pc, #464]	; (800a490 <_dtoa_r+0x2e8>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	f7f5 ffdf 	bl	8000288 <__aeabi_dsub>
 800a2ca:	a365      	add	r3, pc, #404	; (adr r3, 800a460 <_dtoa_r+0x2b8>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f7f6 f992 	bl	80005f8 <__aeabi_dmul>
 800a2d4:	a364      	add	r3, pc, #400	; (adr r3, 800a468 <_dtoa_r+0x2c0>)
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f7f5 ffd7 	bl	800028c <__adddf3>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	f7f6 f91e 	bl	8000524 <__aeabi_i2d>
 800a2e8:	a361      	add	r3, pc, #388	; (adr r3, 800a470 <_dtoa_r+0x2c8>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f6 f983 	bl	80005f8 <__aeabi_dmul>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	f7f5 ffc7 	bl	800028c <__adddf3>
 800a2fe:	4606      	mov	r6, r0
 800a300:	460f      	mov	r7, r1
 800a302:	f7f6 fc29 	bl	8000b58 <__aeabi_d2iz>
 800a306:	2200      	movs	r2, #0
 800a308:	9000      	str	r0, [sp, #0]
 800a30a:	2300      	movs	r3, #0
 800a30c:	4630      	mov	r0, r6
 800a30e:	4639      	mov	r1, r7
 800a310:	f7f6 fbe4 	bl	8000adc <__aeabi_dcmplt>
 800a314:	b150      	cbz	r0, 800a32c <_dtoa_r+0x184>
 800a316:	9800      	ldr	r0, [sp, #0]
 800a318:	f7f6 f904 	bl	8000524 <__aeabi_i2d>
 800a31c:	4632      	mov	r2, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	f7f6 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a324:	b910      	cbnz	r0, 800a32c <_dtoa_r+0x184>
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	3b01      	subs	r3, #1
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	2b16      	cmp	r3, #22
 800a330:	d85a      	bhi.n	800a3e8 <_dtoa_r+0x240>
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	4b57      	ldr	r3, [pc, #348]	; (800a494 <_dtoa_r+0x2ec>)
 800a336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	ec51 0b19 	vmov	r0, r1, d9
 800a342:	f7f6 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800a346:	2800      	cmp	r0, #0
 800a348:	d050      	beq.n	800a3ec <_dtoa_r+0x244>
 800a34a:	9b00      	ldr	r3, [sp, #0]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	930b      	str	r3, [sp, #44]	; 0x2c
 800a354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a356:	1b5d      	subs	r5, r3, r5
 800a358:	1e6b      	subs	r3, r5, #1
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	bf45      	ittet	mi
 800a35e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a362:	9304      	strmi	r3, [sp, #16]
 800a364:	2300      	movpl	r3, #0
 800a366:	2300      	movmi	r3, #0
 800a368:	bf4c      	ite	mi
 800a36a:	9305      	strmi	r3, [sp, #20]
 800a36c:	9304      	strpl	r3, [sp, #16]
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	db3d      	blt.n	800a3f0 <_dtoa_r+0x248>
 800a374:	9b05      	ldr	r3, [sp, #20]
 800a376:	9a00      	ldr	r2, [sp, #0]
 800a378:	920a      	str	r2, [sp, #40]	; 0x28
 800a37a:	4413      	add	r3, r2
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	2300      	movs	r3, #0
 800a380:	9307      	str	r3, [sp, #28]
 800a382:	9b06      	ldr	r3, [sp, #24]
 800a384:	2b09      	cmp	r3, #9
 800a386:	f200 8089 	bhi.w	800a49c <_dtoa_r+0x2f4>
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	bfc4      	itt	gt
 800a38e:	3b04      	subgt	r3, #4
 800a390:	9306      	strgt	r3, [sp, #24]
 800a392:	9b06      	ldr	r3, [sp, #24]
 800a394:	f1a3 0302 	sub.w	r3, r3, #2
 800a398:	bfcc      	ite	gt
 800a39a:	2500      	movgt	r5, #0
 800a39c:	2501      	movle	r5, #1
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	f200 8087 	bhi.w	800a4b2 <_dtoa_r+0x30a>
 800a3a4:	e8df f003 	tbb	[pc, r3]
 800a3a8:	59383a2d 	.word	0x59383a2d
 800a3ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3b0:	441d      	add	r5, r3
 800a3b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	bfc1      	itttt	gt
 800a3ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a3c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3ca:	bfda      	itte	le
 800a3cc:	f1c3 0320 	rsble	r3, r3, #32
 800a3d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a3d4:	4318      	orrgt	r0, r3
 800a3d6:	f7f6 f895 	bl	8000504 <__aeabi_ui2d>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4606      	mov	r6, r0
 800a3de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3e2:	3d01      	subs	r5, #1
 800a3e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3e6:	e76a      	b.n	800a2be <_dtoa_r+0x116>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7b2      	b.n	800a352 <_dtoa_r+0x1aa>
 800a3ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3ee:	e7b1      	b.n	800a354 <_dtoa_r+0x1ac>
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	9a00      	ldr	r2, [sp, #0]
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	9304      	str	r3, [sp, #16]
 800a3f8:	4253      	negs	r3, r2
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a400:	e7bf      	b.n	800a382 <_dtoa_r+0x1da>
 800a402:	2300      	movs	r3, #0
 800a404:	9308      	str	r3, [sp, #32]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc55      	bgt.n	800a4b8 <_dtoa_r+0x310>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a412:	461a      	mov	r2, r3
 800a414:	9209      	str	r2, [sp, #36]	; 0x24
 800a416:	e00c      	b.n	800a432 <_dtoa_r+0x28a>
 800a418:	2301      	movs	r3, #1
 800a41a:	e7f3      	b.n	800a404 <_dtoa_r+0x25c>
 800a41c:	2300      	movs	r3, #0
 800a41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a420:	9308      	str	r3, [sp, #32]
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	4413      	add	r3, r2
 800a426:	9302      	str	r3, [sp, #8]
 800a428:	3301      	adds	r3, #1
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	bfb8      	it	lt
 800a430:	2301      	movlt	r3, #1
 800a432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a434:	2200      	movs	r2, #0
 800a436:	6042      	str	r2, [r0, #4]
 800a438:	2204      	movs	r2, #4
 800a43a:	f102 0614 	add.w	r6, r2, #20
 800a43e:	429e      	cmp	r6, r3
 800a440:	6841      	ldr	r1, [r0, #4]
 800a442:	d93d      	bls.n	800a4c0 <_dtoa_r+0x318>
 800a444:	4620      	mov	r0, r4
 800a446:	f001 fa57 	bl	800b8f8 <_Balloc>
 800a44a:	9001      	str	r0, [sp, #4]
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d13b      	bne.n	800a4c8 <_dtoa_r+0x320>
 800a450:	4b11      	ldr	r3, [pc, #68]	; (800a498 <_dtoa_r+0x2f0>)
 800a452:	4602      	mov	r2, r0
 800a454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a458:	e6c0      	b.n	800a1dc <_dtoa_r+0x34>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e7df      	b.n	800a41e <_dtoa_r+0x276>
 800a45e:	bf00      	nop
 800a460:	636f4361 	.word	0x636f4361
 800a464:	3fd287a7 	.word	0x3fd287a7
 800a468:	8b60c8b3 	.word	0x8b60c8b3
 800a46c:	3fc68a28 	.word	0x3fc68a28
 800a470:	509f79fb 	.word	0x509f79fb
 800a474:	3fd34413 	.word	0x3fd34413
 800a478:	0800cfbe 	.word	0x0800cfbe
 800a47c:	0800cfd5 	.word	0x0800cfd5
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	0800cfba 	.word	0x0800cfba
 800a488:	0800cfb1 	.word	0x0800cfb1
 800a48c:	0800ce31 	.word	0x0800ce31
 800a490:	3ff80000 	.word	0x3ff80000
 800a494:	0800d1a8 	.word	0x0800d1a8
 800a498:	0800d030 	.word	0x0800d030
 800a49c:	2501      	movs	r5, #1
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9306      	str	r3, [sp, #24]
 800a4a2:	9508      	str	r5, [sp, #32]
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2312      	movs	r3, #18
 800a4b0:	e7b0      	b.n	800a414 <_dtoa_r+0x26c>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	9308      	str	r3, [sp, #32]
 800a4b6:	e7f5      	b.n	800a4a4 <_dtoa_r+0x2fc>
 800a4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4be:	e7b8      	b.n	800a432 <_dtoa_r+0x28a>
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	6041      	str	r1, [r0, #4]
 800a4c4:	0052      	lsls	r2, r2, #1
 800a4c6:	e7b8      	b.n	800a43a <_dtoa_r+0x292>
 800a4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	2b0e      	cmp	r3, #14
 800a4d2:	f200 809d 	bhi.w	800a610 <_dtoa_r+0x468>
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	f000 809a 	beq.w	800a610 <_dtoa_r+0x468>
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dd32      	ble.n	800a548 <_dtoa_r+0x3a0>
 800a4e2:	4ab7      	ldr	r2, [pc, #732]	; (800a7c0 <_dtoa_r+0x618>)
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f0:	9b00      	ldr	r3, [sp, #0]
 800a4f2:	05d8      	lsls	r0, r3, #23
 800a4f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4f8:	d516      	bpl.n	800a528 <_dtoa_r+0x380>
 800a4fa:	4bb2      	ldr	r3, [pc, #712]	; (800a7c4 <_dtoa_r+0x61c>)
 800a4fc:	ec51 0b19 	vmov	r0, r1, d9
 800a500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a504:	f7f6 f9a2 	bl	800084c <__aeabi_ddiv>
 800a508:	f007 070f 	and.w	r7, r7, #15
 800a50c:	4682      	mov	sl, r0
 800a50e:	468b      	mov	fp, r1
 800a510:	2503      	movs	r5, #3
 800a512:	4eac      	ldr	r6, [pc, #688]	; (800a7c4 <_dtoa_r+0x61c>)
 800a514:	b957      	cbnz	r7, 800a52c <_dtoa_r+0x384>
 800a516:	4642      	mov	r2, r8
 800a518:	464b      	mov	r3, r9
 800a51a:	4650      	mov	r0, sl
 800a51c:	4659      	mov	r1, fp
 800a51e:	f7f6 f995 	bl	800084c <__aeabi_ddiv>
 800a522:	4682      	mov	sl, r0
 800a524:	468b      	mov	fp, r1
 800a526:	e028      	b.n	800a57a <_dtoa_r+0x3d2>
 800a528:	2502      	movs	r5, #2
 800a52a:	e7f2      	b.n	800a512 <_dtoa_r+0x36a>
 800a52c:	07f9      	lsls	r1, r7, #31
 800a52e:	d508      	bpl.n	800a542 <_dtoa_r+0x39a>
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a538:	f7f6 f85e 	bl	80005f8 <__aeabi_dmul>
 800a53c:	3501      	adds	r5, #1
 800a53e:	4680      	mov	r8, r0
 800a540:	4689      	mov	r9, r1
 800a542:	107f      	asrs	r7, r7, #1
 800a544:	3608      	adds	r6, #8
 800a546:	e7e5      	b.n	800a514 <_dtoa_r+0x36c>
 800a548:	f000 809b 	beq.w	800a682 <_dtoa_r+0x4da>
 800a54c:	9b00      	ldr	r3, [sp, #0]
 800a54e:	4f9d      	ldr	r7, [pc, #628]	; (800a7c4 <_dtoa_r+0x61c>)
 800a550:	425e      	negs	r6, r3
 800a552:	4b9b      	ldr	r3, [pc, #620]	; (800a7c0 <_dtoa_r+0x618>)
 800a554:	f006 020f 	and.w	r2, r6, #15
 800a558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	ec51 0b19 	vmov	r0, r1, d9
 800a564:	f7f6 f848 	bl	80005f8 <__aeabi_dmul>
 800a568:	1136      	asrs	r6, r6, #4
 800a56a:	4682      	mov	sl, r0
 800a56c:	468b      	mov	fp, r1
 800a56e:	2300      	movs	r3, #0
 800a570:	2502      	movs	r5, #2
 800a572:	2e00      	cmp	r6, #0
 800a574:	d17a      	bne.n	800a66c <_dtoa_r+0x4c4>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1d3      	bne.n	800a522 <_dtoa_r+0x37a>
 800a57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8082 	beq.w	800a686 <_dtoa_r+0x4de>
 800a582:	4b91      	ldr	r3, [pc, #580]	; (800a7c8 <_dtoa_r+0x620>)
 800a584:	2200      	movs	r2, #0
 800a586:	4650      	mov	r0, sl
 800a588:	4659      	mov	r1, fp
 800a58a:	f7f6 faa7 	bl	8000adc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d079      	beq.n	800a686 <_dtoa_r+0x4de>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d076      	beq.n	800a686 <_dtoa_r+0x4de>
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd36      	ble.n	800a60c <_dtoa_r+0x464>
 800a59e:	9b00      	ldr	r3, [sp, #0]
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	4659      	mov	r1, fp
 800a5a4:	1e5f      	subs	r7, r3, #1
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4b88      	ldr	r3, [pc, #544]	; (800a7cc <_dtoa_r+0x624>)
 800a5aa:	f7f6 f825 	bl	80005f8 <__aeabi_dmul>
 800a5ae:	9e02      	ldr	r6, [sp, #8]
 800a5b0:	4682      	mov	sl, r0
 800a5b2:	468b      	mov	fp, r1
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f7f5 ffb4 	bl	8000524 <__aeabi_i2d>
 800a5bc:	4652      	mov	r2, sl
 800a5be:	465b      	mov	r3, fp
 800a5c0:	f7f6 f81a 	bl	80005f8 <__aeabi_dmul>
 800a5c4:	4b82      	ldr	r3, [pc, #520]	; (800a7d0 <_dtoa_r+0x628>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f7f5 fe60 	bl	800028c <__adddf3>
 800a5cc:	46d0      	mov	r8, sl
 800a5ce:	46d9      	mov	r9, fp
 800a5d0:	4682      	mov	sl, r0
 800a5d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d158      	bne.n	800a68c <_dtoa_r+0x4e4>
 800a5da:	4b7e      	ldr	r3, [pc, #504]	; (800a7d4 <_dtoa_r+0x62c>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f7f5 fe51 	bl	8000288 <__aeabi_dsub>
 800a5e6:	4652      	mov	r2, sl
 800a5e8:	465b      	mov	r3, fp
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4689      	mov	r9, r1
 800a5ee:	f7f6 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f040 8295 	bne.w	800ab22 <_dtoa_r+0x97a>
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5fe:	4640      	mov	r0, r8
 800a600:	4649      	mov	r1, r9
 800a602:	f7f6 fa6b 	bl	8000adc <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f040 8289 	bne.w	800ab1e <_dtoa_r+0x976>
 800a60c:	ec5b ab19 	vmov	sl, fp, d9
 800a610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a612:	2b00      	cmp	r3, #0
 800a614:	f2c0 8148 	blt.w	800a8a8 <_dtoa_r+0x700>
 800a618:	9a00      	ldr	r2, [sp, #0]
 800a61a:	2a0e      	cmp	r2, #14
 800a61c:	f300 8144 	bgt.w	800a8a8 <_dtoa_r+0x700>
 800a620:	4b67      	ldr	r3, [pc, #412]	; (800a7c0 <_dtoa_r+0x618>)
 800a622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f280 80d5 	bge.w	800a7dc <_dtoa_r+0x634>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f300 80d1 	bgt.w	800a7dc <_dtoa_r+0x634>
 800a63a:	f040 826f 	bne.w	800ab1c <_dtoa_r+0x974>
 800a63e:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <_dtoa_r+0x62c>)
 800a640:	2200      	movs	r2, #0
 800a642:	4640      	mov	r0, r8
 800a644:	4649      	mov	r1, r9
 800a646:	f7f5 ffd7 	bl	80005f8 <__aeabi_dmul>
 800a64a:	4652      	mov	r2, sl
 800a64c:	465b      	mov	r3, fp
 800a64e:	f7f6 fa59 	bl	8000b04 <__aeabi_dcmpge>
 800a652:	9e03      	ldr	r6, [sp, #12]
 800a654:	4637      	mov	r7, r6
 800a656:	2800      	cmp	r0, #0
 800a658:	f040 8245 	bne.w	800aae6 <_dtoa_r+0x93e>
 800a65c:	9d01      	ldr	r5, [sp, #4]
 800a65e:	2331      	movs	r3, #49	; 0x31
 800a660:	f805 3b01 	strb.w	r3, [r5], #1
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	e240      	b.n	800aaee <_dtoa_r+0x946>
 800a66c:	07f2      	lsls	r2, r6, #31
 800a66e:	d505      	bpl.n	800a67c <_dtoa_r+0x4d4>
 800a670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	3501      	adds	r5, #1
 800a67a:	2301      	movs	r3, #1
 800a67c:	1076      	asrs	r6, r6, #1
 800a67e:	3708      	adds	r7, #8
 800a680:	e777      	b.n	800a572 <_dtoa_r+0x3ca>
 800a682:	2502      	movs	r5, #2
 800a684:	e779      	b.n	800a57a <_dtoa_r+0x3d2>
 800a686:	9f00      	ldr	r7, [sp, #0]
 800a688:	9e03      	ldr	r6, [sp, #12]
 800a68a:	e794      	b.n	800a5b6 <_dtoa_r+0x40e>
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	4b4c      	ldr	r3, [pc, #304]	; (800a7c0 <_dtoa_r+0x618>)
 800a690:	4431      	add	r1, r6
 800a692:	910d      	str	r1, [sp, #52]	; 0x34
 800a694:	9908      	ldr	r1, [sp, #32]
 800a696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a69a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a69e:	2900      	cmp	r1, #0
 800a6a0:	d043      	beq.n	800a72a <_dtoa_r+0x582>
 800a6a2:	494d      	ldr	r1, [pc, #308]	; (800a7d8 <_dtoa_r+0x630>)
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f7f6 f8d1 	bl	800084c <__aeabi_ddiv>
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	f7f5 fdeb 	bl	8000288 <__aeabi_dsub>
 800a6b2:	9d01      	ldr	r5, [sp, #4]
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	468b      	mov	fp, r1
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f7f6 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	f7f5 ff2f 	bl	8000524 <__aeabi_i2d>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 fddb 	bl	8000288 <__aeabi_dsub>
 800a6d2:	3630      	adds	r6, #48	; 0x30
 800a6d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6d8:	4652      	mov	r2, sl
 800a6da:	465b      	mov	r3, fp
 800a6dc:	4680      	mov	r8, r0
 800a6de:	4689      	mov	r9, r1
 800a6e0:	f7f6 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d163      	bne.n	800a7b0 <_dtoa_r+0x608>
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	4936      	ldr	r1, [pc, #216]	; (800a7c8 <_dtoa_r+0x620>)
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	f7f5 fdca 	bl	8000288 <__aeabi_dsub>
 800a6f4:	4652      	mov	r2, sl
 800a6f6:	465b      	mov	r3, fp
 800a6f8:	f7f6 f9f0 	bl	8000adc <__aeabi_dcmplt>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	f040 80b5 	bne.w	800a86c <_dtoa_r+0x6c4>
 800a702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a704:	429d      	cmp	r5, r3
 800a706:	d081      	beq.n	800a60c <_dtoa_r+0x464>
 800a708:	4b30      	ldr	r3, [pc, #192]	; (800a7cc <_dtoa_r+0x624>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	4650      	mov	r0, sl
 800a70e:	4659      	mov	r1, fp
 800a710:	f7f5 ff72 	bl	80005f8 <__aeabi_dmul>
 800a714:	4b2d      	ldr	r3, [pc, #180]	; (800a7cc <_dtoa_r+0x624>)
 800a716:	4682      	mov	sl, r0
 800a718:	468b      	mov	fp, r1
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	2200      	movs	r2, #0
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4680      	mov	r8, r0
 800a726:	4689      	mov	r9, r1
 800a728:	e7c6      	b.n	800a6b8 <_dtoa_r+0x510>
 800a72a:	4650      	mov	r0, sl
 800a72c:	4659      	mov	r1, fp
 800a72e:	f7f5 ff63 	bl	80005f8 <__aeabi_dmul>
 800a732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a734:	9d01      	ldr	r5, [sp, #4]
 800a736:	930f      	str	r3, [sp, #60]	; 0x3c
 800a738:	4682      	mov	sl, r0
 800a73a:	468b      	mov	fp, r1
 800a73c:	4649      	mov	r1, r9
 800a73e:	4640      	mov	r0, r8
 800a740:	f7f6 fa0a 	bl	8000b58 <__aeabi_d2iz>
 800a744:	4606      	mov	r6, r0
 800a746:	f7f5 feed 	bl	8000524 <__aeabi_i2d>
 800a74a:	3630      	adds	r6, #48	; 0x30
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 fd98 	bl	8000288 <__aeabi_dsub>
 800a758:	f805 6b01 	strb.w	r6, [r5], #1
 800a75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a75e:	429d      	cmp	r5, r3
 800a760:	4680      	mov	r8, r0
 800a762:	4689      	mov	r9, r1
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	d124      	bne.n	800a7b4 <_dtoa_r+0x60c>
 800a76a:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <_dtoa_r+0x630>)
 800a76c:	4650      	mov	r0, sl
 800a76e:	4659      	mov	r1, fp
 800a770:	f7f5 fd8c 	bl	800028c <__adddf3>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4640      	mov	r0, r8
 800a77a:	4649      	mov	r1, r9
 800a77c:	f7f6 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 800a780:	2800      	cmp	r0, #0
 800a782:	d173      	bne.n	800a86c <_dtoa_r+0x6c4>
 800a784:	4652      	mov	r2, sl
 800a786:	465b      	mov	r3, fp
 800a788:	4913      	ldr	r1, [pc, #76]	; (800a7d8 <_dtoa_r+0x630>)
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7f5 fd7c 	bl	8000288 <__aeabi_dsub>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4640      	mov	r0, r8
 800a796:	4649      	mov	r1, r9
 800a798:	f7f6 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f43f af35 	beq.w	800a60c <_dtoa_r+0x464>
 800a7a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7a4:	1e6b      	subs	r3, r5, #1
 800a7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7ac:	2b30      	cmp	r3, #48	; 0x30
 800a7ae:	d0f8      	beq.n	800a7a2 <_dtoa_r+0x5fa>
 800a7b0:	9700      	str	r7, [sp, #0]
 800a7b2:	e049      	b.n	800a848 <_dtoa_r+0x6a0>
 800a7b4:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <_dtoa_r+0x624>)
 800a7b6:	f7f5 ff1f 	bl	80005f8 <__aeabi_dmul>
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	4689      	mov	r9, r1
 800a7be:	e7bd      	b.n	800a73c <_dtoa_r+0x594>
 800a7c0:	0800d1a8 	.word	0x0800d1a8
 800a7c4:	0800d180 	.word	0x0800d180
 800a7c8:	3ff00000 	.word	0x3ff00000
 800a7cc:	40240000 	.word	0x40240000
 800a7d0:	401c0000 	.word	0x401c0000
 800a7d4:	40140000 	.word	0x40140000
 800a7d8:	3fe00000 	.word	0x3fe00000
 800a7dc:	9d01      	ldr	r5, [sp, #4]
 800a7de:	4656      	mov	r6, sl
 800a7e0:	465f      	mov	r7, fp
 800a7e2:	4642      	mov	r2, r8
 800a7e4:	464b      	mov	r3, r9
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f6 f82f 	bl	800084c <__aeabi_ddiv>
 800a7ee:	f7f6 f9b3 	bl	8000b58 <__aeabi_d2iz>
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	f7f5 fe96 	bl	8000524 <__aeabi_i2d>
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4630      	mov	r0, r6
 800a806:	4639      	mov	r1, r7
 800a808:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a80c:	f7f5 fd3c 	bl	8000288 <__aeabi_dsub>
 800a810:	f805 6b01 	strb.w	r6, [r5], #1
 800a814:	9e01      	ldr	r6, [sp, #4]
 800a816:	9f03      	ldr	r7, [sp, #12]
 800a818:	1bae      	subs	r6, r5, r6
 800a81a:	42b7      	cmp	r7, r6
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	d135      	bne.n	800a88e <_dtoa_r+0x6e6>
 800a822:	f7f5 fd33 	bl	800028c <__adddf3>
 800a826:	4642      	mov	r2, r8
 800a828:	464b      	mov	r3, r9
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	f7f6 f973 	bl	8000b18 <__aeabi_dcmpgt>
 800a832:	b9d0      	cbnz	r0, 800a86a <_dtoa_r+0x6c2>
 800a834:	4642      	mov	r2, r8
 800a836:	464b      	mov	r3, r9
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800a840:	b110      	cbz	r0, 800a848 <_dtoa_r+0x6a0>
 800a842:	f01a 0f01 	tst.w	sl, #1
 800a846:	d110      	bne.n	800a86a <_dtoa_r+0x6c2>
 800a848:	4620      	mov	r0, r4
 800a84a:	ee18 1a10 	vmov	r1, s16
 800a84e:	f001 f893 	bl	800b978 <_Bfree>
 800a852:	2300      	movs	r3, #0
 800a854:	9800      	ldr	r0, [sp, #0]
 800a856:	702b      	strb	r3, [r5, #0]
 800a858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a85a:	3001      	adds	r0, #1
 800a85c:	6018      	str	r0, [r3, #0]
 800a85e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a860:	2b00      	cmp	r3, #0
 800a862:	f43f acf1 	beq.w	800a248 <_dtoa_r+0xa0>
 800a866:	601d      	str	r5, [r3, #0]
 800a868:	e4ee      	b.n	800a248 <_dtoa_r+0xa0>
 800a86a:	9f00      	ldr	r7, [sp, #0]
 800a86c:	462b      	mov	r3, r5
 800a86e:	461d      	mov	r5, r3
 800a870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a874:	2a39      	cmp	r2, #57	; 0x39
 800a876:	d106      	bne.n	800a886 <_dtoa_r+0x6de>
 800a878:	9a01      	ldr	r2, [sp, #4]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d1f7      	bne.n	800a86e <_dtoa_r+0x6c6>
 800a87e:	9901      	ldr	r1, [sp, #4]
 800a880:	2230      	movs	r2, #48	; 0x30
 800a882:	3701      	adds	r7, #1
 800a884:	700a      	strb	r2, [r1, #0]
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	3201      	adds	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
 800a88c:	e790      	b.n	800a7b0 <_dtoa_r+0x608>
 800a88e:	4ba6      	ldr	r3, [pc, #664]	; (800ab28 <_dtoa_r+0x980>)
 800a890:	2200      	movs	r2, #0
 800a892:	f7f5 feb1 	bl	80005f8 <__aeabi_dmul>
 800a896:	2200      	movs	r2, #0
 800a898:	2300      	movs	r3, #0
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	f7f6 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d09d      	beq.n	800a7e2 <_dtoa_r+0x63a>
 800a8a6:	e7cf      	b.n	800a848 <_dtoa_r+0x6a0>
 800a8a8:	9a08      	ldr	r2, [sp, #32]
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	f000 80d7 	beq.w	800aa5e <_dtoa_r+0x8b6>
 800a8b0:	9a06      	ldr	r2, [sp, #24]
 800a8b2:	2a01      	cmp	r2, #1
 800a8b4:	f300 80ba 	bgt.w	800aa2c <_dtoa_r+0x884>
 800a8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	f000 80b2 	beq.w	800aa24 <_dtoa_r+0x87c>
 800a8c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8c4:	9e07      	ldr	r6, [sp, #28]
 800a8c6:	9d04      	ldr	r5, [sp, #16]
 800a8c8:	9a04      	ldr	r2, [sp, #16]
 800a8ca:	441a      	add	r2, r3
 800a8cc:	9204      	str	r2, [sp, #16]
 800a8ce:	9a05      	ldr	r2, [sp, #20]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	441a      	add	r2, r3
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	9205      	str	r2, [sp, #20]
 800a8d8:	f001 f950 	bl	800bb7c <__i2b>
 800a8dc:	4607      	mov	r7, r0
 800a8de:	2d00      	cmp	r5, #0
 800a8e0:	dd0c      	ble.n	800a8fc <_dtoa_r+0x754>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd09      	ble.n	800a8fc <_dtoa_r+0x754>
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	9a04      	ldr	r2, [sp, #16]
 800a8ec:	bfa8      	it	ge
 800a8ee:	462b      	movge	r3, r5
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	9204      	str	r2, [sp, #16]
 800a8f4:	9a05      	ldr	r2, [sp, #20]
 800a8f6:	1aed      	subs	r5, r5, r3
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	b31b      	cbz	r3, 800a948 <_dtoa_r+0x7a0>
 800a900:	9b08      	ldr	r3, [sp, #32]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 80af 	beq.w	800aa66 <_dtoa_r+0x8be>
 800a908:	2e00      	cmp	r6, #0
 800a90a:	dd13      	ble.n	800a934 <_dtoa_r+0x78c>
 800a90c:	4639      	mov	r1, r7
 800a90e:	4632      	mov	r2, r6
 800a910:	4620      	mov	r0, r4
 800a912:	f001 f9f3 	bl	800bcfc <__pow5mult>
 800a916:	ee18 2a10 	vmov	r2, s16
 800a91a:	4601      	mov	r1, r0
 800a91c:	4607      	mov	r7, r0
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 f942 	bl	800bba8 <__multiply>
 800a924:	ee18 1a10 	vmov	r1, s16
 800a928:	4680      	mov	r8, r0
 800a92a:	4620      	mov	r0, r4
 800a92c:	f001 f824 	bl	800b978 <_Bfree>
 800a930:	ee08 8a10 	vmov	s16, r8
 800a934:	9b07      	ldr	r3, [sp, #28]
 800a936:	1b9a      	subs	r2, r3, r6
 800a938:	d006      	beq.n	800a948 <_dtoa_r+0x7a0>
 800a93a:	ee18 1a10 	vmov	r1, s16
 800a93e:	4620      	mov	r0, r4
 800a940:	f001 f9dc 	bl	800bcfc <__pow5mult>
 800a944:	ee08 0a10 	vmov	s16, r0
 800a948:	2101      	movs	r1, #1
 800a94a:	4620      	mov	r0, r4
 800a94c:	f001 f916 	bl	800bb7c <__i2b>
 800a950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	4606      	mov	r6, r0
 800a956:	f340 8088 	ble.w	800aa6a <_dtoa_r+0x8c2>
 800a95a:	461a      	mov	r2, r3
 800a95c:	4601      	mov	r1, r0
 800a95e:	4620      	mov	r0, r4
 800a960:	f001 f9cc 	bl	800bcfc <__pow5mult>
 800a964:	9b06      	ldr	r3, [sp, #24]
 800a966:	2b01      	cmp	r3, #1
 800a968:	4606      	mov	r6, r0
 800a96a:	f340 8081 	ble.w	800aa70 <_dtoa_r+0x8c8>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	6933      	ldr	r3, [r6, #16]
 800a974:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a978:	6918      	ldr	r0, [r3, #16]
 800a97a:	f001 f8af 	bl	800badc <__hi0bits>
 800a97e:	f1c0 0020 	rsb	r0, r0, #32
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	4418      	add	r0, r3
 800a986:	f010 001f 	ands.w	r0, r0, #31
 800a98a:	f000 8092 	beq.w	800aab2 <_dtoa_r+0x90a>
 800a98e:	f1c0 0320 	rsb	r3, r0, #32
 800a992:	2b04      	cmp	r3, #4
 800a994:	f340 808a 	ble.w	800aaac <_dtoa_r+0x904>
 800a998:	f1c0 001c 	rsb	r0, r0, #28
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	4403      	add	r3, r0
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9b05      	ldr	r3, [sp, #20]
 800a9a4:	4403      	add	r3, r0
 800a9a6:	4405      	add	r5, r0
 800a9a8:	9305      	str	r3, [sp, #20]
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd07      	ble.n	800a9c0 <_dtoa_r+0x818>
 800a9b0:	ee18 1a10 	vmov	r1, s16
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 f9fa 	bl	800bdb0 <__lshift>
 800a9bc:	ee08 0a10 	vmov	s16, r0
 800a9c0:	9b05      	ldr	r3, [sp, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd05      	ble.n	800a9d2 <_dtoa_r+0x82a>
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f001 f9f0 	bl	800bdb0 <__lshift>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d06e      	beq.n	800aab6 <_dtoa_r+0x90e>
 800a9d8:	ee18 0a10 	vmov	r0, s16
 800a9dc:	4631      	mov	r1, r6
 800a9de:	f001 fa57 	bl	800be90 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da67      	bge.n	800aab6 <_dtoa_r+0x90e>
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	ee18 1a10 	vmov	r1, s16
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	220a      	movs	r2, #10
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 ffe1 	bl	800b9bc <__multadd>
 800a9fa:	9b08      	ldr	r3, [sp, #32]
 800a9fc:	ee08 0a10 	vmov	s16, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 81b1 	beq.w	800ad68 <_dtoa_r+0xbc0>
 800aa06:	2300      	movs	r3, #0
 800aa08:	4639      	mov	r1, r7
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 ffd5 	bl	800b9bc <__multadd>
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	4607      	mov	r7, r0
 800aa18:	f300 808e 	bgt.w	800ab38 <_dtoa_r+0x990>
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	dc51      	bgt.n	800aac6 <_dtoa_r+0x91e>
 800aa22:	e089      	b.n	800ab38 <_dtoa_r+0x990>
 800aa24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa2a:	e74b      	b.n	800a8c4 <_dtoa_r+0x71c>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	1e5e      	subs	r6, r3, #1
 800aa30:	9b07      	ldr	r3, [sp, #28]
 800aa32:	42b3      	cmp	r3, r6
 800aa34:	bfbf      	itttt	lt
 800aa36:	9b07      	ldrlt	r3, [sp, #28]
 800aa38:	9607      	strlt	r6, [sp, #28]
 800aa3a:	1af2      	sublt	r2, r6, r3
 800aa3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa3e:	bfb6      	itet	lt
 800aa40:	189b      	addlt	r3, r3, r2
 800aa42:	1b9e      	subge	r6, r3, r6
 800aa44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	bfb8      	it	lt
 800aa4a:	2600      	movlt	r6, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfb7      	itett	lt
 800aa50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa58:	1a9d      	sublt	r5, r3, r2
 800aa5a:	2300      	movlt	r3, #0
 800aa5c:	e734      	b.n	800a8c8 <_dtoa_r+0x720>
 800aa5e:	9e07      	ldr	r6, [sp, #28]
 800aa60:	9d04      	ldr	r5, [sp, #16]
 800aa62:	9f08      	ldr	r7, [sp, #32]
 800aa64:	e73b      	b.n	800a8de <_dtoa_r+0x736>
 800aa66:	9a07      	ldr	r2, [sp, #28]
 800aa68:	e767      	b.n	800a93a <_dtoa_r+0x792>
 800aa6a:	9b06      	ldr	r3, [sp, #24]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	dc18      	bgt.n	800aaa2 <_dtoa_r+0x8fa>
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	d115      	bne.n	800aaa2 <_dtoa_r+0x8fa>
 800aa76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa7a:	b993      	cbnz	r3, 800aaa2 <_dtoa_r+0x8fa>
 800aa7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa80:	0d1b      	lsrs	r3, r3, #20
 800aa82:	051b      	lsls	r3, r3, #20
 800aa84:	b183      	cbz	r3, 800aaa8 <_dtoa_r+0x900>
 800aa86:	9b04      	ldr	r3, [sp, #16]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	9b05      	ldr	r3, [sp, #20]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	9305      	str	r3, [sp, #20]
 800aa92:	f04f 0801 	mov.w	r8, #1
 800aa96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f47f af6a 	bne.w	800a972 <_dtoa_r+0x7ca>
 800aa9e:	2001      	movs	r0, #1
 800aaa0:	e76f      	b.n	800a982 <_dtoa_r+0x7da>
 800aaa2:	f04f 0800 	mov.w	r8, #0
 800aaa6:	e7f6      	b.n	800aa96 <_dtoa_r+0x8ee>
 800aaa8:	4698      	mov	r8, r3
 800aaaa:	e7f4      	b.n	800aa96 <_dtoa_r+0x8ee>
 800aaac:	f43f af7d 	beq.w	800a9aa <_dtoa_r+0x802>
 800aab0:	4618      	mov	r0, r3
 800aab2:	301c      	adds	r0, #28
 800aab4:	e772      	b.n	800a99c <_dtoa_r+0x7f4>
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc37      	bgt.n	800ab2c <_dtoa_r+0x984>
 800aabc:	9b06      	ldr	r3, [sp, #24]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	dd34      	ble.n	800ab2c <_dtoa_r+0x984>
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	9302      	str	r3, [sp, #8]
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	b96b      	cbnz	r3, 800aae6 <_dtoa_r+0x93e>
 800aaca:	4631      	mov	r1, r6
 800aacc:	2205      	movs	r2, #5
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 ff74 	bl	800b9bc <__multadd>
 800aad4:	4601      	mov	r1, r0
 800aad6:	4606      	mov	r6, r0
 800aad8:	ee18 0a10 	vmov	r0, s16
 800aadc:	f001 f9d8 	bl	800be90 <__mcmp>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f73f adbb 	bgt.w	800a65c <_dtoa_r+0x4b4>
 800aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae8:	9d01      	ldr	r5, [sp, #4]
 800aaea:	43db      	mvns	r3, r3
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	f04f 0800 	mov.w	r8, #0
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 ff3f 	bl	800b978 <_Bfree>
 800aafa:	2f00      	cmp	r7, #0
 800aafc:	f43f aea4 	beq.w	800a848 <_dtoa_r+0x6a0>
 800ab00:	f1b8 0f00 	cmp.w	r8, #0
 800ab04:	d005      	beq.n	800ab12 <_dtoa_r+0x96a>
 800ab06:	45b8      	cmp	r8, r7
 800ab08:	d003      	beq.n	800ab12 <_dtoa_r+0x96a>
 800ab0a:	4641      	mov	r1, r8
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 ff33 	bl	800b978 <_Bfree>
 800ab12:	4639      	mov	r1, r7
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 ff2f 	bl	800b978 <_Bfree>
 800ab1a:	e695      	b.n	800a848 <_dtoa_r+0x6a0>
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	4637      	mov	r7, r6
 800ab20:	e7e1      	b.n	800aae6 <_dtoa_r+0x93e>
 800ab22:	9700      	str	r7, [sp, #0]
 800ab24:	4637      	mov	r7, r6
 800ab26:	e599      	b.n	800a65c <_dtoa_r+0x4b4>
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	9b08      	ldr	r3, [sp, #32]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 80ca 	beq.w	800acc8 <_dtoa_r+0xb20>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	dd05      	ble.n	800ab48 <_dtoa_r+0x9a0>
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4620      	mov	r0, r4
 800ab42:	f001 f935 	bl	800bdb0 <__lshift>
 800ab46:	4607      	mov	r7, r0
 800ab48:	f1b8 0f00 	cmp.w	r8, #0
 800ab4c:	d05b      	beq.n	800ac06 <_dtoa_r+0xa5e>
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fed1 	bl	800b8f8 <_Balloc>
 800ab56:	4605      	mov	r5, r0
 800ab58:	b928      	cbnz	r0, 800ab66 <_dtoa_r+0x9be>
 800ab5a:	4b87      	ldr	r3, [pc, #540]	; (800ad78 <_dtoa_r+0xbd0>)
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab62:	f7ff bb3b 	b.w	800a1dc <_dtoa_r+0x34>
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	3202      	adds	r2, #2
 800ab6a:	0092      	lsls	r2, r2, #2
 800ab6c:	f107 010c 	add.w	r1, r7, #12
 800ab70:	300c      	adds	r0, #12
 800ab72:	f000 feb3 	bl	800b8dc <memcpy>
 800ab76:	2201      	movs	r2, #1
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f001 f918 	bl	800bdb0 <__lshift>
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	f103 0901 	add.w	r9, r3, #1
 800ab86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	f00a 0301 	and.w	r3, sl, #1
 800ab92:	46b8      	mov	r8, r7
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	4607      	mov	r7, r0
 800ab98:	4631      	mov	r1, r6
 800ab9a:	ee18 0a10 	vmov	r0, s16
 800ab9e:	f7ff fa77 	bl	800a090 <quorem>
 800aba2:	4641      	mov	r1, r8
 800aba4:	9002      	str	r0, [sp, #8]
 800aba6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abaa:	ee18 0a10 	vmov	r0, s16
 800abae:	f001 f96f 	bl	800be90 <__mcmp>
 800abb2:	463a      	mov	r2, r7
 800abb4:	9003      	str	r0, [sp, #12]
 800abb6:	4631      	mov	r1, r6
 800abb8:	4620      	mov	r0, r4
 800abba:	f001 f985 	bl	800bec8 <__mdiff>
 800abbe:	68c2      	ldr	r2, [r0, #12]
 800abc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800abc4:	4605      	mov	r5, r0
 800abc6:	bb02      	cbnz	r2, 800ac0a <_dtoa_r+0xa62>
 800abc8:	4601      	mov	r1, r0
 800abca:	ee18 0a10 	vmov	r0, s16
 800abce:	f001 f95f 	bl	800be90 <__mcmp>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4629      	mov	r1, r5
 800abd6:	4620      	mov	r0, r4
 800abd8:	9207      	str	r2, [sp, #28]
 800abda:	f000 fecd 	bl	800b978 <_Bfree>
 800abde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800abe2:	ea43 0102 	orr.w	r1, r3, r2
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	430b      	orrs	r3, r1
 800abea:	464d      	mov	r5, r9
 800abec:	d10f      	bne.n	800ac0e <_dtoa_r+0xa66>
 800abee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abf2:	d02a      	beq.n	800ac4a <_dtoa_r+0xaa2>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd02      	ble.n	800ac00 <_dtoa_r+0xa58>
 800abfa:	9b02      	ldr	r3, [sp, #8]
 800abfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac00:	f88b a000 	strb.w	sl, [fp]
 800ac04:	e775      	b.n	800aaf2 <_dtoa_r+0x94a>
 800ac06:	4638      	mov	r0, r7
 800ac08:	e7ba      	b.n	800ab80 <_dtoa_r+0x9d8>
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	e7e2      	b.n	800abd4 <_dtoa_r+0xa2c>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	db04      	blt.n	800ac1e <_dtoa_r+0xa76>
 800ac14:	9906      	ldr	r1, [sp, #24]
 800ac16:	430b      	orrs	r3, r1
 800ac18:	9904      	ldr	r1, [sp, #16]
 800ac1a:	430b      	orrs	r3, r1
 800ac1c:	d122      	bne.n	800ac64 <_dtoa_r+0xabc>
 800ac1e:	2a00      	cmp	r2, #0
 800ac20:	ddee      	ble.n	800ac00 <_dtoa_r+0xa58>
 800ac22:	ee18 1a10 	vmov	r1, s16
 800ac26:	2201      	movs	r2, #1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f001 f8c1 	bl	800bdb0 <__lshift>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	ee08 0a10 	vmov	s16, r0
 800ac34:	f001 f92c 	bl	800be90 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dc03      	bgt.n	800ac44 <_dtoa_r+0xa9c>
 800ac3c:	d1e0      	bne.n	800ac00 <_dtoa_r+0xa58>
 800ac3e:	f01a 0f01 	tst.w	sl, #1
 800ac42:	d0dd      	beq.n	800ac00 <_dtoa_r+0xa58>
 800ac44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac48:	d1d7      	bne.n	800abfa <_dtoa_r+0xa52>
 800ac4a:	2339      	movs	r3, #57	; 0x39
 800ac4c:	f88b 3000 	strb.w	r3, [fp]
 800ac50:	462b      	mov	r3, r5
 800ac52:	461d      	mov	r5, r3
 800ac54:	3b01      	subs	r3, #1
 800ac56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac5a:	2a39      	cmp	r2, #57	; 0x39
 800ac5c:	d071      	beq.n	800ad42 <_dtoa_r+0xb9a>
 800ac5e:	3201      	adds	r2, #1
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	e746      	b.n	800aaf2 <_dtoa_r+0x94a>
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	dd07      	ble.n	800ac78 <_dtoa_r+0xad0>
 800ac68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac6c:	d0ed      	beq.n	800ac4a <_dtoa_r+0xaa2>
 800ac6e:	f10a 0301 	add.w	r3, sl, #1
 800ac72:	f88b 3000 	strb.w	r3, [fp]
 800ac76:	e73c      	b.n	800aaf2 <_dtoa_r+0x94a>
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac7e:	4599      	cmp	r9, r3
 800ac80:	d047      	beq.n	800ad12 <_dtoa_r+0xb6a>
 800ac82:	ee18 1a10 	vmov	r1, s16
 800ac86:	2300      	movs	r3, #0
 800ac88:	220a      	movs	r2, #10
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 fe96 	bl	800b9bc <__multadd>
 800ac90:	45b8      	cmp	r8, r7
 800ac92:	ee08 0a10 	vmov	s16, r0
 800ac96:	f04f 0300 	mov.w	r3, #0
 800ac9a:	f04f 020a 	mov.w	r2, #10
 800ac9e:	4641      	mov	r1, r8
 800aca0:	4620      	mov	r0, r4
 800aca2:	d106      	bne.n	800acb2 <_dtoa_r+0xb0a>
 800aca4:	f000 fe8a 	bl	800b9bc <__multadd>
 800aca8:	4680      	mov	r8, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	f109 0901 	add.w	r9, r9, #1
 800acb0:	e772      	b.n	800ab98 <_dtoa_r+0x9f0>
 800acb2:	f000 fe83 	bl	800b9bc <__multadd>
 800acb6:	4639      	mov	r1, r7
 800acb8:	4680      	mov	r8, r0
 800acba:	2300      	movs	r3, #0
 800acbc:	220a      	movs	r2, #10
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 fe7c 	bl	800b9bc <__multadd>
 800acc4:	4607      	mov	r7, r0
 800acc6:	e7f1      	b.n	800acac <_dtoa_r+0xb04>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	9302      	str	r3, [sp, #8]
 800accc:	9d01      	ldr	r5, [sp, #4]
 800acce:	ee18 0a10 	vmov	r0, s16
 800acd2:	4631      	mov	r1, r6
 800acd4:	f7ff f9dc 	bl	800a090 <quorem>
 800acd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	f805 ab01 	strb.w	sl, [r5], #1
 800ace2:	1aea      	subs	r2, r5, r3
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	4293      	cmp	r3, r2
 800ace8:	dd09      	ble.n	800acfe <_dtoa_r+0xb56>
 800acea:	ee18 1a10 	vmov	r1, s16
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 fe62 	bl	800b9bc <__multadd>
 800acf8:	ee08 0a10 	vmov	s16, r0
 800acfc:	e7e7      	b.n	800acce <_dtoa_r+0xb26>
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfc8      	it	gt
 800ad04:	461d      	movgt	r5, r3
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	bfd8      	it	le
 800ad0a:	2501      	movle	r5, #1
 800ad0c:	441d      	add	r5, r3
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	ee18 1a10 	vmov	r1, s16
 800ad16:	2201      	movs	r2, #1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 f849 	bl	800bdb0 <__lshift>
 800ad1e:	4631      	mov	r1, r6
 800ad20:	ee08 0a10 	vmov	s16, r0
 800ad24:	f001 f8b4 	bl	800be90 <__mcmp>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dc91      	bgt.n	800ac50 <_dtoa_r+0xaa8>
 800ad2c:	d102      	bne.n	800ad34 <_dtoa_r+0xb8c>
 800ad2e:	f01a 0f01 	tst.w	sl, #1
 800ad32:	d18d      	bne.n	800ac50 <_dtoa_r+0xaa8>
 800ad34:	462b      	mov	r3, r5
 800ad36:	461d      	mov	r5, r3
 800ad38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad3c:	2a30      	cmp	r2, #48	; 0x30
 800ad3e:	d0fa      	beq.n	800ad36 <_dtoa_r+0xb8e>
 800ad40:	e6d7      	b.n	800aaf2 <_dtoa_r+0x94a>
 800ad42:	9a01      	ldr	r2, [sp, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d184      	bne.n	800ac52 <_dtoa_r+0xaaa>
 800ad48:	9b00      	ldr	r3, [sp, #0]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	2331      	movs	r3, #49	; 0x31
 800ad50:	7013      	strb	r3, [r2, #0]
 800ad52:	e6ce      	b.n	800aaf2 <_dtoa_r+0x94a>
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <_dtoa_r+0xbd4>)
 800ad56:	f7ff ba95 	b.w	800a284 <_dtoa_r+0xdc>
 800ad5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f47f aa6e 	bne.w	800a23e <_dtoa_r+0x96>
 800ad62:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <_dtoa_r+0xbd8>)
 800ad64:	f7ff ba8e 	b.w	800a284 <_dtoa_r+0xdc>
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dcae      	bgt.n	800accc <_dtoa_r+0xb24>
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	f73f aea8 	bgt.w	800aac6 <_dtoa_r+0x91e>
 800ad76:	e7a9      	b.n	800accc <_dtoa_r+0xb24>
 800ad78:	0800d030 	.word	0x0800d030
 800ad7c:	0800ce30 	.word	0x0800ce30
 800ad80:	0800cfb1 	.word	0x0800cfb1

0800ad84 <__sflush_r>:
 800ad84:	898a      	ldrh	r2, [r1, #12]
 800ad86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	0710      	lsls	r0, r2, #28
 800ad8e:	460c      	mov	r4, r1
 800ad90:	d458      	bmi.n	800ae44 <__sflush_r+0xc0>
 800ad92:	684b      	ldr	r3, [r1, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dc05      	bgt.n	800ada4 <__sflush_r+0x20>
 800ad98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dc02      	bgt.n	800ada4 <__sflush_r+0x20>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	d0f9      	beq.n	800ad9e <__sflush_r+0x1a>
 800adaa:	2300      	movs	r3, #0
 800adac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adb0:	682f      	ldr	r7, [r5, #0]
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	d032      	beq.n	800ae1c <__sflush_r+0x98>
 800adb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	075a      	lsls	r2, r3, #29
 800adbc:	d505      	bpl.n	800adca <__sflush_r+0x46>
 800adbe:	6863      	ldr	r3, [r4, #4]
 800adc0:	1ac0      	subs	r0, r0, r3
 800adc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc4:	b10b      	cbz	r3, 800adca <__sflush_r+0x46>
 800adc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	4602      	mov	r2, r0
 800adce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add0:	6a21      	ldr	r1, [r4, #32]
 800add2:	4628      	mov	r0, r5
 800add4:	47b0      	blx	r6
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	d106      	bne.n	800adea <__sflush_r+0x66>
 800addc:	6829      	ldr	r1, [r5, #0]
 800adde:	291d      	cmp	r1, #29
 800ade0:	d82c      	bhi.n	800ae3c <__sflush_r+0xb8>
 800ade2:	4a2a      	ldr	r2, [pc, #168]	; (800ae8c <__sflush_r+0x108>)
 800ade4:	40ca      	lsrs	r2, r1
 800ade6:	07d6      	lsls	r6, r2, #31
 800ade8:	d528      	bpl.n	800ae3c <__sflush_r+0xb8>
 800adea:	2200      	movs	r2, #0
 800adec:	6062      	str	r2, [r4, #4]
 800adee:	04d9      	lsls	r1, r3, #19
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	d504      	bpl.n	800ae00 <__sflush_r+0x7c>
 800adf6:	1c42      	adds	r2, r0, #1
 800adf8:	d101      	bne.n	800adfe <__sflush_r+0x7a>
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	b903      	cbnz	r3, 800ae00 <__sflush_r+0x7c>
 800adfe:	6560      	str	r0, [r4, #84]	; 0x54
 800ae00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae02:	602f      	str	r7, [r5, #0]
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d0ca      	beq.n	800ad9e <__sflush_r+0x1a>
 800ae08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	d002      	beq.n	800ae16 <__sflush_r+0x92>
 800ae10:	4628      	mov	r0, r5
 800ae12:	f001 fa49 	bl	800c2a8 <_free_r>
 800ae16:	2000      	movs	r0, #0
 800ae18:	6360      	str	r0, [r4, #52]	; 0x34
 800ae1a:	e7c1      	b.n	800ada0 <__sflush_r+0x1c>
 800ae1c:	6a21      	ldr	r1, [r4, #32]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b0      	blx	r6
 800ae24:	1c41      	adds	r1, r0, #1
 800ae26:	d1c7      	bne.n	800adb8 <__sflush_r+0x34>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0c4      	beq.n	800adb8 <__sflush_r+0x34>
 800ae2e:	2b1d      	cmp	r3, #29
 800ae30:	d001      	beq.n	800ae36 <__sflush_r+0xb2>
 800ae32:	2b16      	cmp	r3, #22
 800ae34:	d101      	bne.n	800ae3a <__sflush_r+0xb6>
 800ae36:	602f      	str	r7, [r5, #0]
 800ae38:	e7b1      	b.n	800ad9e <__sflush_r+0x1a>
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae40:	81a3      	strh	r3, [r4, #12]
 800ae42:	e7ad      	b.n	800ada0 <__sflush_r+0x1c>
 800ae44:	690f      	ldr	r7, [r1, #16]
 800ae46:	2f00      	cmp	r7, #0
 800ae48:	d0a9      	beq.n	800ad9e <__sflush_r+0x1a>
 800ae4a:	0793      	lsls	r3, r2, #30
 800ae4c:	680e      	ldr	r6, [r1, #0]
 800ae4e:	bf08      	it	eq
 800ae50:	694b      	ldreq	r3, [r1, #20]
 800ae52:	600f      	str	r7, [r1, #0]
 800ae54:	bf18      	it	ne
 800ae56:	2300      	movne	r3, #0
 800ae58:	eba6 0807 	sub.w	r8, r6, r7
 800ae5c:	608b      	str	r3, [r1, #8]
 800ae5e:	f1b8 0f00 	cmp.w	r8, #0
 800ae62:	dd9c      	ble.n	800ad9e <__sflush_r+0x1a>
 800ae64:	6a21      	ldr	r1, [r4, #32]
 800ae66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae68:	4643      	mov	r3, r8
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b0      	blx	r6
 800ae70:	2800      	cmp	r0, #0
 800ae72:	dc06      	bgt.n	800ae82 <__sflush_r+0xfe>
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	e78e      	b.n	800ada0 <__sflush_r+0x1c>
 800ae82:	4407      	add	r7, r0
 800ae84:	eba8 0800 	sub.w	r8, r8, r0
 800ae88:	e7e9      	b.n	800ae5e <__sflush_r+0xda>
 800ae8a:	bf00      	nop
 800ae8c:	20400001 	.word	0x20400001

0800ae90 <_fflush_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	690b      	ldr	r3, [r1, #16]
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b913      	cbnz	r3, 800aea0 <_fflush_r+0x10>
 800ae9a:	2500      	movs	r5, #0
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	b118      	cbz	r0, 800aeaa <_fflush_r+0x1a>
 800aea2:	6983      	ldr	r3, [r0, #24]
 800aea4:	b90b      	cbnz	r3, 800aeaa <_fflush_r+0x1a>
 800aea6:	f000 f887 	bl	800afb8 <__sinit>
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <_fflush_r+0x6c>)
 800aeac:	429c      	cmp	r4, r3
 800aeae:	d11b      	bne.n	800aee8 <_fflush_r+0x58>
 800aeb0:	686c      	ldr	r4, [r5, #4]
 800aeb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0ef      	beq.n	800ae9a <_fflush_r+0xa>
 800aeba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aebc:	07d0      	lsls	r0, r2, #31
 800aebe:	d404      	bmi.n	800aeca <_fflush_r+0x3a>
 800aec0:	0599      	lsls	r1, r3, #22
 800aec2:	d402      	bmi.n	800aeca <_fflush_r+0x3a>
 800aec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec6:	f000 fc88 	bl	800b7da <__retarget_lock_acquire_recursive>
 800aeca:	4628      	mov	r0, r5
 800aecc:	4621      	mov	r1, r4
 800aece:	f7ff ff59 	bl	800ad84 <__sflush_r>
 800aed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed4:	07da      	lsls	r2, r3, #31
 800aed6:	4605      	mov	r5, r0
 800aed8:	d4e0      	bmi.n	800ae9c <_fflush_r+0xc>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	059b      	lsls	r3, r3, #22
 800aede:	d4dd      	bmi.n	800ae9c <_fflush_r+0xc>
 800aee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee2:	f000 fc7b 	bl	800b7dc <__retarget_lock_release_recursive>
 800aee6:	e7d9      	b.n	800ae9c <_fflush_r+0xc>
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <_fflush_r+0x70>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d101      	bne.n	800aef2 <_fflush_r+0x62>
 800aeee:	68ac      	ldr	r4, [r5, #8]
 800aef0:	e7df      	b.n	800aeb2 <_fflush_r+0x22>
 800aef2:	4b04      	ldr	r3, [pc, #16]	; (800af04 <_fflush_r+0x74>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	bf08      	it	eq
 800aef8:	68ec      	ldreq	r4, [r5, #12]
 800aefa:	e7da      	b.n	800aeb2 <_fflush_r+0x22>
 800aefc:	0800d064 	.word	0x0800d064
 800af00:	0800d084 	.word	0x0800d084
 800af04:	0800d044 	.word	0x0800d044

0800af08 <std>:
 800af08:	2300      	movs	r3, #0
 800af0a:	b510      	push	{r4, lr}
 800af0c:	4604      	mov	r4, r0
 800af0e:	e9c0 3300 	strd	r3, r3, [r0]
 800af12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af16:	6083      	str	r3, [r0, #8]
 800af18:	8181      	strh	r1, [r0, #12]
 800af1a:	6643      	str	r3, [r0, #100]	; 0x64
 800af1c:	81c2      	strh	r2, [r0, #14]
 800af1e:	6183      	str	r3, [r0, #24]
 800af20:	4619      	mov	r1, r3
 800af22:	2208      	movs	r2, #8
 800af24:	305c      	adds	r0, #92	; 0x5c
 800af26:	f7fd fa11 	bl	800834c <memset>
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <std+0x38>)
 800af2c:	6263      	str	r3, [r4, #36]	; 0x24
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <std+0x3c>)
 800af30:	62a3      	str	r3, [r4, #40]	; 0x28
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x40>)
 800af34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x44>)
 800af38:	6224      	str	r4, [r4, #32]
 800af3a:	6323      	str	r3, [r4, #48]	; 0x30
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	bf00      	nop
 800af40:	0800ca09 	.word	0x0800ca09
 800af44:	0800ca2b 	.word	0x0800ca2b
 800af48:	0800ca63 	.word	0x0800ca63
 800af4c:	0800ca87 	.word	0x0800ca87

0800af50 <_cleanup_r>:
 800af50:	4901      	ldr	r1, [pc, #4]	; (800af58 <_cleanup_r+0x8>)
 800af52:	f000 b8af 	b.w	800b0b4 <_fwalk_reent>
 800af56:	bf00      	nop
 800af58:	0800ae91 	.word	0x0800ae91

0800af5c <__sfmoreglue>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	2268      	movs	r2, #104	; 0x68
 800af60:	1e4d      	subs	r5, r1, #1
 800af62:	4355      	muls	r5, r2
 800af64:	460e      	mov	r6, r1
 800af66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af6a:	f001 fa09 	bl	800c380 <_malloc_r>
 800af6e:	4604      	mov	r4, r0
 800af70:	b140      	cbz	r0, 800af84 <__sfmoreglue+0x28>
 800af72:	2100      	movs	r1, #0
 800af74:	e9c0 1600 	strd	r1, r6, [r0]
 800af78:	300c      	adds	r0, #12
 800af7a:	60a0      	str	r0, [r4, #8]
 800af7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af80:	f7fd f9e4 	bl	800834c <memset>
 800af84:	4620      	mov	r0, r4
 800af86:	bd70      	pop	{r4, r5, r6, pc}

0800af88 <__sfp_lock_acquire>:
 800af88:	4801      	ldr	r0, [pc, #4]	; (800af90 <__sfp_lock_acquire+0x8>)
 800af8a:	f000 bc26 	b.w	800b7da <__retarget_lock_acquire_recursive>
 800af8e:	bf00      	nop
 800af90:	200004fd 	.word	0x200004fd

0800af94 <__sfp_lock_release>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__sfp_lock_release+0x8>)
 800af96:	f000 bc21 	b.w	800b7dc <__retarget_lock_release_recursive>
 800af9a:	bf00      	nop
 800af9c:	200004fd 	.word	0x200004fd

0800afa0 <__sinit_lock_acquire>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sinit_lock_acquire+0x8>)
 800afa2:	f000 bc1a 	b.w	800b7da <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	200004fe 	.word	0x200004fe

0800afac <__sinit_lock_release>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__sinit_lock_release+0x8>)
 800afae:	f000 bc15 	b.w	800b7dc <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	200004fe 	.word	0x200004fe

0800afb8 <__sinit>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	4604      	mov	r4, r0
 800afbc:	f7ff fff0 	bl	800afa0 <__sinit_lock_acquire>
 800afc0:	69a3      	ldr	r3, [r4, #24]
 800afc2:	b11b      	cbz	r3, 800afcc <__sinit+0x14>
 800afc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc8:	f7ff bff0 	b.w	800afac <__sinit_lock_release>
 800afcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afd0:	6523      	str	r3, [r4, #80]	; 0x50
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <__sinit+0x68>)
 800afd4:	4a13      	ldr	r2, [pc, #76]	; (800b024 <__sinit+0x6c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800afda:	42a3      	cmp	r3, r4
 800afdc:	bf04      	itt	eq
 800afde:	2301      	moveq	r3, #1
 800afe0:	61a3      	streq	r3, [r4, #24]
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 f820 	bl	800b028 <__sfp>
 800afe8:	6060      	str	r0, [r4, #4]
 800afea:	4620      	mov	r0, r4
 800afec:	f000 f81c 	bl	800b028 <__sfp>
 800aff0:	60a0      	str	r0, [r4, #8]
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f818 	bl	800b028 <__sfp>
 800aff8:	2200      	movs	r2, #0
 800affa:	60e0      	str	r0, [r4, #12]
 800affc:	2104      	movs	r1, #4
 800affe:	6860      	ldr	r0, [r4, #4]
 800b000:	f7ff ff82 	bl	800af08 <std>
 800b004:	68a0      	ldr	r0, [r4, #8]
 800b006:	2201      	movs	r2, #1
 800b008:	2109      	movs	r1, #9
 800b00a:	f7ff ff7d 	bl	800af08 <std>
 800b00e:	68e0      	ldr	r0, [r4, #12]
 800b010:	2202      	movs	r2, #2
 800b012:	2112      	movs	r1, #18
 800b014:	f7ff ff78 	bl	800af08 <std>
 800b018:	2301      	movs	r3, #1
 800b01a:	61a3      	str	r3, [r4, #24]
 800b01c:	e7d2      	b.n	800afc4 <__sinit+0xc>
 800b01e:	bf00      	nop
 800b020:	0800ce1c 	.word	0x0800ce1c
 800b024:	0800af51 	.word	0x0800af51

0800b028 <__sfp>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	4607      	mov	r7, r0
 800b02c:	f7ff ffac 	bl	800af88 <__sfp_lock_acquire>
 800b030:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <__sfp+0x84>)
 800b032:	681e      	ldr	r6, [r3, #0]
 800b034:	69b3      	ldr	r3, [r6, #24]
 800b036:	b913      	cbnz	r3, 800b03e <__sfp+0x16>
 800b038:	4630      	mov	r0, r6
 800b03a:	f7ff ffbd 	bl	800afb8 <__sinit>
 800b03e:	3648      	adds	r6, #72	; 0x48
 800b040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b044:	3b01      	subs	r3, #1
 800b046:	d503      	bpl.n	800b050 <__sfp+0x28>
 800b048:	6833      	ldr	r3, [r6, #0]
 800b04a:	b30b      	cbz	r3, 800b090 <__sfp+0x68>
 800b04c:	6836      	ldr	r6, [r6, #0]
 800b04e:	e7f7      	b.n	800b040 <__sfp+0x18>
 800b050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b054:	b9d5      	cbnz	r5, 800b08c <__sfp+0x64>
 800b056:	4b16      	ldr	r3, [pc, #88]	; (800b0b0 <__sfp+0x88>)
 800b058:	60e3      	str	r3, [r4, #12]
 800b05a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b05e:	6665      	str	r5, [r4, #100]	; 0x64
 800b060:	f000 fbba 	bl	800b7d8 <__retarget_lock_init_recursive>
 800b064:	f7ff ff96 	bl	800af94 <__sfp_lock_release>
 800b068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b06c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b070:	6025      	str	r5, [r4, #0]
 800b072:	61a5      	str	r5, [r4, #24]
 800b074:	2208      	movs	r2, #8
 800b076:	4629      	mov	r1, r5
 800b078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b07c:	f7fd f966 	bl	800834c <memset>
 800b080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b088:	4620      	mov	r0, r4
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	3468      	adds	r4, #104	; 0x68
 800b08e:	e7d9      	b.n	800b044 <__sfp+0x1c>
 800b090:	2104      	movs	r1, #4
 800b092:	4638      	mov	r0, r7
 800b094:	f7ff ff62 	bl	800af5c <__sfmoreglue>
 800b098:	4604      	mov	r4, r0
 800b09a:	6030      	str	r0, [r6, #0]
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d1d5      	bne.n	800b04c <__sfp+0x24>
 800b0a0:	f7ff ff78 	bl	800af94 <__sfp_lock_release>
 800b0a4:	230c      	movs	r3, #12
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	e7ee      	b.n	800b088 <__sfp+0x60>
 800b0aa:	bf00      	nop
 800b0ac:	0800ce1c 	.word	0x0800ce1c
 800b0b0:	ffff0001 	.word	0xffff0001

0800b0b4 <_fwalk_reent>:
 800b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	4688      	mov	r8, r1
 800b0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c0:	2700      	movs	r7, #0
 800b0c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ca:	d505      	bpl.n	800b0d8 <_fwalk_reent+0x24>
 800b0cc:	6824      	ldr	r4, [r4, #0]
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	d1f7      	bne.n	800b0c2 <_fwalk_reent+0xe>
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d907      	bls.n	800b0ee <_fwalk_reent+0x3a>
 800b0de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	d003      	beq.n	800b0ee <_fwalk_reent+0x3a>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	47c0      	blx	r8
 800b0ec:	4307      	orrs	r7, r0
 800b0ee:	3568      	adds	r5, #104	; 0x68
 800b0f0:	e7e9      	b.n	800b0c6 <_fwalk_reent+0x12>

0800b0f2 <rshift>:
 800b0f2:	6903      	ldr	r3, [r0, #16]
 800b0f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b100:	f100 0414 	add.w	r4, r0, #20
 800b104:	dd45      	ble.n	800b192 <rshift+0xa0>
 800b106:	f011 011f 	ands.w	r1, r1, #31
 800b10a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b10e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b112:	d10c      	bne.n	800b12e <rshift+0x3c>
 800b114:	f100 0710 	add.w	r7, r0, #16
 800b118:	4629      	mov	r1, r5
 800b11a:	42b1      	cmp	r1, r6
 800b11c:	d334      	bcc.n	800b188 <rshift+0x96>
 800b11e:	1a9b      	subs	r3, r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	1eea      	subs	r2, r5, #3
 800b124:	4296      	cmp	r6, r2
 800b126:	bf38      	it	cc
 800b128:	2300      	movcc	r3, #0
 800b12a:	4423      	add	r3, r4
 800b12c:	e015      	b.n	800b15a <rshift+0x68>
 800b12e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b132:	f1c1 0820 	rsb	r8, r1, #32
 800b136:	40cf      	lsrs	r7, r1
 800b138:	f105 0e04 	add.w	lr, r5, #4
 800b13c:	46a1      	mov	r9, r4
 800b13e:	4576      	cmp	r6, lr
 800b140:	46f4      	mov	ip, lr
 800b142:	d815      	bhi.n	800b170 <rshift+0x7e>
 800b144:	1a9a      	subs	r2, r3, r2
 800b146:	0092      	lsls	r2, r2, #2
 800b148:	3a04      	subs	r2, #4
 800b14a:	3501      	adds	r5, #1
 800b14c:	42ae      	cmp	r6, r5
 800b14e:	bf38      	it	cc
 800b150:	2200      	movcc	r2, #0
 800b152:	18a3      	adds	r3, r4, r2
 800b154:	50a7      	str	r7, [r4, r2]
 800b156:	b107      	cbz	r7, 800b15a <rshift+0x68>
 800b158:	3304      	adds	r3, #4
 800b15a:	1b1a      	subs	r2, r3, r4
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b162:	bf08      	it	eq
 800b164:	2300      	moveq	r3, #0
 800b166:	6102      	str	r2, [r0, #16]
 800b168:	bf08      	it	eq
 800b16a:	6143      	streq	r3, [r0, #20]
 800b16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b170:	f8dc c000 	ldr.w	ip, [ip]
 800b174:	fa0c fc08 	lsl.w	ip, ip, r8
 800b178:	ea4c 0707 	orr.w	r7, ip, r7
 800b17c:	f849 7b04 	str.w	r7, [r9], #4
 800b180:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b184:	40cf      	lsrs	r7, r1
 800b186:	e7da      	b.n	800b13e <rshift+0x4c>
 800b188:	f851 cb04 	ldr.w	ip, [r1], #4
 800b18c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b190:	e7c3      	b.n	800b11a <rshift+0x28>
 800b192:	4623      	mov	r3, r4
 800b194:	e7e1      	b.n	800b15a <rshift+0x68>

0800b196 <__hexdig_fun>:
 800b196:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b19a:	2b09      	cmp	r3, #9
 800b19c:	d802      	bhi.n	800b1a4 <__hexdig_fun+0xe>
 800b19e:	3820      	subs	r0, #32
 800b1a0:	b2c0      	uxtb	r0, r0
 800b1a2:	4770      	bx	lr
 800b1a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1a8:	2b05      	cmp	r3, #5
 800b1aa:	d801      	bhi.n	800b1b0 <__hexdig_fun+0x1a>
 800b1ac:	3847      	subs	r0, #71	; 0x47
 800b1ae:	e7f7      	b.n	800b1a0 <__hexdig_fun+0xa>
 800b1b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1b4:	2b05      	cmp	r3, #5
 800b1b6:	d801      	bhi.n	800b1bc <__hexdig_fun+0x26>
 800b1b8:	3827      	subs	r0, #39	; 0x27
 800b1ba:	e7f1      	b.n	800b1a0 <__hexdig_fun+0xa>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	4770      	bx	lr

0800b1c0 <__gethex>:
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	ed2d 8b02 	vpush	{d8}
 800b1c8:	b089      	sub	sp, #36	; 0x24
 800b1ca:	ee08 0a10 	vmov	s16, r0
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	4bb4      	ldr	r3, [pc, #720]	; (800b4a4 <__gethex+0x2e4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	468b      	mov	fp, r1
 800b1da:	4690      	mov	r8, r2
 800b1dc:	f7f4 fff8 	bl	80001d0 <strlen>
 800b1e0:	9b01      	ldr	r3, [sp, #4]
 800b1e2:	f8db 2000 	ldr.w	r2, [fp]
 800b1e6:	4403      	add	r3, r0
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	1c93      	adds	r3, r2, #2
 800b1f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1fa:	32fe      	adds	r2, #254	; 0xfe
 800b1fc:	18d1      	adds	r1, r2, r3
 800b1fe:	461f      	mov	r7, r3
 800b200:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b204:	9100      	str	r1, [sp, #0]
 800b206:	2830      	cmp	r0, #48	; 0x30
 800b208:	d0f8      	beq.n	800b1fc <__gethex+0x3c>
 800b20a:	f7ff ffc4 	bl	800b196 <__hexdig_fun>
 800b20e:	4604      	mov	r4, r0
 800b210:	2800      	cmp	r0, #0
 800b212:	d13a      	bne.n	800b28a <__gethex+0xca>
 800b214:	9901      	ldr	r1, [sp, #4]
 800b216:	4652      	mov	r2, sl
 800b218:	4638      	mov	r0, r7
 800b21a:	f001 fc38 	bl	800ca8e <strncmp>
 800b21e:	4605      	mov	r5, r0
 800b220:	2800      	cmp	r0, #0
 800b222:	d168      	bne.n	800b2f6 <__gethex+0x136>
 800b224:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b228:	eb07 060a 	add.w	r6, r7, sl
 800b22c:	f7ff ffb3 	bl	800b196 <__hexdig_fun>
 800b230:	2800      	cmp	r0, #0
 800b232:	d062      	beq.n	800b2fa <__gethex+0x13a>
 800b234:	4633      	mov	r3, r6
 800b236:	7818      	ldrb	r0, [r3, #0]
 800b238:	2830      	cmp	r0, #48	; 0x30
 800b23a:	461f      	mov	r7, r3
 800b23c:	f103 0301 	add.w	r3, r3, #1
 800b240:	d0f9      	beq.n	800b236 <__gethex+0x76>
 800b242:	f7ff ffa8 	bl	800b196 <__hexdig_fun>
 800b246:	2301      	movs	r3, #1
 800b248:	fab0 f480 	clz	r4, r0
 800b24c:	0964      	lsrs	r4, r4, #5
 800b24e:	4635      	mov	r5, r6
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	463a      	mov	r2, r7
 800b254:	4616      	mov	r6, r2
 800b256:	3201      	adds	r2, #1
 800b258:	7830      	ldrb	r0, [r6, #0]
 800b25a:	f7ff ff9c 	bl	800b196 <__hexdig_fun>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1f8      	bne.n	800b254 <__gethex+0x94>
 800b262:	9901      	ldr	r1, [sp, #4]
 800b264:	4652      	mov	r2, sl
 800b266:	4630      	mov	r0, r6
 800b268:	f001 fc11 	bl	800ca8e <strncmp>
 800b26c:	b980      	cbnz	r0, 800b290 <__gethex+0xd0>
 800b26e:	b94d      	cbnz	r5, 800b284 <__gethex+0xc4>
 800b270:	eb06 050a 	add.w	r5, r6, sl
 800b274:	462a      	mov	r2, r5
 800b276:	4616      	mov	r6, r2
 800b278:	3201      	adds	r2, #1
 800b27a:	7830      	ldrb	r0, [r6, #0]
 800b27c:	f7ff ff8b 	bl	800b196 <__hexdig_fun>
 800b280:	2800      	cmp	r0, #0
 800b282:	d1f8      	bne.n	800b276 <__gethex+0xb6>
 800b284:	1bad      	subs	r5, r5, r6
 800b286:	00ad      	lsls	r5, r5, #2
 800b288:	e004      	b.n	800b294 <__gethex+0xd4>
 800b28a:	2400      	movs	r4, #0
 800b28c:	4625      	mov	r5, r4
 800b28e:	e7e0      	b.n	800b252 <__gethex+0x92>
 800b290:	2d00      	cmp	r5, #0
 800b292:	d1f7      	bne.n	800b284 <__gethex+0xc4>
 800b294:	7833      	ldrb	r3, [r6, #0]
 800b296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b29a:	2b50      	cmp	r3, #80	; 0x50
 800b29c:	d13b      	bne.n	800b316 <__gethex+0x156>
 800b29e:	7873      	ldrb	r3, [r6, #1]
 800b2a0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2a2:	d02c      	beq.n	800b2fe <__gethex+0x13e>
 800b2a4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2a6:	d02e      	beq.n	800b306 <__gethex+0x146>
 800b2a8:	1c71      	adds	r1, r6, #1
 800b2aa:	f04f 0900 	mov.w	r9, #0
 800b2ae:	7808      	ldrb	r0, [r1, #0]
 800b2b0:	f7ff ff71 	bl	800b196 <__hexdig_fun>
 800b2b4:	1e43      	subs	r3, r0, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b18      	cmp	r3, #24
 800b2ba:	d82c      	bhi.n	800b316 <__gethex+0x156>
 800b2bc:	f1a0 0210 	sub.w	r2, r0, #16
 800b2c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2c4:	f7ff ff67 	bl	800b196 <__hexdig_fun>
 800b2c8:	1e43      	subs	r3, r0, #1
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b18      	cmp	r3, #24
 800b2ce:	d91d      	bls.n	800b30c <__gethex+0x14c>
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	d000      	beq.n	800b2d8 <__gethex+0x118>
 800b2d6:	4252      	negs	r2, r2
 800b2d8:	4415      	add	r5, r2
 800b2da:	f8cb 1000 	str.w	r1, [fp]
 800b2de:	b1e4      	cbz	r4, 800b31a <__gethex+0x15a>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bf14      	ite	ne
 800b2e6:	2700      	movne	r7, #0
 800b2e8:	2706      	moveq	r7, #6
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	b009      	add	sp, #36	; 0x24
 800b2ee:	ecbd 8b02 	vpop	{d8}
 800b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f6:	463e      	mov	r6, r7
 800b2f8:	4625      	mov	r5, r4
 800b2fa:	2401      	movs	r4, #1
 800b2fc:	e7ca      	b.n	800b294 <__gethex+0xd4>
 800b2fe:	f04f 0900 	mov.w	r9, #0
 800b302:	1cb1      	adds	r1, r6, #2
 800b304:	e7d3      	b.n	800b2ae <__gethex+0xee>
 800b306:	f04f 0901 	mov.w	r9, #1
 800b30a:	e7fa      	b.n	800b302 <__gethex+0x142>
 800b30c:	230a      	movs	r3, #10
 800b30e:	fb03 0202 	mla	r2, r3, r2, r0
 800b312:	3a10      	subs	r2, #16
 800b314:	e7d4      	b.n	800b2c0 <__gethex+0x100>
 800b316:	4631      	mov	r1, r6
 800b318:	e7df      	b.n	800b2da <__gethex+0x11a>
 800b31a:	1bf3      	subs	r3, r6, r7
 800b31c:	3b01      	subs	r3, #1
 800b31e:	4621      	mov	r1, r4
 800b320:	2b07      	cmp	r3, #7
 800b322:	dc0b      	bgt.n	800b33c <__gethex+0x17c>
 800b324:	ee18 0a10 	vmov	r0, s16
 800b328:	f000 fae6 	bl	800b8f8 <_Balloc>
 800b32c:	4604      	mov	r4, r0
 800b32e:	b940      	cbnz	r0, 800b342 <__gethex+0x182>
 800b330:	4b5d      	ldr	r3, [pc, #372]	; (800b4a8 <__gethex+0x2e8>)
 800b332:	4602      	mov	r2, r0
 800b334:	21de      	movs	r1, #222	; 0xde
 800b336:	485d      	ldr	r0, [pc, #372]	; (800b4ac <__gethex+0x2ec>)
 800b338:	f001 fbdc 	bl	800caf4 <__assert_func>
 800b33c:	3101      	adds	r1, #1
 800b33e:	105b      	asrs	r3, r3, #1
 800b340:	e7ee      	b.n	800b320 <__gethex+0x160>
 800b342:	f100 0914 	add.w	r9, r0, #20
 800b346:	f04f 0b00 	mov.w	fp, #0
 800b34a:	f1ca 0301 	rsb	r3, sl, #1
 800b34e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b352:	f8cd b000 	str.w	fp, [sp]
 800b356:	9306      	str	r3, [sp, #24]
 800b358:	42b7      	cmp	r7, r6
 800b35a:	d340      	bcc.n	800b3de <__gethex+0x21e>
 800b35c:	9802      	ldr	r0, [sp, #8]
 800b35e:	9b00      	ldr	r3, [sp, #0]
 800b360:	f840 3b04 	str.w	r3, [r0], #4
 800b364:	eba0 0009 	sub.w	r0, r0, r9
 800b368:	1080      	asrs	r0, r0, #2
 800b36a:	0146      	lsls	r6, r0, #5
 800b36c:	6120      	str	r0, [r4, #16]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fbb4 	bl	800badc <__hi0bits>
 800b374:	1a30      	subs	r0, r6, r0
 800b376:	f8d8 6000 	ldr.w	r6, [r8]
 800b37a:	42b0      	cmp	r0, r6
 800b37c:	dd63      	ble.n	800b446 <__gethex+0x286>
 800b37e:	1b87      	subs	r7, r0, r6
 800b380:	4639      	mov	r1, r7
 800b382:	4620      	mov	r0, r4
 800b384:	f000 ff58 	bl	800c238 <__any_on>
 800b388:	4682      	mov	sl, r0
 800b38a:	b1a8      	cbz	r0, 800b3b8 <__gethex+0x1f8>
 800b38c:	1e7b      	subs	r3, r7, #1
 800b38e:	1159      	asrs	r1, r3, #5
 800b390:	f003 021f 	and.w	r2, r3, #31
 800b394:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b398:	f04f 0a01 	mov.w	sl, #1
 800b39c:	fa0a f202 	lsl.w	r2, sl, r2
 800b3a0:	420a      	tst	r2, r1
 800b3a2:	d009      	beq.n	800b3b8 <__gethex+0x1f8>
 800b3a4:	4553      	cmp	r3, sl
 800b3a6:	dd05      	ble.n	800b3b4 <__gethex+0x1f4>
 800b3a8:	1eb9      	subs	r1, r7, #2
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 ff44 	bl	800c238 <__any_on>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d145      	bne.n	800b440 <__gethex+0x280>
 800b3b4:	f04f 0a02 	mov.w	sl, #2
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f7ff fe99 	bl	800b0f2 <rshift>
 800b3c0:	443d      	add	r5, r7
 800b3c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3c6:	42ab      	cmp	r3, r5
 800b3c8:	da4c      	bge.n	800b464 <__gethex+0x2a4>
 800b3ca:	ee18 0a10 	vmov	r0, s16
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	f000 fad2 	bl	800b978 <_Bfree>
 800b3d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	27a3      	movs	r7, #163	; 0xa3
 800b3dc:	e785      	b.n	800b2ea <__gethex+0x12a>
 800b3de:	1e73      	subs	r3, r6, #1
 800b3e0:	9a05      	ldr	r2, [sp, #20]
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d019      	beq.n	800b420 <__gethex+0x260>
 800b3ec:	f1bb 0f20 	cmp.w	fp, #32
 800b3f0:	d107      	bne.n	800b402 <__gethex+0x242>
 800b3f2:	9b02      	ldr	r3, [sp, #8]
 800b3f4:	9a00      	ldr	r2, [sp, #0]
 800b3f6:	f843 2b04 	str.w	r2, [r3], #4
 800b3fa:	9302      	str	r3, [sp, #8]
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	469b      	mov	fp, r3
 800b402:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b406:	f7ff fec6 	bl	800b196 <__hexdig_fun>
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	f000 000f 	and.w	r0, r0, #15
 800b410:	fa00 f00b 	lsl.w	r0, r0, fp
 800b414:	4303      	orrs	r3, r0
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	f10b 0b04 	add.w	fp, fp, #4
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	e00d      	b.n	800b43c <__gethex+0x27c>
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	9a06      	ldr	r2, [sp, #24]
 800b424:	4413      	add	r3, r2
 800b426:	42bb      	cmp	r3, r7
 800b428:	d3e0      	bcc.n	800b3ec <__gethex+0x22c>
 800b42a:	4618      	mov	r0, r3
 800b42c:	9901      	ldr	r1, [sp, #4]
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	4652      	mov	r2, sl
 800b432:	f001 fb2c 	bl	800ca8e <strncmp>
 800b436:	9b07      	ldr	r3, [sp, #28]
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1d7      	bne.n	800b3ec <__gethex+0x22c>
 800b43c:	461e      	mov	r6, r3
 800b43e:	e78b      	b.n	800b358 <__gethex+0x198>
 800b440:	f04f 0a03 	mov.w	sl, #3
 800b444:	e7b8      	b.n	800b3b8 <__gethex+0x1f8>
 800b446:	da0a      	bge.n	800b45e <__gethex+0x29e>
 800b448:	1a37      	subs	r7, r6, r0
 800b44a:	4621      	mov	r1, r4
 800b44c:	ee18 0a10 	vmov	r0, s16
 800b450:	463a      	mov	r2, r7
 800b452:	f000 fcad 	bl	800bdb0 <__lshift>
 800b456:	1bed      	subs	r5, r5, r7
 800b458:	4604      	mov	r4, r0
 800b45a:	f100 0914 	add.w	r9, r0, #20
 800b45e:	f04f 0a00 	mov.w	sl, #0
 800b462:	e7ae      	b.n	800b3c2 <__gethex+0x202>
 800b464:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b468:	42a8      	cmp	r0, r5
 800b46a:	dd72      	ble.n	800b552 <__gethex+0x392>
 800b46c:	1b45      	subs	r5, r0, r5
 800b46e:	42ae      	cmp	r6, r5
 800b470:	dc36      	bgt.n	800b4e0 <__gethex+0x320>
 800b472:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b476:	2b02      	cmp	r3, #2
 800b478:	d02a      	beq.n	800b4d0 <__gethex+0x310>
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d02c      	beq.n	800b4d8 <__gethex+0x318>
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d11c      	bne.n	800b4bc <__gethex+0x2fc>
 800b482:	42ae      	cmp	r6, r5
 800b484:	d11a      	bne.n	800b4bc <__gethex+0x2fc>
 800b486:	2e01      	cmp	r6, #1
 800b488:	d112      	bne.n	800b4b0 <__gethex+0x2f0>
 800b48a:	9a04      	ldr	r2, [sp, #16]
 800b48c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	2301      	movs	r3, #1
 800b494:	6123      	str	r3, [r4, #16]
 800b496:	f8c9 3000 	str.w	r3, [r9]
 800b49a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b49c:	2762      	movs	r7, #98	; 0x62
 800b49e:	601c      	str	r4, [r3, #0]
 800b4a0:	e723      	b.n	800b2ea <__gethex+0x12a>
 800b4a2:	bf00      	nop
 800b4a4:	0800d10c 	.word	0x0800d10c
 800b4a8:	0800d030 	.word	0x0800d030
 800b4ac:	0800d0a4 	.word	0x0800d0a4
 800b4b0:	1e71      	subs	r1, r6, #1
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fec0 	bl	800c238 <__any_on>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d1e6      	bne.n	800b48a <__gethex+0x2ca>
 800b4bc:	ee18 0a10 	vmov	r0, s16
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	f000 fa59 	bl	800b978 <_Bfree>
 800b4c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	2750      	movs	r7, #80	; 0x50
 800b4ce:	e70c      	b.n	800b2ea <__gethex+0x12a>
 800b4d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1f2      	bne.n	800b4bc <__gethex+0x2fc>
 800b4d6:	e7d8      	b.n	800b48a <__gethex+0x2ca>
 800b4d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1d5      	bne.n	800b48a <__gethex+0x2ca>
 800b4de:	e7ed      	b.n	800b4bc <__gethex+0x2fc>
 800b4e0:	1e6f      	subs	r7, r5, #1
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	d131      	bne.n	800b54c <__gethex+0x38c>
 800b4e8:	b127      	cbz	r7, 800b4f4 <__gethex+0x334>
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fea3 	bl	800c238 <__any_on>
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	117b      	asrs	r3, r7, #5
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4fc:	f007 071f 	and.w	r7, r7, #31
 800b500:	fa01 f707 	lsl.w	r7, r1, r7
 800b504:	421f      	tst	r7, r3
 800b506:	4629      	mov	r1, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	bf18      	it	ne
 800b50c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b510:	1b76      	subs	r6, r6, r5
 800b512:	f7ff fdee 	bl	800b0f2 <rshift>
 800b516:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b51a:	2702      	movs	r7, #2
 800b51c:	f1ba 0f00 	cmp.w	sl, #0
 800b520:	d048      	beq.n	800b5b4 <__gethex+0x3f4>
 800b522:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b526:	2b02      	cmp	r3, #2
 800b528:	d015      	beq.n	800b556 <__gethex+0x396>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d017      	beq.n	800b55e <__gethex+0x39e>
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d109      	bne.n	800b546 <__gethex+0x386>
 800b532:	f01a 0f02 	tst.w	sl, #2
 800b536:	d006      	beq.n	800b546 <__gethex+0x386>
 800b538:	f8d9 0000 	ldr.w	r0, [r9]
 800b53c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b540:	f01a 0f01 	tst.w	sl, #1
 800b544:	d10e      	bne.n	800b564 <__gethex+0x3a4>
 800b546:	f047 0710 	orr.w	r7, r7, #16
 800b54a:	e033      	b.n	800b5b4 <__gethex+0x3f4>
 800b54c:	f04f 0a01 	mov.w	sl, #1
 800b550:	e7d0      	b.n	800b4f4 <__gethex+0x334>
 800b552:	2701      	movs	r7, #1
 800b554:	e7e2      	b.n	800b51c <__gethex+0x35c>
 800b556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b558:	f1c3 0301 	rsb	r3, r3, #1
 800b55c:	9315      	str	r3, [sp, #84]	; 0x54
 800b55e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b560:	2b00      	cmp	r3, #0
 800b562:	d0f0      	beq.n	800b546 <__gethex+0x386>
 800b564:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b568:	f104 0314 	add.w	r3, r4, #20
 800b56c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b570:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b574:	f04f 0c00 	mov.w	ip, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b582:	d01c      	beq.n	800b5be <__gethex+0x3fe>
 800b584:	3201      	adds	r2, #1
 800b586:	6002      	str	r2, [r0, #0]
 800b588:	2f02      	cmp	r7, #2
 800b58a:	f104 0314 	add.w	r3, r4, #20
 800b58e:	d13f      	bne.n	800b610 <__gethex+0x450>
 800b590:	f8d8 2000 	ldr.w	r2, [r8]
 800b594:	3a01      	subs	r2, #1
 800b596:	42b2      	cmp	r2, r6
 800b598:	d10a      	bne.n	800b5b0 <__gethex+0x3f0>
 800b59a:	1171      	asrs	r1, r6, #5
 800b59c:	2201      	movs	r2, #1
 800b59e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5a2:	f006 061f 	and.w	r6, r6, #31
 800b5a6:	fa02 f606 	lsl.w	r6, r2, r6
 800b5aa:	421e      	tst	r6, r3
 800b5ac:	bf18      	it	ne
 800b5ae:	4617      	movne	r7, r2
 800b5b0:	f047 0720 	orr.w	r7, r7, #32
 800b5b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5b6:	601c      	str	r4, [r3, #0]
 800b5b8:	9b04      	ldr	r3, [sp, #16]
 800b5ba:	601d      	str	r5, [r3, #0]
 800b5bc:	e695      	b.n	800b2ea <__gethex+0x12a>
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5c4:	d8d8      	bhi.n	800b578 <__gethex+0x3b8>
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	459b      	cmp	fp, r3
 800b5ca:	db19      	blt.n	800b600 <__gethex+0x440>
 800b5cc:	6861      	ldr	r1, [r4, #4]
 800b5ce:	ee18 0a10 	vmov	r0, s16
 800b5d2:	3101      	adds	r1, #1
 800b5d4:	f000 f990 	bl	800b8f8 <_Balloc>
 800b5d8:	4681      	mov	r9, r0
 800b5da:	b918      	cbnz	r0, 800b5e4 <__gethex+0x424>
 800b5dc:	4b1a      	ldr	r3, [pc, #104]	; (800b648 <__gethex+0x488>)
 800b5de:	4602      	mov	r2, r0
 800b5e0:	2184      	movs	r1, #132	; 0x84
 800b5e2:	e6a8      	b.n	800b336 <__gethex+0x176>
 800b5e4:	6922      	ldr	r2, [r4, #16]
 800b5e6:	3202      	adds	r2, #2
 800b5e8:	f104 010c 	add.w	r1, r4, #12
 800b5ec:	0092      	lsls	r2, r2, #2
 800b5ee:	300c      	adds	r0, #12
 800b5f0:	f000 f974 	bl	800b8dc <memcpy>
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	ee18 0a10 	vmov	r0, s16
 800b5fa:	f000 f9bd 	bl	800b978 <_Bfree>
 800b5fe:	464c      	mov	r4, r9
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b608:	6122      	str	r2, [r4, #16]
 800b60a:	2201      	movs	r2, #1
 800b60c:	615a      	str	r2, [r3, #20]
 800b60e:	e7bb      	b.n	800b588 <__gethex+0x3c8>
 800b610:	6922      	ldr	r2, [r4, #16]
 800b612:	455a      	cmp	r2, fp
 800b614:	dd0b      	ble.n	800b62e <__gethex+0x46e>
 800b616:	2101      	movs	r1, #1
 800b618:	4620      	mov	r0, r4
 800b61a:	f7ff fd6a 	bl	800b0f2 <rshift>
 800b61e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b622:	3501      	adds	r5, #1
 800b624:	42ab      	cmp	r3, r5
 800b626:	f6ff aed0 	blt.w	800b3ca <__gethex+0x20a>
 800b62a:	2701      	movs	r7, #1
 800b62c:	e7c0      	b.n	800b5b0 <__gethex+0x3f0>
 800b62e:	f016 061f 	ands.w	r6, r6, #31
 800b632:	d0fa      	beq.n	800b62a <__gethex+0x46a>
 800b634:	4453      	add	r3, sl
 800b636:	f1c6 0620 	rsb	r6, r6, #32
 800b63a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b63e:	f000 fa4d 	bl	800badc <__hi0bits>
 800b642:	42b0      	cmp	r0, r6
 800b644:	dbe7      	blt.n	800b616 <__gethex+0x456>
 800b646:	e7f0      	b.n	800b62a <__gethex+0x46a>
 800b648:	0800d030 	.word	0x0800d030

0800b64c <L_shift>:
 800b64c:	f1c2 0208 	rsb	r2, r2, #8
 800b650:	0092      	lsls	r2, r2, #2
 800b652:	b570      	push	{r4, r5, r6, lr}
 800b654:	f1c2 0620 	rsb	r6, r2, #32
 800b658:	6843      	ldr	r3, [r0, #4]
 800b65a:	6804      	ldr	r4, [r0, #0]
 800b65c:	fa03 f506 	lsl.w	r5, r3, r6
 800b660:	432c      	orrs	r4, r5
 800b662:	40d3      	lsrs	r3, r2
 800b664:	6004      	str	r4, [r0, #0]
 800b666:	f840 3f04 	str.w	r3, [r0, #4]!
 800b66a:	4288      	cmp	r0, r1
 800b66c:	d3f4      	bcc.n	800b658 <L_shift+0xc>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}

0800b670 <__match>:
 800b670:	b530      	push	{r4, r5, lr}
 800b672:	6803      	ldr	r3, [r0, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67a:	b914      	cbnz	r4, 800b682 <__match+0x12>
 800b67c:	6003      	str	r3, [r0, #0]
 800b67e:	2001      	movs	r0, #1
 800b680:	bd30      	pop	{r4, r5, pc}
 800b682:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b686:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b68a:	2d19      	cmp	r5, #25
 800b68c:	bf98      	it	ls
 800b68e:	3220      	addls	r2, #32
 800b690:	42a2      	cmp	r2, r4
 800b692:	d0f0      	beq.n	800b676 <__match+0x6>
 800b694:	2000      	movs	r0, #0
 800b696:	e7f3      	b.n	800b680 <__match+0x10>

0800b698 <__hexnan>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	680b      	ldr	r3, [r1, #0]
 800b69e:	115e      	asrs	r6, r3, #5
 800b6a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6a4:	f013 031f 	ands.w	r3, r3, #31
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	bf18      	it	ne
 800b6ac:	3604      	addne	r6, #4
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	1f37      	subs	r7, r6, #4
 800b6b2:	4690      	mov	r8, r2
 800b6b4:	6802      	ldr	r2, [r0, #0]
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6be:	46b9      	mov	r9, r7
 800b6c0:	463c      	mov	r4, r7
 800b6c2:	9502      	str	r5, [sp, #8]
 800b6c4:	46ab      	mov	fp, r5
 800b6c6:	7851      	ldrb	r1, [r2, #1]
 800b6c8:	1c53      	adds	r3, r2, #1
 800b6ca:	9303      	str	r3, [sp, #12]
 800b6cc:	b341      	cbz	r1, 800b720 <__hexnan+0x88>
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	9205      	str	r2, [sp, #20]
 800b6d2:	9104      	str	r1, [sp, #16]
 800b6d4:	f7ff fd5f 	bl	800b196 <__hexdig_fun>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d14f      	bne.n	800b77c <__hexnan+0xe4>
 800b6dc:	9904      	ldr	r1, [sp, #16]
 800b6de:	9a05      	ldr	r2, [sp, #20]
 800b6e0:	2920      	cmp	r1, #32
 800b6e2:	d818      	bhi.n	800b716 <__hexnan+0x7e>
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	459b      	cmp	fp, r3
 800b6e8:	dd13      	ble.n	800b712 <__hexnan+0x7a>
 800b6ea:	454c      	cmp	r4, r9
 800b6ec:	d206      	bcs.n	800b6fc <__hexnan+0x64>
 800b6ee:	2d07      	cmp	r5, #7
 800b6f0:	dc04      	bgt.n	800b6fc <__hexnan+0x64>
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff ffa8 	bl	800b64c <L_shift>
 800b6fc:	4544      	cmp	r4, r8
 800b6fe:	d950      	bls.n	800b7a2 <__hexnan+0x10a>
 800b700:	2300      	movs	r3, #0
 800b702:	f1a4 0904 	sub.w	r9, r4, #4
 800b706:	f844 3c04 	str.w	r3, [r4, #-4]
 800b70a:	f8cd b008 	str.w	fp, [sp, #8]
 800b70e:	464c      	mov	r4, r9
 800b710:	461d      	mov	r5, r3
 800b712:	9a03      	ldr	r2, [sp, #12]
 800b714:	e7d7      	b.n	800b6c6 <__hexnan+0x2e>
 800b716:	2929      	cmp	r1, #41	; 0x29
 800b718:	d156      	bne.n	800b7c8 <__hexnan+0x130>
 800b71a:	3202      	adds	r2, #2
 800b71c:	f8ca 2000 	str.w	r2, [sl]
 800b720:	f1bb 0f00 	cmp.w	fp, #0
 800b724:	d050      	beq.n	800b7c8 <__hexnan+0x130>
 800b726:	454c      	cmp	r4, r9
 800b728:	d206      	bcs.n	800b738 <__hexnan+0xa0>
 800b72a:	2d07      	cmp	r5, #7
 800b72c:	dc04      	bgt.n	800b738 <__hexnan+0xa0>
 800b72e:	462a      	mov	r2, r5
 800b730:	4649      	mov	r1, r9
 800b732:	4620      	mov	r0, r4
 800b734:	f7ff ff8a 	bl	800b64c <L_shift>
 800b738:	4544      	cmp	r4, r8
 800b73a:	d934      	bls.n	800b7a6 <__hexnan+0x10e>
 800b73c:	f1a8 0204 	sub.w	r2, r8, #4
 800b740:	4623      	mov	r3, r4
 800b742:	f853 1b04 	ldr.w	r1, [r3], #4
 800b746:	f842 1f04 	str.w	r1, [r2, #4]!
 800b74a:	429f      	cmp	r7, r3
 800b74c:	d2f9      	bcs.n	800b742 <__hexnan+0xaa>
 800b74e:	1b3b      	subs	r3, r7, r4
 800b750:	f023 0303 	bic.w	r3, r3, #3
 800b754:	3304      	adds	r3, #4
 800b756:	3401      	adds	r4, #1
 800b758:	3e03      	subs	r6, #3
 800b75a:	42b4      	cmp	r4, r6
 800b75c:	bf88      	it	hi
 800b75e:	2304      	movhi	r3, #4
 800b760:	4443      	add	r3, r8
 800b762:	2200      	movs	r2, #0
 800b764:	f843 2b04 	str.w	r2, [r3], #4
 800b768:	429f      	cmp	r7, r3
 800b76a:	d2fb      	bcs.n	800b764 <__hexnan+0xcc>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	b91b      	cbnz	r3, 800b778 <__hexnan+0xe0>
 800b770:	4547      	cmp	r7, r8
 800b772:	d127      	bne.n	800b7c4 <__hexnan+0x12c>
 800b774:	2301      	movs	r3, #1
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	2005      	movs	r0, #5
 800b77a:	e026      	b.n	800b7ca <__hexnan+0x132>
 800b77c:	3501      	adds	r5, #1
 800b77e:	2d08      	cmp	r5, #8
 800b780:	f10b 0b01 	add.w	fp, fp, #1
 800b784:	dd06      	ble.n	800b794 <__hexnan+0xfc>
 800b786:	4544      	cmp	r4, r8
 800b788:	d9c3      	bls.n	800b712 <__hexnan+0x7a>
 800b78a:	2300      	movs	r3, #0
 800b78c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b790:	2501      	movs	r5, #1
 800b792:	3c04      	subs	r4, #4
 800b794:	6822      	ldr	r2, [r4, #0]
 800b796:	f000 000f 	and.w	r0, r0, #15
 800b79a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b79e:	6022      	str	r2, [r4, #0]
 800b7a0:	e7b7      	b.n	800b712 <__hexnan+0x7a>
 800b7a2:	2508      	movs	r5, #8
 800b7a4:	e7b5      	b.n	800b712 <__hexnan+0x7a>
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0df      	beq.n	800b76c <__hexnan+0xd4>
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b0:	f1c3 0320 	rsb	r3, r3, #32
 800b7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7bc:	401a      	ands	r2, r3
 800b7be:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7c2:	e7d3      	b.n	800b76c <__hexnan+0xd4>
 800b7c4:	3f04      	subs	r7, #4
 800b7c6:	e7d1      	b.n	800b76c <__hexnan+0xd4>
 800b7c8:	2004      	movs	r0, #4
 800b7ca:	b007      	add	sp, #28
 800b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7d0 <_localeconv_r>:
 800b7d0:	4800      	ldr	r0, [pc, #0]	; (800b7d4 <_localeconv_r+0x4>)
 800b7d2:	4770      	bx	lr
 800b7d4:	20000164 	.word	0x20000164

0800b7d8 <__retarget_lock_init_recursive>:
 800b7d8:	4770      	bx	lr

0800b7da <__retarget_lock_acquire_recursive>:
 800b7da:	4770      	bx	lr

0800b7dc <__retarget_lock_release_recursive>:
 800b7dc:	4770      	bx	lr

0800b7de <__swhatbuf_r>:
 800b7de:	b570      	push	{r4, r5, r6, lr}
 800b7e0:	460e      	mov	r6, r1
 800b7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e6:	2900      	cmp	r1, #0
 800b7e8:	b096      	sub	sp, #88	; 0x58
 800b7ea:	4614      	mov	r4, r2
 800b7ec:	461d      	mov	r5, r3
 800b7ee:	da08      	bge.n	800b802 <__swhatbuf_r+0x24>
 800b7f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	602a      	str	r2, [r5, #0]
 800b7f8:	061a      	lsls	r2, r3, #24
 800b7fa:	d410      	bmi.n	800b81e <__swhatbuf_r+0x40>
 800b7fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b800:	e00e      	b.n	800b820 <__swhatbuf_r+0x42>
 800b802:	466a      	mov	r2, sp
 800b804:	f001 f9b6 	bl	800cb74 <_fstat_r>
 800b808:	2800      	cmp	r0, #0
 800b80a:	dbf1      	blt.n	800b7f0 <__swhatbuf_r+0x12>
 800b80c:	9a01      	ldr	r2, [sp, #4]
 800b80e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b812:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b816:	425a      	negs	r2, r3
 800b818:	415a      	adcs	r2, r3
 800b81a:	602a      	str	r2, [r5, #0]
 800b81c:	e7ee      	b.n	800b7fc <__swhatbuf_r+0x1e>
 800b81e:	2340      	movs	r3, #64	; 0x40
 800b820:	2000      	movs	r0, #0
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	b016      	add	sp, #88	; 0x58
 800b826:	bd70      	pop	{r4, r5, r6, pc}

0800b828 <__smakebuf_r>:
 800b828:	898b      	ldrh	r3, [r1, #12]
 800b82a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b82c:	079d      	lsls	r5, r3, #30
 800b82e:	4606      	mov	r6, r0
 800b830:	460c      	mov	r4, r1
 800b832:	d507      	bpl.n	800b844 <__smakebuf_r+0x1c>
 800b834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	2301      	movs	r3, #1
 800b83e:	6163      	str	r3, [r4, #20]
 800b840:	b002      	add	sp, #8
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	ab01      	add	r3, sp, #4
 800b846:	466a      	mov	r2, sp
 800b848:	f7ff ffc9 	bl	800b7de <__swhatbuf_r>
 800b84c:	9900      	ldr	r1, [sp, #0]
 800b84e:	4605      	mov	r5, r0
 800b850:	4630      	mov	r0, r6
 800b852:	f000 fd95 	bl	800c380 <_malloc_r>
 800b856:	b948      	cbnz	r0, 800b86c <__smakebuf_r+0x44>
 800b858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85c:	059a      	lsls	r2, r3, #22
 800b85e:	d4ef      	bmi.n	800b840 <__smakebuf_r+0x18>
 800b860:	f023 0303 	bic.w	r3, r3, #3
 800b864:	f043 0302 	orr.w	r3, r3, #2
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	e7e3      	b.n	800b834 <__smakebuf_r+0xc>
 800b86c:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <__smakebuf_r+0x7c>)
 800b86e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	6020      	str	r0, [r4, #0]
 800b874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	9b00      	ldr	r3, [sp, #0]
 800b87c:	6163      	str	r3, [r4, #20]
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	6120      	str	r0, [r4, #16]
 800b882:	b15b      	cbz	r3, 800b89c <__smakebuf_r+0x74>
 800b884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b888:	4630      	mov	r0, r6
 800b88a:	f001 f985 	bl	800cb98 <_isatty_r>
 800b88e:	b128      	cbz	r0, 800b89c <__smakebuf_r+0x74>
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	f023 0303 	bic.w	r3, r3, #3
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	89a0      	ldrh	r0, [r4, #12]
 800b89e:	4305      	orrs	r5, r0
 800b8a0:	81a5      	strh	r5, [r4, #12]
 800b8a2:	e7cd      	b.n	800b840 <__smakebuf_r+0x18>
 800b8a4:	0800af51 	.word	0x0800af51

0800b8a8 <malloc>:
 800b8a8:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <malloc+0xc>)
 800b8aa:	4601      	mov	r1, r0
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	f000 bd67 	b.w	800c380 <_malloc_r>
 800b8b2:	bf00      	nop
 800b8b4:	2000000c 	.word	0x2000000c

0800b8b8 <__ascii_mbtowc>:
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	b901      	cbnz	r1, 800b8be <__ascii_mbtowc+0x6>
 800b8bc:	a901      	add	r1, sp, #4
 800b8be:	b142      	cbz	r2, 800b8d2 <__ascii_mbtowc+0x1a>
 800b8c0:	b14b      	cbz	r3, 800b8d6 <__ascii_mbtowc+0x1e>
 800b8c2:	7813      	ldrb	r3, [r2, #0]
 800b8c4:	600b      	str	r3, [r1, #0]
 800b8c6:	7812      	ldrb	r2, [r2, #0]
 800b8c8:	1e10      	subs	r0, r2, #0
 800b8ca:	bf18      	it	ne
 800b8cc:	2001      	movne	r0, #1
 800b8ce:	b002      	add	sp, #8
 800b8d0:	4770      	bx	lr
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	e7fb      	b.n	800b8ce <__ascii_mbtowc+0x16>
 800b8d6:	f06f 0001 	mvn.w	r0, #1
 800b8da:	e7f8      	b.n	800b8ce <__ascii_mbtowc+0x16>

0800b8dc <memcpy>:
 800b8dc:	440a      	add	r2, r1
 800b8de:	4291      	cmp	r1, r2
 800b8e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8e4:	d100      	bne.n	800b8e8 <memcpy+0xc>
 800b8e6:	4770      	bx	lr
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8f2:	4291      	cmp	r1, r2
 800b8f4:	d1f9      	bne.n	800b8ea <memcpy+0xe>
 800b8f6:	bd10      	pop	{r4, pc}

0800b8f8 <_Balloc>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	460d      	mov	r5, r1
 800b900:	b976      	cbnz	r6, 800b920 <_Balloc+0x28>
 800b902:	2010      	movs	r0, #16
 800b904:	f7ff ffd0 	bl	800b8a8 <malloc>
 800b908:	4602      	mov	r2, r0
 800b90a:	6260      	str	r0, [r4, #36]	; 0x24
 800b90c:	b920      	cbnz	r0, 800b918 <_Balloc+0x20>
 800b90e:	4b18      	ldr	r3, [pc, #96]	; (800b970 <_Balloc+0x78>)
 800b910:	4818      	ldr	r0, [pc, #96]	; (800b974 <_Balloc+0x7c>)
 800b912:	2166      	movs	r1, #102	; 0x66
 800b914:	f001 f8ee 	bl	800caf4 <__assert_func>
 800b918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b91c:	6006      	str	r6, [r0, #0]
 800b91e:	60c6      	str	r6, [r0, #12]
 800b920:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b922:	68f3      	ldr	r3, [r6, #12]
 800b924:	b183      	cbz	r3, 800b948 <_Balloc+0x50>
 800b926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b92e:	b9b8      	cbnz	r0, 800b960 <_Balloc+0x68>
 800b930:	2101      	movs	r1, #1
 800b932:	fa01 f605 	lsl.w	r6, r1, r5
 800b936:	1d72      	adds	r2, r6, #5
 800b938:	0092      	lsls	r2, r2, #2
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 fc9d 	bl	800c27a <_calloc_r>
 800b940:	b160      	cbz	r0, 800b95c <_Balloc+0x64>
 800b942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b946:	e00e      	b.n	800b966 <_Balloc+0x6e>
 800b948:	2221      	movs	r2, #33	; 0x21
 800b94a:	2104      	movs	r1, #4
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fc94 	bl	800c27a <_calloc_r>
 800b952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b954:	60f0      	str	r0, [r6, #12]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1e4      	bne.n	800b926 <_Balloc+0x2e>
 800b95c:	2000      	movs	r0, #0
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	6802      	ldr	r2, [r0, #0]
 800b962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b966:	2300      	movs	r3, #0
 800b968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b96c:	e7f7      	b.n	800b95e <_Balloc+0x66>
 800b96e:	bf00      	nop
 800b970:	0800cfbe 	.word	0x0800cfbe
 800b974:	0800d120 	.word	0x0800d120

0800b978 <_Bfree>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	b976      	cbnz	r6, 800b9a0 <_Bfree+0x28>
 800b982:	2010      	movs	r0, #16
 800b984:	f7ff ff90 	bl	800b8a8 <malloc>
 800b988:	4602      	mov	r2, r0
 800b98a:	6268      	str	r0, [r5, #36]	; 0x24
 800b98c:	b920      	cbnz	r0, 800b998 <_Bfree+0x20>
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <_Bfree+0x3c>)
 800b990:	4809      	ldr	r0, [pc, #36]	; (800b9b8 <_Bfree+0x40>)
 800b992:	218a      	movs	r1, #138	; 0x8a
 800b994:	f001 f8ae 	bl	800caf4 <__assert_func>
 800b998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b99c:	6006      	str	r6, [r0, #0]
 800b99e:	60c6      	str	r6, [r0, #12]
 800b9a0:	b13c      	cbz	r4, 800b9b2 <_Bfree+0x3a>
 800b9a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9a4:	6862      	ldr	r2, [r4, #4]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9ac:	6021      	str	r1, [r4, #0]
 800b9ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	0800cfbe 	.word	0x0800cfbe
 800b9b8:	0800d120 	.word	0x0800d120

0800b9bc <__multadd>:
 800b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	690d      	ldr	r5, [r1, #16]
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	461e      	mov	r6, r3
 800b9c8:	f101 0c14 	add.w	ip, r1, #20
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f8dc 3000 	ldr.w	r3, [ip]
 800b9d2:	b299      	uxth	r1, r3
 800b9d4:	fb02 6101 	mla	r1, r2, r1, r6
 800b9d8:	0c1e      	lsrs	r6, r3, #16
 800b9da:	0c0b      	lsrs	r3, r1, #16
 800b9dc:	fb02 3306 	mla	r3, r2, r6, r3
 800b9e0:	b289      	uxth	r1, r1
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9e8:	4285      	cmp	r5, r0
 800b9ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b9ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9f2:	dcec      	bgt.n	800b9ce <__multadd+0x12>
 800b9f4:	b30e      	cbz	r6, 800ba3a <__multadd+0x7e>
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	42ab      	cmp	r3, r5
 800b9fa:	dc19      	bgt.n	800ba30 <__multadd+0x74>
 800b9fc:	6861      	ldr	r1, [r4, #4]
 800b9fe:	4638      	mov	r0, r7
 800ba00:	3101      	adds	r1, #1
 800ba02:	f7ff ff79 	bl	800b8f8 <_Balloc>
 800ba06:	4680      	mov	r8, r0
 800ba08:	b928      	cbnz	r0, 800ba16 <__multadd+0x5a>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <__multadd+0x84>)
 800ba0e:	480d      	ldr	r0, [pc, #52]	; (800ba44 <__multadd+0x88>)
 800ba10:	21b5      	movs	r1, #181	; 0xb5
 800ba12:	f001 f86f 	bl	800caf4 <__assert_func>
 800ba16:	6922      	ldr	r2, [r4, #16]
 800ba18:	3202      	adds	r2, #2
 800ba1a:	f104 010c 	add.w	r1, r4, #12
 800ba1e:	0092      	lsls	r2, r2, #2
 800ba20:	300c      	adds	r0, #12
 800ba22:	f7ff ff5b 	bl	800b8dc <memcpy>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ffa5 	bl	800b978 <_Bfree>
 800ba2e:	4644      	mov	r4, r8
 800ba30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba34:	3501      	adds	r5, #1
 800ba36:	615e      	str	r6, [r3, #20]
 800ba38:	6125      	str	r5, [r4, #16]
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba40:	0800d030 	.word	0x0800d030
 800ba44:	0800d120 	.word	0x0800d120

0800ba48 <__s2b>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	4615      	mov	r5, r2
 800ba50:	461f      	mov	r7, r3
 800ba52:	2209      	movs	r2, #9
 800ba54:	3308      	adds	r3, #8
 800ba56:	4606      	mov	r6, r0
 800ba58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	2201      	movs	r2, #1
 800ba60:	429a      	cmp	r2, r3
 800ba62:	db09      	blt.n	800ba78 <__s2b+0x30>
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff ff47 	bl	800b8f8 <_Balloc>
 800ba6a:	b940      	cbnz	r0, 800ba7e <__s2b+0x36>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <__s2b+0x8c>)
 800ba70:	4819      	ldr	r0, [pc, #100]	; (800bad8 <__s2b+0x90>)
 800ba72:	21ce      	movs	r1, #206	; 0xce
 800ba74:	f001 f83e 	bl	800caf4 <__assert_func>
 800ba78:	0052      	lsls	r2, r2, #1
 800ba7a:	3101      	adds	r1, #1
 800ba7c:	e7f0      	b.n	800ba60 <__s2b+0x18>
 800ba7e:	9b08      	ldr	r3, [sp, #32]
 800ba80:	6143      	str	r3, [r0, #20]
 800ba82:	2d09      	cmp	r5, #9
 800ba84:	f04f 0301 	mov.w	r3, #1
 800ba88:	6103      	str	r3, [r0, #16]
 800ba8a:	dd16      	ble.n	800baba <__s2b+0x72>
 800ba8c:	f104 0909 	add.w	r9, r4, #9
 800ba90:	46c8      	mov	r8, r9
 800ba92:	442c      	add	r4, r5
 800ba94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba98:	4601      	mov	r1, r0
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7ff ff8c 	bl	800b9bc <__multadd>
 800baa4:	45a0      	cmp	r8, r4
 800baa6:	d1f5      	bne.n	800ba94 <__s2b+0x4c>
 800baa8:	f1a5 0408 	sub.w	r4, r5, #8
 800baac:	444c      	add	r4, r9
 800baae:	1b2d      	subs	r5, r5, r4
 800bab0:	1963      	adds	r3, r4, r5
 800bab2:	42bb      	cmp	r3, r7
 800bab4:	db04      	blt.n	800bac0 <__s2b+0x78>
 800bab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baba:	340a      	adds	r4, #10
 800babc:	2509      	movs	r5, #9
 800babe:	e7f6      	b.n	800baae <__s2b+0x66>
 800bac0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bac4:	4601      	mov	r1, r0
 800bac6:	3b30      	subs	r3, #48	; 0x30
 800bac8:	220a      	movs	r2, #10
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ff76 	bl	800b9bc <__multadd>
 800bad0:	e7ee      	b.n	800bab0 <__s2b+0x68>
 800bad2:	bf00      	nop
 800bad4:	0800d030 	.word	0x0800d030
 800bad8:	0800d120 	.word	0x0800d120

0800badc <__hi0bits>:
 800badc:	0c03      	lsrs	r3, r0, #16
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	b9d3      	cbnz	r3, 800bb18 <__hi0bits+0x3c>
 800bae2:	0400      	lsls	r0, r0, #16
 800bae4:	2310      	movs	r3, #16
 800bae6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baea:	bf04      	itt	eq
 800baec:	0200      	lsleq	r0, r0, #8
 800baee:	3308      	addeq	r3, #8
 800baf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800baf4:	bf04      	itt	eq
 800baf6:	0100      	lsleq	r0, r0, #4
 800baf8:	3304      	addeq	r3, #4
 800bafa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bafe:	bf04      	itt	eq
 800bb00:	0080      	lsleq	r0, r0, #2
 800bb02:	3302      	addeq	r3, #2
 800bb04:	2800      	cmp	r0, #0
 800bb06:	db05      	blt.n	800bb14 <__hi0bits+0x38>
 800bb08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb0c:	f103 0301 	add.w	r3, r3, #1
 800bb10:	bf08      	it	eq
 800bb12:	2320      	moveq	r3, #32
 800bb14:	4618      	mov	r0, r3
 800bb16:	4770      	bx	lr
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e7e4      	b.n	800bae6 <__hi0bits+0xa>

0800bb1c <__lo0bits>:
 800bb1c:	6803      	ldr	r3, [r0, #0]
 800bb1e:	f013 0207 	ands.w	r2, r3, #7
 800bb22:	4601      	mov	r1, r0
 800bb24:	d00b      	beq.n	800bb3e <__lo0bits+0x22>
 800bb26:	07da      	lsls	r2, r3, #31
 800bb28:	d423      	bmi.n	800bb72 <__lo0bits+0x56>
 800bb2a:	0798      	lsls	r0, r3, #30
 800bb2c:	bf49      	itett	mi
 800bb2e:	085b      	lsrmi	r3, r3, #1
 800bb30:	089b      	lsrpl	r3, r3, #2
 800bb32:	2001      	movmi	r0, #1
 800bb34:	600b      	strmi	r3, [r1, #0]
 800bb36:	bf5c      	itt	pl
 800bb38:	600b      	strpl	r3, [r1, #0]
 800bb3a:	2002      	movpl	r0, #2
 800bb3c:	4770      	bx	lr
 800bb3e:	b298      	uxth	r0, r3
 800bb40:	b9a8      	cbnz	r0, 800bb6e <__lo0bits+0x52>
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	2010      	movs	r0, #16
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	b90a      	cbnz	r2, 800bb4e <__lo0bits+0x32>
 800bb4a:	3008      	adds	r0, #8
 800bb4c:	0a1b      	lsrs	r3, r3, #8
 800bb4e:	071a      	lsls	r2, r3, #28
 800bb50:	bf04      	itt	eq
 800bb52:	091b      	lsreq	r3, r3, #4
 800bb54:	3004      	addeq	r0, #4
 800bb56:	079a      	lsls	r2, r3, #30
 800bb58:	bf04      	itt	eq
 800bb5a:	089b      	lsreq	r3, r3, #2
 800bb5c:	3002      	addeq	r0, #2
 800bb5e:	07da      	lsls	r2, r3, #31
 800bb60:	d403      	bmi.n	800bb6a <__lo0bits+0x4e>
 800bb62:	085b      	lsrs	r3, r3, #1
 800bb64:	f100 0001 	add.w	r0, r0, #1
 800bb68:	d005      	beq.n	800bb76 <__lo0bits+0x5a>
 800bb6a:	600b      	str	r3, [r1, #0]
 800bb6c:	4770      	bx	lr
 800bb6e:	4610      	mov	r0, r2
 800bb70:	e7e9      	b.n	800bb46 <__lo0bits+0x2a>
 800bb72:	2000      	movs	r0, #0
 800bb74:	4770      	bx	lr
 800bb76:	2020      	movs	r0, #32
 800bb78:	4770      	bx	lr
	...

0800bb7c <__i2b>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2101      	movs	r1, #1
 800bb82:	f7ff feb9 	bl	800b8f8 <_Balloc>
 800bb86:	4602      	mov	r2, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__i2b+0x1a>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <__i2b+0x24>)
 800bb8c:	4805      	ldr	r0, [pc, #20]	; (800bba4 <__i2b+0x28>)
 800bb8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb92:	f000 ffaf 	bl	800caf4 <__assert_func>
 800bb96:	2301      	movs	r3, #1
 800bb98:	6144      	str	r4, [r0, #20]
 800bb9a:	6103      	str	r3, [r0, #16]
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800d030 	.word	0x0800d030
 800bba4:	0800d120 	.word	0x0800d120

0800bba8 <__multiply>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	4691      	mov	r9, r2
 800bbae:	690a      	ldr	r2, [r1, #16]
 800bbb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	bfb8      	it	lt
 800bbb8:	460b      	movlt	r3, r1
 800bbba:	460c      	mov	r4, r1
 800bbbc:	bfbc      	itt	lt
 800bbbe:	464c      	movlt	r4, r9
 800bbc0:	4699      	movlt	r9, r3
 800bbc2:	6927      	ldr	r7, [r4, #16]
 800bbc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbc8:	68a3      	ldr	r3, [r4, #8]
 800bbca:	6861      	ldr	r1, [r4, #4]
 800bbcc:	eb07 060a 	add.w	r6, r7, sl
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	bfb8      	it	lt
 800bbd6:	3101      	addlt	r1, #1
 800bbd8:	f7ff fe8e 	bl	800b8f8 <_Balloc>
 800bbdc:	b930      	cbnz	r0, 800bbec <__multiply+0x44>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b44      	ldr	r3, [pc, #272]	; (800bcf4 <__multiply+0x14c>)
 800bbe2:	4845      	ldr	r0, [pc, #276]	; (800bcf8 <__multiply+0x150>)
 800bbe4:	f240 115d 	movw	r1, #349	; 0x15d
 800bbe8:	f000 ff84 	bl	800caf4 <__assert_func>
 800bbec:	f100 0514 	add.w	r5, r0, #20
 800bbf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4543      	cmp	r3, r8
 800bbfa:	d321      	bcc.n	800bc40 <__multiply+0x98>
 800bbfc:	f104 0314 	add.w	r3, r4, #20
 800bc00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc04:	f109 0314 	add.w	r3, r9, #20
 800bc08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc0c:	9202      	str	r2, [sp, #8]
 800bc0e:	1b3a      	subs	r2, r7, r4
 800bc10:	3a15      	subs	r2, #21
 800bc12:	f022 0203 	bic.w	r2, r2, #3
 800bc16:	3204      	adds	r2, #4
 800bc18:	f104 0115 	add.w	r1, r4, #21
 800bc1c:	428f      	cmp	r7, r1
 800bc1e:	bf38      	it	cc
 800bc20:	2204      	movcc	r2, #4
 800bc22:	9201      	str	r2, [sp, #4]
 800bc24:	9a02      	ldr	r2, [sp, #8]
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d80c      	bhi.n	800bc46 <__multiply+0x9e>
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	dd03      	ble.n	800bc38 <__multiply+0x90>
 800bc30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d05a      	beq.n	800bcee <__multiply+0x146>
 800bc38:	6106      	str	r6, [r0, #16]
 800bc3a:	b005      	add	sp, #20
 800bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc40:	f843 2b04 	str.w	r2, [r3], #4
 800bc44:	e7d8      	b.n	800bbf8 <__multiply+0x50>
 800bc46:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc4a:	f1ba 0f00 	cmp.w	sl, #0
 800bc4e:	d024      	beq.n	800bc9a <__multiply+0xf2>
 800bc50:	f104 0e14 	add.w	lr, r4, #20
 800bc54:	46a9      	mov	r9, r5
 800bc56:	f04f 0c00 	mov.w	ip, #0
 800bc5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc5e:	f8d9 1000 	ldr.w	r1, [r9]
 800bc62:	fa1f fb82 	uxth.w	fp, r2
 800bc66:	b289      	uxth	r1, r1
 800bc68:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc70:	f8d9 2000 	ldr.w	r2, [r9]
 800bc74:	4461      	add	r1, ip
 800bc76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc82:	b289      	uxth	r1, r1
 800bc84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc88:	4577      	cmp	r7, lr
 800bc8a:	f849 1b04 	str.w	r1, [r9], #4
 800bc8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc92:	d8e2      	bhi.n	800bc5a <__multiply+0xb2>
 800bc94:	9a01      	ldr	r2, [sp, #4]
 800bc96:	f845 c002 	str.w	ip, [r5, r2]
 800bc9a:	9a03      	ldr	r2, [sp, #12]
 800bc9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bca0:	3304      	adds	r3, #4
 800bca2:	f1b9 0f00 	cmp.w	r9, #0
 800bca6:	d020      	beq.n	800bcea <__multiply+0x142>
 800bca8:	6829      	ldr	r1, [r5, #0]
 800bcaa:	f104 0c14 	add.w	ip, r4, #20
 800bcae:	46ae      	mov	lr, r5
 800bcb0:	f04f 0a00 	mov.w	sl, #0
 800bcb4:	f8bc b000 	ldrh.w	fp, [ip]
 800bcb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcbc:	fb09 220b 	mla	r2, r9, fp, r2
 800bcc0:	4492      	add	sl, r2
 800bcc2:	b289      	uxth	r1, r1
 800bcc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcc8:	f84e 1b04 	str.w	r1, [lr], #4
 800bccc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcd0:	f8be 1000 	ldrh.w	r1, [lr]
 800bcd4:	0c12      	lsrs	r2, r2, #16
 800bcd6:	fb09 1102 	mla	r1, r9, r2, r1
 800bcda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcde:	4567      	cmp	r7, ip
 800bce0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bce4:	d8e6      	bhi.n	800bcb4 <__multiply+0x10c>
 800bce6:	9a01      	ldr	r2, [sp, #4]
 800bce8:	50a9      	str	r1, [r5, r2]
 800bcea:	3504      	adds	r5, #4
 800bcec:	e79a      	b.n	800bc24 <__multiply+0x7c>
 800bcee:	3e01      	subs	r6, #1
 800bcf0:	e79c      	b.n	800bc2c <__multiply+0x84>
 800bcf2:	bf00      	nop
 800bcf4:	0800d030 	.word	0x0800d030
 800bcf8:	0800d120 	.word	0x0800d120

0800bcfc <__pow5mult>:
 800bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	4615      	mov	r5, r2
 800bd02:	f012 0203 	ands.w	r2, r2, #3
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	d007      	beq.n	800bd1c <__pow5mult+0x20>
 800bd0c:	4c25      	ldr	r4, [pc, #148]	; (800bda4 <__pow5mult+0xa8>)
 800bd0e:	3a01      	subs	r2, #1
 800bd10:	2300      	movs	r3, #0
 800bd12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd16:	f7ff fe51 	bl	800b9bc <__multadd>
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	10ad      	asrs	r5, r5, #2
 800bd1e:	d03d      	beq.n	800bd9c <__pow5mult+0xa0>
 800bd20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd22:	b97c      	cbnz	r4, 800bd44 <__pow5mult+0x48>
 800bd24:	2010      	movs	r0, #16
 800bd26:	f7ff fdbf 	bl	800b8a8 <malloc>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	6270      	str	r0, [r6, #36]	; 0x24
 800bd2e:	b928      	cbnz	r0, 800bd3c <__pow5mult+0x40>
 800bd30:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <__pow5mult+0xac>)
 800bd32:	481e      	ldr	r0, [pc, #120]	; (800bdac <__pow5mult+0xb0>)
 800bd34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd38:	f000 fedc 	bl	800caf4 <__assert_func>
 800bd3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd40:	6004      	str	r4, [r0, #0]
 800bd42:	60c4      	str	r4, [r0, #12]
 800bd44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd4c:	b94c      	cbnz	r4, 800bd62 <__pow5mult+0x66>
 800bd4e:	f240 2171 	movw	r1, #625	; 0x271
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff12 	bl	800bb7c <__i2b>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd5e:	4604      	mov	r4, r0
 800bd60:	6003      	str	r3, [r0, #0]
 800bd62:	f04f 0900 	mov.w	r9, #0
 800bd66:	07eb      	lsls	r3, r5, #31
 800bd68:	d50a      	bpl.n	800bd80 <__pow5mult+0x84>
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7ff ff1a 	bl	800bba8 <__multiply>
 800bd74:	4639      	mov	r1, r7
 800bd76:	4680      	mov	r8, r0
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7ff fdfd 	bl	800b978 <_Bfree>
 800bd7e:	4647      	mov	r7, r8
 800bd80:	106d      	asrs	r5, r5, #1
 800bd82:	d00b      	beq.n	800bd9c <__pow5mult+0xa0>
 800bd84:	6820      	ldr	r0, [r4, #0]
 800bd86:	b938      	cbnz	r0, 800bd98 <__pow5mult+0x9c>
 800bd88:	4622      	mov	r2, r4
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ff0b 	bl	800bba8 <__multiply>
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	f8c0 9000 	str.w	r9, [r0]
 800bd98:	4604      	mov	r4, r0
 800bd9a:	e7e4      	b.n	800bd66 <__pow5mult+0x6a>
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda2:	bf00      	nop
 800bda4:	0800d270 	.word	0x0800d270
 800bda8:	0800cfbe 	.word	0x0800cfbe
 800bdac:	0800d120 	.word	0x0800d120

0800bdb0 <__lshift>:
 800bdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	6849      	ldr	r1, [r1, #4]
 800bdb8:	6923      	ldr	r3, [r4, #16]
 800bdba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	4691      	mov	r9, r2
 800bdc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdc8:	f108 0601 	add.w	r6, r8, #1
 800bdcc:	42b3      	cmp	r3, r6
 800bdce:	db0b      	blt.n	800bde8 <__lshift+0x38>
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff fd91 	bl	800b8f8 <_Balloc>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	b948      	cbnz	r0, 800bdee <__lshift+0x3e>
 800bdda:	4602      	mov	r2, r0
 800bddc:	4b2a      	ldr	r3, [pc, #168]	; (800be88 <__lshift+0xd8>)
 800bdde:	482b      	ldr	r0, [pc, #172]	; (800be8c <__lshift+0xdc>)
 800bde0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bde4:	f000 fe86 	bl	800caf4 <__assert_func>
 800bde8:	3101      	adds	r1, #1
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	e7ee      	b.n	800bdcc <__lshift+0x1c>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f100 0114 	add.w	r1, r0, #20
 800bdf4:	f100 0210 	add.w	r2, r0, #16
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	4553      	cmp	r3, sl
 800bdfc:	db37      	blt.n	800be6e <__lshift+0xbe>
 800bdfe:	6920      	ldr	r0, [r4, #16]
 800be00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be04:	f104 0314 	add.w	r3, r4, #20
 800be08:	f019 091f 	ands.w	r9, r9, #31
 800be0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be14:	d02f      	beq.n	800be76 <__lshift+0xc6>
 800be16:	f1c9 0e20 	rsb	lr, r9, #32
 800be1a:	468a      	mov	sl, r1
 800be1c:	f04f 0c00 	mov.w	ip, #0
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	fa02 f209 	lsl.w	r2, r2, r9
 800be26:	ea42 020c 	orr.w	r2, r2, ip
 800be2a:	f84a 2b04 	str.w	r2, [sl], #4
 800be2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be32:	4298      	cmp	r0, r3
 800be34:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be38:	d8f2      	bhi.n	800be20 <__lshift+0x70>
 800be3a:	1b03      	subs	r3, r0, r4
 800be3c:	3b15      	subs	r3, #21
 800be3e:	f023 0303 	bic.w	r3, r3, #3
 800be42:	3304      	adds	r3, #4
 800be44:	f104 0215 	add.w	r2, r4, #21
 800be48:	4290      	cmp	r0, r2
 800be4a:	bf38      	it	cc
 800be4c:	2304      	movcc	r3, #4
 800be4e:	f841 c003 	str.w	ip, [r1, r3]
 800be52:	f1bc 0f00 	cmp.w	ip, #0
 800be56:	d001      	beq.n	800be5c <__lshift+0xac>
 800be58:	f108 0602 	add.w	r6, r8, #2
 800be5c:	3e01      	subs	r6, #1
 800be5e:	4638      	mov	r0, r7
 800be60:	612e      	str	r6, [r5, #16]
 800be62:	4621      	mov	r1, r4
 800be64:	f7ff fd88 	bl	800b978 <_Bfree>
 800be68:	4628      	mov	r0, r5
 800be6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be72:	3301      	adds	r3, #1
 800be74:	e7c1      	b.n	800bdfa <__lshift+0x4a>
 800be76:	3904      	subs	r1, #4
 800be78:	f853 2b04 	ldr.w	r2, [r3], #4
 800be7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be80:	4298      	cmp	r0, r3
 800be82:	d8f9      	bhi.n	800be78 <__lshift+0xc8>
 800be84:	e7ea      	b.n	800be5c <__lshift+0xac>
 800be86:	bf00      	nop
 800be88:	0800d030 	.word	0x0800d030
 800be8c:	0800d120 	.word	0x0800d120

0800be90 <__mcmp>:
 800be90:	b530      	push	{r4, r5, lr}
 800be92:	6902      	ldr	r2, [r0, #16]
 800be94:	690c      	ldr	r4, [r1, #16]
 800be96:	1b12      	subs	r2, r2, r4
 800be98:	d10e      	bne.n	800beb8 <__mcmp+0x28>
 800be9a:	f100 0314 	add.w	r3, r0, #20
 800be9e:	3114      	adds	r1, #20
 800bea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800beac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800beb0:	42a5      	cmp	r5, r4
 800beb2:	d003      	beq.n	800bebc <__mcmp+0x2c>
 800beb4:	d305      	bcc.n	800bec2 <__mcmp+0x32>
 800beb6:	2201      	movs	r2, #1
 800beb8:	4610      	mov	r0, r2
 800beba:	bd30      	pop	{r4, r5, pc}
 800bebc:	4283      	cmp	r3, r0
 800bebe:	d3f3      	bcc.n	800bea8 <__mcmp+0x18>
 800bec0:	e7fa      	b.n	800beb8 <__mcmp+0x28>
 800bec2:	f04f 32ff 	mov.w	r2, #4294967295
 800bec6:	e7f7      	b.n	800beb8 <__mcmp+0x28>

0800bec8 <__mdiff>:
 800bec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	4606      	mov	r6, r0
 800bed0:	4611      	mov	r1, r2
 800bed2:	4620      	mov	r0, r4
 800bed4:	4690      	mov	r8, r2
 800bed6:	f7ff ffdb 	bl	800be90 <__mcmp>
 800beda:	1e05      	subs	r5, r0, #0
 800bedc:	d110      	bne.n	800bf00 <__mdiff+0x38>
 800bede:	4629      	mov	r1, r5
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7ff fd09 	bl	800b8f8 <_Balloc>
 800bee6:	b930      	cbnz	r0, 800bef6 <__mdiff+0x2e>
 800bee8:	4b3a      	ldr	r3, [pc, #232]	; (800bfd4 <__mdiff+0x10c>)
 800beea:	4602      	mov	r2, r0
 800beec:	f240 2132 	movw	r1, #562	; 0x232
 800bef0:	4839      	ldr	r0, [pc, #228]	; (800bfd8 <__mdiff+0x110>)
 800bef2:	f000 fdff 	bl	800caf4 <__assert_func>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800befc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf00:	bfa4      	itt	ge
 800bf02:	4643      	movge	r3, r8
 800bf04:	46a0      	movge	r8, r4
 800bf06:	4630      	mov	r0, r6
 800bf08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf0c:	bfa6      	itte	ge
 800bf0e:	461c      	movge	r4, r3
 800bf10:	2500      	movge	r5, #0
 800bf12:	2501      	movlt	r5, #1
 800bf14:	f7ff fcf0 	bl	800b8f8 <_Balloc>
 800bf18:	b920      	cbnz	r0, 800bf24 <__mdiff+0x5c>
 800bf1a:	4b2e      	ldr	r3, [pc, #184]	; (800bfd4 <__mdiff+0x10c>)
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf22:	e7e5      	b.n	800bef0 <__mdiff+0x28>
 800bf24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf28:	6926      	ldr	r6, [r4, #16]
 800bf2a:	60c5      	str	r5, [r0, #12]
 800bf2c:	f104 0914 	add.w	r9, r4, #20
 800bf30:	f108 0514 	add.w	r5, r8, #20
 800bf34:	f100 0e14 	add.w	lr, r0, #20
 800bf38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf40:	f108 0210 	add.w	r2, r8, #16
 800bf44:	46f2      	mov	sl, lr
 800bf46:	2100      	movs	r1, #0
 800bf48:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf50:	fa1f f883 	uxth.w	r8, r3
 800bf54:	fa11 f18b 	uxtah	r1, r1, fp
 800bf58:	0c1b      	lsrs	r3, r3, #16
 800bf5a:	eba1 0808 	sub.w	r8, r1, r8
 800bf5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf66:	fa1f f888 	uxth.w	r8, r8
 800bf6a:	1419      	asrs	r1, r3, #16
 800bf6c:	454e      	cmp	r6, r9
 800bf6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf72:	f84a 3b04 	str.w	r3, [sl], #4
 800bf76:	d8e7      	bhi.n	800bf48 <__mdiff+0x80>
 800bf78:	1b33      	subs	r3, r6, r4
 800bf7a:	3b15      	subs	r3, #21
 800bf7c:	f023 0303 	bic.w	r3, r3, #3
 800bf80:	3304      	adds	r3, #4
 800bf82:	3415      	adds	r4, #21
 800bf84:	42a6      	cmp	r6, r4
 800bf86:	bf38      	it	cc
 800bf88:	2304      	movcc	r3, #4
 800bf8a:	441d      	add	r5, r3
 800bf8c:	4473      	add	r3, lr
 800bf8e:	469e      	mov	lr, r3
 800bf90:	462e      	mov	r6, r5
 800bf92:	4566      	cmp	r6, ip
 800bf94:	d30e      	bcc.n	800bfb4 <__mdiff+0xec>
 800bf96:	f10c 0203 	add.w	r2, ip, #3
 800bf9a:	1b52      	subs	r2, r2, r5
 800bf9c:	f022 0203 	bic.w	r2, r2, #3
 800bfa0:	3d03      	subs	r5, #3
 800bfa2:	45ac      	cmp	ip, r5
 800bfa4:	bf38      	it	cc
 800bfa6:	2200      	movcc	r2, #0
 800bfa8:	441a      	add	r2, r3
 800bfaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bfae:	b17b      	cbz	r3, 800bfd0 <__mdiff+0x108>
 800bfb0:	6107      	str	r7, [r0, #16]
 800bfb2:	e7a3      	b.n	800befc <__mdiff+0x34>
 800bfb4:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfb8:	fa11 f288 	uxtah	r2, r1, r8
 800bfbc:	1414      	asrs	r4, r2, #16
 800bfbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfc2:	b292      	uxth	r2, r2
 800bfc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfc8:	f84e 2b04 	str.w	r2, [lr], #4
 800bfcc:	1421      	asrs	r1, r4, #16
 800bfce:	e7e0      	b.n	800bf92 <__mdiff+0xca>
 800bfd0:	3f01      	subs	r7, #1
 800bfd2:	e7ea      	b.n	800bfaa <__mdiff+0xe2>
 800bfd4:	0800d030 	.word	0x0800d030
 800bfd8:	0800d120 	.word	0x0800d120

0800bfdc <__ulp>:
 800bfdc:	b082      	sub	sp, #8
 800bfde:	ed8d 0b00 	vstr	d0, [sp]
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	4912      	ldr	r1, [pc, #72]	; (800c030 <__ulp+0x54>)
 800bfe6:	4019      	ands	r1, r3
 800bfe8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfec:	2900      	cmp	r1, #0
 800bfee:	dd05      	ble.n	800bffc <__ulp+0x20>
 800bff0:	2200      	movs	r2, #0
 800bff2:	460b      	mov	r3, r1
 800bff4:	ec43 2b10 	vmov	d0, r2, r3
 800bff8:	b002      	add	sp, #8
 800bffa:	4770      	bx	lr
 800bffc:	4249      	negs	r1, r1
 800bffe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c002:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	da04      	bge.n	800c01a <__ulp+0x3e>
 800c010:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c014:	fa41 f300 	asr.w	r3, r1, r0
 800c018:	e7ec      	b.n	800bff4 <__ulp+0x18>
 800c01a:	f1a0 0114 	sub.w	r1, r0, #20
 800c01e:	291e      	cmp	r1, #30
 800c020:	bfda      	itte	le
 800c022:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c026:	fa20 f101 	lsrle.w	r1, r0, r1
 800c02a:	2101      	movgt	r1, #1
 800c02c:	460a      	mov	r2, r1
 800c02e:	e7e1      	b.n	800bff4 <__ulp+0x18>
 800c030:	7ff00000 	.word	0x7ff00000

0800c034 <__b2d>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	6905      	ldr	r5, [r0, #16]
 800c038:	f100 0714 	add.w	r7, r0, #20
 800c03c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c040:	1f2e      	subs	r6, r5, #4
 800c042:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c046:	4620      	mov	r0, r4
 800c048:	f7ff fd48 	bl	800badc <__hi0bits>
 800c04c:	f1c0 0320 	rsb	r3, r0, #32
 800c050:	280a      	cmp	r0, #10
 800c052:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0d0 <__b2d+0x9c>
 800c056:	600b      	str	r3, [r1, #0]
 800c058:	dc14      	bgt.n	800c084 <__b2d+0x50>
 800c05a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c05e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c062:	42b7      	cmp	r7, r6
 800c064:	ea41 030c 	orr.w	r3, r1, ip
 800c068:	bf34      	ite	cc
 800c06a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c06e:	2100      	movcs	r1, #0
 800c070:	3015      	adds	r0, #21
 800c072:	fa04 f000 	lsl.w	r0, r4, r0
 800c076:	fa21 f10e 	lsr.w	r1, r1, lr
 800c07a:	ea40 0201 	orr.w	r2, r0, r1
 800c07e:	ec43 2b10 	vmov	d0, r2, r3
 800c082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c084:	42b7      	cmp	r7, r6
 800c086:	bf3a      	itte	cc
 800c088:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c08c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c090:	2100      	movcs	r1, #0
 800c092:	380b      	subs	r0, #11
 800c094:	d017      	beq.n	800c0c6 <__b2d+0x92>
 800c096:	f1c0 0c20 	rsb	ip, r0, #32
 800c09a:	fa04 f500 	lsl.w	r5, r4, r0
 800c09e:	42be      	cmp	r6, r7
 800c0a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c0a4:	ea45 0504 	orr.w	r5, r5, r4
 800c0a8:	bf8c      	ite	hi
 800c0aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c0ae:	2400      	movls	r4, #0
 800c0b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c0b4:	fa01 f000 	lsl.w	r0, r1, r0
 800c0b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0c0:	ea40 0204 	orr.w	r2, r0, r4
 800c0c4:	e7db      	b.n	800c07e <__b2d+0x4a>
 800c0c6:	ea44 030c 	orr.w	r3, r4, ip
 800c0ca:	460a      	mov	r2, r1
 800c0cc:	e7d7      	b.n	800c07e <__b2d+0x4a>
 800c0ce:	bf00      	nop
 800c0d0:	3ff00000 	.word	0x3ff00000

0800c0d4 <__d2b>:
 800c0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4689      	mov	r9, r1
 800c0da:	2101      	movs	r1, #1
 800c0dc:	ec57 6b10 	vmov	r6, r7, d0
 800c0e0:	4690      	mov	r8, r2
 800c0e2:	f7ff fc09 	bl	800b8f8 <_Balloc>
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	b930      	cbnz	r0, 800c0f8 <__d2b+0x24>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	4b25      	ldr	r3, [pc, #148]	; (800c184 <__d2b+0xb0>)
 800c0ee:	4826      	ldr	r0, [pc, #152]	; (800c188 <__d2b+0xb4>)
 800c0f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0f4:	f000 fcfe 	bl	800caf4 <__assert_func>
 800c0f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c100:	bb35      	cbnz	r5, 800c150 <__d2b+0x7c>
 800c102:	2e00      	cmp	r6, #0
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	d028      	beq.n	800c15a <__d2b+0x86>
 800c108:	4668      	mov	r0, sp
 800c10a:	9600      	str	r6, [sp, #0]
 800c10c:	f7ff fd06 	bl	800bb1c <__lo0bits>
 800c110:	9900      	ldr	r1, [sp, #0]
 800c112:	b300      	cbz	r0, 800c156 <__d2b+0x82>
 800c114:	9a01      	ldr	r2, [sp, #4]
 800c116:	f1c0 0320 	rsb	r3, r0, #32
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	430b      	orrs	r3, r1
 800c120:	40c2      	lsrs	r2, r0
 800c122:	6163      	str	r3, [r4, #20]
 800c124:	9201      	str	r2, [sp, #4]
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	61a3      	str	r3, [r4, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf14      	ite	ne
 800c12e:	2202      	movne	r2, #2
 800c130:	2201      	moveq	r2, #1
 800c132:	6122      	str	r2, [r4, #16]
 800c134:	b1d5      	cbz	r5, 800c16c <__d2b+0x98>
 800c136:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c13a:	4405      	add	r5, r0
 800c13c:	f8c9 5000 	str.w	r5, [r9]
 800c140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c144:	f8c8 0000 	str.w	r0, [r8]
 800c148:	4620      	mov	r0, r4
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c154:	e7d5      	b.n	800c102 <__d2b+0x2e>
 800c156:	6161      	str	r1, [r4, #20]
 800c158:	e7e5      	b.n	800c126 <__d2b+0x52>
 800c15a:	a801      	add	r0, sp, #4
 800c15c:	f7ff fcde 	bl	800bb1c <__lo0bits>
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	6163      	str	r3, [r4, #20]
 800c164:	2201      	movs	r2, #1
 800c166:	6122      	str	r2, [r4, #16]
 800c168:	3020      	adds	r0, #32
 800c16a:	e7e3      	b.n	800c134 <__d2b+0x60>
 800c16c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c174:	f8c9 0000 	str.w	r0, [r9]
 800c178:	6918      	ldr	r0, [r3, #16]
 800c17a:	f7ff fcaf 	bl	800badc <__hi0bits>
 800c17e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c182:	e7df      	b.n	800c144 <__d2b+0x70>
 800c184:	0800d030 	.word	0x0800d030
 800c188:	0800d120 	.word	0x0800d120

0800c18c <__ratio>:
 800c18c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	4688      	mov	r8, r1
 800c192:	4669      	mov	r1, sp
 800c194:	4681      	mov	r9, r0
 800c196:	f7ff ff4d 	bl	800c034 <__b2d>
 800c19a:	a901      	add	r1, sp, #4
 800c19c:	4640      	mov	r0, r8
 800c19e:	ec55 4b10 	vmov	r4, r5, d0
 800c1a2:	f7ff ff47 	bl	800c034 <__b2d>
 800c1a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1ae:	eba3 0c02 	sub.w	ip, r3, r2
 800c1b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1b6:	1a9b      	subs	r3, r3, r2
 800c1b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1bc:	ec51 0b10 	vmov	r0, r1, d0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bfd6      	itet	le
 800c1c4:	460a      	movle	r2, r1
 800c1c6:	462a      	movgt	r2, r5
 800c1c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1cc:	468b      	mov	fp, r1
 800c1ce:	462f      	mov	r7, r5
 800c1d0:	bfd4      	ite	le
 800c1d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1da:	4620      	mov	r0, r4
 800c1dc:	ee10 2a10 	vmov	r2, s0
 800c1e0:	465b      	mov	r3, fp
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f7f4 fb32 	bl	800084c <__aeabi_ddiv>
 800c1e8:	ec41 0b10 	vmov	d0, r0, r1
 800c1ec:	b003      	add	sp, #12
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1f2 <__copybits>:
 800c1f2:	3901      	subs	r1, #1
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	1149      	asrs	r1, r1, #5
 800c1f8:	6914      	ldr	r4, [r2, #16]
 800c1fa:	3101      	adds	r1, #1
 800c1fc:	f102 0314 	add.w	r3, r2, #20
 800c200:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c204:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c208:	1f05      	subs	r5, r0, #4
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	d30c      	bcc.n	800c228 <__copybits+0x36>
 800c20e:	1aa3      	subs	r3, r4, r2
 800c210:	3b11      	subs	r3, #17
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	3211      	adds	r2, #17
 800c218:	42a2      	cmp	r2, r4
 800c21a:	bf88      	it	hi
 800c21c:	2300      	movhi	r3, #0
 800c21e:	4418      	add	r0, r3
 800c220:	2300      	movs	r3, #0
 800c222:	4288      	cmp	r0, r1
 800c224:	d305      	bcc.n	800c232 <__copybits+0x40>
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	f853 6b04 	ldr.w	r6, [r3], #4
 800c22c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c230:	e7eb      	b.n	800c20a <__copybits+0x18>
 800c232:	f840 3b04 	str.w	r3, [r0], #4
 800c236:	e7f4      	b.n	800c222 <__copybits+0x30>

0800c238 <__any_on>:
 800c238:	f100 0214 	add.w	r2, r0, #20
 800c23c:	6900      	ldr	r0, [r0, #16]
 800c23e:	114b      	asrs	r3, r1, #5
 800c240:	4298      	cmp	r0, r3
 800c242:	b510      	push	{r4, lr}
 800c244:	db11      	blt.n	800c26a <__any_on+0x32>
 800c246:	dd0a      	ble.n	800c25e <__any_on+0x26>
 800c248:	f011 011f 	ands.w	r1, r1, #31
 800c24c:	d007      	beq.n	800c25e <__any_on+0x26>
 800c24e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c252:	fa24 f001 	lsr.w	r0, r4, r1
 800c256:	fa00 f101 	lsl.w	r1, r0, r1
 800c25a:	428c      	cmp	r4, r1
 800c25c:	d10b      	bne.n	800c276 <__any_on+0x3e>
 800c25e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c262:	4293      	cmp	r3, r2
 800c264:	d803      	bhi.n	800c26e <__any_on+0x36>
 800c266:	2000      	movs	r0, #0
 800c268:	bd10      	pop	{r4, pc}
 800c26a:	4603      	mov	r3, r0
 800c26c:	e7f7      	b.n	800c25e <__any_on+0x26>
 800c26e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c272:	2900      	cmp	r1, #0
 800c274:	d0f5      	beq.n	800c262 <__any_on+0x2a>
 800c276:	2001      	movs	r0, #1
 800c278:	e7f6      	b.n	800c268 <__any_on+0x30>

0800c27a <_calloc_r>:
 800c27a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c27c:	fba1 2402 	umull	r2, r4, r1, r2
 800c280:	b94c      	cbnz	r4, 800c296 <_calloc_r+0x1c>
 800c282:	4611      	mov	r1, r2
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	f000 f87b 	bl	800c380 <_malloc_r>
 800c28a:	9a01      	ldr	r2, [sp, #4]
 800c28c:	4605      	mov	r5, r0
 800c28e:	b930      	cbnz	r0, 800c29e <_calloc_r+0x24>
 800c290:	4628      	mov	r0, r5
 800c292:	b003      	add	sp, #12
 800c294:	bd30      	pop	{r4, r5, pc}
 800c296:	220c      	movs	r2, #12
 800c298:	6002      	str	r2, [r0, #0]
 800c29a:	2500      	movs	r5, #0
 800c29c:	e7f8      	b.n	800c290 <_calloc_r+0x16>
 800c29e:	4621      	mov	r1, r4
 800c2a0:	f7fc f854 	bl	800834c <memset>
 800c2a4:	e7f4      	b.n	800c290 <_calloc_r+0x16>
	...

0800c2a8 <_free_r>:
 800c2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2aa:	2900      	cmp	r1, #0
 800c2ac:	d044      	beq.n	800c338 <_free_r+0x90>
 800c2ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b2:	9001      	str	r0, [sp, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c2ba:	bfb8      	it	lt
 800c2bc:	18e4      	addlt	r4, r4, r3
 800c2be:	f000 fca7 	bl	800cc10 <__malloc_lock>
 800c2c2:	4a1e      	ldr	r2, [pc, #120]	; (800c33c <_free_r+0x94>)
 800c2c4:	9801      	ldr	r0, [sp, #4]
 800c2c6:	6813      	ldr	r3, [r2, #0]
 800c2c8:	b933      	cbnz	r3, 800c2d8 <_free_r+0x30>
 800c2ca:	6063      	str	r3, [r4, #4]
 800c2cc:	6014      	str	r4, [r2, #0]
 800c2ce:	b003      	add	sp, #12
 800c2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2d4:	f000 bca2 	b.w	800cc1c <__malloc_unlock>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d908      	bls.n	800c2ee <_free_r+0x46>
 800c2dc:	6825      	ldr	r5, [r4, #0]
 800c2de:	1961      	adds	r1, r4, r5
 800c2e0:	428b      	cmp	r3, r1
 800c2e2:	bf01      	itttt	eq
 800c2e4:	6819      	ldreq	r1, [r3, #0]
 800c2e6:	685b      	ldreq	r3, [r3, #4]
 800c2e8:	1949      	addeq	r1, r1, r5
 800c2ea:	6021      	streq	r1, [r4, #0]
 800c2ec:	e7ed      	b.n	800c2ca <_free_r+0x22>
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	b10b      	cbz	r3, 800c2f8 <_free_r+0x50>
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d9fa      	bls.n	800c2ee <_free_r+0x46>
 800c2f8:	6811      	ldr	r1, [r2, #0]
 800c2fa:	1855      	adds	r5, r2, r1
 800c2fc:	42a5      	cmp	r5, r4
 800c2fe:	d10b      	bne.n	800c318 <_free_r+0x70>
 800c300:	6824      	ldr	r4, [r4, #0]
 800c302:	4421      	add	r1, r4
 800c304:	1854      	adds	r4, r2, r1
 800c306:	42a3      	cmp	r3, r4
 800c308:	6011      	str	r1, [r2, #0]
 800c30a:	d1e0      	bne.n	800c2ce <_free_r+0x26>
 800c30c:	681c      	ldr	r4, [r3, #0]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	6053      	str	r3, [r2, #4]
 800c312:	4421      	add	r1, r4
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	e7da      	b.n	800c2ce <_free_r+0x26>
 800c318:	d902      	bls.n	800c320 <_free_r+0x78>
 800c31a:	230c      	movs	r3, #12
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	e7d6      	b.n	800c2ce <_free_r+0x26>
 800c320:	6825      	ldr	r5, [r4, #0]
 800c322:	1961      	adds	r1, r4, r5
 800c324:	428b      	cmp	r3, r1
 800c326:	bf04      	itt	eq
 800c328:	6819      	ldreq	r1, [r3, #0]
 800c32a:	685b      	ldreq	r3, [r3, #4]
 800c32c:	6063      	str	r3, [r4, #4]
 800c32e:	bf04      	itt	eq
 800c330:	1949      	addeq	r1, r1, r5
 800c332:	6021      	streq	r1, [r4, #0]
 800c334:	6054      	str	r4, [r2, #4]
 800c336:	e7ca      	b.n	800c2ce <_free_r+0x26>
 800c338:	b003      	add	sp, #12
 800c33a:	bd30      	pop	{r4, r5, pc}
 800c33c:	20000500 	.word	0x20000500

0800c340 <sbrk_aligned>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	4e0e      	ldr	r6, [pc, #56]	; (800c37c <sbrk_aligned+0x3c>)
 800c344:	460c      	mov	r4, r1
 800c346:	6831      	ldr	r1, [r6, #0]
 800c348:	4605      	mov	r5, r0
 800c34a:	b911      	cbnz	r1, 800c352 <sbrk_aligned+0x12>
 800c34c:	f000 fb4c 	bl	800c9e8 <_sbrk_r>
 800c350:	6030      	str	r0, [r6, #0]
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f000 fb47 	bl	800c9e8 <_sbrk_r>
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	d00a      	beq.n	800c374 <sbrk_aligned+0x34>
 800c35e:	1cc4      	adds	r4, r0, #3
 800c360:	f024 0403 	bic.w	r4, r4, #3
 800c364:	42a0      	cmp	r0, r4
 800c366:	d007      	beq.n	800c378 <sbrk_aligned+0x38>
 800c368:	1a21      	subs	r1, r4, r0
 800c36a:	4628      	mov	r0, r5
 800c36c:	f000 fb3c 	bl	800c9e8 <_sbrk_r>
 800c370:	3001      	adds	r0, #1
 800c372:	d101      	bne.n	800c378 <sbrk_aligned+0x38>
 800c374:	f04f 34ff 	mov.w	r4, #4294967295
 800c378:	4620      	mov	r0, r4
 800c37a:	bd70      	pop	{r4, r5, r6, pc}
 800c37c:	20000504 	.word	0x20000504

0800c380 <_malloc_r>:
 800c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c384:	1ccd      	adds	r5, r1, #3
 800c386:	f025 0503 	bic.w	r5, r5, #3
 800c38a:	3508      	adds	r5, #8
 800c38c:	2d0c      	cmp	r5, #12
 800c38e:	bf38      	it	cc
 800c390:	250c      	movcc	r5, #12
 800c392:	2d00      	cmp	r5, #0
 800c394:	4607      	mov	r7, r0
 800c396:	db01      	blt.n	800c39c <_malloc_r+0x1c>
 800c398:	42a9      	cmp	r1, r5
 800c39a:	d905      	bls.n	800c3a8 <_malloc_r+0x28>
 800c39c:	230c      	movs	r3, #12
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	2600      	movs	r6, #0
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a8:	4e2e      	ldr	r6, [pc, #184]	; (800c464 <_malloc_r+0xe4>)
 800c3aa:	f000 fc31 	bl	800cc10 <__malloc_lock>
 800c3ae:	6833      	ldr	r3, [r6, #0]
 800c3b0:	461c      	mov	r4, r3
 800c3b2:	bb34      	cbnz	r4, 800c402 <_malloc_r+0x82>
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	f7ff ffc2 	bl	800c340 <sbrk_aligned>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	4604      	mov	r4, r0
 800c3c0:	d14d      	bne.n	800c45e <_malloc_r+0xde>
 800c3c2:	6834      	ldr	r4, [r6, #0]
 800c3c4:	4626      	mov	r6, r4
 800c3c6:	2e00      	cmp	r6, #0
 800c3c8:	d140      	bne.n	800c44c <_malloc_r+0xcc>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	eb04 0803 	add.w	r8, r4, r3
 800c3d4:	f000 fb08 	bl	800c9e8 <_sbrk_r>
 800c3d8:	4580      	cmp	r8, r0
 800c3da:	d13a      	bne.n	800c452 <_malloc_r+0xd2>
 800c3dc:	6821      	ldr	r1, [r4, #0]
 800c3de:	3503      	adds	r5, #3
 800c3e0:	1a6d      	subs	r5, r5, r1
 800c3e2:	f025 0503 	bic.w	r5, r5, #3
 800c3e6:	3508      	adds	r5, #8
 800c3e8:	2d0c      	cmp	r5, #12
 800c3ea:	bf38      	it	cc
 800c3ec:	250c      	movcc	r5, #12
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7ff ffa5 	bl	800c340 <sbrk_aligned>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d02b      	beq.n	800c452 <_malloc_r+0xd2>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	442b      	add	r3, r5
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	e00e      	b.n	800c420 <_malloc_r+0xa0>
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	1b52      	subs	r2, r2, r5
 800c406:	d41e      	bmi.n	800c446 <_malloc_r+0xc6>
 800c408:	2a0b      	cmp	r2, #11
 800c40a:	d916      	bls.n	800c43a <_malloc_r+0xba>
 800c40c:	1961      	adds	r1, r4, r5
 800c40e:	42a3      	cmp	r3, r4
 800c410:	6025      	str	r5, [r4, #0]
 800c412:	bf18      	it	ne
 800c414:	6059      	strne	r1, [r3, #4]
 800c416:	6863      	ldr	r3, [r4, #4]
 800c418:	bf08      	it	eq
 800c41a:	6031      	streq	r1, [r6, #0]
 800c41c:	5162      	str	r2, [r4, r5]
 800c41e:	604b      	str	r3, [r1, #4]
 800c420:	4638      	mov	r0, r7
 800c422:	f104 060b 	add.w	r6, r4, #11
 800c426:	f000 fbf9 	bl	800cc1c <__malloc_unlock>
 800c42a:	f026 0607 	bic.w	r6, r6, #7
 800c42e:	1d23      	adds	r3, r4, #4
 800c430:	1af2      	subs	r2, r6, r3
 800c432:	d0b6      	beq.n	800c3a2 <_malloc_r+0x22>
 800c434:	1b9b      	subs	r3, r3, r6
 800c436:	50a3      	str	r3, [r4, r2]
 800c438:	e7b3      	b.n	800c3a2 <_malloc_r+0x22>
 800c43a:	6862      	ldr	r2, [r4, #4]
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	bf0c      	ite	eq
 800c440:	6032      	streq	r2, [r6, #0]
 800c442:	605a      	strne	r2, [r3, #4]
 800c444:	e7ec      	b.n	800c420 <_malloc_r+0xa0>
 800c446:	4623      	mov	r3, r4
 800c448:	6864      	ldr	r4, [r4, #4]
 800c44a:	e7b2      	b.n	800c3b2 <_malloc_r+0x32>
 800c44c:	4634      	mov	r4, r6
 800c44e:	6876      	ldr	r6, [r6, #4]
 800c450:	e7b9      	b.n	800c3c6 <_malloc_r+0x46>
 800c452:	230c      	movs	r3, #12
 800c454:	603b      	str	r3, [r7, #0]
 800c456:	4638      	mov	r0, r7
 800c458:	f000 fbe0 	bl	800cc1c <__malloc_unlock>
 800c45c:	e7a1      	b.n	800c3a2 <_malloc_r+0x22>
 800c45e:	6025      	str	r5, [r4, #0]
 800c460:	e7de      	b.n	800c420 <_malloc_r+0xa0>
 800c462:	bf00      	nop
 800c464:	20000500 	.word	0x20000500

0800c468 <__ssputs_r>:
 800c468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c46c:	688e      	ldr	r6, [r1, #8]
 800c46e:	429e      	cmp	r6, r3
 800c470:	4682      	mov	sl, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4690      	mov	r8, r2
 800c476:	461f      	mov	r7, r3
 800c478:	d838      	bhi.n	800c4ec <__ssputs_r+0x84>
 800c47a:	898a      	ldrh	r2, [r1, #12]
 800c47c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c480:	d032      	beq.n	800c4e8 <__ssputs_r+0x80>
 800c482:	6825      	ldr	r5, [r4, #0]
 800c484:	6909      	ldr	r1, [r1, #16]
 800c486:	eba5 0901 	sub.w	r9, r5, r1
 800c48a:	6965      	ldr	r5, [r4, #20]
 800c48c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c494:	3301      	adds	r3, #1
 800c496:	444b      	add	r3, r9
 800c498:	106d      	asrs	r5, r5, #1
 800c49a:	429d      	cmp	r5, r3
 800c49c:	bf38      	it	cc
 800c49e:	461d      	movcc	r5, r3
 800c4a0:	0553      	lsls	r3, r2, #21
 800c4a2:	d531      	bpl.n	800c508 <__ssputs_r+0xa0>
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7ff ff6b 	bl	800c380 <_malloc_r>
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	b950      	cbnz	r0, 800c4c4 <__ssputs_r+0x5c>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	f8ca 3000 	str.w	r3, [sl]
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c4:	6921      	ldr	r1, [r4, #16]
 800c4c6:	464a      	mov	r2, r9
 800c4c8:	f7ff fa08 	bl	800b8dc <memcpy>
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	6126      	str	r6, [r4, #16]
 800c4da:	6165      	str	r5, [r4, #20]
 800c4dc:	444e      	add	r6, r9
 800c4de:	eba5 0509 	sub.w	r5, r5, r9
 800c4e2:	6026      	str	r6, [r4, #0]
 800c4e4:	60a5      	str	r5, [r4, #8]
 800c4e6:	463e      	mov	r6, r7
 800c4e8:	42be      	cmp	r6, r7
 800c4ea:	d900      	bls.n	800c4ee <__ssputs_r+0x86>
 800c4ec:	463e      	mov	r6, r7
 800c4ee:	6820      	ldr	r0, [r4, #0]
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	4641      	mov	r1, r8
 800c4f4:	f000 fb72 	bl	800cbdc <memmove>
 800c4f8:	68a3      	ldr	r3, [r4, #8]
 800c4fa:	1b9b      	subs	r3, r3, r6
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	4433      	add	r3, r6
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	2000      	movs	r0, #0
 800c506:	e7db      	b.n	800c4c0 <__ssputs_r+0x58>
 800c508:	462a      	mov	r2, r5
 800c50a:	f000 fb8d 	bl	800cc28 <_realloc_r>
 800c50e:	4606      	mov	r6, r0
 800c510:	2800      	cmp	r0, #0
 800c512:	d1e1      	bne.n	800c4d8 <__ssputs_r+0x70>
 800c514:	6921      	ldr	r1, [r4, #16]
 800c516:	4650      	mov	r0, sl
 800c518:	f7ff fec6 	bl	800c2a8 <_free_r>
 800c51c:	e7c7      	b.n	800c4ae <__ssputs_r+0x46>
	...

0800c520 <_svfiprintf_r>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	4698      	mov	r8, r3
 800c526:	898b      	ldrh	r3, [r1, #12]
 800c528:	061b      	lsls	r3, r3, #24
 800c52a:	b09d      	sub	sp, #116	; 0x74
 800c52c:	4607      	mov	r7, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	4614      	mov	r4, r2
 800c532:	d50e      	bpl.n	800c552 <_svfiprintf_r+0x32>
 800c534:	690b      	ldr	r3, [r1, #16]
 800c536:	b963      	cbnz	r3, 800c552 <_svfiprintf_r+0x32>
 800c538:	2140      	movs	r1, #64	; 0x40
 800c53a:	f7ff ff21 	bl	800c380 <_malloc_r>
 800c53e:	6028      	str	r0, [r5, #0]
 800c540:	6128      	str	r0, [r5, #16]
 800c542:	b920      	cbnz	r0, 800c54e <_svfiprintf_r+0x2e>
 800c544:	230c      	movs	r3, #12
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	e0d1      	b.n	800c6f2 <_svfiprintf_r+0x1d2>
 800c54e:	2340      	movs	r3, #64	; 0x40
 800c550:	616b      	str	r3, [r5, #20]
 800c552:	2300      	movs	r3, #0
 800c554:	9309      	str	r3, [sp, #36]	; 0x24
 800c556:	2320      	movs	r3, #32
 800c558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c55c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c560:	2330      	movs	r3, #48	; 0x30
 800c562:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c70c <_svfiprintf_r+0x1ec>
 800c566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c56a:	f04f 0901 	mov.w	r9, #1
 800c56e:	4623      	mov	r3, r4
 800c570:	469a      	mov	sl, r3
 800c572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c576:	b10a      	cbz	r2, 800c57c <_svfiprintf_r+0x5c>
 800c578:	2a25      	cmp	r2, #37	; 0x25
 800c57a:	d1f9      	bne.n	800c570 <_svfiprintf_r+0x50>
 800c57c:	ebba 0b04 	subs.w	fp, sl, r4
 800c580:	d00b      	beq.n	800c59a <_svfiprintf_r+0x7a>
 800c582:	465b      	mov	r3, fp
 800c584:	4622      	mov	r2, r4
 800c586:	4629      	mov	r1, r5
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff ff6d 	bl	800c468 <__ssputs_r>
 800c58e:	3001      	adds	r0, #1
 800c590:	f000 80aa 	beq.w	800c6e8 <_svfiprintf_r+0x1c8>
 800c594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c596:	445a      	add	r2, fp
 800c598:	9209      	str	r2, [sp, #36]	; 0x24
 800c59a:	f89a 3000 	ldrb.w	r3, [sl]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 80a2 	beq.w	800c6e8 <_svfiprintf_r+0x1c8>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ae:	f10a 0a01 	add.w	sl, sl, #1
 800c5b2:	9304      	str	r3, [sp, #16]
 800c5b4:	9307      	str	r3, [sp, #28]
 800c5b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c5bc:	4654      	mov	r4, sl
 800c5be:	2205      	movs	r2, #5
 800c5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c4:	4851      	ldr	r0, [pc, #324]	; (800c70c <_svfiprintf_r+0x1ec>)
 800c5c6:	f7f3 fe0b 	bl	80001e0 <memchr>
 800c5ca:	9a04      	ldr	r2, [sp, #16]
 800c5cc:	b9d8      	cbnz	r0, 800c606 <_svfiprintf_r+0xe6>
 800c5ce:	06d0      	lsls	r0, r2, #27
 800c5d0:	bf44      	itt	mi
 800c5d2:	2320      	movmi	r3, #32
 800c5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d8:	0711      	lsls	r1, r2, #28
 800c5da:	bf44      	itt	mi
 800c5dc:	232b      	movmi	r3, #43	; 0x2b
 800c5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e8:	d015      	beq.n	800c616 <_svfiprintf_r+0xf6>
 800c5ea:	9a07      	ldr	r2, [sp, #28]
 800c5ec:	4654      	mov	r4, sl
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f04f 0c0a 	mov.w	ip, #10
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5fa:	3b30      	subs	r3, #48	; 0x30
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d94e      	bls.n	800c69e <_svfiprintf_r+0x17e>
 800c600:	b1b0      	cbz	r0, 800c630 <_svfiprintf_r+0x110>
 800c602:	9207      	str	r2, [sp, #28]
 800c604:	e014      	b.n	800c630 <_svfiprintf_r+0x110>
 800c606:	eba0 0308 	sub.w	r3, r0, r8
 800c60a:	fa09 f303 	lsl.w	r3, r9, r3
 800c60e:	4313      	orrs	r3, r2
 800c610:	9304      	str	r3, [sp, #16]
 800c612:	46a2      	mov	sl, r4
 800c614:	e7d2      	b.n	800c5bc <_svfiprintf_r+0x9c>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	1d19      	adds	r1, r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	9103      	str	r1, [sp, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfbb      	ittet	lt
 800c622:	425b      	neglt	r3, r3
 800c624:	f042 0202 	orrlt.w	r2, r2, #2
 800c628:	9307      	strge	r3, [sp, #28]
 800c62a:	9307      	strlt	r3, [sp, #28]
 800c62c:	bfb8      	it	lt
 800c62e:	9204      	strlt	r2, [sp, #16]
 800c630:	7823      	ldrb	r3, [r4, #0]
 800c632:	2b2e      	cmp	r3, #46	; 0x2e
 800c634:	d10c      	bne.n	800c650 <_svfiprintf_r+0x130>
 800c636:	7863      	ldrb	r3, [r4, #1]
 800c638:	2b2a      	cmp	r3, #42	; 0x2a
 800c63a:	d135      	bne.n	800c6a8 <_svfiprintf_r+0x188>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	1d1a      	adds	r2, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	9203      	str	r2, [sp, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfb8      	it	lt
 800c648:	f04f 33ff 	movlt.w	r3, #4294967295
 800c64c:	3402      	adds	r4, #2
 800c64e:	9305      	str	r3, [sp, #20]
 800c650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c71c <_svfiprintf_r+0x1fc>
 800c654:	7821      	ldrb	r1, [r4, #0]
 800c656:	2203      	movs	r2, #3
 800c658:	4650      	mov	r0, sl
 800c65a:	f7f3 fdc1 	bl	80001e0 <memchr>
 800c65e:	b140      	cbz	r0, 800c672 <_svfiprintf_r+0x152>
 800c660:	2340      	movs	r3, #64	; 0x40
 800c662:	eba0 000a 	sub.w	r0, r0, sl
 800c666:	fa03 f000 	lsl.w	r0, r3, r0
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	4303      	orrs	r3, r0
 800c66e:	3401      	adds	r4, #1
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	4826      	ldr	r0, [pc, #152]	; (800c710 <_svfiprintf_r+0x1f0>)
 800c678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c67c:	2206      	movs	r2, #6
 800c67e:	f7f3 fdaf 	bl	80001e0 <memchr>
 800c682:	2800      	cmp	r0, #0
 800c684:	d038      	beq.n	800c6f8 <_svfiprintf_r+0x1d8>
 800c686:	4b23      	ldr	r3, [pc, #140]	; (800c714 <_svfiprintf_r+0x1f4>)
 800c688:	bb1b      	cbnz	r3, 800c6d2 <_svfiprintf_r+0x1b2>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	3307      	adds	r3, #7
 800c68e:	f023 0307 	bic.w	r3, r3, #7
 800c692:	3308      	adds	r3, #8
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c698:	4433      	add	r3, r6
 800c69a:	9309      	str	r3, [sp, #36]	; 0x24
 800c69c:	e767      	b.n	800c56e <_svfiprintf_r+0x4e>
 800c69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	e7a5      	b.n	800c5f4 <_svfiprintf_r+0xd4>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	3401      	adds	r4, #1
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f04f 0c0a 	mov.w	ip, #10
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ba:	3a30      	subs	r2, #48	; 0x30
 800c6bc:	2a09      	cmp	r2, #9
 800c6be:	d903      	bls.n	800c6c8 <_svfiprintf_r+0x1a8>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0c5      	beq.n	800c650 <_svfiprintf_r+0x130>
 800c6c4:	9105      	str	r1, [sp, #20]
 800c6c6:	e7c3      	b.n	800c650 <_svfiprintf_r+0x130>
 800c6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e7f0      	b.n	800c6b4 <_svfiprintf_r+0x194>
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <_svfiprintf_r+0x1f8>)
 800c6da:	a904      	add	r1, sp, #16
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7fb fedd 	bl	800849c <_printf_float>
 800c6e2:	1c42      	adds	r2, r0, #1
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	d1d6      	bne.n	800c696 <_svfiprintf_r+0x176>
 800c6e8:	89ab      	ldrh	r3, [r5, #12]
 800c6ea:	065b      	lsls	r3, r3, #25
 800c6ec:	f53f af2c 	bmi.w	800c548 <_svfiprintf_r+0x28>
 800c6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6f2:	b01d      	add	sp, #116	; 0x74
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	ab03      	add	r3, sp, #12
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	4b06      	ldr	r3, [pc, #24]	; (800c718 <_svfiprintf_r+0x1f8>)
 800c700:	a904      	add	r1, sp, #16
 800c702:	4638      	mov	r0, r7
 800c704:	f7fc f96e 	bl	80089e4 <_printf_i>
 800c708:	e7eb      	b.n	800c6e2 <_svfiprintf_r+0x1c2>
 800c70a:	bf00      	nop
 800c70c:	0800d27c 	.word	0x0800d27c
 800c710:	0800d286 	.word	0x0800d286
 800c714:	0800849d 	.word	0x0800849d
 800c718:	0800c469 	.word	0x0800c469
 800c71c:	0800d282 	.word	0x0800d282

0800c720 <__sfputc_r>:
 800c720:	6893      	ldr	r3, [r2, #8]
 800c722:	3b01      	subs	r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	b410      	push	{r4}
 800c728:	6093      	str	r3, [r2, #8]
 800c72a:	da08      	bge.n	800c73e <__sfputc_r+0x1e>
 800c72c:	6994      	ldr	r4, [r2, #24]
 800c72e:	42a3      	cmp	r3, r4
 800c730:	db01      	blt.n	800c736 <__sfputc_r+0x16>
 800c732:	290a      	cmp	r1, #10
 800c734:	d103      	bne.n	800c73e <__sfputc_r+0x1e>
 800c736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73a:	f7fd bbe9 	b.w	8009f10 <__swbuf_r>
 800c73e:	6813      	ldr	r3, [r2, #0]
 800c740:	1c58      	adds	r0, r3, #1
 800c742:	6010      	str	r0, [r2, #0]
 800c744:	7019      	strb	r1, [r3, #0]
 800c746:	4608      	mov	r0, r1
 800c748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <__sfputs_r>:
 800c74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c750:	4606      	mov	r6, r0
 800c752:	460f      	mov	r7, r1
 800c754:	4614      	mov	r4, r2
 800c756:	18d5      	adds	r5, r2, r3
 800c758:	42ac      	cmp	r4, r5
 800c75a:	d101      	bne.n	800c760 <__sfputs_r+0x12>
 800c75c:	2000      	movs	r0, #0
 800c75e:	e007      	b.n	800c770 <__sfputs_r+0x22>
 800c760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c764:	463a      	mov	r2, r7
 800c766:	4630      	mov	r0, r6
 800c768:	f7ff ffda 	bl	800c720 <__sfputc_r>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d1f3      	bne.n	800c758 <__sfputs_r+0xa>
 800c770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c774 <_vfiprintf_r>:
 800c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c778:	460d      	mov	r5, r1
 800c77a:	b09d      	sub	sp, #116	; 0x74
 800c77c:	4614      	mov	r4, r2
 800c77e:	4698      	mov	r8, r3
 800c780:	4606      	mov	r6, r0
 800c782:	b118      	cbz	r0, 800c78c <_vfiprintf_r+0x18>
 800c784:	6983      	ldr	r3, [r0, #24]
 800c786:	b90b      	cbnz	r3, 800c78c <_vfiprintf_r+0x18>
 800c788:	f7fe fc16 	bl	800afb8 <__sinit>
 800c78c:	4b89      	ldr	r3, [pc, #548]	; (800c9b4 <_vfiprintf_r+0x240>)
 800c78e:	429d      	cmp	r5, r3
 800c790:	d11b      	bne.n	800c7ca <_vfiprintf_r+0x56>
 800c792:	6875      	ldr	r5, [r6, #4]
 800c794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	d405      	bmi.n	800c7a6 <_vfiprintf_r+0x32>
 800c79a:	89ab      	ldrh	r3, [r5, #12]
 800c79c:	059a      	lsls	r2, r3, #22
 800c79e:	d402      	bmi.n	800c7a6 <_vfiprintf_r+0x32>
 800c7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a2:	f7ff f81a 	bl	800b7da <__retarget_lock_acquire_recursive>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	071b      	lsls	r3, r3, #28
 800c7aa:	d501      	bpl.n	800c7b0 <_vfiprintf_r+0x3c>
 800c7ac:	692b      	ldr	r3, [r5, #16]
 800c7ae:	b9eb      	cbnz	r3, 800c7ec <_vfiprintf_r+0x78>
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7fd fbfe 	bl	8009fb4 <__swsetup_r>
 800c7b8:	b1c0      	cbz	r0, 800c7ec <_vfiprintf_r+0x78>
 800c7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7bc:	07dc      	lsls	r4, r3, #31
 800c7be:	d50e      	bpl.n	800c7de <_vfiprintf_r+0x6a>
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c4:	b01d      	add	sp, #116	; 0x74
 800c7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ca:	4b7b      	ldr	r3, [pc, #492]	; (800c9b8 <_vfiprintf_r+0x244>)
 800c7cc:	429d      	cmp	r5, r3
 800c7ce:	d101      	bne.n	800c7d4 <_vfiprintf_r+0x60>
 800c7d0:	68b5      	ldr	r5, [r6, #8]
 800c7d2:	e7df      	b.n	800c794 <_vfiprintf_r+0x20>
 800c7d4:	4b79      	ldr	r3, [pc, #484]	; (800c9bc <_vfiprintf_r+0x248>)
 800c7d6:	429d      	cmp	r5, r3
 800c7d8:	bf08      	it	eq
 800c7da:	68f5      	ldreq	r5, [r6, #12]
 800c7dc:	e7da      	b.n	800c794 <_vfiprintf_r+0x20>
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	0598      	lsls	r0, r3, #22
 800c7e2:	d4ed      	bmi.n	800c7c0 <_vfiprintf_r+0x4c>
 800c7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e6:	f7fe fff9 	bl	800b7dc <__retarget_lock_release_recursive>
 800c7ea:	e7e9      	b.n	800c7c0 <_vfiprintf_r+0x4c>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fa:	2330      	movs	r3, #48	; 0x30
 800c7fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9c0 <_vfiprintf_r+0x24c>
 800c800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c804:	f04f 0901 	mov.w	r9, #1
 800c808:	4623      	mov	r3, r4
 800c80a:	469a      	mov	sl, r3
 800c80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c810:	b10a      	cbz	r2, 800c816 <_vfiprintf_r+0xa2>
 800c812:	2a25      	cmp	r2, #37	; 0x25
 800c814:	d1f9      	bne.n	800c80a <_vfiprintf_r+0x96>
 800c816:	ebba 0b04 	subs.w	fp, sl, r4
 800c81a:	d00b      	beq.n	800c834 <_vfiprintf_r+0xc0>
 800c81c:	465b      	mov	r3, fp
 800c81e:	4622      	mov	r2, r4
 800c820:	4629      	mov	r1, r5
 800c822:	4630      	mov	r0, r6
 800c824:	f7ff ff93 	bl	800c74e <__sfputs_r>
 800c828:	3001      	adds	r0, #1
 800c82a:	f000 80aa 	beq.w	800c982 <_vfiprintf_r+0x20e>
 800c82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c830:	445a      	add	r2, fp
 800c832:	9209      	str	r2, [sp, #36]	; 0x24
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 80a2 	beq.w	800c982 <_vfiprintf_r+0x20e>
 800c83e:	2300      	movs	r3, #0
 800c840:	f04f 32ff 	mov.w	r2, #4294967295
 800c844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c848:	f10a 0a01 	add.w	sl, sl, #1
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	9307      	str	r3, [sp, #28]
 800c850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c854:	931a      	str	r3, [sp, #104]	; 0x68
 800c856:	4654      	mov	r4, sl
 800c858:	2205      	movs	r2, #5
 800c85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85e:	4858      	ldr	r0, [pc, #352]	; (800c9c0 <_vfiprintf_r+0x24c>)
 800c860:	f7f3 fcbe 	bl	80001e0 <memchr>
 800c864:	9a04      	ldr	r2, [sp, #16]
 800c866:	b9d8      	cbnz	r0, 800c8a0 <_vfiprintf_r+0x12c>
 800c868:	06d1      	lsls	r1, r2, #27
 800c86a:	bf44      	itt	mi
 800c86c:	2320      	movmi	r3, #32
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c872:	0713      	lsls	r3, r2, #28
 800c874:	bf44      	itt	mi
 800c876:	232b      	movmi	r3, #43	; 0x2b
 800c878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c87c:	f89a 3000 	ldrb.w	r3, [sl]
 800c880:	2b2a      	cmp	r3, #42	; 0x2a
 800c882:	d015      	beq.n	800c8b0 <_vfiprintf_r+0x13c>
 800c884:	9a07      	ldr	r2, [sp, #28]
 800c886:	4654      	mov	r4, sl
 800c888:	2000      	movs	r0, #0
 800c88a:	f04f 0c0a 	mov.w	ip, #10
 800c88e:	4621      	mov	r1, r4
 800c890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c894:	3b30      	subs	r3, #48	; 0x30
 800c896:	2b09      	cmp	r3, #9
 800c898:	d94e      	bls.n	800c938 <_vfiprintf_r+0x1c4>
 800c89a:	b1b0      	cbz	r0, 800c8ca <_vfiprintf_r+0x156>
 800c89c:	9207      	str	r2, [sp, #28]
 800c89e:	e014      	b.n	800c8ca <_vfiprintf_r+0x156>
 800c8a0:	eba0 0308 	sub.w	r3, r0, r8
 800c8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	46a2      	mov	sl, r4
 800c8ae:	e7d2      	b.n	800c856 <_vfiprintf_r+0xe2>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	1d19      	adds	r1, r3, #4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	9103      	str	r1, [sp, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bfbb      	ittet	lt
 800c8bc:	425b      	neglt	r3, r3
 800c8be:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c2:	9307      	strge	r3, [sp, #28]
 800c8c4:	9307      	strlt	r3, [sp, #28]
 800c8c6:	bfb8      	it	lt
 800c8c8:	9204      	strlt	r2, [sp, #16]
 800c8ca:	7823      	ldrb	r3, [r4, #0]
 800c8cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ce:	d10c      	bne.n	800c8ea <_vfiprintf_r+0x176>
 800c8d0:	7863      	ldrb	r3, [r4, #1]
 800c8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d4:	d135      	bne.n	800c942 <_vfiprintf_r+0x1ce>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	1d1a      	adds	r2, r3, #4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	9203      	str	r2, [sp, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	bfb8      	it	lt
 800c8e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8e6:	3402      	adds	r4, #2
 800c8e8:	9305      	str	r3, [sp, #20]
 800c8ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9d0 <_vfiprintf_r+0x25c>
 800c8ee:	7821      	ldrb	r1, [r4, #0]
 800c8f0:	2203      	movs	r2, #3
 800c8f2:	4650      	mov	r0, sl
 800c8f4:	f7f3 fc74 	bl	80001e0 <memchr>
 800c8f8:	b140      	cbz	r0, 800c90c <_vfiprintf_r+0x198>
 800c8fa:	2340      	movs	r3, #64	; 0x40
 800c8fc:	eba0 000a 	sub.w	r0, r0, sl
 800c900:	fa03 f000 	lsl.w	r0, r3, r0
 800c904:	9b04      	ldr	r3, [sp, #16]
 800c906:	4303      	orrs	r3, r0
 800c908:	3401      	adds	r4, #1
 800c90a:	9304      	str	r3, [sp, #16]
 800c90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c910:	482c      	ldr	r0, [pc, #176]	; (800c9c4 <_vfiprintf_r+0x250>)
 800c912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c916:	2206      	movs	r2, #6
 800c918:	f7f3 fc62 	bl	80001e0 <memchr>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d03f      	beq.n	800c9a0 <_vfiprintf_r+0x22c>
 800c920:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <_vfiprintf_r+0x254>)
 800c922:	bb1b      	cbnz	r3, 800c96c <_vfiprintf_r+0x1f8>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	3307      	adds	r3, #7
 800c928:	f023 0307 	bic.w	r3, r3, #7
 800c92c:	3308      	adds	r3, #8
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c932:	443b      	add	r3, r7
 800c934:	9309      	str	r3, [sp, #36]	; 0x24
 800c936:	e767      	b.n	800c808 <_vfiprintf_r+0x94>
 800c938:	fb0c 3202 	mla	r2, ip, r2, r3
 800c93c:	460c      	mov	r4, r1
 800c93e:	2001      	movs	r0, #1
 800c940:	e7a5      	b.n	800c88e <_vfiprintf_r+0x11a>
 800c942:	2300      	movs	r3, #0
 800c944:	3401      	adds	r4, #1
 800c946:	9305      	str	r3, [sp, #20]
 800c948:	4619      	mov	r1, r3
 800c94a:	f04f 0c0a 	mov.w	ip, #10
 800c94e:	4620      	mov	r0, r4
 800c950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c954:	3a30      	subs	r2, #48	; 0x30
 800c956:	2a09      	cmp	r2, #9
 800c958:	d903      	bls.n	800c962 <_vfiprintf_r+0x1ee>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0c5      	beq.n	800c8ea <_vfiprintf_r+0x176>
 800c95e:	9105      	str	r1, [sp, #20]
 800c960:	e7c3      	b.n	800c8ea <_vfiprintf_r+0x176>
 800c962:	fb0c 2101 	mla	r1, ip, r1, r2
 800c966:	4604      	mov	r4, r0
 800c968:	2301      	movs	r3, #1
 800c96a:	e7f0      	b.n	800c94e <_vfiprintf_r+0x1da>
 800c96c:	ab03      	add	r3, sp, #12
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	462a      	mov	r2, r5
 800c972:	4b16      	ldr	r3, [pc, #88]	; (800c9cc <_vfiprintf_r+0x258>)
 800c974:	a904      	add	r1, sp, #16
 800c976:	4630      	mov	r0, r6
 800c978:	f7fb fd90 	bl	800849c <_printf_float>
 800c97c:	4607      	mov	r7, r0
 800c97e:	1c78      	adds	r0, r7, #1
 800c980:	d1d6      	bne.n	800c930 <_vfiprintf_r+0x1bc>
 800c982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c984:	07d9      	lsls	r1, r3, #31
 800c986:	d405      	bmi.n	800c994 <_vfiprintf_r+0x220>
 800c988:	89ab      	ldrh	r3, [r5, #12]
 800c98a:	059a      	lsls	r2, r3, #22
 800c98c:	d402      	bmi.n	800c994 <_vfiprintf_r+0x220>
 800c98e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c990:	f7fe ff24 	bl	800b7dc <__retarget_lock_release_recursive>
 800c994:	89ab      	ldrh	r3, [r5, #12]
 800c996:	065b      	lsls	r3, r3, #25
 800c998:	f53f af12 	bmi.w	800c7c0 <_vfiprintf_r+0x4c>
 800c99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c99e:	e711      	b.n	800c7c4 <_vfiprintf_r+0x50>
 800c9a0:	ab03      	add	r3, sp, #12
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	4b09      	ldr	r3, [pc, #36]	; (800c9cc <_vfiprintf_r+0x258>)
 800c9a8:	a904      	add	r1, sp, #16
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7fc f81a 	bl	80089e4 <_printf_i>
 800c9b0:	e7e4      	b.n	800c97c <_vfiprintf_r+0x208>
 800c9b2:	bf00      	nop
 800c9b4:	0800d064 	.word	0x0800d064
 800c9b8:	0800d084 	.word	0x0800d084
 800c9bc:	0800d044 	.word	0x0800d044
 800c9c0:	0800d27c 	.word	0x0800d27c
 800c9c4:	0800d286 	.word	0x0800d286
 800c9c8:	0800849d 	.word	0x0800849d
 800c9cc:	0800c74f 	.word	0x0800c74f
 800c9d0:	0800d282 	.word	0x0800d282
 800c9d4:	00000000 	.word	0x00000000

0800c9d8 <nan>:
 800c9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9e0 <nan+0x8>
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	7ff80000 	.word	0x7ff80000

0800c9e8 <_sbrk_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4d06      	ldr	r5, [pc, #24]	; (800ca04 <_sbrk_r+0x1c>)
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	f7f5 f896 	bl	8001b24 <_sbrk>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_sbrk_r+0x1a>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_sbrk_r+0x1a>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	20000508 	.word	0x20000508

0800ca08 <__sread>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca10:	f000 f93a 	bl	800cc88 <_read_r>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	bfab      	itete	ge
 800ca18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca1c:	181b      	addge	r3, r3, r0
 800ca1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca22:	bfac      	ite	ge
 800ca24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca26:	81a3      	strhlt	r3, [r4, #12]
 800ca28:	bd10      	pop	{r4, pc}

0800ca2a <__swrite>:
 800ca2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2e:	461f      	mov	r7, r3
 800ca30:	898b      	ldrh	r3, [r1, #12]
 800ca32:	05db      	lsls	r3, r3, #23
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	4616      	mov	r6, r2
 800ca3a:	d505      	bpl.n	800ca48 <__swrite+0x1e>
 800ca3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca40:	2302      	movs	r3, #2
 800ca42:	2200      	movs	r2, #0
 800ca44:	f000 f8b8 	bl	800cbb8 <_lseek_r>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	4632      	mov	r2, r6
 800ca56:	463b      	mov	r3, r7
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5e:	f000 b837 	b.w	800cad0 <_write_r>

0800ca62 <__sseek>:
 800ca62:	b510      	push	{r4, lr}
 800ca64:	460c      	mov	r4, r1
 800ca66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca6a:	f000 f8a5 	bl	800cbb8 <_lseek_r>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	bf15      	itete	ne
 800ca74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca7e:	81a3      	strheq	r3, [r4, #12]
 800ca80:	bf18      	it	ne
 800ca82:	81a3      	strhne	r3, [r4, #12]
 800ca84:	bd10      	pop	{r4, pc}

0800ca86 <__sclose>:
 800ca86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8a:	f000 b851 	b.w	800cb30 <_close_r>

0800ca8e <strncmp>:
 800ca8e:	b510      	push	{r4, lr}
 800ca90:	b17a      	cbz	r2, 800cab2 <strncmp+0x24>
 800ca92:	4603      	mov	r3, r0
 800ca94:	3901      	subs	r1, #1
 800ca96:	1884      	adds	r4, r0, r2
 800ca98:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800caa0:	4290      	cmp	r0, r2
 800caa2:	d101      	bne.n	800caa8 <strncmp+0x1a>
 800caa4:	42a3      	cmp	r3, r4
 800caa6:	d101      	bne.n	800caac <strncmp+0x1e>
 800caa8:	1a80      	subs	r0, r0, r2
 800caaa:	bd10      	pop	{r4, pc}
 800caac:	2800      	cmp	r0, #0
 800caae:	d1f3      	bne.n	800ca98 <strncmp+0xa>
 800cab0:	e7fa      	b.n	800caa8 <strncmp+0x1a>
 800cab2:	4610      	mov	r0, r2
 800cab4:	e7f9      	b.n	800caaa <strncmp+0x1c>

0800cab6 <__ascii_wctomb>:
 800cab6:	b149      	cbz	r1, 800cacc <__ascii_wctomb+0x16>
 800cab8:	2aff      	cmp	r2, #255	; 0xff
 800caba:	bf85      	ittet	hi
 800cabc:	238a      	movhi	r3, #138	; 0x8a
 800cabe:	6003      	strhi	r3, [r0, #0]
 800cac0:	700a      	strbls	r2, [r1, #0]
 800cac2:	f04f 30ff 	movhi.w	r0, #4294967295
 800cac6:	bf98      	it	ls
 800cac8:	2001      	movls	r0, #1
 800caca:	4770      	bx	lr
 800cacc:	4608      	mov	r0, r1
 800cace:	4770      	bx	lr

0800cad0 <_write_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d07      	ldr	r5, [pc, #28]	; (800caf0 <_write_r+0x20>)
 800cad4:	4604      	mov	r4, r0
 800cad6:	4608      	mov	r0, r1
 800cad8:	4611      	mov	r1, r2
 800cada:	2200      	movs	r2, #0
 800cadc:	602a      	str	r2, [r5, #0]
 800cade:	461a      	mov	r2, r3
 800cae0:	f7f4 fbd8 	bl	8001294 <_write>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	d102      	bne.n	800caee <_write_r+0x1e>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	b103      	cbz	r3, 800caee <_write_r+0x1e>
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	20000508 	.word	0x20000508

0800caf4 <__assert_func>:
 800caf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caf6:	4614      	mov	r4, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <__assert_func+0x2c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4605      	mov	r5, r0
 800cb00:	68d8      	ldr	r0, [r3, #12]
 800cb02:	b14c      	cbz	r4, 800cb18 <__assert_func+0x24>
 800cb04:	4b07      	ldr	r3, [pc, #28]	; (800cb24 <__assert_func+0x30>)
 800cb06:	9100      	str	r1, [sp, #0]
 800cb08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb0c:	4906      	ldr	r1, [pc, #24]	; (800cb28 <__assert_func+0x34>)
 800cb0e:	462b      	mov	r3, r5
 800cb10:	f000 f81e 	bl	800cb50 <fiprintf>
 800cb14:	f000 f8ca 	bl	800ccac <abort>
 800cb18:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <__assert_func+0x38>)
 800cb1a:	461c      	mov	r4, r3
 800cb1c:	e7f3      	b.n	800cb06 <__assert_func+0x12>
 800cb1e:	bf00      	nop
 800cb20:	2000000c 	.word	0x2000000c
 800cb24:	0800d28d 	.word	0x0800d28d
 800cb28:	0800d29a 	.word	0x0800d29a
 800cb2c:	0800d2c8 	.word	0x0800d2c8

0800cb30 <_close_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d06      	ldr	r5, [pc, #24]	; (800cb4c <_close_r+0x1c>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	f7f4 ffbd 	bl	8001aba <_close>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_close_r+0x1a>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_close_r+0x1a>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	20000508 	.word	0x20000508

0800cb50 <fiprintf>:
 800cb50:	b40e      	push	{r1, r2, r3}
 800cb52:	b503      	push	{r0, r1, lr}
 800cb54:	4601      	mov	r1, r0
 800cb56:	ab03      	add	r3, sp, #12
 800cb58:	4805      	ldr	r0, [pc, #20]	; (800cb70 <fiprintf+0x20>)
 800cb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb5e:	6800      	ldr	r0, [r0, #0]
 800cb60:	9301      	str	r3, [sp, #4]
 800cb62:	f7ff fe07 	bl	800c774 <_vfiprintf_r>
 800cb66:	b002      	add	sp, #8
 800cb68:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	4770      	bx	lr
 800cb70:	2000000c 	.word	0x2000000c

0800cb74 <_fstat_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d07      	ldr	r5, [pc, #28]	; (800cb94 <_fstat_r+0x20>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f7f4 ffa6 	bl	8001ad2 <_fstat>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_fstat_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_fstat_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	20000508 	.word	0x20000508

0800cb98 <_isatty_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4d06      	ldr	r5, [pc, #24]	; (800cbb4 <_isatty_r+0x1c>)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	602b      	str	r3, [r5, #0]
 800cba4:	f7f4 ffa5 	bl	8001af2 <_isatty>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d102      	bne.n	800cbb2 <_isatty_r+0x1a>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b103      	cbz	r3, 800cbb2 <_isatty_r+0x1a>
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	20000508 	.word	0x20000508

0800cbb8 <_lseek_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d07      	ldr	r5, [pc, #28]	; (800cbd8 <_lseek_r+0x20>)
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	4608      	mov	r0, r1
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	602a      	str	r2, [r5, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f7f4 ff9e 	bl	8001b08 <_lseek>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_lseek_r+0x1e>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_lseek_r+0x1e>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	20000508 	.word	0x20000508

0800cbdc <memmove>:
 800cbdc:	4288      	cmp	r0, r1
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	eb01 0402 	add.w	r4, r1, r2
 800cbe4:	d902      	bls.n	800cbec <memmove+0x10>
 800cbe6:	4284      	cmp	r4, r0
 800cbe8:	4623      	mov	r3, r4
 800cbea:	d807      	bhi.n	800cbfc <memmove+0x20>
 800cbec:	1e43      	subs	r3, r0, #1
 800cbee:	42a1      	cmp	r1, r4
 800cbf0:	d008      	beq.n	800cc04 <memmove+0x28>
 800cbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbfa:	e7f8      	b.n	800cbee <memmove+0x12>
 800cbfc:	4402      	add	r2, r0
 800cbfe:	4601      	mov	r1, r0
 800cc00:	428a      	cmp	r2, r1
 800cc02:	d100      	bne.n	800cc06 <memmove+0x2a>
 800cc04:	bd10      	pop	{r4, pc}
 800cc06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc0e:	e7f7      	b.n	800cc00 <memmove+0x24>

0800cc10 <__malloc_lock>:
 800cc10:	4801      	ldr	r0, [pc, #4]	; (800cc18 <__malloc_lock+0x8>)
 800cc12:	f7fe bde2 	b.w	800b7da <__retarget_lock_acquire_recursive>
 800cc16:	bf00      	nop
 800cc18:	200004fc 	.word	0x200004fc

0800cc1c <__malloc_unlock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	; (800cc24 <__malloc_unlock+0x8>)
 800cc1e:	f7fe bddd 	b.w	800b7dc <__retarget_lock_release_recursive>
 800cc22:	bf00      	nop
 800cc24:	200004fc 	.word	0x200004fc

0800cc28 <_realloc_r>:
 800cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	4614      	mov	r4, r2
 800cc30:	460e      	mov	r6, r1
 800cc32:	b921      	cbnz	r1, 800cc3e <_realloc_r+0x16>
 800cc34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	4611      	mov	r1, r2
 800cc3a:	f7ff bba1 	b.w	800c380 <_malloc_r>
 800cc3e:	b92a      	cbnz	r2, 800cc4c <_realloc_r+0x24>
 800cc40:	f7ff fb32 	bl	800c2a8 <_free_r>
 800cc44:	4625      	mov	r5, r4
 800cc46:	4628      	mov	r0, r5
 800cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4c:	f000 f835 	bl	800ccba <_malloc_usable_size_r>
 800cc50:	4284      	cmp	r4, r0
 800cc52:	4607      	mov	r7, r0
 800cc54:	d802      	bhi.n	800cc5c <_realloc_r+0x34>
 800cc56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc5a:	d812      	bhi.n	800cc82 <_realloc_r+0x5a>
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4640      	mov	r0, r8
 800cc60:	f7ff fb8e 	bl	800c380 <_malloc_r>
 800cc64:	4605      	mov	r5, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0ed      	beq.n	800cc46 <_realloc_r+0x1e>
 800cc6a:	42bc      	cmp	r4, r7
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4631      	mov	r1, r6
 800cc70:	bf28      	it	cs
 800cc72:	463a      	movcs	r2, r7
 800cc74:	f7fe fe32 	bl	800b8dc <memcpy>
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f7ff fb14 	bl	800c2a8 <_free_r>
 800cc80:	e7e1      	b.n	800cc46 <_realloc_r+0x1e>
 800cc82:	4635      	mov	r5, r6
 800cc84:	e7df      	b.n	800cc46 <_realloc_r+0x1e>
	...

0800cc88 <_read_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d07      	ldr	r5, [pc, #28]	; (800cca8 <_read_r+0x20>)
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4611      	mov	r1, r2
 800cc92:	2200      	movs	r2, #0
 800cc94:	602a      	str	r2, [r5, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f7f4 fef2 	bl	8001a80 <_read>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d102      	bne.n	800cca6 <_read_r+0x1e>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <_read_r+0x1e>
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
 800cca8:	20000508 	.word	0x20000508

0800ccac <abort>:
 800ccac:	b508      	push	{r3, lr}
 800ccae:	2006      	movs	r0, #6
 800ccb0:	f000 f834 	bl	800cd1c <raise>
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	f7f4 fed9 	bl	8001a6c <_exit>

0800ccba <_malloc_usable_size_r>:
 800ccba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccbe:	1f18      	subs	r0, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	bfbc      	itt	lt
 800ccc4:	580b      	ldrlt	r3, [r1, r0]
 800ccc6:	18c0      	addlt	r0, r0, r3
 800ccc8:	4770      	bx	lr

0800ccca <_raise_r>:
 800ccca:	291f      	cmp	r1, #31
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	d904      	bls.n	800ccde <_raise_r+0x14>
 800ccd4:	2316      	movs	r3, #22
 800ccd6:	6003      	str	r3, [r0, #0]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	bd38      	pop	{r3, r4, r5, pc}
 800ccde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cce0:	b112      	cbz	r2, 800cce8 <_raise_r+0x1e>
 800cce2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cce6:	b94b      	cbnz	r3, 800ccfc <_raise_r+0x32>
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 f831 	bl	800cd50 <_getpid_r>
 800ccee:	462a      	mov	r2, r5
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccf8:	f000 b818 	b.w	800cd2c <_kill_r>
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d00a      	beq.n	800cd16 <_raise_r+0x4c>
 800cd00:	1c59      	adds	r1, r3, #1
 800cd02:	d103      	bne.n	800cd0c <_raise_r+0x42>
 800cd04:	2316      	movs	r3, #22
 800cd06:	6003      	str	r3, [r0, #0]
 800cd08:	2001      	movs	r0, #1
 800cd0a:	e7e7      	b.n	800ccdc <_raise_r+0x12>
 800cd0c:	2400      	movs	r4, #0
 800cd0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd12:	4628      	mov	r0, r5
 800cd14:	4798      	blx	r3
 800cd16:	2000      	movs	r0, #0
 800cd18:	e7e0      	b.n	800ccdc <_raise_r+0x12>
	...

0800cd1c <raise>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	; (800cd28 <raise+0xc>)
 800cd1e:	4601      	mov	r1, r0
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f7ff bfd2 	b.w	800ccca <_raise_r>
 800cd26:	bf00      	nop
 800cd28:	2000000c 	.word	0x2000000c

0800cd2c <_kill_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d07      	ldr	r5, [pc, #28]	; (800cd4c <_kill_r+0x20>)
 800cd30:	2300      	movs	r3, #0
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	4611      	mov	r1, r2
 800cd38:	602b      	str	r3, [r5, #0]
 800cd3a:	f7f4 fe87 	bl	8001a4c <_kill>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d102      	bne.n	800cd48 <_kill_r+0x1c>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	b103      	cbz	r3, 800cd48 <_kill_r+0x1c>
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	bd38      	pop	{r3, r4, r5, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20000508 	.word	0x20000508

0800cd50 <_getpid_r>:
 800cd50:	f7f4 be74 	b.w	8001a3c <_getpid>

0800cd54 <_init>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	bf00      	nop
 800cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5a:	bc08      	pop	{r3}
 800cd5c:	469e      	mov	lr, r3
 800cd5e:	4770      	bx	lr

0800cd60 <_fini>:
 800cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd62:	bf00      	nop
 800cd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd66:	bc08      	pop	{r3}
 800cd68:	469e      	mov	lr, r3
 800cd6a:	4770      	bx	lr
