
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800ced0  0800ced0  0001ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d444  0800d444  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d444  0800d444  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d444  0800d444  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d448  0800d448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000338  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c95  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003079  00000000  00000000  00035ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ed0  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d4e  00000000  00000000  0005bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c43ca  00000000  00000000  00073c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138040  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d9c  00000000  00000000  00138090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ceb4 	.word	0x0800ceb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ceb4 	.word	0x0800ceb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 f9dd 	bl	8002130 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fe0d 	bl	800199a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f002 f832 	bl	8002df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f000 fe00 	bl	800199a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f001 fd30 	bl	800281c <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f000 fdea 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001fc 	.word	0x200001fc

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 f974 	bl	8002130 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f000 fda4 	bl	800199a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f001 fcd4 	bl	800281c <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 fd8e 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000024c 	.word	0x2000024c
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 faf1 	bl	80044f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f003 fabe 	bl	80044f0 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 f8c5 	bl	800316c <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fcd7 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200002a0 	.word	0x200002a0
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f003 fa41 	bl	80044f0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f002 ffdb 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f002 fff4 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  sFilterConfig.FilterIdHigh = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /*
  sFilterConfig.FilterIdHigh = (0x104) << 5;
  sFilterConfig.FilterIdLow = (0x105) << 5;
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;*/
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010c4:	f002 f94d 	bl	8003362 <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Filter_Init+0x42>
  {
    Error_Handler();
 80010ce:	f000 fc64 	bl	800199a <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010d2:	2102      	movs	r1, #2
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010d6:	f002 fc79 	bl	80039cc <HAL_CAN_ActivateNotification>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CAN_Filter_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 fc5b 	bl	800199a <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002a0 	.word	0x200002a0

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x38>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x38>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200e      	movs	r0, #14
 8001114:	f002 ff8b 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001118:	200e      	movs	r0, #14
 800111a:	f002 ffa4 	bl	8004066 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <MX_GPIO_Init+0x154>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <MX_GPIO_Init+0x154>)
 8001148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <MX_GPIO_Init+0x154>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <MX_GPIO_Init+0x154>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a48      	ldr	r2, [pc, #288]	; (8001280 <MX_GPIO_Init+0x154>)
 8001160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <MX_GPIO_Init+0x154>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <MX_GPIO_Init+0x154>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a42      	ldr	r2, [pc, #264]	; (8001280 <MX_GPIO_Init+0x154>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <MX_GPIO_Init+0x154>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <MX_GPIO_Init+0x154>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4a3c      	ldr	r2, [pc, #240]	; (8001280 <MX_GPIO_Init+0x154>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6153      	str	r3, [r2, #20]
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_GPIO_Init+0x154>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011a8:	4836      	ldr	r0, [pc, #216]	; (8001284 <MX_GPIO_Init+0x158>)
 80011aa:	f003 fb33 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	21c1      	movs	r1, #193	; 0xc1
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f003 fb2d 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f246 0140 	movw	r1, #24640	; 0x6040
 80011c0:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_GPIO_Init+0x15c>)
 80011c2:	f003 fb27 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 80011c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x158>)
 80011e0:	f003 f986 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 80011e4:	23c1      	movs	r3, #193	; 0xc1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f003 f977 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 8001202:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_GPIO_Init+0x15c>)
 8001218:	f003 f96a 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 800121c:	f246 0340 	movw	r3, #24640	; 0x6040
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4814      	ldr	r0, [pc, #80]	; (8001288 <MX_GPIO_Init+0x15c>)
 8001236:	f003 f95b 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f003 f94d 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001256:	2338      	movs	r3, #56	; 0x38
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001266:	2305      	movs	r3, #5
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_GPIO_Init+0x15c>)
 8001272:	f003 f93d 	bl	80044f0 <HAL_GPIO_Init>

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800
 8001288:	48000400 	.word	0x48000400

0800128c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]

  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <_write+0x24>)
 80012a2:	f005 fdfd 	bl	8006ea0 <HAL_UART_Transmit_DMA>
  return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200003b0 	.word	0x200003b0

080012b4 <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0};
volatile bool uart_rx_flag = false, uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0, uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_UART_RxCpltCallback+0x5c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10d      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x2e>
  {
    uart_rx_flag = true;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_UART_RxCpltCallback+0x60>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
    uart_rx_cnt++;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_RxCpltCallback+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_UART_RxCpltCallback+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <HAL_UART_RxCpltCallback+0x68>)
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012dc:	f005 fd9c 	bl	8006e18 <HAL_UART_Receive_IT>
  {
    uart3_rx_flag = true;
    uart3_rx_cnt++;
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
  }
}
 80012e0:	e011      	b.n	8001306 <HAL_UART_RxCpltCallback+0x52>
  else if (huart->Instance == USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_UART_RxCpltCallback+0x70>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d10c      	bne.n	8001306 <HAL_UART_RxCpltCallback+0x52>
    uart3_rx_flag = true;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_UART_RxCpltCallback+0x74>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
    uart3_rx_cnt++;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_RxCpltCallback+0x78>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_UART_RxCpltCallback+0x78>)
 80012fa:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	490c      	ldr	r1, [pc, #48]	; (8001330 <HAL_UART_RxCpltCallback+0x7c>)
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <HAL_UART_RxCpltCallback+0x80>)
 8001302:	f005 fd89 	bl	8006e18 <HAL_UART_Receive_IT>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40013800 	.word	0x40013800
 8001314:	200002de 	.word	0x200002de
 8001318:	200002e0 	.word	0x200002e0
 800131c:	200002c8 	.word	0x200002c8
 8001320:	200003b0 	.word	0x200003b0
 8001324:	40004800 	.word	0x40004800
 8001328:	200002df 	.word	0x200002df
 800132c:	200002e4 	.word	0x200002e4
 8001330:	200002d4 	.word	0x200002d4
 8001334:	20000438 	.word	0x20000438

08001338 <HAL_CAN_RxFifo0MsgPendingCallback>:
int servo_timeout_cnt = 0, dribbler_timeout_cnt = 0;
uint32_t can_rx_cnt = 0;
can_msg_buf_t can_rx_buf;
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001344:	2100      	movs	r1, #0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f002 fa1e 	bl	8003788 <HAL_CAN_GetRxMessage>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001352:	f000 fb22 	bl	800199a <Error_Handler>
  }

  can_rx_cnt++;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800135e:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId)
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001368:	d01a      	beq.n	80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 800136a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800136e:	d819      	bhi.n	80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001374:	d004      	beq.n	8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8001376:	f240 1205 	movw	r2, #261	; 0x105
 800137a:	4293      	cmp	r3, r2
 800137c:	d008      	beq.n	8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
    break;

  case 0x300:
    break;
  default:
    break;
 800137e:	e011      	b.n	80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    dribbler_timeout_cnt = 0;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    dribbler_speed = can_rx_buf.speed;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800138c:	6013      	str	r3, [r2, #0]
    break;
 800138e:	e00a      	b.n	80013a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    servo_timeout_cnt = 0;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
    serv_angle = can_rx_buf.speed;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800139c:	6013      	str	r3, [r2, #0]
    break;
 800139e:	e002      	b.n	80013a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    break;
 80013a0:	bf00      	nop
 80013a2:	e000      	b.n	80013a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    break;
 80013a4:	bf00      	nop
  }
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200002fc 	.word	0x200002fc
 80013b4:	20000304 	.word	0x20000304
 80013b8:	200002f8 	.word	0x200002f8
 80013bc:	200002f4 	.word	0x200002f4
 80013c0:	200002ec 	.word	0x200002ec
 80013c4:	200002f0 	.word	0x200002f0
 80013c8:	200002e8 	.word	0x200002e8

080013cc <ball_sensor>:
static uint8_t can_data[8];

static uint8_t ball_detect_cycle_cnt = 0;

void ball_sensor(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  bool ball_detected[2];

  switch (ball_detect_process)
 80013d2:	4b7c      	ldr	r3, [pc, #496]	; (80015c4 <ball_sensor+0x1f8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	f200 80eb 	bhi.w	80015b2 <ball_sensor+0x1e6>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <ball_sensor+0x18>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001421 	.word	0x08001421
 80013ec:	0800143b 	.word	0x0800143b
 80013f0:	0800145f 	.word	0x0800145f
 80013f4:	08001479 	.word	0x08001479
 80013f8:	0800149d 	.word	0x0800149d
  {
  case 0:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001402:	4871      	ldr	r0, [pc, #452]	; (80015c8 <ball_sensor+0x1fc>)
 8001404:	f003 fa06 	bl	8004814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	486e      	ldr	r0, [pc, #440]	; (80015c8 <ball_sensor+0x1fc>)
 8001410:	f003 fa00 	bl	8004814 <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001414:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <ball_sensor+0x1f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a6a      	ldr	r2, [pc, #424]	; (80015c4 <ball_sensor+0x1f8>)
 800141c:	6013      	str	r3, [r2, #0]
    break;
 800141e:	e0cc      	b.n	80015ba <ball_sensor+0x1ee>
  case 1:
    adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 8001420:	486a      	ldr	r0, [pc, #424]	; (80015cc <ball_sensor+0x200>)
 8001422:	f001 f97b 	bl	800271c <HAL_ADC_GetValue>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b69      	ldr	r3, [pc, #420]	; (80015d0 <ball_sensor+0x204>)
 800142c:	601a      	str	r2, [r3, #0]
    ball_detect_process++;
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <ball_sensor+0x1f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a63      	ldr	r2, [pc, #396]	; (80015c4 <ball_sensor+0x1f8>)
 8001436:	6013      	str	r3, [r2, #0]
    break;
 8001438:	e0bf      	b.n	80015ba <ball_sensor+0x1ee>
  case 2:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4861      	ldr	r0, [pc, #388]	; (80015c8 <ball_sensor+0x1fc>)
 8001442:	f003 f9e7 	bl	8004814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144c:	485e      	ldr	r0, [pc, #376]	; (80015c8 <ball_sensor+0x1fc>)
 800144e:	f003 f9e1 	bl	8004814 <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <ball_sensor+0x1f8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <ball_sensor+0x1f8>)
 800145a:	6013      	str	r3, [r2, #0]
    break;
 800145c:	e0ad      	b.n	80015ba <ball_sensor+0x1ee>
  case 3:
    adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 800145e:	485b      	ldr	r0, [pc, #364]	; (80015cc <ball_sensor+0x200>)
 8001460:	f001 f95c 	bl	800271c <HAL_ADC_GetValue>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <ball_sensor+0x204>)
 800146a:	605a      	str	r2, [r3, #4]
    ball_detect_process++;
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <ball_sensor+0x1f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <ball_sensor+0x1f8>)
 8001474:	6013      	str	r3, [r2, #0]
    break;
 8001476:	e0a0      	b.n	80015ba <ball_sensor+0x1ee>
  case 4:
    HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	4852      	ldr	r0, [pc, #328]	; (80015c8 <ball_sensor+0x1fc>)
 8001480:	f003 f9c8 	bl	8004814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148a:	484f      	ldr	r0, [pc, #316]	; (80015c8 <ball_sensor+0x1fc>)
 800148c:	f003 f9c2 	bl	8004814 <HAL_GPIO_WritePin>
    ball_detect_process++;
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <ball_sensor+0x1f8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <ball_sensor+0x1f8>)
 8001498:	6013      	str	r3, [r2, #0]
    break;
 800149a:	e08e      	b.n	80015ba <ball_sensor+0x1ee>
  case 5:
    adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 800149c:	484b      	ldr	r0, [pc, #300]	; (80015cc <ball_sensor+0x200>)
 800149e:	f001 f93d 	bl	800271c <HAL_ADC_GetValue>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <ball_sensor+0x204>)
 80014a8:	609a      	str	r2, [r3, #8]
    ball_detect_process++;
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <ball_sensor+0x1f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <ball_sensor+0x1f8>)
 80014b2:	6013      	str	r3, [r2, #0]
    ball_detect[0] = adc_raw[0] - adc_raw[1];
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <ball_sensor+0x204>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <ball_sensor+0x204>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <ball_sensor+0x208>)
 80014c0:	6013      	str	r3, [r2, #0]
    ball_detect[1] = adc_raw[0] - adc_raw[2];
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <ball_sensor+0x204>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <ball_sensor+0x204>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <ball_sensor+0x208>)
 80014ce:	6053      	str	r3, [r2, #4]

    if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET)
 80014d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d4:	483c      	ldr	r0, [pc, #240]	; (80015c8 <ball_sensor+0x1fc>)
 80014d6:	f003 f985 	bl	80047e4 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <ball_sensor+0x120>
    {
      ball_detect[0] = 0;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <ball_sensor+0x208>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
      ball_detect[1] = 0;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <ball_sensor+0x208>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
    }

    //
    if (ball_detect[1] < BALL_DETECTOR_THRESH)
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <ball_sensor+0x208>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014f4:	da08      	bge.n	8001508 <ball_sensor+0x13c>
    {
      ball_detected[0] = true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	713b      	strb	r3, [r7, #4]
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f003 f987 	bl	8004814 <HAL_GPIO_WritePin>
 8001506:	e007      	b.n	8001518 <ball_sensor+0x14c>
    }
    else
    {
      ball_detected[0] = false;
 8001508:	2300      	movs	r3, #0
 800150a:	713b      	strb	r3, [r7, #4]
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f003 f97e 	bl	8004814 <HAL_GPIO_WritePin>
    }
    if (ball_detect[0] < BALL_DETECTOR_THRESH)
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <ball_sensor+0x208>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001520:	da08      	bge.n	8001534 <ball_sensor+0x168>
    {
      ball_detected[1] = true;
 8001522:	2301      	movs	r3, #1
 8001524:	717b      	strb	r3, [r7, #5]
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f003 f971 	bl	8004814 <HAL_GPIO_WritePin>
 8001532:	e007      	b.n	8001544 <ball_sensor+0x178>
    }
    else
    {
      ball_detected[1] = false;
 8001534:	2300      	movs	r3, #0
 8001536:	717b      	strb	r3, [r7, #5]
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f003 f968 	bl	8004814 <HAL_GPIO_WritePin>
    }

    if (ball_detected[0])
 8001544:	793b      	ldrb	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <ball_sensor+0x18c>
    {
      can_data[0] = 1;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <ball_sensor+0x20c>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
      can_data[1] = 0;
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <ball_sensor+0x20c>)
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
 8001556:	e00f      	b.n	8001578 <ball_sensor+0x1ac>
    }
    else if (ball_detected[1])
 8001558:	797b      	ldrb	r3, [r7, #5]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <ball_sensor+0x1a0>
    {
      can_data[0] = 1;
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <ball_sensor+0x20c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
      can_data[1] = 5;
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <ball_sensor+0x20c>)
 8001566:	2205      	movs	r2, #5
 8001568:	705a      	strb	r2, [r3, #1]
 800156a:	e005      	b.n	8001578 <ball_sensor+0x1ac>
    }
    else
    {
      can_data[0] = 0;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <ball_sensor+0x20c>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
      can_data[1] = 0;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <ball_sensor+0x20c>)
 8001574:	2200      	movs	r2, #0
 8001576:	705a      	strb	r2, [r3, #1]
    }
    ball_detect_cycle_cnt++;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <ball_sensor+0x210>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <ball_sensor+0x210>)
 8001582:	701a      	strb	r2, [r3, #0]

    can_header.StdId = 0x240;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <ball_sensor+0x214>)
 8001586:	f44f 7210 	mov.w	r2, #576	; 0x240
 800158a:	601a      	str	r2, [r3, #0]
    can_header.RTR = CAN_RTR_DATA;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <ball_sensor+0x214>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    can_header.DLC = 4;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <ball_sensor+0x214>)
 8001594:	2204      	movs	r2, #4
 8001596:	611a      	str	r2, [r3, #16]
    can_header.IDE = CAN_ID_STD;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <ball_sensor+0x214>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    can_header.TransmitGlobalTime = DISABLE;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <ball_sensor+0x214>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	751a      	strb	r2, [r3, #20]
    HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <ball_sensor+0x218>)
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <ball_sensor+0x20c>)
 80015a8:	490d      	ldr	r1, [pc, #52]	; (80015e0 <ball_sensor+0x214>)
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <ball_sensor+0x21c>)
 80015ac:	f001 ffe7 	bl	800357e <HAL_CAN_AddTxMessage>
    break;
 80015b0:	e003      	b.n	80015ba <ball_sensor+0x1ee>
  default:
    ball_detect_process = 0;
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <ball_sensor+0x1f8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    break;
 80015b8:	bf00      	nop
  }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000350 	.word	0x20000350
 80015c8:	48000400 	.word	0x48000400
 80015cc:	2000024c 	.word	0x2000024c
 80015d0:	20000354 	.word	0x20000354
 80015d4:	20000320 	.word	0x20000320
 80015d8:	20000344 	.word	0x20000344
 80015dc:	2000034c 	.word	0x2000034c
 80015e0:	20000328 	.word	0x20000328
 80015e4:	20000340 	.word	0x20000340
 80015e8:	200002a0 	.word	0x200002a0

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015f0:	b095      	sub	sp, #84	; 0x54
 80015f2:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fd12 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f970 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f7ff fd96 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8001600:	f7ff fd76 	bl	80010f0 <MX_DMA_Init>
  MX_CAN_Init();
 8001604:	f7ff fcc2 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001608:	f000 fbb2 	bl	8001d70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800160c:	f000 fbe0 	bl	8001dd0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001610:	f000 faf0 	bl	8001bf4 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001614:	f7ff fbde 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001618:	f7ff fb6c 	bl	8000cf4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0702!!\n");
 800161c:	4897      	ldr	r0, [pc, #604]	; (800187c <main+0x290>)
 800161e:	f007 fe4b 	bl	80092b8 <puts>
  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	4996      	ldr	r1, [pc, #600]	; (8001880 <main+0x294>)
 8001626:	4897      	ldr	r0, [pc, #604]	; (8001884 <main+0x298>)
 8001628:	f005 fbf6 	bl	8006e18 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	4996      	ldr	r1, [pc, #600]	; (8001888 <main+0x29c>)
 8001630:	4896      	ldr	r0, [pc, #600]	; (800188c <main+0x2a0>)
 8001632:	f005 fbf1 	bl	8006e18 <HAL_UART_Receive_IT>

  CAN_Filter_Init();
 8001636:	f7ff fd2b 	bl	8001090 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 800163a:	4895      	ldr	r0, [pc, #596]	; (8001890 <main+0x2a4>)
 800163c:	f001 ff5b 	bl	80034f6 <HAL_CAN_Start>

  HAL_TIM_PWM_Init(&htim3);
 8001640:	4894      	ldr	r0, [pc, #592]	; (8001894 <main+0x2a8>)
 8001642:	f004 fd23 	bl	800608c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001646:	2108      	movs	r1, #8
 8001648:	4892      	ldr	r0, [pc, #584]	; (8001894 <main+0x2a8>)
 800164a:	f004 fd77 	bl	800613c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800164e:	210c      	movs	r1, #12
 8001650:	4890      	ldr	r0, [pc, #576]	; (8001894 <main+0x2a8>)
 8001652:	f004 fd73 	bl	800613c <HAL_TIM_PWM_Start>
  htim3.Instance->CCR3 = 0;
 8001656:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <main+0x2a8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = 0;
 800165e:	4b8d      	ldr	r3, [pc, #564]	; (8001894 <main+0x2a8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
  servo_timeout_cnt = 0;
 8001666:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <main+0x2ac>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  dribbler_timeout_cnt = 0;
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <main+0x2b0>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

  uint32_t print_interval = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4889      	ldr	r0, [pc, #548]	; (80018a0 <main+0x2b4>)
 800167a:	f001 f85c 	bl	8002736 <HAL_ADCEx_Calibration_Start>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <main+0x9c>
  {
    /* Calibration Error */
    Error_Handler();
 8001684:	f000 f989 	bl	800199a <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	4886      	ldr	r0, [pc, #536]	; (80018a4 <main+0x2b8>)
 800168c:	f001 f853 	bl	8002736 <HAL_ADCEx_Calibration_Start>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <main+0xae>
  {
    /* Calibration Error */
    Error_Handler();
 8001696:	f000 f980 	bl	800199a <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 800169a:	4881      	ldr	r0, [pc, #516]	; (80018a0 <main+0x2b4>)
 800169c:	f000 ff28 	bl	80024f0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80016a0:	4880      	ldr	r0, [pc, #512]	; (80018a4 <main+0x2b8>)
 80016a2:	f000 ff25 	bl	80024f0 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 fd1e 	bl	80020e8 <HAL_Delay>
    ball_sensor();
 80016ac:	f7ff fe8e 	bl	80013cc <ball_sensor>

    print_interval++;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
    if (print_interval >= 100)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b63      	cmp	r3, #99	; 0x63
 80016ba:	d9f4      	bls.n	80016a6 <main+0xba>
    {
      print_interval = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
      printf("ball %3d mbx %ld free %ld can rx %3ld uart rx %4ld %4ld dribbler %6.3f servo %6.3f timeout %4d %4d ball %+5ld %+5ld\n", ball_detect_cycle_cnt, can_mailbox, HAL_CAN_GetTxMailboxesFreeLevel(&hcan), can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1]);
 80016c0:	4b79      	ldr	r3, [pc, #484]	; (80018a8 <main+0x2bc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4699      	mov	r9, r3
 80016c6:	4b79      	ldr	r3, [pc, #484]	; (80018ac <main+0x2c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	4870      	ldr	r0, [pc, #448]	; (8001890 <main+0x2a4>)
 80016ce:	f002 f826 	bl	800371e <HAL_CAN_GetTxMailboxesFreeLevel>
 80016d2:	4680      	mov	r8, r0
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <main+0x2c4>)
 80016d6:	681e      	ldr	r6, [r3, #0]
 80016d8:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <main+0x2c8>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	6139      	str	r1, [r7, #16]
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <main+0x2cc>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	4b75      	ldr	r3, [pc, #468]	; (80018bc <main+0x2d0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <main+0x2d4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4b67      	ldr	r3, [pc, #412]	; (800189c <main+0x2b0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b65      	ldr	r3, [pc, #404]	; (8001898 <main+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <main+0x2d8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <main+0x2d8>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	930b      	str	r3, [sp, #44]	; 0x2c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	930a      	str	r3, [sp, #40]	; 0x28
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	9309      	str	r3, [sp, #36]	; 0x24
 800171a:	9208      	str	r2, [sp, #32]
 800171c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001720:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	9002      	str	r0, [sp, #8]
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	9101      	str	r1, [sp, #4]
 800172c:	9600      	str	r6, [sp, #0]
 800172e:	4643      	mov	r3, r8
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4649      	mov	r1, r9
 8001734:	4864      	ldr	r0, [pc, #400]	; (80018c8 <main+0x2dc>)
 8001736:	f007 fd39 	bl	80091ac <iprintf>
      ball_detect_cycle_cnt = 0;
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <main+0x2bc>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
      // TEL (LED0,PA3)
      if (uart3_rx_cnt > 0)
 8001740:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <main+0x2cc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <main+0x16a>
      {
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174e:	485f      	ldr	r0, [pc, #380]	; (80018cc <main+0x2e0>)
 8001750:	f003 f860 	bl	8004814 <HAL_GPIO_WritePin>
 8001754:	e005      	b.n	8001762 <main+0x176>
      }
      else
      {

        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	485b      	ldr	r0, [pc, #364]	; (80018cc <main+0x2e0>)
 800175e:	f003 f859 	bl	8004814 <HAL_GPIO_WritePin>
      }

      // RX (can rx,LED2,PA5)
      if (can_rx_cnt > 0)
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <main+0x2c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <main+0x18c>
      {
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001770:	4856      	ldr	r0, [pc, #344]	; (80018cc <main+0x2e0>)
 8001772:	f003 f84f 	bl	8004814 <HAL_GPIO_WritePin>
 8001776:	e005      	b.n	8001784 <main+0x198>
      }
      else
      {

        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	4853      	ldr	r0, [pc, #332]	; (80018cc <main+0x2e0>)
 8001780:	f003 f848 	bl	8004814 <HAL_GPIO_WritePin>
      }

      if (dribbler_speed != 0)
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <main+0x2d0>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d006      	beq.n	80017a2 <main+0x1b6>
      {
        HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	484c      	ldr	r0, [pc, #304]	; (80018cc <main+0x2e0>)
 800179c:	f003 f83a 	bl	8004814 <HAL_GPIO_WritePin>
 80017a0:	e005      	b.n	80017ae <main+0x1c2>
      }
      else
      {

        HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a8:	4848      	ldr	r0, [pc, #288]	; (80018cc <main+0x2e0>)
 80017aa:	f003 f833 	bl	8004814 <HAL_GPIO_WritePin>
      }

      can_rx_cnt = 0;
 80017ae:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <main+0x2c4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
      uart_rx_cnt = 0;
 80017b4:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <main+0x2c8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
      uart3_rx_cnt = 0;
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <main+0x2cc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

      if (HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_SET)
 80017c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c4:	4842      	ldr	r0, [pc, #264]	; (80018d0 <main+0x2e4>)
 80017c6:	f003 f80d 	bl	80047e4 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d112      	bne.n	80017f6 <main+0x20a>
      {
        htim3.Instance->CCR3 = 1500 + 600 * dribbler_speed; // esc
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <main+0x2d0>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80018d4 <main+0x2e8>
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80018d8 <main+0x2ec>
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <main+0x2a8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 2a90 	vmov	r2, s15
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f4:	e004      	b.n	8001800 <main+0x214>
      }
      else
      {
        htim3.Instance->CCR3 = 1500 + USER_SW_ESC_PULSE_WITDH; // esc
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <main+0x2a8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }

      if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET)
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f002 ffec 	bl	80047e4 <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d112      	bne.n	8001838 <main+0x24c>
      {
        htim3.Instance->CCR4 = 1500 - 600 * serv_angle; // servo
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <main+0x2d4>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80018d4 <main+0x2e8>
 800181c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001820:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80018d8 <main+0x2ec>
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <main+0x2a8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
 8001836:	e004      	b.n	8001842 <main+0x256>
      }
      else
      {
        htim3.Instance->CCR4 = 1500 - USER_SW_SERVO_PULSE_WITDH; // servo
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <main+0x2a8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
      }

      dribbler_timeout_cnt++;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <main+0x2b0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <main+0x2b0>)
 800184a:	6013      	str	r3, [r2, #0]
      servo_timeout_cnt++;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <main+0x2ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <main+0x2ac>)
 8001854:	6013      	str	r3, [r2, #0]
      if (dribbler_timeout_cnt > 50)
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <main+0x2b0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b32      	cmp	r3, #50	; 0x32
 800185c:	dd03      	ble.n	8001866 <main+0x27a>
      {
        dribbler_speed = 0;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <main+0x2d0>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
      }
      if (servo_timeout_cnt > 50)
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <main+0x2ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b32      	cmp	r3, #50	; 0x32
 800186c:	f77f af1b 	ble.w	80016a6 <main+0xba>
      {
        serv_angle = 0;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <main+0x2d4>)
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 8001878:	e715      	b.n	80016a6 <main+0xba>
 800187a:	bf00      	nop
 800187c:	0800ced0 	.word	0x0800ced0
 8001880:	200002d4 	.word	0x200002d4
 8001884:	20000438 	.word	0x20000438
 8001888:	200002c8 	.word	0x200002c8
 800188c:	200003b0 	.word	0x200003b0
 8001890:	200002a0 	.word	0x200002a0
 8001894:	20000364 	.word	0x20000364
 8001898:	200002f0 	.word	0x200002f0
 800189c:	200002f4 	.word	0x200002f4
 80018a0:	200001fc 	.word	0x200001fc
 80018a4:	2000024c 	.word	0x2000024c
 80018a8:	2000034c 	.word	0x2000034c
 80018ac:	20000340 	.word	0x20000340
 80018b0:	200002f8 	.word	0x200002f8
 80018b4:	200002e0 	.word	0x200002e0
 80018b8:	200002e4 	.word	0x200002e4
 80018bc:	200002ec 	.word	0x200002ec
 80018c0:	200002e8 	.word	0x200002e8
 80018c4:	20000320 	.word	0x20000320
 80018c8:	0800cee8 	.word	0x0800cee8
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000400 	.word	0x48000400
 80018d4:	44160000 	.word	0x44160000
 80018d8:	44bb8000 	.word	0x44bb8000

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b09e      	sub	sp, #120	; 0x78
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e6:	2228      	movs	r2, #40	; 0x28
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 fddc 	bl	80084a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	223c      	movs	r2, #60	; 0x3c
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f006 fdce 	bl	80084a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	2301      	movs	r3, #1
 800191c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191e:	2302      	movs	r3, #2
 8001920:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001926:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001928:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800192c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001932:	4618      	mov	r0, r3
 8001934:	f002 ff86 	bl	8004844 <HAL_RCC_OscConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800193e:	f000 f82c 	bl	800199a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001942:	230f      	movs	r3, #15
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001946:	2302      	movs	r3, #2
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800195c:	2102      	movs	r1, #2
 800195e:	4618      	mov	r0, r3
 8001960:	f003 ffae 	bl	80058c0 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800196a:	f000 f816 	bl	800199a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800196e:	2385      	movs	r3, #133	; 0x85
 8001970:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800197a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f9d2 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800198e:	f000 f804 	bl	800199a <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3778      	adds	r7, #120	; 0x78
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199e:	b672      	cpsid	i
}
 80019a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <Error_Handler+0x8>

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_MspInit+0x44>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_MspInit+0x44>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_MspInit+0x44>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x44>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x44>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x44>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 fb36 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA1_Channel4_IRQHandler+0x10>)
 8001a46:	f002 fc45 	bl	80042d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200004c0 	.word	0x200004c0

08001a54 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001a5a:	f001 ffdd 	bl	8003a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200002a0 	.word	0x200002a0

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f005 fa93 	bl	8006f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200003b0 	.word	0x200003b0

08001a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
	return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_kill>:

int _kill(int pid, int sig)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a96:	f006 fcdd 	bl	8008454 <__errno>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2216      	movs	r2, #22
 8001a9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_exit>:

void _exit (int status)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe7 	bl	8001a8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001abe:	e7fe      	b.n	8001abe <_exit+0x12>

08001ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
	}

return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:
	}
	return len;
}

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f006 fc5e 	bl	8008454 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20008000 	.word	0x20008000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000360 	.word	0x20000360
 8001bcc:	20000518 	.word	0x20000518

08001bd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]
 8001c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c1a:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <MX_TIM3_Init+0xc8>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c20:	2248      	movs	r2, #72	; 0x48
 8001c22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3e:	481e      	ldr	r0, [pc, #120]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c40:	f004 fa24 	bl	800608c <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c4a:	f7ff fea6 	bl	800199a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c5e:	f005 f80d 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c68:	f7ff fe97 	bl	800199a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6c:	2360      	movs	r3, #96	; 0x60
 8001c6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8001c70:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001c74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2208      	movs	r2, #8
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c86:	f004 fb59 	bl	800633c <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001c90:	f7ff fe83 	bl	800199a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001c9c:	f004 fb4e 	bl	800633c <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001ca6:	f7ff fe78 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM3_Init+0xc4>)
 8001cac:	f000 f828 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000364 	.word	0x20000364
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_TIM_PWM_MspInit+0x38>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10b      	bne.n	8001cea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_TIM_MspPostInit+0x64>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11b      	bne.n	8001d5a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_TIM_MspPostInit+0x68>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_TIM_MspPostInit+0x68>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6153      	str	r3, [r2, #20]
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_TIM_MspPostInit+0x68>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_TIM_MspPostInit+0x6c>)
 8001d56:	f002 fbcb 	bl	80044f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000400 	.word	0x48000400

08001d70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <MX_USART1_UART_Init+0x58>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_USART1_UART_Init+0x5c>)
 8001d7e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d94:	220c      	movs	r2, #12
 8001d96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART1_UART_Init+0x54>)
 8001db2:	f004 ffe3 	bl	8006d7c <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001dbc:	f7ff fded 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003b0 	.word	0x200003b0
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	001e8480 	.word	0x001e8480

08001dd0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <MX_USART3_UART_Init+0x5c>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001ddc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001de0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_USART3_UART_Init+0x58>)
 8001e14:	f004 ffb2 	bl	8006d7c <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e1e:	f7ff fdbc 	bl	800199a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000438 	.word	0x20000438
 8001e2c:	40004800 	.word	0x40004800

08001e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_UART_MspInit+0x180>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d16a      	bne.n	8001f28 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6193      	str	r3, [r2, #24]
 8001e5e:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6153      	str	r3, [r2, #20]
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e94:	2307      	movs	r3, #7
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f002 fb25 	bl	80044f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	f002 fb13 	bl	80044f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_UART_MspInit+0x18c>)
 8001ece:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001efa:	482f      	ldr	r0, [pc, #188]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001efc:	f002 f8cd 	bl	800409a <HAL_DMA_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001f06:	f7ff fd48 	bl	800199a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001f0e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_UART_MspInit+0x188>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2025      	movs	r0, #37	; 0x25
 8001f1c:	f002 f887 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f20:	2025      	movs	r0, #37	; 0x25
 8001f22:	f002 f8a0 	bl	8004066 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f26:	e03e      	b.n	8001fa6 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <HAL_UART_MspInit+0x190>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d139      	bne.n	8001fa6 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	61d3      	str	r3, [r2, #28]
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6153      	str	r3, [r2, #20]
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_UART_MspInit+0x184>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f74:	2307      	movs	r3, #7
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <HAL_UART_MspInit+0x194>)
 8001f80:	f002 fab6 	bl	80044f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f96:	2307      	movs	r3, #7
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <HAL_UART_MspInit+0x194>)
 8001fa2:	f002 faa5 	bl	80044f0 <HAL_GPIO_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	200004c0 	.word	0x200004c0
 8001fbc:	40020044 	.word	0x40020044
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fce:	490e      	ldr	r1, [pc, #56]	; (8002008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <LoopForever+0xe>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe4:	4c0b      	ldr	r4, [pc, #44]	; (8002014 <LoopForever+0x16>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ff2:	f7ff fded 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f006 fa33 	bl	8008460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ffa:	f7ff faf7 	bl	80015ec <main>

08001ffe <LoopForever>:

LoopForever:
    b LoopForever
 8001ffe:	e7fe      	b.n	8001ffe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002000:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800200c:	0800d44c 	.word	0x0800d44c
  ldr r2, =_sbss
 8002010:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002014:	20000518 	.word	0x20000518

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_Init+0x28>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_Init+0x28>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f001 fff3 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002032:	200f      	movs	r0, #15
 8002034:	f000 f808 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f7ff fcb4 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x54>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f002 f80b 	bl	8004082 <HAL_SYSTICK_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00e      	b.n	8002094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d80a      	bhi.n	8002092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f001 ffd3 	bl	800402e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_InitTick+0x5c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000008 	.word	0x20000008
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000504 	.word	0x20000504

080020d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000504 	.word	0x20000504

080020e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffee 	bl	80020d0 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_Delay+0x44>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffde 	bl	80020d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b09a      	sub	sp, #104	; 0x68
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e1c9      	b.n	80024e4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d176      	bne.n	8002250 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d152      	bne.n	8002210 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe fe83 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d13b      	bne.n	8002210 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 ff81 	bl	80030a0 <ADC_Disable>
 800219e:	4603      	mov	r3, r0
 80021a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d12f      	bne.n	8002210 <HAL_ADC_Init+0xe0>
 80021b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12b      	bne.n	8002210 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c0:	f023 0302 	bic.w	r3, r3, #2
 80021c4:	f043 0202 	orr.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ec:	4b86      	ldr	r3, [pc, #536]	; (8002408 <HAL_ADC_Init+0x2d8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a86      	ldr	r2, [pc, #536]	; (800240c <HAL_ADC_Init+0x2dc>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002202:	e002      	b.n	800220a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3b01      	subs	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d110      	bne.n	8002250 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f023 0312 	bic.w	r3, r3, #18
 8002236:	f043 0210 	orr.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 8136 	bne.w	80024ca <HAL_ADC_Init+0x39a>
 800225e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8131 	bne.w	80024ca <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 8129 	bne.w	80024ca <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002280:	f043 0202 	orr.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADC_Init+0x16c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5e      	ldr	r2, [pc, #376]	; (8002410 <HAL_ADC_Init+0x2e0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_Init+0x170>
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_ADC_Init+0x2e4>)
 800229e:	e000      	b.n	80022a2 <HAL_ADC_Init+0x172>
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_ADC_Init+0x2e8>)
 80022a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_Init+0x184>
 80022ae:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_ADC_Init+0x2e0>)
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e01a      	b.n	80022ea <HAL_ADC_Init+0x1ba>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a55      	ldr	r2, [pc, #340]	; (8002410 <HAL_ADC_Init+0x2e0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d103      	bne.n	80022c6 <HAL_ADC_Init+0x196>
 80022be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e011      	b.n	80022ea <HAL_ADC_Init+0x1ba>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a54      	ldr	r2, [pc, #336]	; (800241c <HAL_ADC_Init+0x2ec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <HAL_ADC_Init+0x1a6>
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_ADC_Init+0x2f0>)
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e009      	b.n	80022ea <HAL_ADC_Init+0x1ba>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_ADC_Init+0x2f0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_ADC_Init+0x1b6>
 80022e0:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_ADC_Init+0x2ec>)
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e001      	b.n	80022ea <HAL_ADC_Init+0x1ba>
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_ADC_Init+0x1da>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x1da>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_ADC_Init+0x1dc>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11c      	bne.n	800234a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002310:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d010      	beq.n	8002338 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_ADC_Init+0x202>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x202>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_ADC_Init+0x204>
 8002332:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002348:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7e5b      	ldrb	r3, [r3, #25]
 800234e:	035b      	lsls	r3, r3, #13
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002354:	2a01      	cmp	r2, #1
 8002356:	d002      	beq.n	800235e <HAL_ADC_Init+0x22e>
 8002358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800235c:	e000      	b.n	8002360 <HAL_ADC_Init+0x230>
 800235e:	2200      	movs	r2, #0
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4313      	orrs	r3, r2
 800236e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002370:	4313      	orrs	r3, r2
 8002372:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d11b      	bne.n	80023b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7e5b      	ldrb	r3, [r3, #25]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	045a      	lsls	r2, r3, #17
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	4313      	orrs	r3, r2
 8002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
 8002398:	e00d      	b.n	80023b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d03a      	beq.n	8002434 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a16      	ldr	r2, [pc, #88]	; (800241c <HAL_ADC_Init+0x2ec>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_Init+0x2a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_ADC_Init+0x2f0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d128      	bne.n	8002424 <HAL_ADC_Init+0x2f4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023da:	d012      	beq.n	8002402 <HAL_ADC_Init+0x2d2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d00a      	beq.n	80023fc <HAL_ADC_Init+0x2cc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80023ee:	d002      	beq.n	80023f6 <HAL_ADC_Init+0x2c6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	e018      	b.n	8002428 <HAL_ADC_Init+0x2f8>
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	e015      	b.n	8002428 <HAL_ADC_Init+0x2f8>
 80023fc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002400:	e012      	b.n	8002428 <HAL_ADC_Init+0x2f8>
 8002402:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002406:	e00f      	b.n	8002428 <HAL_ADC_Init+0x2f8>
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83
 8002410:	50000100 	.word	0x50000100
 8002414:	50000300 	.word	0x50000300
 8002418:	50000700 	.word	0x50000700
 800241c:	50000400 	.word	0x50000400
 8002420:	50000500 	.word	0x50000500
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800242c:	4313      	orrs	r3, r2
 800242e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002430:	4313      	orrs	r3, r2
 8002432:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d114      	bne.n	800246c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7e1b      	ldrb	r3, [r3, #24]
 800245a:	039a      	lsls	r2, r3, #14
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4313      	orrs	r3, r2
 8002466:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002468:	4313      	orrs	r3, r2
 800246a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_ADC_Init+0x3bc>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10c      	bne.n	80024a2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f023 010f 	bic.w	r1, r3, #15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	e007      	b.n	80024b2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 020f 	bic.w	r2, r2, #15
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f023 0303 	bic.w	r3, r3, #3
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
 80024c8:	e00a      	b.n	80024e0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f023 0312 	bic.w	r3, r3, #18
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3768      	adds	r7, #104	; 0x68
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	fff0c007 	.word	0xfff0c007

080024f0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80f9 	bne.w	80026fe <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_Start+0x2a>
 8002516:	2302      	movs	r3, #2
 8002518:	e0f4      	b.n	8002704 <HAL_ADC_Start+0x214>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fd58 	bl	8002fd8 <ADC_Enable>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 80e0 	bne.w	80026f4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002550:	d004      	beq.n	800255c <HAL_ADC_Start+0x6c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6d      	ldr	r2, [pc, #436]	; (800270c <HAL_ADC_Start+0x21c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d106      	bne.n	800256a <HAL_ADC_Start+0x7a>
 800255c:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <HAL_ADC_Start+0x220>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <HAL_ADC_Start+0x9a>
 8002568:	e005      	b.n	8002576 <HAL_ADC_Start+0x86>
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_ADC_Start+0x224>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_ADC_Start+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800257e:	d004      	beq.n	800258a <HAL_ADC_Start+0x9a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a64      	ldr	r2, [pc, #400]	; (8002718 <HAL_ADC_Start+0x228>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d115      	bne.n	80025b6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d036      	beq.n	8002612 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025b4:	e02d      	b.n	8002612 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_Start+0xe6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_ADC_Start+0x21c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_Start+0xfc>
 80025d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e008      	b.n	80025fe <HAL_ADC_Start+0x10e>
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_ADC_Start+0x228>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800260a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261e:	d106      	bne.n	800262e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f023 0206 	bic.w	r2, r3, #6
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
 800262c:	e002      	b.n	8002634 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	221c      	movs	r2, #28
 8002642:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264c:	d004      	beq.n	8002658 <HAL_ADC_Start+0x168>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_ADC_Start+0x21c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d106      	bne.n	8002666 <HAL_ADC_Start+0x176>
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_ADC_Start+0x220>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03e      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 8002664:	e005      	b.n	8002672 <HAL_ADC_Start+0x182>
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_ADC_Start+0x224>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b00      	cmp	r3, #0
 8002670:	d037      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Start+0x196>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_ADC_Start+0x21c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d106      	bne.n	8002694 <HAL_ADC_Start+0x1a4>
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_ADC_Start+0x220>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2b05      	cmp	r3, #5
 8002690:	d027      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 8002692:	e005      	b.n	80026a0 <HAL_ADC_Start+0x1b0>
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_ADC_Start+0x224>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b05      	cmp	r3, #5
 800269e:	d020      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a8:	d004      	beq.n	80026b4 <HAL_ADC_Start+0x1c4>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_ADC_Start+0x21c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d106      	bne.n	80026c2 <HAL_ADC_Start+0x1d2>
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_ADC_Start+0x220>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d010      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 80026c0:	e005      	b.n	80026ce <HAL_ADC_Start+0x1de>
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_ADC_Start+0x224>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d009      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Start+0x1f2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_ADC_Start+0x228>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10f      	bne.n	8002702 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0204 	orr.w	r2, r2, #4
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	e006      	b.n	8002702 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026fc:	e001      	b.n	8002702 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	50000100 	.word	0x50000100
 8002710:	50000300 	.word	0x50000300
 8002714:	50000700 	.word	0x50000700
 8002718:	50000400 	.word	0x50000400

0800271c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADCEx_Calibration_Start+0x1c>
 800274e:	2302      	movs	r3, #2
 8002750:	e05f      	b.n	8002812 <HAL_ADCEx_Calibration_Start+0xdc>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fca0 	bl	80030a0 <ADC_Disable>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d14e      	bne.n	8002808 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800277e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002794:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027a4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80027a6:	f7ff fc93 	bl	80020d0 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027ac:	e01c      	b.n	80027e8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027ae:	f7ff fc8f 	bl	80020d0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b0a      	cmp	r3, #10
 80027ba:	d915      	bls.n	80027e8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d10d      	bne.n	80027e8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f023 0312 	bic.w	r3, r3, #18
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e014      	b.n	8002812 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f6:	d0da      	beq.n	80027ae <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b09b      	sub	sp, #108	; 0x6c
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x22>
 800283a:	2302      	movs	r3, #2
 800283c:	e2ca      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x5b8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 82ae 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d81c      	bhi.n	8002898 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	461a      	mov	r2, r3
 8002872:	231f      	movs	r3, #31
 8002874:	4093      	lsls	r3, r2
 8002876:	43db      	mvns	r3, r3
 8002878:	4019      	ands	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa00 f203 	lsl.w	r2, r0, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
 8002896:	e063      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d81e      	bhi.n	80028de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	3b1e      	subs	r3, #30
 80028b4:	221f      	movs	r2, #31
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4019      	ands	r1, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	3b1e      	subs	r3, #30
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	e040      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b0e      	cmp	r3, #14
 80028e4:	d81e      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	3b3c      	subs	r3, #60	; 0x3c
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	3b3c      	subs	r3, #60	; 0x3c
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
 8002922:	e01d      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	3b5a      	subs	r3, #90	; 0x5a
 8002938:	221f      	movs	r2, #31
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	4019      	ands	r1, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	3b5a      	subs	r3, #90	; 0x5a
 8002954:	fa00 f203 	lsl.w	r2, r0, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80e5 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d91c      	bls.n	80029b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6999      	ldr	r1, [r3, #24]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	3b1e      	subs	r3, #30
 800298a:	2207      	movs	r2, #7
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6898      	ldr	r0, [r3, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e019      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6959      	ldr	r1, [r3, #20]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6898      	ldr	r0, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d84f      	bhi.n	8002aa8 <HAL_ADC_ConfigChannel+0x28c>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a43 	.word	0x08002a43
 8002a18:	08002a65 	.word	0x08002a65
 8002a1c:	08002a87 	.word	0x08002a87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a26:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <HAL_ADC_ConfigChannel+0x474>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	0691      	lsls	r1, r2, #26
 8002a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a32:	430a      	orrs	r2, r1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a40:	e07e      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a48:	4b91      	ldr	r3, [pc, #580]	; (8002c90 <HAL_ADC_ConfigChannel+0x474>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	0691      	lsls	r1, r2, #26
 8002a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a54:	430a      	orrs	r2, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a62:	e06d      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_ADC_ConfigChannel+0x474>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	0691      	lsls	r1, r2, #26
 8002a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a76:	430a      	orrs	r2, r1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a84:	e05c      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_ADC_ConfigChannel+0x474>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	0691      	lsls	r1, r2, #26
 8002a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aa6:	e04b      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	069b      	lsls	r3, r3, #26
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d107      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b38:	e001      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b3e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x344>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x344>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x346>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 8130 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d00f      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b8e:	e049      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d91c      	bls.n	8002bec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6999      	ldr	r1, [r3, #24]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1b      	subs	r3, #27
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6898      	ldr	r0, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1b      	subs	r3, #27
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e01b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2207      	movs	r2, #7
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6898      	ldr	r0, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x41c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_ADC_ConfigChannel+0x478>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x420>
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_ADC_ConfigChannel+0x47c>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x422>
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_ADC_ConfigChannel+0x480>)
 8002c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c58:	2b11      	cmp	r3, #17
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c6c:	2b12      	cmp	r3, #18
 8002c6e:	f040 80ab 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 80a4 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x484>
 8002c8a:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_ADC_ConfigChannel+0x478>)
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e022      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4ba>
 8002c90:	83fff000 	.word	0x83fff000
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	50000700 	.word	0x50000700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d103      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x496>
 8002caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e011      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4ba>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d102      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4a6>
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e009      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4ba>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d102      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x4b6>
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e001      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4ba>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4da>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4da>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x4dc>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d150      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x502>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x502>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x504>
 8002d1e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13c      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d11d      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x54c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d34:	d118      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_ADC_ConfigChannel+0x5d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9a      	lsrs	r2, r3, #18
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d66:	e02e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d10b      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x56c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d86:	e01e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b12      	cmp	r3, #18
 8002d8e:	d11a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9c:	e013      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db0:	e00a      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002dc4:	e000      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dc6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	376c      	adds	r7, #108	; 0x6c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	50000100 	.word	0x50000100
 8002de4:	50000400 	.word	0x50000400
 8002de8:	50000500 	.word	0x50000500
 8002dec:	20000000 	.word	0x20000000
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b099      	sub	sp, #100	; 0x64
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d102      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	e01a      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e011      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	e009      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e001      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b0      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0a9      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 808d 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8086 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d004      	beq.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d040      	beq.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	035b      	lsls	r3, r3, #13
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d15c      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f0a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14b      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f18:	f023 030f 	bic.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	e03c      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f38:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f7c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8a:	f023 030f 	bic.w	r3, r3, #15
 8002f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f90:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f92:	e009      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3764      	adds	r7, #100	; 0x64
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	50000100 	.word	0x50000100
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	50000500 	.word	0x50000500
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	50000700 	.word	0x50000700

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <ADC_Enable+0x2c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <ADC_Enable+0x2c>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <ADC_Enable+0x2e>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d143      	bne.n	8003092 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <ADC_Enable+0xc4>)
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e02f      	b.n	8003094 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003044:	f7ff f844 	bl	80020d0 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800304a:	e01b      	b.n	8003084 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304c:	f7ff f840 	bl	80020d0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d914      	bls.n	8003084 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d00d      	beq.n	8003084 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1dc      	bne.n	800304c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	8000003f 	.word	0x8000003f

080030a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <ADC_Disable+0x2c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <ADC_Disable+0x2c>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <ADC_Disable+0x2e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030d 	and.w	r3, r3, #13
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10f      	bne.n	8003100 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0202 	orr.w	r2, r2, #2
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2203      	movs	r2, #3
 80030f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030f8:	f7fe ffea 	bl	80020d0 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030fe:	e029      	b.n	8003154 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e023      	b.n	8003164 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800311c:	f7fe ffd8 	bl	80020d0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d914      	bls.n	8003154 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d0dc      	beq.n	800311c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0ed      	b.n	800335a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd ff34 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a0:	f7fe ff96 	bl	80020d0 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031a6:	e012      	b.n	80031ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a8:	f7fe ff92 	bl	80020d0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b0a      	cmp	r3, #10
 80031b4:	d90b      	bls.n	80031ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2205      	movs	r2, #5
 80031c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0c5      	b.n	800335a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0e5      	beq.n	80031a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0202 	bic.w	r2, r2, #2
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ec:	f7fe ff70 	bl	80020d0 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031f2:	e012      	b.n	800321a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f4:	f7fe ff6c 	bl	80020d0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d90b      	bls.n	800321a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2205      	movs	r2, #5
 8003212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e09f      	b.n	800335a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e5      	bne.n	80031f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7e1b      	ldrb	r3, [r3, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d108      	bne.n	8003242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e007      	b.n	8003252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7e5b      	ldrb	r3, [r3, #25]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e007      	b.n	800327c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e9b      	ldrb	r3, [r3, #26]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d108      	bne.n	8003296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e007      	b.n	80032a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0220 	bic.w	r2, r2, #32
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7edb      	ldrb	r3, [r3, #27]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d108      	bne.n	80032c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0210 	bic.w	r2, r2, #16
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e007      	b.n	80032d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7f1b      	ldrb	r3, [r3, #28]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d108      	bne.n	80032ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e007      	b.n	80032fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7f5b      	ldrb	r3, [r3, #29]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e007      	b.n	8003324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	ea42 0103 	orr.w	r1, r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003378:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d003      	beq.n	8003388 <HAL_CAN_ConfigFilter+0x26>
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b02      	cmp	r3, #2
 8003384:	f040 80aa 	bne.w	80034dc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2201      	movs	r2, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d123      	bne.n	800340a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	401a      	ands	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3248      	adds	r2, #72	; 0x48
 80033ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003400:	6979      	ldr	r1, [r7, #20]
 8003402:	3348      	adds	r3, #72	; 0x48
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d122      	bne.n	8003458 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	431a      	orrs	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003432:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3248      	adds	r2, #72	; 0x48
 8003438:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800344c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800344e:	6979      	ldr	r1, [r7, #20]
 8003450:	3348      	adds	r3, #72	; 0x48
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003472:	e007      	b.n	8003484 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	431a      	orrs	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800349e:	e007      	b.n	80034b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e006      	b.n	80034ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12e      	bne.n	8003568 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003522:	f7fe fdd5 	bl	80020d0 <HAL_GetTick>
 8003526:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003528:	e012      	b.n	8003550 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800352a:	f7fe fdd1 	bl	80020d0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b0a      	cmp	r3, #10
 8003536:	d90b      	bls.n	8003550 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2205      	movs	r2, #5
 8003548:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e012      	b.n	8003576 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e5      	bne.n	800352a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e006      	b.n	8003576 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800357e:	b480      	push	{r7}
 8003580:	b089      	sub	sp, #36	; 0x24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003592:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800359c:	7ffb      	ldrb	r3, [r7, #31]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d003      	beq.n	80035aa <HAL_CAN_AddTxMessage+0x2c>
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f040 80ad 	bne.w	8003704 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8095 	beq.w	80036f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	0e1b      	lsrs	r3, r3, #24
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035d4:	2201      	movs	r2, #1
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	409a      	lsls	r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	6809      	ldr	r1, [r1, #0]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	3318      	adds	r3, #24
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	440b      	add	r3, r1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e00f      	b.n	8003622 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800360c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003616:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3318      	adds	r3, #24
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	440b      	add	r3, r1
 8003620:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3318      	adds	r3, #24
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	440b      	add	r3, r1
 8003632:	3304      	adds	r3, #4
 8003634:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	7d1b      	ldrb	r3, [r3, #20]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d111      	bne.n	8003662 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3318      	adds	r3, #24
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3318      	adds	r3, #24
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	440b      	add	r3, r1
 800365e:	3304      	adds	r3, #4
 8003660:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3307      	adds	r3, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	061a      	lsls	r2, r3, #24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3306      	adds	r3, #6
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3305      	adds	r3, #5
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	4313      	orrs	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	3204      	adds	r2, #4
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	4610      	mov	r0, r2
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6811      	ldr	r1, [r2, #0]
 800368a:	ea43 0200 	orr.w	r2, r3, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	440b      	add	r3, r1
 8003694:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003698:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3303      	adds	r3, #3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	061a      	lsls	r2, r3, #24
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3302      	adds	r3, #2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3301      	adds	r3, #1
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4313      	orrs	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	4610      	mov	r0, r2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	6811      	ldr	r1, [r2, #0]
 80036c0:	ea43 0200 	orr.w	r2, r3, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3318      	adds	r3, #24
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4413      	add	r3, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6811      	ldr	r1, [r2, #0]
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3318      	adds	r3, #24
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	440b      	add	r3, r1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e00e      	b.n	8003712 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e006      	b.n	8003712 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003730:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d002      	beq.n	800373e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003738:	7afb      	ldrb	r3, [r7, #11]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d11d      	bne.n	800377a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d003      	beq.n	80037ac <HAL_CAN_GetRxMessage+0x24>
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 8103 	bne.w	80039b2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0f7      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0e8      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	331b      	adds	r3, #27
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0204 	and.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10c      	bne.n	8003826 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	331b      	adds	r3, #27
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0d5b      	lsrs	r3, r3, #21
 800381c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e00b      	b.n	800383e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	331b      	adds	r3, #27
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	331b      	adds	r3, #27
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0202 	and.w	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	331b      	adds	r3, #27
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2208      	movs	r2, #8
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	e00b      	b.n	800388c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	331b      	adds	r3, #27
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	331b      	adds	r3, #27
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	331b      	adds	r3, #27
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	4413      	add	r3, r2
 80038dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0a1a      	lsrs	r2, r3, #8
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0c1a      	lsrs	r2, r3, #16
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	3302      	adds	r3, #2
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	0e1a      	lsrs	r2, r3, #24
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	3303      	adds	r3, #3
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4413      	add	r3, r2
 8003942:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0a1a      	lsrs	r2, r3, #8
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	3305      	adds	r3, #5
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	0c1a      	lsrs	r2, r3, #16
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3306      	adds	r3, #6
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4413      	add	r3, r2
 8003976:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e1a      	lsrs	r2, r3, #24
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	3307      	adds	r3, #7
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	e007      	b.n	80039ae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0220 	orr.w	r2, r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e006      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d002      	beq.n	80039ea <HAL_CAN_ActivateNotification+0x1e>
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d109      	bne.n	80039fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6959      	ldr	r1, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e006      	b.n	8003a0c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d07c      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d023      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f983 	bl	8003d86 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a80:	e016      	b.n	8003ab0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	e00c      	b.n	8003ab0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	e002      	b.n	8003ab0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f989 	bl	8003dc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f963 	bl	8003d9a <HAL_CAN_TxMailbox1CompleteCallback>
 8003ad4:	e016      	b.n	8003b04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	e00c      	b.n	8003b04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e002      	b.n	8003b04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f969 	bl	8003dd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f943 	bl	8003dae <HAL_CAN_TxMailbox2CompleteCallback>
 8003b28:	e016      	b.n	8003b58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	e00c      	b.n	8003b58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	e002      	b.n	8003b58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f949 	bl	8003dea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2208      	movs	r2, #8
 8003b96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f930 	bl	8003dfe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fbbe 	bl	8001338 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f912 	bl	8003e26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8f9 	bl	8003e12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f8fc 	bl	8003e3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8f5 	bl	8003e4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d07b      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d072      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d043      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03e      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce6:	2b60      	cmp	r3, #96	; 0x60
 8003ce8:	d02b      	beq.n	8003d42 <HAL_CAN_IRQHandler+0x32a>
 8003cea:	2b60      	cmp	r3, #96	; 0x60
 8003cec:	d82e      	bhi.n	8003d4c <HAL_CAN_IRQHandler+0x334>
 8003cee:	2b50      	cmp	r3, #80	; 0x50
 8003cf0:	d022      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x320>
 8003cf2:	2b50      	cmp	r3, #80	; 0x50
 8003cf4:	d82a      	bhi.n	8003d4c <HAL_CAN_IRQHandler+0x334>
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d019      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x316>
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d826      	bhi.n	8003d4c <HAL_CAN_IRQHandler+0x334>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d010      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x30c>
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d822      	bhi.n	8003d4c <HAL_CAN_IRQHandler+0x334>
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d002      	beq.n	8003d10 <HAL_CAN_IRQHandler+0x2f8>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d005      	beq.n	8003d1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d0e:	e01d      	b.n	8003d4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f043 0308 	orr.w	r3, r3, #8
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d18:	e019      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f043 0310 	orr.w	r3, r3, #16
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d22:	e014      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f043 0320 	orr.w	r3, r3, #32
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d36:	e00a      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d40:	e005      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d4a:	e000      	b.n	8003d4e <HAL_CAN_IRQHandler+0x336>
            break;
 8003d4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2204      	movs	r2, #4
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f872 	bl	8003e62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	; (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff29 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff3e 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff8e 	bl	8003f6c <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5d 	bl	8003f18 <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff31 	bl	8003edc <__NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffa2 	bl	8003fd4 <SysTick_Config>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e037      	b.n	8004120 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80040ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9b8 	bl	8004478 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}  
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_DMA_Start_IT+0x20>
 8004144:	2302      	movs	r3, #2
 8004146:	e04a      	b.n	80041de <HAL_DMA_Start_IT+0xb6>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004156:	2b01      	cmp	r3, #1
 8004158:	d13a      	bne.n	80041d0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f94b 	bl	800441a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 020e 	orr.w	r2, r2, #14
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e00f      	b.n	80041be <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 020a 	orr.w	r2, r2, #10
 80041ac:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0204 	bic.w	r2, r2, #4
 80041bc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e005      	b.n	80041dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
 80041da:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2204      	movs	r2, #4
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e020      	b.n	800424c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 020e 	bic.w	r2, r2, #14
 8004218:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800426a:	2b02      	cmp	r3, #2
 800426c:	d005      	beq.n	800427a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2204      	movs	r2, #4
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e027      	b.n	80042ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 020e 	bic.w	r2, r2, #14
 8004288:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
    } 
  }
  return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2204      	movs	r2, #4
 80042f2:	409a      	lsls	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d024      	beq.n	8004346 <HAL_DMA_IRQHandler+0x72>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01f      	beq.n	8004346 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2104      	movs	r1, #4
 800432e:	fa01 f202 	lsl.w	r2, r1, r2
 8004332:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d06a      	beq.n	8004412 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004344:	e065      	b.n	8004412 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	2202      	movs	r2, #2
 800434c:	409a      	lsls	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xdc>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020a 	bic.w	r2, r2, #10
 800437c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	2102      	movs	r1, #2
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d035      	beq.n	8004412 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80043ae:	e030      	b.n	8004412 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2208      	movs	r2, #8
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d028      	beq.n	8004412 <HAL_DMA_IRQHandler+0x13e>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d023      	beq.n	8004412 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 020e 	bic.w	r2, r2, #14
 80043d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2101      	movs	r1, #1
 80043e4:	fa01 f202 	lsl.w	r2, r1, r2
 80043e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
    }
  }
}  
 8004410:	e7ff      	b.n	8004412 <HAL_DMA_IRQHandler+0x13e>
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d108      	bne.n	800445a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004458:	e007      	b.n	800446a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	60da      	str	r2, [r3, #12]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <DMA_CalcBaseAndBitshift+0x60>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d80f      	bhi.n	80044ac <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <DMA_CalcBaseAndBitshift+0x64>)
 8004494:	4413      	add	r3, r2
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <DMA_CalcBaseAndBitshift+0x6c>)
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80044aa:	e00e      	b.n	80044ca <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <DMA_CalcBaseAndBitshift+0x70>)
 80044b4:	4413      	add	r3, r2
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <DMA_CalcBaseAndBitshift+0x74>)
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40020407 	.word	0x40020407
 80044dc:	bffdfff8 	.word	0xbffdfff8
 80044e0:	cccccccd 	.word	0xcccccccd
 80044e4:	40020000 	.word	0x40020000
 80044e8:	bffdfbf8 	.word	0xbffdfbf8
 80044ec:	40020400 	.word	0x40020400

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044fe:	e154      	b.n	80047aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	4013      	ands	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8146 	beq.w	80047a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <HAL_GPIO_Init+0x40>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d130      	bne.n	8004592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004566:	2201      	movs	r2, #1
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0201 	and.w	r2, r3, #1
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d017      	beq.n	80045ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2203      	movs	r2, #3
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d123      	bne.n	8004622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	08da      	lsrs	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3208      	adds	r2, #8
 800461c:	6939      	ldr	r1, [r7, #16]
 800461e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a0 	beq.w	80047a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_GPIO_Init+0x2d8>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_GPIO_Init+0x2d8>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6193      	str	r3, [r2, #24]
 8004670:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_GPIO_Init+0x2d8>)
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800467c:	4a53      	ldr	r2, [pc, #332]	; (80047cc <HAL_GPIO_Init+0x2dc>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	220f      	movs	r2, #15
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046a6:	d019      	beq.n	80046dc <HAL_GPIO_Init+0x1ec>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a49      	ldr	r2, [pc, #292]	; (80047d0 <HAL_GPIO_Init+0x2e0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_GPIO_Init+0x1e8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a48      	ldr	r2, [pc, #288]	; (80047d4 <HAL_GPIO_Init+0x2e4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_Init+0x1e4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a47      	ldr	r2, [pc, #284]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_Init+0x1e0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a46      	ldr	r2, [pc, #280]	; (80047dc <HAL_GPIO_Init+0x2ec>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_Init+0x1dc>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e008      	b.n	80046de <HAL_GPIO_Init+0x1ee>
 80046cc:	2305      	movs	r3, #5
 80046ce:	e006      	b.n	80046de <HAL_GPIO_Init+0x1ee>
 80046d0:	2303      	movs	r3, #3
 80046d2:	e004      	b.n	80046de <HAL_GPIO_Init+0x1ee>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e002      	b.n	80046de <HAL_GPIO_Init+0x1ee>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_GPIO_Init+0x1ee>
 80046dc:	2300      	movs	r3, #0
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	f002 0203 	and.w	r2, r2, #3
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	4093      	lsls	r3, r2
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ee:	4937      	ldr	r1, [pc, #220]	; (80047cc <HAL_GPIO_Init+0x2dc>)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	3302      	adds	r3, #2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046fc:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004720:	4a2f      	ldr	r2, [pc, #188]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800474a:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800479e:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3301      	adds	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f aea3 	bne.w	8004500 <HAL_GPIO_Init+0x10>
  }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40010000 	.word	0x40010000
 80047d0:	48000400 	.word	0x48000400
 80047d4:	48000800 	.word	0x48000800
 80047d8:	48000c00 	.word	0x48000c00
 80047dc:	48001000 	.word	0x48001000
 80047e0:	40010400 	.word	0x40010400

080047e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e001      	b.n	8004806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
 8004820:	4613      	mov	r3, r2
 8004822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004824:	787b      	ldrb	r3, [r7, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004830:	e002      	b.n	8004838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800484a:	af00      	add	r7, sp, #0
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004854:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f001 b823 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 817d 	beq.w	8004b7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004880:	4bbc      	ldr	r3, [pc, #752]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b04      	cmp	r3, #4
 800488a:	d00c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800488c:	4bb9      	ldr	r3, [pc, #740]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d15c      	bne.n	8004952 <HAL_RCC_OscConfig+0x10e>
 8004898:	4bb6      	ldr	r3, [pc, #728]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d155      	bne.n	8004952 <HAL_RCC_OscConfig+0x10e>
 80048a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d102      	bne.n	80048d8 <HAL_RCC_OscConfig+0x94>
 80048d2:	4ba8      	ldr	r3, [pc, #672]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e015      	b.n	8004904 <HAL_RCC_OscConfig+0xc0>
 80048d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80048ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80048f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004900:	4b9c      	ldr	r3, [pc, #624]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004908:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800490c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004910:	fa92 f2a2 	rbit	r2, r2
 8004914:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004918:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800491c:	fab2 f282 	clz	r2, r2
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f002 021f 	and.w	r2, r2, #31
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f202 	lsl.w	r2, r1, r2
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 811f 	beq.w	8004b78 <HAL_RCC_OscConfig+0x334>
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 8116 	bne.w	8004b78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f000 bfaf 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x12e>
 8004964:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a82      	ldr	r2, [pc, #520]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e036      	b.n	80049e0 <HAL_RCC_OscConfig+0x19c>
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0x158>
 8004982:	4b7c      	ldr	r3, [pc, #496]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7b      	ldr	r2, [pc, #492]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e021      	b.n	80049e0 <HAL_RCC_OscConfig+0x19c>
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x184>
 80049ae:	4b71      	ldr	r3, [pc, #452]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b6e      	ldr	r3, [pc, #440]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6d      	ldr	r2, [pc, #436]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0x19c>
 80049c8:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a66      	ldr	r2, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049e0:	4b64      	ldr	r3, [pc, #400]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	f023 020f 	bic.w	r2, r3, #15
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	495f      	ldr	r1, [pc, #380]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d059      	beq.n	8004abe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fb61 	bl	80020d0 <HAL_GetTick>
 8004a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fb5c 	bl	80020d0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b64      	cmp	r3, #100	; 0x64
 8004a22:	d902      	bls.n	8004a2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	f000 bf43 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8004a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_OscConfig+0x218>
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e015      	b.n	8004a88 <HAL_RCC_OscConfig+0x244>
 8004a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a94:	fa92 f2a2 	rbit	r2, r2
 8004a98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004aa0:	fab2 f282 	clz	r2, r2
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	f002 021f 	and.w	r2, r2, #31
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ab      	beq.n	8004a14 <HAL_RCC_OscConfig+0x1d0>
 8004abc:	e05d      	b.n	8004b7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fd fb07 	bl	80020d0 <HAL_GetTick>
 8004ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fb02 	bl	80020d0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	; 0x64
 8004ad6:	d902      	bls.n	8004ade <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f000 bee9 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8004ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ae2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004aea:	fa93 f3a3 	rbit	r3, r3
 8004aee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004af2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2cc>
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	e015      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
 8004b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004b1c:	fa93 f3a3 	rbit	r3, r3
 8004b20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <HAL_RCC_OscConfig+0x330>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004b44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004b48:	fa92 f2a2 	rbit	r2, r2
 8004b4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004b50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004b54:	fab2 f282 	clz	r2, r2
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f042 0220 	orr.w	r2, r2, #32
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	f002 021f 	and.w	r2, r2, #31
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ab      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x284>
 8004b70:	e003      	b.n	8004b7a <HAL_RCC_OscConfig+0x336>
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 817d 	beq.w	8004e8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b90:	4ba6      	ldr	r3, [pc, #664]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b9c:	4ba3      	ldr	r3, [pc, #652]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d172      	bne.n	8004c8e <HAL_RCC_OscConfig+0x44a>
 8004ba8:	4ba0      	ldr	r3, [pc, #640]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d16c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x44a>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004bc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3a0>
 8004bde:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	e013      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004bfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004c08:	4b88      	ldr	r3, [pc, #544]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004c12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c16:	fa92 f2a2 	rbit	r2, r2
 8004c1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004c1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004c22:	fab2 f282 	clz	r2, r2
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	f042 0220 	orr.w	r2, r2, #32
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f202 	lsl.w	r2, r1, r2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCC_OscConfig+0x410>
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f000 be2e 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b75      	ldr	r3, [pc, #468]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	21f8      	movs	r1, #248	; 0xf8
 8004c6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004c72:	fa91 f1a1 	rbit	r1, r1
 8004c76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004c7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c7e:	fab1 f181 	clz	r1, r1
 8004c82:	b2c9      	uxtb	r1, r1
 8004c84:	408b      	lsls	r3, r1
 8004c86:	4969      	ldr	r1, [pc, #420]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8c:	e0fd      	b.n	8004e8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8088 	beq.w	8004db0 <HAL_RCC_OscConfig+0x56c>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004cb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2301      	movs	r3, #1
 8004cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fa00 	bl	80020d0 <HAL_GetTick>
 8004cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fd f9fb 	bl	80020d0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d902      	bls.n	8004cec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	f000 bde2 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004cfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4d8>
 8004d16:	4b45      	ldr	r3, [pc, #276]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e013      	b.n	8004d44 <HAL_RCC_OscConfig+0x500>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d2e:	2302      	movs	r3, #2
 8004d30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d40:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2202      	movs	r2, #2
 8004d46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004d4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004d4e:	fa92 f2a2 	rbit	r2, r2
 8004d52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004d56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	f042 0220 	orr.w	r2, r2, #32
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	f002 021f 	and.w	r2, r2, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0af      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d76:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	21f8      	movs	r1, #248	; 0xf8
 8004d8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d94:	fa91 f1a1 	rbit	r1, r1
 8004d98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004d9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004da0:	fab1 f181 	clz	r1, r1
 8004da4:	b2c9      	uxtb	r1, r1
 8004da6:	408b      	lsls	r3, r1
 8004da8:	4920      	ldr	r1, [pc, #128]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	e06c      	b.n	8004e8a <HAL_RCC_OscConfig+0x646>
 8004db0:	2301      	movs	r3, #1
 8004db2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd f978 	bl	80020d0 <HAL_GetTick>
 8004de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de6:	f7fd f973 	bl	80020d0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d902      	bls.n	8004dfc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	f000 bd5a 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d104      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5ec>
 8004e26:	4b01      	ldr	r3, [pc, #4]	; (8004e2c <HAL_RCC_OscConfig+0x5e8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	e015      	b.n	8004e58 <HAL_RCC_OscConfig+0x614>
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	2302      	movs	r3, #2
 8004e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e42:	2302      	movs	r3, #2
 8004e44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e54:	4bc8      	ldr	r3, [pc, #800]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004e5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e62:	fa92 f2a2 	rbit	r2, r2
 8004e66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004e6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004e6e:	fab2 f282 	clz	r2, r2
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	f042 0220 	orr.w	r2, r2, #32
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	f002 021f 	and.w	r2, r2, #31
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ad      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8110 	beq.w	80050c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d079      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x760>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4bab      	ldr	r3, [pc, #684]	; (800517c <HAL_RCC_OscConfig+0x938>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eda:	f7fd f8f9 	bl	80020d0 <HAL_GetTick>
 8004ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fd f8f4 	bl	80020d0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d902      	bls.n	8004efa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	f000 bcdb 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8004efa:	2302      	movs	r3, #2
 8004efc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f14:	2202      	movs	r2, #2
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	fa93 f2a3 	rbit	r2, r3
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f38:	2202      	movs	r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	fa93 f2a3 	rbit	r2, r3
 8004f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f54:	4b88      	ldr	r3, [pc, #544]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f60:	2102      	movs	r1, #2
 8004f62:	6019      	str	r1, [r3, #0]
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	fa93 f1a3 	rbit	r1, r3
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f7a:	6019      	str	r1, [r3, #0]
  return result;
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0a0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x6a0>
 8004fa2:	e08d      	b.n	80050c0 <HAL_RCC_OscConfig+0x87c>
 8004fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	fa93 f2a3 	rbit	r2, r3
 8004fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fc6:	601a      	str	r2, [r3, #0]
  return result;
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b68      	ldr	r3, [pc, #416]	; (800517c <HAL_RCC_OscConfig+0x938>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe6:	f7fd f873 	bl	80020d0 <HAL_GetTick>
 8004fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd f86e 	bl	80020d0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d902      	bls.n	8005006 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	f000 bc55 	b.w	80058b0 <HAL_RCC_OscConfig+0x106c>
 8005006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800500e:	2202      	movs	r2, #2
 8005010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005032:	2202      	movs	r2, #2
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f2a3 	rbit	r2, r3
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	2202      	movs	r2, #2
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005070:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 8005074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800507e:	2102      	movs	r1, #2
 8005080:	6019      	str	r1, [r3, #0]
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	fa93 f1a3 	rbit	r1, r3
 8005090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005094:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005098:	6019      	str	r1, [r3, #0]
  return result;
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fab3 f383 	clz	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d197      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 81a1 	beq.w	8005418 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050dc:	4b26      	ldr	r3, [pc, #152]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f2:	61d3      	str	r3, [r2, #28]
 80050f4:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800510e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCC_OscConfig+0x93c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11a      	bne.n	8005158 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <HAL_RCC_OscConfig+0x93c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_RCC_OscConfig+0x93c>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fc ffcf 	bl	80020d0 <HAL_GetTick>
 8005132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	e009      	b.n	800514c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fc ffca 	bl	80020d0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e3b1      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <HAL_RCC_OscConfig+0x93c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ef      	beq.n	8005138 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10d      	bne.n	8005184 <HAL_RCC_OscConfig+0x940>
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4a02      	ldr	r2, [pc, #8]	; (8005178 <HAL_RCC_OscConfig+0x934>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6213      	str	r3, [r2, #32]
 8005174:	e03c      	b.n	80051f0 <HAL_RCC_OscConfig+0x9ac>
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
 800517c:	10908120 	.word	0x10908120
 8005180:	40007000 	.word	0x40007000
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10c      	bne.n	80051ae <HAL_RCC_OscConfig+0x96a>
 8005194:	4bc1      	ldr	r3, [pc, #772]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4ac0      	ldr	r2, [pc, #768]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	6213      	str	r3, [r2, #32]
 80051a0:	4bbe      	ldr	r3, [pc, #760]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4abd      	ldr	r2, [pc, #756]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051a6:	f023 0304 	bic.w	r3, r3, #4
 80051aa:	6213      	str	r3, [r2, #32]
 80051ac:	e020      	b.n	80051f0 <HAL_RCC_OscConfig+0x9ac>
 80051ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x994>
 80051be:	4bb7      	ldr	r3, [pc, #732]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4ab6      	ldr	r2, [pc, #728]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6213      	str	r3, [r2, #32]
 80051ca:	4bb4      	ldr	r3, [pc, #720]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4ab3      	ldr	r2, [pc, #716]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6213      	str	r3, [r2, #32]
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0x9ac>
 80051d8:	4bb0      	ldr	r3, [pc, #704]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4aaf      	ldr	r2, [pc, #700]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6213      	str	r3, [r2, #32]
 80051e4:	4bad      	ldr	r3, [pc, #692]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	4aac      	ldr	r2, [pc, #688]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80051ea:	f023 0304 	bic.w	r3, r3, #4
 80051ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8081 	beq.w	8005304 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005202:	f7fc ff65 	bl	80020d0 <HAL_GetTick>
 8005206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fc ff60 	bl	80020d0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e345      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800522c:	2202      	movs	r2, #2
 800522e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005234:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	fa93 f2a3 	rbit	r2, r3
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005250:	2202      	movs	r2, #2
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	fa93 f2a3 	rbit	r2, r3
 8005262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005266:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800526a:	601a      	str	r2, [r3, #0]
  return result;
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005274:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	fab3 f383 	clz	r3, r3
 800527a:	b2db      	uxtb	r3, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d102      	bne.n	8005290 <HAL_RCC_OscConfig+0xa4c>
 800528a:	4b84      	ldr	r3, [pc, #528]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	e013      	b.n	80052b8 <HAL_RCC_OscConfig+0xa74>
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005298:	2202      	movs	r2, #2
 800529a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	fa93 f2a3 	rbit	r2, r3
 80052aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4b79      	ldr	r3, [pc, #484]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80052c0:	2102      	movs	r1, #2
 80052c2:	6011      	str	r1, [r2, #0]
 80052c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	fa92 f1a2 	rbit	r1, r2
 80052d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052da:	6011      	str	r1, [r2, #0]
  return result;
 80052dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	fab2 f282 	clz	r2, r2
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	f002 021f 	and.w	r2, r2, #31
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f202 	lsl.w	r2, r1, r2
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d084      	beq.n	800520c <HAL_RCC_OscConfig+0x9c8>
 8005302:	e07f      	b.n	8005404 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7fc fee4 	bl	80020d0 <HAL_GetTick>
 8005308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530c:	e00b      	b.n	8005326 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fc fedf 	bl	80020d0 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	; 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e2c4      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
 8005326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800532e:	2202      	movs	r2, #2
 8005330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005336:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005352:	2202      	movs	r2, #2
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	fa93 f2a3 	rbit	r2, r3
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800536c:	601a      	str	r2, [r3, #0]
  return result;
 800536e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005372:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005376:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005378:	fab3 f383 	clz	r3, r3
 800537c:	b2db      	uxtb	r3, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f043 0302 	orr.w	r3, r3, #2
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d102      	bne.n	8005392 <HAL_RCC_OscConfig+0xb4e>
 800538c:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	e013      	b.n	80053ba <HAL_RCC_OscConfig+0xb76>
 8005392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800539a:	2202      	movs	r2, #2
 800539c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	fa93 f2a3 	rbit	r2, r3
 80053ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80053c2:	2102      	movs	r1, #2
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	fa92 f1a2 	rbit	r1, r2
 80053d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053dc:	6011      	str	r1, [r2, #0]
  return result;
 80053de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	fab2 f282 	clz	r2, r2
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f002 021f 	and.w	r2, r2, #31
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f202 	lsl.w	r2, r1, r2
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d184      	bne.n	800530e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005404:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005408:	2b01      	cmp	r3, #1
 800540a:	d105      	bne.n	8005418 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540c:	4b23      	ldr	r3, [pc, #140]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	4a22      	ldr	r2, [pc, #136]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005416:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8242 	beq.w	80058ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800542a:	4b1c      	ldr	r3, [pc, #112]	; (800549c <HAL_RCC_OscConfig+0xc58>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b08      	cmp	r3, #8
 8005434:	f000 8213 	beq.w	800585e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b02      	cmp	r3, #2
 8005446:	f040 8162 	bne.w	800570e <HAL_RCC_OscConfig+0xeca>
 800544a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005452:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	fa93 f2a3 	rbit	r2, r3
 8005466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800546e:	601a      	str	r2, [r3, #0]
  return result;
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005478:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fc fe1e 	bl	80020d0 <HAL_GetTick>
 8005494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005498:	e00c      	b.n	80054b4 <HAL_RCC_OscConfig+0xc70>
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc fe16 	bl	80020d0 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e1fd      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
 80054b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	fa93 f2a3 	rbit	r2, r3
 80054d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054d8:	601a      	str	r2, [r3, #0]
  return result;
 80054da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e4:	fab3 f383 	clz	r3, r3
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <HAL_RCC_OscConfig+0xcba>
 80054f8:	4bb0      	ldr	r3, [pc, #704]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	e027      	b.n	800554e <HAL_RCC_OscConfig+0xd0a>
 80054fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005502:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800550a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800552c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005536:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	fa93 f2a3 	rbit	r2, r3
 8005540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005544:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	4b9c      	ldr	r3, [pc, #624]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005552:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005556:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800555a:	6011      	str	r1, [r2, #0]
 800555c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005560:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	fa92 f1a2 	rbit	r1, r2
 800556a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800556e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005572:	6011      	str	r1, [r2, #0]
  return result;
 8005574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005578:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	fab2 f282 	clz	r2, r2
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	f042 0220 	orr.w	r2, r2, #32
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	f002 021f 	and.w	r2, r2, #31
 800558e:	2101      	movs	r1, #1
 8005590:	fa01 f202 	lsl.w	r2, r1, r2
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d182      	bne.n	80054a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559a:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	430b      	orrs	r3, r1
 80055bc:	497f      	ldr	r1, [pc, #508]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]
 80055c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	fa93 f2a3 	rbit	r2, r3
 80055de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055e6:	601a      	str	r2, [r3, #0]
  return result;
 80055e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	461a      	mov	r2, r3
 8005604:	2301      	movs	r3, #1
 8005606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fc fd62 	bl	80020d0 <HAL_GetTick>
 800560c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005610:	e009      	b.n	8005626 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005612:	f7fc fd5d 	bl	80020d0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e144      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
 8005626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800562e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	fa93 f2a3 	rbit	r2, r3
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800564a:	601a      	str	r2, [r3, #0]
  return result;
 800564c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005650:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_RCC_OscConfig+0xe2c>
 800566a:	4b54      	ldr	r3, [pc, #336]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	e027      	b.n	80056c0 <HAL_RCC_OscConfig+0xe7c>
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800567c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fa93 f2a3 	rbit	r2, r3
 800568c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005690:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800569e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	fa93 f2a3 	rbit	r2, r3
 80056b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80056c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	fa92 f1a2 	rbit	r1, r2
 80056dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056e4:	6011      	str	r1, [r2, #0]
  return result;
 80056e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	fab2 f282 	clz	r2, r2
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	f042 0220 	orr.w	r2, r2, #32
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	f002 021f 	and.w	r2, r2, #31
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f202 	lsl.w	r2, r1, r2
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d082      	beq.n	8005612 <HAL_RCC_OscConfig+0xdce>
 800570c:	e0cf      	b.n	80058ae <HAL_RCC_OscConfig+0x106a>
 800570e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005712:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800571a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005720:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	fa93 f2a3 	rbit	r2, r3
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005732:	601a      	str	r2, [r3, #0]
  return result;
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800573c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573e:	fab3 f383 	clz	r3, r3
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005748:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	461a      	mov	r2, r3
 8005750:	2300      	movs	r3, #0
 8005752:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fc fcbc 	bl	80020d0 <HAL_GetTick>
 8005758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575c:	e009      	b.n	8005772 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575e:	f7fc fcb7 	bl	80020d0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e09e      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800577a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800577e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005784:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	fa93 f2a3 	rbit	r2, r3
 800578e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005792:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005796:	601a      	str	r2, [r3, #0]
  return result;
 8005798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d104      	bne.n	80057c0 <HAL_RCC_OscConfig+0xf7c>
 80057b6:	4b01      	ldr	r3, [pc, #4]	; (80057bc <HAL_RCC_OscConfig+0xf78>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	e029      	b.n	8005810 <HAL_RCC_OscConfig+0xfcc>
 80057bc:	40021000 	.word	0x40021000
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	fa93 f2a3 	rbit	r2, r3
 80057dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	fa93 f2a3 	rbit	r2, r3
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <HAL_RCC_OscConfig+0x1078>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005814:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005822:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	fa92 f1a2 	rbit	r1, r2
 800582c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005830:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005834:	6011      	str	r1, [r2, #0]
  return result;
 8005836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800583a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	fab2 f282 	clz	r2, r2
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	f042 0220 	orr.w	r2, r2, #32
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f002 021f 	and.w	r2, r2, #31
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d180      	bne.n	800575e <HAL_RCC_OscConfig+0xf1a>
 800585c:	e027      	b.n	80058ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e01e      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <HAL_RCC_OscConfig+0x1078>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800587a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800587e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	429a      	cmp	r2, r3
 8005890:	d10b      	bne.n	80058aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005892:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800589a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d001      	beq.n	80058ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000

080058c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b09e      	sub	sp, #120	; 0x78
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e162      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d8:	4b90      	ldr	r3, [pc, #576]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d910      	bls.n	8005908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b8d      	ldr	r3, [pc, #564]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 0207 	bic.w	r2, r3, #7
 80058ee:	498b      	ldr	r1, [pc, #556]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e14a      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005914:	4b82      	ldr	r3, [pc, #520]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	497f      	ldr	r1, [pc, #508]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80dc 	beq.w	8005aec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d13c      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xf6>
 800593c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005944:	fa93 f3a3 	rbit	r3, r3
 8005948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594c:	fab3 f383 	clz	r3, r3
 8005950:	b2db      	uxtb	r3, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d102      	bne.n	8005966 <HAL_RCC_ClockConfig+0xa6>
 8005960:	4b6f      	ldr	r3, [pc, #444]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	e00f      	b.n	8005986 <HAL_RCC_ClockConfig+0xc6>
 8005966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800596a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800596e:	fa93 f3a3 	rbit	r3, r3
 8005972:	667b      	str	r3, [r7, #100]	; 0x64
 8005974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005978:	663b      	str	r3, [r7, #96]	; 0x60
 800597a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800597c:	fa93 f3a3 	rbit	r3, r3
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005982:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800598a:	65ba      	str	r2, [r7, #88]	; 0x58
 800598c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800598e:	fa92 f2a2 	rbit	r2, r2
 8005992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005996:	fab2 f282 	clz	r2, r2
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	f042 0220 	orr.w	r2, r2, #32
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	f002 021f 	and.w	r2, r2, #31
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d17b      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e0f3      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d13c      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x178>
 80059be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x128>
 80059e2:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	e00f      	b.n	8005a08 <HAL_RCC_ClockConfig+0x148>
 80059e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	fa93 f3a3 	rbit	r3, r3
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
 80059f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	fa93 f3a3 	rbit	r3, r3
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	4b46      	ldr	r3, [pc, #280]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a10:	fa92 f2a2 	rbit	r2, r2
 8005a14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a18:	fab2 f282 	clz	r2, r2
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	f042 0220 	orr.w	r2, r2, #32
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	f002 021f 	and.w	r2, r2, #31
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13a      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0b2      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a46:	fab3 f383 	clz	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d102      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x1a0>
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	e00d      	b.n	8005a7c <HAL_RCC_ClockConfig+0x1bc>
 8005a60:	2302      	movs	r3, #2
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	623b      	str	r3, [r7, #32]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	fa93 f3a3 	rbit	r3, r3
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	61ba      	str	r2, [r7, #24]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	fa92 f2a2 	rbit	r2, r2
 8005a86:	617a      	str	r2, [r7, #20]
  return result;
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	fab2 f282 	clz	r2, r2
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	f042 0220 	orr.w	r2, r2, #32
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f002 021f 	and.w	r2, r2, #31
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e079      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f023 0203 	bic.w	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	491a      	ldr	r1, [pc, #104]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005abc:	f7fc fb08 	bl	80020d0 <HAL_GetTick>
 8005ac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac4:	f7fc fb04 	bl	80020d0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e061      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <HAL_RCC_ClockConfig+0x260>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 020c 	and.w	r2, r3, #12
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1eb      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d214      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 0207 	bic.w	r2, r3, #7
 8005b02:	4906      	ldr	r1, [pc, #24]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <HAL_RCC_ClockConfig+0x25c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e040      	b.n	8005b9e <HAL_RCC_ClockConfig+0x2de>
 8005b1c:	40022000 	.word	0x40022000
 8005b20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	491a      	ldr	r1, [pc, #104]	; (8005ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4e:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4912      	ldr	r1, [pc, #72]	; (8005ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b62:	f000 f829 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005b66:	4601      	mov	r1, r0
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b70:	22f0      	movs	r2, #240	; 0xf0
 8005b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	fa92 f2a2 	rbit	r2, r2
 8005b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	fab2 f282 	clz	r2, r2
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	40d3      	lsrs	r3, r2
 8005b86:	4a09      	ldr	r2, [pc, #36]	; (8005bac <HAL_RCC_ClockConfig+0x2ec>)
 8005b88:	5cd3      	ldrb	r3, [r2, r3]
 8005b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <HAL_RCC_ClockConfig+0x2f0>)
 8005b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_RCC_ClockConfig+0x2f4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fc fa56 	bl	8002048 <HAL_InitTick>
  
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3778      	adds	r7, #120	; 0x78
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	0800cf60 	.word	0x0800cf60
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	20000004 	.word	0x20000004

08005bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b08b      	sub	sp, #44	; 0x2c
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005bd2:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d002      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x30>
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d003      	beq.n	8005bee <HAL_RCC_GetSysClockFreq+0x36>
 8005be6:	e03c      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bea:	623b      	str	r3, [r7, #32]
      break;
 8005bec:	e03c      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005bf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	fa92 f2a2 	rbit	r2, r2
 8005c00:	607a      	str	r2, [r7, #4]
  return result;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	fab2 f282 	clz	r2, r2
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	40d3      	lsrs	r3, r2
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c0e:	5cd3      	ldrb	r3, [r2, r3]
 8005c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c12:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	fa92 f2a2 	rbit	r2, r2
 8005c24:	60fa      	str	r2, [r7, #12]
  return result;
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	fab2 f282 	clz	r2, r2
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	40d3      	lsrs	r3, r2
 8005c30:	4a14      	ldr	r2, [pc, #80]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c40:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	e004      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	623b      	str	r3, [r7, #32]
      break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c64:	623b      	str	r3, [r7, #32]
      break;
 8005c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c68:	6a3b      	ldr	r3, [r7, #32]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	372c      	adds	r7, #44	; 0x2c
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	007a1200 	.word	0x007a1200
 8005c80:	0800cf78 	.word	0x0800cf78
 8005c84:	0800cf88 	.word	0x0800cf88
 8005c88:	003d0900 	.word	0x003d0900

08005c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005caa:	f7ff ffef 	bl	8005c8c <HAL_RCC_GetHCLKFreq>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	fa92 f2a2 	rbit	r2, r2
 8005cc4:	603a      	str	r2, [r7, #0]
  return result;
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	fab2 f282 	clz	r2, r2
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	40d3      	lsrs	r3, r2
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800cf70 	.word	0x0800cf70

08005ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005cee:	f7ff ffcd 	bl	8005c8c <HAL_RCC_GetHCLKFreq>
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005cfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	fa92 f2a2 	rbit	r2, r2
 8005d08:	603a      	str	r2, [r7, #0]
  return result;
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	fab2 f282 	clz	r2, r2
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	40d3      	lsrs	r3, r2
 8005d14:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005d16:	5cd3      	ldrb	r3, [r2, r3]
 8005d18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	0800cf70 	.word	0x0800cf70

08005d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b092      	sub	sp, #72	; 0x48
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80d4 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d50:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10e      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d5c:	4b4b      	ldr	r3, [pc, #300]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d66:	61d3      	str	r3, [r2, #28]
 8005d68:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7a:	4b45      	ldr	r3, [pc, #276]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d118      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d86:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a41      	ldr	r2, [pc, #260]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d92:	f7fc f99d 	bl	80020d0 <HAL_GetTick>
 8005d96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9a:	f7fc f999 	bl	80020d0 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b64      	cmp	r3, #100	; 0x64
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e169      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db8:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8084 	beq.w	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d07c      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	461a      	mov	r2, r3
 8005e02:	2301      	movs	r3, #1
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e2a:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04b      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fc f949 	bl	80020d0 <HAL_GetTick>
 8005e3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e40:	e00a      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fc f945 	bl	80020d0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e113      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	2302      	movs	r3, #2
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	fa93 f3a3 	rbit	r3, r3
 8005e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e72:	fab3 f383 	clz	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f043 0302 	orr.w	r3, r3, #2
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d108      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e86:	4b01      	ldr	r3, [pc, #4]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	e00d      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40007000 	.word	0x40007000
 8005e94:	10908100 	.word	0x10908100
 8005e98:	2302      	movs	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	4b78      	ldr	r3, [pc, #480]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	613a      	str	r2, [r7, #16]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	fa92 f2a2 	rbit	r2, r2
 8005eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	fab2 f282 	clz	r2, r2
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	f002 021f 	and.w	r2, r2, #31
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0b7      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ed2:	4b6d      	ldr	r3, [pc, #436]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	496a      	ldr	r1, [pc, #424]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eec:	4b66      	ldr	r3, [pc, #408]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f04:	4b60      	ldr	r3, [pc, #384]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f023 0203 	bic.w	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	495d      	ldr	r1, [pc, #372]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f22:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	4956      	ldr	r1, [pc, #344]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f40:	4b51      	ldr	r3, [pc, #324]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	494e      	ldr	r1, [pc, #312]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4947      	ldr	r1, [pc, #284]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f7c:	4b42      	ldr	r3, [pc, #264]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	493f      	ldr	r1, [pc, #252]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f023 0220 	bic.w	r2, r3, #32
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	4938      	ldr	r1, [pc, #224]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fb8:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	4930      	ldr	r1, [pc, #192]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4929      	ldr	r1, [pc, #164]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4921      	ldr	r1, [pc, #132]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	491a      	ldr	r1, [pc, #104]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	4912      	ldr	r1, [pc, #72]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800603e:	4313      	orrs	r3, r2
 8006040:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	490b      	ldr	r1, [pc, #44]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605c:	4313      	orrs	r3, r2
 800605e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	4903      	ldr	r1, [pc, #12]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3748      	adds	r7, #72	; 0x48
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e049      	b.n	8006132 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb fe04 	bl	8001cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fa4a 	bl	8006564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x24>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e03c      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b04      	cmp	r3, #4
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start+0x3e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e02f      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x58>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e022      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start+0x72>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	bf14      	ite	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	2300      	moveq	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e015      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x8c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e097      	b.n	8006312 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0xb6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f0:	e023      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xc6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006200:	e01b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0xd6>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	e013      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0xe6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	e00b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b10      	cmp	r3, #16
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xf6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006230:	e003      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fcf4 	bl	8006c30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a33      	ldr	r2, [pc, #204]	; (800631c <HAL_TIM_PWM_Start+0x1e0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_TIM_PWM_Start+0x13e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a32      	ldr	r2, [pc, #200]	; (8006320 <HAL_TIM_PWM_Start+0x1e4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_TIM_PWM_Start+0x13e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <HAL_TIM_PWM_Start+0x1e8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIM_PWM_Start+0x13e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2f      	ldr	r2, [pc, #188]	; (8006328 <HAL_TIM_PWM_Start+0x1ec>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIM_PWM_Start+0x13e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2d      	ldr	r2, [pc, #180]	; (800632c <HAL_TIM_PWM_Start+0x1f0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <HAL_TIM_PWM_Start+0x142>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_TIM_PWM_Start+0x144>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_TIM_PWM_Start+0x1e0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x194>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d013      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x194>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a20      	ldr	r2, [pc, #128]	; (8006330 <HAL_TIM_PWM_Start+0x1f4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x194>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <HAL_TIM_PWM_Start+0x1f8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x194>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIM_PWM_Start+0x1e4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_PWM_Start+0x1e8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d115      	bne.n	80062fc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_TIM_PWM_Start+0x1fc>)
 80062d8:	4013      	ands	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d015      	beq.n	800630e <HAL_TIM_PWM_Start+0x1d2>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d011      	beq.n	800630e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fa:	e008      	b.n	800630e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e000      	b.n	8006310 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	00010007 	.word	0x00010007

0800633c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006356:	2302      	movs	r3, #2
 8006358:	e0ff      	b.n	800655a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b14      	cmp	r3, #20
 8006366:	f200 80f0 	bhi.w	800654a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063c5 	.word	0x080063c5
 8006374:	0800654b 	.word	0x0800654b
 8006378:	0800654b 	.word	0x0800654b
 800637c:	0800654b 	.word	0x0800654b
 8006380:	08006405 	.word	0x08006405
 8006384:	0800654b 	.word	0x0800654b
 8006388:	0800654b 	.word	0x0800654b
 800638c:	0800654b 	.word	0x0800654b
 8006390:	08006447 	.word	0x08006447
 8006394:	0800654b 	.word	0x0800654b
 8006398:	0800654b 	.word	0x0800654b
 800639c:	0800654b 	.word	0x0800654b
 80063a0:	08006487 	.word	0x08006487
 80063a4:	0800654b 	.word	0x0800654b
 80063a8:	0800654b 	.word	0x0800654b
 80063ac:	0800654b 	.word	0x0800654b
 80063b0:	080064c9 	.word	0x080064c9
 80063b4:	0800654b 	.word	0x0800654b
 80063b8:	0800654b 	.word	0x0800654b
 80063bc:	0800654b 	.word	0x0800654b
 80063c0:	08006509 	.word	0x08006509
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f95a 	bl	8006684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0208 	orr.w	r2, r2, #8
 80063de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0204 	bic.w	r2, r2, #4
 80063ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6999      	ldr	r1, [r3, #24]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	619a      	str	r2, [r3, #24]
      break;
 8006402:	e0a5      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f9ca 	bl	80067a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	619a      	str	r2, [r3, #24]
      break;
 8006444:	e084      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fa33 	bl	80068b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0208 	orr.w	r2, r2, #8
 8006460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0204 	bic.w	r2, r2, #4
 8006470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69d9      	ldr	r1, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	61da      	str	r2, [r3, #28]
      break;
 8006484:	e064      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fa9b 	bl	80069c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69d9      	ldr	r1, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	021a      	lsls	r2, r3, #8
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	61da      	str	r2, [r3, #28]
      break;
 80064c6:	e043      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fae4 	bl	8006a9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006506:	e023      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fb28 	bl	8006b64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006548:	e002      	b.n	8006550 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
      break;
 800654e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop

08006564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <TIM_Base_SetConfig+0x104>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00f      	beq.n	800659c <TIM_Base_SetConfig+0x38>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006582:	d00b      	beq.n	800659c <TIM_Base_SetConfig+0x38>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a39      	ldr	r2, [pc, #228]	; (800666c <TIM_Base_SetConfig+0x108>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d007      	beq.n	800659c <TIM_Base_SetConfig+0x38>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a38      	ldr	r2, [pc, #224]	; (8006670 <TIM_Base_SetConfig+0x10c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0x38>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a37      	ldr	r2, [pc, #220]	; (8006674 <TIM_Base_SetConfig+0x110>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d108      	bne.n	80065ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2d      	ldr	r2, [pc, #180]	; (8006668 <TIM_Base_SetConfig+0x104>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01b      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d017      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2a      	ldr	r2, [pc, #168]	; (800666c <TIM_Base_SetConfig+0x108>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a29      	ldr	r2, [pc, #164]	; (8006670 <TIM_Base_SetConfig+0x10c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a28      	ldr	r2, [pc, #160]	; (8006674 <TIM_Base_SetConfig+0x110>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00b      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a27      	ldr	r2, [pc, #156]	; (8006678 <TIM_Base_SetConfig+0x114>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <TIM_Base_SetConfig+0x118>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_Base_SetConfig+0x8a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <TIM_Base_SetConfig+0x11c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d108      	bne.n	8006600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <TIM_Base_SetConfig+0x104>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00f      	beq.n	800664c <TIM_Base_SetConfig+0xe8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <TIM_Base_SetConfig+0x110>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_Base_SetConfig+0xe8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <TIM_Base_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_Base_SetConfig+0xe8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0f      	ldr	r2, [pc, #60]	; (800667c <TIM_Base_SetConfig+0x118>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0xe8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <TIM_Base_SetConfig+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d103      	bne.n	8006654 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	615a      	str	r2, [r3, #20]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a2c      	ldr	r2, [pc, #176]	; (8006790 <TIM_OC1_SetConfig+0x10c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC1_SetConfig+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a2b      	ldr	r2, [pc, #172]	; (8006794 <TIM_OC1_SetConfig+0x110>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC1_SetConfig+0x80>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <TIM_OC1_SetConfig+0x114>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC1_SetConfig+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a29      	ldr	r2, [pc, #164]	; (800679c <TIM_OC1_SetConfig+0x118>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC1_SetConfig+0x80>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <TIM_OC1_SetConfig+0x11c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <TIM_OC1_SetConfig+0x10c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_OC1_SetConfig+0xc2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <TIM_OC1_SetConfig+0x110>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_OC1_SetConfig+0xc2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a19      	ldr	r2, [pc, #100]	; (8006798 <TIM_OC1_SetConfig+0x114>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_OC1_SetConfig+0xc2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a18      	ldr	r2, [pc, #96]	; (800679c <TIM_OC1_SetConfig+0x118>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_OC1_SetConfig+0xc2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <TIM_OC1_SetConfig+0x11c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d111      	bne.n	800676a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0210 	bic.w	r2, r3, #16
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0320 	bic.w	r3, r3, #32
 80067f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a28      	ldr	r2, [pc, #160]	; (80068a4 <TIM_OC2_SetConfig+0x100>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC2_SetConfig+0x6c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <TIM_OC2_SetConfig+0x104>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10d      	bne.n	800682c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <TIM_OC2_SetConfig+0x100>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_OC2_SetConfig+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1c      	ldr	r2, [pc, #112]	; (80068a8 <TIM_OC2_SetConfig+0x104>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_OC2_SetConfig+0xb0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a1b      	ldr	r2, [pc, #108]	; (80068ac <TIM_OC2_SetConfig+0x108>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC2_SetConfig+0xb0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <TIM_OC2_SetConfig+0x10c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC2_SetConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <TIM_OC2_SetConfig+0x110>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d113      	bne.n	800687c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800685a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006862:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40012c00 	.word	0x40012c00
 80068a8:	40013400 	.word	0x40013400
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <TIM_OC3_SetConfig+0xfc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_OC3_SetConfig+0x6a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <TIM_OC3_SetConfig+0x100>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10d      	bne.n	800693e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800693c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <TIM_OC3_SetConfig+0xfc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00f      	beq.n	8006966 <TIM_OC3_SetConfig+0xae>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <TIM_OC3_SetConfig+0x100>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00b      	beq.n	8006966 <TIM_OC3_SetConfig+0xae>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <TIM_OC3_SetConfig+0x104>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d007      	beq.n	8006966 <TIM_OC3_SetConfig+0xae>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <TIM_OC3_SetConfig+0x108>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_OC3_SetConfig+0xae>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <TIM_OC3_SetConfig+0x10c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d113      	bne.n	800698e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800696c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	031b      	lsls	r3, r3, #12
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a18      	ldr	r2, [pc, #96]	; (8006a88 <TIM_OC4_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00f      	beq.n	8006a4c <TIM_OC4_SetConfig+0x84>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <TIM_OC4_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_OC4_SetConfig+0x84>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <TIM_OC4_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_OC4_SetConfig+0x84>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <TIM_OC4_SetConfig+0xcc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC4_SetConfig+0x84>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <TIM_OC4_SetConfig+0xd0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ae0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <TIM_OC5_SetConfig+0xb4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00f      	beq.n	8006b16 <TIM_OC5_SetConfig+0x7a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC5_SetConfig+0xb8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <TIM_OC5_SetConfig+0x7a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <TIM_OC5_SetConfig+0xbc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d007      	beq.n	8006b16 <TIM_OC5_SetConfig+0x7a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <TIM_OC5_SetConfig+0xc0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC5_SetConfig+0x7a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <TIM_OC5_SetConfig+0xc4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d109      	bne.n	8006b2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	621a      	str	r2, [r3, #32]
}
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40013400 	.word	0x40013400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800

08006b64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	051b      	lsls	r3, r3, #20
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <TIM_OC6_SetConfig+0xb8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00f      	beq.n	8006be0 <TIM_OC6_SetConfig+0x7c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a17      	ldr	r2, [pc, #92]	; (8006c20 <TIM_OC6_SetConfig+0xbc>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_OC6_SetConfig+0x7c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <TIM_OC6_SetConfig+0xc0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_OC6_SetConfig+0x7c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <TIM_OC6_SetConfig+0xc4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_OC6_SetConfig+0x7c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a14      	ldr	r2, [pc, #80]	; (8006c2c <TIM_OC6_SetConfig+0xc8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d109      	bne.n	8006bf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	029b      	lsls	r3, r3, #10
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800

08006c30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2201      	movs	r2, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	401a      	ands	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	fa01 f303 	lsl.w	r3, r1, r3
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e063      	b.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d108      	bne.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d06:	d013      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10c      	bne.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40014000 	.word	0x40014000

08006d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e040      	b.n	8006e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb f846 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fbfc 	bl	80075b8 <UART_SetConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e022      	b.n	8006e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fdc4 	bl	8007960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fe4b 	bl	8007aa4 <UART_CheckIdleState>
 8006e0e:	4603      	mov	r3, r0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d132      	bne.n	8006e96 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_UART_Receive_IT+0x24>
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e02b      	b.n	8006e98 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d018      	beq.n	8006e86 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	613b      	str	r3, [r7, #16]
   return(result);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69f9      	ldr	r1, [r7, #28]
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 ff19 	bl	8007cc4 <UART_Start_Receive_IT>
 8006e92:	4603      	mov	r3, r0
 8006e94:	e000      	b.n	8006e98 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d165      	bne.n	8006f82 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_UART_Transmit_DMA+0x22>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e05e      	b.n	8006f84 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2221      	movs	r2, #33	; 0x21
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d027      	beq.n	8006f42 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <HAL_UART_Transmit_DMA+0xec>)
 8006ef8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <HAL_UART_Transmit_DMA+0xf0>)
 8006f00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <HAL_UART_Transmit_DMA+0xf4>)
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	2200      	movs	r2, #0
 8006f10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3328      	adds	r3, #40	; 0x28
 8006f22:	461a      	mov	r2, r3
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	f7fd f8ff 	bl	8004128 <HAL_DMA_Start_IT>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2210      	movs	r2, #16
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e020      	b.n	8006f84 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2240      	movs	r2, #64	; 0x40
 8006f48:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6a:	623a      	str	r2, [r7, #32]
 8006f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	69f9      	ldr	r1, [r7, #28]
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3728      	adds	r7, #40	; 0x28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	08007f41 	.word	0x08007f41
 8006f90:	08007fd5 	.word	0x08007fd5
 8006f94:	08007ff1 	.word	0x08007ff1

08006f98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b0ba      	sub	sp, #232	; 0xe8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d115      	bne.n	8007000 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00f      	beq.n	8007000 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 82ab 	beq.w	800754c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
      }
      return;
 8006ffe:	e2a5      	b.n	800754c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8117 	beq.w	8007238 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800700a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800701a:	4b85      	ldr	r3, [pc, #532]	; (8007230 <HAL_UART_IRQHandler+0x298>)
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 810a 	beq.w	8007238 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d011      	beq.n	8007054 <HAL_UART_IRQHandler+0xbc>
 8007030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2201      	movs	r2, #1
 8007042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800704a:	f043 0201 	orr.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d011      	beq.n	8007084 <HAL_UART_IRQHandler+0xec>
 8007060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2202      	movs	r2, #2
 8007072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707a:	f043 0204 	orr.w	r2, r3, #4
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d011      	beq.n	80070b4 <HAL_UART_IRQHandler+0x11c>
 8007090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2204      	movs	r2, #4
 80070a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070aa:	f043 0202 	orr.w	r2, r3, #2
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d017      	beq.n	80070f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2208      	movs	r2, #8
 80070de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e6:	f043 0208 	orr.w	r2, r3, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <HAL_UART_IRQHandler+0x18a>
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00c      	beq.n	8007122 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8211 	beq.w	8007550 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d007      	beq.n	8007156 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d005      	beq.n	800717a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800716e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007172:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04f      	beq.n	800721a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fe7c 	bl	8007e78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d141      	bne.n	8007212 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3308      	adds	r3, #8
 80071b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1d9      	bne.n	800718e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d013      	beq.n	800720a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e6:	4a13      	ldr	r2, [pc, #76]	; (8007234 <HAL_UART_IRQHandler+0x29c>)
 80071e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fd f832 	bl	8004258 <HAL_DMA_Abort_IT>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d017      	beq.n	800722a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	e00f      	b.n	800722a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9be 	bl	800758c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00b      	b.n	800722a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9ba 	bl	800758c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e007      	b.n	800722a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9b6 	bl	800758c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007228:	e192      	b.n	8007550 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722a:	bf00      	nop
    return;
 800722c:	e190      	b.n	8007550 <HAL_UART_IRQHandler+0x5b8>
 800722e:	bf00      	nop
 8007230:	04000120 	.word	0x04000120
 8007234:	0800806f 	.word	0x0800806f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723c:	2b01      	cmp	r3, #1
 800723e:	f040 814b 	bne.w	80074d8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8144 	beq.w	80074d8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 813d 	beq.w	80074d8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2210      	movs	r2, #16
 8007264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	f040 80b5 	bne.w	80073e0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007282:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8164 	beq.w	8007554 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007296:	429a      	cmp	r2, r3
 8007298:	f080 815c 	bcs.w	8007554 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	f000 8086 	beq.w	80073be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1da      	bne.n	80072b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800730c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007320:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007324:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e1      	bne.n	80072fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800734a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800735c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800735e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007362:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800736a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e3      	bne.n	8007338 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800738c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800738e:	f023 0310 	bic.w	r3, r3, #16
 8007392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80073a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e4      	bne.n	800737e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fc ff14 	bl	80041e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f8e1 	bl	80075a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073de:	e0b9      	b.n	8007554 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80ab 	beq.w	8007558 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80a6 	beq.w	8007558 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800742e:	647b      	str	r3, [r7, #68]	; 0x44
 8007430:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e4      	bne.n	800740c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007466:	633a      	str	r2, [r7, #48]	; 0x30
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e3      	bne.n	8007442 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60fb      	str	r3, [r7, #12]
   return(result);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69b9      	ldr	r1, [r7, #24]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	617b      	str	r3, [r7, #20]
   return(result);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f865 	bl	80075a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074d6:	e03f      	b.n	8007558 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <HAL_UART_IRQHandler+0x56a>
 80074e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 ff9f 	bl	800843e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007500:	e02d      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800750e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01c      	beq.n	800755c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
    }
    return;
 800752a:	e017      	b.n	800755c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	d012      	beq.n	800755e <HAL_UART_IRQHandler+0x5c6>
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00c      	beq.n	800755e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fda8 	bl	800809a <UART_EndTransmit_IT>
    return;
 800754a:	e008      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
      return;
 800754c:	bf00      	nop
 800754e:	e006      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007550:	bf00      	nop
 8007552:	e004      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007554:	bf00      	nop
 8007556:	e002      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_UART_IRQHandler+0x5c6>
    return;
 800755c:	bf00      	nop
  }

}
 800755e:	37e8      	adds	r7, #232	; 0xe8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80075e6:	f023 030c 	bic.w	r3, r3, #12
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	6979      	ldr	r1, [r7, #20]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	430a      	orrs	r2, r1
 800762c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4aa7      	ldr	r2, [pc, #668]	; (80078d0 <UART_SetConfig+0x318>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d120      	bne.n	800767a <UART_SetConfig+0xc2>
 8007638:	4ba6      	ldr	r3, [pc, #664]	; (80078d4 <UART_SetConfig+0x31c>)
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d817      	bhi.n	8007674 <UART_SetConfig+0xbc>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x94>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007669 	.word	0x08007669
 8007654:	0800766f 	.word	0x0800766f
 8007658:	08007663 	.word	0x08007663
 800765c:	2301      	movs	r3, #1
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e0b5      	b.n	80077ce <UART_SetConfig+0x216>
 8007662:	2302      	movs	r3, #2
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e0b2      	b.n	80077ce <UART_SetConfig+0x216>
 8007668:	2304      	movs	r3, #4
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e0af      	b.n	80077ce <UART_SetConfig+0x216>
 800766e:	2308      	movs	r3, #8
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e0ac      	b.n	80077ce <UART_SetConfig+0x216>
 8007674:	2310      	movs	r3, #16
 8007676:	77fb      	strb	r3, [r7, #31]
 8007678:	e0a9      	b.n	80077ce <UART_SetConfig+0x216>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a96      	ldr	r2, [pc, #600]	; (80078d8 <UART_SetConfig+0x320>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d124      	bne.n	80076ce <UART_SetConfig+0x116>
 8007684:	4b93      	ldr	r3, [pc, #588]	; (80078d4 <UART_SetConfig+0x31c>)
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800768c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007690:	d011      	beq.n	80076b6 <UART_SetConfig+0xfe>
 8007692:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007696:	d817      	bhi.n	80076c8 <UART_SetConfig+0x110>
 8007698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800769c:	d011      	beq.n	80076c2 <UART_SetConfig+0x10a>
 800769e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a2:	d811      	bhi.n	80076c8 <UART_SetConfig+0x110>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <UART_SetConfig+0xf8>
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ac:	d006      	beq.n	80076bc <UART_SetConfig+0x104>
 80076ae:	e00b      	b.n	80076c8 <UART_SetConfig+0x110>
 80076b0:	2300      	movs	r3, #0
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e08b      	b.n	80077ce <UART_SetConfig+0x216>
 80076b6:	2302      	movs	r3, #2
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e088      	b.n	80077ce <UART_SetConfig+0x216>
 80076bc:	2304      	movs	r3, #4
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e085      	b.n	80077ce <UART_SetConfig+0x216>
 80076c2:	2308      	movs	r3, #8
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e082      	b.n	80077ce <UART_SetConfig+0x216>
 80076c8:	2310      	movs	r3, #16
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e07f      	b.n	80077ce <UART_SetConfig+0x216>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a82      	ldr	r2, [pc, #520]	; (80078dc <UART_SetConfig+0x324>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d124      	bne.n	8007722 <UART_SetConfig+0x16a>
 80076d8:	4b7e      	ldr	r3, [pc, #504]	; (80078d4 <UART_SetConfig+0x31c>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80076e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80076e4:	d011      	beq.n	800770a <UART_SetConfig+0x152>
 80076e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80076ea:	d817      	bhi.n	800771c <UART_SetConfig+0x164>
 80076ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076f0:	d011      	beq.n	8007716 <UART_SetConfig+0x15e>
 80076f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076f6:	d811      	bhi.n	800771c <UART_SetConfig+0x164>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <UART_SetConfig+0x14c>
 80076fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007700:	d006      	beq.n	8007710 <UART_SetConfig+0x158>
 8007702:	e00b      	b.n	800771c <UART_SetConfig+0x164>
 8007704:	2300      	movs	r3, #0
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e061      	b.n	80077ce <UART_SetConfig+0x216>
 800770a:	2302      	movs	r3, #2
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e05e      	b.n	80077ce <UART_SetConfig+0x216>
 8007710:	2304      	movs	r3, #4
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e05b      	b.n	80077ce <UART_SetConfig+0x216>
 8007716:	2308      	movs	r3, #8
 8007718:	77fb      	strb	r3, [r7, #31]
 800771a:	e058      	b.n	80077ce <UART_SetConfig+0x216>
 800771c:	2310      	movs	r3, #16
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e055      	b.n	80077ce <UART_SetConfig+0x216>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6e      	ldr	r2, [pc, #440]	; (80078e0 <UART_SetConfig+0x328>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d124      	bne.n	8007776 <UART_SetConfig+0x1be>
 800772c:	4b69      	ldr	r3, [pc, #420]	; (80078d4 <UART_SetConfig+0x31c>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007738:	d011      	beq.n	800775e <UART_SetConfig+0x1a6>
 800773a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800773e:	d817      	bhi.n	8007770 <UART_SetConfig+0x1b8>
 8007740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007744:	d011      	beq.n	800776a <UART_SetConfig+0x1b2>
 8007746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800774a:	d811      	bhi.n	8007770 <UART_SetConfig+0x1b8>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <UART_SetConfig+0x1a0>
 8007750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007754:	d006      	beq.n	8007764 <UART_SetConfig+0x1ac>
 8007756:	e00b      	b.n	8007770 <UART_SetConfig+0x1b8>
 8007758:	2300      	movs	r3, #0
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e037      	b.n	80077ce <UART_SetConfig+0x216>
 800775e:	2302      	movs	r3, #2
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e034      	b.n	80077ce <UART_SetConfig+0x216>
 8007764:	2304      	movs	r3, #4
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e031      	b.n	80077ce <UART_SetConfig+0x216>
 800776a:	2308      	movs	r3, #8
 800776c:	77fb      	strb	r3, [r7, #31]
 800776e:	e02e      	b.n	80077ce <UART_SetConfig+0x216>
 8007770:	2310      	movs	r3, #16
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e02b      	b.n	80077ce <UART_SetConfig+0x216>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a5a      	ldr	r2, [pc, #360]	; (80078e4 <UART_SetConfig+0x32c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d124      	bne.n	80077ca <UART_SetConfig+0x212>
 8007780:	4b54      	ldr	r3, [pc, #336]	; (80078d4 <UART_SetConfig+0x31c>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007788:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800778c:	d011      	beq.n	80077b2 <UART_SetConfig+0x1fa>
 800778e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007792:	d817      	bhi.n	80077c4 <UART_SetConfig+0x20c>
 8007794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007798:	d011      	beq.n	80077be <UART_SetConfig+0x206>
 800779a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800779e:	d811      	bhi.n	80077c4 <UART_SetConfig+0x20c>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <UART_SetConfig+0x1f4>
 80077a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a8:	d006      	beq.n	80077b8 <UART_SetConfig+0x200>
 80077aa:	e00b      	b.n	80077c4 <UART_SetConfig+0x20c>
 80077ac:	2300      	movs	r3, #0
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e00d      	b.n	80077ce <UART_SetConfig+0x216>
 80077b2:	2302      	movs	r3, #2
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e00a      	b.n	80077ce <UART_SetConfig+0x216>
 80077b8:	2304      	movs	r3, #4
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e007      	b.n	80077ce <UART_SetConfig+0x216>
 80077be:	2308      	movs	r3, #8
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e004      	b.n	80077ce <UART_SetConfig+0x216>
 80077c4:	2310      	movs	r3, #16
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e001      	b.n	80077ce <UART_SetConfig+0x216>
 80077ca:	2310      	movs	r3, #16
 80077cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d6:	d15b      	bne.n	8007890 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80077d8:	7ffb      	ldrb	r3, [r7, #31]
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d827      	bhi.n	800782e <UART_SetConfig+0x276>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x22c>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	0800781f 	.word	0x0800781f
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
 8007804:	08007827 	.word	0x08007827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fe fa4c 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 800780c:	61b8      	str	r0, [r7, #24]
        break;
 800780e:	e013      	b.n	8007838 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007810:	f7fe fa6a 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
 8007814:	61b8      	str	r0, [r7, #24]
        break;
 8007816:	e00f      	b.n	8007838 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b33      	ldr	r3, [pc, #204]	; (80078e8 <UART_SetConfig+0x330>)
 800781a:	61bb      	str	r3, [r7, #24]
        break;
 800781c:	e00c      	b.n	8007838 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7fe f9cb 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8007822:	61b8      	str	r0, [r7, #24]
        break;
 8007824:	e008      	b.n	8007838 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782a:	61bb      	str	r3, [r7, #24]
        break;
 800782c:	e004      	b.n	8007838 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	77bb      	strb	r3, [r7, #30]
        break;
 8007836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8082 	beq.w	8007944 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	005a      	lsls	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	085b      	lsrs	r3, r3, #1
 800784a:	441a      	add	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d916      	bls.n	800788a <UART_SetConfig+0x2d2>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007862:	d212      	bcs.n	800788a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f023 030f 	bic.w	r3, r3, #15
 800786c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	b29b      	uxth	r3, r3
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	b29a      	uxth	r2, r3
 800787a:	89fb      	ldrh	r3, [r7, #14]
 800787c:	4313      	orrs	r3, r2
 800787e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	89fa      	ldrh	r2, [r7, #14]
 8007886:	60da      	str	r2, [r3, #12]
 8007888:	e05c      	b.n	8007944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	77bb      	strb	r3, [r7, #30]
 800788e:	e059      	b.n	8007944 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007890:	7ffb      	ldrb	r3, [r7, #31]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d835      	bhi.n	8007902 <UART_SetConfig+0x34a>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0x2e4>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078ed 	.word	0x080078ed
 80078a8:	08007903 	.word	0x08007903
 80078ac:	080078f3 	.word	0x080078f3
 80078b0:	08007903 	.word	0x08007903
 80078b4:	08007903 	.word	0x08007903
 80078b8:	08007903 	.word	0x08007903
 80078bc:	080078fb 	.word	0x080078fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fe f9f0 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 80078c4:	61b8      	str	r0, [r7, #24]
        break;
 80078c6:	e021      	b.n	800790c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c8:	f7fe fa0e 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
 80078cc:	61b8      	str	r0, [r7, #24]
        break;
 80078ce:	e01d      	b.n	800790c <UART_SetConfig+0x354>
 80078d0:	40013800 	.word	0x40013800
 80078d4:	40021000 	.word	0x40021000
 80078d8:	40004400 	.word	0x40004400
 80078dc:	40004800 	.word	0x40004800
 80078e0:	40004c00 	.word	0x40004c00
 80078e4:	40005000 	.word	0x40005000
 80078e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078ec:	4b1b      	ldr	r3, [pc, #108]	; (800795c <UART_SetConfig+0x3a4>)
 80078ee:	61bb      	str	r3, [r7, #24]
        break;
 80078f0:	e00c      	b.n	800790c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078f2:	f7fe f961 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 80078f6:	61b8      	str	r0, [r7, #24]
        break;
 80078f8:	e008      	b.n	800790c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fe:	61bb      	str	r3, [r7, #24]
        break;
 8007900:	e004      	b.n	800790c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	77bb      	strb	r3, [r7, #30]
        break;
 800790a:	bf00      	nop
    }

    if (pclk != 0U)
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d018      	beq.n	8007944 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	085a      	lsrs	r2, r3, #1
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	441a      	add	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d909      	bls.n	8007940 <UART_SetConfig+0x388>
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d205      	bcs.n	8007940 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	b29a      	uxth	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	e001      	b.n	8007944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007950:	7fbb      	ldrb	r3, [r7, #30]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	007a1200 	.word	0x007a1200

08007960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01a      	beq.n	8007a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5e:	d10a      	bne.n	8007a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]
  }
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b098      	sub	sp, #96	; 0x60
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ab4:	f7fa fb0c 	bl	80020d0 <HAL_GetTick>
 8007ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d12e      	bne.n	8007b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f88c 	bl	8007bf4 <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d021      	beq.n	8007b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af6:	653b      	str	r3, [r7, #80]	; 0x50
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b00:	647b      	str	r3, [r7, #68]	; 0x44
 8007b02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e062      	b.n	8007bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d149      	bne.n	8007bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f856 	bl	8007bf4 <UART_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d03c      	beq.n	8007bc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e6      	bne.n	8007b4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0301 	bic.w	r3, r3, #1
 8007b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba0:	61fa      	str	r2, [r7, #28]
 8007ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	69b9      	ldr	r1, [r7, #24]
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	617b      	str	r3, [r7, #20]
   return(result);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e011      	b.n	8007bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3758      	adds	r7, #88	; 0x58
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c04:	e049      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d045      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0e:	f7fa fa5f 	bl	80020d0 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d302      	bcc.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e048      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0304 	and.w	r3, r3, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d031      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d110      	bne.n	8007c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2208      	movs	r2, #8
 8007c4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f913 	bl	8007e78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2208      	movs	r2, #8
 8007c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e029      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c74:	d111      	bne.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f8f9 	bl	8007e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e00f      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d0a6      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b097      	sub	sp, #92	; 0x5c
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	d10e      	bne.n	8007d16 <UART_Start_Receive_IT+0x52>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d105      	bne.n	8007d0c <UART_Start_Receive_IT+0x48>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d0a:	e01a      	b.n	8007d42 <UART_Start_Receive_IT+0x7e>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	22ff      	movs	r2, #255	; 0xff
 8007d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d14:	e015      	b.n	8007d42 <UART_Start_Receive_IT+0x7e>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <UART_Start_Receive_IT+0x76>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d104      	bne.n	8007d30 <UART_Start_Receive_IT+0x6c>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	22ff      	movs	r2, #255	; 0xff
 8007d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d2e:	e008      	b.n	8007d42 <UART_Start_Receive_IT+0x7e>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	227f      	movs	r2, #127	; 0x7f
 8007d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d38:	e003      	b.n	8007d42 <UART_Start_Receive_IT+0x7e>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2222      	movs	r2, #34	; 0x22
 8007d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	657b      	str	r3, [r7, #84]	; 0x54
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e5      	bne.n	8007d52 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	d107      	bne.n	8007da0 <UART_Start_Receive_IT+0xdc>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a22      	ldr	r2, [pc, #136]	; (8007e24 <UART_Start_Receive_IT+0x160>)
 8007d9c:	669a      	str	r2, [r3, #104]	; 0x68
 8007d9e:	e002      	b.n	8007da6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4a21      	ldr	r2, [pc, #132]	; (8007e28 <UART_Start_Receive_IT+0x164>)
 8007da4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d019      	beq.n	8007de2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e6      	bne.n	8007dae <UART_Start_Receive_IT+0xea>
 8007de0:	e018      	b.n	8007e14 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	613b      	str	r3, [r7, #16]
   return(result);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f043 0320 	orr.w	r3, r3, #32
 8007df6:	653b      	str	r3, [r7, #80]	; 0x50
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	69f9      	ldr	r1, [r7, #28]
 8007e06:	6a3a      	ldr	r2, [r7, #32]
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e6      	bne.n	8007de2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	375c      	adds	r7, #92	; 0x5c
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	08008297 	.word	0x08008297
 8007e28:	080080ef 	.word	0x080080ef

08007e2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b089      	sub	sp, #36	; 0x24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6979      	ldr	r1, [r7, #20]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e6      	bne.n	8007e34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007e6c:	bf00      	nop
 8007e6e:	3724      	adds	r7, #36	; 0x24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b095      	sub	sp, #84	; 0x54
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e6      	bne.n	8007e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e5      	bne.n	8007eb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d118      	bne.n	8007f20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f023 0310 	bic.w	r3, r3, #16
 8007f02:	647b      	str	r3, [r7, #68]	; 0x44
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6979      	ldr	r1, [r7, #20]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f34:	bf00      	nop
 8007f36:	3754      	adds	r7, #84	; 0x54
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b090      	sub	sp, #64	; 0x40
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d037      	beq.n	8007fc6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e5      	bne.n	8007f5e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	69b9      	ldr	r1, [r7, #24]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e6      	bne.n	8007f92 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fc4:	e002      	b.n	8007fcc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fc8:	f7ff facc 	bl	8007564 <HAL_UART_TxCpltCallback>
}
 8007fcc:	bf00      	nop
 8007fce:	3740      	adds	r7, #64	; 0x40
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fac8 	bl	8007578 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008002:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008016:	2b80      	cmp	r3, #128	; 0x80
 8008018:	d109      	bne.n	800802e <UART_DMAError+0x3e>
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b21      	cmp	r3, #33	; 0x21
 800801e:	d106      	bne.n	800802e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2200      	movs	r2, #0
 8008024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f7ff feff 	bl	8007e2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d109      	bne.n	8008050 <UART_DMAError+0x60>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b22      	cmp	r3, #34	; 0x22
 8008040:	d106      	bne.n	8008050 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800804a:	6978      	ldr	r0, [r7, #20]
 800804c:	f7ff ff14 	bl	8007e78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008056:	f043 0210 	orr.w	r2, r3, #16
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008060:	6978      	ldr	r0, [r7, #20]
 8008062:	f7ff fa93 	bl	800758c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff fa7d 	bl	800758c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b088      	sub	sp, #32
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6979      	ldr	r1, [r7, #20]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	613b      	str	r3, [r7, #16]
   return(result);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fa3f 	bl	8007564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e6:	bf00      	nop
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b09c      	sub	sp, #112	; 0x70
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080fc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008106:	2b22      	cmp	r3, #34	; 0x22
 8008108:	f040 80b9 	bne.w	800827e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008112:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008116:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800811a:	b2d9      	uxtb	r1, r3
 800811c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	400a      	ands	r2, r1
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 809c 	bne.w	800828e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800816a:	66bb      	str	r3, [r7, #104]	; 0x68
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008174:	65bb      	str	r3, [r7, #88]	; 0x58
 8008176:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800817a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	f023 0301 	bic.w	r3, r3, #1
 800819e:	667b      	str	r3, [r7, #100]	; 0x64
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081a8:	647a      	str	r2, [r7, #68]	; 0x44
 80081aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	623b      	str	r3, [r7, #32]
   return(result);
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081f2:	663b      	str	r3, [r7, #96]	; 0x60
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30
 80081fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e6      	bne.n	80081de <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	2b01      	cmp	r3, #1
 8008216:	d12e      	bne.n	8008276 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60fb      	str	r3, [r7, #12]
   return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	617b      	str	r3, [r7, #20]
   return(result);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e6      	bne.n	800821e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b10      	cmp	r3, #16
 800825c:	d103      	bne.n	8008266 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2210      	movs	r2, #16
 8008264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff f996 	bl	80075a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008274:	e00b      	b.n	800828e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7f9 f81c 	bl	80012b4 <HAL_UART_RxCpltCallback>
}
 800827c:	e007      	b.n	800828e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	699a      	ldr	r2, [r3, #24]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0208 	orr.w	r2, r2, #8
 800828c:	619a      	str	r2, [r3, #24]
}
 800828e:	bf00      	nop
 8008290:	3770      	adds	r7, #112	; 0x70
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b09c      	sub	sp, #112	; 0x70
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ae:	2b22      	cmp	r3, #34	; 0x22
 80082b0:	f040 80b9 	bne.w	8008426 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80082c4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80082c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082cc:	4013      	ands	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d8:	1c9a      	adds	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f040 809c 	bne.w	8008436 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800830c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008312:	667b      	str	r3, [r7, #100]	; 0x64
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831c:	657b      	str	r3, [r7, #84]	; 0x54
 800831e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008322:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800832a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e6      	bne.n	80082fe <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	663b      	str	r3, [r7, #96]	; 0x60
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3308      	adds	r3, #8
 800834e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008350:	643a      	str	r2, [r7, #64]	; 0x40
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	61fb      	str	r3, [r7, #28]
   return(result);
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800839a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e6      	bne.n	8008386 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d12e      	bne.n	800841e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f023 0310 	bic.w	r3, r3, #16
 80083da:	65bb      	str	r3, [r7, #88]	; 0x58
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6979      	ldr	r1, [r7, #20]
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	613b      	str	r3, [r7, #16]
   return(result);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e6      	bne.n	80083c6 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b10      	cmp	r3, #16
 8008404:	d103      	bne.n	800840e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2210      	movs	r2, #16
 800840c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff f8c2 	bl	80075a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800841c:	e00b      	b.n	8008436 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f8 ff48 	bl	80012b4 <HAL_UART_RxCpltCallback>
}
 8008424:	e007      	b.n	8008436 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	699a      	ldr	r2, [r3, #24]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0208 	orr.w	r2, r2, #8
 8008434:	619a      	str	r2, [r3, #24]
}
 8008436:	bf00      	nop
 8008438:	3770      	adds	r7, #112	; 0x70
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <__errno>:
 8008454:	4b01      	ldr	r3, [pc, #4]	; (800845c <__errno+0x8>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000000c 	.word	0x2000000c

08008460 <__libc_init_array>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4d0d      	ldr	r5, [pc, #52]	; (8008498 <__libc_init_array+0x38>)
 8008464:	4c0d      	ldr	r4, [pc, #52]	; (800849c <__libc_init_array+0x3c>)
 8008466:	1b64      	subs	r4, r4, r5
 8008468:	10a4      	asrs	r4, r4, #2
 800846a:	2600      	movs	r6, #0
 800846c:	42a6      	cmp	r6, r4
 800846e:	d109      	bne.n	8008484 <__libc_init_array+0x24>
 8008470:	4d0b      	ldr	r5, [pc, #44]	; (80084a0 <__libc_init_array+0x40>)
 8008472:	4c0c      	ldr	r4, [pc, #48]	; (80084a4 <__libc_init_array+0x44>)
 8008474:	f004 fd1e 	bl	800ceb4 <_init>
 8008478:	1b64      	subs	r4, r4, r5
 800847a:	10a4      	asrs	r4, r4, #2
 800847c:	2600      	movs	r6, #0
 800847e:	42a6      	cmp	r6, r4
 8008480:	d105      	bne.n	800848e <__libc_init_array+0x2e>
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	f855 3b04 	ldr.w	r3, [r5], #4
 8008488:	4798      	blx	r3
 800848a:	3601      	adds	r6, #1
 800848c:	e7ee      	b.n	800846c <__libc_init_array+0xc>
 800848e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008492:	4798      	blx	r3
 8008494:	3601      	adds	r6, #1
 8008496:	e7f2      	b.n	800847e <__libc_init_array+0x1e>
 8008498:	0800d444 	.word	0x0800d444
 800849c:	0800d444 	.word	0x0800d444
 80084a0:	0800d444 	.word	0x0800d444
 80084a4:	0800d448 	.word	0x0800d448

080084a8 <memset>:
 80084a8:	4402      	add	r2, r0
 80084aa:	4603      	mov	r3, r0
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d100      	bne.n	80084b2 <memset+0xa>
 80084b0:	4770      	bx	lr
 80084b2:	f803 1b01 	strb.w	r1, [r3], #1
 80084b6:	e7f9      	b.n	80084ac <memset+0x4>

080084b8 <__cvt>:
 80084b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	ec55 4b10 	vmov	r4, r5, d0
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	460e      	mov	r6, r1
 80084c4:	4619      	mov	r1, r3
 80084c6:	462b      	mov	r3, r5
 80084c8:	bfbb      	ittet	lt
 80084ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084ce:	461d      	movlt	r5, r3
 80084d0:	2300      	movge	r3, #0
 80084d2:	232d      	movlt	r3, #45	; 0x2d
 80084d4:	700b      	strb	r3, [r1, #0]
 80084d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084dc:	4691      	mov	r9, r2
 80084de:	f023 0820 	bic.w	r8, r3, #32
 80084e2:	bfbc      	itt	lt
 80084e4:	4622      	movlt	r2, r4
 80084e6:	4614      	movlt	r4, r2
 80084e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ec:	d005      	beq.n	80084fa <__cvt+0x42>
 80084ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084f2:	d100      	bne.n	80084f6 <__cvt+0x3e>
 80084f4:	3601      	adds	r6, #1
 80084f6:	2102      	movs	r1, #2
 80084f8:	e000      	b.n	80084fc <__cvt+0x44>
 80084fa:	2103      	movs	r1, #3
 80084fc:	ab03      	add	r3, sp, #12
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	ab02      	add	r3, sp, #8
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	ec45 4b10 	vmov	d0, r4, r5
 8008508:	4653      	mov	r3, sl
 800850a:	4632      	mov	r2, r6
 800850c:	f001 fefc 	bl	800a308 <_dtoa_r>
 8008510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008514:	4607      	mov	r7, r0
 8008516:	d102      	bne.n	800851e <__cvt+0x66>
 8008518:	f019 0f01 	tst.w	r9, #1
 800851c:	d022      	beq.n	8008564 <__cvt+0xac>
 800851e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008522:	eb07 0906 	add.w	r9, r7, r6
 8008526:	d110      	bne.n	800854a <__cvt+0x92>
 8008528:	783b      	ldrb	r3, [r7, #0]
 800852a:	2b30      	cmp	r3, #48	; 0x30
 800852c:	d10a      	bne.n	8008544 <__cvt+0x8c>
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f8 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800853a:	b918      	cbnz	r0, 8008544 <__cvt+0x8c>
 800853c:	f1c6 0601 	rsb	r6, r6, #1
 8008540:	f8ca 6000 	str.w	r6, [sl]
 8008544:	f8da 3000 	ldr.w	r3, [sl]
 8008548:	4499      	add	r9, r3
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008556:	b108      	cbz	r0, 800855c <__cvt+0xa4>
 8008558:	f8cd 900c 	str.w	r9, [sp, #12]
 800855c:	2230      	movs	r2, #48	; 0x30
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	454b      	cmp	r3, r9
 8008562:	d307      	bcc.n	8008574 <__cvt+0xbc>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008568:	1bdb      	subs	r3, r3, r7
 800856a:	4638      	mov	r0, r7
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	b004      	add	sp, #16
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008574:	1c59      	adds	r1, r3, #1
 8008576:	9103      	str	r1, [sp, #12]
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	e7f0      	b.n	800855e <__cvt+0xa6>

0800857c <__exponent>:
 800857c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800857e:	4603      	mov	r3, r0
 8008580:	2900      	cmp	r1, #0
 8008582:	bfb8      	it	lt
 8008584:	4249      	neglt	r1, r1
 8008586:	f803 2b02 	strb.w	r2, [r3], #2
 800858a:	bfb4      	ite	lt
 800858c:	222d      	movlt	r2, #45	; 0x2d
 800858e:	222b      	movge	r2, #43	; 0x2b
 8008590:	2909      	cmp	r1, #9
 8008592:	7042      	strb	r2, [r0, #1]
 8008594:	dd2a      	ble.n	80085ec <__exponent+0x70>
 8008596:	f10d 0407 	add.w	r4, sp, #7
 800859a:	46a4      	mov	ip, r4
 800859c:	270a      	movs	r7, #10
 800859e:	46a6      	mov	lr, r4
 80085a0:	460a      	mov	r2, r1
 80085a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085a6:	fb07 1516 	mls	r5, r7, r6, r1
 80085aa:	3530      	adds	r5, #48	; 0x30
 80085ac:	2a63      	cmp	r2, #99	; 0x63
 80085ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80085b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085b6:	4631      	mov	r1, r6
 80085b8:	dcf1      	bgt.n	800859e <__exponent+0x22>
 80085ba:	3130      	adds	r1, #48	; 0x30
 80085bc:	f1ae 0502 	sub.w	r5, lr, #2
 80085c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085c4:	1c44      	adds	r4, r0, #1
 80085c6:	4629      	mov	r1, r5
 80085c8:	4561      	cmp	r1, ip
 80085ca:	d30a      	bcc.n	80085e2 <__exponent+0x66>
 80085cc:	f10d 0209 	add.w	r2, sp, #9
 80085d0:	eba2 020e 	sub.w	r2, r2, lr
 80085d4:	4565      	cmp	r5, ip
 80085d6:	bf88      	it	hi
 80085d8:	2200      	movhi	r2, #0
 80085da:	4413      	add	r3, r2
 80085dc:	1a18      	subs	r0, r3, r0
 80085de:	b003      	add	sp, #12
 80085e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80085ea:	e7ed      	b.n	80085c8 <__exponent+0x4c>
 80085ec:	2330      	movs	r3, #48	; 0x30
 80085ee:	3130      	adds	r1, #48	; 0x30
 80085f0:	7083      	strb	r3, [r0, #2]
 80085f2:	70c1      	strb	r1, [r0, #3]
 80085f4:	1d03      	adds	r3, r0, #4
 80085f6:	e7f1      	b.n	80085dc <__exponent+0x60>

080085f8 <_printf_float>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	ed2d 8b02 	vpush	{d8}
 8008600:	b08d      	sub	sp, #52	; 0x34
 8008602:	460c      	mov	r4, r1
 8008604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008608:	4616      	mov	r6, r2
 800860a:	461f      	mov	r7, r3
 800860c:	4605      	mov	r5, r0
 800860e:	f003 f98f 	bl	800b930 <_localeconv_r>
 8008612:	f8d0 a000 	ldr.w	sl, [r0]
 8008616:	4650      	mov	r0, sl
 8008618:	f7f7 fdda 	bl	80001d0 <strlen>
 800861c:	2300      	movs	r3, #0
 800861e:	930a      	str	r3, [sp, #40]	; 0x28
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	f8d8 3000 	ldr.w	r3, [r8]
 8008628:	f894 b018 	ldrb.w	fp, [r4, #24]
 800862c:	3307      	adds	r3, #7
 800862e:	f023 0307 	bic.w	r3, r3, #7
 8008632:	f103 0208 	add.w	r2, r3, #8
 8008636:	f8c8 2000 	str.w	r2, [r8]
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008650:	ee08 0a10 	vmov	s16, r0
 8008654:	4b9f      	ldr	r3, [pc, #636]	; (80088d4 <_printf_float+0x2dc>)
 8008656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800865a:	f04f 32ff 	mov.w	r2, #4294967295
 800865e:	f7f8 fa65 	bl	8000b2c <__aeabi_dcmpun>
 8008662:	bb88      	cbnz	r0, 80086c8 <_printf_float+0xd0>
 8008664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008668:	4b9a      	ldr	r3, [pc, #616]	; (80088d4 <_printf_float+0x2dc>)
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	f7f8 fa3f 	bl	8000af0 <__aeabi_dcmple>
 8008672:	bb48      	cbnz	r0, 80086c8 <_printf_float+0xd0>
 8008674:	2200      	movs	r2, #0
 8008676:	2300      	movs	r3, #0
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8008680:	b110      	cbz	r0, 8008688 <_printf_float+0x90>
 8008682:	232d      	movs	r3, #45	; 0x2d
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	4b93      	ldr	r3, [pc, #588]	; (80088d8 <_printf_float+0x2e0>)
 800868a:	4894      	ldr	r0, [pc, #592]	; (80088dc <_printf_float+0x2e4>)
 800868c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008690:	bf94      	ite	ls
 8008692:	4698      	movls	r8, r3
 8008694:	4680      	movhi	r8, r0
 8008696:	2303      	movs	r3, #3
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	f023 0204 	bic.w	r2, r3, #4
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	f04f 0900 	mov.w	r9, #0
 80086a6:	9700      	str	r7, [sp, #0]
 80086a8:	4633      	mov	r3, r6
 80086aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f9d8 	bl	8008a64 <_printf_common>
 80086b4:	3001      	adds	r0, #1
 80086b6:	f040 8090 	bne.w	80087da <_printf_float+0x1e2>
 80086ba:	f04f 30ff 	mov.w	r0, #4294967295
 80086be:	b00d      	add	sp, #52	; 0x34
 80086c0:	ecbd 8b02 	vpop	{d8}
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c8:	4642      	mov	r2, r8
 80086ca:	464b      	mov	r3, r9
 80086cc:	4640      	mov	r0, r8
 80086ce:	4649      	mov	r1, r9
 80086d0:	f7f8 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80086d4:	b140      	cbz	r0, 80086e8 <_printf_float+0xf0>
 80086d6:	464b      	mov	r3, r9
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfbc      	itt	lt
 80086dc:	232d      	movlt	r3, #45	; 0x2d
 80086de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086e2:	487f      	ldr	r0, [pc, #508]	; (80088e0 <_printf_float+0x2e8>)
 80086e4:	4b7f      	ldr	r3, [pc, #508]	; (80088e4 <_printf_float+0x2ec>)
 80086e6:	e7d1      	b.n	800868c <_printf_float+0x94>
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086ee:	9206      	str	r2, [sp, #24]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	d13f      	bne.n	8008774 <_printf_float+0x17c>
 80086f4:	2306      	movs	r3, #6
 80086f6:	6063      	str	r3, [r4, #4]
 80086f8:	9b05      	ldr	r3, [sp, #20]
 80086fa:	6861      	ldr	r1, [r4, #4]
 80086fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008700:	2300      	movs	r3, #0
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	ab0a      	add	r3, sp, #40	; 0x28
 8008706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800870a:	ab09      	add	r3, sp, #36	; 0x24
 800870c:	ec49 8b10 	vmov	d0, r8, r9
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008718:	4628      	mov	r0, r5
 800871a:	f7ff fecd 	bl	80084b8 <__cvt>
 800871e:	9b06      	ldr	r3, [sp, #24]
 8008720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008722:	2b47      	cmp	r3, #71	; 0x47
 8008724:	4680      	mov	r8, r0
 8008726:	d108      	bne.n	800873a <_printf_float+0x142>
 8008728:	1cc8      	adds	r0, r1, #3
 800872a:	db02      	blt.n	8008732 <_printf_float+0x13a>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	4299      	cmp	r1, r3
 8008730:	dd41      	ble.n	80087b6 <_printf_float+0x1be>
 8008732:	f1ab 0b02 	sub.w	fp, fp, #2
 8008736:	fa5f fb8b 	uxtb.w	fp, fp
 800873a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800873e:	d820      	bhi.n	8008782 <_printf_float+0x18a>
 8008740:	3901      	subs	r1, #1
 8008742:	465a      	mov	r2, fp
 8008744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008748:	9109      	str	r1, [sp, #36]	; 0x24
 800874a:	f7ff ff17 	bl	800857c <__exponent>
 800874e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008750:	1813      	adds	r3, r2, r0
 8008752:	2a01      	cmp	r2, #1
 8008754:	4681      	mov	r9, r0
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	dc02      	bgt.n	8008760 <_printf_float+0x168>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	07d2      	lsls	r2, r2, #31
 800875e:	d501      	bpl.n	8008764 <_printf_float+0x16c>
 8008760:	3301      	adds	r3, #1
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008768:	2b00      	cmp	r3, #0
 800876a:	d09c      	beq.n	80086a6 <_printf_float+0xae>
 800876c:	232d      	movs	r3, #45	; 0x2d
 800876e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008772:	e798      	b.n	80086a6 <_printf_float+0xae>
 8008774:	9a06      	ldr	r2, [sp, #24]
 8008776:	2a47      	cmp	r2, #71	; 0x47
 8008778:	d1be      	bne.n	80086f8 <_printf_float+0x100>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1bc      	bne.n	80086f8 <_printf_float+0x100>
 800877e:	2301      	movs	r3, #1
 8008780:	e7b9      	b.n	80086f6 <_printf_float+0xfe>
 8008782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008786:	d118      	bne.n	80087ba <_printf_float+0x1c2>
 8008788:	2900      	cmp	r1, #0
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	dd0b      	ble.n	80087a6 <_printf_float+0x1ae>
 800878e:	6121      	str	r1, [r4, #16]
 8008790:	b913      	cbnz	r3, 8008798 <_printf_float+0x1a0>
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	07d0      	lsls	r0, r2, #31
 8008796:	d502      	bpl.n	800879e <_printf_float+0x1a6>
 8008798:	3301      	adds	r3, #1
 800879a:	440b      	add	r3, r1
 800879c:	6123      	str	r3, [r4, #16]
 800879e:	65a1      	str	r1, [r4, #88]	; 0x58
 80087a0:	f04f 0900 	mov.w	r9, #0
 80087a4:	e7de      	b.n	8008764 <_printf_float+0x16c>
 80087a6:	b913      	cbnz	r3, 80087ae <_printf_float+0x1b6>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	07d2      	lsls	r2, r2, #31
 80087ac:	d501      	bpl.n	80087b2 <_printf_float+0x1ba>
 80087ae:	3302      	adds	r3, #2
 80087b0:	e7f4      	b.n	800879c <_printf_float+0x1a4>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7f2      	b.n	800879c <_printf_float+0x1a4>
 80087b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087bc:	4299      	cmp	r1, r3
 80087be:	db05      	blt.n	80087cc <_printf_float+0x1d4>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	6121      	str	r1, [r4, #16]
 80087c4:	07d8      	lsls	r0, r3, #31
 80087c6:	d5ea      	bpl.n	800879e <_printf_float+0x1a6>
 80087c8:	1c4b      	adds	r3, r1, #1
 80087ca:	e7e7      	b.n	800879c <_printf_float+0x1a4>
 80087cc:	2900      	cmp	r1, #0
 80087ce:	bfd4      	ite	le
 80087d0:	f1c1 0202 	rsble	r2, r1, #2
 80087d4:	2201      	movgt	r2, #1
 80087d6:	4413      	add	r3, r2
 80087d8:	e7e0      	b.n	800879c <_printf_float+0x1a4>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	055a      	lsls	r2, r3, #21
 80087de:	d407      	bmi.n	80087f0 <_printf_float+0x1f8>
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	4642      	mov	r2, r8
 80087e4:	4631      	mov	r1, r6
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b8      	blx	r7
 80087ea:	3001      	adds	r0, #1
 80087ec:	d12c      	bne.n	8008848 <_printf_float+0x250>
 80087ee:	e764      	b.n	80086ba <_printf_float+0xc2>
 80087f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087f4:	f240 80e0 	bls.w	80089b8 <_printf_float+0x3c0>
 80087f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087fc:	2200      	movs	r2, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	f7f8 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8008804:	2800      	cmp	r0, #0
 8008806:	d034      	beq.n	8008872 <_printf_float+0x27a>
 8008808:	4a37      	ldr	r2, [pc, #220]	; (80088e8 <_printf_float+0x2f0>)
 800880a:	2301      	movs	r3, #1
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	f43f af51 	beq.w	80086ba <_printf_float+0xc2>
 8008818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800881c:	429a      	cmp	r2, r3
 800881e:	db02      	blt.n	8008826 <_printf_float+0x22e>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	07d8      	lsls	r0, r3, #31
 8008824:	d510      	bpl.n	8008848 <_printf_float+0x250>
 8008826:	ee18 3a10 	vmov	r3, s16
 800882a:	4652      	mov	r2, sl
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af41 	beq.w	80086ba <_printf_float+0xc2>
 8008838:	f04f 0800 	mov.w	r8, #0
 800883c:	f104 091a 	add.w	r9, r4, #26
 8008840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008842:	3b01      	subs	r3, #1
 8008844:	4543      	cmp	r3, r8
 8008846:	dc09      	bgt.n	800885c <_printf_float+0x264>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	f100 8105 	bmi.w	8008a5a <_printf_float+0x462>
 8008850:	68e0      	ldr	r0, [r4, #12]
 8008852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008854:	4298      	cmp	r0, r3
 8008856:	bfb8      	it	lt
 8008858:	4618      	movlt	r0, r3
 800885a:	e730      	b.n	80086be <_printf_float+0xc6>
 800885c:	2301      	movs	r3, #1
 800885e:	464a      	mov	r2, r9
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af27 	beq.w	80086ba <_printf_float+0xc2>
 800886c:	f108 0801 	add.w	r8, r8, #1
 8008870:	e7e6      	b.n	8008840 <_printf_float+0x248>
 8008872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	dc39      	bgt.n	80088ec <_printf_float+0x2f4>
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <_printf_float+0x2f0>)
 800887a:	2301      	movs	r3, #1
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af19 	beq.w	80086ba <_printf_float+0xc2>
 8008888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800888c:	4313      	orrs	r3, r2
 800888e:	d102      	bne.n	8008896 <_printf_float+0x29e>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	07d9      	lsls	r1, r3, #31
 8008894:	d5d8      	bpl.n	8008848 <_printf_float+0x250>
 8008896:	ee18 3a10 	vmov	r3, s16
 800889a:	4652      	mov	r2, sl
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af09 	beq.w	80086ba <_printf_float+0xc2>
 80088a8:	f04f 0900 	mov.w	r9, #0
 80088ac:	f104 0a1a 	add.w	sl, r4, #26
 80088b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b2:	425b      	negs	r3, r3
 80088b4:	454b      	cmp	r3, r9
 80088b6:	dc01      	bgt.n	80088bc <_printf_float+0x2c4>
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	e792      	b.n	80087e2 <_printf_float+0x1ea>
 80088bc:	2301      	movs	r3, #1
 80088be:	4652      	mov	r2, sl
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f aef7 	beq.w	80086ba <_printf_float+0xc2>
 80088cc:	f109 0901 	add.w	r9, r9, #1
 80088d0:	e7ee      	b.n	80088b0 <_printf_float+0x2b8>
 80088d2:	bf00      	nop
 80088d4:	7fefffff 	.word	0x7fefffff
 80088d8:	0800cf9c 	.word	0x0800cf9c
 80088dc:	0800cfa0 	.word	0x0800cfa0
 80088e0:	0800cfa8 	.word	0x0800cfa8
 80088e4:	0800cfa4 	.word	0x0800cfa4
 80088e8:	0800cfac 	.word	0x0800cfac
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bfa8      	it	ge
 80088f4:	461a      	movge	r2, r3
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	4691      	mov	r9, r2
 80088fa:	dc37      	bgt.n	800896c <_printf_float+0x374>
 80088fc:	f04f 0b00 	mov.w	fp, #0
 8008900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008904:	f104 021a 	add.w	r2, r4, #26
 8008908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	eba3 0309 	sub.w	r3, r3, r9
 8008910:	455b      	cmp	r3, fp
 8008912:	dc33      	bgt.n	800897c <_printf_float+0x384>
 8008914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008918:	429a      	cmp	r2, r3
 800891a:	db3b      	blt.n	8008994 <_printf_float+0x39c>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	07da      	lsls	r2, r3, #31
 8008920:	d438      	bmi.n	8008994 <_printf_float+0x39c>
 8008922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008924:	9a05      	ldr	r2, [sp, #20]
 8008926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008928:	1a9a      	subs	r2, r3, r2
 800892a:	eba3 0901 	sub.w	r9, r3, r1
 800892e:	4591      	cmp	r9, r2
 8008930:	bfa8      	it	ge
 8008932:	4691      	movge	r9, r2
 8008934:	f1b9 0f00 	cmp.w	r9, #0
 8008938:	dc35      	bgt.n	80089a6 <_printf_float+0x3ae>
 800893a:	f04f 0800 	mov.w	r8, #0
 800893e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008942:	f104 0a1a 	add.w	sl, r4, #26
 8008946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	eba3 0309 	sub.w	r3, r3, r9
 8008950:	4543      	cmp	r3, r8
 8008952:	f77f af79 	ble.w	8008848 <_printf_float+0x250>
 8008956:	2301      	movs	r3, #1
 8008958:	4652      	mov	r2, sl
 800895a:	4631      	mov	r1, r6
 800895c:	4628      	mov	r0, r5
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	f43f aeaa 	beq.w	80086ba <_printf_float+0xc2>
 8008966:	f108 0801 	add.w	r8, r8, #1
 800896a:	e7ec      	b.n	8008946 <_printf_float+0x34e>
 800896c:	4613      	mov	r3, r2
 800896e:	4631      	mov	r1, r6
 8008970:	4642      	mov	r2, r8
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	d1c0      	bne.n	80088fc <_printf_float+0x304>
 800897a:	e69e      	b.n	80086ba <_printf_float+0xc2>
 800897c:	2301      	movs	r3, #1
 800897e:	4631      	mov	r1, r6
 8008980:	4628      	mov	r0, r5
 8008982:	9205      	str	r2, [sp, #20]
 8008984:	47b8      	blx	r7
 8008986:	3001      	adds	r0, #1
 8008988:	f43f ae97 	beq.w	80086ba <_printf_float+0xc2>
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	f10b 0b01 	add.w	fp, fp, #1
 8008992:	e7b9      	b.n	8008908 <_printf_float+0x310>
 8008994:	ee18 3a10 	vmov	r3, s16
 8008998:	4652      	mov	r2, sl
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	d1be      	bne.n	8008922 <_printf_float+0x32a>
 80089a4:	e689      	b.n	80086ba <_printf_float+0xc2>
 80089a6:	9a05      	ldr	r2, [sp, #20]
 80089a8:	464b      	mov	r3, r9
 80089aa:	4442      	add	r2, r8
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	d1c1      	bne.n	800893a <_printf_float+0x342>
 80089b6:	e680      	b.n	80086ba <_printf_float+0xc2>
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	2a01      	cmp	r2, #1
 80089bc:	dc01      	bgt.n	80089c2 <_printf_float+0x3ca>
 80089be:	07db      	lsls	r3, r3, #31
 80089c0:	d538      	bpl.n	8008a34 <_printf_float+0x43c>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4642      	mov	r2, r8
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	f43f ae74 	beq.w	80086ba <_printf_float+0xc2>
 80089d2:	ee18 3a10 	vmov	r3, s16
 80089d6:	4652      	mov	r2, sl
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f ae6b 	beq.w	80086ba <_printf_float+0xc2>
 80089e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089e8:	2200      	movs	r2, #0
 80089ea:	2300      	movs	r3, #0
 80089ec:	f7f8 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80089f0:	b9d8      	cbnz	r0, 8008a2a <_printf_float+0x432>
 80089f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f4:	f108 0201 	add.w	r2, r8, #1
 80089f8:	3b01      	subs	r3, #1
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d10e      	bne.n	8008a22 <_printf_float+0x42a>
 8008a04:	e659      	b.n	80086ba <_printf_float+0xc2>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4652      	mov	r2, sl
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f ae52 	beq.w	80086ba <_printf_float+0xc2>
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	4543      	cmp	r3, r8
 8008a20:	dcf1      	bgt.n	8008a06 <_printf_float+0x40e>
 8008a22:	464b      	mov	r3, r9
 8008a24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a28:	e6dc      	b.n	80087e4 <_printf_float+0x1ec>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	f104 0a1a 	add.w	sl, r4, #26
 8008a32:	e7f2      	b.n	8008a1a <_printf_float+0x422>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4642      	mov	r2, r8
 8008a38:	e7df      	b.n	80089fa <_printf_float+0x402>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	464a      	mov	r2, r9
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f ae38 	beq.w	80086ba <_printf_float+0xc2>
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	4543      	cmp	r3, r8
 8008a56:	dcf0      	bgt.n	8008a3a <_printf_float+0x442>
 8008a58:	e6fa      	b.n	8008850 <_printf_float+0x258>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	f104 0919 	add.w	r9, r4, #25
 8008a62:	e7f4      	b.n	8008a4e <_printf_float+0x456>

08008a64 <_printf_common>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	4616      	mov	r6, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	688a      	ldr	r2, [r1, #8]
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bfb8      	it	lt
 8008a78:	4613      	movlt	r3, r2
 8008a7a:	6033      	str	r3, [r6, #0]
 8008a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a80:	4607      	mov	r7, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b10a      	cbz	r2, 8008a8a <_printf_common+0x26>
 8008a86:	3301      	adds	r3, #1
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	0699      	lsls	r1, r3, #26
 8008a8e:	bf42      	ittt	mi
 8008a90:	6833      	ldrmi	r3, [r6, #0]
 8008a92:	3302      	addmi	r3, #2
 8008a94:	6033      	strmi	r3, [r6, #0]
 8008a96:	6825      	ldr	r5, [r4, #0]
 8008a98:	f015 0506 	ands.w	r5, r5, #6
 8008a9c:	d106      	bne.n	8008aac <_printf_common+0x48>
 8008a9e:	f104 0a19 	add.w	sl, r4, #25
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	6832      	ldr	r2, [r6, #0]
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dc26      	bgt.n	8008afa <_printf_common+0x96>
 8008aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab0:	1e13      	subs	r3, r2, #0
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	0692      	lsls	r2, r2, #26
 8008aba:	d42b      	bmi.n	8008b14 <_printf_common+0xb0>
 8008abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d01e      	beq.n	8008b08 <_printf_common+0xa4>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	68e5      	ldr	r5, [r4, #12]
 8008ace:	6832      	ldr	r2, [r6, #0]
 8008ad0:	f003 0306 	and.w	r3, r3, #6
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	bf08      	it	eq
 8008ad8:	1aad      	subeq	r5, r5, r2
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	6922      	ldr	r2, [r4, #16]
 8008ade:	bf0c      	ite	eq
 8008ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae4:	2500      	movne	r5, #0
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bfc4      	itt	gt
 8008aea:	1a9b      	subgt	r3, r3, r2
 8008aec:	18ed      	addgt	r5, r5, r3
 8008aee:	2600      	movs	r6, #0
 8008af0:	341a      	adds	r4, #26
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	d11a      	bne.n	8008b2c <_printf_common+0xc8>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e008      	b.n	8008b0c <_printf_common+0xa8>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4649      	mov	r1, r9
 8008b00:	4638      	mov	r0, r7
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d103      	bne.n	8008b10 <_printf_common+0xac>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	3501      	adds	r5, #1
 8008b12:	e7c6      	b.n	8008aa2 <_printf_common+0x3e>
 8008b14:	18e1      	adds	r1, r4, r3
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	2030      	movs	r0, #48	; 0x30
 8008b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b1e:	4422      	add	r2, r4
 8008b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b28:	3302      	adds	r3, #2
 8008b2a:	e7c7      	b.n	8008abc <_printf_common+0x58>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d0e6      	beq.n	8008b08 <_printf_common+0xa4>
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7d9      	b.n	8008af2 <_printf_common+0x8e>
	...

08008b40 <_printf_i>:
 8008b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	7e0f      	ldrb	r7, [r1, #24]
 8008b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b48:	2f78      	cmp	r7, #120	; 0x78
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	469a      	mov	sl, r3
 8008b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b56:	d807      	bhi.n	8008b68 <_printf_i+0x28>
 8008b58:	2f62      	cmp	r7, #98	; 0x62
 8008b5a:	d80a      	bhi.n	8008b72 <_printf_i+0x32>
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	f000 80d8 	beq.w	8008d12 <_printf_i+0x1d2>
 8008b62:	2f58      	cmp	r7, #88	; 0x58
 8008b64:	f000 80a3 	beq.w	8008cae <_printf_i+0x16e>
 8008b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b70:	e03a      	b.n	8008be8 <_printf_i+0xa8>
 8008b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b76:	2b15      	cmp	r3, #21
 8008b78:	d8f6      	bhi.n	8008b68 <_printf_i+0x28>
 8008b7a:	a101      	add	r1, pc, #4	; (adr r1, 8008b80 <_printf_i+0x40>)
 8008b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008b69 	.word	0x08008b69
 8008b8c:	08008b69 	.word	0x08008b69
 8008b90:	08008b69 	.word	0x08008b69
 8008b94:	08008b69 	.word	0x08008b69
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008b69 	.word	0x08008b69
 8008ba0:	08008b69 	.word	0x08008b69
 8008ba4:	08008b69 	.word	0x08008b69
 8008ba8:	08008b69 	.word	0x08008b69
 8008bac:	08008cf9 	.word	0x08008cf9
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008cdb 	.word	0x08008cdb
 8008bb8:	08008b69 	.word	0x08008b69
 8008bbc:	08008b69 	.word	0x08008b69
 8008bc0:	08008d1b 	.word	0x08008d1b
 8008bc4:	08008b69 	.word	0x08008b69
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008b69 	.word	0x08008b69
 8008bd0:	08008b69 	.word	0x08008b69
 8008bd4:	08008ce3 	.word	0x08008ce3
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	1d1a      	adds	r2, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0a3      	b.n	8008d34 <_printf_i+0x1f4>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	6829      	ldr	r1, [r5, #0]
 8008bf0:	0606      	lsls	r6, r0, #24
 8008bf2:	f101 0304 	add.w	r3, r1, #4
 8008bf6:	d50a      	bpl.n	8008c0e <_printf_i+0xce>
 8008bf8:	680e      	ldr	r6, [r1, #0]
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	da03      	bge.n	8008c08 <_printf_i+0xc8>
 8008c00:	232d      	movs	r3, #45	; 0x2d
 8008c02:	4276      	negs	r6, r6
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	485e      	ldr	r0, [pc, #376]	; (8008d84 <_printf_i+0x244>)
 8008c0a:	230a      	movs	r3, #10
 8008c0c:	e019      	b.n	8008c42 <_printf_i+0x102>
 8008c0e:	680e      	ldr	r6, [r1, #0]
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c16:	bf18      	it	ne
 8008c18:	b236      	sxthne	r6, r6
 8008c1a:	e7ef      	b.n	8008bfc <_printf_i+0xbc>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	1d19      	adds	r1, r3, #4
 8008c22:	6029      	str	r1, [r5, #0]
 8008c24:	0601      	lsls	r1, r0, #24
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0xec>
 8008c28:	681e      	ldr	r6, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <_printf_i+0xf2>
 8008c2c:	0646      	lsls	r6, r0, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0xe8>
 8008c30:	881e      	ldrh	r6, [r3, #0]
 8008c32:	4854      	ldr	r0, [pc, #336]	; (8008d84 <_printf_i+0x244>)
 8008c34:	2f6f      	cmp	r7, #111	; 0x6f
 8008c36:	bf0c      	ite	eq
 8008c38:	2308      	moveq	r3, #8
 8008c3a:	230a      	movne	r3, #10
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c42:	6865      	ldr	r5, [r4, #4]
 8008c44:	60a5      	str	r5, [r4, #8]
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	bfa2      	ittt	ge
 8008c4a:	6821      	ldrge	r1, [r4, #0]
 8008c4c:	f021 0104 	bicge.w	r1, r1, #4
 8008c50:	6021      	strge	r1, [r4, #0]
 8008c52:	b90e      	cbnz	r6, 8008c58 <_printf_i+0x118>
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	d04d      	beq.n	8008cf4 <_printf_i+0x1b4>
 8008c58:	4615      	mov	r5, r2
 8008c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c62:	5dc7      	ldrb	r7, [r0, r7]
 8008c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c68:	4637      	mov	r7, r6
 8008c6a:	42bb      	cmp	r3, r7
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	d9f4      	bls.n	8008c5a <_printf_i+0x11a>
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d10b      	bne.n	8008c8c <_printf_i+0x14c>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	07de      	lsls	r6, r3, #31
 8008c78:	d508      	bpl.n	8008c8c <_printf_i+0x14c>
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	bfde      	ittt	le
 8008c82:	2330      	movle	r3, #48	; 0x30
 8008c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c8c:	1b52      	subs	r2, r2, r5
 8008c8e:	6122      	str	r2, [r4, #16]
 8008c90:	f8cd a000 	str.w	sl, [sp]
 8008c94:	464b      	mov	r3, r9
 8008c96:	aa03      	add	r2, sp, #12
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	f7ff fee2 	bl	8008a64 <_printf_common>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d14c      	bne.n	8008d3e <_printf_i+0x1fe>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b004      	add	sp, #16
 8008caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cae:	4835      	ldr	r0, [pc, #212]	; (8008d84 <_printf_i+0x244>)
 8008cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cb4:	6829      	ldr	r1, [r5, #0]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cbc:	6029      	str	r1, [r5, #0]
 8008cbe:	061d      	lsls	r5, r3, #24
 8008cc0:	d514      	bpl.n	8008cec <_printf_i+0x1ac>
 8008cc2:	07df      	lsls	r7, r3, #31
 8008cc4:	bf44      	itt	mi
 8008cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cca:	6023      	strmi	r3, [r4, #0]
 8008ccc:	b91e      	cbnz	r6, 8008cd6 <_printf_i+0x196>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f023 0320 	bic.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	e7b0      	b.n	8008c3c <_printf_i+0xfc>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	2378      	movs	r3, #120	; 0x78
 8008ce4:	4828      	ldr	r0, [pc, #160]	; (8008d88 <_printf_i+0x248>)
 8008ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cea:	e7e3      	b.n	8008cb4 <_printf_i+0x174>
 8008cec:	0659      	lsls	r1, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2b6      	uxthmi	r6, r6
 8008cf2:	e7e6      	b.n	8008cc2 <_printf_i+0x182>
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	e7bb      	b.n	8008c70 <_printf_i+0x130>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	6826      	ldr	r6, [r4, #0]
 8008cfc:	6961      	ldr	r1, [r4, #20]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	6028      	str	r0, [r5, #0]
 8008d02:	0635      	lsls	r5, r6, #24
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0x1cc>
 8008d08:	6019      	str	r1, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <_printf_i+0x1d2>
 8008d0c:	0670      	lsls	r0, r6, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0x1c8>
 8008d10:	8019      	strh	r1, [r3, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	4615      	mov	r5, r2
 8008d18:	e7ba      	b.n	8008c90 <_printf_i+0x150>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7f7 fa5a 	bl	80001e0 <memchr>
 8008d2c:	b108      	cbz	r0, 8008d32 <_printf_i+0x1f2>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	6060      	str	r0, [r4, #4]
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	2300      	movs	r3, #0
 8008d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3c:	e7a8      	b.n	8008c90 <_printf_i+0x150>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4649      	mov	r1, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	47d0      	blx	sl
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d0ab      	beq.n	8008ca4 <_printf_i+0x164>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	079b      	lsls	r3, r3, #30
 8008d50:	d413      	bmi.n	8008d7a <_printf_i+0x23a>
 8008d52:	68e0      	ldr	r0, [r4, #12]
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	4298      	cmp	r0, r3
 8008d58:	bfb8      	it	lt
 8008d5a:	4618      	movlt	r0, r3
 8008d5c:	e7a4      	b.n	8008ca8 <_printf_i+0x168>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4632      	mov	r2, r6
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d09b      	beq.n	8008ca4 <_printf_i+0x164>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	9903      	ldr	r1, [sp, #12]
 8008d72:	1a5b      	subs	r3, r3, r1
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dcf2      	bgt.n	8008d5e <_printf_i+0x21e>
 8008d78:	e7eb      	b.n	8008d52 <_printf_i+0x212>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f104 0619 	add.w	r6, r4, #25
 8008d80:	e7f5      	b.n	8008d6e <_printf_i+0x22e>
 8008d82:	bf00      	nop
 8008d84:	0800cfae 	.word	0x0800cfae
 8008d88:	0800cfbf 	.word	0x0800cfbf

08008d8c <_scanf_float>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	b087      	sub	sp, #28
 8008d92:	4617      	mov	r7, r2
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	688b      	ldr	r3, [r1, #8]
 8008d98:	1e5a      	subs	r2, r3, #1
 8008d9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d9e:	bf83      	ittte	hi
 8008da0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008da4:	195b      	addhi	r3, r3, r5
 8008da6:	9302      	strhi	r3, [sp, #8]
 8008da8:	2300      	movls	r3, #0
 8008daa:	bf86      	itte	hi
 8008dac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008db0:	608b      	strhi	r3, [r1, #8]
 8008db2:	9302      	strls	r3, [sp, #8]
 8008db4:	680b      	ldr	r3, [r1, #0]
 8008db6:	468b      	mov	fp, r1
 8008db8:	2500      	movs	r5, #0
 8008dba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008dbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8008dc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	465e      	mov	r6, fp
 8008dcc:	46aa      	mov	sl, r5
 8008dce:	46a9      	mov	r9, r5
 8008dd0:	9501      	str	r5, [sp, #4]
 8008dd2:	68a2      	ldr	r2, [r4, #8]
 8008dd4:	b152      	cbz	r2, 8008dec <_scanf_float+0x60>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b4e      	cmp	r3, #78	; 0x4e
 8008ddc:	d864      	bhi.n	8008ea8 <_scanf_float+0x11c>
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d83c      	bhi.n	8008e5c <_scanf_float+0xd0>
 8008de2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008de6:	b2c8      	uxtb	r0, r1
 8008de8:	280e      	cmp	r0, #14
 8008dea:	d93a      	bls.n	8008e62 <_scanf_float+0xd6>
 8008dec:	f1b9 0f00 	cmp.w	r9, #0
 8008df0:	d003      	beq.n	8008dfa <_scanf_float+0x6e>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfe:	f1ba 0f01 	cmp.w	sl, #1
 8008e02:	f200 8113 	bhi.w	800902c <_scanf_float+0x2a0>
 8008e06:	455e      	cmp	r6, fp
 8008e08:	f200 8105 	bhi.w	8009016 <_scanf_float+0x28a>
 8008e0c:	2501      	movs	r5, #1
 8008e0e:	4628      	mov	r0, r5
 8008e10:	b007      	add	sp, #28
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e1a:	2a0d      	cmp	r2, #13
 8008e1c:	d8e6      	bhi.n	8008dec <_scanf_float+0x60>
 8008e1e:	a101      	add	r1, pc, #4	; (adr r1, 8008e24 <_scanf_float+0x98>)
 8008e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e24:	08008f63 	.word	0x08008f63
 8008e28:	08008ded 	.word	0x08008ded
 8008e2c:	08008ded 	.word	0x08008ded
 8008e30:	08008ded 	.word	0x08008ded
 8008e34:	08008fc3 	.word	0x08008fc3
 8008e38:	08008f9b 	.word	0x08008f9b
 8008e3c:	08008ded 	.word	0x08008ded
 8008e40:	08008ded 	.word	0x08008ded
 8008e44:	08008f71 	.word	0x08008f71
 8008e48:	08008ded 	.word	0x08008ded
 8008e4c:	08008ded 	.word	0x08008ded
 8008e50:	08008ded 	.word	0x08008ded
 8008e54:	08008ded 	.word	0x08008ded
 8008e58:	08008f29 	.word	0x08008f29
 8008e5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e60:	e7db      	b.n	8008e1a <_scanf_float+0x8e>
 8008e62:	290e      	cmp	r1, #14
 8008e64:	d8c2      	bhi.n	8008dec <_scanf_float+0x60>
 8008e66:	a001      	add	r0, pc, #4	; (adr r0, 8008e6c <_scanf_float+0xe0>)
 8008e68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e6c:	08008f1b 	.word	0x08008f1b
 8008e70:	08008ded 	.word	0x08008ded
 8008e74:	08008f1b 	.word	0x08008f1b
 8008e78:	08008faf 	.word	0x08008faf
 8008e7c:	08008ded 	.word	0x08008ded
 8008e80:	08008ec9 	.word	0x08008ec9
 8008e84:	08008f05 	.word	0x08008f05
 8008e88:	08008f05 	.word	0x08008f05
 8008e8c:	08008f05 	.word	0x08008f05
 8008e90:	08008f05 	.word	0x08008f05
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	08008f05 	.word	0x08008f05
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f05 	.word	0x08008f05
 8008ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8008eaa:	d809      	bhi.n	8008ec0 <_scanf_float+0x134>
 8008eac:	2b60      	cmp	r3, #96	; 0x60
 8008eae:	d8b2      	bhi.n	8008e16 <_scanf_float+0x8a>
 8008eb0:	2b54      	cmp	r3, #84	; 0x54
 8008eb2:	d077      	beq.n	8008fa4 <_scanf_float+0x218>
 8008eb4:	2b59      	cmp	r3, #89	; 0x59
 8008eb6:	d199      	bne.n	8008dec <_scanf_float+0x60>
 8008eb8:	2d07      	cmp	r5, #7
 8008eba:	d197      	bne.n	8008dec <_scanf_float+0x60>
 8008ebc:	2508      	movs	r5, #8
 8008ebe:	e029      	b.n	8008f14 <_scanf_float+0x188>
 8008ec0:	2b74      	cmp	r3, #116	; 0x74
 8008ec2:	d06f      	beq.n	8008fa4 <_scanf_float+0x218>
 8008ec4:	2b79      	cmp	r3, #121	; 0x79
 8008ec6:	e7f6      	b.n	8008eb6 <_scanf_float+0x12a>
 8008ec8:	6821      	ldr	r1, [r4, #0]
 8008eca:	05c8      	lsls	r0, r1, #23
 8008ecc:	d51a      	bpl.n	8008f04 <_scanf_float+0x178>
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ed4:	6021      	str	r1, [r4, #0]
 8008ed6:	f109 0901 	add.w	r9, r9, #1
 8008eda:	b11b      	cbz	r3, 8008ee4 <_scanf_float+0x158>
 8008edc:	3b01      	subs	r3, #1
 8008ede:	3201      	adds	r2, #1
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	60a2      	str	r2, [r4, #8]
 8008ee4:	68a3      	ldr	r3, [r4, #8]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	60a3      	str	r3, [r4, #8]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	3301      	adds	r3, #1
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	607b      	str	r3, [r7, #4]
 8008ef8:	f340 8084 	ble.w	8009004 <_scanf_float+0x278>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	e766      	b.n	8008dd2 <_scanf_float+0x46>
 8008f04:	eb1a 0f05 	cmn.w	sl, r5
 8008f08:	f47f af70 	bne.w	8008dec <_scanf_float+0x60>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	f806 3b01 	strb.w	r3, [r6], #1
 8008f18:	e7e4      	b.n	8008ee4 <_scanf_float+0x158>
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	0610      	lsls	r0, r2, #24
 8008f1e:	f57f af65 	bpl.w	8008dec <_scanf_float+0x60>
 8008f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f26:	e7f4      	b.n	8008f12 <_scanf_float+0x186>
 8008f28:	f1ba 0f00 	cmp.w	sl, #0
 8008f2c:	d10e      	bne.n	8008f4c <_scanf_float+0x1c0>
 8008f2e:	f1b9 0f00 	cmp.w	r9, #0
 8008f32:	d10e      	bne.n	8008f52 <_scanf_float+0x1c6>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f3e:	d108      	bne.n	8008f52 <_scanf_float+0x1c6>
 8008f40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	f04f 0a01 	mov.w	sl, #1
 8008f4a:	e7e3      	b.n	8008f14 <_scanf_float+0x188>
 8008f4c:	f1ba 0f02 	cmp.w	sl, #2
 8008f50:	d055      	beq.n	8008ffe <_scanf_float+0x272>
 8008f52:	2d01      	cmp	r5, #1
 8008f54:	d002      	beq.n	8008f5c <_scanf_float+0x1d0>
 8008f56:	2d04      	cmp	r5, #4
 8008f58:	f47f af48 	bne.w	8008dec <_scanf_float+0x60>
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	b2ed      	uxtb	r5, r5
 8008f60:	e7d8      	b.n	8008f14 <_scanf_float+0x188>
 8008f62:	f1ba 0f01 	cmp.w	sl, #1
 8008f66:	f47f af41 	bne.w	8008dec <_scanf_float+0x60>
 8008f6a:	f04f 0a02 	mov.w	sl, #2
 8008f6e:	e7d1      	b.n	8008f14 <_scanf_float+0x188>
 8008f70:	b97d      	cbnz	r5, 8008f92 <_scanf_float+0x206>
 8008f72:	f1b9 0f00 	cmp.w	r9, #0
 8008f76:	f47f af3c 	bne.w	8008df2 <_scanf_float+0x66>
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f84:	f47f af39 	bne.w	8008dfa <_scanf_float+0x6e>
 8008f88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f8c:	6022      	str	r2, [r4, #0]
 8008f8e:	2501      	movs	r5, #1
 8008f90:	e7c0      	b.n	8008f14 <_scanf_float+0x188>
 8008f92:	2d03      	cmp	r5, #3
 8008f94:	d0e2      	beq.n	8008f5c <_scanf_float+0x1d0>
 8008f96:	2d05      	cmp	r5, #5
 8008f98:	e7de      	b.n	8008f58 <_scanf_float+0x1cc>
 8008f9a:	2d02      	cmp	r5, #2
 8008f9c:	f47f af26 	bne.w	8008dec <_scanf_float+0x60>
 8008fa0:	2503      	movs	r5, #3
 8008fa2:	e7b7      	b.n	8008f14 <_scanf_float+0x188>
 8008fa4:	2d06      	cmp	r5, #6
 8008fa6:	f47f af21 	bne.w	8008dec <_scanf_float+0x60>
 8008faa:	2507      	movs	r5, #7
 8008fac:	e7b2      	b.n	8008f14 <_scanf_float+0x188>
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	0591      	lsls	r1, r2, #22
 8008fb2:	f57f af1b 	bpl.w	8008dec <_scanf_float+0x60>
 8008fb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fc0:	e7a8      	b.n	8008f14 <_scanf_float+0x188>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fcc:	d006      	beq.n	8008fdc <_scanf_float+0x250>
 8008fce:	0550      	lsls	r0, r2, #21
 8008fd0:	f57f af0c 	bpl.w	8008dec <_scanf_float+0x60>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	f43f af0f 	beq.w	8008dfa <_scanf_float+0x6e>
 8008fdc:	0591      	lsls	r1, r2, #22
 8008fde:	bf58      	it	pl
 8008fe0:	9901      	ldrpl	r1, [sp, #4]
 8008fe2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fe6:	bf58      	it	pl
 8008fe8:	eba9 0101 	subpl.w	r1, r9, r1
 8008fec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ff0:	bf58      	it	pl
 8008ff2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ff6:	6022      	str	r2, [r4, #0]
 8008ff8:	f04f 0900 	mov.w	r9, #0
 8008ffc:	e78a      	b.n	8008f14 <_scanf_float+0x188>
 8008ffe:	f04f 0a03 	mov.w	sl, #3
 8009002:	e787      	b.n	8008f14 <_scanf_float+0x188>
 8009004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009008:	4639      	mov	r1, r7
 800900a:	4640      	mov	r0, r8
 800900c:	4798      	blx	r3
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f aedf 	beq.w	8008dd2 <_scanf_float+0x46>
 8009014:	e6ea      	b.n	8008dec <_scanf_float+0x60>
 8009016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800901a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800901e:	463a      	mov	r2, r7
 8009020:	4640      	mov	r0, r8
 8009022:	4798      	blx	r3
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	3b01      	subs	r3, #1
 8009028:	6123      	str	r3, [r4, #16]
 800902a:	e6ec      	b.n	8008e06 <_scanf_float+0x7a>
 800902c:	1e6b      	subs	r3, r5, #1
 800902e:	2b06      	cmp	r3, #6
 8009030:	d825      	bhi.n	800907e <_scanf_float+0x2f2>
 8009032:	2d02      	cmp	r5, #2
 8009034:	d836      	bhi.n	80090a4 <_scanf_float+0x318>
 8009036:	455e      	cmp	r6, fp
 8009038:	f67f aee8 	bls.w	8008e0c <_scanf_float+0x80>
 800903c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009040:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009044:	463a      	mov	r2, r7
 8009046:	4640      	mov	r0, r8
 8009048:	4798      	blx	r3
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	3b01      	subs	r3, #1
 800904e:	6123      	str	r3, [r4, #16]
 8009050:	e7f1      	b.n	8009036 <_scanf_float+0x2aa>
 8009052:	9802      	ldr	r0, [sp, #8]
 8009054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009058:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800905c:	9002      	str	r0, [sp, #8]
 800905e:	463a      	mov	r2, r7
 8009060:	4640      	mov	r0, r8
 8009062:	4798      	blx	r3
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	3b01      	subs	r3, #1
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800906e:	fa5f fa8a 	uxtb.w	sl, sl
 8009072:	f1ba 0f02 	cmp.w	sl, #2
 8009076:	d1ec      	bne.n	8009052 <_scanf_float+0x2c6>
 8009078:	3d03      	subs	r5, #3
 800907a:	b2ed      	uxtb	r5, r5
 800907c:	1b76      	subs	r6, r6, r5
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	05da      	lsls	r2, r3, #23
 8009082:	d52f      	bpl.n	80090e4 <_scanf_float+0x358>
 8009084:	055b      	lsls	r3, r3, #21
 8009086:	d510      	bpl.n	80090aa <_scanf_float+0x31e>
 8009088:	455e      	cmp	r6, fp
 800908a:	f67f aebf 	bls.w	8008e0c <_scanf_float+0x80>
 800908e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009096:	463a      	mov	r2, r7
 8009098:	4640      	mov	r0, r8
 800909a:	4798      	blx	r3
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	3b01      	subs	r3, #1
 80090a0:	6123      	str	r3, [r4, #16]
 80090a2:	e7f1      	b.n	8009088 <_scanf_float+0x2fc>
 80090a4:	46aa      	mov	sl, r5
 80090a6:	9602      	str	r6, [sp, #8]
 80090a8:	e7df      	b.n	800906a <_scanf_float+0x2de>
 80090aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	2965      	cmp	r1, #101	; 0x65
 80090b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80090b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	d00c      	beq.n	80090d8 <_scanf_float+0x34c>
 80090be:	2945      	cmp	r1, #69	; 0x45
 80090c0:	d00a      	beq.n	80090d8 <_scanf_float+0x34c>
 80090c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090c6:	463a      	mov	r2, r7
 80090c8:	4640      	mov	r0, r8
 80090ca:	4798      	blx	r3
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	1eb5      	subs	r5, r6, #2
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090dc:	463a      	mov	r2, r7
 80090de:	4640      	mov	r0, r8
 80090e0:	4798      	blx	r3
 80090e2:	462e      	mov	r6, r5
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	f015 0510 	ands.w	r5, r5, #16
 80090ea:	d159      	bne.n	80091a0 <_scanf_float+0x414>
 80090ec:	7035      	strb	r5, [r6, #0]
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f8:	d11b      	bne.n	8009132 <_scanf_float+0x3a6>
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	454b      	cmp	r3, r9
 80090fe:	eba3 0209 	sub.w	r2, r3, r9
 8009102:	d123      	bne.n	800914c <_scanf_float+0x3c0>
 8009104:	2200      	movs	r2, #0
 8009106:	4659      	mov	r1, fp
 8009108:	4640      	mov	r0, r8
 800910a:	f000 ff27 	bl	8009f5c <_strtod_r>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	f012 0f02 	tst.w	r2, #2
 8009116:	ec57 6b10 	vmov	r6, r7, d0
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	d021      	beq.n	8009162 <_scanf_float+0x3d6>
 800911e:	9903      	ldr	r1, [sp, #12]
 8009120:	1d1a      	adds	r2, r3, #4
 8009122:	600a      	str	r2, [r1, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	e9c3 6700 	strd	r6, r7, [r3]
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	60e3      	str	r3, [r4, #12]
 8009130:	e66d      	b.n	8008e0e <_scanf_float+0x82>
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0e5      	beq.n	8009104 <_scanf_float+0x378>
 8009138:	9905      	ldr	r1, [sp, #20]
 800913a:	230a      	movs	r3, #10
 800913c:	462a      	mov	r2, r5
 800913e:	3101      	adds	r1, #1
 8009140:	4640      	mov	r0, r8
 8009142:	f000 ff93 	bl	800a06c <_strtol_r>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	9e05      	ldr	r6, [sp, #20]
 800914a:	1ac2      	subs	r2, r0, r3
 800914c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009150:	429e      	cmp	r6, r3
 8009152:	bf28      	it	cs
 8009154:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009158:	4912      	ldr	r1, [pc, #72]	; (80091a4 <_scanf_float+0x418>)
 800915a:	4630      	mov	r0, r6
 800915c:	f000 f8ba 	bl	80092d4 <siprintf>
 8009160:	e7d0      	b.n	8009104 <_scanf_float+0x378>
 8009162:	9903      	ldr	r1, [sp, #12]
 8009164:	f012 0f04 	tst.w	r2, #4
 8009168:	f103 0204 	add.w	r2, r3, #4
 800916c:	600a      	str	r2, [r1, #0]
 800916e:	d1d9      	bne.n	8009124 <_scanf_float+0x398>
 8009170:	f8d3 8000 	ldr.w	r8, [r3]
 8009174:	ee10 2a10 	vmov	r2, s0
 8009178:	ee10 0a10 	vmov	r0, s0
 800917c:	463b      	mov	r3, r7
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 8009184:	b128      	cbz	r0, 8009192 <_scanf_float+0x406>
 8009186:	4808      	ldr	r0, [pc, #32]	; (80091a8 <_scanf_float+0x41c>)
 8009188:	f000 f89e 	bl	80092c8 <nanf>
 800918c:	ed88 0a00 	vstr	s0, [r8]
 8009190:	e7cb      	b.n	800912a <_scanf_float+0x39e>
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 fd27 	bl	8000be8 <__aeabi_d2f>
 800919a:	f8c8 0000 	str.w	r0, [r8]
 800919e:	e7c4      	b.n	800912a <_scanf_float+0x39e>
 80091a0:	2500      	movs	r5, #0
 80091a2:	e634      	b.n	8008e0e <_scanf_float+0x82>
 80091a4:	0800cfd0 	.word	0x0800cfd0
 80091a8:	0800d440 	.word	0x0800d440

080091ac <iprintf>:
 80091ac:	b40f      	push	{r0, r1, r2, r3}
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <iprintf+0x2c>)
 80091b0:	b513      	push	{r0, r1, r4, lr}
 80091b2:	681c      	ldr	r4, [r3, #0]
 80091b4:	b124      	cbz	r4, 80091c0 <iprintf+0x14>
 80091b6:	69a3      	ldr	r3, [r4, #24]
 80091b8:	b913      	cbnz	r3, 80091c0 <iprintf+0x14>
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 ffac 	bl	800b118 <__sinit>
 80091c0:	ab05      	add	r3, sp, #20
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	68a1      	ldr	r1, [r4, #8]
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f003 fb83 	bl	800c8d4 <_vfiprintf_r>
 80091ce:	b002      	add	sp, #8
 80091d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d4:	b004      	add	sp, #16
 80091d6:	4770      	bx	lr
 80091d8:	2000000c 	.word	0x2000000c

080091dc <_puts_r>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	460e      	mov	r6, r1
 80091e0:	4605      	mov	r5, r0
 80091e2:	b118      	cbz	r0, 80091ec <_puts_r+0x10>
 80091e4:	6983      	ldr	r3, [r0, #24]
 80091e6:	b90b      	cbnz	r3, 80091ec <_puts_r+0x10>
 80091e8:	f001 ff96 	bl	800b118 <__sinit>
 80091ec:	69ab      	ldr	r3, [r5, #24]
 80091ee:	68ac      	ldr	r4, [r5, #8]
 80091f0:	b913      	cbnz	r3, 80091f8 <_puts_r+0x1c>
 80091f2:	4628      	mov	r0, r5
 80091f4:	f001 ff90 	bl	800b118 <__sinit>
 80091f8:	4b2c      	ldr	r3, [pc, #176]	; (80092ac <_puts_r+0xd0>)
 80091fa:	429c      	cmp	r4, r3
 80091fc:	d120      	bne.n	8009240 <_puts_r+0x64>
 80091fe:	686c      	ldr	r4, [r5, #4]
 8009200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009202:	07db      	lsls	r3, r3, #31
 8009204:	d405      	bmi.n	8009212 <_puts_r+0x36>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	0598      	lsls	r0, r3, #22
 800920a:	d402      	bmi.n	8009212 <_puts_r+0x36>
 800920c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920e:	f002 fb94 	bl	800b93a <__retarget_lock_acquire_recursive>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	0719      	lsls	r1, r3, #28
 8009216:	d51d      	bpl.n	8009254 <_puts_r+0x78>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b1db      	cbz	r3, 8009254 <_puts_r+0x78>
 800921c:	3e01      	subs	r6, #1
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009224:	3b01      	subs	r3, #1
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	bb39      	cbnz	r1, 800927a <_puts_r+0x9e>
 800922a:	2b00      	cmp	r3, #0
 800922c:	da38      	bge.n	80092a0 <_puts_r+0xc4>
 800922e:	4622      	mov	r2, r4
 8009230:	210a      	movs	r1, #10
 8009232:	4628      	mov	r0, r5
 8009234:	f000 ff1c 	bl	800a070 <__swbuf_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d011      	beq.n	8009260 <_puts_r+0x84>
 800923c:	250a      	movs	r5, #10
 800923e:	e011      	b.n	8009264 <_puts_r+0x88>
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <_puts_r+0xd4>)
 8009242:	429c      	cmp	r4, r3
 8009244:	d101      	bne.n	800924a <_puts_r+0x6e>
 8009246:	68ac      	ldr	r4, [r5, #8]
 8009248:	e7da      	b.n	8009200 <_puts_r+0x24>
 800924a:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <_puts_r+0xd8>)
 800924c:	429c      	cmp	r4, r3
 800924e:	bf08      	it	eq
 8009250:	68ec      	ldreq	r4, [r5, #12]
 8009252:	e7d5      	b.n	8009200 <_puts_r+0x24>
 8009254:	4621      	mov	r1, r4
 8009256:	4628      	mov	r0, r5
 8009258:	f000 ff5c 	bl	800a114 <__swsetup_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	d0dd      	beq.n	800921c <_puts_r+0x40>
 8009260:	f04f 35ff 	mov.w	r5, #4294967295
 8009264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009266:	07da      	lsls	r2, r3, #31
 8009268:	d405      	bmi.n	8009276 <_puts_r+0x9a>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	059b      	lsls	r3, r3, #22
 800926e:	d402      	bmi.n	8009276 <_puts_r+0x9a>
 8009270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009272:	f002 fb63 	bl	800b93c <__retarget_lock_release_recursive>
 8009276:	4628      	mov	r0, r5
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	2b00      	cmp	r3, #0
 800927c:	da04      	bge.n	8009288 <_puts_r+0xac>
 800927e:	69a2      	ldr	r2, [r4, #24]
 8009280:	429a      	cmp	r2, r3
 8009282:	dc06      	bgt.n	8009292 <_puts_r+0xb6>
 8009284:	290a      	cmp	r1, #10
 8009286:	d004      	beq.n	8009292 <_puts_r+0xb6>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	6022      	str	r2, [r4, #0]
 800928e:	7019      	strb	r1, [r3, #0]
 8009290:	e7c5      	b.n	800921e <_puts_r+0x42>
 8009292:	4622      	mov	r2, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 feeb 	bl	800a070 <__swbuf_r>
 800929a:	3001      	adds	r0, #1
 800929c:	d1bf      	bne.n	800921e <_puts_r+0x42>
 800929e:	e7df      	b.n	8009260 <_puts_r+0x84>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	250a      	movs	r5, #10
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	6022      	str	r2, [r4, #0]
 80092a8:	701d      	strb	r5, [r3, #0]
 80092aa:	e7db      	b.n	8009264 <_puts_r+0x88>
 80092ac:	0800d1dc 	.word	0x0800d1dc
 80092b0:	0800d1fc 	.word	0x0800d1fc
 80092b4:	0800d1bc 	.word	0x0800d1bc

080092b8 <puts>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <puts+0xc>)
 80092ba:	4601      	mov	r1, r0
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	f7ff bf8d 	b.w	80091dc <_puts_r>
 80092c2:	bf00      	nop
 80092c4:	2000000c 	.word	0x2000000c

080092c8 <nanf>:
 80092c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092d0 <nanf+0x8>
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	7fc00000 	.word	0x7fc00000

080092d4 <siprintf>:
 80092d4:	b40e      	push	{r1, r2, r3}
 80092d6:	b500      	push	{lr}
 80092d8:	b09c      	sub	sp, #112	; 0x70
 80092da:	ab1d      	add	r3, sp, #116	; 0x74
 80092dc:	9002      	str	r0, [sp, #8]
 80092de:	9006      	str	r0, [sp, #24]
 80092e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092e4:	4809      	ldr	r0, [pc, #36]	; (800930c <siprintf+0x38>)
 80092e6:	9107      	str	r1, [sp, #28]
 80092e8:	9104      	str	r1, [sp, #16]
 80092ea:	4909      	ldr	r1, [pc, #36]	; (8009310 <siprintf+0x3c>)
 80092ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	6800      	ldr	r0, [r0, #0]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	a902      	add	r1, sp, #8
 80092f8:	f003 f9c2 	bl	800c680 <_svfiprintf_r>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	b01c      	add	sp, #112	; 0x70
 8009304:	f85d eb04 	ldr.w	lr, [sp], #4
 8009308:	b003      	add	sp, #12
 800930a:	4770      	bx	lr
 800930c:	2000000c 	.word	0x2000000c
 8009310:	ffff0208 	.word	0xffff0208

08009314 <sulp>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	ec45 4b10 	vmov	d0, r4, r5
 800931e:	4616      	mov	r6, r2
 8009320:	f002 ff0c 	bl	800c13c <__ulp>
 8009324:	ec51 0b10 	vmov	r0, r1, d0
 8009328:	b17e      	cbz	r6, 800934a <sulp+0x36>
 800932a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800932e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd09      	ble.n	800934a <sulp+0x36>
 8009336:	051b      	lsls	r3, r3, #20
 8009338:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800933c:	2400      	movs	r4, #0
 800933e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009342:	4622      	mov	r2, r4
 8009344:	462b      	mov	r3, r5
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	0000      	movs	r0, r0
	...

08009350 <_strtod_l>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ed2d 8b02 	vpush	{d8}
 8009358:	b09d      	sub	sp, #116	; 0x74
 800935a:	461f      	mov	r7, r3
 800935c:	2300      	movs	r3, #0
 800935e:	9318      	str	r3, [sp, #96]	; 0x60
 8009360:	4ba2      	ldr	r3, [pc, #648]	; (80095ec <_strtod_l+0x29c>)
 8009362:	9213      	str	r2, [sp, #76]	; 0x4c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	4604      	mov	r4, r0
 800936a:	4618      	mov	r0, r3
 800936c:	4688      	mov	r8, r1
 800936e:	f7f6 ff2f 	bl	80001d0 <strlen>
 8009372:	f04f 0a00 	mov.w	sl, #0
 8009376:	4605      	mov	r5, r0
 8009378:	f04f 0b00 	mov.w	fp, #0
 800937c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	2a2b      	cmp	r2, #43	; 0x2b
 8009386:	d04e      	beq.n	8009426 <_strtod_l+0xd6>
 8009388:	d83b      	bhi.n	8009402 <_strtod_l+0xb2>
 800938a:	2a0d      	cmp	r2, #13
 800938c:	d834      	bhi.n	80093f8 <_strtod_l+0xa8>
 800938e:	2a08      	cmp	r2, #8
 8009390:	d834      	bhi.n	80093fc <_strtod_l+0xac>
 8009392:	2a00      	cmp	r2, #0
 8009394:	d03e      	beq.n	8009414 <_strtod_l+0xc4>
 8009396:	2300      	movs	r3, #0
 8009398:	930a      	str	r3, [sp, #40]	; 0x28
 800939a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800939c:	7833      	ldrb	r3, [r6, #0]
 800939e:	2b30      	cmp	r3, #48	; 0x30
 80093a0:	f040 80b0 	bne.w	8009504 <_strtod_l+0x1b4>
 80093a4:	7873      	ldrb	r3, [r6, #1]
 80093a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093aa:	2b58      	cmp	r3, #88	; 0x58
 80093ac:	d168      	bne.n	8009480 <_strtod_l+0x130>
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	ab18      	add	r3, sp, #96	; 0x60
 80093b4:	9702      	str	r7, [sp, #8]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	4a8d      	ldr	r2, [pc, #564]	; (80095f0 <_strtod_l+0x2a0>)
 80093ba:	ab19      	add	r3, sp, #100	; 0x64
 80093bc:	a917      	add	r1, sp, #92	; 0x5c
 80093be:	4620      	mov	r0, r4
 80093c0:	f001 ffae 	bl	800b320 <__gethex>
 80093c4:	f010 0707 	ands.w	r7, r0, #7
 80093c8:	4605      	mov	r5, r0
 80093ca:	d005      	beq.n	80093d8 <_strtod_l+0x88>
 80093cc:	2f06      	cmp	r7, #6
 80093ce:	d12c      	bne.n	800942a <_strtod_l+0xda>
 80093d0:	3601      	adds	r6, #1
 80093d2:	2300      	movs	r3, #0
 80093d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80093d6:	930a      	str	r3, [sp, #40]	; 0x28
 80093d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f040 8590 	bne.w	8009f00 <_strtod_l+0xbb0>
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	b1eb      	cbz	r3, 8009420 <_strtod_l+0xd0>
 80093e4:	4652      	mov	r2, sl
 80093e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093ea:	ec43 2b10 	vmov	d0, r2, r3
 80093ee:	b01d      	add	sp, #116	; 0x74
 80093f0:	ecbd 8b02 	vpop	{d8}
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	2a20      	cmp	r2, #32
 80093fa:	d1cc      	bne.n	8009396 <_strtod_l+0x46>
 80093fc:	3301      	adds	r3, #1
 80093fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009400:	e7be      	b.n	8009380 <_strtod_l+0x30>
 8009402:	2a2d      	cmp	r2, #45	; 0x2d
 8009404:	d1c7      	bne.n	8009396 <_strtod_l+0x46>
 8009406:	2201      	movs	r2, #1
 8009408:	920a      	str	r2, [sp, #40]	; 0x28
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	9217      	str	r2, [sp, #92]	; 0x5c
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1c2      	bne.n	800939a <_strtod_l+0x4a>
 8009414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009416:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 856e 	bne.w	8009efc <_strtod_l+0xbac>
 8009420:	4652      	mov	r2, sl
 8009422:	465b      	mov	r3, fp
 8009424:	e7e1      	b.n	80093ea <_strtod_l+0x9a>
 8009426:	2200      	movs	r2, #0
 8009428:	e7ee      	b.n	8009408 <_strtod_l+0xb8>
 800942a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800942c:	b13a      	cbz	r2, 800943e <_strtod_l+0xee>
 800942e:	2135      	movs	r1, #53	; 0x35
 8009430:	a81a      	add	r0, sp, #104	; 0x68
 8009432:	f002 ff8e 	bl	800c352 <__copybits>
 8009436:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009438:	4620      	mov	r0, r4
 800943a:	f002 fb4d 	bl	800bad8 <_Bfree>
 800943e:	3f01      	subs	r7, #1
 8009440:	2f04      	cmp	r7, #4
 8009442:	d806      	bhi.n	8009452 <_strtod_l+0x102>
 8009444:	e8df f007 	tbb	[pc, r7]
 8009448:	1714030a 	.word	0x1714030a
 800944c:	0a          	.byte	0x0a
 800944d:	00          	.byte	0x00
 800944e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009452:	0728      	lsls	r0, r5, #28
 8009454:	d5c0      	bpl.n	80093d8 <_strtod_l+0x88>
 8009456:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800945a:	e7bd      	b.n	80093d8 <_strtod_l+0x88>
 800945c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009460:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009466:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800946a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800946e:	e7f0      	b.n	8009452 <_strtod_l+0x102>
 8009470:	f8df b180 	ldr.w	fp, [pc, #384]	; 80095f4 <_strtod_l+0x2a4>
 8009474:	e7ed      	b.n	8009452 <_strtod_l+0x102>
 8009476:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800947a:	f04f 3aff 	mov.w	sl, #4294967295
 800947e:	e7e8      	b.n	8009452 <_strtod_l+0x102>
 8009480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	9217      	str	r2, [sp, #92]	; 0x5c
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b30      	cmp	r3, #48	; 0x30
 800948a:	d0f9      	beq.n	8009480 <_strtod_l+0x130>
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0a3      	beq.n	80093d8 <_strtod_l+0x88>
 8009490:	2301      	movs	r3, #1
 8009492:	f04f 0900 	mov.w	r9, #0
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800949a:	9308      	str	r3, [sp, #32]
 800949c:	f8cd 901c 	str.w	r9, [sp, #28]
 80094a0:	464f      	mov	r7, r9
 80094a2:	220a      	movs	r2, #10
 80094a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80094a6:	7806      	ldrb	r6, [r0, #0]
 80094a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80094ac:	b2d9      	uxtb	r1, r3
 80094ae:	2909      	cmp	r1, #9
 80094b0:	d92a      	bls.n	8009508 <_strtod_l+0x1b8>
 80094b2:	9905      	ldr	r1, [sp, #20]
 80094b4:	462a      	mov	r2, r5
 80094b6:	f003 fb9a 	bl	800cbee <strncmp>
 80094ba:	b398      	cbz	r0, 8009524 <_strtod_l+0x1d4>
 80094bc:	2000      	movs	r0, #0
 80094be:	4632      	mov	r2, r6
 80094c0:	463d      	mov	r5, r7
 80094c2:	9005      	str	r0, [sp, #20]
 80094c4:	4603      	mov	r3, r0
 80094c6:	2a65      	cmp	r2, #101	; 0x65
 80094c8:	d001      	beq.n	80094ce <_strtod_l+0x17e>
 80094ca:	2a45      	cmp	r2, #69	; 0x45
 80094cc:	d118      	bne.n	8009500 <_strtod_l+0x1b0>
 80094ce:	b91d      	cbnz	r5, 80094d8 <_strtod_l+0x188>
 80094d0:	9a04      	ldr	r2, [sp, #16]
 80094d2:	4302      	orrs	r2, r0
 80094d4:	d09e      	beq.n	8009414 <_strtod_l+0xc4>
 80094d6:	2500      	movs	r5, #0
 80094d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80094dc:	f108 0201 	add.w	r2, r8, #1
 80094e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80094e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80094e6:	2a2b      	cmp	r2, #43	; 0x2b
 80094e8:	d075      	beq.n	80095d6 <_strtod_l+0x286>
 80094ea:	2a2d      	cmp	r2, #45	; 0x2d
 80094ec:	d07b      	beq.n	80095e6 <_strtod_l+0x296>
 80094ee:	f04f 0c00 	mov.w	ip, #0
 80094f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094f6:	2909      	cmp	r1, #9
 80094f8:	f240 8082 	bls.w	8009600 <_strtod_l+0x2b0>
 80094fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009500:	2600      	movs	r6, #0
 8009502:	e09d      	b.n	8009640 <_strtod_l+0x2f0>
 8009504:	2300      	movs	r3, #0
 8009506:	e7c4      	b.n	8009492 <_strtod_l+0x142>
 8009508:	2f08      	cmp	r7, #8
 800950a:	bfd8      	it	le
 800950c:	9907      	ldrle	r1, [sp, #28]
 800950e:	f100 0001 	add.w	r0, r0, #1
 8009512:	bfda      	itte	le
 8009514:	fb02 3301 	mlale	r3, r2, r1, r3
 8009518:	9307      	strle	r3, [sp, #28]
 800951a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800951e:	3701      	adds	r7, #1
 8009520:	9017      	str	r0, [sp, #92]	; 0x5c
 8009522:	e7bf      	b.n	80094a4 <_strtod_l+0x154>
 8009524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009526:	195a      	adds	r2, r3, r5
 8009528:	9217      	str	r2, [sp, #92]	; 0x5c
 800952a:	5d5a      	ldrb	r2, [r3, r5]
 800952c:	2f00      	cmp	r7, #0
 800952e:	d037      	beq.n	80095a0 <_strtod_l+0x250>
 8009530:	9005      	str	r0, [sp, #20]
 8009532:	463d      	mov	r5, r7
 8009534:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009538:	2b09      	cmp	r3, #9
 800953a:	d912      	bls.n	8009562 <_strtod_l+0x212>
 800953c:	2301      	movs	r3, #1
 800953e:	e7c2      	b.n	80094c6 <_strtod_l+0x176>
 8009540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	9217      	str	r2, [sp, #92]	; 0x5c
 8009546:	785a      	ldrb	r2, [r3, #1]
 8009548:	3001      	adds	r0, #1
 800954a:	2a30      	cmp	r2, #48	; 0x30
 800954c:	d0f8      	beq.n	8009540 <_strtod_l+0x1f0>
 800954e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009552:	2b08      	cmp	r3, #8
 8009554:	f200 84d9 	bhi.w	8009f0a <_strtod_l+0xbba>
 8009558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800955a:	9005      	str	r0, [sp, #20]
 800955c:	2000      	movs	r0, #0
 800955e:	9308      	str	r3, [sp, #32]
 8009560:	4605      	mov	r5, r0
 8009562:	3a30      	subs	r2, #48	; 0x30
 8009564:	f100 0301 	add.w	r3, r0, #1
 8009568:	d014      	beq.n	8009594 <_strtod_l+0x244>
 800956a:	9905      	ldr	r1, [sp, #20]
 800956c:	4419      	add	r1, r3
 800956e:	9105      	str	r1, [sp, #20]
 8009570:	462b      	mov	r3, r5
 8009572:	eb00 0e05 	add.w	lr, r0, r5
 8009576:	210a      	movs	r1, #10
 8009578:	4573      	cmp	r3, lr
 800957a:	d113      	bne.n	80095a4 <_strtod_l+0x254>
 800957c:	182b      	adds	r3, r5, r0
 800957e:	2b08      	cmp	r3, #8
 8009580:	f105 0501 	add.w	r5, r5, #1
 8009584:	4405      	add	r5, r0
 8009586:	dc1c      	bgt.n	80095c2 <_strtod_l+0x272>
 8009588:	9907      	ldr	r1, [sp, #28]
 800958a:	230a      	movs	r3, #10
 800958c:	fb03 2301 	mla	r3, r3, r1, r2
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	2300      	movs	r3, #0
 8009594:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009596:	1c51      	adds	r1, r2, #1
 8009598:	9117      	str	r1, [sp, #92]	; 0x5c
 800959a:	7852      	ldrb	r2, [r2, #1]
 800959c:	4618      	mov	r0, r3
 800959e:	e7c9      	b.n	8009534 <_strtod_l+0x1e4>
 80095a0:	4638      	mov	r0, r7
 80095a2:	e7d2      	b.n	800954a <_strtod_l+0x1fa>
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	dc04      	bgt.n	80095b2 <_strtod_l+0x262>
 80095a8:	9e07      	ldr	r6, [sp, #28]
 80095aa:	434e      	muls	r6, r1
 80095ac:	9607      	str	r6, [sp, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	e7e2      	b.n	8009578 <_strtod_l+0x228>
 80095b2:	f103 0c01 	add.w	ip, r3, #1
 80095b6:	f1bc 0f10 	cmp.w	ip, #16
 80095ba:	bfd8      	it	le
 80095bc:	fb01 f909 	mulle.w	r9, r1, r9
 80095c0:	e7f5      	b.n	80095ae <_strtod_l+0x25e>
 80095c2:	2d10      	cmp	r5, #16
 80095c4:	bfdc      	itt	le
 80095c6:	230a      	movle	r3, #10
 80095c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80095cc:	e7e1      	b.n	8009592 <_strtod_l+0x242>
 80095ce:	2300      	movs	r3, #0
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	2301      	movs	r3, #1
 80095d4:	e77c      	b.n	80094d0 <_strtod_l+0x180>
 80095d6:	f04f 0c00 	mov.w	ip, #0
 80095da:	f108 0202 	add.w	r2, r8, #2
 80095de:	9217      	str	r2, [sp, #92]	; 0x5c
 80095e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80095e4:	e785      	b.n	80094f2 <_strtod_l+0x1a2>
 80095e6:	f04f 0c01 	mov.w	ip, #1
 80095ea:	e7f6      	b.n	80095da <_strtod_l+0x28a>
 80095ec:	0800d284 	.word	0x0800d284
 80095f0:	0800cfd8 	.word	0x0800cfd8
 80095f4:	7ff00000 	.word	0x7ff00000
 80095f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095fa:	1c51      	adds	r1, r2, #1
 80095fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80095fe:	7852      	ldrb	r2, [r2, #1]
 8009600:	2a30      	cmp	r2, #48	; 0x30
 8009602:	d0f9      	beq.n	80095f8 <_strtod_l+0x2a8>
 8009604:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009608:	2908      	cmp	r1, #8
 800960a:	f63f af79 	bhi.w	8009500 <_strtod_l+0x1b0>
 800960e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009614:	9206      	str	r2, [sp, #24]
 8009616:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009618:	1c51      	adds	r1, r2, #1
 800961a:	9117      	str	r1, [sp, #92]	; 0x5c
 800961c:	7852      	ldrb	r2, [r2, #1]
 800961e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009622:	2e09      	cmp	r6, #9
 8009624:	d937      	bls.n	8009696 <_strtod_l+0x346>
 8009626:	9e06      	ldr	r6, [sp, #24]
 8009628:	1b89      	subs	r1, r1, r6
 800962a:	2908      	cmp	r1, #8
 800962c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009630:	dc02      	bgt.n	8009638 <_strtod_l+0x2e8>
 8009632:	4576      	cmp	r6, lr
 8009634:	bfa8      	it	ge
 8009636:	4676      	movge	r6, lr
 8009638:	f1bc 0f00 	cmp.w	ip, #0
 800963c:	d000      	beq.n	8009640 <_strtod_l+0x2f0>
 800963e:	4276      	negs	r6, r6
 8009640:	2d00      	cmp	r5, #0
 8009642:	d14d      	bne.n	80096e0 <_strtod_l+0x390>
 8009644:	9904      	ldr	r1, [sp, #16]
 8009646:	4301      	orrs	r1, r0
 8009648:	f47f aec6 	bne.w	80093d8 <_strtod_l+0x88>
 800964c:	2b00      	cmp	r3, #0
 800964e:	f47f aee1 	bne.w	8009414 <_strtod_l+0xc4>
 8009652:	2a69      	cmp	r2, #105	; 0x69
 8009654:	d027      	beq.n	80096a6 <_strtod_l+0x356>
 8009656:	dc24      	bgt.n	80096a2 <_strtod_l+0x352>
 8009658:	2a49      	cmp	r2, #73	; 0x49
 800965a:	d024      	beq.n	80096a6 <_strtod_l+0x356>
 800965c:	2a4e      	cmp	r2, #78	; 0x4e
 800965e:	f47f aed9 	bne.w	8009414 <_strtod_l+0xc4>
 8009662:	499f      	ldr	r1, [pc, #636]	; (80098e0 <_strtod_l+0x590>)
 8009664:	a817      	add	r0, sp, #92	; 0x5c
 8009666:	f002 f8b3 	bl	800b7d0 <__match>
 800966a:	2800      	cmp	r0, #0
 800966c:	f43f aed2 	beq.w	8009414 <_strtod_l+0xc4>
 8009670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b28      	cmp	r3, #40	; 0x28
 8009676:	d12d      	bne.n	80096d4 <_strtod_l+0x384>
 8009678:	499a      	ldr	r1, [pc, #616]	; (80098e4 <_strtod_l+0x594>)
 800967a:	aa1a      	add	r2, sp, #104	; 0x68
 800967c:	a817      	add	r0, sp, #92	; 0x5c
 800967e:	f002 f8bb 	bl	800b7f8 <__hexnan>
 8009682:	2805      	cmp	r0, #5
 8009684:	d126      	bne.n	80096d4 <_strtod_l+0x384>
 8009686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009688:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800968c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009690:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009694:	e6a0      	b.n	80093d8 <_strtod_l+0x88>
 8009696:	210a      	movs	r1, #10
 8009698:	fb01 2e0e 	mla	lr, r1, lr, r2
 800969c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096a0:	e7b9      	b.n	8009616 <_strtod_l+0x2c6>
 80096a2:	2a6e      	cmp	r2, #110	; 0x6e
 80096a4:	e7db      	b.n	800965e <_strtod_l+0x30e>
 80096a6:	4990      	ldr	r1, [pc, #576]	; (80098e8 <_strtod_l+0x598>)
 80096a8:	a817      	add	r0, sp, #92	; 0x5c
 80096aa:	f002 f891 	bl	800b7d0 <__match>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f aeb0 	beq.w	8009414 <_strtod_l+0xc4>
 80096b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096b6:	498d      	ldr	r1, [pc, #564]	; (80098ec <_strtod_l+0x59c>)
 80096b8:	3b01      	subs	r3, #1
 80096ba:	a817      	add	r0, sp, #92	; 0x5c
 80096bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80096be:	f002 f887 	bl	800b7d0 <__match>
 80096c2:	b910      	cbnz	r0, 80096ca <_strtod_l+0x37a>
 80096c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096c6:	3301      	adds	r3, #1
 80096c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80096ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80098fc <_strtod_l+0x5ac>
 80096ce:	f04f 0a00 	mov.w	sl, #0
 80096d2:	e681      	b.n	80093d8 <_strtod_l+0x88>
 80096d4:	4886      	ldr	r0, [pc, #536]	; (80098f0 <_strtod_l+0x5a0>)
 80096d6:	f003 fa2f 	bl	800cb38 <nan>
 80096da:	ec5b ab10 	vmov	sl, fp, d0
 80096de:	e67b      	b.n	80093d8 <_strtod_l+0x88>
 80096e0:	9b05      	ldr	r3, [sp, #20]
 80096e2:	9807      	ldr	r0, [sp, #28]
 80096e4:	1af3      	subs	r3, r6, r3
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	bf08      	it	eq
 80096ea:	462f      	moveq	r7, r5
 80096ec:	2d10      	cmp	r5, #16
 80096ee:	9306      	str	r3, [sp, #24]
 80096f0:	46a8      	mov	r8, r5
 80096f2:	bfa8      	it	ge
 80096f4:	f04f 0810 	movge.w	r8, #16
 80096f8:	f7f6 ff04 	bl	8000504 <__aeabi_ui2d>
 80096fc:	2d09      	cmp	r5, #9
 80096fe:	4682      	mov	sl, r0
 8009700:	468b      	mov	fp, r1
 8009702:	dd13      	ble.n	800972c <_strtod_l+0x3dc>
 8009704:	4b7b      	ldr	r3, [pc, #492]	; (80098f4 <_strtod_l+0x5a4>)
 8009706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800970a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4682      	mov	sl, r0
 8009714:	4648      	mov	r0, r9
 8009716:	468b      	mov	fp, r1
 8009718:	f7f6 fef4 	bl	8000504 <__aeabi_ui2d>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4650      	mov	r0, sl
 8009722:	4659      	mov	r1, fp
 8009724:	f7f6 fdb2 	bl	800028c <__adddf3>
 8009728:	4682      	mov	sl, r0
 800972a:	468b      	mov	fp, r1
 800972c:	2d0f      	cmp	r5, #15
 800972e:	dc38      	bgt.n	80097a2 <_strtod_l+0x452>
 8009730:	9b06      	ldr	r3, [sp, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f43f ae50 	beq.w	80093d8 <_strtod_l+0x88>
 8009738:	dd24      	ble.n	8009784 <_strtod_l+0x434>
 800973a:	2b16      	cmp	r3, #22
 800973c:	dc0b      	bgt.n	8009756 <_strtod_l+0x406>
 800973e:	496d      	ldr	r1, [pc, #436]	; (80098f4 <_strtod_l+0x5a4>)
 8009740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009748:	4652      	mov	r2, sl
 800974a:	465b      	mov	r3, fp
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	4682      	mov	sl, r0
 8009752:	468b      	mov	fp, r1
 8009754:	e640      	b.n	80093d8 <_strtod_l+0x88>
 8009756:	9a06      	ldr	r2, [sp, #24]
 8009758:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800975c:	4293      	cmp	r3, r2
 800975e:	db20      	blt.n	80097a2 <_strtod_l+0x452>
 8009760:	4c64      	ldr	r4, [pc, #400]	; (80098f4 <_strtod_l+0x5a4>)
 8009762:	f1c5 050f 	rsb	r5, r5, #15
 8009766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800976a:	4652      	mov	r2, sl
 800976c:	465b      	mov	r3, fp
 800976e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	1b5d      	subs	r5, r3, r5
 800977a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800977e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009782:	e7e3      	b.n	800974c <_strtod_l+0x3fc>
 8009784:	9b06      	ldr	r3, [sp, #24]
 8009786:	3316      	adds	r3, #22
 8009788:	db0b      	blt.n	80097a2 <_strtod_l+0x452>
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	1b9e      	subs	r6, r3, r6
 800978e:	4b59      	ldr	r3, [pc, #356]	; (80098f4 <_strtod_l+0x5a4>)
 8009790:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009794:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009798:	4650      	mov	r0, sl
 800979a:	4659      	mov	r1, fp
 800979c:	f7f7 f856 	bl	800084c <__aeabi_ddiv>
 80097a0:	e7d6      	b.n	8009750 <_strtod_l+0x400>
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	eba5 0808 	sub.w	r8, r5, r8
 80097a8:	4498      	add	r8, r3
 80097aa:	f1b8 0f00 	cmp.w	r8, #0
 80097ae:	dd74      	ble.n	800989a <_strtod_l+0x54a>
 80097b0:	f018 030f 	ands.w	r3, r8, #15
 80097b4:	d00a      	beq.n	80097cc <_strtod_l+0x47c>
 80097b6:	494f      	ldr	r1, [pc, #316]	; (80098f4 <_strtod_l+0x5a4>)
 80097b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097bc:	4652      	mov	r2, sl
 80097be:	465b      	mov	r3, fp
 80097c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	4682      	mov	sl, r0
 80097ca:	468b      	mov	fp, r1
 80097cc:	f038 080f 	bics.w	r8, r8, #15
 80097d0:	d04f      	beq.n	8009872 <_strtod_l+0x522>
 80097d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097d6:	dd22      	ble.n	800981e <_strtod_l+0x4ce>
 80097d8:	2500      	movs	r5, #0
 80097da:	462e      	mov	r6, r5
 80097dc:	9507      	str	r5, [sp, #28]
 80097de:	9505      	str	r5, [sp, #20]
 80097e0:	2322      	movs	r3, #34	; 0x22
 80097e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80098fc <_strtod_l+0x5ac>
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	f04f 0a00 	mov.w	sl, #0
 80097ec:	9b07      	ldr	r3, [sp, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f43f adf2 	beq.w	80093d8 <_strtod_l+0x88>
 80097f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097f6:	4620      	mov	r0, r4
 80097f8:	f002 f96e 	bl	800bad8 <_Bfree>
 80097fc:	9905      	ldr	r1, [sp, #20]
 80097fe:	4620      	mov	r0, r4
 8009800:	f002 f96a 	bl	800bad8 <_Bfree>
 8009804:	4631      	mov	r1, r6
 8009806:	4620      	mov	r0, r4
 8009808:	f002 f966 	bl	800bad8 <_Bfree>
 800980c:	9907      	ldr	r1, [sp, #28]
 800980e:	4620      	mov	r0, r4
 8009810:	f002 f962 	bl	800bad8 <_Bfree>
 8009814:	4629      	mov	r1, r5
 8009816:	4620      	mov	r0, r4
 8009818:	f002 f95e 	bl	800bad8 <_Bfree>
 800981c:	e5dc      	b.n	80093d8 <_strtod_l+0x88>
 800981e:	4b36      	ldr	r3, [pc, #216]	; (80098f8 <_strtod_l+0x5a8>)
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	2300      	movs	r3, #0
 8009824:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	4699      	mov	r9, r3
 800982e:	f1b8 0f01 	cmp.w	r8, #1
 8009832:	dc21      	bgt.n	8009878 <_strtod_l+0x528>
 8009834:	b10b      	cbz	r3, 800983a <_strtod_l+0x4ea>
 8009836:	4682      	mov	sl, r0
 8009838:	468b      	mov	fp, r1
 800983a:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <_strtod_l+0x5a8>)
 800983c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009840:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009844:	4652      	mov	r2, sl
 8009846:	465b      	mov	r3, fp
 8009848:	e9d9 0100 	ldrd	r0, r1, [r9]
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <_strtod_l+0x5ac>)
 8009852:	460a      	mov	r2, r1
 8009854:	400b      	ands	r3, r1
 8009856:	492a      	ldr	r1, [pc, #168]	; (8009900 <_strtod_l+0x5b0>)
 8009858:	428b      	cmp	r3, r1
 800985a:	4682      	mov	sl, r0
 800985c:	d8bc      	bhi.n	80097d8 <_strtod_l+0x488>
 800985e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009862:	428b      	cmp	r3, r1
 8009864:	bf86      	itte	hi
 8009866:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009904 <_strtod_l+0x5b4>
 800986a:	f04f 3aff 	movhi.w	sl, #4294967295
 800986e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009872:	2300      	movs	r3, #0
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	e084      	b.n	8009982 <_strtod_l+0x632>
 8009878:	f018 0f01 	tst.w	r8, #1
 800987c:	d005      	beq.n	800988a <_strtod_l+0x53a>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 feb8 	bl	80005f8 <__aeabi_dmul>
 8009888:	2301      	movs	r3, #1
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	3208      	adds	r2, #8
 800988e:	f109 0901 	add.w	r9, r9, #1
 8009892:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009896:	9204      	str	r2, [sp, #16]
 8009898:	e7c9      	b.n	800982e <_strtod_l+0x4de>
 800989a:	d0ea      	beq.n	8009872 <_strtod_l+0x522>
 800989c:	f1c8 0800 	rsb	r8, r8, #0
 80098a0:	f018 020f 	ands.w	r2, r8, #15
 80098a4:	d00a      	beq.n	80098bc <_strtod_l+0x56c>
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <_strtod_l+0x5a4>)
 80098a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ac:	4650      	mov	r0, sl
 80098ae:	4659      	mov	r1, fp
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 ffca 	bl	800084c <__aeabi_ddiv>
 80098b8:	4682      	mov	sl, r0
 80098ba:	468b      	mov	fp, r1
 80098bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098c0:	d0d7      	beq.n	8009872 <_strtod_l+0x522>
 80098c2:	f1b8 0f1f 	cmp.w	r8, #31
 80098c6:	dd1f      	ble.n	8009908 <_strtod_l+0x5b8>
 80098c8:	2500      	movs	r5, #0
 80098ca:	462e      	mov	r6, r5
 80098cc:	9507      	str	r5, [sp, #28]
 80098ce:	9505      	str	r5, [sp, #20]
 80098d0:	2322      	movs	r3, #34	; 0x22
 80098d2:	f04f 0a00 	mov.w	sl, #0
 80098d6:	f04f 0b00 	mov.w	fp, #0
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	e786      	b.n	80097ec <_strtod_l+0x49c>
 80098de:	bf00      	nop
 80098e0:	0800cfa9 	.word	0x0800cfa9
 80098e4:	0800cfec 	.word	0x0800cfec
 80098e8:	0800cfa1 	.word	0x0800cfa1
 80098ec:	0800d12c 	.word	0x0800d12c
 80098f0:	0800d440 	.word	0x0800d440
 80098f4:	0800d320 	.word	0x0800d320
 80098f8:	0800d2f8 	.word	0x0800d2f8
 80098fc:	7ff00000 	.word	0x7ff00000
 8009900:	7ca00000 	.word	0x7ca00000
 8009904:	7fefffff 	.word	0x7fefffff
 8009908:	f018 0310 	ands.w	r3, r8, #16
 800990c:	bf18      	it	ne
 800990e:	236a      	movne	r3, #106	; 0x6a
 8009910:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009cc0 <_strtod_l+0x970>
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	4650      	mov	r0, sl
 8009918:	4659      	mov	r1, fp
 800991a:	2300      	movs	r3, #0
 800991c:	f018 0f01 	tst.w	r8, #1
 8009920:	d004      	beq.n	800992c <_strtod_l+0x5dc>
 8009922:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009926:	f7f6 fe67 	bl	80005f8 <__aeabi_dmul>
 800992a:	2301      	movs	r3, #1
 800992c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009930:	f109 0908 	add.w	r9, r9, #8
 8009934:	d1f2      	bne.n	800991c <_strtod_l+0x5cc>
 8009936:	b10b      	cbz	r3, 800993c <_strtod_l+0x5ec>
 8009938:	4682      	mov	sl, r0
 800993a:	468b      	mov	fp, r1
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	b1c3      	cbz	r3, 8009972 <_strtod_l+0x622>
 8009940:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009944:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009948:	2b00      	cmp	r3, #0
 800994a:	4659      	mov	r1, fp
 800994c:	dd11      	ble.n	8009972 <_strtod_l+0x622>
 800994e:	2b1f      	cmp	r3, #31
 8009950:	f340 8124 	ble.w	8009b9c <_strtod_l+0x84c>
 8009954:	2b34      	cmp	r3, #52	; 0x34
 8009956:	bfde      	ittt	le
 8009958:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800995c:	f04f 33ff 	movle.w	r3, #4294967295
 8009960:	fa03 f202 	lslle.w	r2, r3, r2
 8009964:	f04f 0a00 	mov.w	sl, #0
 8009968:	bfcc      	ite	gt
 800996a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800996e:	ea02 0b01 	andle.w	fp, r2, r1
 8009972:	2200      	movs	r2, #0
 8009974:	2300      	movs	r3, #0
 8009976:	4650      	mov	r0, sl
 8009978:	4659      	mov	r1, fp
 800997a:	f7f7 f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800997e:	2800      	cmp	r0, #0
 8009980:	d1a2      	bne.n	80098c8 <_strtod_l+0x578>
 8009982:	9b07      	ldr	r3, [sp, #28]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	9908      	ldr	r1, [sp, #32]
 8009988:	462b      	mov	r3, r5
 800998a:	463a      	mov	r2, r7
 800998c:	4620      	mov	r0, r4
 800998e:	f002 f90b 	bl	800bba8 <__s2b>
 8009992:	9007      	str	r0, [sp, #28]
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f af1f 	beq.w	80097d8 <_strtod_l+0x488>
 800999a:	9b05      	ldr	r3, [sp, #20]
 800999c:	1b9e      	subs	r6, r3, r6
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bfb4      	ite	lt
 80099a4:	4633      	movlt	r3, r6
 80099a6:	2300      	movge	r3, #0
 80099a8:	930c      	str	r3, [sp, #48]	; 0x30
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	2500      	movs	r5, #0
 80099ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099b2:	9312      	str	r3, [sp, #72]	; 0x48
 80099b4:	462e      	mov	r6, r5
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	4620      	mov	r0, r4
 80099ba:	6859      	ldr	r1, [r3, #4]
 80099bc:	f002 f84c 	bl	800ba58 <_Balloc>
 80099c0:	9005      	str	r0, [sp, #20]
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f43f af0c 	beq.w	80097e0 <_strtod_l+0x490>
 80099c8:	9b07      	ldr	r3, [sp, #28]
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	3202      	adds	r2, #2
 80099ce:	f103 010c 	add.w	r1, r3, #12
 80099d2:	0092      	lsls	r2, r2, #2
 80099d4:	300c      	adds	r0, #12
 80099d6:	f002 f831 	bl	800ba3c <memcpy>
 80099da:	ec4b ab10 	vmov	d0, sl, fp
 80099de:	aa1a      	add	r2, sp, #104	; 0x68
 80099e0:	a919      	add	r1, sp, #100	; 0x64
 80099e2:	4620      	mov	r0, r4
 80099e4:	f002 fc26 	bl	800c234 <__d2b>
 80099e8:	ec4b ab18 	vmov	d8, sl, fp
 80099ec:	9018      	str	r0, [sp, #96]	; 0x60
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f aef6 	beq.w	80097e0 <_strtod_l+0x490>
 80099f4:	2101      	movs	r1, #1
 80099f6:	4620      	mov	r0, r4
 80099f8:	f002 f970 	bl	800bcdc <__i2b>
 80099fc:	4606      	mov	r6, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f aeee 	beq.w	80097e0 <_strtod_l+0x490>
 8009a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a06:	9904      	ldr	r1, [sp, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	bfab      	itete	ge
 8009a0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009a0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009a10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009a12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009a16:	bfac      	ite	ge
 8009a18:	eb03 0902 	addge.w	r9, r3, r2
 8009a1c:	1ad7      	sublt	r7, r2, r3
 8009a1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a20:	eba3 0801 	sub.w	r8, r3, r1
 8009a24:	4490      	add	r8, r2
 8009a26:	4ba1      	ldr	r3, [pc, #644]	; (8009cac <_strtod_l+0x95c>)
 8009a28:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a2c:	4598      	cmp	r8, r3
 8009a2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a32:	f280 80c7 	bge.w	8009bc4 <_strtod_l+0x874>
 8009a36:	eba3 0308 	sub.w	r3, r3, r8
 8009a3a:	2b1f      	cmp	r3, #31
 8009a3c:	eba2 0203 	sub.w	r2, r2, r3
 8009a40:	f04f 0101 	mov.w	r1, #1
 8009a44:	f300 80b1 	bgt.w	8009baa <_strtod_l+0x85a>
 8009a48:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	eb09 0802 	add.w	r8, r9, r2
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	45c1      	cmp	r9, r8
 8009a5a:	4417      	add	r7, r2
 8009a5c:	441f      	add	r7, r3
 8009a5e:	464b      	mov	r3, r9
 8009a60:	bfa8      	it	ge
 8009a62:	4643      	movge	r3, r8
 8009a64:	42bb      	cmp	r3, r7
 8009a66:	bfa8      	it	ge
 8009a68:	463b      	movge	r3, r7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfc2      	ittt	gt
 8009a6e:	eba8 0803 	subgt.w	r8, r8, r3
 8009a72:	1aff      	subgt	r7, r7, r3
 8009a74:	eba9 0903 	subgt.w	r9, r9, r3
 8009a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dd17      	ble.n	8009aae <_strtod_l+0x75e>
 8009a7e:	4631      	mov	r1, r6
 8009a80:	461a      	mov	r2, r3
 8009a82:	4620      	mov	r0, r4
 8009a84:	f002 f9ea 	bl	800be5c <__pow5mult>
 8009a88:	4606      	mov	r6, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	f43f aea8 	beq.w	80097e0 <_strtod_l+0x490>
 8009a90:	4601      	mov	r1, r0
 8009a92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a94:	4620      	mov	r0, r4
 8009a96:	f002 f937 	bl	800bd08 <__multiply>
 8009a9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f43f ae9f 	beq.w	80097e0 <_strtod_l+0x490>
 8009aa2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f002 f817 	bl	800bad8 <_Bfree>
 8009aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aac:	9318      	str	r3, [sp, #96]	; 0x60
 8009aae:	f1b8 0f00 	cmp.w	r8, #0
 8009ab2:	f300 808c 	bgt.w	8009bce <_strtod_l+0x87e>
 8009ab6:	9b06      	ldr	r3, [sp, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd08      	ble.n	8009ace <_strtod_l+0x77e>
 8009abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009abe:	9905      	ldr	r1, [sp, #20]
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f002 f9cb 	bl	800be5c <__pow5mult>
 8009ac6:	9005      	str	r0, [sp, #20]
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f43f ae89 	beq.w	80097e0 <_strtod_l+0x490>
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	dd08      	ble.n	8009ae4 <_strtod_l+0x794>
 8009ad2:	9905      	ldr	r1, [sp, #20]
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f002 fa1a 	bl	800bf10 <__lshift>
 8009adc:	9005      	str	r0, [sp, #20]
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f ae7e 	beq.w	80097e0 <_strtod_l+0x490>
 8009ae4:	f1b9 0f00 	cmp.w	r9, #0
 8009ae8:	dd08      	ble.n	8009afc <_strtod_l+0x7ac>
 8009aea:	4631      	mov	r1, r6
 8009aec:	464a      	mov	r2, r9
 8009aee:	4620      	mov	r0, r4
 8009af0:	f002 fa0e 	bl	800bf10 <__lshift>
 8009af4:	4606      	mov	r6, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f43f ae72 	beq.w	80097e0 <_strtod_l+0x490>
 8009afc:	9a05      	ldr	r2, [sp, #20]
 8009afe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b00:	4620      	mov	r0, r4
 8009b02:	f002 fa91 	bl	800c028 <__mdiff>
 8009b06:	4605      	mov	r5, r0
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f43f ae69 	beq.w	80097e0 <_strtod_l+0x490>
 8009b0e:	68c3      	ldr	r3, [r0, #12]
 8009b10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b12:	2300      	movs	r3, #0
 8009b14:	60c3      	str	r3, [r0, #12]
 8009b16:	4631      	mov	r1, r6
 8009b18:	f002 fa6a 	bl	800bff0 <__mcmp>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	da60      	bge.n	8009be2 <_strtod_l+0x892>
 8009b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b22:	ea53 030a 	orrs.w	r3, r3, sl
 8009b26:	f040 8082 	bne.w	8009c2e <_strtod_l+0x8de>
 8009b2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d17d      	bne.n	8009c2e <_strtod_l+0x8de>
 8009b32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b36:	0d1b      	lsrs	r3, r3, #20
 8009b38:	051b      	lsls	r3, r3, #20
 8009b3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b3e:	d976      	bls.n	8009c2e <_strtod_l+0x8de>
 8009b40:	696b      	ldr	r3, [r5, #20]
 8009b42:	b913      	cbnz	r3, 8009b4a <_strtod_l+0x7fa>
 8009b44:	692b      	ldr	r3, [r5, #16]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	dd71      	ble.n	8009c2e <_strtod_l+0x8de>
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f002 f9de 	bl	800bf10 <__lshift>
 8009b54:	4631      	mov	r1, r6
 8009b56:	4605      	mov	r5, r0
 8009b58:	f002 fa4a 	bl	800bff0 <__mcmp>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dd66      	ble.n	8009c2e <_strtod_l+0x8de>
 8009b60:	9904      	ldr	r1, [sp, #16]
 8009b62:	4a53      	ldr	r2, [pc, #332]	; (8009cb0 <_strtod_l+0x960>)
 8009b64:	465b      	mov	r3, fp
 8009b66:	2900      	cmp	r1, #0
 8009b68:	f000 8081 	beq.w	8009c6e <_strtod_l+0x91e>
 8009b6c:	ea02 010b 	and.w	r1, r2, fp
 8009b70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b74:	dc7b      	bgt.n	8009c6e <_strtod_l+0x91e>
 8009b76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b7a:	f77f aea9 	ble.w	80098d0 <_strtod_l+0x580>
 8009b7e:	4b4d      	ldr	r3, [pc, #308]	; (8009cb4 <_strtod_l+0x964>)
 8009b80:	4650      	mov	r0, sl
 8009b82:	4659      	mov	r1, fp
 8009b84:	2200      	movs	r2, #0
 8009b86:	f7f6 fd37 	bl	80005f8 <__aeabi_dmul>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4303      	orrs	r3, r0
 8009b8e:	bf08      	it	eq
 8009b90:	2322      	moveq	r3, #34	; 0x22
 8009b92:	4682      	mov	sl, r0
 8009b94:	468b      	mov	fp, r1
 8009b96:	bf08      	it	eq
 8009b98:	6023      	streq	r3, [r4, #0]
 8009b9a:	e62b      	b.n	80097f4 <_strtod_l+0x4a4>
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ba8:	e6e3      	b.n	8009972 <_strtod_l+0x622>
 8009baa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009bae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009bb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009bb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009bba:	fa01 f308 	lsl.w	r3, r1, r8
 8009bbe:	9308      	str	r3, [sp, #32]
 8009bc0:	910d      	str	r1, [sp, #52]	; 0x34
 8009bc2:	e746      	b.n	8009a52 <_strtod_l+0x702>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	930d      	str	r3, [sp, #52]	; 0x34
 8009bcc:	e741      	b.n	8009a52 <_strtod_l+0x702>
 8009bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f002 f99c 	bl	800bf10 <__lshift>
 8009bd8:	9018      	str	r0, [sp, #96]	; 0x60
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f47f af6b 	bne.w	8009ab6 <_strtod_l+0x766>
 8009be0:	e5fe      	b.n	80097e0 <_strtod_l+0x490>
 8009be2:	465f      	mov	r7, fp
 8009be4:	d16e      	bne.n	8009cc4 <_strtod_l+0x974>
 8009be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bec:	b342      	cbz	r2, 8009c40 <_strtod_l+0x8f0>
 8009bee:	4a32      	ldr	r2, [pc, #200]	; (8009cb8 <_strtod_l+0x968>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d128      	bne.n	8009c46 <_strtod_l+0x8f6>
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	4651      	mov	r1, sl
 8009bf8:	b1eb      	cbz	r3, 8009c36 <_strtod_l+0x8e6>
 8009bfa:	4b2d      	ldr	r3, [pc, #180]	; (8009cb0 <_strtod_l+0x960>)
 8009bfc:	403b      	ands	r3, r7
 8009bfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	d819      	bhi.n	8009c3c <_strtod_l+0x8ec>
 8009c08:	0d1b      	lsrs	r3, r3, #20
 8009c0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c12:	4299      	cmp	r1, r3
 8009c14:	d117      	bne.n	8009c46 <_strtod_l+0x8f6>
 8009c16:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <_strtod_l+0x96c>)
 8009c18:	429f      	cmp	r7, r3
 8009c1a:	d102      	bne.n	8009c22 <_strtod_l+0x8d2>
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f43f addf 	beq.w	80097e0 <_strtod_l+0x490>
 8009c22:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <_strtod_l+0x960>)
 8009c24:	403b      	ands	r3, r7
 8009c26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c2a:	f04f 0a00 	mov.w	sl, #0
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1a4      	bne.n	8009b7e <_strtod_l+0x82e>
 8009c34:	e5de      	b.n	80097f4 <_strtod_l+0x4a4>
 8009c36:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3a:	e7ea      	b.n	8009c12 <_strtod_l+0x8c2>
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	e7e8      	b.n	8009c12 <_strtod_l+0x8c2>
 8009c40:	ea53 030a 	orrs.w	r3, r3, sl
 8009c44:	d08c      	beq.n	8009b60 <_strtod_l+0x810>
 8009c46:	9b08      	ldr	r3, [sp, #32]
 8009c48:	b1db      	cbz	r3, 8009c82 <_strtod_l+0x932>
 8009c4a:	423b      	tst	r3, r7
 8009c4c:	d0ef      	beq.n	8009c2e <_strtod_l+0x8de>
 8009c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	4650      	mov	r0, sl
 8009c54:	4659      	mov	r1, fp
 8009c56:	b1c3      	cbz	r3, 8009c8a <_strtod_l+0x93a>
 8009c58:	f7ff fb5c 	bl	8009314 <sulp>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	ec51 0b18 	vmov	r0, r1, d8
 8009c64:	f7f6 fb12 	bl	800028c <__adddf3>
 8009c68:	4682      	mov	sl, r0
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	e7df      	b.n	8009c2e <_strtod_l+0x8de>
 8009c6e:	4013      	ands	r3, r2
 8009c70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c80:	e7d5      	b.n	8009c2e <_strtod_l+0x8de>
 8009c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c84:	ea13 0f0a 	tst.w	r3, sl
 8009c88:	e7e0      	b.n	8009c4c <_strtod_l+0x8fc>
 8009c8a:	f7ff fb43 	bl	8009314 <sulp>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	ec51 0b18 	vmov	r0, r1, d8
 8009c96:	f7f6 faf7 	bl	8000288 <__aeabi_dsub>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4682      	mov	sl, r0
 8009ca0:	468b      	mov	fp, r1
 8009ca2:	f7f6 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0c1      	beq.n	8009c2e <_strtod_l+0x8de>
 8009caa:	e611      	b.n	80098d0 <_strtod_l+0x580>
 8009cac:	fffffc02 	.word	0xfffffc02
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	39500000 	.word	0x39500000
 8009cb8:	000fffff 	.word	0x000fffff
 8009cbc:	7fefffff 	.word	0x7fefffff
 8009cc0:	0800d000 	.word	0x0800d000
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f002 fb10 	bl	800c2ec <__ratio>
 8009ccc:	ec59 8b10 	vmov	r8, r9, d0
 8009cd0:	ee10 0a10 	vmov	r0, s0
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cda:	4649      	mov	r1, r9
 8009cdc:	f7f6 ff08 	bl	8000af0 <__aeabi_dcmple>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d07a      	beq.n	8009dda <_strtod_l+0xa8a>
 8009ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d04a      	beq.n	8009d80 <_strtod_l+0xa30>
 8009cea:	4b95      	ldr	r3, [pc, #596]	; (8009f40 <_strtod_l+0xbf0>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f40 <_strtod_l+0xbf0>
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	4b92      	ldr	r3, [pc, #584]	; (8009f44 <_strtod_l+0xbf4>)
 8009cfc:	403b      	ands	r3, r7
 8009cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8009d00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d02:	4b91      	ldr	r3, [pc, #580]	; (8009f48 <_strtod_l+0xbf8>)
 8009d04:	429a      	cmp	r2, r3
 8009d06:	f040 80b0 	bne.w	8009e6a <_strtod_l+0xb1a>
 8009d0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d12:	ec4b ab10 	vmov	d0, sl, fp
 8009d16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d1a:	f002 fa0f 	bl	800c13c <__ulp>
 8009d1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d22:	ec53 2b10 	vmov	r2, r3, d0
 8009d26:	f7f6 fc67 	bl	80005f8 <__aeabi_dmul>
 8009d2a:	4652      	mov	r2, sl
 8009d2c:	465b      	mov	r3, fp
 8009d2e:	f7f6 faad 	bl	800028c <__adddf3>
 8009d32:	460b      	mov	r3, r1
 8009d34:	4983      	ldr	r1, [pc, #524]	; (8009f44 <_strtod_l+0xbf4>)
 8009d36:	4a85      	ldr	r2, [pc, #532]	; (8009f4c <_strtod_l+0xbfc>)
 8009d38:	4019      	ands	r1, r3
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	d960      	bls.n	8009e02 <_strtod_l+0xab2>
 8009d40:	ee18 3a90 	vmov	r3, s17
 8009d44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d104      	bne.n	8009d56 <_strtod_l+0xa06>
 8009d4c:	ee18 3a10 	vmov	r3, s16
 8009d50:	3301      	adds	r3, #1
 8009d52:	f43f ad45 	beq.w	80097e0 <_strtod_l+0x490>
 8009d56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009f58 <_strtod_l+0xc08>
 8009d5a:	f04f 3aff 	mov.w	sl, #4294967295
 8009d5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 feb9 	bl	800bad8 <_Bfree>
 8009d66:	9905      	ldr	r1, [sp, #20]
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f001 feb5 	bl	800bad8 <_Bfree>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4620      	mov	r0, r4
 8009d72:	f001 feb1 	bl	800bad8 <_Bfree>
 8009d76:	4629      	mov	r1, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 fead 	bl	800bad8 <_Bfree>
 8009d7e:	e61a      	b.n	80099b6 <_strtod_l+0x666>
 8009d80:	f1ba 0f00 	cmp.w	sl, #0
 8009d84:	d11b      	bne.n	8009dbe <_strtod_l+0xa6e>
 8009d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d8a:	b9f3      	cbnz	r3, 8009dca <_strtod_l+0xa7a>
 8009d8c:	4b6c      	ldr	r3, [pc, #432]	; (8009f40 <_strtod_l+0xbf0>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fea2 	bl	8000adc <__aeabi_dcmplt>
 8009d98:	b9d0      	cbnz	r0, 8009dd0 <_strtod_l+0xa80>
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	4b6c      	ldr	r3, [pc, #432]	; (8009f50 <_strtod_l+0xc00>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	f7f6 fc29 	bl	80005f8 <__aeabi_dmul>
 8009da6:	4680      	mov	r8, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009dae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009db2:	9315      	str	r3, [sp, #84]	; 0x54
 8009db4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009db8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dbc:	e79d      	b.n	8009cfa <_strtod_l+0x9aa>
 8009dbe:	f1ba 0f01 	cmp.w	sl, #1
 8009dc2:	d102      	bne.n	8009dca <_strtod_l+0xa7a>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	f43f ad83 	beq.w	80098d0 <_strtod_l+0x580>
 8009dca:	4b62      	ldr	r3, [pc, #392]	; (8009f54 <_strtod_l+0xc04>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	e78e      	b.n	8009cee <_strtod_l+0x99e>
 8009dd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009f50 <_strtod_l+0xc00>
 8009dd4:	f04f 0800 	mov.w	r8, #0
 8009dd8:	e7e7      	b.n	8009daa <_strtod_l+0xa5a>
 8009dda:	4b5d      	ldr	r3, [pc, #372]	; (8009f50 <_strtod_l+0xc00>)
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	2200      	movs	r2, #0
 8009de2:	f7f6 fc09 	bl	80005f8 <__aeabi_dmul>
 8009de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de8:	4680      	mov	r8, r0
 8009dea:	4689      	mov	r9, r1
 8009dec:	b933      	cbnz	r3, 8009dfc <_strtod_l+0xaac>
 8009dee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009df2:	900e      	str	r0, [sp, #56]	; 0x38
 8009df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009dfa:	e7dd      	b.n	8009db8 <_strtod_l+0xa68>
 8009dfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009e00:	e7f9      	b.n	8009df6 <_strtod_l+0xaa6>
 8009e02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1a8      	bne.n	8009d5e <_strtod_l+0xa0e>
 8009e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e12:	0d1b      	lsrs	r3, r3, #20
 8009e14:	051b      	lsls	r3, r3, #20
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d1a1      	bne.n	8009d5e <_strtod_l+0xa0e>
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 ff33 	bl	8000c88 <__aeabi_d2lz>
 8009e22:	f7f6 fbbb 	bl	800059c <__aeabi_l2d>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	f7f6 fa2b 	bl	8000288 <__aeabi_dsub>
 8009e32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e38:	ea43 030a 	orr.w	r3, r3, sl
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4689      	mov	r9, r1
 8009e42:	d055      	beq.n	8009ef0 <_strtod_l+0xba0>
 8009e44:	a336      	add	r3, pc, #216	; (adr r3, 8009f20 <_strtod_l+0xbd0>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	f7f6 fe47 	bl	8000adc <__aeabi_dcmplt>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f47f acd0 	bne.w	80097f4 <_strtod_l+0x4a4>
 8009e54:	a334      	add	r3, pc, #208	; (adr r3, 8009f28 <_strtod_l+0xbd8>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f af7b 	beq.w	8009d5e <_strtod_l+0xa0e>
 8009e68:	e4c4      	b.n	80097f4 <_strtod_l+0x4a4>
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	b333      	cbz	r3, 8009ebc <_strtod_l+0xb6c>
 8009e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e74:	d822      	bhi.n	8009ebc <_strtod_l+0xb6c>
 8009e76:	a32e      	add	r3, pc, #184	; (adr r3, 8009f30 <_strtod_l+0xbe0>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	4649      	mov	r1, r9
 8009e80:	f7f6 fe36 	bl	8000af0 <__aeabi_dcmple>
 8009e84:	b1a0      	cbz	r0, 8009eb0 <_strtod_l+0xb60>
 8009e86:	4649      	mov	r1, r9
 8009e88:	4640      	mov	r0, r8
 8009e8a:	f7f6 fe8d 	bl	8000ba8 <__aeabi_d2uiz>
 8009e8e:	2801      	cmp	r0, #1
 8009e90:	bf38      	it	cc
 8009e92:	2001      	movcc	r0, #1
 8009e94:	f7f6 fb36 	bl	8000504 <__aeabi_ui2d>
 8009e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	4689      	mov	r9, r1
 8009e9e:	bb23      	cbnz	r3, 8009eea <_strtod_l+0xb9a>
 8009ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ea4:	9010      	str	r0, [sp, #64]	; 0x40
 8009ea6:	9311      	str	r3, [sp, #68]	; 0x44
 8009ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009eac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009eb8:	1a9b      	subs	r3, r3, r2
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ec0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec4:	eef0 0a68 	vmov.f32	s1, s17
 8009ec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009ecc:	f002 f936 	bl	800c13c <__ulp>
 8009ed0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ed4:	ec53 2b10 	vmov	r2, r3, d0
 8009ed8:	f7f6 fb8e 	bl	80005f8 <__aeabi_dmul>
 8009edc:	ec53 2b18 	vmov	r2, r3, d8
 8009ee0:	f7f6 f9d4 	bl	800028c <__adddf3>
 8009ee4:	4682      	mov	sl, r0
 8009ee6:	468b      	mov	fp, r1
 8009ee8:	e78d      	b.n	8009e06 <_strtod_l+0xab6>
 8009eea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009eee:	e7db      	b.n	8009ea8 <_strtod_l+0xb58>
 8009ef0:	a311      	add	r3, pc, #68	; (adr r3, 8009f38 <_strtod_l+0xbe8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fdf1 	bl	8000adc <__aeabi_dcmplt>
 8009efa:	e7b2      	b.n	8009e62 <_strtod_l+0xb12>
 8009efc:	2300      	movs	r3, #0
 8009efe:	930a      	str	r3, [sp, #40]	; 0x28
 8009f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	f7ff ba6b 	b.w	80093e0 <_strtod_l+0x90>
 8009f0a:	2a65      	cmp	r2, #101	; 0x65
 8009f0c:	f43f ab5f 	beq.w	80095ce <_strtod_l+0x27e>
 8009f10:	2a45      	cmp	r2, #69	; 0x45
 8009f12:	f43f ab5c 	beq.w	80095ce <_strtod_l+0x27e>
 8009f16:	2301      	movs	r3, #1
 8009f18:	f7ff bb94 	b.w	8009644 <_strtod_l+0x2f4>
 8009f1c:	f3af 8000 	nop.w
 8009f20:	94a03595 	.word	0x94a03595
 8009f24:	3fdfffff 	.word	0x3fdfffff
 8009f28:	35afe535 	.word	0x35afe535
 8009f2c:	3fe00000 	.word	0x3fe00000
 8009f30:	ffc00000 	.word	0xffc00000
 8009f34:	41dfffff 	.word	0x41dfffff
 8009f38:	94a03595 	.word	0x94a03595
 8009f3c:	3fcfffff 	.word	0x3fcfffff
 8009f40:	3ff00000 	.word	0x3ff00000
 8009f44:	7ff00000 	.word	0x7ff00000
 8009f48:	7fe00000 	.word	0x7fe00000
 8009f4c:	7c9fffff 	.word	0x7c9fffff
 8009f50:	3fe00000 	.word	0x3fe00000
 8009f54:	bff00000 	.word	0xbff00000
 8009f58:	7fefffff 	.word	0x7fefffff

08009f5c <_strtod_r>:
 8009f5c:	4b01      	ldr	r3, [pc, #4]	; (8009f64 <_strtod_r+0x8>)
 8009f5e:	f7ff b9f7 	b.w	8009350 <_strtod_l>
 8009f62:	bf00      	nop
 8009f64:	20000074 	.word	0x20000074

08009f68 <_strtol_l.constprop.0>:
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6e:	d001      	beq.n	8009f74 <_strtol_l.constprop.0+0xc>
 8009f70:	2b24      	cmp	r3, #36	; 0x24
 8009f72:	d906      	bls.n	8009f82 <_strtol_l.constprop.0+0x1a>
 8009f74:	f7fe fa6e 	bl	8008454 <__errno>
 8009f78:	2316      	movs	r3, #22
 8009f7a:	6003      	str	r3, [r0, #0]
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a068 <_strtol_l.constprop.0+0x100>
 8009f86:	460d      	mov	r5, r1
 8009f88:	462e      	mov	r6, r5
 8009f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f92:	f017 0708 	ands.w	r7, r7, #8
 8009f96:	d1f7      	bne.n	8009f88 <_strtol_l.constprop.0+0x20>
 8009f98:	2c2d      	cmp	r4, #45	; 0x2d
 8009f9a:	d132      	bne.n	800a002 <_strtol_l.constprop.0+0x9a>
 8009f9c:	782c      	ldrb	r4, [r5, #0]
 8009f9e:	2701      	movs	r7, #1
 8009fa0:	1cb5      	adds	r5, r6, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d05b      	beq.n	800a05e <_strtol_l.constprop.0+0xf6>
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d109      	bne.n	8009fbe <_strtol_l.constprop.0+0x56>
 8009faa:	2c30      	cmp	r4, #48	; 0x30
 8009fac:	d107      	bne.n	8009fbe <_strtol_l.constprop.0+0x56>
 8009fae:	782c      	ldrb	r4, [r5, #0]
 8009fb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fb4:	2c58      	cmp	r4, #88	; 0x58
 8009fb6:	d14d      	bne.n	800a054 <_strtol_l.constprop.0+0xec>
 8009fb8:	786c      	ldrb	r4, [r5, #1]
 8009fba:	2310      	movs	r3, #16
 8009fbc:	3502      	adds	r5, #2
 8009fbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fc6:	f04f 0c00 	mov.w	ip, #0
 8009fca:	fbb8 f9f3 	udiv	r9, r8, r3
 8009fce:	4666      	mov	r6, ip
 8009fd0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009fd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009fd8:	f1be 0f09 	cmp.w	lr, #9
 8009fdc:	d816      	bhi.n	800a00c <_strtol_l.constprop.0+0xa4>
 8009fde:	4674      	mov	r4, lr
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	dd24      	ble.n	800a02e <_strtol_l.constprop.0+0xc6>
 8009fe4:	f1bc 0f00 	cmp.w	ip, #0
 8009fe8:	db1e      	blt.n	800a028 <_strtol_l.constprop.0+0xc0>
 8009fea:	45b1      	cmp	r9, r6
 8009fec:	d31c      	bcc.n	800a028 <_strtol_l.constprop.0+0xc0>
 8009fee:	d101      	bne.n	8009ff4 <_strtol_l.constprop.0+0x8c>
 8009ff0:	45a2      	cmp	sl, r4
 8009ff2:	db19      	blt.n	800a028 <_strtol_l.constprop.0+0xc0>
 8009ff4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ff8:	f04f 0c01 	mov.w	ip, #1
 8009ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a000:	e7e8      	b.n	8009fd4 <_strtol_l.constprop.0+0x6c>
 800a002:	2c2b      	cmp	r4, #43	; 0x2b
 800a004:	bf04      	itt	eq
 800a006:	782c      	ldrbeq	r4, [r5, #0]
 800a008:	1cb5      	addeq	r5, r6, #2
 800a00a:	e7ca      	b.n	8009fa2 <_strtol_l.constprop.0+0x3a>
 800a00c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a010:	f1be 0f19 	cmp.w	lr, #25
 800a014:	d801      	bhi.n	800a01a <_strtol_l.constprop.0+0xb2>
 800a016:	3c37      	subs	r4, #55	; 0x37
 800a018:	e7e2      	b.n	8009fe0 <_strtol_l.constprop.0+0x78>
 800a01a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a01e:	f1be 0f19 	cmp.w	lr, #25
 800a022:	d804      	bhi.n	800a02e <_strtol_l.constprop.0+0xc6>
 800a024:	3c57      	subs	r4, #87	; 0x57
 800a026:	e7db      	b.n	8009fe0 <_strtol_l.constprop.0+0x78>
 800a028:	f04f 3cff 	mov.w	ip, #4294967295
 800a02c:	e7e6      	b.n	8009ffc <_strtol_l.constprop.0+0x94>
 800a02e:	f1bc 0f00 	cmp.w	ip, #0
 800a032:	da05      	bge.n	800a040 <_strtol_l.constprop.0+0xd8>
 800a034:	2322      	movs	r3, #34	; 0x22
 800a036:	6003      	str	r3, [r0, #0]
 800a038:	4646      	mov	r6, r8
 800a03a:	b942      	cbnz	r2, 800a04e <_strtol_l.constprop.0+0xe6>
 800a03c:	4630      	mov	r0, r6
 800a03e:	e79e      	b.n	8009f7e <_strtol_l.constprop.0+0x16>
 800a040:	b107      	cbz	r7, 800a044 <_strtol_l.constprop.0+0xdc>
 800a042:	4276      	negs	r6, r6
 800a044:	2a00      	cmp	r2, #0
 800a046:	d0f9      	beq.n	800a03c <_strtol_l.constprop.0+0xd4>
 800a048:	f1bc 0f00 	cmp.w	ip, #0
 800a04c:	d000      	beq.n	800a050 <_strtol_l.constprop.0+0xe8>
 800a04e:	1e69      	subs	r1, r5, #1
 800a050:	6011      	str	r1, [r2, #0]
 800a052:	e7f3      	b.n	800a03c <_strtol_l.constprop.0+0xd4>
 800a054:	2430      	movs	r4, #48	; 0x30
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1b1      	bne.n	8009fbe <_strtol_l.constprop.0+0x56>
 800a05a:	2308      	movs	r3, #8
 800a05c:	e7af      	b.n	8009fbe <_strtol_l.constprop.0+0x56>
 800a05e:	2c30      	cmp	r4, #48	; 0x30
 800a060:	d0a5      	beq.n	8009fae <_strtol_l.constprop.0+0x46>
 800a062:	230a      	movs	r3, #10
 800a064:	e7ab      	b.n	8009fbe <_strtol_l.constprop.0+0x56>
 800a066:	bf00      	nop
 800a068:	0800d029 	.word	0x0800d029

0800a06c <_strtol_r>:
 800a06c:	f7ff bf7c 	b.w	8009f68 <_strtol_l.constprop.0>

0800a070 <__swbuf_r>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	460e      	mov	r6, r1
 800a074:	4614      	mov	r4, r2
 800a076:	4605      	mov	r5, r0
 800a078:	b118      	cbz	r0, 800a082 <__swbuf_r+0x12>
 800a07a:	6983      	ldr	r3, [r0, #24]
 800a07c:	b90b      	cbnz	r3, 800a082 <__swbuf_r+0x12>
 800a07e:	f001 f84b 	bl	800b118 <__sinit>
 800a082:	4b21      	ldr	r3, [pc, #132]	; (800a108 <__swbuf_r+0x98>)
 800a084:	429c      	cmp	r4, r3
 800a086:	d12b      	bne.n	800a0e0 <__swbuf_r+0x70>
 800a088:	686c      	ldr	r4, [r5, #4]
 800a08a:	69a3      	ldr	r3, [r4, #24]
 800a08c:	60a3      	str	r3, [r4, #8]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	071a      	lsls	r2, r3, #28
 800a092:	d52f      	bpl.n	800a0f4 <__swbuf_r+0x84>
 800a094:	6923      	ldr	r3, [r4, #16]
 800a096:	b36b      	cbz	r3, 800a0f4 <__swbuf_r+0x84>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	1ac0      	subs	r0, r0, r3
 800a09e:	6963      	ldr	r3, [r4, #20]
 800a0a0:	b2f6      	uxtb	r6, r6
 800a0a2:	4283      	cmp	r3, r0
 800a0a4:	4637      	mov	r7, r6
 800a0a6:	dc04      	bgt.n	800a0b2 <__swbuf_r+0x42>
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f000 ffa0 	bl	800aff0 <_fflush_r>
 800a0b0:	bb30      	cbnz	r0, 800a100 <__swbuf_r+0x90>
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	60a3      	str	r3, [r4, #8]
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	6022      	str	r2, [r4, #0]
 800a0be:	701e      	strb	r6, [r3, #0]
 800a0c0:	6963      	ldr	r3, [r4, #20]
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	4283      	cmp	r3, r0
 800a0c6:	d004      	beq.n	800a0d2 <__swbuf_r+0x62>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	07db      	lsls	r3, r3, #31
 800a0cc:	d506      	bpl.n	800a0dc <__swbuf_r+0x6c>
 800a0ce:	2e0a      	cmp	r6, #10
 800a0d0:	d104      	bne.n	800a0dc <__swbuf_r+0x6c>
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 ff8b 	bl	800aff0 <_fflush_r>
 800a0da:	b988      	cbnz	r0, 800a100 <__swbuf_r+0x90>
 800a0dc:	4638      	mov	r0, r7
 800a0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <__swbuf_r+0x9c>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d101      	bne.n	800a0ea <__swbuf_r+0x7a>
 800a0e6:	68ac      	ldr	r4, [r5, #8]
 800a0e8:	e7cf      	b.n	800a08a <__swbuf_r+0x1a>
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <__swbuf_r+0xa0>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf08      	it	eq
 800a0f0:	68ec      	ldreq	r4, [r5, #12]
 800a0f2:	e7ca      	b.n	800a08a <__swbuf_r+0x1a>
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f000 f80c 	bl	800a114 <__swsetup_r>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d0cb      	beq.n	800a098 <__swbuf_r+0x28>
 800a100:	f04f 37ff 	mov.w	r7, #4294967295
 800a104:	e7ea      	b.n	800a0dc <__swbuf_r+0x6c>
 800a106:	bf00      	nop
 800a108:	0800d1dc 	.word	0x0800d1dc
 800a10c:	0800d1fc 	.word	0x0800d1fc
 800a110:	0800d1bc 	.word	0x0800d1bc

0800a114 <__swsetup_r>:
 800a114:	4b32      	ldr	r3, [pc, #200]	; (800a1e0 <__swsetup_r+0xcc>)
 800a116:	b570      	push	{r4, r5, r6, lr}
 800a118:	681d      	ldr	r5, [r3, #0]
 800a11a:	4606      	mov	r6, r0
 800a11c:	460c      	mov	r4, r1
 800a11e:	b125      	cbz	r5, 800a12a <__swsetup_r+0x16>
 800a120:	69ab      	ldr	r3, [r5, #24]
 800a122:	b913      	cbnz	r3, 800a12a <__swsetup_r+0x16>
 800a124:	4628      	mov	r0, r5
 800a126:	f000 fff7 	bl	800b118 <__sinit>
 800a12a:	4b2e      	ldr	r3, [pc, #184]	; (800a1e4 <__swsetup_r+0xd0>)
 800a12c:	429c      	cmp	r4, r3
 800a12e:	d10f      	bne.n	800a150 <__swsetup_r+0x3c>
 800a130:	686c      	ldr	r4, [r5, #4]
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a138:	0719      	lsls	r1, r3, #28
 800a13a:	d42c      	bmi.n	800a196 <__swsetup_r+0x82>
 800a13c:	06dd      	lsls	r5, r3, #27
 800a13e:	d411      	bmi.n	800a164 <__swsetup_r+0x50>
 800a140:	2309      	movs	r3, #9
 800a142:	6033      	str	r3, [r6, #0]
 800a144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	e03e      	b.n	800a1ce <__swsetup_r+0xba>
 800a150:	4b25      	ldr	r3, [pc, #148]	; (800a1e8 <__swsetup_r+0xd4>)
 800a152:	429c      	cmp	r4, r3
 800a154:	d101      	bne.n	800a15a <__swsetup_r+0x46>
 800a156:	68ac      	ldr	r4, [r5, #8]
 800a158:	e7eb      	b.n	800a132 <__swsetup_r+0x1e>
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <__swsetup_r+0xd8>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	bf08      	it	eq
 800a160:	68ec      	ldreq	r4, [r5, #12]
 800a162:	e7e6      	b.n	800a132 <__swsetup_r+0x1e>
 800a164:	0758      	lsls	r0, r3, #29
 800a166:	d512      	bpl.n	800a18e <__swsetup_r+0x7a>
 800a168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a16a:	b141      	cbz	r1, 800a17e <__swsetup_r+0x6a>
 800a16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a170:	4299      	cmp	r1, r3
 800a172:	d002      	beq.n	800a17a <__swsetup_r+0x66>
 800a174:	4630      	mov	r0, r6
 800a176:	f002 f947 	bl	800c408 <_free_r>
 800a17a:	2300      	movs	r3, #0
 800a17c:	6363      	str	r3, [r4, #52]	; 0x34
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	2300      	movs	r3, #0
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	f043 0308 	orr.w	r3, r3, #8
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	b94b      	cbnz	r3, 800a1ae <__swsetup_r+0x9a>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1a4:	d003      	beq.n	800a1ae <__swsetup_r+0x9a>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f001 fbed 	bl	800b988 <__smakebuf_r>
 800a1ae:	89a0      	ldrh	r0, [r4, #12]
 800a1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1b4:	f010 0301 	ands.w	r3, r0, #1
 800a1b8:	d00a      	beq.n	800a1d0 <__swsetup_r+0xbc>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60a3      	str	r3, [r4, #8]
 800a1be:	6963      	ldr	r3, [r4, #20]
 800a1c0:	425b      	negs	r3, r3
 800a1c2:	61a3      	str	r3, [r4, #24]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	b943      	cbnz	r3, 800a1da <__swsetup_r+0xc6>
 800a1c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1cc:	d1ba      	bne.n	800a144 <__swsetup_r+0x30>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	0781      	lsls	r1, r0, #30
 800a1d2:	bf58      	it	pl
 800a1d4:	6963      	ldrpl	r3, [r4, #20]
 800a1d6:	60a3      	str	r3, [r4, #8]
 800a1d8:	e7f4      	b.n	800a1c4 <__swsetup_r+0xb0>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	e7f7      	b.n	800a1ce <__swsetup_r+0xba>
 800a1de:	bf00      	nop
 800a1e0:	2000000c 	.word	0x2000000c
 800a1e4:	0800d1dc 	.word	0x0800d1dc
 800a1e8:	0800d1fc 	.word	0x0800d1fc
 800a1ec:	0800d1bc 	.word	0x0800d1bc

0800a1f0 <quorem>:
 800a1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	6903      	ldr	r3, [r0, #16]
 800a1f6:	690c      	ldr	r4, [r1, #16]
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	f2c0 8081 	blt.w	800a302 <quorem+0x112>
 800a200:	3c01      	subs	r4, #1
 800a202:	f101 0814 	add.w	r8, r1, #20
 800a206:	f100 0514 	add.w	r5, r0, #20
 800a20a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a218:	3301      	adds	r3, #1
 800a21a:	429a      	cmp	r2, r3
 800a21c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a224:	fbb2 f6f3 	udiv	r6, r2, r3
 800a228:	d331      	bcc.n	800a28e <quorem+0x9e>
 800a22a:	f04f 0e00 	mov.w	lr, #0
 800a22e:	4640      	mov	r0, r8
 800a230:	46ac      	mov	ip, r5
 800a232:	46f2      	mov	sl, lr
 800a234:	f850 2b04 	ldr.w	r2, [r0], #4
 800a238:	b293      	uxth	r3, r2
 800a23a:	fb06 e303 	mla	r3, r6, r3, lr
 800a23e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a242:	b29b      	uxth	r3, r3
 800a244:	ebaa 0303 	sub.w	r3, sl, r3
 800a248:	f8dc a000 	ldr.w	sl, [ip]
 800a24c:	0c12      	lsrs	r2, r2, #16
 800a24e:	fa13 f38a 	uxtah	r3, r3, sl
 800a252:	fb06 e202 	mla	r2, r6, r2, lr
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	9b00      	ldr	r3, [sp, #0]
 800a25a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a25e:	b292      	uxth	r2, r2
 800a260:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a268:	f8bd 3000 	ldrh.w	r3, [sp]
 800a26c:	4581      	cmp	r9, r0
 800a26e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a272:	f84c 3b04 	str.w	r3, [ip], #4
 800a276:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a27a:	d2db      	bcs.n	800a234 <quorem+0x44>
 800a27c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a280:	b92b      	cbnz	r3, 800a28e <quorem+0x9e>
 800a282:	9b01      	ldr	r3, [sp, #4]
 800a284:	3b04      	subs	r3, #4
 800a286:	429d      	cmp	r5, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	d32e      	bcc.n	800a2ea <quorem+0xfa>
 800a28c:	613c      	str	r4, [r7, #16]
 800a28e:	4638      	mov	r0, r7
 800a290:	f001 feae 	bl	800bff0 <__mcmp>
 800a294:	2800      	cmp	r0, #0
 800a296:	db24      	blt.n	800a2e2 <quorem+0xf2>
 800a298:	3601      	adds	r6, #1
 800a29a:	4628      	mov	r0, r5
 800a29c:	f04f 0c00 	mov.w	ip, #0
 800a2a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2a4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2a8:	b293      	uxth	r3, r2
 800a2aa:	ebac 0303 	sub.w	r3, ip, r3
 800a2ae:	0c12      	lsrs	r2, r2, #16
 800a2b0:	fa13 f38e 	uxtah	r3, r3, lr
 800a2b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2c2:	45c1      	cmp	r9, r8
 800a2c4:	f840 3b04 	str.w	r3, [r0], #4
 800a2c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2cc:	d2e8      	bcs.n	800a2a0 <quorem+0xb0>
 800a2ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2d6:	b922      	cbnz	r2, 800a2e2 <quorem+0xf2>
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	429d      	cmp	r5, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	d30a      	bcc.n	800a2f6 <quorem+0x106>
 800a2e0:	613c      	str	r4, [r7, #16]
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	b003      	add	sp, #12
 800a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	6812      	ldr	r2, [r2, #0]
 800a2ec:	3b04      	subs	r3, #4
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d1cc      	bne.n	800a28c <quorem+0x9c>
 800a2f2:	3c01      	subs	r4, #1
 800a2f4:	e7c7      	b.n	800a286 <quorem+0x96>
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	d1f0      	bne.n	800a2e0 <quorem+0xf0>
 800a2fe:	3c01      	subs	r4, #1
 800a300:	e7eb      	b.n	800a2da <quorem+0xea>
 800a302:	2000      	movs	r0, #0
 800a304:	e7ee      	b.n	800a2e4 <quorem+0xf4>
	...

0800a308 <_dtoa_r>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ed2d 8b04 	vpush	{d8-d9}
 800a310:	ec57 6b10 	vmov	r6, r7, d0
 800a314:	b093      	sub	sp, #76	; 0x4c
 800a316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a318:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a31c:	9106      	str	r1, [sp, #24]
 800a31e:	ee10 aa10 	vmov	sl, s0
 800a322:	4604      	mov	r4, r0
 800a324:	9209      	str	r2, [sp, #36]	; 0x24
 800a326:	930c      	str	r3, [sp, #48]	; 0x30
 800a328:	46bb      	mov	fp, r7
 800a32a:	b975      	cbnz	r5, 800a34a <_dtoa_r+0x42>
 800a32c:	2010      	movs	r0, #16
 800a32e:	f001 fb6b 	bl	800ba08 <malloc>
 800a332:	4602      	mov	r2, r0
 800a334:	6260      	str	r0, [r4, #36]	; 0x24
 800a336:	b920      	cbnz	r0, 800a342 <_dtoa_r+0x3a>
 800a338:	4ba7      	ldr	r3, [pc, #668]	; (800a5d8 <_dtoa_r+0x2d0>)
 800a33a:	21ea      	movs	r1, #234	; 0xea
 800a33c:	48a7      	ldr	r0, [pc, #668]	; (800a5dc <_dtoa_r+0x2d4>)
 800a33e:	f002 fc89 	bl	800cc54 <__assert_func>
 800a342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a346:	6005      	str	r5, [r0, #0]
 800a348:	60c5      	str	r5, [r0, #12]
 800a34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	b151      	cbz	r1, 800a366 <_dtoa_r+0x5e>
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	604a      	str	r2, [r1, #4]
 800a354:	2301      	movs	r3, #1
 800a356:	4093      	lsls	r3, r2
 800a358:	608b      	str	r3, [r1, #8]
 800a35a:	4620      	mov	r0, r4
 800a35c:	f001 fbbc 	bl	800bad8 <_Bfree>
 800a360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	1e3b      	subs	r3, r7, #0
 800a368:	bfaa      	itet	ge
 800a36a:	2300      	movge	r3, #0
 800a36c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a370:	f8c8 3000 	strge.w	r3, [r8]
 800a374:	4b9a      	ldr	r3, [pc, #616]	; (800a5e0 <_dtoa_r+0x2d8>)
 800a376:	bfbc      	itt	lt
 800a378:	2201      	movlt	r2, #1
 800a37a:	f8c8 2000 	strlt.w	r2, [r8]
 800a37e:	ea33 030b 	bics.w	r3, r3, fp
 800a382:	d11b      	bne.n	800a3bc <_dtoa_r+0xb4>
 800a384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a386:	f242 730f 	movw	r3, #9999	; 0x270f
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a390:	4333      	orrs	r3, r6
 800a392:	f000 8592 	beq.w	800aeba <_dtoa_r+0xbb2>
 800a396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a398:	b963      	cbnz	r3, 800a3b4 <_dtoa_r+0xac>
 800a39a:	4b92      	ldr	r3, [pc, #584]	; (800a5e4 <_dtoa_r+0x2dc>)
 800a39c:	e022      	b.n	800a3e4 <_dtoa_r+0xdc>
 800a39e:	4b92      	ldr	r3, [pc, #584]	; (800a5e8 <_dtoa_r+0x2e0>)
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	9801      	ldr	r0, [sp, #4]
 800a3aa:	b013      	add	sp, #76	; 0x4c
 800a3ac:	ecbd 8b04 	vpop	{d8-d9}
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	4b8b      	ldr	r3, [pc, #556]	; (800a5e4 <_dtoa_r+0x2dc>)
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	3303      	adds	r3, #3
 800a3ba:	e7f3      	b.n	800a3a4 <_dtoa_r+0x9c>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	f7f6 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c8:	ec4b ab19 	vmov	d9, sl, fp
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	b158      	cbz	r0, 800a3e8 <_dtoa_r+0xe0>
 800a3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 856b 	beq.w	800aeb4 <_dtoa_r+0xbac>
 800a3de:	4883      	ldr	r0, [pc, #524]	; (800a5ec <_dtoa_r+0x2e4>)
 800a3e0:	6018      	str	r0, [r3, #0]
 800a3e2:	1e43      	subs	r3, r0, #1
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	e7df      	b.n	800a3a8 <_dtoa_r+0xa0>
 800a3e8:	ec4b ab10 	vmov	d0, sl, fp
 800a3ec:	aa10      	add	r2, sp, #64	; 0x40
 800a3ee:	a911      	add	r1, sp, #68	; 0x44
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f001 ff1f 	bl	800c234 <__d2b>
 800a3f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a3fa:	ee08 0a10 	vmov	s16, r0
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	f000 8084 	beq.w	800a50c <_dtoa_r+0x204>
 800a404:	ee19 3a90 	vmov	r3, s19
 800a408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a40c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a410:	4656      	mov	r6, sl
 800a412:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a41a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a41e:	4b74      	ldr	r3, [pc, #464]	; (800a5f0 <_dtoa_r+0x2e8>)
 800a420:	2200      	movs	r2, #0
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f5 ff2f 	bl	8000288 <__aeabi_dsub>
 800a42a:	a365      	add	r3, pc, #404	; (adr r3, 800a5c0 <_dtoa_r+0x2b8>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	a364      	add	r3, pc, #400	; (adr r3, 800a5c8 <_dtoa_r+0x2c0>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f5 ff27 	bl	800028c <__adddf3>
 800a43e:	4606      	mov	r6, r0
 800a440:	4628      	mov	r0, r5
 800a442:	460f      	mov	r7, r1
 800a444:	f7f6 f86e 	bl	8000524 <__aeabi_i2d>
 800a448:	a361      	add	r3, pc, #388	; (adr r3, 800a5d0 <_dtoa_r+0x2c8>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f6 f8d3 	bl	80005f8 <__aeabi_dmul>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f5 ff17 	bl	800028c <__adddf3>
 800a45e:	4606      	mov	r6, r0
 800a460:	460f      	mov	r7, r1
 800a462:	f7f6 fb79 	bl	8000b58 <__aeabi_d2iz>
 800a466:	2200      	movs	r2, #0
 800a468:	9000      	str	r0, [sp, #0]
 800a46a:	2300      	movs	r3, #0
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f6 fb34 	bl	8000adc <__aeabi_dcmplt>
 800a474:	b150      	cbz	r0, 800a48c <_dtoa_r+0x184>
 800a476:	9800      	ldr	r0, [sp, #0]
 800a478:	f7f6 f854 	bl	8000524 <__aeabi_i2d>
 800a47c:	4632      	mov	r2, r6
 800a47e:	463b      	mov	r3, r7
 800a480:	f7f6 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a484:	b910      	cbnz	r0, 800a48c <_dtoa_r+0x184>
 800a486:	9b00      	ldr	r3, [sp, #0]
 800a488:	3b01      	subs	r3, #1
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9b00      	ldr	r3, [sp, #0]
 800a48e:	2b16      	cmp	r3, #22
 800a490:	d85a      	bhi.n	800a548 <_dtoa_r+0x240>
 800a492:	9a00      	ldr	r2, [sp, #0]
 800a494:	4b57      	ldr	r3, [pc, #348]	; (800a5f4 <_dtoa_r+0x2ec>)
 800a496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	ec51 0b19 	vmov	r0, r1, d9
 800a4a2:	f7f6 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d050      	beq.n	800a54c <_dtoa_r+0x244>
 800a4aa:	9b00      	ldr	r3, [sp, #0]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4b6:	1b5d      	subs	r5, r3, r5
 800a4b8:	1e6b      	subs	r3, r5, #1
 800a4ba:	9305      	str	r3, [sp, #20]
 800a4bc:	bf45      	ittet	mi
 800a4be:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4c2:	9304      	strmi	r3, [sp, #16]
 800a4c4:	2300      	movpl	r3, #0
 800a4c6:	2300      	movmi	r3, #0
 800a4c8:	bf4c      	ite	mi
 800a4ca:	9305      	strmi	r3, [sp, #20]
 800a4cc:	9304      	strpl	r3, [sp, #16]
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	db3d      	blt.n	800a550 <_dtoa_r+0x248>
 800a4d4:	9b05      	ldr	r3, [sp, #20]
 800a4d6:	9a00      	ldr	r2, [sp, #0]
 800a4d8:	920a      	str	r2, [sp, #40]	; 0x28
 800a4da:	4413      	add	r3, r2
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9307      	str	r3, [sp, #28]
 800a4e2:	9b06      	ldr	r3, [sp, #24]
 800a4e4:	2b09      	cmp	r3, #9
 800a4e6:	f200 8089 	bhi.w	800a5fc <_dtoa_r+0x2f4>
 800a4ea:	2b05      	cmp	r3, #5
 800a4ec:	bfc4      	itt	gt
 800a4ee:	3b04      	subgt	r3, #4
 800a4f0:	9306      	strgt	r3, [sp, #24]
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	f1a3 0302 	sub.w	r3, r3, #2
 800a4f8:	bfcc      	ite	gt
 800a4fa:	2500      	movgt	r5, #0
 800a4fc:	2501      	movle	r5, #1
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	f200 8087 	bhi.w	800a612 <_dtoa_r+0x30a>
 800a504:	e8df f003 	tbb	[pc, r3]
 800a508:	59383a2d 	.word	0x59383a2d
 800a50c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a510:	441d      	add	r5, r3
 800a512:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a516:	2b20      	cmp	r3, #32
 800a518:	bfc1      	itttt	gt
 800a51a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a51e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a522:	fa0b f303 	lslgt.w	r3, fp, r3
 800a526:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a52a:	bfda      	itte	le
 800a52c:	f1c3 0320 	rsble	r3, r3, #32
 800a530:	fa06 f003 	lslle.w	r0, r6, r3
 800a534:	4318      	orrgt	r0, r3
 800a536:	f7f5 ffe5 	bl	8000504 <__aeabi_ui2d>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4606      	mov	r6, r0
 800a53e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a542:	3d01      	subs	r5, #1
 800a544:	930e      	str	r3, [sp, #56]	; 0x38
 800a546:	e76a      	b.n	800a41e <_dtoa_r+0x116>
 800a548:	2301      	movs	r3, #1
 800a54a:	e7b2      	b.n	800a4b2 <_dtoa_r+0x1aa>
 800a54c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a54e:	e7b1      	b.n	800a4b4 <_dtoa_r+0x1ac>
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	9a00      	ldr	r2, [sp, #0]
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	9304      	str	r3, [sp, #16]
 800a558:	4253      	negs	r3, r2
 800a55a:	9307      	str	r3, [sp, #28]
 800a55c:	2300      	movs	r3, #0
 800a55e:	930a      	str	r3, [sp, #40]	; 0x28
 800a560:	e7bf      	b.n	800a4e2 <_dtoa_r+0x1da>
 800a562:	2300      	movs	r3, #0
 800a564:	9308      	str	r3, [sp, #32]
 800a566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc55      	bgt.n	800a618 <_dtoa_r+0x310>
 800a56c:	2301      	movs	r3, #1
 800a56e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a572:	461a      	mov	r2, r3
 800a574:	9209      	str	r2, [sp, #36]	; 0x24
 800a576:	e00c      	b.n	800a592 <_dtoa_r+0x28a>
 800a578:	2301      	movs	r3, #1
 800a57a:	e7f3      	b.n	800a564 <_dtoa_r+0x25c>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	9b00      	ldr	r3, [sp, #0]
 800a584:	4413      	add	r3, r2
 800a586:	9302      	str	r3, [sp, #8]
 800a588:	3301      	adds	r3, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	bfb8      	it	lt
 800a590:	2301      	movlt	r3, #1
 800a592:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a594:	2200      	movs	r2, #0
 800a596:	6042      	str	r2, [r0, #4]
 800a598:	2204      	movs	r2, #4
 800a59a:	f102 0614 	add.w	r6, r2, #20
 800a59e:	429e      	cmp	r6, r3
 800a5a0:	6841      	ldr	r1, [r0, #4]
 800a5a2:	d93d      	bls.n	800a620 <_dtoa_r+0x318>
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f001 fa57 	bl	800ba58 <_Balloc>
 800a5aa:	9001      	str	r0, [sp, #4]
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d13b      	bne.n	800a628 <_dtoa_r+0x320>
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <_dtoa_r+0x2f0>)
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5b8:	e6c0      	b.n	800a33c <_dtoa_r+0x34>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e7df      	b.n	800a57e <_dtoa_r+0x276>
 800a5be:	bf00      	nop
 800a5c0:	636f4361 	.word	0x636f4361
 800a5c4:	3fd287a7 	.word	0x3fd287a7
 800a5c8:	8b60c8b3 	.word	0x8b60c8b3
 800a5cc:	3fc68a28 	.word	0x3fc68a28
 800a5d0:	509f79fb 	.word	0x509f79fb
 800a5d4:	3fd34413 	.word	0x3fd34413
 800a5d8:	0800d136 	.word	0x0800d136
 800a5dc:	0800d14d 	.word	0x0800d14d
 800a5e0:	7ff00000 	.word	0x7ff00000
 800a5e4:	0800d132 	.word	0x0800d132
 800a5e8:	0800d129 	.word	0x0800d129
 800a5ec:	0800cfad 	.word	0x0800cfad
 800a5f0:	3ff80000 	.word	0x3ff80000
 800a5f4:	0800d320 	.word	0x0800d320
 800a5f8:	0800d1a8 	.word	0x0800d1a8
 800a5fc:	2501      	movs	r5, #1
 800a5fe:	2300      	movs	r3, #0
 800a600:	9306      	str	r3, [sp, #24]
 800a602:	9508      	str	r5, [sp, #32]
 800a604:	f04f 33ff 	mov.w	r3, #4294967295
 800a608:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	2312      	movs	r3, #18
 800a610:	e7b0      	b.n	800a574 <_dtoa_r+0x26c>
 800a612:	2301      	movs	r3, #1
 800a614:	9308      	str	r3, [sp, #32]
 800a616:	e7f5      	b.n	800a604 <_dtoa_r+0x2fc>
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a61e:	e7b8      	b.n	800a592 <_dtoa_r+0x28a>
 800a620:	3101      	adds	r1, #1
 800a622:	6041      	str	r1, [r0, #4]
 800a624:	0052      	lsls	r2, r2, #1
 800a626:	e7b8      	b.n	800a59a <_dtoa_r+0x292>
 800a628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a62a:	9a01      	ldr	r2, [sp, #4]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	9b03      	ldr	r3, [sp, #12]
 800a630:	2b0e      	cmp	r3, #14
 800a632:	f200 809d 	bhi.w	800a770 <_dtoa_r+0x468>
 800a636:	2d00      	cmp	r5, #0
 800a638:	f000 809a 	beq.w	800a770 <_dtoa_r+0x468>
 800a63c:	9b00      	ldr	r3, [sp, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	dd32      	ble.n	800a6a8 <_dtoa_r+0x3a0>
 800a642:	4ab7      	ldr	r2, [pc, #732]	; (800a920 <_dtoa_r+0x618>)
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a64c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a650:	9b00      	ldr	r3, [sp, #0]
 800a652:	05d8      	lsls	r0, r3, #23
 800a654:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a658:	d516      	bpl.n	800a688 <_dtoa_r+0x380>
 800a65a:	4bb2      	ldr	r3, [pc, #712]	; (800a924 <_dtoa_r+0x61c>)
 800a65c:	ec51 0b19 	vmov	r0, r1, d9
 800a660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a664:	f7f6 f8f2 	bl	800084c <__aeabi_ddiv>
 800a668:	f007 070f 	and.w	r7, r7, #15
 800a66c:	4682      	mov	sl, r0
 800a66e:	468b      	mov	fp, r1
 800a670:	2503      	movs	r5, #3
 800a672:	4eac      	ldr	r6, [pc, #688]	; (800a924 <_dtoa_r+0x61c>)
 800a674:	b957      	cbnz	r7, 800a68c <_dtoa_r+0x384>
 800a676:	4642      	mov	r2, r8
 800a678:	464b      	mov	r3, r9
 800a67a:	4650      	mov	r0, sl
 800a67c:	4659      	mov	r1, fp
 800a67e:	f7f6 f8e5 	bl	800084c <__aeabi_ddiv>
 800a682:	4682      	mov	sl, r0
 800a684:	468b      	mov	fp, r1
 800a686:	e028      	b.n	800a6da <_dtoa_r+0x3d2>
 800a688:	2502      	movs	r5, #2
 800a68a:	e7f2      	b.n	800a672 <_dtoa_r+0x36a>
 800a68c:	07f9      	lsls	r1, r7, #31
 800a68e:	d508      	bpl.n	800a6a2 <_dtoa_r+0x39a>
 800a690:	4640      	mov	r0, r8
 800a692:	4649      	mov	r1, r9
 800a694:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a698:	f7f5 ffae 	bl	80005f8 <__aeabi_dmul>
 800a69c:	3501      	adds	r5, #1
 800a69e:	4680      	mov	r8, r0
 800a6a0:	4689      	mov	r9, r1
 800a6a2:	107f      	asrs	r7, r7, #1
 800a6a4:	3608      	adds	r6, #8
 800a6a6:	e7e5      	b.n	800a674 <_dtoa_r+0x36c>
 800a6a8:	f000 809b 	beq.w	800a7e2 <_dtoa_r+0x4da>
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	4f9d      	ldr	r7, [pc, #628]	; (800a924 <_dtoa_r+0x61c>)
 800a6b0:	425e      	negs	r6, r3
 800a6b2:	4b9b      	ldr	r3, [pc, #620]	; (800a920 <_dtoa_r+0x618>)
 800a6b4:	f006 020f 	and.w	r2, r6, #15
 800a6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	ec51 0b19 	vmov	r0, r1, d9
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	1136      	asrs	r6, r6, #4
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2502      	movs	r5, #2
 800a6d2:	2e00      	cmp	r6, #0
 800a6d4:	d17a      	bne.n	800a7cc <_dtoa_r+0x4c4>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1d3      	bne.n	800a682 <_dtoa_r+0x37a>
 800a6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 8082 	beq.w	800a7e6 <_dtoa_r+0x4de>
 800a6e2:	4b91      	ldr	r3, [pc, #580]	; (800a928 <_dtoa_r+0x620>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4650      	mov	r0, sl
 800a6e8:	4659      	mov	r1, fp
 800a6ea:	f7f6 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d079      	beq.n	800a7e6 <_dtoa_r+0x4de>
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d076      	beq.n	800a7e6 <_dtoa_r+0x4de>
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dd36      	ble.n	800a76c <_dtoa_r+0x464>
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	1e5f      	subs	r7, r3, #1
 800a706:	2200      	movs	r2, #0
 800a708:	4b88      	ldr	r3, [pc, #544]	; (800a92c <_dtoa_r+0x624>)
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	9e02      	ldr	r6, [sp, #8]
 800a710:	4682      	mov	sl, r0
 800a712:	468b      	mov	fp, r1
 800a714:	3501      	adds	r5, #1
 800a716:	4628      	mov	r0, r5
 800a718:	f7f5 ff04 	bl	8000524 <__aeabi_i2d>
 800a71c:	4652      	mov	r2, sl
 800a71e:	465b      	mov	r3, fp
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4b82      	ldr	r3, [pc, #520]	; (800a930 <_dtoa_r+0x628>)
 800a726:	2200      	movs	r2, #0
 800a728:	f7f5 fdb0 	bl	800028c <__adddf3>
 800a72c:	46d0      	mov	r8, sl
 800a72e:	46d9      	mov	r9, fp
 800a730:	4682      	mov	sl, r0
 800a732:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a736:	2e00      	cmp	r6, #0
 800a738:	d158      	bne.n	800a7ec <_dtoa_r+0x4e4>
 800a73a:	4b7e      	ldr	r3, [pc, #504]	; (800a934 <_dtoa_r+0x62c>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	4640      	mov	r0, r8
 800a740:	4649      	mov	r1, r9
 800a742:	f7f5 fda1 	bl	8000288 <__aeabi_dsub>
 800a746:	4652      	mov	r2, sl
 800a748:	465b      	mov	r3, fp
 800a74a:	4680      	mov	r8, r0
 800a74c:	4689      	mov	r9, r1
 800a74e:	f7f6 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 800a752:	2800      	cmp	r0, #0
 800a754:	f040 8295 	bne.w	800ac82 <_dtoa_r+0x97a>
 800a758:	4652      	mov	r2, sl
 800a75a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f6 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f040 8289 	bne.w	800ac7e <_dtoa_r+0x976>
 800a76c:	ec5b ab19 	vmov	sl, fp, d9
 800a770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a772:	2b00      	cmp	r3, #0
 800a774:	f2c0 8148 	blt.w	800aa08 <_dtoa_r+0x700>
 800a778:	9a00      	ldr	r2, [sp, #0]
 800a77a:	2a0e      	cmp	r2, #14
 800a77c:	f300 8144 	bgt.w	800aa08 <_dtoa_r+0x700>
 800a780:	4b67      	ldr	r3, [pc, #412]	; (800a920 <_dtoa_r+0x618>)
 800a782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a786:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f280 80d5 	bge.w	800a93c <_dtoa_r+0x634>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f300 80d1 	bgt.w	800a93c <_dtoa_r+0x634>
 800a79a:	f040 826f 	bne.w	800ac7c <_dtoa_r+0x974>
 800a79e:	4b65      	ldr	r3, [pc, #404]	; (800a934 <_dtoa_r+0x62c>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f5 ff27 	bl	80005f8 <__aeabi_dmul>
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	f7f6 f9a9 	bl	8000b04 <__aeabi_dcmpge>
 800a7b2:	9e03      	ldr	r6, [sp, #12]
 800a7b4:	4637      	mov	r7, r6
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f040 8245 	bne.w	800ac46 <_dtoa_r+0x93e>
 800a7bc:	9d01      	ldr	r5, [sp, #4]
 800a7be:	2331      	movs	r3, #49	; 0x31
 800a7c0:	f805 3b01 	strb.w	r3, [r5], #1
 800a7c4:	9b00      	ldr	r3, [sp, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	e240      	b.n	800ac4e <_dtoa_r+0x946>
 800a7cc:	07f2      	lsls	r2, r6, #31
 800a7ce:	d505      	bpl.n	800a7dc <_dtoa_r+0x4d4>
 800a7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d4:	f7f5 ff10 	bl	80005f8 <__aeabi_dmul>
 800a7d8:	3501      	adds	r5, #1
 800a7da:	2301      	movs	r3, #1
 800a7dc:	1076      	asrs	r6, r6, #1
 800a7de:	3708      	adds	r7, #8
 800a7e0:	e777      	b.n	800a6d2 <_dtoa_r+0x3ca>
 800a7e2:	2502      	movs	r5, #2
 800a7e4:	e779      	b.n	800a6da <_dtoa_r+0x3d2>
 800a7e6:	9f00      	ldr	r7, [sp, #0]
 800a7e8:	9e03      	ldr	r6, [sp, #12]
 800a7ea:	e794      	b.n	800a716 <_dtoa_r+0x40e>
 800a7ec:	9901      	ldr	r1, [sp, #4]
 800a7ee:	4b4c      	ldr	r3, [pc, #304]	; (800a920 <_dtoa_r+0x618>)
 800a7f0:	4431      	add	r1, r6
 800a7f2:	910d      	str	r1, [sp, #52]	; 0x34
 800a7f4:	9908      	ldr	r1, [sp, #32]
 800a7f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7fe:	2900      	cmp	r1, #0
 800a800:	d043      	beq.n	800a88a <_dtoa_r+0x582>
 800a802:	494d      	ldr	r1, [pc, #308]	; (800a938 <_dtoa_r+0x630>)
 800a804:	2000      	movs	r0, #0
 800a806:	f7f6 f821 	bl	800084c <__aeabi_ddiv>
 800a80a:	4652      	mov	r2, sl
 800a80c:	465b      	mov	r3, fp
 800a80e:	f7f5 fd3b 	bl	8000288 <__aeabi_dsub>
 800a812:	9d01      	ldr	r5, [sp, #4]
 800a814:	4682      	mov	sl, r0
 800a816:	468b      	mov	fp, r1
 800a818:	4649      	mov	r1, r9
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7f6 f99c 	bl	8000b58 <__aeabi_d2iz>
 800a820:	4606      	mov	r6, r0
 800a822:	f7f5 fe7f 	bl	8000524 <__aeabi_i2d>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	f7f5 fd2b 	bl	8000288 <__aeabi_dsub>
 800a832:	3630      	adds	r6, #48	; 0x30
 800a834:	f805 6b01 	strb.w	r6, [r5], #1
 800a838:	4652      	mov	r2, sl
 800a83a:	465b      	mov	r3, fp
 800a83c:	4680      	mov	r8, r0
 800a83e:	4689      	mov	r9, r1
 800a840:	f7f6 f94c 	bl	8000adc <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	d163      	bne.n	800a910 <_dtoa_r+0x608>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	4936      	ldr	r1, [pc, #216]	; (800a928 <_dtoa_r+0x620>)
 800a84e:	2000      	movs	r0, #0
 800a850:	f7f5 fd1a 	bl	8000288 <__aeabi_dsub>
 800a854:	4652      	mov	r2, sl
 800a856:	465b      	mov	r3, fp
 800a858:	f7f6 f940 	bl	8000adc <__aeabi_dcmplt>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f040 80b5 	bne.w	800a9cc <_dtoa_r+0x6c4>
 800a862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a864:	429d      	cmp	r5, r3
 800a866:	d081      	beq.n	800a76c <_dtoa_r+0x464>
 800a868:	4b30      	ldr	r3, [pc, #192]	; (800a92c <_dtoa_r+0x624>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	4650      	mov	r0, sl
 800a86e:	4659      	mov	r1, fp
 800a870:	f7f5 fec2 	bl	80005f8 <__aeabi_dmul>
 800a874:	4b2d      	ldr	r3, [pc, #180]	; (800a92c <_dtoa_r+0x624>)
 800a876:	4682      	mov	sl, r0
 800a878:	468b      	mov	fp, r1
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	2200      	movs	r2, #0
 800a880:	f7f5 feba 	bl	80005f8 <__aeabi_dmul>
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	e7c6      	b.n	800a818 <_dtoa_r+0x510>
 800a88a:	4650      	mov	r0, sl
 800a88c:	4659      	mov	r1, fp
 800a88e:	f7f5 feb3 	bl	80005f8 <__aeabi_dmul>
 800a892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a894:	9d01      	ldr	r5, [sp, #4]
 800a896:	930f      	str	r3, [sp, #60]	; 0x3c
 800a898:	4682      	mov	sl, r0
 800a89a:	468b      	mov	fp, r1
 800a89c:	4649      	mov	r1, r9
 800a89e:	4640      	mov	r0, r8
 800a8a0:	f7f6 f95a 	bl	8000b58 <__aeabi_d2iz>
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	f7f5 fe3d 	bl	8000524 <__aeabi_i2d>
 800a8aa:	3630      	adds	r6, #48	; 0x30
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f5 fce8 	bl	8000288 <__aeabi_dsub>
 800a8b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	f04f 0200 	mov.w	r2, #0
 800a8c8:	d124      	bne.n	800a914 <_dtoa_r+0x60c>
 800a8ca:	4b1b      	ldr	r3, [pc, #108]	; (800a938 <_dtoa_r+0x630>)
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	f7f5 fcdc 	bl	800028c <__adddf3>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f6 f91c 	bl	8000b18 <__aeabi_dcmpgt>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d173      	bne.n	800a9cc <_dtoa_r+0x6c4>
 800a8e4:	4652      	mov	r2, sl
 800a8e6:	465b      	mov	r3, fp
 800a8e8:	4913      	ldr	r1, [pc, #76]	; (800a938 <_dtoa_r+0x630>)
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	f7f5 fccc 	bl	8000288 <__aeabi_dsub>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	4649      	mov	r1, r9
 800a8f8:	f7f6 f8f0 	bl	8000adc <__aeabi_dcmplt>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f43f af35 	beq.w	800a76c <_dtoa_r+0x464>
 800a902:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a904:	1e6b      	subs	r3, r5, #1
 800a906:	930f      	str	r3, [sp, #60]	; 0x3c
 800a908:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a90c:	2b30      	cmp	r3, #48	; 0x30
 800a90e:	d0f8      	beq.n	800a902 <_dtoa_r+0x5fa>
 800a910:	9700      	str	r7, [sp, #0]
 800a912:	e049      	b.n	800a9a8 <_dtoa_r+0x6a0>
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <_dtoa_r+0x624>)
 800a916:	f7f5 fe6f 	bl	80005f8 <__aeabi_dmul>
 800a91a:	4680      	mov	r8, r0
 800a91c:	4689      	mov	r9, r1
 800a91e:	e7bd      	b.n	800a89c <_dtoa_r+0x594>
 800a920:	0800d320 	.word	0x0800d320
 800a924:	0800d2f8 	.word	0x0800d2f8
 800a928:	3ff00000 	.word	0x3ff00000
 800a92c:	40240000 	.word	0x40240000
 800a930:	401c0000 	.word	0x401c0000
 800a934:	40140000 	.word	0x40140000
 800a938:	3fe00000 	.word	0x3fe00000
 800a93c:	9d01      	ldr	r5, [sp, #4]
 800a93e:	4656      	mov	r6, sl
 800a940:	465f      	mov	r7, fp
 800a942:	4642      	mov	r2, r8
 800a944:	464b      	mov	r3, r9
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	f7f5 ff7f 	bl	800084c <__aeabi_ddiv>
 800a94e:	f7f6 f903 	bl	8000b58 <__aeabi_d2iz>
 800a952:	4682      	mov	sl, r0
 800a954:	f7f5 fde6 	bl	8000524 <__aeabi_i2d>
 800a958:	4642      	mov	r2, r8
 800a95a:	464b      	mov	r3, r9
 800a95c:	f7f5 fe4c 	bl	80005f8 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a96c:	f7f5 fc8c 	bl	8000288 <__aeabi_dsub>
 800a970:	f805 6b01 	strb.w	r6, [r5], #1
 800a974:	9e01      	ldr	r6, [sp, #4]
 800a976:	9f03      	ldr	r7, [sp, #12]
 800a978:	1bae      	subs	r6, r5, r6
 800a97a:	42b7      	cmp	r7, r6
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	d135      	bne.n	800a9ee <_dtoa_r+0x6e6>
 800a982:	f7f5 fc83 	bl	800028c <__adddf3>
 800a986:	4642      	mov	r2, r8
 800a988:	464b      	mov	r3, r9
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	f7f6 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800a992:	b9d0      	cbnz	r0, 800a9ca <_dtoa_r+0x6c2>
 800a994:	4642      	mov	r2, r8
 800a996:	464b      	mov	r3, r9
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f6 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a0:	b110      	cbz	r0, 800a9a8 <_dtoa_r+0x6a0>
 800a9a2:	f01a 0f01 	tst.w	sl, #1
 800a9a6:	d110      	bne.n	800a9ca <_dtoa_r+0x6c2>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	ee18 1a10 	vmov	r1, s16
 800a9ae:	f001 f893 	bl	800bad8 <_Bfree>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9800      	ldr	r0, [sp, #0]
 800a9b6:	702b      	strb	r3, [r5, #0]
 800a9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	6018      	str	r0, [r3, #0]
 800a9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f43f acf1 	beq.w	800a3a8 <_dtoa_r+0xa0>
 800a9c6:	601d      	str	r5, [r3, #0]
 800a9c8:	e4ee      	b.n	800a3a8 <_dtoa_r+0xa0>
 800a9ca:	9f00      	ldr	r7, [sp, #0]
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9d4:	2a39      	cmp	r2, #57	; 0x39
 800a9d6:	d106      	bne.n	800a9e6 <_dtoa_r+0x6de>
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d1f7      	bne.n	800a9ce <_dtoa_r+0x6c6>
 800a9de:	9901      	ldr	r1, [sp, #4]
 800a9e0:	2230      	movs	r2, #48	; 0x30
 800a9e2:	3701      	adds	r7, #1
 800a9e4:	700a      	strb	r2, [r1, #0]
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	e790      	b.n	800a910 <_dtoa_r+0x608>
 800a9ee:	4ba6      	ldr	r3, [pc, #664]	; (800ac88 <_dtoa_r+0x980>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f7f5 fe01 	bl	80005f8 <__aeabi_dmul>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	f7f6 f863 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d09d      	beq.n	800a942 <_dtoa_r+0x63a>
 800aa06:	e7cf      	b.n	800a9a8 <_dtoa_r+0x6a0>
 800aa08:	9a08      	ldr	r2, [sp, #32]
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	f000 80d7 	beq.w	800abbe <_dtoa_r+0x8b6>
 800aa10:	9a06      	ldr	r2, [sp, #24]
 800aa12:	2a01      	cmp	r2, #1
 800aa14:	f300 80ba 	bgt.w	800ab8c <_dtoa_r+0x884>
 800aa18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	f000 80b2 	beq.w	800ab84 <_dtoa_r+0x87c>
 800aa20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa24:	9e07      	ldr	r6, [sp, #28]
 800aa26:	9d04      	ldr	r5, [sp, #16]
 800aa28:	9a04      	ldr	r2, [sp, #16]
 800aa2a:	441a      	add	r2, r3
 800aa2c:	9204      	str	r2, [sp, #16]
 800aa2e:	9a05      	ldr	r2, [sp, #20]
 800aa30:	2101      	movs	r1, #1
 800aa32:	441a      	add	r2, r3
 800aa34:	4620      	mov	r0, r4
 800aa36:	9205      	str	r2, [sp, #20]
 800aa38:	f001 f950 	bl	800bcdc <__i2b>
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	dd0c      	ble.n	800aa5c <_dtoa_r+0x754>
 800aa42:	9b05      	ldr	r3, [sp, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd09      	ble.n	800aa5c <_dtoa_r+0x754>
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	9a04      	ldr	r2, [sp, #16]
 800aa4c:	bfa8      	it	ge
 800aa4e:	462b      	movge	r3, r5
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	9204      	str	r2, [sp, #16]
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	1aed      	subs	r5, r5, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	b31b      	cbz	r3, 800aaa8 <_dtoa_r+0x7a0>
 800aa60:	9b08      	ldr	r3, [sp, #32]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80af 	beq.w	800abc6 <_dtoa_r+0x8be>
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	dd13      	ble.n	800aa94 <_dtoa_r+0x78c>
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	4632      	mov	r2, r6
 800aa70:	4620      	mov	r0, r4
 800aa72:	f001 f9f3 	bl	800be5c <__pow5mult>
 800aa76:	ee18 2a10 	vmov	r2, s16
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f001 f942 	bl	800bd08 <__multiply>
 800aa84:	ee18 1a10 	vmov	r1, s16
 800aa88:	4680      	mov	r8, r0
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f001 f824 	bl	800bad8 <_Bfree>
 800aa90:	ee08 8a10 	vmov	s16, r8
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	1b9a      	subs	r2, r3, r6
 800aa98:	d006      	beq.n	800aaa8 <_dtoa_r+0x7a0>
 800aa9a:	ee18 1a10 	vmov	r1, s16
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f001 f9dc 	bl	800be5c <__pow5mult>
 800aaa4:	ee08 0a10 	vmov	s16, r0
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f001 f916 	bl	800bcdc <__i2b>
 800aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	4606      	mov	r6, r0
 800aab6:	f340 8088 	ble.w	800abca <_dtoa_r+0x8c2>
 800aaba:	461a      	mov	r2, r3
 800aabc:	4601      	mov	r1, r0
 800aabe:	4620      	mov	r0, r4
 800aac0:	f001 f9cc 	bl	800be5c <__pow5mult>
 800aac4:	9b06      	ldr	r3, [sp, #24]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	4606      	mov	r6, r0
 800aaca:	f340 8081 	ble.w	800abd0 <_dtoa_r+0x8c8>
 800aace:	f04f 0800 	mov.w	r8, #0
 800aad2:	6933      	ldr	r3, [r6, #16]
 800aad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aad8:	6918      	ldr	r0, [r3, #16]
 800aada:	f001 f8af 	bl	800bc3c <__hi0bits>
 800aade:	f1c0 0020 	rsb	r0, r0, #32
 800aae2:	9b05      	ldr	r3, [sp, #20]
 800aae4:	4418      	add	r0, r3
 800aae6:	f010 001f 	ands.w	r0, r0, #31
 800aaea:	f000 8092 	beq.w	800ac12 <_dtoa_r+0x90a>
 800aaee:	f1c0 0320 	rsb	r3, r0, #32
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	f340 808a 	ble.w	800ac0c <_dtoa_r+0x904>
 800aaf8:	f1c0 001c 	rsb	r0, r0, #28
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	4403      	add	r3, r0
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	4403      	add	r3, r0
 800ab06:	4405      	add	r5, r0
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dd07      	ble.n	800ab20 <_dtoa_r+0x818>
 800ab10:	ee18 1a10 	vmov	r1, s16
 800ab14:	461a      	mov	r2, r3
 800ab16:	4620      	mov	r0, r4
 800ab18:	f001 f9fa 	bl	800bf10 <__lshift>
 800ab1c:	ee08 0a10 	vmov	s16, r0
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd05      	ble.n	800ab32 <_dtoa_r+0x82a>
 800ab26:	4631      	mov	r1, r6
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f001 f9f0 	bl	800bf10 <__lshift>
 800ab30:	4606      	mov	r6, r0
 800ab32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d06e      	beq.n	800ac16 <_dtoa_r+0x90e>
 800ab38:	ee18 0a10 	vmov	r0, s16
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	f001 fa57 	bl	800bff0 <__mcmp>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	da67      	bge.n	800ac16 <_dtoa_r+0x90e>
 800ab46:	9b00      	ldr	r3, [sp, #0]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	ee18 1a10 	vmov	r1, s16
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	220a      	movs	r2, #10
 800ab52:	2300      	movs	r3, #0
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 ffe1 	bl	800bb1c <__multadd>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	ee08 0a10 	vmov	s16, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 81b1 	beq.w	800aec8 <_dtoa_r+0xbc0>
 800ab66:	2300      	movs	r3, #0
 800ab68:	4639      	mov	r1, r7
 800ab6a:	220a      	movs	r2, #10
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 ffd5 	bl	800bb1c <__multadd>
 800ab72:	9b02      	ldr	r3, [sp, #8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	4607      	mov	r7, r0
 800ab78:	f300 808e 	bgt.w	800ac98 <_dtoa_r+0x990>
 800ab7c:	9b06      	ldr	r3, [sp, #24]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	dc51      	bgt.n	800ac26 <_dtoa_r+0x91e>
 800ab82:	e089      	b.n	800ac98 <_dtoa_r+0x990>
 800ab84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab8a:	e74b      	b.n	800aa24 <_dtoa_r+0x71c>
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	1e5e      	subs	r6, r3, #1
 800ab90:	9b07      	ldr	r3, [sp, #28]
 800ab92:	42b3      	cmp	r3, r6
 800ab94:	bfbf      	itttt	lt
 800ab96:	9b07      	ldrlt	r3, [sp, #28]
 800ab98:	9607      	strlt	r6, [sp, #28]
 800ab9a:	1af2      	sublt	r2, r6, r3
 800ab9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab9e:	bfb6      	itet	lt
 800aba0:	189b      	addlt	r3, r3, r2
 800aba2:	1b9e      	subge	r6, r3, r6
 800aba4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	bfb8      	it	lt
 800abaa:	2600      	movlt	r6, #0
 800abac:	2b00      	cmp	r3, #0
 800abae:	bfb7      	itett	lt
 800abb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800abb8:	1a9d      	sublt	r5, r3, r2
 800abba:	2300      	movlt	r3, #0
 800abbc:	e734      	b.n	800aa28 <_dtoa_r+0x720>
 800abbe:	9e07      	ldr	r6, [sp, #28]
 800abc0:	9d04      	ldr	r5, [sp, #16]
 800abc2:	9f08      	ldr	r7, [sp, #32]
 800abc4:	e73b      	b.n	800aa3e <_dtoa_r+0x736>
 800abc6:	9a07      	ldr	r2, [sp, #28]
 800abc8:	e767      	b.n	800aa9a <_dtoa_r+0x792>
 800abca:	9b06      	ldr	r3, [sp, #24]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	dc18      	bgt.n	800ac02 <_dtoa_r+0x8fa>
 800abd0:	f1ba 0f00 	cmp.w	sl, #0
 800abd4:	d115      	bne.n	800ac02 <_dtoa_r+0x8fa>
 800abd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abda:	b993      	cbnz	r3, 800ac02 <_dtoa_r+0x8fa>
 800abdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abe0:	0d1b      	lsrs	r3, r3, #20
 800abe2:	051b      	lsls	r3, r3, #20
 800abe4:	b183      	cbz	r3, 800ac08 <_dtoa_r+0x900>
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	3301      	adds	r3, #1
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	9b05      	ldr	r3, [sp, #20]
 800abee:	3301      	adds	r3, #1
 800abf0:	9305      	str	r3, [sp, #20]
 800abf2:	f04f 0801 	mov.w	r8, #1
 800abf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f47f af6a 	bne.w	800aad2 <_dtoa_r+0x7ca>
 800abfe:	2001      	movs	r0, #1
 800ac00:	e76f      	b.n	800aae2 <_dtoa_r+0x7da>
 800ac02:	f04f 0800 	mov.w	r8, #0
 800ac06:	e7f6      	b.n	800abf6 <_dtoa_r+0x8ee>
 800ac08:	4698      	mov	r8, r3
 800ac0a:	e7f4      	b.n	800abf6 <_dtoa_r+0x8ee>
 800ac0c:	f43f af7d 	beq.w	800ab0a <_dtoa_r+0x802>
 800ac10:	4618      	mov	r0, r3
 800ac12:	301c      	adds	r0, #28
 800ac14:	e772      	b.n	800aafc <_dtoa_r+0x7f4>
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc37      	bgt.n	800ac8c <_dtoa_r+0x984>
 800ac1c:	9b06      	ldr	r3, [sp, #24]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	dd34      	ble.n	800ac8c <_dtoa_r+0x984>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	9302      	str	r3, [sp, #8]
 800ac26:	9b02      	ldr	r3, [sp, #8]
 800ac28:	b96b      	cbnz	r3, 800ac46 <_dtoa_r+0x93e>
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	2205      	movs	r2, #5
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 ff74 	bl	800bb1c <__multadd>
 800ac34:	4601      	mov	r1, r0
 800ac36:	4606      	mov	r6, r0
 800ac38:	ee18 0a10 	vmov	r0, s16
 800ac3c:	f001 f9d8 	bl	800bff0 <__mcmp>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	f73f adbb 	bgt.w	800a7bc <_dtoa_r+0x4b4>
 800ac46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac48:	9d01      	ldr	r5, [sp, #4]
 800ac4a:	43db      	mvns	r3, r3
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	4631      	mov	r1, r6
 800ac54:	4620      	mov	r0, r4
 800ac56:	f000 ff3f 	bl	800bad8 <_Bfree>
 800ac5a:	2f00      	cmp	r7, #0
 800ac5c:	f43f aea4 	beq.w	800a9a8 <_dtoa_r+0x6a0>
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	d005      	beq.n	800ac72 <_dtoa_r+0x96a>
 800ac66:	45b8      	cmp	r8, r7
 800ac68:	d003      	beq.n	800ac72 <_dtoa_r+0x96a>
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 ff33 	bl	800bad8 <_Bfree>
 800ac72:	4639      	mov	r1, r7
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 ff2f 	bl	800bad8 <_Bfree>
 800ac7a:	e695      	b.n	800a9a8 <_dtoa_r+0x6a0>
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	4637      	mov	r7, r6
 800ac80:	e7e1      	b.n	800ac46 <_dtoa_r+0x93e>
 800ac82:	9700      	str	r7, [sp, #0]
 800ac84:	4637      	mov	r7, r6
 800ac86:	e599      	b.n	800a7bc <_dtoa_r+0x4b4>
 800ac88:	40240000 	.word	0x40240000
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80ca 	beq.w	800ae28 <_dtoa_r+0xb20>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	dd05      	ble.n	800aca8 <_dtoa_r+0x9a0>
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	f001 f935 	bl	800bf10 <__lshift>
 800aca6:	4607      	mov	r7, r0
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	d05b      	beq.n	800ad66 <_dtoa_r+0xa5e>
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 fed1 	bl	800ba58 <_Balloc>
 800acb6:	4605      	mov	r5, r0
 800acb8:	b928      	cbnz	r0, 800acc6 <_dtoa_r+0x9be>
 800acba:	4b87      	ldr	r3, [pc, #540]	; (800aed8 <_dtoa_r+0xbd0>)
 800acbc:	4602      	mov	r2, r0
 800acbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acc2:	f7ff bb3b 	b.w	800a33c <_dtoa_r+0x34>
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	f107 010c 	add.w	r1, r7, #12
 800acd0:	300c      	adds	r0, #12
 800acd2:	f000 feb3 	bl	800ba3c <memcpy>
 800acd6:	2201      	movs	r2, #1
 800acd8:	4629      	mov	r1, r5
 800acda:	4620      	mov	r0, r4
 800acdc:	f001 f918 	bl	800bf10 <__lshift>
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	f103 0901 	add.w	r9, r3, #1
 800ace6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800acea:	4413      	add	r3, r2
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	f00a 0301 	and.w	r3, sl, #1
 800acf2:	46b8      	mov	r8, r7
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	4607      	mov	r7, r0
 800acf8:	4631      	mov	r1, r6
 800acfa:	ee18 0a10 	vmov	r0, s16
 800acfe:	f7ff fa77 	bl	800a1f0 <quorem>
 800ad02:	4641      	mov	r1, r8
 800ad04:	9002      	str	r0, [sp, #8]
 800ad06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad0a:	ee18 0a10 	vmov	r0, s16
 800ad0e:	f001 f96f 	bl	800bff0 <__mcmp>
 800ad12:	463a      	mov	r2, r7
 800ad14:	9003      	str	r0, [sp, #12]
 800ad16:	4631      	mov	r1, r6
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 f985 	bl	800c028 <__mdiff>
 800ad1e:	68c2      	ldr	r2, [r0, #12]
 800ad20:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad24:	4605      	mov	r5, r0
 800ad26:	bb02      	cbnz	r2, 800ad6a <_dtoa_r+0xa62>
 800ad28:	4601      	mov	r1, r0
 800ad2a:	ee18 0a10 	vmov	r0, s16
 800ad2e:	f001 f95f 	bl	800bff0 <__mcmp>
 800ad32:	4602      	mov	r2, r0
 800ad34:	4629      	mov	r1, r5
 800ad36:	4620      	mov	r0, r4
 800ad38:	9207      	str	r2, [sp, #28]
 800ad3a:	f000 fecd 	bl	800bad8 <_Bfree>
 800ad3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad42:	ea43 0102 	orr.w	r1, r3, r2
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	464d      	mov	r5, r9
 800ad4c:	d10f      	bne.n	800ad6e <_dtoa_r+0xa66>
 800ad4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad52:	d02a      	beq.n	800adaa <_dtoa_r+0xaa2>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dd02      	ble.n	800ad60 <_dtoa_r+0xa58>
 800ad5a:	9b02      	ldr	r3, [sp, #8]
 800ad5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad60:	f88b a000 	strb.w	sl, [fp]
 800ad64:	e775      	b.n	800ac52 <_dtoa_r+0x94a>
 800ad66:	4638      	mov	r0, r7
 800ad68:	e7ba      	b.n	800ace0 <_dtoa_r+0x9d8>
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	e7e2      	b.n	800ad34 <_dtoa_r+0xa2c>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	db04      	blt.n	800ad7e <_dtoa_r+0xa76>
 800ad74:	9906      	ldr	r1, [sp, #24]
 800ad76:	430b      	orrs	r3, r1
 800ad78:	9904      	ldr	r1, [sp, #16]
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	d122      	bne.n	800adc4 <_dtoa_r+0xabc>
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	ddee      	ble.n	800ad60 <_dtoa_r+0xa58>
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2201      	movs	r2, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f001 f8c1 	bl	800bf10 <__lshift>
 800ad8e:	4631      	mov	r1, r6
 800ad90:	ee08 0a10 	vmov	s16, r0
 800ad94:	f001 f92c 	bl	800bff0 <__mcmp>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc03      	bgt.n	800ada4 <_dtoa_r+0xa9c>
 800ad9c:	d1e0      	bne.n	800ad60 <_dtoa_r+0xa58>
 800ad9e:	f01a 0f01 	tst.w	sl, #1
 800ada2:	d0dd      	beq.n	800ad60 <_dtoa_r+0xa58>
 800ada4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ada8:	d1d7      	bne.n	800ad5a <_dtoa_r+0xa52>
 800adaa:	2339      	movs	r3, #57	; 0x39
 800adac:	f88b 3000 	strb.w	r3, [fp]
 800adb0:	462b      	mov	r3, r5
 800adb2:	461d      	mov	r5, r3
 800adb4:	3b01      	subs	r3, #1
 800adb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adba:	2a39      	cmp	r2, #57	; 0x39
 800adbc:	d071      	beq.n	800aea2 <_dtoa_r+0xb9a>
 800adbe:	3201      	adds	r2, #1
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e746      	b.n	800ac52 <_dtoa_r+0x94a>
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	dd07      	ble.n	800add8 <_dtoa_r+0xad0>
 800adc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adcc:	d0ed      	beq.n	800adaa <_dtoa_r+0xaa2>
 800adce:	f10a 0301 	add.w	r3, sl, #1
 800add2:	f88b 3000 	strb.w	r3, [fp]
 800add6:	e73c      	b.n	800ac52 <_dtoa_r+0x94a>
 800add8:	9b05      	ldr	r3, [sp, #20]
 800adda:	f809 ac01 	strb.w	sl, [r9, #-1]
 800adde:	4599      	cmp	r9, r3
 800ade0:	d047      	beq.n	800ae72 <_dtoa_r+0xb6a>
 800ade2:	ee18 1a10 	vmov	r1, s16
 800ade6:	2300      	movs	r3, #0
 800ade8:	220a      	movs	r2, #10
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fe96 	bl	800bb1c <__multadd>
 800adf0:	45b8      	cmp	r8, r7
 800adf2:	ee08 0a10 	vmov	s16, r0
 800adf6:	f04f 0300 	mov.w	r3, #0
 800adfa:	f04f 020a 	mov.w	r2, #10
 800adfe:	4641      	mov	r1, r8
 800ae00:	4620      	mov	r0, r4
 800ae02:	d106      	bne.n	800ae12 <_dtoa_r+0xb0a>
 800ae04:	f000 fe8a 	bl	800bb1c <__multadd>
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	f109 0901 	add.w	r9, r9, #1
 800ae10:	e772      	b.n	800acf8 <_dtoa_r+0x9f0>
 800ae12:	f000 fe83 	bl	800bb1c <__multadd>
 800ae16:	4639      	mov	r1, r7
 800ae18:	4680      	mov	r8, r0
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fe7c 	bl	800bb1c <__multadd>
 800ae24:	4607      	mov	r7, r0
 800ae26:	e7f1      	b.n	800ae0c <_dtoa_r+0xb04>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	9d01      	ldr	r5, [sp, #4]
 800ae2e:	ee18 0a10 	vmov	r0, s16
 800ae32:	4631      	mov	r1, r6
 800ae34:	f7ff f9dc 	bl	800a1f0 <quorem>
 800ae38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae3c:	9b01      	ldr	r3, [sp, #4]
 800ae3e:	f805 ab01 	strb.w	sl, [r5], #1
 800ae42:	1aea      	subs	r2, r5, r3
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	4293      	cmp	r3, r2
 800ae48:	dd09      	ble.n	800ae5e <_dtoa_r+0xb56>
 800ae4a:	ee18 1a10 	vmov	r1, s16
 800ae4e:	2300      	movs	r3, #0
 800ae50:	220a      	movs	r2, #10
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fe62 	bl	800bb1c <__multadd>
 800ae58:	ee08 0a10 	vmov	s16, r0
 800ae5c:	e7e7      	b.n	800ae2e <_dtoa_r+0xb26>
 800ae5e:	9b02      	ldr	r3, [sp, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfc8      	it	gt
 800ae64:	461d      	movgt	r5, r3
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	bfd8      	it	le
 800ae6a:	2501      	movle	r5, #1
 800ae6c:	441d      	add	r5, r3
 800ae6e:	f04f 0800 	mov.w	r8, #0
 800ae72:	ee18 1a10 	vmov	r1, s16
 800ae76:	2201      	movs	r2, #1
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f001 f849 	bl	800bf10 <__lshift>
 800ae7e:	4631      	mov	r1, r6
 800ae80:	ee08 0a10 	vmov	s16, r0
 800ae84:	f001 f8b4 	bl	800bff0 <__mcmp>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	dc91      	bgt.n	800adb0 <_dtoa_r+0xaa8>
 800ae8c:	d102      	bne.n	800ae94 <_dtoa_r+0xb8c>
 800ae8e:	f01a 0f01 	tst.w	sl, #1
 800ae92:	d18d      	bne.n	800adb0 <_dtoa_r+0xaa8>
 800ae94:	462b      	mov	r3, r5
 800ae96:	461d      	mov	r5, r3
 800ae98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae9c:	2a30      	cmp	r2, #48	; 0x30
 800ae9e:	d0fa      	beq.n	800ae96 <_dtoa_r+0xb8e>
 800aea0:	e6d7      	b.n	800ac52 <_dtoa_r+0x94a>
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d184      	bne.n	800adb2 <_dtoa_r+0xaaa>
 800aea8:	9b00      	ldr	r3, [sp, #0]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	2331      	movs	r3, #49	; 0x31
 800aeb0:	7013      	strb	r3, [r2, #0]
 800aeb2:	e6ce      	b.n	800ac52 <_dtoa_r+0x94a>
 800aeb4:	4b09      	ldr	r3, [pc, #36]	; (800aedc <_dtoa_r+0xbd4>)
 800aeb6:	f7ff ba95 	b.w	800a3e4 <_dtoa_r+0xdc>
 800aeba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f47f aa6e 	bne.w	800a39e <_dtoa_r+0x96>
 800aec2:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <_dtoa_r+0xbd8>)
 800aec4:	f7ff ba8e 	b.w	800a3e4 <_dtoa_r+0xdc>
 800aec8:	9b02      	ldr	r3, [sp, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dcae      	bgt.n	800ae2c <_dtoa_r+0xb24>
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	f73f aea8 	bgt.w	800ac26 <_dtoa_r+0x91e>
 800aed6:	e7a9      	b.n	800ae2c <_dtoa_r+0xb24>
 800aed8:	0800d1a8 	.word	0x0800d1a8
 800aedc:	0800cfac 	.word	0x0800cfac
 800aee0:	0800d129 	.word	0x0800d129

0800aee4 <__sflush_r>:
 800aee4:	898a      	ldrh	r2, [r1, #12]
 800aee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	4605      	mov	r5, r0
 800aeec:	0710      	lsls	r0, r2, #28
 800aeee:	460c      	mov	r4, r1
 800aef0:	d458      	bmi.n	800afa4 <__sflush_r+0xc0>
 800aef2:	684b      	ldr	r3, [r1, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc05      	bgt.n	800af04 <__sflush_r+0x20>
 800aef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dc02      	bgt.n	800af04 <__sflush_r+0x20>
 800aefe:	2000      	movs	r0, #0
 800af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af06:	2e00      	cmp	r6, #0
 800af08:	d0f9      	beq.n	800aefe <__sflush_r+0x1a>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af10:	682f      	ldr	r7, [r5, #0]
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	d032      	beq.n	800af7c <__sflush_r+0x98>
 800af16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	075a      	lsls	r2, r3, #29
 800af1c:	d505      	bpl.n	800af2a <__sflush_r+0x46>
 800af1e:	6863      	ldr	r3, [r4, #4]
 800af20:	1ac0      	subs	r0, r0, r3
 800af22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af24:	b10b      	cbz	r3, 800af2a <__sflush_r+0x46>
 800af26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af28:	1ac0      	subs	r0, r0, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	4602      	mov	r2, r0
 800af2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af30:	6a21      	ldr	r1, [r4, #32]
 800af32:	4628      	mov	r0, r5
 800af34:	47b0      	blx	r6
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	d106      	bne.n	800af4a <__sflush_r+0x66>
 800af3c:	6829      	ldr	r1, [r5, #0]
 800af3e:	291d      	cmp	r1, #29
 800af40:	d82c      	bhi.n	800af9c <__sflush_r+0xb8>
 800af42:	4a2a      	ldr	r2, [pc, #168]	; (800afec <__sflush_r+0x108>)
 800af44:	40ca      	lsrs	r2, r1
 800af46:	07d6      	lsls	r6, r2, #31
 800af48:	d528      	bpl.n	800af9c <__sflush_r+0xb8>
 800af4a:	2200      	movs	r2, #0
 800af4c:	6062      	str	r2, [r4, #4]
 800af4e:	04d9      	lsls	r1, r3, #19
 800af50:	6922      	ldr	r2, [r4, #16]
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	d504      	bpl.n	800af60 <__sflush_r+0x7c>
 800af56:	1c42      	adds	r2, r0, #1
 800af58:	d101      	bne.n	800af5e <__sflush_r+0x7a>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b903      	cbnz	r3, 800af60 <__sflush_r+0x7c>
 800af5e:	6560      	str	r0, [r4, #84]	; 0x54
 800af60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af62:	602f      	str	r7, [r5, #0]
 800af64:	2900      	cmp	r1, #0
 800af66:	d0ca      	beq.n	800aefe <__sflush_r+0x1a>
 800af68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af6c:	4299      	cmp	r1, r3
 800af6e:	d002      	beq.n	800af76 <__sflush_r+0x92>
 800af70:	4628      	mov	r0, r5
 800af72:	f001 fa49 	bl	800c408 <_free_r>
 800af76:	2000      	movs	r0, #0
 800af78:	6360      	str	r0, [r4, #52]	; 0x34
 800af7a:	e7c1      	b.n	800af00 <__sflush_r+0x1c>
 800af7c:	6a21      	ldr	r1, [r4, #32]
 800af7e:	2301      	movs	r3, #1
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	1c41      	adds	r1, r0, #1
 800af86:	d1c7      	bne.n	800af18 <__sflush_r+0x34>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c4      	beq.n	800af18 <__sflush_r+0x34>
 800af8e:	2b1d      	cmp	r3, #29
 800af90:	d001      	beq.n	800af96 <__sflush_r+0xb2>
 800af92:	2b16      	cmp	r3, #22
 800af94:	d101      	bne.n	800af9a <__sflush_r+0xb6>
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	e7b1      	b.n	800aefe <__sflush_r+0x1a>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	e7ad      	b.n	800af00 <__sflush_r+0x1c>
 800afa4:	690f      	ldr	r7, [r1, #16]
 800afa6:	2f00      	cmp	r7, #0
 800afa8:	d0a9      	beq.n	800aefe <__sflush_r+0x1a>
 800afaa:	0793      	lsls	r3, r2, #30
 800afac:	680e      	ldr	r6, [r1, #0]
 800afae:	bf08      	it	eq
 800afb0:	694b      	ldreq	r3, [r1, #20]
 800afb2:	600f      	str	r7, [r1, #0]
 800afb4:	bf18      	it	ne
 800afb6:	2300      	movne	r3, #0
 800afb8:	eba6 0807 	sub.w	r8, r6, r7
 800afbc:	608b      	str	r3, [r1, #8]
 800afbe:	f1b8 0f00 	cmp.w	r8, #0
 800afc2:	dd9c      	ble.n	800aefe <__sflush_r+0x1a>
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afc8:	4643      	mov	r3, r8
 800afca:	463a      	mov	r2, r7
 800afcc:	4628      	mov	r0, r5
 800afce:	47b0      	blx	r6
 800afd0:	2800      	cmp	r0, #0
 800afd2:	dc06      	bgt.n	800afe2 <__sflush_r+0xfe>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e78e      	b.n	800af00 <__sflush_r+0x1c>
 800afe2:	4407      	add	r7, r0
 800afe4:	eba8 0800 	sub.w	r8, r8, r0
 800afe8:	e7e9      	b.n	800afbe <__sflush_r+0xda>
 800afea:	bf00      	nop
 800afec:	20400001 	.word	0x20400001

0800aff0 <_fflush_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	690b      	ldr	r3, [r1, #16]
 800aff4:	4605      	mov	r5, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	b913      	cbnz	r3, 800b000 <_fflush_r+0x10>
 800affa:	2500      	movs	r5, #0
 800affc:	4628      	mov	r0, r5
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	b118      	cbz	r0, 800b00a <_fflush_r+0x1a>
 800b002:	6983      	ldr	r3, [r0, #24]
 800b004:	b90b      	cbnz	r3, 800b00a <_fflush_r+0x1a>
 800b006:	f000 f887 	bl	800b118 <__sinit>
 800b00a:	4b14      	ldr	r3, [pc, #80]	; (800b05c <_fflush_r+0x6c>)
 800b00c:	429c      	cmp	r4, r3
 800b00e:	d11b      	bne.n	800b048 <_fflush_r+0x58>
 800b010:	686c      	ldr	r4, [r5, #4]
 800b012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0ef      	beq.n	800affa <_fflush_r+0xa>
 800b01a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b01c:	07d0      	lsls	r0, r2, #31
 800b01e:	d404      	bmi.n	800b02a <_fflush_r+0x3a>
 800b020:	0599      	lsls	r1, r3, #22
 800b022:	d402      	bmi.n	800b02a <_fflush_r+0x3a>
 800b024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b026:	f000 fc88 	bl	800b93a <__retarget_lock_acquire_recursive>
 800b02a:	4628      	mov	r0, r5
 800b02c:	4621      	mov	r1, r4
 800b02e:	f7ff ff59 	bl	800aee4 <__sflush_r>
 800b032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b034:	07da      	lsls	r2, r3, #31
 800b036:	4605      	mov	r5, r0
 800b038:	d4e0      	bmi.n	800affc <_fflush_r+0xc>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	059b      	lsls	r3, r3, #22
 800b03e:	d4dd      	bmi.n	800affc <_fflush_r+0xc>
 800b040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b042:	f000 fc7b 	bl	800b93c <__retarget_lock_release_recursive>
 800b046:	e7d9      	b.n	800affc <_fflush_r+0xc>
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <_fflush_r+0x70>)
 800b04a:	429c      	cmp	r4, r3
 800b04c:	d101      	bne.n	800b052 <_fflush_r+0x62>
 800b04e:	68ac      	ldr	r4, [r5, #8]
 800b050:	e7df      	b.n	800b012 <_fflush_r+0x22>
 800b052:	4b04      	ldr	r3, [pc, #16]	; (800b064 <_fflush_r+0x74>)
 800b054:	429c      	cmp	r4, r3
 800b056:	bf08      	it	eq
 800b058:	68ec      	ldreq	r4, [r5, #12]
 800b05a:	e7da      	b.n	800b012 <_fflush_r+0x22>
 800b05c:	0800d1dc 	.word	0x0800d1dc
 800b060:	0800d1fc 	.word	0x0800d1fc
 800b064:	0800d1bc 	.word	0x0800d1bc

0800b068 <std>:
 800b068:	2300      	movs	r3, #0
 800b06a:	b510      	push	{r4, lr}
 800b06c:	4604      	mov	r4, r0
 800b06e:	e9c0 3300 	strd	r3, r3, [r0]
 800b072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b076:	6083      	str	r3, [r0, #8]
 800b078:	8181      	strh	r1, [r0, #12]
 800b07a:	6643      	str	r3, [r0, #100]	; 0x64
 800b07c:	81c2      	strh	r2, [r0, #14]
 800b07e:	6183      	str	r3, [r0, #24]
 800b080:	4619      	mov	r1, r3
 800b082:	2208      	movs	r2, #8
 800b084:	305c      	adds	r0, #92	; 0x5c
 800b086:	f7fd fa0f 	bl	80084a8 <memset>
 800b08a:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <std+0x38>)
 800b08c:	6263      	str	r3, [r4, #36]	; 0x24
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <std+0x3c>)
 800b090:	62a3      	str	r3, [r4, #40]	; 0x28
 800b092:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <std+0x40>)
 800b094:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <std+0x44>)
 800b098:	6224      	str	r4, [r4, #32]
 800b09a:	6323      	str	r3, [r4, #48]	; 0x30
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800cb69 	.word	0x0800cb69
 800b0a4:	0800cb8b 	.word	0x0800cb8b
 800b0a8:	0800cbc3 	.word	0x0800cbc3
 800b0ac:	0800cbe7 	.word	0x0800cbe7

0800b0b0 <_cleanup_r>:
 800b0b0:	4901      	ldr	r1, [pc, #4]	; (800b0b8 <_cleanup_r+0x8>)
 800b0b2:	f000 b8af 	b.w	800b214 <_fwalk_reent>
 800b0b6:	bf00      	nop
 800b0b8:	0800aff1 	.word	0x0800aff1

0800b0bc <__sfmoreglue>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	2268      	movs	r2, #104	; 0x68
 800b0c0:	1e4d      	subs	r5, r1, #1
 800b0c2:	4355      	muls	r5, r2
 800b0c4:	460e      	mov	r6, r1
 800b0c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0ca:	f001 fa09 	bl	800c4e0 <_malloc_r>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	b140      	cbz	r0, 800b0e4 <__sfmoreglue+0x28>
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b0d8:	300c      	adds	r0, #12
 800b0da:	60a0      	str	r0, [r4, #8]
 800b0dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0e0:	f7fd f9e2 	bl	80084a8 <memset>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}

0800b0e8 <__sfp_lock_acquire>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	; (800b0f0 <__sfp_lock_acquire+0x8>)
 800b0ea:	f000 bc26 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	20000509 	.word	0x20000509

0800b0f4 <__sfp_lock_release>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__sfp_lock_release+0x8>)
 800b0f6:	f000 bc21 	b.w	800b93c <__retarget_lock_release_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20000509 	.word	0x20000509

0800b100 <__sinit_lock_acquire>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__sinit_lock_acquire+0x8>)
 800b102:	f000 bc1a 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800b106:	bf00      	nop
 800b108:	2000050a 	.word	0x2000050a

0800b10c <__sinit_lock_release>:
 800b10c:	4801      	ldr	r0, [pc, #4]	; (800b114 <__sinit_lock_release+0x8>)
 800b10e:	f000 bc15 	b.w	800b93c <__retarget_lock_release_recursive>
 800b112:	bf00      	nop
 800b114:	2000050a 	.word	0x2000050a

0800b118 <__sinit>:
 800b118:	b510      	push	{r4, lr}
 800b11a:	4604      	mov	r4, r0
 800b11c:	f7ff fff0 	bl	800b100 <__sinit_lock_acquire>
 800b120:	69a3      	ldr	r3, [r4, #24]
 800b122:	b11b      	cbz	r3, 800b12c <__sinit+0x14>
 800b124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b128:	f7ff bff0 	b.w	800b10c <__sinit_lock_release>
 800b12c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b130:	6523      	str	r3, [r4, #80]	; 0x50
 800b132:	4b13      	ldr	r3, [pc, #76]	; (800b180 <__sinit+0x68>)
 800b134:	4a13      	ldr	r2, [pc, #76]	; (800b184 <__sinit+0x6c>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	62a2      	str	r2, [r4, #40]	; 0x28
 800b13a:	42a3      	cmp	r3, r4
 800b13c:	bf04      	itt	eq
 800b13e:	2301      	moveq	r3, #1
 800b140:	61a3      	streq	r3, [r4, #24]
 800b142:	4620      	mov	r0, r4
 800b144:	f000 f820 	bl	800b188 <__sfp>
 800b148:	6060      	str	r0, [r4, #4]
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 f81c 	bl	800b188 <__sfp>
 800b150:	60a0      	str	r0, [r4, #8]
 800b152:	4620      	mov	r0, r4
 800b154:	f000 f818 	bl	800b188 <__sfp>
 800b158:	2200      	movs	r2, #0
 800b15a:	60e0      	str	r0, [r4, #12]
 800b15c:	2104      	movs	r1, #4
 800b15e:	6860      	ldr	r0, [r4, #4]
 800b160:	f7ff ff82 	bl	800b068 <std>
 800b164:	68a0      	ldr	r0, [r4, #8]
 800b166:	2201      	movs	r2, #1
 800b168:	2109      	movs	r1, #9
 800b16a:	f7ff ff7d 	bl	800b068 <std>
 800b16e:	68e0      	ldr	r0, [r4, #12]
 800b170:	2202      	movs	r2, #2
 800b172:	2112      	movs	r1, #18
 800b174:	f7ff ff78 	bl	800b068 <std>
 800b178:	2301      	movs	r3, #1
 800b17a:	61a3      	str	r3, [r4, #24]
 800b17c:	e7d2      	b.n	800b124 <__sinit+0xc>
 800b17e:	bf00      	nop
 800b180:	0800cf98 	.word	0x0800cf98
 800b184:	0800b0b1 	.word	0x0800b0b1

0800b188 <__sfp>:
 800b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18a:	4607      	mov	r7, r0
 800b18c:	f7ff ffac 	bl	800b0e8 <__sfp_lock_acquire>
 800b190:	4b1e      	ldr	r3, [pc, #120]	; (800b20c <__sfp+0x84>)
 800b192:	681e      	ldr	r6, [r3, #0]
 800b194:	69b3      	ldr	r3, [r6, #24]
 800b196:	b913      	cbnz	r3, 800b19e <__sfp+0x16>
 800b198:	4630      	mov	r0, r6
 800b19a:	f7ff ffbd 	bl	800b118 <__sinit>
 800b19e:	3648      	adds	r6, #72	; 0x48
 800b1a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	d503      	bpl.n	800b1b0 <__sfp+0x28>
 800b1a8:	6833      	ldr	r3, [r6, #0]
 800b1aa:	b30b      	cbz	r3, 800b1f0 <__sfp+0x68>
 800b1ac:	6836      	ldr	r6, [r6, #0]
 800b1ae:	e7f7      	b.n	800b1a0 <__sfp+0x18>
 800b1b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1b4:	b9d5      	cbnz	r5, 800b1ec <__sfp+0x64>
 800b1b6:	4b16      	ldr	r3, [pc, #88]	; (800b210 <__sfp+0x88>)
 800b1b8:	60e3      	str	r3, [r4, #12]
 800b1ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1be:	6665      	str	r5, [r4, #100]	; 0x64
 800b1c0:	f000 fbba 	bl	800b938 <__retarget_lock_init_recursive>
 800b1c4:	f7ff ff96 	bl	800b0f4 <__sfp_lock_release>
 800b1c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1d0:	6025      	str	r5, [r4, #0]
 800b1d2:	61a5      	str	r5, [r4, #24]
 800b1d4:	2208      	movs	r2, #8
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1dc:	f7fd f964 	bl	80084a8 <memset>
 800b1e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ec:	3468      	adds	r4, #104	; 0x68
 800b1ee:	e7d9      	b.n	800b1a4 <__sfp+0x1c>
 800b1f0:	2104      	movs	r1, #4
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f7ff ff62 	bl	800b0bc <__sfmoreglue>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	6030      	str	r0, [r6, #0]
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d1d5      	bne.n	800b1ac <__sfp+0x24>
 800b200:	f7ff ff78 	bl	800b0f4 <__sfp_lock_release>
 800b204:	230c      	movs	r3, #12
 800b206:	603b      	str	r3, [r7, #0]
 800b208:	e7ee      	b.n	800b1e8 <__sfp+0x60>
 800b20a:	bf00      	nop
 800b20c:	0800cf98 	.word	0x0800cf98
 800b210:	ffff0001 	.word	0xffff0001

0800b214 <_fwalk_reent>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	4606      	mov	r6, r0
 800b21a:	4688      	mov	r8, r1
 800b21c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b220:	2700      	movs	r7, #0
 800b222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b226:	f1b9 0901 	subs.w	r9, r9, #1
 800b22a:	d505      	bpl.n	800b238 <_fwalk_reent+0x24>
 800b22c:	6824      	ldr	r4, [r4, #0]
 800b22e:	2c00      	cmp	r4, #0
 800b230:	d1f7      	bne.n	800b222 <_fwalk_reent+0xe>
 800b232:	4638      	mov	r0, r7
 800b234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b238:	89ab      	ldrh	r3, [r5, #12]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d907      	bls.n	800b24e <_fwalk_reent+0x3a>
 800b23e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b242:	3301      	adds	r3, #1
 800b244:	d003      	beq.n	800b24e <_fwalk_reent+0x3a>
 800b246:	4629      	mov	r1, r5
 800b248:	4630      	mov	r0, r6
 800b24a:	47c0      	blx	r8
 800b24c:	4307      	orrs	r7, r0
 800b24e:	3568      	adds	r5, #104	; 0x68
 800b250:	e7e9      	b.n	800b226 <_fwalk_reent+0x12>

0800b252 <rshift>:
 800b252:	6903      	ldr	r3, [r0, #16]
 800b254:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b260:	f100 0414 	add.w	r4, r0, #20
 800b264:	dd45      	ble.n	800b2f2 <rshift+0xa0>
 800b266:	f011 011f 	ands.w	r1, r1, #31
 800b26a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b26e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b272:	d10c      	bne.n	800b28e <rshift+0x3c>
 800b274:	f100 0710 	add.w	r7, r0, #16
 800b278:	4629      	mov	r1, r5
 800b27a:	42b1      	cmp	r1, r6
 800b27c:	d334      	bcc.n	800b2e8 <rshift+0x96>
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	1eea      	subs	r2, r5, #3
 800b284:	4296      	cmp	r6, r2
 800b286:	bf38      	it	cc
 800b288:	2300      	movcc	r3, #0
 800b28a:	4423      	add	r3, r4
 800b28c:	e015      	b.n	800b2ba <rshift+0x68>
 800b28e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b292:	f1c1 0820 	rsb	r8, r1, #32
 800b296:	40cf      	lsrs	r7, r1
 800b298:	f105 0e04 	add.w	lr, r5, #4
 800b29c:	46a1      	mov	r9, r4
 800b29e:	4576      	cmp	r6, lr
 800b2a0:	46f4      	mov	ip, lr
 800b2a2:	d815      	bhi.n	800b2d0 <rshift+0x7e>
 800b2a4:	1a9a      	subs	r2, r3, r2
 800b2a6:	0092      	lsls	r2, r2, #2
 800b2a8:	3a04      	subs	r2, #4
 800b2aa:	3501      	adds	r5, #1
 800b2ac:	42ae      	cmp	r6, r5
 800b2ae:	bf38      	it	cc
 800b2b0:	2200      	movcc	r2, #0
 800b2b2:	18a3      	adds	r3, r4, r2
 800b2b4:	50a7      	str	r7, [r4, r2]
 800b2b6:	b107      	cbz	r7, 800b2ba <rshift+0x68>
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	1b1a      	subs	r2, r3, r4
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2c2:	bf08      	it	eq
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	6102      	str	r2, [r0, #16]
 800b2c8:	bf08      	it	eq
 800b2ca:	6143      	streq	r3, [r0, #20]
 800b2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2d0:	f8dc c000 	ldr.w	ip, [ip]
 800b2d4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2d8:	ea4c 0707 	orr.w	r7, ip, r7
 800b2dc:	f849 7b04 	str.w	r7, [r9], #4
 800b2e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2e4:	40cf      	lsrs	r7, r1
 800b2e6:	e7da      	b.n	800b29e <rshift+0x4c>
 800b2e8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2ec:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2f0:	e7c3      	b.n	800b27a <rshift+0x28>
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	e7e1      	b.n	800b2ba <rshift+0x68>

0800b2f6 <__hexdig_fun>:
 800b2f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d802      	bhi.n	800b304 <__hexdig_fun+0xe>
 800b2fe:	3820      	subs	r0, #32
 800b300:	b2c0      	uxtb	r0, r0
 800b302:	4770      	bx	lr
 800b304:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d801      	bhi.n	800b310 <__hexdig_fun+0x1a>
 800b30c:	3847      	subs	r0, #71	; 0x47
 800b30e:	e7f7      	b.n	800b300 <__hexdig_fun+0xa>
 800b310:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b314:	2b05      	cmp	r3, #5
 800b316:	d801      	bhi.n	800b31c <__hexdig_fun+0x26>
 800b318:	3827      	subs	r0, #39	; 0x27
 800b31a:	e7f1      	b.n	800b300 <__hexdig_fun+0xa>
 800b31c:	2000      	movs	r0, #0
 800b31e:	4770      	bx	lr

0800b320 <__gethex>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	ed2d 8b02 	vpush	{d8}
 800b328:	b089      	sub	sp, #36	; 0x24
 800b32a:	ee08 0a10 	vmov	s16, r0
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	4bb4      	ldr	r3, [pc, #720]	; (800b604 <__gethex+0x2e4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	4618      	mov	r0, r3
 800b338:	468b      	mov	fp, r1
 800b33a:	4690      	mov	r8, r2
 800b33c:	f7f4 ff48 	bl	80001d0 <strlen>
 800b340:	9b01      	ldr	r3, [sp, #4]
 800b342:	f8db 2000 	ldr.w	r2, [fp]
 800b346:	4403      	add	r3, r0
 800b348:	4682      	mov	sl, r0
 800b34a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	1c93      	adds	r3, r2, #2
 800b352:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b356:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b35a:	32fe      	adds	r2, #254	; 0xfe
 800b35c:	18d1      	adds	r1, r2, r3
 800b35e:	461f      	mov	r7, r3
 800b360:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b364:	9100      	str	r1, [sp, #0]
 800b366:	2830      	cmp	r0, #48	; 0x30
 800b368:	d0f8      	beq.n	800b35c <__gethex+0x3c>
 800b36a:	f7ff ffc4 	bl	800b2f6 <__hexdig_fun>
 800b36e:	4604      	mov	r4, r0
 800b370:	2800      	cmp	r0, #0
 800b372:	d13a      	bne.n	800b3ea <__gethex+0xca>
 800b374:	9901      	ldr	r1, [sp, #4]
 800b376:	4652      	mov	r2, sl
 800b378:	4638      	mov	r0, r7
 800b37a:	f001 fc38 	bl	800cbee <strncmp>
 800b37e:	4605      	mov	r5, r0
 800b380:	2800      	cmp	r0, #0
 800b382:	d168      	bne.n	800b456 <__gethex+0x136>
 800b384:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b388:	eb07 060a 	add.w	r6, r7, sl
 800b38c:	f7ff ffb3 	bl	800b2f6 <__hexdig_fun>
 800b390:	2800      	cmp	r0, #0
 800b392:	d062      	beq.n	800b45a <__gethex+0x13a>
 800b394:	4633      	mov	r3, r6
 800b396:	7818      	ldrb	r0, [r3, #0]
 800b398:	2830      	cmp	r0, #48	; 0x30
 800b39a:	461f      	mov	r7, r3
 800b39c:	f103 0301 	add.w	r3, r3, #1
 800b3a0:	d0f9      	beq.n	800b396 <__gethex+0x76>
 800b3a2:	f7ff ffa8 	bl	800b2f6 <__hexdig_fun>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	fab0 f480 	clz	r4, r0
 800b3ac:	0964      	lsrs	r4, r4, #5
 800b3ae:	4635      	mov	r5, r6
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	463a      	mov	r2, r7
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	3201      	adds	r2, #1
 800b3b8:	7830      	ldrb	r0, [r6, #0]
 800b3ba:	f7ff ff9c 	bl	800b2f6 <__hexdig_fun>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d1f8      	bne.n	800b3b4 <__gethex+0x94>
 800b3c2:	9901      	ldr	r1, [sp, #4]
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f001 fc11 	bl	800cbee <strncmp>
 800b3cc:	b980      	cbnz	r0, 800b3f0 <__gethex+0xd0>
 800b3ce:	b94d      	cbnz	r5, 800b3e4 <__gethex+0xc4>
 800b3d0:	eb06 050a 	add.w	r5, r6, sl
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4616      	mov	r6, r2
 800b3d8:	3201      	adds	r2, #1
 800b3da:	7830      	ldrb	r0, [r6, #0]
 800b3dc:	f7ff ff8b 	bl	800b2f6 <__hexdig_fun>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d1f8      	bne.n	800b3d6 <__gethex+0xb6>
 800b3e4:	1bad      	subs	r5, r5, r6
 800b3e6:	00ad      	lsls	r5, r5, #2
 800b3e8:	e004      	b.n	800b3f4 <__gethex+0xd4>
 800b3ea:	2400      	movs	r4, #0
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	e7e0      	b.n	800b3b2 <__gethex+0x92>
 800b3f0:	2d00      	cmp	r5, #0
 800b3f2:	d1f7      	bne.n	800b3e4 <__gethex+0xc4>
 800b3f4:	7833      	ldrb	r3, [r6, #0]
 800b3f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3fa:	2b50      	cmp	r3, #80	; 0x50
 800b3fc:	d13b      	bne.n	800b476 <__gethex+0x156>
 800b3fe:	7873      	ldrb	r3, [r6, #1]
 800b400:	2b2b      	cmp	r3, #43	; 0x2b
 800b402:	d02c      	beq.n	800b45e <__gethex+0x13e>
 800b404:	2b2d      	cmp	r3, #45	; 0x2d
 800b406:	d02e      	beq.n	800b466 <__gethex+0x146>
 800b408:	1c71      	adds	r1, r6, #1
 800b40a:	f04f 0900 	mov.w	r9, #0
 800b40e:	7808      	ldrb	r0, [r1, #0]
 800b410:	f7ff ff71 	bl	800b2f6 <__hexdig_fun>
 800b414:	1e43      	subs	r3, r0, #1
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b18      	cmp	r3, #24
 800b41a:	d82c      	bhi.n	800b476 <__gethex+0x156>
 800b41c:	f1a0 0210 	sub.w	r2, r0, #16
 800b420:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b424:	f7ff ff67 	bl	800b2f6 <__hexdig_fun>
 800b428:	1e43      	subs	r3, r0, #1
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b18      	cmp	r3, #24
 800b42e:	d91d      	bls.n	800b46c <__gethex+0x14c>
 800b430:	f1b9 0f00 	cmp.w	r9, #0
 800b434:	d000      	beq.n	800b438 <__gethex+0x118>
 800b436:	4252      	negs	r2, r2
 800b438:	4415      	add	r5, r2
 800b43a:	f8cb 1000 	str.w	r1, [fp]
 800b43e:	b1e4      	cbz	r4, 800b47a <__gethex+0x15a>
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	bf14      	ite	ne
 800b446:	2700      	movne	r7, #0
 800b448:	2706      	moveq	r7, #6
 800b44a:	4638      	mov	r0, r7
 800b44c:	b009      	add	sp, #36	; 0x24
 800b44e:	ecbd 8b02 	vpop	{d8}
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	463e      	mov	r6, r7
 800b458:	4625      	mov	r5, r4
 800b45a:	2401      	movs	r4, #1
 800b45c:	e7ca      	b.n	800b3f4 <__gethex+0xd4>
 800b45e:	f04f 0900 	mov.w	r9, #0
 800b462:	1cb1      	adds	r1, r6, #2
 800b464:	e7d3      	b.n	800b40e <__gethex+0xee>
 800b466:	f04f 0901 	mov.w	r9, #1
 800b46a:	e7fa      	b.n	800b462 <__gethex+0x142>
 800b46c:	230a      	movs	r3, #10
 800b46e:	fb03 0202 	mla	r2, r3, r2, r0
 800b472:	3a10      	subs	r2, #16
 800b474:	e7d4      	b.n	800b420 <__gethex+0x100>
 800b476:	4631      	mov	r1, r6
 800b478:	e7df      	b.n	800b43a <__gethex+0x11a>
 800b47a:	1bf3      	subs	r3, r6, r7
 800b47c:	3b01      	subs	r3, #1
 800b47e:	4621      	mov	r1, r4
 800b480:	2b07      	cmp	r3, #7
 800b482:	dc0b      	bgt.n	800b49c <__gethex+0x17c>
 800b484:	ee18 0a10 	vmov	r0, s16
 800b488:	f000 fae6 	bl	800ba58 <_Balloc>
 800b48c:	4604      	mov	r4, r0
 800b48e:	b940      	cbnz	r0, 800b4a2 <__gethex+0x182>
 800b490:	4b5d      	ldr	r3, [pc, #372]	; (800b608 <__gethex+0x2e8>)
 800b492:	4602      	mov	r2, r0
 800b494:	21de      	movs	r1, #222	; 0xde
 800b496:	485d      	ldr	r0, [pc, #372]	; (800b60c <__gethex+0x2ec>)
 800b498:	f001 fbdc 	bl	800cc54 <__assert_func>
 800b49c:	3101      	adds	r1, #1
 800b49e:	105b      	asrs	r3, r3, #1
 800b4a0:	e7ee      	b.n	800b480 <__gethex+0x160>
 800b4a2:	f100 0914 	add.w	r9, r0, #20
 800b4a6:	f04f 0b00 	mov.w	fp, #0
 800b4aa:	f1ca 0301 	rsb	r3, sl, #1
 800b4ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4b2:	f8cd b000 	str.w	fp, [sp]
 800b4b6:	9306      	str	r3, [sp, #24]
 800b4b8:	42b7      	cmp	r7, r6
 800b4ba:	d340      	bcc.n	800b53e <__gethex+0x21e>
 800b4bc:	9802      	ldr	r0, [sp, #8]
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	f840 3b04 	str.w	r3, [r0], #4
 800b4c4:	eba0 0009 	sub.w	r0, r0, r9
 800b4c8:	1080      	asrs	r0, r0, #2
 800b4ca:	0146      	lsls	r6, r0, #5
 800b4cc:	6120      	str	r0, [r4, #16]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 fbb4 	bl	800bc3c <__hi0bits>
 800b4d4:	1a30      	subs	r0, r6, r0
 800b4d6:	f8d8 6000 	ldr.w	r6, [r8]
 800b4da:	42b0      	cmp	r0, r6
 800b4dc:	dd63      	ble.n	800b5a6 <__gethex+0x286>
 800b4de:	1b87      	subs	r7, r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 ff58 	bl	800c398 <__any_on>
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	b1a8      	cbz	r0, 800b518 <__gethex+0x1f8>
 800b4ec:	1e7b      	subs	r3, r7, #1
 800b4ee:	1159      	asrs	r1, r3, #5
 800b4f0:	f003 021f 	and.w	r2, r3, #31
 800b4f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b4f8:	f04f 0a01 	mov.w	sl, #1
 800b4fc:	fa0a f202 	lsl.w	r2, sl, r2
 800b500:	420a      	tst	r2, r1
 800b502:	d009      	beq.n	800b518 <__gethex+0x1f8>
 800b504:	4553      	cmp	r3, sl
 800b506:	dd05      	ble.n	800b514 <__gethex+0x1f4>
 800b508:	1eb9      	subs	r1, r7, #2
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 ff44 	bl	800c398 <__any_on>
 800b510:	2800      	cmp	r0, #0
 800b512:	d145      	bne.n	800b5a0 <__gethex+0x280>
 800b514:	f04f 0a02 	mov.w	sl, #2
 800b518:	4639      	mov	r1, r7
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7ff fe99 	bl	800b252 <rshift>
 800b520:	443d      	add	r5, r7
 800b522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b526:	42ab      	cmp	r3, r5
 800b528:	da4c      	bge.n	800b5c4 <__gethex+0x2a4>
 800b52a:	ee18 0a10 	vmov	r0, s16
 800b52e:	4621      	mov	r1, r4
 800b530:	f000 fad2 	bl	800bad8 <_Bfree>
 800b534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b536:	2300      	movs	r3, #0
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	27a3      	movs	r7, #163	; 0xa3
 800b53c:	e785      	b.n	800b44a <__gethex+0x12a>
 800b53e:	1e73      	subs	r3, r6, #1
 800b540:	9a05      	ldr	r2, [sp, #20]
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b548:	4293      	cmp	r3, r2
 800b54a:	d019      	beq.n	800b580 <__gethex+0x260>
 800b54c:	f1bb 0f20 	cmp.w	fp, #32
 800b550:	d107      	bne.n	800b562 <__gethex+0x242>
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	9a00      	ldr	r2, [sp, #0]
 800b556:	f843 2b04 	str.w	r2, [r3], #4
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	2300      	movs	r3, #0
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	469b      	mov	fp, r3
 800b562:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b566:	f7ff fec6 	bl	800b2f6 <__hexdig_fun>
 800b56a:	9b00      	ldr	r3, [sp, #0]
 800b56c:	f000 000f 	and.w	r0, r0, #15
 800b570:	fa00 f00b 	lsl.w	r0, r0, fp
 800b574:	4303      	orrs	r3, r0
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	f10b 0b04 	add.w	fp, fp, #4
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	e00d      	b.n	800b59c <__gethex+0x27c>
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	9a06      	ldr	r2, [sp, #24]
 800b584:	4413      	add	r3, r2
 800b586:	42bb      	cmp	r3, r7
 800b588:	d3e0      	bcc.n	800b54c <__gethex+0x22c>
 800b58a:	4618      	mov	r0, r3
 800b58c:	9901      	ldr	r1, [sp, #4]
 800b58e:	9307      	str	r3, [sp, #28]
 800b590:	4652      	mov	r2, sl
 800b592:	f001 fb2c 	bl	800cbee <strncmp>
 800b596:	9b07      	ldr	r3, [sp, #28]
 800b598:	2800      	cmp	r0, #0
 800b59a:	d1d7      	bne.n	800b54c <__gethex+0x22c>
 800b59c:	461e      	mov	r6, r3
 800b59e:	e78b      	b.n	800b4b8 <__gethex+0x198>
 800b5a0:	f04f 0a03 	mov.w	sl, #3
 800b5a4:	e7b8      	b.n	800b518 <__gethex+0x1f8>
 800b5a6:	da0a      	bge.n	800b5be <__gethex+0x29e>
 800b5a8:	1a37      	subs	r7, r6, r0
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	ee18 0a10 	vmov	r0, s16
 800b5b0:	463a      	mov	r2, r7
 800b5b2:	f000 fcad 	bl	800bf10 <__lshift>
 800b5b6:	1bed      	subs	r5, r5, r7
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	f100 0914 	add.w	r9, r0, #20
 800b5be:	f04f 0a00 	mov.w	sl, #0
 800b5c2:	e7ae      	b.n	800b522 <__gethex+0x202>
 800b5c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b5c8:	42a8      	cmp	r0, r5
 800b5ca:	dd72      	ble.n	800b6b2 <__gethex+0x392>
 800b5cc:	1b45      	subs	r5, r0, r5
 800b5ce:	42ae      	cmp	r6, r5
 800b5d0:	dc36      	bgt.n	800b640 <__gethex+0x320>
 800b5d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d02a      	beq.n	800b630 <__gethex+0x310>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d02c      	beq.n	800b638 <__gethex+0x318>
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d11c      	bne.n	800b61c <__gethex+0x2fc>
 800b5e2:	42ae      	cmp	r6, r5
 800b5e4:	d11a      	bne.n	800b61c <__gethex+0x2fc>
 800b5e6:	2e01      	cmp	r6, #1
 800b5e8:	d112      	bne.n	800b610 <__gethex+0x2f0>
 800b5ea:	9a04      	ldr	r2, [sp, #16]
 800b5ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	f8c9 3000 	str.w	r3, [r9]
 800b5fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5fc:	2762      	movs	r7, #98	; 0x62
 800b5fe:	601c      	str	r4, [r3, #0]
 800b600:	e723      	b.n	800b44a <__gethex+0x12a>
 800b602:	bf00      	nop
 800b604:	0800d284 	.word	0x0800d284
 800b608:	0800d1a8 	.word	0x0800d1a8
 800b60c:	0800d21c 	.word	0x0800d21c
 800b610:	1e71      	subs	r1, r6, #1
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fec0 	bl	800c398 <__any_on>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1e6      	bne.n	800b5ea <__gethex+0x2ca>
 800b61c:	ee18 0a10 	vmov	r0, s16
 800b620:	4621      	mov	r1, r4
 800b622:	f000 fa59 	bl	800bad8 <_Bfree>
 800b626:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b628:	2300      	movs	r3, #0
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	2750      	movs	r7, #80	; 0x50
 800b62e:	e70c      	b.n	800b44a <__gethex+0x12a>
 800b630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1f2      	bne.n	800b61c <__gethex+0x2fc>
 800b636:	e7d8      	b.n	800b5ea <__gethex+0x2ca>
 800b638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1d5      	bne.n	800b5ea <__gethex+0x2ca>
 800b63e:	e7ed      	b.n	800b61c <__gethex+0x2fc>
 800b640:	1e6f      	subs	r7, r5, #1
 800b642:	f1ba 0f00 	cmp.w	sl, #0
 800b646:	d131      	bne.n	800b6ac <__gethex+0x38c>
 800b648:	b127      	cbz	r7, 800b654 <__gethex+0x334>
 800b64a:	4639      	mov	r1, r7
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 fea3 	bl	800c398 <__any_on>
 800b652:	4682      	mov	sl, r0
 800b654:	117b      	asrs	r3, r7, #5
 800b656:	2101      	movs	r1, #1
 800b658:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b65c:	f007 071f 	and.w	r7, r7, #31
 800b660:	fa01 f707 	lsl.w	r7, r1, r7
 800b664:	421f      	tst	r7, r3
 800b666:	4629      	mov	r1, r5
 800b668:	4620      	mov	r0, r4
 800b66a:	bf18      	it	ne
 800b66c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b670:	1b76      	subs	r6, r6, r5
 800b672:	f7ff fdee 	bl	800b252 <rshift>
 800b676:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b67a:	2702      	movs	r7, #2
 800b67c:	f1ba 0f00 	cmp.w	sl, #0
 800b680:	d048      	beq.n	800b714 <__gethex+0x3f4>
 800b682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b686:	2b02      	cmp	r3, #2
 800b688:	d015      	beq.n	800b6b6 <__gethex+0x396>
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d017      	beq.n	800b6be <__gethex+0x39e>
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d109      	bne.n	800b6a6 <__gethex+0x386>
 800b692:	f01a 0f02 	tst.w	sl, #2
 800b696:	d006      	beq.n	800b6a6 <__gethex+0x386>
 800b698:	f8d9 0000 	ldr.w	r0, [r9]
 800b69c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b6a0:	f01a 0f01 	tst.w	sl, #1
 800b6a4:	d10e      	bne.n	800b6c4 <__gethex+0x3a4>
 800b6a6:	f047 0710 	orr.w	r7, r7, #16
 800b6aa:	e033      	b.n	800b714 <__gethex+0x3f4>
 800b6ac:	f04f 0a01 	mov.w	sl, #1
 800b6b0:	e7d0      	b.n	800b654 <__gethex+0x334>
 800b6b2:	2701      	movs	r7, #1
 800b6b4:	e7e2      	b.n	800b67c <__gethex+0x35c>
 800b6b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6b8:	f1c3 0301 	rsb	r3, r3, #1
 800b6bc:	9315      	str	r3, [sp, #84]	; 0x54
 800b6be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0f0      	beq.n	800b6a6 <__gethex+0x386>
 800b6c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6c8:	f104 0314 	add.w	r3, r4, #20
 800b6cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6d4:	f04f 0c00 	mov.w	ip, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6de:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6e2:	d01c      	beq.n	800b71e <__gethex+0x3fe>
 800b6e4:	3201      	adds	r2, #1
 800b6e6:	6002      	str	r2, [r0, #0]
 800b6e8:	2f02      	cmp	r7, #2
 800b6ea:	f104 0314 	add.w	r3, r4, #20
 800b6ee:	d13f      	bne.n	800b770 <__gethex+0x450>
 800b6f0:	f8d8 2000 	ldr.w	r2, [r8]
 800b6f4:	3a01      	subs	r2, #1
 800b6f6:	42b2      	cmp	r2, r6
 800b6f8:	d10a      	bne.n	800b710 <__gethex+0x3f0>
 800b6fa:	1171      	asrs	r1, r6, #5
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b702:	f006 061f 	and.w	r6, r6, #31
 800b706:	fa02 f606 	lsl.w	r6, r2, r6
 800b70a:	421e      	tst	r6, r3
 800b70c:	bf18      	it	ne
 800b70e:	4617      	movne	r7, r2
 800b710:	f047 0720 	orr.w	r7, r7, #32
 800b714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b716:	601c      	str	r4, [r3, #0]
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	601d      	str	r5, [r3, #0]
 800b71c:	e695      	b.n	800b44a <__gethex+0x12a>
 800b71e:	4299      	cmp	r1, r3
 800b720:	f843 cc04 	str.w	ip, [r3, #-4]
 800b724:	d8d8      	bhi.n	800b6d8 <__gethex+0x3b8>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	459b      	cmp	fp, r3
 800b72a:	db19      	blt.n	800b760 <__gethex+0x440>
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	ee18 0a10 	vmov	r0, s16
 800b732:	3101      	adds	r1, #1
 800b734:	f000 f990 	bl	800ba58 <_Balloc>
 800b738:	4681      	mov	r9, r0
 800b73a:	b918      	cbnz	r0, 800b744 <__gethex+0x424>
 800b73c:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <__gethex+0x488>)
 800b73e:	4602      	mov	r2, r0
 800b740:	2184      	movs	r1, #132	; 0x84
 800b742:	e6a8      	b.n	800b496 <__gethex+0x176>
 800b744:	6922      	ldr	r2, [r4, #16]
 800b746:	3202      	adds	r2, #2
 800b748:	f104 010c 	add.w	r1, r4, #12
 800b74c:	0092      	lsls	r2, r2, #2
 800b74e:	300c      	adds	r0, #12
 800b750:	f000 f974 	bl	800ba3c <memcpy>
 800b754:	4621      	mov	r1, r4
 800b756:	ee18 0a10 	vmov	r0, s16
 800b75a:	f000 f9bd 	bl	800bad8 <_Bfree>
 800b75e:	464c      	mov	r4, r9
 800b760:	6923      	ldr	r3, [r4, #16]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b768:	6122      	str	r2, [r4, #16]
 800b76a:	2201      	movs	r2, #1
 800b76c:	615a      	str	r2, [r3, #20]
 800b76e:	e7bb      	b.n	800b6e8 <__gethex+0x3c8>
 800b770:	6922      	ldr	r2, [r4, #16]
 800b772:	455a      	cmp	r2, fp
 800b774:	dd0b      	ble.n	800b78e <__gethex+0x46e>
 800b776:	2101      	movs	r1, #1
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff fd6a 	bl	800b252 <rshift>
 800b77e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b782:	3501      	adds	r5, #1
 800b784:	42ab      	cmp	r3, r5
 800b786:	f6ff aed0 	blt.w	800b52a <__gethex+0x20a>
 800b78a:	2701      	movs	r7, #1
 800b78c:	e7c0      	b.n	800b710 <__gethex+0x3f0>
 800b78e:	f016 061f 	ands.w	r6, r6, #31
 800b792:	d0fa      	beq.n	800b78a <__gethex+0x46a>
 800b794:	4453      	add	r3, sl
 800b796:	f1c6 0620 	rsb	r6, r6, #32
 800b79a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b79e:	f000 fa4d 	bl	800bc3c <__hi0bits>
 800b7a2:	42b0      	cmp	r0, r6
 800b7a4:	dbe7      	blt.n	800b776 <__gethex+0x456>
 800b7a6:	e7f0      	b.n	800b78a <__gethex+0x46a>
 800b7a8:	0800d1a8 	.word	0x0800d1a8

0800b7ac <L_shift>:
 800b7ac:	f1c2 0208 	rsb	r2, r2, #8
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	b570      	push	{r4, r5, r6, lr}
 800b7b4:	f1c2 0620 	rsb	r6, r2, #32
 800b7b8:	6843      	ldr	r3, [r0, #4]
 800b7ba:	6804      	ldr	r4, [r0, #0]
 800b7bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b7c0:	432c      	orrs	r4, r5
 800b7c2:	40d3      	lsrs	r3, r2
 800b7c4:	6004      	str	r4, [r0, #0]
 800b7c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7ca:	4288      	cmp	r0, r1
 800b7cc:	d3f4      	bcc.n	800b7b8 <L_shift+0xc>
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__match>:
 800b7d0:	b530      	push	{r4, r5, lr}
 800b7d2:	6803      	ldr	r3, [r0, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7da:	b914      	cbnz	r4, 800b7e2 <__match+0x12>
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	2001      	movs	r0, #1
 800b7e0:	bd30      	pop	{r4, r5, pc}
 800b7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b7ea:	2d19      	cmp	r5, #25
 800b7ec:	bf98      	it	ls
 800b7ee:	3220      	addls	r2, #32
 800b7f0:	42a2      	cmp	r2, r4
 800b7f2:	d0f0      	beq.n	800b7d6 <__match+0x6>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7f3      	b.n	800b7e0 <__match+0x10>

0800b7f8 <__hexnan>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	680b      	ldr	r3, [r1, #0]
 800b7fe:	115e      	asrs	r6, r3, #5
 800b800:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b804:	f013 031f 	ands.w	r3, r3, #31
 800b808:	b087      	sub	sp, #28
 800b80a:	bf18      	it	ne
 800b80c:	3604      	addne	r6, #4
 800b80e:	2500      	movs	r5, #0
 800b810:	1f37      	subs	r7, r6, #4
 800b812:	4690      	mov	r8, r2
 800b814:	6802      	ldr	r2, [r0, #0]
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	4682      	mov	sl, r0
 800b81a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b81e:	46b9      	mov	r9, r7
 800b820:	463c      	mov	r4, r7
 800b822:	9502      	str	r5, [sp, #8]
 800b824:	46ab      	mov	fp, r5
 800b826:	7851      	ldrb	r1, [r2, #1]
 800b828:	1c53      	adds	r3, r2, #1
 800b82a:	9303      	str	r3, [sp, #12]
 800b82c:	b341      	cbz	r1, 800b880 <__hexnan+0x88>
 800b82e:	4608      	mov	r0, r1
 800b830:	9205      	str	r2, [sp, #20]
 800b832:	9104      	str	r1, [sp, #16]
 800b834:	f7ff fd5f 	bl	800b2f6 <__hexdig_fun>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d14f      	bne.n	800b8dc <__hexnan+0xe4>
 800b83c:	9904      	ldr	r1, [sp, #16]
 800b83e:	9a05      	ldr	r2, [sp, #20]
 800b840:	2920      	cmp	r1, #32
 800b842:	d818      	bhi.n	800b876 <__hexnan+0x7e>
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	459b      	cmp	fp, r3
 800b848:	dd13      	ble.n	800b872 <__hexnan+0x7a>
 800b84a:	454c      	cmp	r4, r9
 800b84c:	d206      	bcs.n	800b85c <__hexnan+0x64>
 800b84e:	2d07      	cmp	r5, #7
 800b850:	dc04      	bgt.n	800b85c <__hexnan+0x64>
 800b852:	462a      	mov	r2, r5
 800b854:	4649      	mov	r1, r9
 800b856:	4620      	mov	r0, r4
 800b858:	f7ff ffa8 	bl	800b7ac <L_shift>
 800b85c:	4544      	cmp	r4, r8
 800b85e:	d950      	bls.n	800b902 <__hexnan+0x10a>
 800b860:	2300      	movs	r3, #0
 800b862:	f1a4 0904 	sub.w	r9, r4, #4
 800b866:	f844 3c04 	str.w	r3, [r4, #-4]
 800b86a:	f8cd b008 	str.w	fp, [sp, #8]
 800b86e:	464c      	mov	r4, r9
 800b870:	461d      	mov	r5, r3
 800b872:	9a03      	ldr	r2, [sp, #12]
 800b874:	e7d7      	b.n	800b826 <__hexnan+0x2e>
 800b876:	2929      	cmp	r1, #41	; 0x29
 800b878:	d156      	bne.n	800b928 <__hexnan+0x130>
 800b87a:	3202      	adds	r2, #2
 800b87c:	f8ca 2000 	str.w	r2, [sl]
 800b880:	f1bb 0f00 	cmp.w	fp, #0
 800b884:	d050      	beq.n	800b928 <__hexnan+0x130>
 800b886:	454c      	cmp	r4, r9
 800b888:	d206      	bcs.n	800b898 <__hexnan+0xa0>
 800b88a:	2d07      	cmp	r5, #7
 800b88c:	dc04      	bgt.n	800b898 <__hexnan+0xa0>
 800b88e:	462a      	mov	r2, r5
 800b890:	4649      	mov	r1, r9
 800b892:	4620      	mov	r0, r4
 800b894:	f7ff ff8a 	bl	800b7ac <L_shift>
 800b898:	4544      	cmp	r4, r8
 800b89a:	d934      	bls.n	800b906 <__hexnan+0x10e>
 800b89c:	f1a8 0204 	sub.w	r2, r8, #4
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8aa:	429f      	cmp	r7, r3
 800b8ac:	d2f9      	bcs.n	800b8a2 <__hexnan+0xaa>
 800b8ae:	1b3b      	subs	r3, r7, r4
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	3401      	adds	r4, #1
 800b8b8:	3e03      	subs	r6, #3
 800b8ba:	42b4      	cmp	r4, r6
 800b8bc:	bf88      	it	hi
 800b8be:	2304      	movhi	r3, #4
 800b8c0:	4443      	add	r3, r8
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f843 2b04 	str.w	r2, [r3], #4
 800b8c8:	429f      	cmp	r7, r3
 800b8ca:	d2fb      	bcs.n	800b8c4 <__hexnan+0xcc>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	b91b      	cbnz	r3, 800b8d8 <__hexnan+0xe0>
 800b8d0:	4547      	cmp	r7, r8
 800b8d2:	d127      	bne.n	800b924 <__hexnan+0x12c>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	603b      	str	r3, [r7, #0]
 800b8d8:	2005      	movs	r0, #5
 800b8da:	e026      	b.n	800b92a <__hexnan+0x132>
 800b8dc:	3501      	adds	r5, #1
 800b8de:	2d08      	cmp	r5, #8
 800b8e0:	f10b 0b01 	add.w	fp, fp, #1
 800b8e4:	dd06      	ble.n	800b8f4 <__hexnan+0xfc>
 800b8e6:	4544      	cmp	r4, r8
 800b8e8:	d9c3      	bls.n	800b872 <__hexnan+0x7a>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8f0:	2501      	movs	r5, #1
 800b8f2:	3c04      	subs	r4, #4
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	f000 000f 	and.w	r0, r0, #15
 800b8fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b8fe:	6022      	str	r2, [r4, #0]
 800b900:	e7b7      	b.n	800b872 <__hexnan+0x7a>
 800b902:	2508      	movs	r5, #8
 800b904:	e7b5      	b.n	800b872 <__hexnan+0x7a>
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d0df      	beq.n	800b8cc <__hexnan+0xd4>
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	f1c3 0320 	rsb	r3, r3, #32
 800b914:	fa22 f303 	lsr.w	r3, r2, r3
 800b918:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b91c:	401a      	ands	r2, r3
 800b91e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b922:	e7d3      	b.n	800b8cc <__hexnan+0xd4>
 800b924:	3f04      	subs	r7, #4
 800b926:	e7d1      	b.n	800b8cc <__hexnan+0xd4>
 800b928:	2004      	movs	r0, #4
 800b92a:	b007      	add	sp, #28
 800b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b930 <_localeconv_r>:
 800b930:	4800      	ldr	r0, [pc, #0]	; (800b934 <_localeconv_r+0x4>)
 800b932:	4770      	bx	lr
 800b934:	20000164 	.word	0x20000164

0800b938 <__retarget_lock_init_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_acquire_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__retarget_lock_release_recursive>:
 800b93c:	4770      	bx	lr

0800b93e <__swhatbuf_r>:
 800b93e:	b570      	push	{r4, r5, r6, lr}
 800b940:	460e      	mov	r6, r1
 800b942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b946:	2900      	cmp	r1, #0
 800b948:	b096      	sub	sp, #88	; 0x58
 800b94a:	4614      	mov	r4, r2
 800b94c:	461d      	mov	r5, r3
 800b94e:	da08      	bge.n	800b962 <__swhatbuf_r+0x24>
 800b950:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	602a      	str	r2, [r5, #0]
 800b958:	061a      	lsls	r2, r3, #24
 800b95a:	d410      	bmi.n	800b97e <__swhatbuf_r+0x40>
 800b95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b960:	e00e      	b.n	800b980 <__swhatbuf_r+0x42>
 800b962:	466a      	mov	r2, sp
 800b964:	f001 f9b6 	bl	800ccd4 <_fstat_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dbf1      	blt.n	800b950 <__swhatbuf_r+0x12>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b976:	425a      	negs	r2, r3
 800b978:	415a      	adcs	r2, r3
 800b97a:	602a      	str	r2, [r5, #0]
 800b97c:	e7ee      	b.n	800b95c <__swhatbuf_r+0x1e>
 800b97e:	2340      	movs	r3, #64	; 0x40
 800b980:	2000      	movs	r0, #0
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	b016      	add	sp, #88	; 0x58
 800b986:	bd70      	pop	{r4, r5, r6, pc}

0800b988 <__smakebuf_r>:
 800b988:	898b      	ldrh	r3, [r1, #12]
 800b98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b98c:	079d      	lsls	r5, r3, #30
 800b98e:	4606      	mov	r6, r0
 800b990:	460c      	mov	r4, r1
 800b992:	d507      	bpl.n	800b9a4 <__smakebuf_r+0x1c>
 800b994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	2301      	movs	r3, #1
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	ab01      	add	r3, sp, #4
 800b9a6:	466a      	mov	r2, sp
 800b9a8:	f7ff ffc9 	bl	800b93e <__swhatbuf_r>
 800b9ac:	9900      	ldr	r1, [sp, #0]
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f000 fd95 	bl	800c4e0 <_malloc_r>
 800b9b6:	b948      	cbnz	r0, 800b9cc <__smakebuf_r+0x44>
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	059a      	lsls	r2, r3, #22
 800b9be:	d4ef      	bmi.n	800b9a0 <__smakebuf_r+0x18>
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	f043 0302 	orr.w	r3, r3, #2
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	e7e3      	b.n	800b994 <__smakebuf_r+0xc>
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <__smakebuf_r+0x7c>)
 800b9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	b15b      	cbz	r3, 800b9fc <__smakebuf_r+0x74>
 800b9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f001 f985 	bl	800ccf8 <_isatty_r>
 800b9ee:	b128      	cbz	r0, 800b9fc <__smakebuf_r+0x74>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	4305      	orrs	r5, r0
 800ba00:	81a5      	strh	r5, [r4, #12]
 800ba02:	e7cd      	b.n	800b9a0 <__smakebuf_r+0x18>
 800ba04:	0800b0b1 	.word	0x0800b0b1

0800ba08 <malloc>:
 800ba08:	4b02      	ldr	r3, [pc, #8]	; (800ba14 <malloc+0xc>)
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	f000 bd67 	b.w	800c4e0 <_malloc_r>
 800ba12:	bf00      	nop
 800ba14:	2000000c 	.word	0x2000000c

0800ba18 <__ascii_mbtowc>:
 800ba18:	b082      	sub	sp, #8
 800ba1a:	b901      	cbnz	r1, 800ba1e <__ascii_mbtowc+0x6>
 800ba1c:	a901      	add	r1, sp, #4
 800ba1e:	b142      	cbz	r2, 800ba32 <__ascii_mbtowc+0x1a>
 800ba20:	b14b      	cbz	r3, 800ba36 <__ascii_mbtowc+0x1e>
 800ba22:	7813      	ldrb	r3, [r2, #0]
 800ba24:	600b      	str	r3, [r1, #0]
 800ba26:	7812      	ldrb	r2, [r2, #0]
 800ba28:	1e10      	subs	r0, r2, #0
 800ba2a:	bf18      	it	ne
 800ba2c:	2001      	movne	r0, #1
 800ba2e:	b002      	add	sp, #8
 800ba30:	4770      	bx	lr
 800ba32:	4610      	mov	r0, r2
 800ba34:	e7fb      	b.n	800ba2e <__ascii_mbtowc+0x16>
 800ba36:	f06f 0001 	mvn.w	r0, #1
 800ba3a:	e7f8      	b.n	800ba2e <__ascii_mbtowc+0x16>

0800ba3c <memcpy>:
 800ba3c:	440a      	add	r2, r1
 800ba3e:	4291      	cmp	r1, r2
 800ba40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba44:	d100      	bne.n	800ba48 <memcpy+0xc>
 800ba46:	4770      	bx	lr
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba52:	4291      	cmp	r1, r2
 800ba54:	d1f9      	bne.n	800ba4a <memcpy+0xe>
 800ba56:	bd10      	pop	{r4, pc}

0800ba58 <_Balloc>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	b976      	cbnz	r6, 800ba80 <_Balloc+0x28>
 800ba62:	2010      	movs	r0, #16
 800ba64:	f7ff ffd0 	bl	800ba08 <malloc>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba6c:	b920      	cbnz	r0, 800ba78 <_Balloc+0x20>
 800ba6e:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <_Balloc+0x78>)
 800ba70:	4818      	ldr	r0, [pc, #96]	; (800bad4 <_Balloc+0x7c>)
 800ba72:	2166      	movs	r1, #102	; 0x66
 800ba74:	f001 f8ee 	bl	800cc54 <__assert_func>
 800ba78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba7c:	6006      	str	r6, [r0, #0]
 800ba7e:	60c6      	str	r6, [r0, #12]
 800ba80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba82:	68f3      	ldr	r3, [r6, #12]
 800ba84:	b183      	cbz	r3, 800baa8 <_Balloc+0x50>
 800ba86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba8e:	b9b8      	cbnz	r0, 800bac0 <_Balloc+0x68>
 800ba90:	2101      	movs	r1, #1
 800ba92:	fa01 f605 	lsl.w	r6, r1, r5
 800ba96:	1d72      	adds	r2, r6, #5
 800ba98:	0092      	lsls	r2, r2, #2
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fc9d 	bl	800c3da <_calloc_r>
 800baa0:	b160      	cbz	r0, 800babc <_Balloc+0x64>
 800baa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baa6:	e00e      	b.n	800bac6 <_Balloc+0x6e>
 800baa8:	2221      	movs	r2, #33	; 0x21
 800baaa:	2104      	movs	r1, #4
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fc94 	bl	800c3da <_calloc_r>
 800bab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab4:	60f0      	str	r0, [r6, #12]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e4      	bne.n	800ba86 <_Balloc+0x2e>
 800babc:	2000      	movs	r0, #0
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	6802      	ldr	r2, [r0, #0]
 800bac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bac6:	2300      	movs	r3, #0
 800bac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bacc:	e7f7      	b.n	800babe <_Balloc+0x66>
 800bace:	bf00      	nop
 800bad0:	0800d136 	.word	0x0800d136
 800bad4:	0800d298 	.word	0x0800d298

0800bad8 <_Bfree>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800badc:	4605      	mov	r5, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Bfree+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ff90 	bl	800ba08 <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	6268      	str	r0, [r5, #36]	; 0x24
 800baec:	b920      	cbnz	r0, 800baf8 <_Bfree+0x20>
 800baee:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <_Bfree+0x3c>)
 800baf0:	4809      	ldr	r0, [pc, #36]	; (800bb18 <_Bfree+0x40>)
 800baf2:	218a      	movs	r1, #138	; 0x8a
 800baf4:	f001 f8ae 	bl	800cc54 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	b13c      	cbz	r4, 800bb12 <_Bfree+0x3a>
 800bb02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb04:	6862      	ldr	r2, [r4, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb0c:	6021      	str	r1, [r4, #0]
 800bb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	0800d136 	.word	0x0800d136
 800bb18:	0800d298 	.word	0x0800d298

0800bb1c <__multadd>:
 800bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	690d      	ldr	r5, [r1, #16]
 800bb22:	4607      	mov	r7, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	461e      	mov	r6, r3
 800bb28:	f101 0c14 	add.w	ip, r1, #20
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb32:	b299      	uxth	r1, r3
 800bb34:	fb02 6101 	mla	r1, r2, r1, r6
 800bb38:	0c1e      	lsrs	r6, r3, #16
 800bb3a:	0c0b      	lsrs	r3, r1, #16
 800bb3c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb40:	b289      	uxth	r1, r1
 800bb42:	3001      	adds	r0, #1
 800bb44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb48:	4285      	cmp	r5, r0
 800bb4a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb52:	dcec      	bgt.n	800bb2e <__multadd+0x12>
 800bb54:	b30e      	cbz	r6, 800bb9a <__multadd+0x7e>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	dc19      	bgt.n	800bb90 <__multadd+0x74>
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	3101      	adds	r1, #1
 800bb62:	f7ff ff79 	bl	800ba58 <_Balloc>
 800bb66:	4680      	mov	r8, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__multadd+0x5a>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <__multadd+0x84>)
 800bb6e:	480d      	ldr	r0, [pc, #52]	; (800bba4 <__multadd+0x88>)
 800bb70:	21b5      	movs	r1, #181	; 0xb5
 800bb72:	f001 f86f 	bl	800cc54 <__assert_func>
 800bb76:	6922      	ldr	r2, [r4, #16]
 800bb78:	3202      	adds	r2, #2
 800bb7a:	f104 010c 	add.w	r1, r4, #12
 800bb7e:	0092      	lsls	r2, r2, #2
 800bb80:	300c      	adds	r0, #12
 800bb82:	f7ff ff5b 	bl	800ba3c <memcpy>
 800bb86:	4621      	mov	r1, r4
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ffa5 	bl	800bad8 <_Bfree>
 800bb8e:	4644      	mov	r4, r8
 800bb90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb94:	3501      	adds	r5, #1
 800bb96:	615e      	str	r6, [r3, #20]
 800bb98:	6125      	str	r5, [r4, #16]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba0:	0800d1a8 	.word	0x0800d1a8
 800bba4:	0800d298 	.word	0x0800d298

0800bba8 <__s2b>:
 800bba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbac:	460c      	mov	r4, r1
 800bbae:	4615      	mov	r5, r2
 800bbb0:	461f      	mov	r7, r3
 800bbb2:	2209      	movs	r2, #9
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	db09      	blt.n	800bbd8 <__s2b+0x30>
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f7ff ff47 	bl	800ba58 <_Balloc>
 800bbca:	b940      	cbnz	r0, 800bbde <__s2b+0x36>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4b19      	ldr	r3, [pc, #100]	; (800bc34 <__s2b+0x8c>)
 800bbd0:	4819      	ldr	r0, [pc, #100]	; (800bc38 <__s2b+0x90>)
 800bbd2:	21ce      	movs	r1, #206	; 0xce
 800bbd4:	f001 f83e 	bl	800cc54 <__assert_func>
 800bbd8:	0052      	lsls	r2, r2, #1
 800bbda:	3101      	adds	r1, #1
 800bbdc:	e7f0      	b.n	800bbc0 <__s2b+0x18>
 800bbde:	9b08      	ldr	r3, [sp, #32]
 800bbe0:	6143      	str	r3, [r0, #20]
 800bbe2:	2d09      	cmp	r5, #9
 800bbe4:	f04f 0301 	mov.w	r3, #1
 800bbe8:	6103      	str	r3, [r0, #16]
 800bbea:	dd16      	ble.n	800bc1a <__s2b+0x72>
 800bbec:	f104 0909 	add.w	r9, r4, #9
 800bbf0:	46c8      	mov	r8, r9
 800bbf2:	442c      	add	r4, r5
 800bbf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	3b30      	subs	r3, #48	; 0x30
 800bbfc:	220a      	movs	r2, #10
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff ff8c 	bl	800bb1c <__multadd>
 800bc04:	45a0      	cmp	r8, r4
 800bc06:	d1f5      	bne.n	800bbf4 <__s2b+0x4c>
 800bc08:	f1a5 0408 	sub.w	r4, r5, #8
 800bc0c:	444c      	add	r4, r9
 800bc0e:	1b2d      	subs	r5, r5, r4
 800bc10:	1963      	adds	r3, r4, r5
 800bc12:	42bb      	cmp	r3, r7
 800bc14:	db04      	blt.n	800bc20 <__s2b+0x78>
 800bc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc1a:	340a      	adds	r4, #10
 800bc1c:	2509      	movs	r5, #9
 800bc1e:	e7f6      	b.n	800bc0e <__s2b+0x66>
 800bc20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc24:	4601      	mov	r1, r0
 800bc26:	3b30      	subs	r3, #48	; 0x30
 800bc28:	220a      	movs	r2, #10
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff ff76 	bl	800bb1c <__multadd>
 800bc30:	e7ee      	b.n	800bc10 <__s2b+0x68>
 800bc32:	bf00      	nop
 800bc34:	0800d1a8 	.word	0x0800d1a8
 800bc38:	0800d298 	.word	0x0800d298

0800bc3c <__hi0bits>:
 800bc3c:	0c03      	lsrs	r3, r0, #16
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	b9d3      	cbnz	r3, 800bc78 <__hi0bits+0x3c>
 800bc42:	0400      	lsls	r0, r0, #16
 800bc44:	2310      	movs	r3, #16
 800bc46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc4a:	bf04      	itt	eq
 800bc4c:	0200      	lsleq	r0, r0, #8
 800bc4e:	3308      	addeq	r3, #8
 800bc50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc54:	bf04      	itt	eq
 800bc56:	0100      	lsleq	r0, r0, #4
 800bc58:	3304      	addeq	r3, #4
 800bc5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc5e:	bf04      	itt	eq
 800bc60:	0080      	lsleq	r0, r0, #2
 800bc62:	3302      	addeq	r3, #2
 800bc64:	2800      	cmp	r0, #0
 800bc66:	db05      	blt.n	800bc74 <__hi0bits+0x38>
 800bc68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc6c:	f103 0301 	add.w	r3, r3, #1
 800bc70:	bf08      	it	eq
 800bc72:	2320      	moveq	r3, #32
 800bc74:	4618      	mov	r0, r3
 800bc76:	4770      	bx	lr
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e7e4      	b.n	800bc46 <__hi0bits+0xa>

0800bc7c <__lo0bits>:
 800bc7c:	6803      	ldr	r3, [r0, #0]
 800bc7e:	f013 0207 	ands.w	r2, r3, #7
 800bc82:	4601      	mov	r1, r0
 800bc84:	d00b      	beq.n	800bc9e <__lo0bits+0x22>
 800bc86:	07da      	lsls	r2, r3, #31
 800bc88:	d423      	bmi.n	800bcd2 <__lo0bits+0x56>
 800bc8a:	0798      	lsls	r0, r3, #30
 800bc8c:	bf49      	itett	mi
 800bc8e:	085b      	lsrmi	r3, r3, #1
 800bc90:	089b      	lsrpl	r3, r3, #2
 800bc92:	2001      	movmi	r0, #1
 800bc94:	600b      	strmi	r3, [r1, #0]
 800bc96:	bf5c      	itt	pl
 800bc98:	600b      	strpl	r3, [r1, #0]
 800bc9a:	2002      	movpl	r0, #2
 800bc9c:	4770      	bx	lr
 800bc9e:	b298      	uxth	r0, r3
 800bca0:	b9a8      	cbnz	r0, 800bcce <__lo0bits+0x52>
 800bca2:	0c1b      	lsrs	r3, r3, #16
 800bca4:	2010      	movs	r0, #16
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	b90a      	cbnz	r2, 800bcae <__lo0bits+0x32>
 800bcaa:	3008      	adds	r0, #8
 800bcac:	0a1b      	lsrs	r3, r3, #8
 800bcae:	071a      	lsls	r2, r3, #28
 800bcb0:	bf04      	itt	eq
 800bcb2:	091b      	lsreq	r3, r3, #4
 800bcb4:	3004      	addeq	r0, #4
 800bcb6:	079a      	lsls	r2, r3, #30
 800bcb8:	bf04      	itt	eq
 800bcba:	089b      	lsreq	r3, r3, #2
 800bcbc:	3002      	addeq	r0, #2
 800bcbe:	07da      	lsls	r2, r3, #31
 800bcc0:	d403      	bmi.n	800bcca <__lo0bits+0x4e>
 800bcc2:	085b      	lsrs	r3, r3, #1
 800bcc4:	f100 0001 	add.w	r0, r0, #1
 800bcc8:	d005      	beq.n	800bcd6 <__lo0bits+0x5a>
 800bcca:	600b      	str	r3, [r1, #0]
 800bccc:	4770      	bx	lr
 800bcce:	4610      	mov	r0, r2
 800bcd0:	e7e9      	b.n	800bca6 <__lo0bits+0x2a>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	4770      	bx	lr
 800bcd6:	2020      	movs	r0, #32
 800bcd8:	4770      	bx	lr
	...

0800bcdc <__i2b>:
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	460c      	mov	r4, r1
 800bce0:	2101      	movs	r1, #1
 800bce2:	f7ff feb9 	bl	800ba58 <_Balloc>
 800bce6:	4602      	mov	r2, r0
 800bce8:	b928      	cbnz	r0, 800bcf6 <__i2b+0x1a>
 800bcea:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <__i2b+0x24>)
 800bcec:	4805      	ldr	r0, [pc, #20]	; (800bd04 <__i2b+0x28>)
 800bcee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcf2:	f000 ffaf 	bl	800cc54 <__assert_func>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	6144      	str	r4, [r0, #20]
 800bcfa:	6103      	str	r3, [r0, #16]
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	bf00      	nop
 800bd00:	0800d1a8 	.word	0x0800d1a8
 800bd04:	0800d298 	.word	0x0800d298

0800bd08 <__multiply>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4691      	mov	r9, r2
 800bd0e:	690a      	ldr	r2, [r1, #16]
 800bd10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	bfb8      	it	lt
 800bd18:	460b      	movlt	r3, r1
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	bfbc      	itt	lt
 800bd1e:	464c      	movlt	r4, r9
 800bd20:	4699      	movlt	r9, r3
 800bd22:	6927      	ldr	r7, [r4, #16]
 800bd24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd28:	68a3      	ldr	r3, [r4, #8]
 800bd2a:	6861      	ldr	r1, [r4, #4]
 800bd2c:	eb07 060a 	add.w	r6, r7, sl
 800bd30:	42b3      	cmp	r3, r6
 800bd32:	b085      	sub	sp, #20
 800bd34:	bfb8      	it	lt
 800bd36:	3101      	addlt	r1, #1
 800bd38:	f7ff fe8e 	bl	800ba58 <_Balloc>
 800bd3c:	b930      	cbnz	r0, 800bd4c <__multiply+0x44>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	4b44      	ldr	r3, [pc, #272]	; (800be54 <__multiply+0x14c>)
 800bd42:	4845      	ldr	r0, [pc, #276]	; (800be58 <__multiply+0x150>)
 800bd44:	f240 115d 	movw	r1, #349	; 0x15d
 800bd48:	f000 ff84 	bl	800cc54 <__assert_func>
 800bd4c:	f100 0514 	add.w	r5, r0, #20
 800bd50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd54:	462b      	mov	r3, r5
 800bd56:	2200      	movs	r2, #0
 800bd58:	4543      	cmp	r3, r8
 800bd5a:	d321      	bcc.n	800bda0 <__multiply+0x98>
 800bd5c:	f104 0314 	add.w	r3, r4, #20
 800bd60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd64:	f109 0314 	add.w	r3, r9, #20
 800bd68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd6c:	9202      	str	r2, [sp, #8]
 800bd6e:	1b3a      	subs	r2, r7, r4
 800bd70:	3a15      	subs	r2, #21
 800bd72:	f022 0203 	bic.w	r2, r2, #3
 800bd76:	3204      	adds	r2, #4
 800bd78:	f104 0115 	add.w	r1, r4, #21
 800bd7c:	428f      	cmp	r7, r1
 800bd7e:	bf38      	it	cc
 800bd80:	2204      	movcc	r2, #4
 800bd82:	9201      	str	r2, [sp, #4]
 800bd84:	9a02      	ldr	r2, [sp, #8]
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d80c      	bhi.n	800bda6 <__multiply+0x9e>
 800bd8c:	2e00      	cmp	r6, #0
 800bd8e:	dd03      	ble.n	800bd98 <__multiply+0x90>
 800bd90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d05a      	beq.n	800be4e <__multiply+0x146>
 800bd98:	6106      	str	r6, [r0, #16]
 800bd9a:	b005      	add	sp, #20
 800bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda0:	f843 2b04 	str.w	r2, [r3], #4
 800bda4:	e7d8      	b.n	800bd58 <__multiply+0x50>
 800bda6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdaa:	f1ba 0f00 	cmp.w	sl, #0
 800bdae:	d024      	beq.n	800bdfa <__multiply+0xf2>
 800bdb0:	f104 0e14 	add.w	lr, r4, #20
 800bdb4:	46a9      	mov	r9, r5
 800bdb6:	f04f 0c00 	mov.w	ip, #0
 800bdba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdbe:	f8d9 1000 	ldr.w	r1, [r9]
 800bdc2:	fa1f fb82 	uxth.w	fp, r2
 800bdc6:	b289      	uxth	r1, r1
 800bdc8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdd0:	f8d9 2000 	ldr.w	r2, [r9]
 800bdd4:	4461      	add	r1, ip
 800bdd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdda:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bde2:	b289      	uxth	r1, r1
 800bde4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bde8:	4577      	cmp	r7, lr
 800bdea:	f849 1b04 	str.w	r1, [r9], #4
 800bdee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdf2:	d8e2      	bhi.n	800bdba <__multiply+0xb2>
 800bdf4:	9a01      	ldr	r2, [sp, #4]
 800bdf6:	f845 c002 	str.w	ip, [r5, r2]
 800bdfa:	9a03      	ldr	r2, [sp, #12]
 800bdfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be00:	3304      	adds	r3, #4
 800be02:	f1b9 0f00 	cmp.w	r9, #0
 800be06:	d020      	beq.n	800be4a <__multiply+0x142>
 800be08:	6829      	ldr	r1, [r5, #0]
 800be0a:	f104 0c14 	add.w	ip, r4, #20
 800be0e:	46ae      	mov	lr, r5
 800be10:	f04f 0a00 	mov.w	sl, #0
 800be14:	f8bc b000 	ldrh.w	fp, [ip]
 800be18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be1c:	fb09 220b 	mla	r2, r9, fp, r2
 800be20:	4492      	add	sl, r2
 800be22:	b289      	uxth	r1, r1
 800be24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be28:	f84e 1b04 	str.w	r1, [lr], #4
 800be2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be30:	f8be 1000 	ldrh.w	r1, [lr]
 800be34:	0c12      	lsrs	r2, r2, #16
 800be36:	fb09 1102 	mla	r1, r9, r2, r1
 800be3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be3e:	4567      	cmp	r7, ip
 800be40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be44:	d8e6      	bhi.n	800be14 <__multiply+0x10c>
 800be46:	9a01      	ldr	r2, [sp, #4]
 800be48:	50a9      	str	r1, [r5, r2]
 800be4a:	3504      	adds	r5, #4
 800be4c:	e79a      	b.n	800bd84 <__multiply+0x7c>
 800be4e:	3e01      	subs	r6, #1
 800be50:	e79c      	b.n	800bd8c <__multiply+0x84>
 800be52:	bf00      	nop
 800be54:	0800d1a8 	.word	0x0800d1a8
 800be58:	0800d298 	.word	0x0800d298

0800be5c <__pow5mult>:
 800be5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be60:	4615      	mov	r5, r2
 800be62:	f012 0203 	ands.w	r2, r2, #3
 800be66:	4606      	mov	r6, r0
 800be68:	460f      	mov	r7, r1
 800be6a:	d007      	beq.n	800be7c <__pow5mult+0x20>
 800be6c:	4c25      	ldr	r4, [pc, #148]	; (800bf04 <__pow5mult+0xa8>)
 800be6e:	3a01      	subs	r2, #1
 800be70:	2300      	movs	r3, #0
 800be72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be76:	f7ff fe51 	bl	800bb1c <__multadd>
 800be7a:	4607      	mov	r7, r0
 800be7c:	10ad      	asrs	r5, r5, #2
 800be7e:	d03d      	beq.n	800befc <__pow5mult+0xa0>
 800be80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be82:	b97c      	cbnz	r4, 800bea4 <__pow5mult+0x48>
 800be84:	2010      	movs	r0, #16
 800be86:	f7ff fdbf 	bl	800ba08 <malloc>
 800be8a:	4602      	mov	r2, r0
 800be8c:	6270      	str	r0, [r6, #36]	; 0x24
 800be8e:	b928      	cbnz	r0, 800be9c <__pow5mult+0x40>
 800be90:	4b1d      	ldr	r3, [pc, #116]	; (800bf08 <__pow5mult+0xac>)
 800be92:	481e      	ldr	r0, [pc, #120]	; (800bf0c <__pow5mult+0xb0>)
 800be94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be98:	f000 fedc 	bl	800cc54 <__assert_func>
 800be9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bea0:	6004      	str	r4, [r0, #0]
 800bea2:	60c4      	str	r4, [r0, #12]
 800bea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800beac:	b94c      	cbnz	r4, 800bec2 <__pow5mult+0x66>
 800beae:	f240 2171 	movw	r1, #625	; 0x271
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ff12 	bl	800bcdc <__i2b>
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c8 0008 	str.w	r0, [r8, #8]
 800bebe:	4604      	mov	r4, r0
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	f04f 0900 	mov.w	r9, #0
 800bec6:	07eb      	lsls	r3, r5, #31
 800bec8:	d50a      	bpl.n	800bee0 <__pow5mult+0x84>
 800beca:	4639      	mov	r1, r7
 800becc:	4622      	mov	r2, r4
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ff1a 	bl	800bd08 <__multiply>
 800bed4:	4639      	mov	r1, r7
 800bed6:	4680      	mov	r8, r0
 800bed8:	4630      	mov	r0, r6
 800beda:	f7ff fdfd 	bl	800bad8 <_Bfree>
 800bede:	4647      	mov	r7, r8
 800bee0:	106d      	asrs	r5, r5, #1
 800bee2:	d00b      	beq.n	800befc <__pow5mult+0xa0>
 800bee4:	6820      	ldr	r0, [r4, #0]
 800bee6:	b938      	cbnz	r0, 800bef8 <__pow5mult+0x9c>
 800bee8:	4622      	mov	r2, r4
 800beea:	4621      	mov	r1, r4
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff ff0b 	bl	800bd08 <__multiply>
 800bef2:	6020      	str	r0, [r4, #0]
 800bef4:	f8c0 9000 	str.w	r9, [r0]
 800bef8:	4604      	mov	r4, r0
 800befa:	e7e4      	b.n	800bec6 <__pow5mult+0x6a>
 800befc:	4638      	mov	r0, r7
 800befe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf02:	bf00      	nop
 800bf04:	0800d3e8 	.word	0x0800d3e8
 800bf08:	0800d136 	.word	0x0800d136
 800bf0c:	0800d298 	.word	0x0800d298

0800bf10 <__lshift>:
 800bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	460c      	mov	r4, r1
 800bf16:	6849      	ldr	r1, [r1, #4]
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf1e:	68a3      	ldr	r3, [r4, #8]
 800bf20:	4607      	mov	r7, r0
 800bf22:	4691      	mov	r9, r2
 800bf24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf28:	f108 0601 	add.w	r6, r8, #1
 800bf2c:	42b3      	cmp	r3, r6
 800bf2e:	db0b      	blt.n	800bf48 <__lshift+0x38>
 800bf30:	4638      	mov	r0, r7
 800bf32:	f7ff fd91 	bl	800ba58 <_Balloc>
 800bf36:	4605      	mov	r5, r0
 800bf38:	b948      	cbnz	r0, 800bf4e <__lshift+0x3e>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	4b2a      	ldr	r3, [pc, #168]	; (800bfe8 <__lshift+0xd8>)
 800bf3e:	482b      	ldr	r0, [pc, #172]	; (800bfec <__lshift+0xdc>)
 800bf40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf44:	f000 fe86 	bl	800cc54 <__assert_func>
 800bf48:	3101      	adds	r1, #1
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	e7ee      	b.n	800bf2c <__lshift+0x1c>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f100 0114 	add.w	r1, r0, #20
 800bf54:	f100 0210 	add.w	r2, r0, #16
 800bf58:	4618      	mov	r0, r3
 800bf5a:	4553      	cmp	r3, sl
 800bf5c:	db37      	blt.n	800bfce <__lshift+0xbe>
 800bf5e:	6920      	ldr	r0, [r4, #16]
 800bf60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf64:	f104 0314 	add.w	r3, r4, #20
 800bf68:	f019 091f 	ands.w	r9, r9, #31
 800bf6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf74:	d02f      	beq.n	800bfd6 <__lshift+0xc6>
 800bf76:	f1c9 0e20 	rsb	lr, r9, #32
 800bf7a:	468a      	mov	sl, r1
 800bf7c:	f04f 0c00 	mov.w	ip, #0
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	fa02 f209 	lsl.w	r2, r2, r9
 800bf86:	ea42 020c 	orr.w	r2, r2, ip
 800bf8a:	f84a 2b04 	str.w	r2, [sl], #4
 800bf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf92:	4298      	cmp	r0, r3
 800bf94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf98:	d8f2      	bhi.n	800bf80 <__lshift+0x70>
 800bf9a:	1b03      	subs	r3, r0, r4
 800bf9c:	3b15      	subs	r3, #21
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	f104 0215 	add.w	r2, r4, #21
 800bfa8:	4290      	cmp	r0, r2
 800bfaa:	bf38      	it	cc
 800bfac:	2304      	movcc	r3, #4
 800bfae:	f841 c003 	str.w	ip, [r1, r3]
 800bfb2:	f1bc 0f00 	cmp.w	ip, #0
 800bfb6:	d001      	beq.n	800bfbc <__lshift+0xac>
 800bfb8:	f108 0602 	add.w	r6, r8, #2
 800bfbc:	3e01      	subs	r6, #1
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	612e      	str	r6, [r5, #16]
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f7ff fd88 	bl	800bad8 <_Bfree>
 800bfc8:	4628      	mov	r0, r5
 800bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfce:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	e7c1      	b.n	800bf5a <__lshift+0x4a>
 800bfd6:	3904      	subs	r1, #4
 800bfd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfe0:	4298      	cmp	r0, r3
 800bfe2:	d8f9      	bhi.n	800bfd8 <__lshift+0xc8>
 800bfe4:	e7ea      	b.n	800bfbc <__lshift+0xac>
 800bfe6:	bf00      	nop
 800bfe8:	0800d1a8 	.word	0x0800d1a8
 800bfec:	0800d298 	.word	0x0800d298

0800bff0 <__mcmp>:
 800bff0:	b530      	push	{r4, r5, lr}
 800bff2:	6902      	ldr	r2, [r0, #16]
 800bff4:	690c      	ldr	r4, [r1, #16]
 800bff6:	1b12      	subs	r2, r2, r4
 800bff8:	d10e      	bne.n	800c018 <__mcmp+0x28>
 800bffa:	f100 0314 	add.w	r3, r0, #20
 800bffe:	3114      	adds	r1, #20
 800c000:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c004:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c008:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c00c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c010:	42a5      	cmp	r5, r4
 800c012:	d003      	beq.n	800c01c <__mcmp+0x2c>
 800c014:	d305      	bcc.n	800c022 <__mcmp+0x32>
 800c016:	2201      	movs	r2, #1
 800c018:	4610      	mov	r0, r2
 800c01a:	bd30      	pop	{r4, r5, pc}
 800c01c:	4283      	cmp	r3, r0
 800c01e:	d3f3      	bcc.n	800c008 <__mcmp+0x18>
 800c020:	e7fa      	b.n	800c018 <__mcmp+0x28>
 800c022:	f04f 32ff 	mov.w	r2, #4294967295
 800c026:	e7f7      	b.n	800c018 <__mcmp+0x28>

0800c028 <__mdiff>:
 800c028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	460c      	mov	r4, r1
 800c02e:	4606      	mov	r6, r0
 800c030:	4611      	mov	r1, r2
 800c032:	4620      	mov	r0, r4
 800c034:	4690      	mov	r8, r2
 800c036:	f7ff ffdb 	bl	800bff0 <__mcmp>
 800c03a:	1e05      	subs	r5, r0, #0
 800c03c:	d110      	bne.n	800c060 <__mdiff+0x38>
 800c03e:	4629      	mov	r1, r5
 800c040:	4630      	mov	r0, r6
 800c042:	f7ff fd09 	bl	800ba58 <_Balloc>
 800c046:	b930      	cbnz	r0, 800c056 <__mdiff+0x2e>
 800c048:	4b3a      	ldr	r3, [pc, #232]	; (800c134 <__mdiff+0x10c>)
 800c04a:	4602      	mov	r2, r0
 800c04c:	f240 2132 	movw	r1, #562	; 0x232
 800c050:	4839      	ldr	r0, [pc, #228]	; (800c138 <__mdiff+0x110>)
 800c052:	f000 fdff 	bl	800cc54 <__assert_func>
 800c056:	2301      	movs	r3, #1
 800c058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c060:	bfa4      	itt	ge
 800c062:	4643      	movge	r3, r8
 800c064:	46a0      	movge	r8, r4
 800c066:	4630      	mov	r0, r6
 800c068:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c06c:	bfa6      	itte	ge
 800c06e:	461c      	movge	r4, r3
 800c070:	2500      	movge	r5, #0
 800c072:	2501      	movlt	r5, #1
 800c074:	f7ff fcf0 	bl	800ba58 <_Balloc>
 800c078:	b920      	cbnz	r0, 800c084 <__mdiff+0x5c>
 800c07a:	4b2e      	ldr	r3, [pc, #184]	; (800c134 <__mdiff+0x10c>)
 800c07c:	4602      	mov	r2, r0
 800c07e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c082:	e7e5      	b.n	800c050 <__mdiff+0x28>
 800c084:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c088:	6926      	ldr	r6, [r4, #16]
 800c08a:	60c5      	str	r5, [r0, #12]
 800c08c:	f104 0914 	add.w	r9, r4, #20
 800c090:	f108 0514 	add.w	r5, r8, #20
 800c094:	f100 0e14 	add.w	lr, r0, #20
 800c098:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c09c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0a0:	f108 0210 	add.w	r2, r8, #16
 800c0a4:	46f2      	mov	sl, lr
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0b0:	fa1f f883 	uxth.w	r8, r3
 800c0b4:	fa11 f18b 	uxtah	r1, r1, fp
 800c0b8:	0c1b      	lsrs	r3, r3, #16
 800c0ba:	eba1 0808 	sub.w	r8, r1, r8
 800c0be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0c6:	fa1f f888 	uxth.w	r8, r8
 800c0ca:	1419      	asrs	r1, r3, #16
 800c0cc:	454e      	cmp	r6, r9
 800c0ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0d2:	f84a 3b04 	str.w	r3, [sl], #4
 800c0d6:	d8e7      	bhi.n	800c0a8 <__mdiff+0x80>
 800c0d8:	1b33      	subs	r3, r6, r4
 800c0da:	3b15      	subs	r3, #21
 800c0dc:	f023 0303 	bic.w	r3, r3, #3
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	3415      	adds	r4, #21
 800c0e4:	42a6      	cmp	r6, r4
 800c0e6:	bf38      	it	cc
 800c0e8:	2304      	movcc	r3, #4
 800c0ea:	441d      	add	r5, r3
 800c0ec:	4473      	add	r3, lr
 800c0ee:	469e      	mov	lr, r3
 800c0f0:	462e      	mov	r6, r5
 800c0f2:	4566      	cmp	r6, ip
 800c0f4:	d30e      	bcc.n	800c114 <__mdiff+0xec>
 800c0f6:	f10c 0203 	add.w	r2, ip, #3
 800c0fa:	1b52      	subs	r2, r2, r5
 800c0fc:	f022 0203 	bic.w	r2, r2, #3
 800c100:	3d03      	subs	r5, #3
 800c102:	45ac      	cmp	ip, r5
 800c104:	bf38      	it	cc
 800c106:	2200      	movcc	r2, #0
 800c108:	441a      	add	r2, r3
 800c10a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c10e:	b17b      	cbz	r3, 800c130 <__mdiff+0x108>
 800c110:	6107      	str	r7, [r0, #16]
 800c112:	e7a3      	b.n	800c05c <__mdiff+0x34>
 800c114:	f856 8b04 	ldr.w	r8, [r6], #4
 800c118:	fa11 f288 	uxtah	r2, r1, r8
 800c11c:	1414      	asrs	r4, r2, #16
 800c11e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c122:	b292      	uxth	r2, r2
 800c124:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c128:	f84e 2b04 	str.w	r2, [lr], #4
 800c12c:	1421      	asrs	r1, r4, #16
 800c12e:	e7e0      	b.n	800c0f2 <__mdiff+0xca>
 800c130:	3f01      	subs	r7, #1
 800c132:	e7ea      	b.n	800c10a <__mdiff+0xe2>
 800c134:	0800d1a8 	.word	0x0800d1a8
 800c138:	0800d298 	.word	0x0800d298

0800c13c <__ulp>:
 800c13c:	b082      	sub	sp, #8
 800c13e:	ed8d 0b00 	vstr	d0, [sp]
 800c142:	9b01      	ldr	r3, [sp, #4]
 800c144:	4912      	ldr	r1, [pc, #72]	; (800c190 <__ulp+0x54>)
 800c146:	4019      	ands	r1, r3
 800c148:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c14c:	2900      	cmp	r1, #0
 800c14e:	dd05      	ble.n	800c15c <__ulp+0x20>
 800c150:	2200      	movs	r2, #0
 800c152:	460b      	mov	r3, r1
 800c154:	ec43 2b10 	vmov	d0, r2, r3
 800c158:	b002      	add	sp, #8
 800c15a:	4770      	bx	lr
 800c15c:	4249      	negs	r1, r1
 800c15e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c162:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	da04      	bge.n	800c17a <__ulp+0x3e>
 800c170:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c174:	fa41 f300 	asr.w	r3, r1, r0
 800c178:	e7ec      	b.n	800c154 <__ulp+0x18>
 800c17a:	f1a0 0114 	sub.w	r1, r0, #20
 800c17e:	291e      	cmp	r1, #30
 800c180:	bfda      	itte	le
 800c182:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c186:	fa20 f101 	lsrle.w	r1, r0, r1
 800c18a:	2101      	movgt	r1, #1
 800c18c:	460a      	mov	r2, r1
 800c18e:	e7e1      	b.n	800c154 <__ulp+0x18>
 800c190:	7ff00000 	.word	0x7ff00000

0800c194 <__b2d>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	6905      	ldr	r5, [r0, #16]
 800c198:	f100 0714 	add.w	r7, r0, #20
 800c19c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c1a0:	1f2e      	subs	r6, r5, #4
 800c1a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff fd48 	bl	800bc3c <__hi0bits>
 800c1ac:	f1c0 0320 	rsb	r3, r0, #32
 800c1b0:	280a      	cmp	r0, #10
 800c1b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c230 <__b2d+0x9c>
 800c1b6:	600b      	str	r3, [r1, #0]
 800c1b8:	dc14      	bgt.n	800c1e4 <__b2d+0x50>
 800c1ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800c1be:	fa24 f10e 	lsr.w	r1, r4, lr
 800c1c2:	42b7      	cmp	r7, r6
 800c1c4:	ea41 030c 	orr.w	r3, r1, ip
 800c1c8:	bf34      	ite	cc
 800c1ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1ce:	2100      	movcs	r1, #0
 800c1d0:	3015      	adds	r0, #21
 800c1d2:	fa04 f000 	lsl.w	r0, r4, r0
 800c1d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800c1da:	ea40 0201 	orr.w	r2, r0, r1
 800c1de:	ec43 2b10 	vmov	d0, r2, r3
 800c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e4:	42b7      	cmp	r7, r6
 800c1e6:	bf3a      	itte	cc
 800c1e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800c1f0:	2100      	movcs	r1, #0
 800c1f2:	380b      	subs	r0, #11
 800c1f4:	d017      	beq.n	800c226 <__b2d+0x92>
 800c1f6:	f1c0 0c20 	rsb	ip, r0, #32
 800c1fa:	fa04 f500 	lsl.w	r5, r4, r0
 800c1fe:	42be      	cmp	r6, r7
 800c200:	fa21 f40c 	lsr.w	r4, r1, ip
 800c204:	ea45 0504 	orr.w	r5, r5, r4
 800c208:	bf8c      	ite	hi
 800c20a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c20e:	2400      	movls	r4, #0
 800c210:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c214:	fa01 f000 	lsl.w	r0, r1, r0
 800c218:	fa24 f40c 	lsr.w	r4, r4, ip
 800c21c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c220:	ea40 0204 	orr.w	r2, r0, r4
 800c224:	e7db      	b.n	800c1de <__b2d+0x4a>
 800c226:	ea44 030c 	orr.w	r3, r4, ip
 800c22a:	460a      	mov	r2, r1
 800c22c:	e7d7      	b.n	800c1de <__b2d+0x4a>
 800c22e:	bf00      	nop
 800c230:	3ff00000 	.word	0x3ff00000

0800c234 <__d2b>:
 800c234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c238:	4689      	mov	r9, r1
 800c23a:	2101      	movs	r1, #1
 800c23c:	ec57 6b10 	vmov	r6, r7, d0
 800c240:	4690      	mov	r8, r2
 800c242:	f7ff fc09 	bl	800ba58 <_Balloc>
 800c246:	4604      	mov	r4, r0
 800c248:	b930      	cbnz	r0, 800c258 <__d2b+0x24>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4b25      	ldr	r3, [pc, #148]	; (800c2e4 <__d2b+0xb0>)
 800c24e:	4826      	ldr	r0, [pc, #152]	; (800c2e8 <__d2b+0xb4>)
 800c250:	f240 310a 	movw	r1, #778	; 0x30a
 800c254:	f000 fcfe 	bl	800cc54 <__assert_func>
 800c258:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c25c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c260:	bb35      	cbnz	r5, 800c2b0 <__d2b+0x7c>
 800c262:	2e00      	cmp	r6, #0
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	d028      	beq.n	800c2ba <__d2b+0x86>
 800c268:	4668      	mov	r0, sp
 800c26a:	9600      	str	r6, [sp, #0]
 800c26c:	f7ff fd06 	bl	800bc7c <__lo0bits>
 800c270:	9900      	ldr	r1, [sp, #0]
 800c272:	b300      	cbz	r0, 800c2b6 <__d2b+0x82>
 800c274:	9a01      	ldr	r2, [sp, #4]
 800c276:	f1c0 0320 	rsb	r3, r0, #32
 800c27a:	fa02 f303 	lsl.w	r3, r2, r3
 800c27e:	430b      	orrs	r3, r1
 800c280:	40c2      	lsrs	r2, r0
 800c282:	6163      	str	r3, [r4, #20]
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	61a3      	str	r3, [r4, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bf14      	ite	ne
 800c28e:	2202      	movne	r2, #2
 800c290:	2201      	moveq	r2, #1
 800c292:	6122      	str	r2, [r4, #16]
 800c294:	b1d5      	cbz	r5, 800c2cc <__d2b+0x98>
 800c296:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c29a:	4405      	add	r5, r0
 800c29c:	f8c9 5000 	str.w	r5, [r9]
 800c2a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2a4:	f8c8 0000 	str.w	r0, [r8]
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	b003      	add	sp, #12
 800c2ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2b4:	e7d5      	b.n	800c262 <__d2b+0x2e>
 800c2b6:	6161      	str	r1, [r4, #20]
 800c2b8:	e7e5      	b.n	800c286 <__d2b+0x52>
 800c2ba:	a801      	add	r0, sp, #4
 800c2bc:	f7ff fcde 	bl	800bc7c <__lo0bits>
 800c2c0:	9b01      	ldr	r3, [sp, #4]
 800c2c2:	6163      	str	r3, [r4, #20]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	6122      	str	r2, [r4, #16]
 800c2c8:	3020      	adds	r0, #32
 800c2ca:	e7e3      	b.n	800c294 <__d2b+0x60>
 800c2cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2d4:	f8c9 0000 	str.w	r0, [r9]
 800c2d8:	6918      	ldr	r0, [r3, #16]
 800c2da:	f7ff fcaf 	bl	800bc3c <__hi0bits>
 800c2de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2e2:	e7df      	b.n	800c2a4 <__d2b+0x70>
 800c2e4:	0800d1a8 	.word	0x0800d1a8
 800c2e8:	0800d298 	.word	0x0800d298

0800c2ec <__ratio>:
 800c2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	4688      	mov	r8, r1
 800c2f2:	4669      	mov	r1, sp
 800c2f4:	4681      	mov	r9, r0
 800c2f6:	f7ff ff4d 	bl	800c194 <__b2d>
 800c2fa:	a901      	add	r1, sp, #4
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	ec55 4b10 	vmov	r4, r5, d0
 800c302:	f7ff ff47 	bl	800c194 <__b2d>
 800c306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c30a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c30e:	eba3 0c02 	sub.w	ip, r3, r2
 800c312:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c31c:	ec51 0b10 	vmov	r0, r1, d0
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfd6      	itet	le
 800c324:	460a      	movle	r2, r1
 800c326:	462a      	movgt	r2, r5
 800c328:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c32c:	468b      	mov	fp, r1
 800c32e:	462f      	mov	r7, r5
 800c330:	bfd4      	ite	le
 800c332:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c33a:	4620      	mov	r0, r4
 800c33c:	ee10 2a10 	vmov	r2, s0
 800c340:	465b      	mov	r3, fp
 800c342:	4639      	mov	r1, r7
 800c344:	f7f4 fa82 	bl	800084c <__aeabi_ddiv>
 800c348:	ec41 0b10 	vmov	d0, r0, r1
 800c34c:	b003      	add	sp, #12
 800c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c352 <__copybits>:
 800c352:	3901      	subs	r1, #1
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	1149      	asrs	r1, r1, #5
 800c358:	6914      	ldr	r4, [r2, #16]
 800c35a:	3101      	adds	r1, #1
 800c35c:	f102 0314 	add.w	r3, r2, #20
 800c360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c368:	1f05      	subs	r5, r0, #4
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	d30c      	bcc.n	800c388 <__copybits+0x36>
 800c36e:	1aa3      	subs	r3, r4, r2
 800c370:	3b11      	subs	r3, #17
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	3211      	adds	r2, #17
 800c378:	42a2      	cmp	r2, r4
 800c37a:	bf88      	it	hi
 800c37c:	2300      	movhi	r3, #0
 800c37e:	4418      	add	r0, r3
 800c380:	2300      	movs	r3, #0
 800c382:	4288      	cmp	r0, r1
 800c384:	d305      	bcc.n	800c392 <__copybits+0x40>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	f853 6b04 	ldr.w	r6, [r3], #4
 800c38c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c390:	e7eb      	b.n	800c36a <__copybits+0x18>
 800c392:	f840 3b04 	str.w	r3, [r0], #4
 800c396:	e7f4      	b.n	800c382 <__copybits+0x30>

0800c398 <__any_on>:
 800c398:	f100 0214 	add.w	r2, r0, #20
 800c39c:	6900      	ldr	r0, [r0, #16]
 800c39e:	114b      	asrs	r3, r1, #5
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	db11      	blt.n	800c3ca <__any_on+0x32>
 800c3a6:	dd0a      	ble.n	800c3be <__any_on+0x26>
 800c3a8:	f011 011f 	ands.w	r1, r1, #31
 800c3ac:	d007      	beq.n	800c3be <__any_on+0x26>
 800c3ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3b2:	fa24 f001 	lsr.w	r0, r4, r1
 800c3b6:	fa00 f101 	lsl.w	r1, r0, r1
 800c3ba:	428c      	cmp	r4, r1
 800c3bc:	d10b      	bne.n	800c3d6 <__any_on+0x3e>
 800c3be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d803      	bhi.n	800c3ce <__any_on+0x36>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	e7f7      	b.n	800c3be <__any_on+0x26>
 800c3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	d0f5      	beq.n	800c3c2 <__any_on+0x2a>
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7f6      	b.n	800c3c8 <__any_on+0x30>

0800c3da <_calloc_r>:
 800c3da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3dc:	fba1 2402 	umull	r2, r4, r1, r2
 800c3e0:	b94c      	cbnz	r4, 800c3f6 <_calloc_r+0x1c>
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	9201      	str	r2, [sp, #4]
 800c3e6:	f000 f87b 	bl	800c4e0 <_malloc_r>
 800c3ea:	9a01      	ldr	r2, [sp, #4]
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	b930      	cbnz	r0, 800c3fe <_calloc_r+0x24>
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	b003      	add	sp, #12
 800c3f4:	bd30      	pop	{r4, r5, pc}
 800c3f6:	220c      	movs	r2, #12
 800c3f8:	6002      	str	r2, [r0, #0]
 800c3fa:	2500      	movs	r5, #0
 800c3fc:	e7f8      	b.n	800c3f0 <_calloc_r+0x16>
 800c3fe:	4621      	mov	r1, r4
 800c400:	f7fc f852 	bl	80084a8 <memset>
 800c404:	e7f4      	b.n	800c3f0 <_calloc_r+0x16>
	...

0800c408 <_free_r>:
 800c408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c40a:	2900      	cmp	r1, #0
 800c40c:	d044      	beq.n	800c498 <_free_r+0x90>
 800c40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c412:	9001      	str	r0, [sp, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f1a1 0404 	sub.w	r4, r1, #4
 800c41a:	bfb8      	it	lt
 800c41c:	18e4      	addlt	r4, r4, r3
 800c41e:	f000 fca7 	bl	800cd70 <__malloc_lock>
 800c422:	4a1e      	ldr	r2, [pc, #120]	; (800c49c <_free_r+0x94>)
 800c424:	9801      	ldr	r0, [sp, #4]
 800c426:	6813      	ldr	r3, [r2, #0]
 800c428:	b933      	cbnz	r3, 800c438 <_free_r+0x30>
 800c42a:	6063      	str	r3, [r4, #4]
 800c42c:	6014      	str	r4, [r2, #0]
 800c42e:	b003      	add	sp, #12
 800c430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c434:	f000 bca2 	b.w	800cd7c <__malloc_unlock>
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d908      	bls.n	800c44e <_free_r+0x46>
 800c43c:	6825      	ldr	r5, [r4, #0]
 800c43e:	1961      	adds	r1, r4, r5
 800c440:	428b      	cmp	r3, r1
 800c442:	bf01      	itttt	eq
 800c444:	6819      	ldreq	r1, [r3, #0]
 800c446:	685b      	ldreq	r3, [r3, #4]
 800c448:	1949      	addeq	r1, r1, r5
 800c44a:	6021      	streq	r1, [r4, #0]
 800c44c:	e7ed      	b.n	800c42a <_free_r+0x22>
 800c44e:	461a      	mov	r2, r3
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	b10b      	cbz	r3, 800c458 <_free_r+0x50>
 800c454:	42a3      	cmp	r3, r4
 800c456:	d9fa      	bls.n	800c44e <_free_r+0x46>
 800c458:	6811      	ldr	r1, [r2, #0]
 800c45a:	1855      	adds	r5, r2, r1
 800c45c:	42a5      	cmp	r5, r4
 800c45e:	d10b      	bne.n	800c478 <_free_r+0x70>
 800c460:	6824      	ldr	r4, [r4, #0]
 800c462:	4421      	add	r1, r4
 800c464:	1854      	adds	r4, r2, r1
 800c466:	42a3      	cmp	r3, r4
 800c468:	6011      	str	r1, [r2, #0]
 800c46a:	d1e0      	bne.n	800c42e <_free_r+0x26>
 800c46c:	681c      	ldr	r4, [r3, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	6053      	str	r3, [r2, #4]
 800c472:	4421      	add	r1, r4
 800c474:	6011      	str	r1, [r2, #0]
 800c476:	e7da      	b.n	800c42e <_free_r+0x26>
 800c478:	d902      	bls.n	800c480 <_free_r+0x78>
 800c47a:	230c      	movs	r3, #12
 800c47c:	6003      	str	r3, [r0, #0]
 800c47e:	e7d6      	b.n	800c42e <_free_r+0x26>
 800c480:	6825      	ldr	r5, [r4, #0]
 800c482:	1961      	adds	r1, r4, r5
 800c484:	428b      	cmp	r3, r1
 800c486:	bf04      	itt	eq
 800c488:	6819      	ldreq	r1, [r3, #0]
 800c48a:	685b      	ldreq	r3, [r3, #4]
 800c48c:	6063      	str	r3, [r4, #4]
 800c48e:	bf04      	itt	eq
 800c490:	1949      	addeq	r1, r1, r5
 800c492:	6021      	streq	r1, [r4, #0]
 800c494:	6054      	str	r4, [r2, #4]
 800c496:	e7ca      	b.n	800c42e <_free_r+0x26>
 800c498:	b003      	add	sp, #12
 800c49a:	bd30      	pop	{r4, r5, pc}
 800c49c:	2000050c 	.word	0x2000050c

0800c4a0 <sbrk_aligned>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	4e0e      	ldr	r6, [pc, #56]	; (800c4dc <sbrk_aligned+0x3c>)
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	6831      	ldr	r1, [r6, #0]
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	b911      	cbnz	r1, 800c4b2 <sbrk_aligned+0x12>
 800c4ac:	f000 fb4c 	bl	800cb48 <_sbrk_r>
 800c4b0:	6030      	str	r0, [r6, #0]
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f000 fb47 	bl	800cb48 <_sbrk_r>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	d00a      	beq.n	800c4d4 <sbrk_aligned+0x34>
 800c4be:	1cc4      	adds	r4, r0, #3
 800c4c0:	f024 0403 	bic.w	r4, r4, #3
 800c4c4:	42a0      	cmp	r0, r4
 800c4c6:	d007      	beq.n	800c4d8 <sbrk_aligned+0x38>
 800c4c8:	1a21      	subs	r1, r4, r0
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 fb3c 	bl	800cb48 <_sbrk_r>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d101      	bne.n	800c4d8 <sbrk_aligned+0x38>
 800c4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	20000510 	.word	0x20000510

0800c4e0 <_malloc_r>:
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	1ccd      	adds	r5, r1, #3
 800c4e6:	f025 0503 	bic.w	r5, r5, #3
 800c4ea:	3508      	adds	r5, #8
 800c4ec:	2d0c      	cmp	r5, #12
 800c4ee:	bf38      	it	cc
 800c4f0:	250c      	movcc	r5, #12
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	db01      	blt.n	800c4fc <_malloc_r+0x1c>
 800c4f8:	42a9      	cmp	r1, r5
 800c4fa:	d905      	bls.n	800c508 <_malloc_r+0x28>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	2600      	movs	r6, #0
 800c502:	4630      	mov	r0, r6
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	4e2e      	ldr	r6, [pc, #184]	; (800c5c4 <_malloc_r+0xe4>)
 800c50a:	f000 fc31 	bl	800cd70 <__malloc_lock>
 800c50e:	6833      	ldr	r3, [r6, #0]
 800c510:	461c      	mov	r4, r3
 800c512:	bb34      	cbnz	r4, 800c562 <_malloc_r+0x82>
 800c514:	4629      	mov	r1, r5
 800c516:	4638      	mov	r0, r7
 800c518:	f7ff ffc2 	bl	800c4a0 <sbrk_aligned>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	4604      	mov	r4, r0
 800c520:	d14d      	bne.n	800c5be <_malloc_r+0xde>
 800c522:	6834      	ldr	r4, [r6, #0]
 800c524:	4626      	mov	r6, r4
 800c526:	2e00      	cmp	r6, #0
 800c528:	d140      	bne.n	800c5ac <_malloc_r+0xcc>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	4631      	mov	r1, r6
 800c52e:	4638      	mov	r0, r7
 800c530:	eb04 0803 	add.w	r8, r4, r3
 800c534:	f000 fb08 	bl	800cb48 <_sbrk_r>
 800c538:	4580      	cmp	r8, r0
 800c53a:	d13a      	bne.n	800c5b2 <_malloc_r+0xd2>
 800c53c:	6821      	ldr	r1, [r4, #0]
 800c53e:	3503      	adds	r5, #3
 800c540:	1a6d      	subs	r5, r5, r1
 800c542:	f025 0503 	bic.w	r5, r5, #3
 800c546:	3508      	adds	r5, #8
 800c548:	2d0c      	cmp	r5, #12
 800c54a:	bf38      	it	cc
 800c54c:	250c      	movcc	r5, #12
 800c54e:	4629      	mov	r1, r5
 800c550:	4638      	mov	r0, r7
 800c552:	f7ff ffa5 	bl	800c4a0 <sbrk_aligned>
 800c556:	3001      	adds	r0, #1
 800c558:	d02b      	beq.n	800c5b2 <_malloc_r+0xd2>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	442b      	add	r3, r5
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	e00e      	b.n	800c580 <_malloc_r+0xa0>
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	1b52      	subs	r2, r2, r5
 800c566:	d41e      	bmi.n	800c5a6 <_malloc_r+0xc6>
 800c568:	2a0b      	cmp	r2, #11
 800c56a:	d916      	bls.n	800c59a <_malloc_r+0xba>
 800c56c:	1961      	adds	r1, r4, r5
 800c56e:	42a3      	cmp	r3, r4
 800c570:	6025      	str	r5, [r4, #0]
 800c572:	bf18      	it	ne
 800c574:	6059      	strne	r1, [r3, #4]
 800c576:	6863      	ldr	r3, [r4, #4]
 800c578:	bf08      	it	eq
 800c57a:	6031      	streq	r1, [r6, #0]
 800c57c:	5162      	str	r2, [r4, r5]
 800c57e:	604b      	str	r3, [r1, #4]
 800c580:	4638      	mov	r0, r7
 800c582:	f104 060b 	add.w	r6, r4, #11
 800c586:	f000 fbf9 	bl	800cd7c <__malloc_unlock>
 800c58a:	f026 0607 	bic.w	r6, r6, #7
 800c58e:	1d23      	adds	r3, r4, #4
 800c590:	1af2      	subs	r2, r6, r3
 800c592:	d0b6      	beq.n	800c502 <_malloc_r+0x22>
 800c594:	1b9b      	subs	r3, r3, r6
 800c596:	50a3      	str	r3, [r4, r2]
 800c598:	e7b3      	b.n	800c502 <_malloc_r+0x22>
 800c59a:	6862      	ldr	r2, [r4, #4]
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	bf0c      	ite	eq
 800c5a0:	6032      	streq	r2, [r6, #0]
 800c5a2:	605a      	strne	r2, [r3, #4]
 800c5a4:	e7ec      	b.n	800c580 <_malloc_r+0xa0>
 800c5a6:	4623      	mov	r3, r4
 800c5a8:	6864      	ldr	r4, [r4, #4]
 800c5aa:	e7b2      	b.n	800c512 <_malloc_r+0x32>
 800c5ac:	4634      	mov	r4, r6
 800c5ae:	6876      	ldr	r6, [r6, #4]
 800c5b0:	e7b9      	b.n	800c526 <_malloc_r+0x46>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	603b      	str	r3, [r7, #0]
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	f000 fbe0 	bl	800cd7c <__malloc_unlock>
 800c5bc:	e7a1      	b.n	800c502 <_malloc_r+0x22>
 800c5be:	6025      	str	r5, [r4, #0]
 800c5c0:	e7de      	b.n	800c580 <_malloc_r+0xa0>
 800c5c2:	bf00      	nop
 800c5c4:	2000050c 	.word	0x2000050c

0800c5c8 <__ssputs_r>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	688e      	ldr	r6, [r1, #8]
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	461f      	mov	r7, r3
 800c5d8:	d838      	bhi.n	800c64c <__ssputs_r+0x84>
 800c5da:	898a      	ldrh	r2, [r1, #12]
 800c5dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5e0:	d032      	beq.n	800c648 <__ssputs_r+0x80>
 800c5e2:	6825      	ldr	r5, [r4, #0]
 800c5e4:	6909      	ldr	r1, [r1, #16]
 800c5e6:	eba5 0901 	sub.w	r9, r5, r1
 800c5ea:	6965      	ldr	r5, [r4, #20]
 800c5ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	444b      	add	r3, r9
 800c5f8:	106d      	asrs	r5, r5, #1
 800c5fa:	429d      	cmp	r5, r3
 800c5fc:	bf38      	it	cc
 800c5fe:	461d      	movcc	r5, r3
 800c600:	0553      	lsls	r3, r2, #21
 800c602:	d531      	bpl.n	800c668 <__ssputs_r+0xa0>
 800c604:	4629      	mov	r1, r5
 800c606:	f7ff ff6b 	bl	800c4e0 <_malloc_r>
 800c60a:	4606      	mov	r6, r0
 800c60c:	b950      	cbnz	r0, 800c624 <__ssputs_r+0x5c>
 800c60e:	230c      	movs	r3, #12
 800c610:	f8ca 3000 	str.w	r3, [sl]
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c624:	6921      	ldr	r1, [r4, #16]
 800c626:	464a      	mov	r2, r9
 800c628:	f7ff fa08 	bl	800ba3c <memcpy>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	6126      	str	r6, [r4, #16]
 800c63a:	6165      	str	r5, [r4, #20]
 800c63c:	444e      	add	r6, r9
 800c63e:	eba5 0509 	sub.w	r5, r5, r9
 800c642:	6026      	str	r6, [r4, #0]
 800c644:	60a5      	str	r5, [r4, #8]
 800c646:	463e      	mov	r6, r7
 800c648:	42be      	cmp	r6, r7
 800c64a:	d900      	bls.n	800c64e <__ssputs_r+0x86>
 800c64c:	463e      	mov	r6, r7
 800c64e:	6820      	ldr	r0, [r4, #0]
 800c650:	4632      	mov	r2, r6
 800c652:	4641      	mov	r1, r8
 800c654:	f000 fb72 	bl	800cd3c <memmove>
 800c658:	68a3      	ldr	r3, [r4, #8]
 800c65a:	1b9b      	subs	r3, r3, r6
 800c65c:	60a3      	str	r3, [r4, #8]
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	4433      	add	r3, r6
 800c662:	6023      	str	r3, [r4, #0]
 800c664:	2000      	movs	r0, #0
 800c666:	e7db      	b.n	800c620 <__ssputs_r+0x58>
 800c668:	462a      	mov	r2, r5
 800c66a:	f000 fb8d 	bl	800cd88 <_realloc_r>
 800c66e:	4606      	mov	r6, r0
 800c670:	2800      	cmp	r0, #0
 800c672:	d1e1      	bne.n	800c638 <__ssputs_r+0x70>
 800c674:	6921      	ldr	r1, [r4, #16]
 800c676:	4650      	mov	r0, sl
 800c678:	f7ff fec6 	bl	800c408 <_free_r>
 800c67c:	e7c7      	b.n	800c60e <__ssputs_r+0x46>
	...

0800c680 <_svfiprintf_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	4698      	mov	r8, r3
 800c686:	898b      	ldrh	r3, [r1, #12]
 800c688:	061b      	lsls	r3, r3, #24
 800c68a:	b09d      	sub	sp, #116	; 0x74
 800c68c:	4607      	mov	r7, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	4614      	mov	r4, r2
 800c692:	d50e      	bpl.n	800c6b2 <_svfiprintf_r+0x32>
 800c694:	690b      	ldr	r3, [r1, #16]
 800c696:	b963      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x32>
 800c698:	2140      	movs	r1, #64	; 0x40
 800c69a:	f7ff ff21 	bl	800c4e0 <_malloc_r>
 800c69e:	6028      	str	r0, [r5, #0]
 800c6a0:	6128      	str	r0, [r5, #16]
 800c6a2:	b920      	cbnz	r0, 800c6ae <_svfiprintf_r+0x2e>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	e0d1      	b.n	800c852 <_svfiprintf_r+0x1d2>
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	616b      	str	r3, [r5, #20]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c0:	2330      	movs	r3, #48	; 0x30
 800c6c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c86c <_svfiprintf_r+0x1ec>
 800c6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ca:	f04f 0901 	mov.w	r9, #1
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	b10a      	cbz	r2, 800c6dc <_svfiprintf_r+0x5c>
 800c6d8:	2a25      	cmp	r2, #37	; 0x25
 800c6da:	d1f9      	bne.n	800c6d0 <_svfiprintf_r+0x50>
 800c6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e0:	d00b      	beq.n	800c6fa <_svfiprintf_r+0x7a>
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ff6d 	bl	800c5c8 <__ssputs_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f000 80aa 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f6:	445a      	add	r2, fp
 800c6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80a2 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c704:	2300      	movs	r3, #0
 800c706:	f04f 32ff 	mov.w	r2, #4294967295
 800c70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71a:	931a      	str	r3, [sp, #104]	; 0x68
 800c71c:	4654      	mov	r4, sl
 800c71e:	2205      	movs	r2, #5
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	4851      	ldr	r0, [pc, #324]	; (800c86c <_svfiprintf_r+0x1ec>)
 800c726:	f7f3 fd5b 	bl	80001e0 <memchr>
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	b9d8      	cbnz	r0, 800c766 <_svfiprintf_r+0xe6>
 800c72e:	06d0      	lsls	r0, r2, #27
 800c730:	bf44      	itt	mi
 800c732:	2320      	movmi	r3, #32
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c738:	0711      	lsls	r1, r2, #28
 800c73a:	bf44      	itt	mi
 800c73c:	232b      	movmi	r3, #43	; 0x2b
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b2a      	cmp	r3, #42	; 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xf6>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4654      	mov	r4, sl
 800c74e:	2000      	movs	r0, #0
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4621      	mov	r1, r4
 800c756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75a:	3b30      	subs	r3, #48	; 0x30
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d94e      	bls.n	800c7fe <_svfiprintf_r+0x17e>
 800c760:	b1b0      	cbz	r0, 800c790 <_svfiprintf_r+0x110>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e014      	b.n	800c790 <_svfiprintf_r+0x110>
 800c766:	eba0 0308 	sub.w	r3, r0, r8
 800c76a:	fa09 f303 	lsl.w	r3, r9, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	46a2      	mov	sl, r4
 800c774:	e7d2      	b.n	800c71c <_svfiprintf_r+0x9c>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d19      	adds	r1, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfbb      	ittet	lt
 800c782:	425b      	neglt	r3, r3
 800c784:	f042 0202 	orrlt.w	r2, r2, #2
 800c788:	9307      	strge	r3, [sp, #28]
 800c78a:	9307      	strlt	r3, [sp, #28]
 800c78c:	bfb8      	it	lt
 800c78e:	9204      	strlt	r2, [sp, #16]
 800c790:	7823      	ldrb	r3, [r4, #0]
 800c792:	2b2e      	cmp	r3, #46	; 0x2e
 800c794:	d10c      	bne.n	800c7b0 <_svfiprintf_r+0x130>
 800c796:	7863      	ldrb	r3, [r4, #1]
 800c798:	2b2a      	cmp	r3, #42	; 0x2a
 800c79a:	d135      	bne.n	800c808 <_svfiprintf_r+0x188>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfb8      	it	lt
 800c7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ac:	3402      	adds	r4, #2
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c87c <_svfiprintf_r+0x1fc>
 800c7b4:	7821      	ldrb	r1, [r4, #0]
 800c7b6:	2203      	movs	r2, #3
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	f7f3 fd11 	bl	80001e0 <memchr>
 800c7be:	b140      	cbz	r0, 800c7d2 <_svfiprintf_r+0x152>
 800c7c0:	2340      	movs	r3, #64	; 0x40
 800c7c2:	eba0 000a 	sub.w	r0, r0, sl
 800c7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	4303      	orrs	r3, r0
 800c7ce:	3401      	adds	r4, #1
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d6:	4826      	ldr	r0, [pc, #152]	; (800c870 <_svfiprintf_r+0x1f0>)
 800c7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7dc:	2206      	movs	r2, #6
 800c7de:	f7f3 fcff 	bl	80001e0 <memchr>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d038      	beq.n	800c858 <_svfiprintf_r+0x1d8>
 800c7e6:	4b23      	ldr	r3, [pc, #140]	; (800c874 <_svfiprintf_r+0x1f4>)
 800c7e8:	bb1b      	cbnz	r3, 800c832 <_svfiprintf_r+0x1b2>
 800c7ea:	9b03      	ldr	r3, [sp, #12]
 800c7ec:	3307      	adds	r3, #7
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	9303      	str	r3, [sp, #12]
 800c7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f8:	4433      	add	r3, r6
 800c7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fc:	e767      	b.n	800c6ce <_svfiprintf_r+0x4e>
 800c7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c802:	460c      	mov	r4, r1
 800c804:	2001      	movs	r0, #1
 800c806:	e7a5      	b.n	800c754 <_svfiprintf_r+0xd4>
 800c808:	2300      	movs	r3, #0
 800c80a:	3401      	adds	r4, #1
 800c80c:	9305      	str	r3, [sp, #20]
 800c80e:	4619      	mov	r1, r3
 800c810:	f04f 0c0a 	mov.w	ip, #10
 800c814:	4620      	mov	r0, r4
 800c816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81a:	3a30      	subs	r2, #48	; 0x30
 800c81c:	2a09      	cmp	r2, #9
 800c81e:	d903      	bls.n	800c828 <_svfiprintf_r+0x1a8>
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0c5      	beq.n	800c7b0 <_svfiprintf_r+0x130>
 800c824:	9105      	str	r1, [sp, #20]
 800c826:	e7c3      	b.n	800c7b0 <_svfiprintf_r+0x130>
 800c828:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82c:	4604      	mov	r4, r0
 800c82e:	2301      	movs	r3, #1
 800c830:	e7f0      	b.n	800c814 <_svfiprintf_r+0x194>
 800c832:	ab03      	add	r3, sp, #12
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	462a      	mov	r2, r5
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4638      	mov	r0, r7
 800c83e:	f7fb fedb 	bl	80085f8 <_printf_float>
 800c842:	1c42      	adds	r2, r0, #1
 800c844:	4606      	mov	r6, r0
 800c846:	d1d6      	bne.n	800c7f6 <_svfiprintf_r+0x176>
 800c848:	89ab      	ldrh	r3, [r5, #12]
 800c84a:	065b      	lsls	r3, r3, #25
 800c84c:	f53f af2c 	bmi.w	800c6a8 <_svfiprintf_r+0x28>
 800c850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c852:	b01d      	add	sp, #116	; 0x74
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c858:	ab03      	add	r3, sp, #12
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c860:	a904      	add	r1, sp, #16
 800c862:	4638      	mov	r0, r7
 800c864:	f7fc f96c 	bl	8008b40 <_printf_i>
 800c868:	e7eb      	b.n	800c842 <_svfiprintf_r+0x1c2>
 800c86a:	bf00      	nop
 800c86c:	0800d3f4 	.word	0x0800d3f4
 800c870:	0800d3fe 	.word	0x0800d3fe
 800c874:	080085f9 	.word	0x080085f9
 800c878:	0800c5c9 	.word	0x0800c5c9
 800c87c:	0800d3fa 	.word	0x0800d3fa

0800c880 <__sfputc_r>:
 800c880:	6893      	ldr	r3, [r2, #8]
 800c882:	3b01      	subs	r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	b410      	push	{r4}
 800c888:	6093      	str	r3, [r2, #8]
 800c88a:	da08      	bge.n	800c89e <__sfputc_r+0x1e>
 800c88c:	6994      	ldr	r4, [r2, #24]
 800c88e:	42a3      	cmp	r3, r4
 800c890:	db01      	blt.n	800c896 <__sfputc_r+0x16>
 800c892:	290a      	cmp	r1, #10
 800c894:	d103      	bne.n	800c89e <__sfputc_r+0x1e>
 800c896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c89a:	f7fd bbe9 	b.w	800a070 <__swbuf_r>
 800c89e:	6813      	ldr	r3, [r2, #0]
 800c8a0:	1c58      	adds	r0, r3, #1
 800c8a2:	6010      	str	r0, [r2, #0]
 800c8a4:	7019      	strb	r1, [r3, #0]
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <__sfputs_r>:
 800c8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	460f      	mov	r7, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	18d5      	adds	r5, r2, r3
 800c8b8:	42ac      	cmp	r4, r5
 800c8ba:	d101      	bne.n	800c8c0 <__sfputs_r+0x12>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	e007      	b.n	800c8d0 <__sfputs_r+0x22>
 800c8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c4:	463a      	mov	r2, r7
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f7ff ffda 	bl	800c880 <__sfputc_r>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d1f3      	bne.n	800c8b8 <__sfputs_r+0xa>
 800c8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8d4 <_vfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	460d      	mov	r5, r1
 800c8da:	b09d      	sub	sp, #116	; 0x74
 800c8dc:	4614      	mov	r4, r2
 800c8de:	4698      	mov	r8, r3
 800c8e0:	4606      	mov	r6, r0
 800c8e2:	b118      	cbz	r0, 800c8ec <_vfiprintf_r+0x18>
 800c8e4:	6983      	ldr	r3, [r0, #24]
 800c8e6:	b90b      	cbnz	r3, 800c8ec <_vfiprintf_r+0x18>
 800c8e8:	f7fe fc16 	bl	800b118 <__sinit>
 800c8ec:	4b89      	ldr	r3, [pc, #548]	; (800cb14 <_vfiprintf_r+0x240>)
 800c8ee:	429d      	cmp	r5, r3
 800c8f0:	d11b      	bne.n	800c92a <_vfiprintf_r+0x56>
 800c8f2:	6875      	ldr	r5, [r6, #4]
 800c8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f6:	07d9      	lsls	r1, r3, #31
 800c8f8:	d405      	bmi.n	800c906 <_vfiprintf_r+0x32>
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	059a      	lsls	r2, r3, #22
 800c8fe:	d402      	bmi.n	800c906 <_vfiprintf_r+0x32>
 800c900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c902:	f7ff f81a 	bl	800b93a <__retarget_lock_acquire_recursive>
 800c906:	89ab      	ldrh	r3, [r5, #12]
 800c908:	071b      	lsls	r3, r3, #28
 800c90a:	d501      	bpl.n	800c910 <_vfiprintf_r+0x3c>
 800c90c:	692b      	ldr	r3, [r5, #16]
 800c90e:	b9eb      	cbnz	r3, 800c94c <_vfiprintf_r+0x78>
 800c910:	4629      	mov	r1, r5
 800c912:	4630      	mov	r0, r6
 800c914:	f7fd fbfe 	bl	800a114 <__swsetup_r>
 800c918:	b1c0      	cbz	r0, 800c94c <_vfiprintf_r+0x78>
 800c91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c91c:	07dc      	lsls	r4, r3, #31
 800c91e:	d50e      	bpl.n	800c93e <_vfiprintf_r+0x6a>
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	b01d      	add	sp, #116	; 0x74
 800c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92a:	4b7b      	ldr	r3, [pc, #492]	; (800cb18 <_vfiprintf_r+0x244>)
 800c92c:	429d      	cmp	r5, r3
 800c92e:	d101      	bne.n	800c934 <_vfiprintf_r+0x60>
 800c930:	68b5      	ldr	r5, [r6, #8]
 800c932:	e7df      	b.n	800c8f4 <_vfiprintf_r+0x20>
 800c934:	4b79      	ldr	r3, [pc, #484]	; (800cb1c <_vfiprintf_r+0x248>)
 800c936:	429d      	cmp	r5, r3
 800c938:	bf08      	it	eq
 800c93a:	68f5      	ldreq	r5, [r6, #12]
 800c93c:	e7da      	b.n	800c8f4 <_vfiprintf_r+0x20>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	0598      	lsls	r0, r3, #22
 800c942:	d4ed      	bmi.n	800c920 <_vfiprintf_r+0x4c>
 800c944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c946:	f7fe fff9 	bl	800b93c <__retarget_lock_release_recursive>
 800c94a:	e7e9      	b.n	800c920 <_vfiprintf_r+0x4c>
 800c94c:	2300      	movs	r3, #0
 800c94e:	9309      	str	r3, [sp, #36]	; 0x24
 800c950:	2320      	movs	r3, #32
 800c952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c956:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95a:	2330      	movs	r3, #48	; 0x30
 800c95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb20 <_vfiprintf_r+0x24c>
 800c960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c964:	f04f 0901 	mov.w	r9, #1
 800c968:	4623      	mov	r3, r4
 800c96a:	469a      	mov	sl, r3
 800c96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c970:	b10a      	cbz	r2, 800c976 <_vfiprintf_r+0xa2>
 800c972:	2a25      	cmp	r2, #37	; 0x25
 800c974:	d1f9      	bne.n	800c96a <_vfiprintf_r+0x96>
 800c976:	ebba 0b04 	subs.w	fp, sl, r4
 800c97a:	d00b      	beq.n	800c994 <_vfiprintf_r+0xc0>
 800c97c:	465b      	mov	r3, fp
 800c97e:	4622      	mov	r2, r4
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ff93 	bl	800c8ae <__sfputs_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	f000 80aa 	beq.w	800cae2 <_vfiprintf_r+0x20e>
 800c98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c990:	445a      	add	r2, fp
 800c992:	9209      	str	r2, [sp, #36]	; 0x24
 800c994:	f89a 3000 	ldrb.w	r3, [sl]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 80a2 	beq.w	800cae2 <_vfiprintf_r+0x20e>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a8:	f10a 0a01 	add.w	sl, sl, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c9b6:	4654      	mov	r4, sl
 800c9b8:	2205      	movs	r2, #5
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4858      	ldr	r0, [pc, #352]	; (800cb20 <_vfiprintf_r+0x24c>)
 800c9c0:	f7f3 fc0e 	bl	80001e0 <memchr>
 800c9c4:	9a04      	ldr	r2, [sp, #16]
 800c9c6:	b9d8      	cbnz	r0, 800ca00 <_vfiprintf_r+0x12c>
 800c9c8:	06d1      	lsls	r1, r2, #27
 800c9ca:	bf44      	itt	mi
 800c9cc:	2320      	movmi	r3, #32
 800c9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d2:	0713      	lsls	r3, r2, #28
 800c9d4:	bf44      	itt	mi
 800c9d6:	232b      	movmi	r3, #43	; 0x2b
 800c9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e2:	d015      	beq.n	800ca10 <_vfiprintf_r+0x13c>
 800c9e4:	9a07      	ldr	r2, [sp, #28]
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f04f 0c0a 	mov.w	ip, #10
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f4:	3b30      	subs	r3, #48	; 0x30
 800c9f6:	2b09      	cmp	r3, #9
 800c9f8:	d94e      	bls.n	800ca98 <_vfiprintf_r+0x1c4>
 800c9fa:	b1b0      	cbz	r0, 800ca2a <_vfiprintf_r+0x156>
 800c9fc:	9207      	str	r2, [sp, #28]
 800c9fe:	e014      	b.n	800ca2a <_vfiprintf_r+0x156>
 800ca00:	eba0 0308 	sub.w	r3, r0, r8
 800ca04:	fa09 f303 	lsl.w	r3, r9, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	46a2      	mov	sl, r4
 800ca0e:	e7d2      	b.n	800c9b6 <_vfiprintf_r+0xe2>
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	1d19      	adds	r1, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	9103      	str	r1, [sp, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfbb      	ittet	lt
 800ca1c:	425b      	neglt	r3, r3
 800ca1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca22:	9307      	strge	r3, [sp, #28]
 800ca24:	9307      	strlt	r3, [sp, #28]
 800ca26:	bfb8      	it	lt
 800ca28:	9204      	strlt	r2, [sp, #16]
 800ca2a:	7823      	ldrb	r3, [r4, #0]
 800ca2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2e:	d10c      	bne.n	800ca4a <_vfiprintf_r+0x176>
 800ca30:	7863      	ldrb	r3, [r4, #1]
 800ca32:	2b2a      	cmp	r3, #42	; 0x2a
 800ca34:	d135      	bne.n	800caa2 <_vfiprintf_r+0x1ce>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d1a      	adds	r2, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9203      	str	r2, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfb8      	it	lt
 800ca42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca46:	3402      	adds	r4, #2
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb30 <_vfiprintf_r+0x25c>
 800ca4e:	7821      	ldrb	r1, [r4, #0]
 800ca50:	2203      	movs	r2, #3
 800ca52:	4650      	mov	r0, sl
 800ca54:	f7f3 fbc4 	bl	80001e0 <memchr>
 800ca58:	b140      	cbz	r0, 800ca6c <_vfiprintf_r+0x198>
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	eba0 000a 	sub.w	r0, r0, sl
 800ca60:	fa03 f000 	lsl.w	r0, r3, r0
 800ca64:	9b04      	ldr	r3, [sp, #16]
 800ca66:	4303      	orrs	r3, r0
 800ca68:	3401      	adds	r4, #1
 800ca6a:	9304      	str	r3, [sp, #16]
 800ca6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca70:	482c      	ldr	r0, [pc, #176]	; (800cb24 <_vfiprintf_r+0x250>)
 800ca72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca76:	2206      	movs	r2, #6
 800ca78:	f7f3 fbb2 	bl	80001e0 <memchr>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d03f      	beq.n	800cb00 <_vfiprintf_r+0x22c>
 800ca80:	4b29      	ldr	r3, [pc, #164]	; (800cb28 <_vfiprintf_r+0x254>)
 800ca82:	bb1b      	cbnz	r3, 800cacc <_vfiprintf_r+0x1f8>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	3307      	adds	r3, #7
 800ca88:	f023 0307 	bic.w	r3, r3, #7
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca92:	443b      	add	r3, r7
 800ca94:	9309      	str	r3, [sp, #36]	; 0x24
 800ca96:	e767      	b.n	800c968 <_vfiprintf_r+0x94>
 800ca98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	2001      	movs	r0, #1
 800caa0:	e7a5      	b.n	800c9ee <_vfiprintf_r+0x11a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	3401      	adds	r4, #1
 800caa6:	9305      	str	r3, [sp, #20]
 800caa8:	4619      	mov	r1, r3
 800caaa:	f04f 0c0a 	mov.w	ip, #10
 800caae:	4620      	mov	r0, r4
 800cab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab4:	3a30      	subs	r2, #48	; 0x30
 800cab6:	2a09      	cmp	r2, #9
 800cab8:	d903      	bls.n	800cac2 <_vfiprintf_r+0x1ee>
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0c5      	beq.n	800ca4a <_vfiprintf_r+0x176>
 800cabe:	9105      	str	r1, [sp, #20]
 800cac0:	e7c3      	b.n	800ca4a <_vfiprintf_r+0x176>
 800cac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac6:	4604      	mov	r4, r0
 800cac8:	2301      	movs	r3, #1
 800caca:	e7f0      	b.n	800caae <_vfiprintf_r+0x1da>
 800cacc:	ab03      	add	r3, sp, #12
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	462a      	mov	r2, r5
 800cad2:	4b16      	ldr	r3, [pc, #88]	; (800cb2c <_vfiprintf_r+0x258>)
 800cad4:	a904      	add	r1, sp, #16
 800cad6:	4630      	mov	r0, r6
 800cad8:	f7fb fd8e 	bl	80085f8 <_printf_float>
 800cadc:	4607      	mov	r7, r0
 800cade:	1c78      	adds	r0, r7, #1
 800cae0:	d1d6      	bne.n	800ca90 <_vfiprintf_r+0x1bc>
 800cae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae4:	07d9      	lsls	r1, r3, #31
 800cae6:	d405      	bmi.n	800caf4 <_vfiprintf_r+0x220>
 800cae8:	89ab      	ldrh	r3, [r5, #12]
 800caea:	059a      	lsls	r2, r3, #22
 800caec:	d402      	bmi.n	800caf4 <_vfiprintf_r+0x220>
 800caee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caf0:	f7fe ff24 	bl	800b93c <__retarget_lock_release_recursive>
 800caf4:	89ab      	ldrh	r3, [r5, #12]
 800caf6:	065b      	lsls	r3, r3, #25
 800caf8:	f53f af12 	bmi.w	800c920 <_vfiprintf_r+0x4c>
 800cafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cafe:	e711      	b.n	800c924 <_vfiprintf_r+0x50>
 800cb00:	ab03      	add	r3, sp, #12
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	462a      	mov	r2, r5
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <_vfiprintf_r+0x258>)
 800cb08:	a904      	add	r1, sp, #16
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7fc f818 	bl	8008b40 <_printf_i>
 800cb10:	e7e4      	b.n	800cadc <_vfiprintf_r+0x208>
 800cb12:	bf00      	nop
 800cb14:	0800d1dc 	.word	0x0800d1dc
 800cb18:	0800d1fc 	.word	0x0800d1fc
 800cb1c:	0800d1bc 	.word	0x0800d1bc
 800cb20:	0800d3f4 	.word	0x0800d3f4
 800cb24:	0800d3fe 	.word	0x0800d3fe
 800cb28:	080085f9 	.word	0x080085f9
 800cb2c:	0800c8af 	.word	0x0800c8af
 800cb30:	0800d3fa 	.word	0x0800d3fa
 800cb34:	00000000 	.word	0x00000000

0800cb38 <nan>:
 800cb38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb40 <nan+0x8>
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	00000000 	.word	0x00000000
 800cb44:	7ff80000 	.word	0x7ff80000

0800cb48 <_sbrk_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4d06      	ldr	r5, [pc, #24]	; (800cb64 <_sbrk_r+0x1c>)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4604      	mov	r4, r0
 800cb50:	4608      	mov	r0, r1
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	f7f5 f806 	bl	8001b64 <_sbrk>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_sbrk_r+0x1a>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_sbrk_r+0x1a>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	20000514 	.word	0x20000514

0800cb68 <__sread>:
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb70:	f000 f93a 	bl	800cde8 <_read_r>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	bfab      	itete	ge
 800cb78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb7a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb7c:	181b      	addge	r3, r3, r0
 800cb7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb82:	bfac      	ite	ge
 800cb84:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb86:	81a3      	strhlt	r3, [r4, #12]
 800cb88:	bd10      	pop	{r4, pc}

0800cb8a <__swrite>:
 800cb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8e:	461f      	mov	r7, r3
 800cb90:	898b      	ldrh	r3, [r1, #12]
 800cb92:	05db      	lsls	r3, r3, #23
 800cb94:	4605      	mov	r5, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	4616      	mov	r6, r2
 800cb9a:	d505      	bpl.n	800cba8 <__swrite+0x1e>
 800cb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba0:	2302      	movs	r3, #2
 800cba2:	2200      	movs	r2, #0
 800cba4:	f000 f8b8 	bl	800cd18 <_lseek_r>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	4632      	mov	r2, r6
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	4628      	mov	r0, r5
 800cbba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbe:	f000 b837 	b.w	800cc30 <_write_r>

0800cbc2 <__sseek>:
 800cbc2:	b510      	push	{r4, lr}
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbca:	f000 f8a5 	bl	800cd18 <_lseek_r>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	bf15      	itete	ne
 800cbd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbde:	81a3      	strheq	r3, [r4, #12]
 800cbe0:	bf18      	it	ne
 800cbe2:	81a3      	strhne	r3, [r4, #12]
 800cbe4:	bd10      	pop	{r4, pc}

0800cbe6 <__sclose>:
 800cbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbea:	f000 b851 	b.w	800cc90 <_close_r>

0800cbee <strncmp>:
 800cbee:	b510      	push	{r4, lr}
 800cbf0:	b17a      	cbz	r2, 800cc12 <strncmp+0x24>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	3901      	subs	r1, #1
 800cbf6:	1884      	adds	r4, r0, r2
 800cbf8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc00:	4290      	cmp	r0, r2
 800cc02:	d101      	bne.n	800cc08 <strncmp+0x1a>
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d101      	bne.n	800cc0c <strncmp+0x1e>
 800cc08:	1a80      	subs	r0, r0, r2
 800cc0a:	bd10      	pop	{r4, pc}
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d1f3      	bne.n	800cbf8 <strncmp+0xa>
 800cc10:	e7fa      	b.n	800cc08 <strncmp+0x1a>
 800cc12:	4610      	mov	r0, r2
 800cc14:	e7f9      	b.n	800cc0a <strncmp+0x1c>

0800cc16 <__ascii_wctomb>:
 800cc16:	b149      	cbz	r1, 800cc2c <__ascii_wctomb+0x16>
 800cc18:	2aff      	cmp	r2, #255	; 0xff
 800cc1a:	bf85      	ittet	hi
 800cc1c:	238a      	movhi	r3, #138	; 0x8a
 800cc1e:	6003      	strhi	r3, [r0, #0]
 800cc20:	700a      	strbls	r2, [r1, #0]
 800cc22:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc26:	bf98      	it	ls
 800cc28:	2001      	movls	r0, #1
 800cc2a:	4770      	bx	lr
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4770      	bx	lr

0800cc30 <_write_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d07      	ldr	r5, [pc, #28]	; (800cc50 <_write_r+0x20>)
 800cc34:	4604      	mov	r4, r0
 800cc36:	4608      	mov	r0, r1
 800cc38:	4611      	mov	r1, r2
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	602a      	str	r2, [r5, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f7f4 fb24 	bl	800128c <_write>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_write_r+0x1e>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_write_r+0x1e>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	20000514 	.word	0x20000514

0800cc54 <__assert_func>:
 800cc54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc56:	4614      	mov	r4, r2
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4b09      	ldr	r3, [pc, #36]	; (800cc80 <__assert_func+0x2c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4605      	mov	r5, r0
 800cc60:	68d8      	ldr	r0, [r3, #12]
 800cc62:	b14c      	cbz	r4, 800cc78 <__assert_func+0x24>
 800cc64:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <__assert_func+0x30>)
 800cc66:	9100      	str	r1, [sp, #0]
 800cc68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc6c:	4906      	ldr	r1, [pc, #24]	; (800cc88 <__assert_func+0x34>)
 800cc6e:	462b      	mov	r3, r5
 800cc70:	f000 f81e 	bl	800ccb0 <fiprintf>
 800cc74:	f000 f8ca 	bl	800ce0c <abort>
 800cc78:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <__assert_func+0x38>)
 800cc7a:	461c      	mov	r4, r3
 800cc7c:	e7f3      	b.n	800cc66 <__assert_func+0x12>
 800cc7e:	bf00      	nop
 800cc80:	2000000c 	.word	0x2000000c
 800cc84:	0800d405 	.word	0x0800d405
 800cc88:	0800d412 	.word	0x0800d412
 800cc8c:	0800d440 	.word	0x0800d440

0800cc90 <_close_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d06      	ldr	r5, [pc, #24]	; (800ccac <_close_r+0x1c>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f4 ff2d 	bl	8001afa <_close>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_close_r+0x1a>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_close_r+0x1a>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20000514 	.word	0x20000514

0800ccb0 <fiprintf>:
 800ccb0:	b40e      	push	{r1, r2, r3}
 800ccb2:	b503      	push	{r0, r1, lr}
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	ab03      	add	r3, sp, #12
 800ccb8:	4805      	ldr	r0, [pc, #20]	; (800ccd0 <fiprintf+0x20>)
 800ccba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccbe:	6800      	ldr	r0, [r0, #0]
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	f7ff fe07 	bl	800c8d4 <_vfiprintf_r>
 800ccc6:	b002      	add	sp, #8
 800ccc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cccc:	b003      	add	sp, #12
 800ccce:	4770      	bx	lr
 800ccd0:	2000000c 	.word	0x2000000c

0800ccd4 <_fstat_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	; (800ccf4 <_fstat_r+0x20>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	4611      	mov	r1, r2
 800cce0:	602b      	str	r3, [r5, #0]
 800cce2:	f7f4 ff16 	bl	8001b12 <_fstat>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	d102      	bne.n	800ccf0 <_fstat_r+0x1c>
 800ccea:	682b      	ldr	r3, [r5, #0]
 800ccec:	b103      	cbz	r3, 800ccf0 <_fstat_r+0x1c>
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	bd38      	pop	{r3, r4, r5, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20000514 	.word	0x20000514

0800ccf8 <_isatty_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	; (800cd14 <_isatty_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f4 ff15 	bl	8001b32 <_isatty>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_isatty_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_isatty_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	20000514 	.word	0x20000514

0800cd18 <_lseek_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4d07      	ldr	r5, [pc, #28]	; (800cd38 <_lseek_r+0x20>)
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	4608      	mov	r0, r1
 800cd20:	4611      	mov	r1, r2
 800cd22:	2200      	movs	r2, #0
 800cd24:	602a      	str	r2, [r5, #0]
 800cd26:	461a      	mov	r2, r3
 800cd28:	f7f4 ff0e 	bl	8001b48 <_lseek>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_lseek_r+0x1e>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_lseek_r+0x1e>
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	20000514 	.word	0x20000514

0800cd3c <memmove>:
 800cd3c:	4288      	cmp	r0, r1
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	eb01 0402 	add.w	r4, r1, r2
 800cd44:	d902      	bls.n	800cd4c <memmove+0x10>
 800cd46:	4284      	cmp	r4, r0
 800cd48:	4623      	mov	r3, r4
 800cd4a:	d807      	bhi.n	800cd5c <memmove+0x20>
 800cd4c:	1e43      	subs	r3, r0, #1
 800cd4e:	42a1      	cmp	r1, r4
 800cd50:	d008      	beq.n	800cd64 <memmove+0x28>
 800cd52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd5a:	e7f8      	b.n	800cd4e <memmove+0x12>
 800cd5c:	4402      	add	r2, r0
 800cd5e:	4601      	mov	r1, r0
 800cd60:	428a      	cmp	r2, r1
 800cd62:	d100      	bne.n	800cd66 <memmove+0x2a>
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd6e:	e7f7      	b.n	800cd60 <memmove+0x24>

0800cd70 <__malloc_lock>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__malloc_lock+0x8>)
 800cd72:	f7fe bde2 	b.w	800b93a <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	20000508 	.word	0x20000508

0800cd7c <__malloc_unlock>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__malloc_unlock+0x8>)
 800cd7e:	f7fe bddd 	b.w	800b93c <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	20000508 	.word	0x20000508

0800cd88 <_realloc_r>:
 800cd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8c:	4680      	mov	r8, r0
 800cd8e:	4614      	mov	r4, r2
 800cd90:	460e      	mov	r6, r1
 800cd92:	b921      	cbnz	r1, 800cd9e <_realloc_r+0x16>
 800cd94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	4611      	mov	r1, r2
 800cd9a:	f7ff bba1 	b.w	800c4e0 <_malloc_r>
 800cd9e:	b92a      	cbnz	r2, 800cdac <_realloc_r+0x24>
 800cda0:	f7ff fb32 	bl	800c408 <_free_r>
 800cda4:	4625      	mov	r5, r4
 800cda6:	4628      	mov	r0, r5
 800cda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdac:	f000 f835 	bl	800ce1a <_malloc_usable_size_r>
 800cdb0:	4284      	cmp	r4, r0
 800cdb2:	4607      	mov	r7, r0
 800cdb4:	d802      	bhi.n	800cdbc <_realloc_r+0x34>
 800cdb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdba:	d812      	bhi.n	800cde2 <_realloc_r+0x5a>
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	f7ff fb8e 	bl	800c4e0 <_malloc_r>
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0ed      	beq.n	800cda6 <_realloc_r+0x1e>
 800cdca:	42bc      	cmp	r4, r7
 800cdcc:	4622      	mov	r2, r4
 800cdce:	4631      	mov	r1, r6
 800cdd0:	bf28      	it	cs
 800cdd2:	463a      	movcs	r2, r7
 800cdd4:	f7fe fe32 	bl	800ba3c <memcpy>
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4640      	mov	r0, r8
 800cddc:	f7ff fb14 	bl	800c408 <_free_r>
 800cde0:	e7e1      	b.n	800cda6 <_realloc_r+0x1e>
 800cde2:	4635      	mov	r5, r6
 800cde4:	e7df      	b.n	800cda6 <_realloc_r+0x1e>
	...

0800cde8 <_read_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d07      	ldr	r5, [pc, #28]	; (800ce08 <_read_r+0x20>)
 800cdec:	4604      	mov	r4, r0
 800cdee:	4608      	mov	r0, r1
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	602a      	str	r2, [r5, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	f7f4 fe62 	bl	8001ac0 <_read>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	d102      	bne.n	800ce06 <_read_r+0x1e>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	b103      	cbz	r3, 800ce06 <_read_r+0x1e>
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	20000514 	.word	0x20000514

0800ce0c <abort>:
 800ce0c:	b508      	push	{r3, lr}
 800ce0e:	2006      	movs	r0, #6
 800ce10:	f000 f834 	bl	800ce7c <raise>
 800ce14:	2001      	movs	r0, #1
 800ce16:	f7f4 fe49 	bl	8001aac <_exit>

0800ce1a <_malloc_usable_size_r>:
 800ce1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce1e:	1f18      	subs	r0, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbc      	itt	lt
 800ce24:	580b      	ldrlt	r3, [r1, r0]
 800ce26:	18c0      	addlt	r0, r0, r3
 800ce28:	4770      	bx	lr

0800ce2a <_raise_r>:
 800ce2a:	291f      	cmp	r1, #31
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4604      	mov	r4, r0
 800ce30:	460d      	mov	r5, r1
 800ce32:	d904      	bls.n	800ce3e <_raise_r+0x14>
 800ce34:	2316      	movs	r3, #22
 800ce36:	6003      	str	r3, [r0, #0]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	bd38      	pop	{r3, r4, r5, pc}
 800ce3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce40:	b112      	cbz	r2, 800ce48 <_raise_r+0x1e>
 800ce42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce46:	b94b      	cbnz	r3, 800ce5c <_raise_r+0x32>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 f831 	bl	800ceb0 <_getpid_r>
 800ce4e:	462a      	mov	r2, r5
 800ce50:	4601      	mov	r1, r0
 800ce52:	4620      	mov	r0, r4
 800ce54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce58:	f000 b818 	b.w	800ce8c <_kill_r>
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d00a      	beq.n	800ce76 <_raise_r+0x4c>
 800ce60:	1c59      	adds	r1, r3, #1
 800ce62:	d103      	bne.n	800ce6c <_raise_r+0x42>
 800ce64:	2316      	movs	r3, #22
 800ce66:	6003      	str	r3, [r0, #0]
 800ce68:	2001      	movs	r0, #1
 800ce6a:	e7e7      	b.n	800ce3c <_raise_r+0x12>
 800ce6c:	2400      	movs	r4, #0
 800ce6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce72:	4628      	mov	r0, r5
 800ce74:	4798      	blx	r3
 800ce76:	2000      	movs	r0, #0
 800ce78:	e7e0      	b.n	800ce3c <_raise_r+0x12>
	...

0800ce7c <raise>:
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <raise+0xc>)
 800ce7e:	4601      	mov	r1, r0
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	f7ff bfd2 	b.w	800ce2a <_raise_r>
 800ce86:	bf00      	nop
 800ce88:	2000000c 	.word	0x2000000c

0800ce8c <_kill_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d07      	ldr	r5, [pc, #28]	; (800ceac <_kill_r+0x20>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	4611      	mov	r1, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	f7f4 fdf7 	bl	8001a8c <_kill>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d102      	bne.n	800cea8 <_kill_r+0x1c>
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	b103      	cbz	r3, 800cea8 <_kill_r+0x1c>
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000514 	.word	0x20000514

0800ceb0 <_getpid_r>:
 800ceb0:	f7f4 bde4 	b.w	8001a7c <_getpid>

0800ceb4 <_init>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr

0800cec0 <_fini>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	bf00      	nop
 800cec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec6:	bc08      	pop	{r3}
 800cec8:	469e      	mov	lr, r3
 800ceca:	4770      	bx	lr
