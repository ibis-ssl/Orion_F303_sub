
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800d3f8  0800d3f8  0001d3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f0  0800d8f0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8f0  0800d8f0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8f0  0800d8f0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000510  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006e4  200006e4  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015655  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000329e  00000000  00000000  0003589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001188  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d99  00000000  00000000  00039cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020f80  00000000  00000000  0003aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018ae6  00000000  00000000  0005b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c48ac  00000000  00000000  000744c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e18  00000000  00000000  00138d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0013eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3e0 	.word	0x0800d3e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d3e0 	.word	0x0800d3e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 fb4d 	bl	8002410 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 ff39 	bl	8001bf2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f002 f9a0 	bl	80030d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f000 ff2c 	bl	8001bf2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f001 fea0 	bl	8002afc <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f000 ff16 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001f0 	.word	0x200001f0

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 fae4 	bl	8002410 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f000 fed0 	bl	8001bf2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f001 fe44 	bl	8002afc <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 feba 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000240 	.word	0x20000240
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 fc5f 	bl	80047cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f003 fc2c 	bl	80047cc <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000290 	.word	0x20000290
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 fa33 	bl	8003448 <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fe03 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000294 	.word	0x20000294
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f003 fbaf 	bl	80047cc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f003 f949 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f003 f962 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  sFilterConfig.FilterIdHigh = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /*
  sFilterConfig.FilterIdHigh = (0x104) << 5;
  sFilterConfig.FilterIdLow = (0x105) << 5;
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;*/
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010c4:	f002 fabb 	bl	800363e <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Filter_Init+0x42>
  {
    Error_Handler();
 80010ce:	f000 fd90 	bl	8001bf2 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010d2:	2102      	movs	r1, #2
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010d6:	f002 fde7 	bl	8003ca8 <HAL_CAN_ActivateNotification>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CAN_Filter_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 fd87 	bl	8001bf2 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000294 	.word	0x20000294

080010f0 <can_send>:

void can_send(uint32_t can_id, can_msg_buf_t msg)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	e883 0006 	stmia.w	r3, {r1, r2}
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	61bb      	str	r3, [r7, #24]
  can_header.ExtId = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  can_header.RTR = CAN_RTR_DATA;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  can_header.DLC = 8;
 800110a:	2308      	movs	r3, #8
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  can_header.IDE = CAN_ID_STD;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  can_header.TransmitGlobalTime = DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	f107 0118 	add.w	r1, r7, #24
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <can_send+0x40>)
 8001124:	f002 fb99 	bl	800385a <HAL_CAN_AddTxMessage>
  }
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000294 	.word	0x20000294

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_DMA_Init+0x38>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <MX_DMA_Init+0x38>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_DMA_Init+0x38>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	200e      	movs	r0, #14
 8001158:	f003 f8d7 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800115c:	200e      	movs	r0, #14
 800115e:	f003 f8f0 	bl	8004342 <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <MX_GPIO_Init+0x154>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <MX_GPIO_Init+0x154>)
 800118c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <MX_GPIO_Init+0x154>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <MX_GPIO_Init+0x154>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011ec:	4836      	ldr	r0, [pc, #216]	; (80012c8 <MX_GPIO_Init+0x158>)
 80011ee:	f003 fc7f 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	21c1      	movs	r1, #193	; 0xc1
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f003 fc79 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f246 0140 	movw	r1, #24640	; 0x6040
 8001204:	4831      	ldr	r0, [pc, #196]	; (80012cc <MX_GPIO_Init+0x15c>)
 8001206:	f003 fc73 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 800120a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4829      	ldr	r0, [pc, #164]	; (80012c8 <MX_GPIO_Init+0x158>)
 8001224:	f003 fad2 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 8001228:	23c1      	movs	r3, #193	; 0xc1
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f003 fac3 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 8001246:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_GPIO_Init+0x15c>)
 800125c:	f003 fab6 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 8001260:	f246 0340 	movw	r3, #24640	; 0x6040
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_GPIO_Init+0x15c>)
 800127a:	f003 faa7 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001288:	2301      	movs	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f003 fa99 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800129a:	2338      	movs	r3, #56	; 0x38
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012aa:	2305      	movs	r3, #5
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_GPIO_Init+0x15c>)
 80012b6:	f003 fa89 	bl	80047cc <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000400 	.word	0x48000400

080012d0 <parseTelemetryCmt>:
} tlm_msg;
volatile int16_t tmp = 0;
volatile uint32_t tlm_rx_idx = 0;

void parseTelemetryCmt(uint8_t rx_data)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  switch (tlm_rx_idx) {
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <parseTelemetryCmt+0x17c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b09      	cmp	r3, #9
 80012e0:	f200 80a8 	bhi.w	8001434 <parseTelemetryCmt+0x164>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <parseTelemetryCmt+0x1c>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	08001315 	.word	0x08001315
 80012f0:	0800132f 	.word	0x0800132f
 80012f4:	08001345 	.word	0x08001345
 80012f8:	0800136d 	.word	0x0800136d
 80012fc:	08001383 	.word	0x08001383
 8001300:	080013ab 	.word	0x080013ab
 8001304:	080013c1 	.word	0x080013c1
 8001308:	080013e9 	.word	0x080013e9
 800130c:	080013ff 	.word	0x080013ff
 8001310:	08001427 	.word	0x08001427
    case 0:
      if (rx_data == 0x2c || rx_data == 0x2d) {
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b2c      	cmp	r3, #44	; 0x2c
 8001318:	d003      	beq.n	8001322 <parseTelemetryCmt+0x52>
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b2d      	cmp	r3, #45	; 0x2d
 800131e:	f040 808d 	bne.w	800143c <parseTelemetryCmt+0x16c>
        tlm_rx_idx++;
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <parseTelemetryCmt+0x17c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <parseTelemetryCmt+0x17c>)
 800132a:	6013      	str	r3, [r2, #0]
      }
      break;
 800132c:	e086      	b.n	800143c <parseTelemetryCmt+0x16c>
    case 1:
      tmp = rx_data << 8;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <parseTelemetryCmt+0x180>)
 8001336:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <parseTelemetryCmt+0x17c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a43      	ldr	r2, [pc, #268]	; (800144c <parseTelemetryCmt+0x17c>)
 8001340:	6013      	str	r3, [r2, #0]
      break;
 8001342:	e07c      	b.n	800143e <parseTelemetryCmt+0x16e>
    case 2:
      tmp |= rx_data;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b21a      	sxth	r2, r3
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <parseTelemetryCmt+0x180>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <parseTelemetryCmt+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_1 = tmp;
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <parseTelemetryCmt+0x180>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <parseTelemetryCmt+0x184>)
 800135e:	805a      	strh	r2, [r3, #2]
      tlm_rx_idx++;
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <parseTelemetryCmt+0x17c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a39      	ldr	r2, [pc, #228]	; (800144c <parseTelemetryCmt+0x17c>)
 8001368:	6013      	str	r3, [r2, #0]
      break;
 800136a:	e068      	b.n	800143e <parseTelemetryCmt+0x16e>

    case 3:
      tmp = rx_data << 8;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <parseTelemetryCmt+0x180>)
 8001374:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <parseTelemetryCmt+0x17c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a33      	ldr	r2, [pc, #204]	; (800144c <parseTelemetryCmt+0x17c>)
 800137e:	6013      	str	r3, [r2, #0]
      break;
 8001380:	e05d      	b.n	800143e <parseTelemetryCmt+0x16e>
    case 4:
      tmp |= rx_data;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <parseTelemetryCmt+0x180>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <parseTelemetryCmt+0x180>)
 8001392:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_2 = tmp;
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <parseTelemetryCmt+0x180>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <parseTelemetryCmt+0x184>)
 800139c:	809a      	strh	r2, [r3, #4]
      tlm_rx_idx++;
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <parseTelemetryCmt+0x17c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <parseTelemetryCmt+0x17c>)
 80013a6:	6013      	str	r3, [r2, #0]
      break;
 80013a8:	e049      	b.n	800143e <parseTelemetryCmt+0x16e>

    case 5:
      tmp = rx_data << 8;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <parseTelemetryCmt+0x180>)
 80013b2:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <parseTelemetryCmt+0x17c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <parseTelemetryCmt+0x17c>)
 80013bc:	6013      	str	r3, [r2, #0]
      break;
 80013be:	e03e      	b.n	800143e <parseTelemetryCmt+0x16e>
    case 6:
      tmp |= rx_data;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <parseTelemetryCmt+0x180>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <parseTelemetryCmt+0x180>)
 80013d0:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_3 = tmp;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <parseTelemetryCmt+0x180>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <parseTelemetryCmt+0x184>)
 80013da:	80da      	strh	r2, [r3, #6]
      tlm_rx_idx++;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <parseTelemetryCmt+0x17c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <parseTelemetryCmt+0x17c>)
 80013e4:	6013      	str	r3, [r2, #0]
      break;
 80013e6:	e02a      	b.n	800143e <parseTelemetryCmt+0x16e>

    case 7:
      tmp = rx_data << 8;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <parseTelemetryCmt+0x180>)
 80013f0:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <parseTelemetryCmt+0x17c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <parseTelemetryCmt+0x17c>)
 80013fa:	6013      	str	r3, [r2, #0]
      break;
 80013fc:	e01f      	b.n	800143e <parseTelemetryCmt+0x16e>
    case 8:
      tmp |= rx_data;
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <parseTelemetryCmt+0x180>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <parseTelemetryCmt+0x180>)
 800140e:	801a      	strh	r2, [r3, #0]
      tlm_msg.speed = tmp;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <parseTelemetryCmt+0x180>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b21a      	sxth	r2, r3
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <parseTelemetryCmt+0x184>)
 8001418:	811a      	strh	r2, [r3, #8]
      tlm_rx_idx++;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <parseTelemetryCmt+0x17c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <parseTelemetryCmt+0x17c>)
 8001422:	6013      	str	r3, [r2, #0]
      break;
 8001424:	e00b      	b.n	800143e <parseTelemetryCmt+0x16e>

    case 9:
      tlm_msg.sum = rx_data;
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <parseTelemetryCmt+0x184>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	7293      	strb	r3, [r2, #10]
      tlm_rx_idx = 0;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <parseTelemetryCmt+0x17c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
      break;
 8001432:	e004      	b.n	800143e <parseTelemetryCmt+0x16e>

    default:
      tlm_rx_idx = 0;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <parseTelemetryCmt+0x17c>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
      break;
 800143a:	e000      	b.n	800143e <parseTelemetryCmt+0x16e>
      break;
 800143c:	bf00      	nop
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200002cc 	.word	0x200002cc
 8001450:	200002c8 	.word	0x200002c8
 8001454:	200002bc 	.word	0x200002bc

08001458 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char * ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len);  // 2ms
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <_write+0x24>)
 800146e:	f006 f8ad 	bl	80075cc <HAL_UART_Transmit_DMA>
  return len;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000440 	.word	0x20000440

08001480 <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0}, esc_tlm_buf[ESC_TLM_BUF_SIZE];
volatile bool uart_rx_flag = false, uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0, uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_UART_RxCpltCallback+0x70>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10d      	bne.n	80014ae <HAL_UART_RxCpltCallback+0x2e>
    uart_rx_flag = true;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_UART_RxCpltCallback+0x74>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
    uart_rx_cnt++;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_UART_RxCpltCallback+0x78>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_UART_RxCpltCallback+0x78>)
 80014a0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	4915      	ldr	r1, [pc, #84]	; (80014fc <HAL_UART_RxCpltCallback+0x7c>)
 80014a6:	4816      	ldr	r0, [pc, #88]	; (8001500 <HAL_UART_RxCpltCallback+0x80>)
 80014a8:	f006 f84c 	bl	8007544 <HAL_UART_Receive_IT>
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
    uart3_rx_cnt++;
    parseTelemetryCmt(uart3_rx_buf[0]);
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
  }
}
 80014ac:	e01c      	b.n	80014e8 <HAL_UART_RxCpltCallback+0x68>
  } else if (huart->Instance == USART3) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_UART_RxCpltCallback+0x84>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d117      	bne.n	80014e8 <HAL_UART_RxCpltCallback+0x68>
    uart3_rx_flag = true;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_UART_RxCpltCallback+0x88>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_UART_RxCpltCallback+0x8c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <HAL_UART_RxCpltCallback+0x90>)
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_UART_RxCpltCallback+0x94>)
 80014c8:	54d1      	strb	r1, [r2, r3]
    uart3_rx_cnt++;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_UART_RxCpltCallback+0x8c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_UART_RxCpltCallback+0x8c>)
 80014d2:	6013      	str	r3, [r2, #0]
    parseTelemetryCmt(uart3_rx_buf[0]);
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_RxCpltCallback+0x90>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fef9 	bl	80012d0 <parseTelemetryCmt>
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 80014de:	2201      	movs	r2, #1
 80014e0:	490b      	ldr	r1, [pc, #44]	; (8001510 <HAL_UART_RxCpltCallback+0x90>)
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <HAL_UART_RxCpltCallback+0x98>)
 80014e4:	f006 f82e 	bl	8007544 <HAL_UART_Receive_IT>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013800 	.word	0x40013800
 80014f4:	2000034c 	.word	0x2000034c
 80014f8:	20000350 	.word	0x20000350
 80014fc:	200002d0 	.word	0x200002d0
 8001500:	20000440 	.word	0x20000440
 8001504:	40004800 	.word	0x40004800
 8001508:	2000034d 	.word	0x2000034d
 800150c:	20000354 	.word	0x20000354
 8001510:	200002dc 	.word	0x200002dc
 8001514:	200002e8 	.word	0x200002e8
 8001518:	200004c8 	.word	0x200004c8

0800151c <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile float serv_angle = 0, dribbler_speed = 0;
volatile int servo_timeout_cnt = 0, dribbler_timeout_cnt = 0;
volatile float battery_voltage = 0;
volatile uint32_t can_rx_cnt = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  can_msg_buf_t can_rx_buf;
  CAN_RxHeaderTypeDef can_rx_header;
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f002 fa98 	bl	8003a64 <HAL_CAN_GetRxMessage>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    /* Reception Error */
    Error_Handler();
 800153a:	f000 fb5a 	bl	8001bf2 <Error_Handler>
  }

  can_rx_cnt++;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001546:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800154e:	d018      	beq.n	8001582 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8001550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001554:	d817      	bhi.n	8001586 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8001556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800155a:	d004      	beq.n	8001566 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800155c:	f240 1205 	movw	r2, #261	; 0x105
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
      break;

    case 0x300:
      break;
    default:
      break;
 8001564:	e00f      	b.n	8001586 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
      dribbler_timeout_cnt = 0;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
      dribbler_speed = can_rx_buf.speed;
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001570:	6013      	str	r3, [r2, #0]
      break;
 8001572:	e009      	b.n	8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      servo_timeout_cnt = 0;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
      serv_angle = can_rx_buf.speed;
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800157e:	6013      	str	r3, [r2, #0]
      break;
 8001580:	e002      	b.n	8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 8001582:	bf00      	nop
 8001584:	e000      	b.n	8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 8001586:	bf00      	nop
  }
}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000036c 	.word	0x2000036c
 8001594:	20000364 	.word	0x20000364
 8001598:	2000035c 	.word	0x2000035c
 800159c:	20000360 	.word	0x20000360
 80015a0:	20000358 	.word	0x20000358
 80015a4:	00000000 	.word	0x00000000

080015a8 <ball_sensor>:

int32_t ball_detect[2] = {0, 0};

void ball_sensor(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  bool ball_detected[2];

  switch (ball_detect_process) {
 80015ae:	4b82      	ldr	r3, [pc, #520]	; (80017b8 <ball_sensor+0x210>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d073      	beq.n	800169e <ball_sensor+0xf6>
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	f300 80f1 	bgt.w	800179e <ball_sensor+0x1f6>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <ball_sensor+0x1e>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d02a      	beq.n	800161a <ball_sensor+0x72>
 80015c4:	e0eb      	b.n	800179e <ball_sensor+0x1f6>
    case 0:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015cc:	487b      	ldr	r0, [pc, #492]	; (80017bc <ball_sensor+0x214>)
 80015ce:	f003 fa8f 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	4878      	ldr	r0, [pc, #480]	; (80017bc <ball_sensor+0x214>)
 80015da:	f003 fa89 	bl	8004af0 <HAL_GPIO_WritePin>
      adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 80015de:	4878      	ldr	r0, [pc, #480]	; (80017c0 <ball_sensor+0x218>)
 80015e0:	f001 fa0c 	bl	80029fc <HAL_ADC_GetValue>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <ball_sensor+0x21c>)
 80015ea:	601a      	str	r2, [r3, #0]
      ball_detect_process++;
 80015ec:	4b72      	ldr	r3, [pc, #456]	; (80017b8 <ball_sensor+0x210>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a71      	ldr	r2, [pc, #452]	; (80017b8 <ball_sensor+0x210>)
 80015f4:	6013      	str	r3, [r2, #0]

      speed_msg.speed = tlm_msg.speed;
 80015f6:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <ball_sensor+0x220>)
 80015f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <ball_sensor+0x224>)
 8001606:	edc3 7a00 	vstr	s15, [r3]
      can_send(0x204, speed_msg);
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <ball_sensor+0x224>)
 800160c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001610:	f44f 7001 	mov.w	r0, #516	; 0x204
 8001614:	f7ff fd6c 	bl	80010f0 <can_send>
      break;
 8001618:	e0c5      	b.n	80017a6 <ball_sensor+0x1fe>

    case 1:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001620:	4866      	ldr	r0, [pc, #408]	; (80017bc <ball_sensor+0x214>)
 8001622:	f003 fa65 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162c:	4863      	ldr	r0, [pc, #396]	; (80017bc <ball_sensor+0x214>)
 800162e:	f003 fa5f 	bl	8004af0 <HAL_GPIO_WritePin>

      adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 8001632:	4863      	ldr	r0, [pc, #396]	; (80017c0 <ball_sensor+0x218>)
 8001634:	f001 f9e2 	bl	80029fc <HAL_ADC_GetValue>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <ball_sensor+0x21c>)
 800163e:	605a      	str	r2, [r3, #4]

      ball_detect_process++;
 8001640:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <ball_sensor+0x210>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <ball_sensor+0x210>)
 8001648:	6013      	str	r3, [r2, #0]
      battery_voltage = HAL_ADC_GetValue(&hadc1) * 36.3 / 4096;
 800164a:	4861      	ldr	r0, [pc, #388]	; (80017d0 <ball_sensor+0x228>)
 800164c:	f001 f9d6 	bl	80029fc <HAL_ADC_GetValue>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff56 	bl	8000504 <__aeabi_ui2d>
 8001658:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <ball_sensor+0x208>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffcb 	bl	80005f8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <ball_sensor+0x22c>)
 8001670:	f7ff f8ec 	bl	800084c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fab4 	bl	8000be8 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <ball_sensor+0x230>)
 8001684:	6013      	str	r3, [r2, #0]
      voltage_msg.voltage = battery_voltage;
 8001686:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <ball_sensor+0x230>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a54      	ldr	r2, [pc, #336]	; (80017dc <ball_sensor+0x234>)
 800168c:	6013      	str	r3, [r2, #0]
      can_send(0x214, voltage_msg);
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <ball_sensor+0x234>)
 8001690:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001694:	f44f 7005 	mov.w	r0, #532	; 0x214
 8001698:	f7ff fd2a 	bl	80010f0 <can_send>
      break;
 800169c:	e083      	b.n	80017a6 <ball_sensor+0x1fe>

    case 2:

      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a4:	4845      	ldr	r0, [pc, #276]	; (80017bc <ball_sensor+0x214>)
 80016a6:	f003 fa23 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b0:	4842      	ldr	r0, [pc, #264]	; (80017bc <ball_sensor+0x214>)
 80016b2:	f003 fa1d 	bl	8004af0 <HAL_GPIO_WritePin>

      adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 80016b6:	4842      	ldr	r0, [pc, #264]	; (80017c0 <ball_sensor+0x218>)
 80016b8:	f001 f9a0 	bl	80029fc <HAL_ADC_GetValue>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <ball_sensor+0x21c>)
 80016c2:	609a      	str	r2, [r3, #8]

      ball_detect[0] = adc_raw[0] - adc_raw[1];
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <ball_sensor+0x21c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <ball_sensor+0x21c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <ball_sensor+0x238>)
 80016d0:	6013      	str	r3, [r2, #0]
      ball_detect[1] = adc_raw[0] - adc_raw[2];
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <ball_sensor+0x21c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <ball_sensor+0x21c>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <ball_sensor+0x238>)
 80016de:	6053      	str	r3, [r2, #4]

      if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET) {
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	4835      	ldr	r0, [pc, #212]	; (80017bc <ball_sensor+0x214>)
 80016e6:	f003 f9eb 	bl	8004ac0 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <ball_sensor+0x154>
        ball_detect[0] = 0;
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <ball_sensor+0x238>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
        ball_detect[1] = 0;
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <ball_sensor+0x238>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
      }

      //
      if (ball_detect[1] < BALL_DETECTOR_THRESH) {
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <ball_sensor+0x238>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001704:	da08      	bge.n	8001718 <ball_sensor+0x170>
        ball_detected[0] = true;
 8001706:	2301      	movs	r3, #1
 8001708:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f003 f9ed 	bl	8004af0 <HAL_GPIO_WritePin>
 8001716:	e007      	b.n	8001728 <ball_sensor+0x180>
      } else {
        ball_detected[0] = false;
 8001718:	2300      	movs	r3, #0
 800171a:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f003 f9e4 	bl	8004af0 <HAL_GPIO_WritePin>
      }
      if (ball_detect[0] < BALL_DETECTOR_THRESH) {
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <ball_sensor+0x238>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001730:	da08      	bge.n	8001744 <ball_sensor+0x19c>
        ball_detected[1] = true;
 8001732:	2301      	movs	r3, #1
 8001734:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f003 f9d7 	bl	8004af0 <HAL_GPIO_WritePin>
 8001742:	e007      	b.n	8001754 <ball_sensor+0x1ac>
      } else {
        ball_detected[1] = false;
 8001744:	2300      	movs	r3, #0
 8001746:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f003 f9ce 	bl	8004af0 <HAL_GPIO_WritePin>
      }

      if (ball_detected[0]) {
 8001754:	793b      	ldrb	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <ball_sensor+0x1c0>
        ball_msg.data[0] = 1;
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <ball_sensor+0x23c>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <ball_sensor+0x23c>)
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
 8001766:	e00f      	b.n	8001788 <ball_sensor+0x1e0>
      } else if (ball_detected[1]) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <ball_sensor+0x1d4>
        ball_msg.data[0] = 1;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <ball_sensor+0x23c>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 5;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <ball_sensor+0x23c>)
 8001776:	2205      	movs	r2, #5
 8001778:	705a      	strb	r2, [r3, #1]
 800177a:	e005      	b.n	8001788 <ball_sensor+0x1e0>
      } else {
        ball_msg.data[0] = 0;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <ball_sensor+0x23c>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <ball_sensor+0x23c>)
 8001784:	2200      	movs	r2, #0
 8001786:	705a      	strb	r2, [r3, #1]
      }

      can_send(0x240, ball_msg);
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <ball_sensor+0x23c>)
 800178a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800178e:	f44f 7010 	mov.w	r0, #576	; 0x240
 8001792:	f7ff fcad 	bl	80010f0 <can_send>

      ball_detect_process = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <ball_sensor+0x210>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
      break;
 800179c:	e003      	b.n	80017a6 <ball_sensor+0x1fe>

    default:
      ball_detect_process = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <ball_sensor+0x210>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
      break;
 80017a4:	bf00      	nop
  }
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	66666666 	.word	0x66666666
 80017b4:	40422666 	.word	0x40422666
 80017b8:	20000378 	.word	0x20000378
 80017bc:	48000400 	.word	0x48000400
 80017c0:	20000240 	.word	0x20000240
 80017c4:	2000037c 	.word	0x2000037c
 80017c8:	200002bc 	.word	0x200002bc
 80017cc:	20000388 	.word	0x20000388
 80017d0:	200001f0 	.word	0x200001f0
 80017d4:	40b00000 	.word	0x40b00000
 80017d8:	20000368 	.word	0x20000368
 80017dc:	20000390 	.word	0x20000390
 80017e0:	20000370 	.word	0x20000370
 80017e4:	20000398 	.word	0x20000398

080017e8 <HAL_TIM_PeriodElapsedCallback>:

// 2kHz cycle
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80017e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ec:	b09b      	sub	sp, #108	; 0x6c
 80017ee:	af10      	add	r7, sp, #64	; 0x40
 80017f0:	6278      	str	r0, [r7, #36]	; 0x24
  static uint32_t print_interval = 0;
  ball_sensor();
 80017f2:	f7ff fed9 	bl	80015a8 <ball_sensor>

  print_interval++;
 80017f6:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a7d      	ldr	r2, [pc, #500]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80017fe:	6013      	str	r3, [r2, #0]
  if (print_interval >= 200) {
 8001800:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2bc7      	cmp	r3, #199	; 0xc7
 8001806:	f240 80f0 	bls.w	80019ea <HAL_TIM_PeriodElapsedCallback+0x202>
    print_interval = 0;
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    printf(
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe97 	bl	8000548 <__aeabi_f2d>
 800181a:	4680      	mov	r8, r0
 800181c:	4689      	mov	r9, r1
      "batt %4.1f spd %4d Mbx %ld can rx %3ld uart rx %4ld %4ld dribbler %6.3f servo %6.3f timeout %4d %4d ball %+5ld %+5ld %d%d \n", battery_voltage, tlm_msg.speed,
 800181e:	4b77      	ldr	r3, [pc, #476]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    printf(
 8001824:	623b      	str	r3, [r7, #32]
 8001826:	4876      	ldr	r0, [pc, #472]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001828:	f002 f8e7 	bl	80039fa <HAL_CAN_GetTxMailboxesFreeLevel>
 800182c:	61f8      	str	r0, [r7, #28]
 800182e:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	61ba      	str	r2, [r7, #24]
 8001834:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001836:	6819      	ldr	r1, [r3, #0]
 8001838:	6179      	str	r1, [r7, #20]
 800183a:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800183c:	681c      	ldr	r4, [r3, #0]
 800183e:	613c      	str	r4, [r7, #16]
 8001840:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4b71      	ldr	r3, [pc, #452]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe78 	bl	8000548 <__aeabi_f2d>
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800185a:	681e      	ldr	r6, [r3, #0]
 800185c:	60fe      	str	r6, [r7, #12]
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800186c:	685e      	ldr	r6, [r3, #4]
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	930f      	str	r3, [sp, #60]	; 0x3c
 800187e:	920e      	str	r2, [sp, #56]	; 0x38
 8001880:	960d      	str	r6, [sp, #52]	; 0x34
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	920c      	str	r2, [sp, #48]	; 0x30
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	930b      	str	r3, [sp, #44]	; 0x2c
 800188a:	68fe      	ldr	r6, [r7, #12]
 800188c:	960a      	str	r6, [sp, #40]	; 0x28
 800188e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001892:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001896:	693c      	ldr	r4, [r7, #16]
 8001898:	9404      	str	r4, [sp, #16]
 800189a:	6979      	ldr	r1, [r7, #20]
 800189c:	9103      	str	r1, [sp, #12]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	9202      	str	r2, [sp, #8]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	4642      	mov	r2, r8
 80018ac:	464b      	mov	r3, r9
 80018ae:	485f      	ldr	r0, [pc, #380]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018b0:	f008 f88c 	bl	80099cc <iprintf>
      HAL_CAN_GetTxMailboxesFreeLevel(&hcan), can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1], uart3_rx_flag,
      uart_rx_flag);

    // TEL (LED0,PA3)
    if (uart3_rx_cnt > 0) {
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xe2>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c2:	485b      	ldr	r0, [pc, #364]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018c4:	f003 f914 	bl	8004af0 <HAL_GPIO_WritePin>
 80018c8:	e005      	b.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0xee>
    } else {
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d0:	4857      	ldr	r0, [pc, #348]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018d2:	f003 f90d 	bl	8004af0 <HAL_GPIO_WritePin>
    }

    // RX (can rx,LED2,PA5)
    if (can_rx_cnt > 0) {
 80018d6:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_TIM_PeriodElapsedCallback+0x104>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e4:	4852      	ldr	r0, [pc, #328]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018e6:	f003 f903 	bl	8004af0 <HAL_GPIO_WritePin>
 80018ea:	e005      	b.n	80018f8 <HAL_TIM_PeriodElapsedCallback+0x110>
    } else {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	484f      	ldr	r0, [pc, #316]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018f4:	f003 f8fc 	bl	8004af0 <HAL_GPIO_WritePin>
    }

    if (dribbler_speed != 0) {
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d006      	beq.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x12e>
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	4848      	ldr	r0, [pc, #288]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001910:	f003 f8ee 	bl	8004af0 <HAL_GPIO_WritePin>
 8001914:	e005      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x13a>
    } else {
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191c:	4844      	ldr	r0, [pc, #272]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800191e:	f003 f8e7 	bl	8004af0 <HAL_GPIO_WritePin>
    }

    can_rx_cnt = 0;
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    uart_rx_cnt = 0;
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    uart3_rx_cnt = 0;
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_SET) {
 8001934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001938:	483e      	ldr	r0, [pc, #248]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800193a:	f003 f8c1 	bl	8004ac0 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b01      	cmp	r3, #1
 8001942:	d112      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x182>
      htim3.Instance->CCR3 = 1500 + 600 * dribbler_speed;  // esc
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x250>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001a3c <HAL_TIM_PeriodElapsedCallback+0x254>
 8001956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001962:	ee17 2a90 	vmov	r2, s15
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
 8001968:	e004      	b.n	8001974 <HAL_TIM_PeriodElapsedCallback+0x18c>
    } else {
      htim3.Instance->CCR3 = 1500 + USER_SW_ESC_PULSE_WITDH;  // esc
 800196a:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET) {
 8001974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f003 f8a0 	bl	8004ac0 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d112      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x1c4>
      htim3.Instance->CCR4 = 1500 - 600 * serv_angle;  // servo
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a3c <HAL_TIM_PeriodElapsedCallback+0x254>
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a4:	ee17 2a90 	vmov	r2, s15
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
 80019aa:	e004      	b.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
    } else {
      htim3.Instance->CCR4 = 1500 - USER_SW_SERVO_PULSE_WITDH;  // servo
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    dribbler_timeout_cnt++;
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80019be:	6013      	str	r3, [r2, #0]
    servo_timeout_cnt++;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019c8:	6013      	str	r3, [r2, #0]
    if (dribbler_timeout_cnt > 50) {
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b32      	cmp	r3, #50	; 0x32
 80019d0:	dd03      	ble.n	80019da <HAL_TIM_PeriodElapsedCallback+0x1f2>
      dribbler_speed = 0;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    }
    if (servo_timeout_cnt > 50) {
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b32      	cmp	r3, #50	; 0x32
 80019e0:	dd03      	ble.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x202>
      serv_angle = 0;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    }
  }
}
 80019ea:	bf00      	nop
 80019ec:	372c      	adds	r7, #44	; 0x2c
 80019ee:	46bd      	mov	sp, r7
 80019f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019f4:	200003a0 	.word	0x200003a0
 80019f8:	20000368 	.word	0x20000368
 80019fc:	200002bc 	.word	0x200002bc
 8001a00:	20000294 	.word	0x20000294
 8001a04:	2000036c 	.word	0x2000036c
 8001a08:	20000350 	.word	0x20000350
 8001a0c:	20000354 	.word	0x20000354
 8001a10:	2000035c 	.word	0x2000035c
 8001a14:	20000358 	.word	0x20000358
 8001a18:	20000364 	.word	0x20000364
 8001a1c:	20000360 	.word	0x20000360
 8001a20:	20000370 	.word	0x20000370
 8001a24:	2000034d 	.word	0x2000034d
 8001a28:	2000034c 	.word	0x2000034c
 8001a2c:	0800d3f8 	.word	0x0800d3f8
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000400 	.word	0x48000400
 8001a38:	44160000 	.word	0x44160000
 8001a3c:	44bb8000 	.word	0x44bb8000
 8001a40:	200003a8 	.word	0x200003a8

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f000 fc7c 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f872 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f7ff fb8e 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a54:	f7ff fb6e 	bl	8001134 <MX_DMA_Init>
  MX_CAN_Init();
 8001a58:	f7ff fa98 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001a5c:	f000 fb14 	bl	8002088 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a60:	f000 fb42 	bl	80020e8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001a64:	f000 fa06 	bl	8001e74 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001a68:	f7ff f9b4 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a6c:	f7ff f942 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001a70:	f000 fa66 	bl	8001f40 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board 0426!!\n");
 8001a74:	4823      	ldr	r0, [pc, #140]	; (8001b04 <main+0xc0>)
 8001a76:	f008 f80f 	bl	8009a98 <puts>
  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4922      	ldr	r1, [pc, #136]	; (8001b08 <main+0xc4>)
 8001a7e:	4823      	ldr	r0, [pc, #140]	; (8001b0c <main+0xc8>)
 8001a80:	f005 fd60 	bl	8007544 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	4922      	ldr	r1, [pc, #136]	; (8001b10 <main+0xcc>)
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <main+0xd0>)
 8001a8a:	f005 fd5b 	bl	8007544 <HAL_UART_Receive_IT>

  CAN_Filter_Init();
 8001a8e:	f7ff faff 	bl	8001090 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8001a92:	4821      	ldr	r0, [pc, #132]	; (8001b18 <main+0xd4>)
 8001a94:	f001 fe9d 	bl	80037d2 <HAL_CAN_Start>

  HAL_TIM_Base_Start_IT(&htim17);
 8001a98:	4820      	ldr	r0, [pc, #128]	; (8001b1c <main+0xd8>)
 8001a9a:	f004 fcbd 	bl	8006418 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Init(&htim3);
 8001a9e:	4820      	ldr	r0, [pc, #128]	; (8001b20 <main+0xdc>)
 8001aa0:	f004 fd24 	bl	80064ec <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	481e      	ldr	r0, [pc, #120]	; (8001b20 <main+0xdc>)
 8001aa8:	f004 fd78 	bl	800659c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001aac:	210c      	movs	r1, #12
 8001aae:	481c      	ldr	r0, [pc, #112]	; (8001b20 <main+0xdc>)
 8001ab0:	f004 fd74 	bl	800659c <HAL_TIM_PWM_Start>
  htim3.Instance->CCR3 = 0;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <main+0xdc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = 0;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <main+0xdc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
  servo_timeout_cnt = 0;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <main+0xe0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
  dribbler_timeout_cnt = 0;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <main+0xe4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4816      	ldr	r0, [pc, #88]	; (8001b2c <main+0xe8>)
 8001ad4:	f000 ff9f 	bl	8002a16 <HAL_ADCEx_Calibration_Start>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <main+0x9e>
    /* Calibration Error */
    Error_Handler();
 8001ade:	f000 f888 	bl	8001bf2 <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <main+0xec>)
 8001ae6:	f000 ff96 	bl	8002a16 <HAL_ADCEx_Calibration_Start>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <main+0xb0>
    /* Calibration Error */
    Error_Handler();
 8001af0:	f000 f87f 	bl	8001bf2 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <main+0xe8>)
 8001af6:	f000 fe6b 	bl	80027d0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <main+0xec>)
 8001afc:	f000 fe68 	bl	80027d0 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001b00:	e7fe      	b.n	8001b00 <main+0xbc>
 8001b02:	bf00      	nop
 8001b04:	0800d474 	.word	0x0800d474
 8001b08:	200002dc 	.word	0x200002dc
 8001b0c:	200004c8 	.word	0x200004c8
 8001b10:	200002d0 	.word	0x200002d0
 8001b14:	20000440 	.word	0x20000440
 8001b18:	20000294 	.word	0x20000294
 8001b1c:	200003f4 	.word	0x200003f4
 8001b20:	200003a8 	.word	0x200003a8
 8001b24:	20000360 	.word	0x20000360
 8001b28:	20000364 	.word	0x20000364
 8001b2c:	200001f0 	.word	0x200001f0
 8001b30:	20000240 	.word	0x20000240

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09e      	sub	sp, #120	; 0x78
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 f8a8 	bl	8009c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	223c      	movs	r2, #60	; 0x3c
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f008 f89a 	bl	8009c98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b72:	2301      	movs	r3, #1
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b84:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ffc8 	bl	8004b20 <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x66>
    Error_Handler();
 8001b96:	f000 f82c 	bl	8001bf2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fff0 	bl	8005b9c <HAL_RCC_ClockConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x92>
    Error_Handler();
 8001bc2:	f000 f816 	bl	8001bf2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_ADC12;
 8001bc6:	2385      	movs	r3, #133	; 0x85
 8001bc8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fa14 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xb6>
    Error_Handler();
 8001be6:	f000 f804 	bl	8001bf2 <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3778      	adds	r7, #120	; 0x78
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf6:	b672      	cpsid	i
}
 8001bf8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001bfa:	e7fe      	b.n	8001bfa <Error_Handler+0x8>

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_MspInit+0x44>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_MspInit+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_MspInit+0x44>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x44>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x44>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x44>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 fb9e 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA1_Channel4_IRQHandler+0x10>)
 8001c9e:	f002 fc87 	bl	80045b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000550 	.word	0x20000550

08001cac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001cb2:	f002 f81f 	bl	8003cf4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000294 	.word	0x20000294

08001cc0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001cc6:	f004 fd69 	bl	800679c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200003f4 	.word	0x200003f4

08001cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART1_IRQHandler+0x10>)
 8001cda:	f005 fcf3 	bl	80076c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000440 	.word	0x20000440

08001ce8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART3_IRQHandler+0x10>)
 8001cee:	f005 fce9 	bl	80076c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200004c8 	.word	0x200004c8

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d16:	f008 f811 	bl	8009d3c <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
	}

return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da2:	605a      	str	r2, [r3, #4]
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f007 ff92 	bl	8009d3c <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20008000 	.word	0x20008000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	200003a4 	.word	0x200003a4
 8001e4c:	200006e8 	.word	0x200006e8

08001e50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <MX_TIM3_Init+0xc8>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001ea0:	2248      	movs	r2, #72	; 0x48
 8001ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001eac:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001ec0:	f004 fb14 	bl	80064ec <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001eca:	f7ff fe92 	bl	8001bf2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4816      	ldr	r0, [pc, #88]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001ede:	f005 fa45 	bl	800736c <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ee8:	f7ff fe83 	bl	8001bf2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2360      	movs	r3, #96	; 0x60
 8001eee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8001ef0:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	2208      	movs	r2, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001f06:	f004 fd69 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001f10:	f7ff fe6f 	bl	8001bf2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	220c      	movs	r2, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001f1c:	f004 fd5e 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001f26:	f7ff fe64 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM3_Init+0xc4>)
 8001f2c:	f000 f874 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003a8 	.word	0x200003a8
 8001f3c:	40000400 	.word	0x40000400

08001f40 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <MX_TIM17_Init+0x48>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f4c:	2248      	movs	r2, #72	; 0x48
 8001f4e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 500;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f5c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_TIM17_Init+0x44>)
 8001f72:	f004 f9f9 	bl	8006368 <HAL_TIM_Base_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001f7c:	f7ff fe39 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200003f4 	.word	0x200003f4
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x38>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_TIM_Base_MspInit+0x44>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_TIM_Base_MspInit+0x48>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_TIM_Base_MspInit+0x48>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6193      	str	r3, [r2, #24]
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_TIM_Base_MspInit+0x48>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	201a      	movs	r0, #26
 8001ffc:	f002 f985 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002000:	201a      	movs	r0, #26
 8002002:	f002 f99e 	bl	8004342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40014800 	.word	0x40014800
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_TIM_MspPostInit+0x64>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11b      	bne.n	8002072 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_TIM_MspPostInit+0x68>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_TIM_MspPostInit+0x68>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6153      	str	r3, [r2, #20]
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_MspPostInit+0x68>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002052:	2303      	movs	r3, #3
 8002054:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_TIM_MspPostInit+0x6c>)
 800206e:	f002 fbad 	bl	80047cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400

08002088 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MX_USART1_UART_Init+0x54>)
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <MX_USART1_UART_Init+0x58>)
 8002090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_USART1_UART_Init+0x54>)
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <MX_USART1_UART_Init+0x5c>)
 8002096:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <MX_USART1_UART_Init+0x54>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020ac:	220c      	movs	r2, #12
 80020ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <MX_USART1_UART_Init+0x54>)
 80020ca:	f005 f9ed 	bl	80074a8 <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80020d4:	f7ff fd8d 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000440 	.word	0x20000440
 80020e0:	40013800 	.word	0x40013800
 80020e4:	001e8480 	.word	0x001e8480

080020e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_USART3_UART_Init+0x58>)
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <MX_USART3_UART_Init+0x5c>)
 80020f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <MX_USART3_UART_Init+0x58>)
 80020f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART3_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_USART3_UART_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART3_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART3_UART_Init+0x58>)
 800210e:	220c      	movs	r2, #12
 8002110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART3_UART_Init+0x58>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART3_UART_Init+0x58>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART3_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART3_UART_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART3_UART_Init+0x58>)
 800212c:	f005 f9bc 	bl	80074a8 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002136:	f7ff fd5c 	bl	8001bf2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004c8 	.word	0x200004c8
 8002144:	40004800 	.word	0x40004800

08002148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5c      	ldr	r2, [pc, #368]	; (80022d8 <HAL_UART_MspInit+0x190>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d16a      	bne.n	8002240 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_UART_MspInit+0x194>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4a5b      	ldr	r2, [pc, #364]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6193      	str	r3, [r2, #24]
 8002176:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4a55      	ldr	r2, [pc, #340]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	6153      	str	r3, [r2, #20]
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800219a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ac:	2307      	movs	r3, #7
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ba:	f002 fb07 	bl	80047cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d0:	2307      	movs	r3, #7
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f002 faf5 	bl	80047cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_UART_MspInit+0x198>)
 80021e4:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <HAL_UART_MspInit+0x19c>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_UART_MspInit+0x198>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_UART_MspInit+0x198>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_UART_MspInit+0x198>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_UART_MspInit+0x198>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <HAL_UART_MspInit+0x198>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_UART_MspInit+0x198>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_UART_MspInit+0x198>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002212:	4833      	ldr	r0, [pc, #204]	; (80022e0 <HAL_UART_MspInit+0x198>)
 8002214:	f002 f8af 	bl	8004376 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 800221e:	f7ff fce8 	bl	8001bf2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <HAL_UART_MspInit+0x198>)
 8002226:	671a      	str	r2, [r3, #112]	; 0x70
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_UART_MspInit+0x198>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2025      	movs	r0, #37	; 0x25
 8002234:	f002 f869 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002238:	2025      	movs	r0, #37	; 0x25
 800223a:	f002 f882 	bl	8004342 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800223e:	e046      	b.n	80022ce <HAL_UART_MspInit+0x186>
  else if(uartHandle->Instance==USART3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <HAL_UART_MspInit+0x1a0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d141      	bne.n	80022ce <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART3_CLK_ENABLE();
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_UART_MspInit+0x194>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_UART_MspInit+0x194>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228c:	2307      	movs	r3, #7
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	4815      	ldr	r0, [pc, #84]	; (80022ec <HAL_UART_MspInit+0x1a4>)
 8002298:	f002 fa98 	bl	80047cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800229c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ae:	2307      	movs	r3, #7
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <HAL_UART_MspInit+0x1a4>)
 80022ba:	f002 fa87 	bl	80047cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2027      	movs	r0, #39	; 0x27
 80022c4:	f002 f821 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022c8:	2027      	movs	r0, #39	; 0x27
 80022ca:	f002 f83a 	bl	8004342 <HAL_NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40021000 	.word	0x40021000
 80022e0:	20000550 	.word	0x20000550
 80022e4:	40020044 	.word	0x40020044
 80022e8:	40004800 	.word	0x40004800
 80022ec:	48000400 	.word	0x48000400

080022f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <LoopForever+0x6>)
  ldr r1, =_edata
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LoopForever+0xe>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopForever+0x12>)
  ldr r4, =_ebss
 800230c:	4c0b      	ldr	r4, [pc, #44]	; (800233c <LoopForever+0x16>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800231a:	f7ff fd99 	bl	8001e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f007 fd13 	bl	8009d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002322:	f7ff fb8f 	bl	8001a44 <main>

08002326 <LoopForever>:

LoopForever:
    b LoopForever
 8002326:	e7fe      	b.n	8002326 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002328:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002334:	0800d8f8 	.word	0x0800d8f8
  ldr r2, =_sbss
 8002338:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800233c:	200006e4 	.word	0x200006e4

08002340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC1_2_IRQHandler>
	...

08002344 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_Init+0x28>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_Init+0x28>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002354:	2003      	movs	r0, #3
 8002356:	f001 ffcd 	bl	80042f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235a:	200f      	movs	r0, #15
 800235c:	f000 f808 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002360:	f7ff fc4c 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40022000 	.word	0x40022000

08002370 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_InitTick+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_InitTick+0x58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f001 ffe5 	bl	800435e <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f001 ffad 	bl	800430a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x5c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000008 	.word	0x20000008
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000594 	.word	0x20000594

080023f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000594 	.word	0x20000594

08002410 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b09a      	sub	sp, #104	; 0x68
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e1c9      	b.n	80027c4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d176      	bne.n	8002530 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d152      	bne.n	80024f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fe fd13 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13b      	bne.n	80024f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 ff7f 	bl	800337c <ADC_Disable>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d12f      	bne.n	80024f0 <HAL_ADC_Init+0xe0>
 8002490:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12b      	bne.n	80024f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024a0:	f023 0302 	bic.w	r3, r3, #2
 80024a4:	f043 0202 	orr.w	r2, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024cc:	4b86      	ldr	r3, [pc, #536]	; (80026e8 <HAL_ADC_Init+0x2d8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a86      	ldr	r2, [pc, #536]	; (80026ec <HAL_ADC_Init+0x2dc>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9a      	lsrs	r2, r3, #18
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e2:	e002      	b.n	80024ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d110      	bne.n	8002530 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f023 0312 	bic.w	r3, r3, #18
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8136 	bne.w	80027aa <HAL_ADC_Init+0x39a>
 800253e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8131 	bne.w	80027aa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 8129 	bne.w	80027aa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002560:	f043 0202 	orr.w	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002570:	d004      	beq.n	800257c <HAL_ADC_Init+0x16c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_ADC_Init+0x2e0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_ADC_Init+0x170>
 800257c:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_ADC_Init+0x2e4>)
 800257e:	e000      	b.n	8002582 <HAL_ADC_Init+0x172>
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_ADC_Init+0x2e8>)
 8002582:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d102      	bne.n	8002594 <HAL_ADC_Init+0x184>
 800258e:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_ADC_Init+0x2e0>)
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e01a      	b.n	80025ca <HAL_ADC_Init+0x1ba>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_ADC_Init+0x2e0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d103      	bne.n	80025a6 <HAL_ADC_Init+0x196>
 800259e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e011      	b.n	80025ca <HAL_ADC_Init+0x1ba>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_ADC_Init+0x2ec>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d102      	bne.n	80025b6 <HAL_ADC_Init+0x1a6>
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_ADC_Init+0x2f0>)
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e009      	b.n	80025ca <HAL_ADC_Init+0x1ba>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_ADC_Init+0x2f0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d102      	bne.n	80025c6 <HAL_ADC_Init+0x1b6>
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <HAL_ADC_Init+0x2ec>)
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e001      	b.n	80025ca <HAL_ADC_Init+0x1ba>
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_ADC_Init+0x1da>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Init+0x1da>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_ADC_Init+0x1dc>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11c      	bne.n	800262a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d010      	beq.n	8002618 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_ADC_Init+0x202>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_ADC_Init+0x202>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_ADC_Init+0x204>
 8002612:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002614:	2b00      	cmp	r3, #0
 8002616:	d108      	bne.n	800262a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7e5b      	ldrb	r3, [r3, #25]
 800262e:	035b      	lsls	r3, r3, #13
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002634:	2a01      	cmp	r2, #1
 8002636:	d002      	beq.n	800263e <HAL_ADC_Init+0x22e>
 8002638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800263c:	e000      	b.n	8002640 <HAL_ADC_Init+0x230>
 800263e:	2200      	movs	r2, #0
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4313      	orrs	r3, r2
 800264e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002650:	4313      	orrs	r3, r2
 8002652:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11b      	bne.n	8002696 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7e5b      	ldrb	r3, [r3, #25]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	3b01      	subs	r3, #1
 800266c:	045a      	lsls	r2, r3, #17
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	4313      	orrs	r3, r2
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	663b      	str	r3, [r7, #96]	; 0x60
 8002678:	e00d      	b.n	8002696 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	2b01      	cmp	r3, #1
 800269c:	d03a      	beq.n	8002714 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <HAL_ADC_Init+0x2ec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_Init+0x2a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_ADC_Init+0x2f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d128      	bne.n	8002704 <HAL_ADC_Init+0x2f4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80026ba:	d012      	beq.n	80026e2 <HAL_ADC_Init+0x2d2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d00a      	beq.n	80026dc <HAL_ADC_Init+0x2cc>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80026ce:	d002      	beq.n	80026d6 <HAL_ADC_Init+0x2c6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	e018      	b.n	8002708 <HAL_ADC_Init+0x2f8>
 80026d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026da:	e015      	b.n	8002708 <HAL_ADC_Init+0x2f8>
 80026dc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80026e0:	e012      	b.n	8002708 <HAL_ADC_Init+0x2f8>
 80026e2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80026e6:	e00f      	b.n	8002708 <HAL_ADC_Init+0x2f8>
 80026e8:	20000000 	.word	0x20000000
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	50000100 	.word	0x50000100
 80026f4:	50000300 	.word	0x50000300
 80026f8:	50000700 	.word	0x50000700
 80026fc:	50000400 	.word	0x50000400
 8002700:	50000500 	.word	0x50000500
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800270c:	4313      	orrs	r3, r2
 800270e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002710:	4313      	orrs	r3, r2
 8002712:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d114      	bne.n	800274c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7e1b      	ldrb	r3, [r3, #24]
 800273a:	039a      	lsls	r2, r3, #14
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4313      	orrs	r3, r2
 8002746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002748:	4313      	orrs	r3, r2
 800274a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_ADC_Init+0x3bc>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10c      	bne.n	8002782 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f023 010f 	bic.w	r1, r3, #15
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	e007      	b.n	8002792 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 020f 	bic.w	r2, r2, #15
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f023 0303 	bic.w	r3, r3, #3
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
 80027a8:	e00a      	b.n	80027c0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f023 0312 	bic.w	r3, r3, #18
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80027c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3768      	adds	r7, #104	; 0x68
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	fff0c007 	.word	0xfff0c007

080027d0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80f9 	bne.w	80029de <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Start+0x2a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0f4      	b.n	80029e4 <HAL_ADC_Start+0x214>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fd56 	bl	80032b4 <ADC_Enable>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80e0 	bne.w	80029d4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002830:	d004      	beq.n	800283c <HAL_ADC_Start+0x6c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6d      	ldr	r2, [pc, #436]	; (80029ec <HAL_ADC_Start+0x21c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <HAL_ADC_Start+0x7a>
 800283c:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <HAL_ADC_Start+0x220>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <HAL_ADC_Start+0x9a>
 8002848:	e005      	b.n	8002856 <HAL_ADC_Start+0x86>
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_ADC_Start+0x224>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_ADC_Start+0x9a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285e:	d004      	beq.n	800286a <HAL_ADC_Start+0x9a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a64      	ldr	r2, [pc, #400]	; (80029f8 <HAL_ADC_Start+0x228>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d115      	bne.n	8002896 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d036      	beq.n	80028f2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800288c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002894:	e02d      	b.n	80028f2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028aa:	d004      	beq.n	80028b6 <HAL_ADC_Start+0xe6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_ADC_Start+0x21c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_Start+0xfc>
 80028b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e008      	b.n	80028de <HAL_ADC_Start+0x10e>
 80028cc:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_ADC_Start+0x228>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d106      	bne.n	800290e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f023 0206 	bic.w	r2, r3, #6
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
 800290c:	e002      	b.n	8002914 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	221c      	movs	r2, #28
 8002922:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292c:	d004      	beq.n	8002938 <HAL_ADC_Start+0x168>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <HAL_ADC_Start+0x21c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d106      	bne.n	8002946 <HAL_ADC_Start+0x176>
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_ADC_Start+0x220>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03e      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 8002944:	e005      	b.n	8002952 <HAL_ADC_Start+0x182>
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_ADC_Start+0x224>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b00      	cmp	r3, #0
 8002950:	d037      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Start+0x196>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_ADC_Start+0x21c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d106      	bne.n	8002974 <HAL_ADC_Start+0x1a4>
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_ADC_Start+0x220>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2b05      	cmp	r3, #5
 8002970:	d027      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 8002972:	e005      	b.n	8002980 <HAL_ADC_Start+0x1b0>
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_ADC_Start+0x224>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2b05      	cmp	r3, #5
 800297e:	d020      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002988:	d004      	beq.n	8002994 <HAL_ADC_Start+0x1c4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a17      	ldr	r2, [pc, #92]	; (80029ec <HAL_ADC_Start+0x21c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_Start+0x1d2>
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_ADC_Start+0x220>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2b09      	cmp	r3, #9
 800299e:	d010      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 80029a0:	e005      	b.n	80029ae <HAL_ADC_Start+0x1de>
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_ADC_Start+0x224>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d009      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_Start+0x1f2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_ADC_Start+0x228>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10f      	bne.n	80029e2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0204 	orr.w	r2, r2, #4
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e006      	b.n	80029e2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029dc:	e001      	b.n	80029e2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	50000100 	.word	0x50000100
 80029f0:	50000300 	.word	0x50000300
 80029f4:	50000700 	.word	0x50000700
 80029f8:	50000400 	.word	0x50000400

080029fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e05f      	b.n	8002af2 <HAL_ADCEx_Calibration_Start+0xdc>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fc9e 	bl	800337c <ADC_Disable>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d14e      	bne.n	8002ae8 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002a5e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a74:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a84:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002a86:	f7ff fcb7 	bl	80023f8 <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a8c:	e01c      	b.n	8002ac8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a8e:	f7ff fcb3 	bl	80023f8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b0a      	cmp	r3, #10
 8002a9a:	d915      	bls.n	8002ac8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f023 0312 	bic.w	r3, r3, #18
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e014      	b.n	8002af2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad6:	d0da      	beq.n	8002a8e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f023 0303 	bic.w	r3, r3, #3
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b09b      	sub	sp, #108	; 0x6c
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x22>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e2c8      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x5b4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 82ac 	bne.w	800308e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d81c      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	461a      	mov	r2, r3
 8002b52:	231f      	movs	r3, #31
 8002b54:	4093      	lsls	r3, r2
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4019      	ands	r1, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
 8002b76:	e063      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	3b1e      	subs	r3, #30
 8002b94:	221f      	movs	r2, #31
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	4019      	ands	r1, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	3b1e      	subs	r3, #30
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbc:	e040      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b0e      	cmp	r3, #14
 8002bc4:	d81e      	bhi.n	8002c04 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	3b3c      	subs	r3, #60	; 0x3c
 8002bda:	221f      	movs	r2, #31
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4019      	ands	r1, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	3b3c      	subs	r3, #60	; 0x3c
 8002bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
 8002c02:	e01d      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	3b5a      	subs	r3, #90	; 0x5a
 8002c18:	221f      	movs	r2, #31
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	4019      	ands	r1, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	3b5a      	subs	r3, #90	; 0x5a
 8002c34:	fa00 f203 	lsl.w	r2, r0, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 80e5 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b09      	cmp	r3, #9
 8002c56:	d91c      	bls.n	8002c92 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	3b1e      	subs	r3, #30
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	4019      	ands	r1, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6898      	ldr	r0, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	3b1e      	subs	r3, #30
 8002c84:	fa00 f203 	lsl.w	r2, r0, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]
 8002c90:	e019      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6959      	ldr	r1, [r3, #20]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4019      	ands	r1, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6898      	ldr	r0, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d84f      	bhi.n	8002d88 <HAL_ADC_ConfigChannel+0x28c>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d23 	.word	0x08002d23
 8002cf8:	08002d45 	.word	0x08002d45
 8002cfc:	08002d67 	.word	0x08002d67
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d06:	4b99      	ldr	r3, [pc, #612]	; (8002f6c <HAL_ADC_ConfigChannel+0x470>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	0691      	lsls	r1, r2, #26
 8002d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d12:	430a      	orrs	r2, r1
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d20:	e07b      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d28:	4b90      	ldr	r3, [pc, #576]	; (8002f6c <HAL_ADC_ConfigChannel+0x470>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	0691      	lsls	r1, r2, #26
 8002d32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d34:	430a      	orrs	r2, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d40:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d42:	e06a      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d4a:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_ADC_ConfigChannel+0x470>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	0691      	lsls	r1, r2, #26
 8002d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d56:	430a      	orrs	r2, r1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d62:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d64:	e059      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d6c:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_ADC_ConfigChannel+0x470>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	0691      	lsls	r1, r2, #26
 8002d76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d84:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d86:	e048      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	069b      	lsls	r3, r3, #26
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d107      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e16:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e18:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d108      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x33e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x33e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x340>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 8131 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d00f      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	400a      	ands	r2, r1
 8002e64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e68:	e049      	b.n	8002efe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d91c      	bls.n	8002ec6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b1b      	subs	r3, #27
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4019      	ands	r1, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6898      	ldr	r0, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b1b      	subs	r3, #27
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	e01b      	b.n	8002efe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6959      	ldr	r1, [r3, #20]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	2207      	movs	r2, #7
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	4019      	ands	r1, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6898      	ldr	r0, [r3, #8]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f06:	d004      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x416>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_ADC_ConfigChannel+0x474>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x41a>
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_ADC_ConfigChannel+0x478>)
 8002f14:	e000      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x41c>
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_ADC_ConfigChannel+0x47c>)
 8002f18:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d105      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f32:	2b11      	cmp	r3, #17
 8002f34:	d105      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f46:	2b12      	cmp	r3, #18
 8002f48:	f040 80ac 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 80a5 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x480>
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_ADC_ConfigChannel+0x474>)
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e023      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4b6>
 8002f6a:	bf00      	nop
 8002f6c:	83fff000 	.word	0x83fff000
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000300 	.word	0x50000300
 8002f78:	50000700 	.word	0x50000700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <HAL_ADC_ConfigChannel+0x5c0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d103      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x492>
 8002f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e011      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4b6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x4a2>
 8002f98:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e009      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4b6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a48      	ldr	r2, [pc, #288]	; (80030c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d102      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x4b2>
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4b6>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x4d6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x4d6>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x4d8>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d150      	bne.n	800307a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x4fe>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x4fe>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x500>
 8002ffa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13c      	bne.n	800307a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d11d      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x548>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003010:	d118      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800301a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_ADC_ConfigChannel+0x5d0>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003042:	e02e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b11      	cmp	r3, #17
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x568>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003054:	d106      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d11a      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003078:	e013      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800308c:	e00a      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	376c      	adds	r7, #108	; 0x6c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	50000100 	.word	0x50000100
 80030c0:	50000400 	.word	0x50000400
 80030c4:	50000500 	.word	0x50000500
 80030c8:	20000000 	.word	0x20000000
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b099      	sub	sp, #100	; 0x64
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e8:	d102      	bne.n	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80030ea:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	e01a      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d103      	bne.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80030fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	e011      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	e009      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	e001      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b0      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0a9      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 808d 	bne.w	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8086 	bne.w	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800316c:	d004      	beq.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800317a:	e000      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800317c:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800317e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d040      	beq.n	800320a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	430b      	orrs	r3, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d15c      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80031e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d14b      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031f4:	f023 030f 	bic.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	6811      	ldr	r1, [r2, #0]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	6892      	ldr	r2, [r2, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003206:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003208:	e03c      	b.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d123      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003258:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d112      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800325e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800326e:	e009      	b.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003282:	e000      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003284:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800328e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003292:	4618      	mov	r0, r3
 8003294:	3764      	adds	r7, #100	; 0x64
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	50000100 	.word	0x50000100
 80032a4:	50000400 	.word	0x50000400
 80032a8:	50000500 	.word	0x50000500
 80032ac:	50000300 	.word	0x50000300
 80032b0:	50000700 	.word	0x50000700

080032b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <ADC_Enable+0x2c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <ADC_Enable+0x2c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <ADC_Enable+0x2e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d143      	bne.n	800336e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b22      	ldr	r3, [pc, #136]	; (8003378 <ADC_Enable+0xc4>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e02f      	b.n	8003370 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003320:	f7ff f86a 	bl	80023f8 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003326:	e01b      	b.n	8003360 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003328:	f7ff f866 	bl	80023f8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d914      	bls.n	8003360 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d00d      	beq.n	8003360 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d1dc      	bne.n	8003328 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	8000003f 	.word	0x8000003f

0800337c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d108      	bne.n	80033a8 <ADC_Disable+0x2c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <ADC_Disable+0x2c>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <ADC_Disable+0x2e>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d047      	beq.n	800343e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030d 	and.w	r3, r3, #13
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10f      	bne.n	80033dc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0202 	orr.w	r2, r2, #2
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2203      	movs	r2, #3
 80033d2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033d4:	f7ff f810 	bl	80023f8 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033da:	e029      	b.n	8003430 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e023      	b.n	8003440 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f8:	f7fe fffe 	bl	80023f8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d914      	bls.n	8003430 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10d      	bne.n	8003430 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d0dc      	beq.n	80033f8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0ed      	b.n	8003636 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fdc6 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347c:	f7fe ffbc 	bl	80023f8 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003482:	e012      	b.n	80034aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003484:	f7fe ffb8 	bl	80023f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d90b      	bls.n	80034aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0c5      	b.n	8003636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0e5      	beq.n	8003484 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0202 	bic.w	r2, r2, #2
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7fe ff96 	bl	80023f8 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ce:	e012      	b.n	80034f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d0:	f7fe ff92 	bl	80023f8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b0a      	cmp	r3, #10
 80034dc:	d90b      	bls.n	80034f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e09f      	b.n	8003636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e5b      	ldrb	r3, [r3, #25]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d108      	bne.n	8003548 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7e9b      	ldrb	r3, [r3, #26]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d108      	bne.n	8003572 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e007      	b.n	8003582 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0220 	bic.w	r2, r2, #32
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7edb      	ldrb	r3, [r3, #27]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0210 	bic.w	r2, r2, #16
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e007      	b.n	80035ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0210 	orr.w	r2, r2, #16
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7f1b      	ldrb	r3, [r3, #28]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d108      	bne.n	80035c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e007      	b.n	80035d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0208 	bic.w	r2, r2, #8
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f5b      	ldrb	r3, [r3, #29]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0204 	orr.w	r2, r2, #4
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003654:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d003      	beq.n	8003664 <HAL_CAN_ConfigFilter+0x26>
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	2b02      	cmp	r3, #2
 8003660:	f040 80aa 	bne.w	80037b8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d123      	bne.n	80036e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	401a      	ands	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3248      	adds	r2, #72	; 0x48
 80036c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036dc:	6979      	ldr	r1, [r7, #20]
 80036de:	3348      	adds	r3, #72	; 0x48
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d122      	bne.n	8003734 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800370e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3248      	adds	r2, #72	; 0x48
 8003714:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003728:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	3348      	adds	r3, #72	; 0x48
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800374e:	e007      	b.n	8003760 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	431a      	orrs	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800377a:	e007      	b.n	800378c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	431a      	orrs	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	431a      	orrs	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e006      	b.n	80037c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d12e      	bne.n	8003844 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037fe:	f7fe fdfb 	bl	80023f8 <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003804:	e012      	b.n	800382c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003806:	f7fe fdf7 	bl	80023f8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b0a      	cmp	r3, #10
 8003812:	d90b      	bls.n	800382c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2205      	movs	r2, #5
 8003824:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e012      	b.n	8003852 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e5      	bne.n	8003806 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e006      	b.n	8003852 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800385a:	b480      	push	{r7}
 800385c:	b089      	sub	sp, #36	; 0x24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d003      	beq.n	8003886 <HAL_CAN_AddTxMessage+0x2c>
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b02      	cmp	r3, #2
 8003882:	f040 80ad 	bne.w	80039e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8095 	beq.w	80039d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038b0:	2201      	movs	r2, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	409a      	lsls	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	6809      	ldr	r1, [r1, #0]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	3318      	adds	r3, #24
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	440b      	add	r3, r1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e00f      	b.n	80038fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3318      	adds	r3, #24
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	440b      	add	r3, r1
 80038fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3318      	adds	r3, #24
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	440b      	add	r3, r1
 800390e:	3304      	adds	r3, #4
 8003910:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	7d1b      	ldrb	r3, [r3, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d111      	bne.n	800393e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3318      	adds	r3, #24
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	4413      	add	r3, r2
 8003926:	3304      	adds	r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3318      	adds	r3, #24
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	440b      	add	r3, r1
 800393a:	3304      	adds	r3, #4
 800393c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3307      	adds	r3, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	061a      	lsls	r2, r3, #24
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3306      	adds	r3, #6
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3305      	adds	r3, #5
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	4313      	orrs	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	3204      	adds	r2, #4
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	4610      	mov	r0, r2
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	ea43 0200 	orr.w	r2, r3, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	440b      	add	r3, r1
 8003970:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003974:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3303      	adds	r3, #3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	061a      	lsls	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3302      	adds	r3, #2
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3301      	adds	r3, #1
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	4313      	orrs	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	4610      	mov	r0, r2
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	6811      	ldr	r1, [r2, #0]
 800399c:	ea43 0200 	orr.w	r2, r3, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80039aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3318      	adds	r3, #24
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4413      	add	r3, r2
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6811      	ldr	r1, [r2, #0]
 80039be:	f043 0201 	orr.w	r2, r3, #1
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3318      	adds	r3, #24
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	440b      	add	r3, r1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e00e      	b.n	80039ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e006      	b.n	80039ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d002      	beq.n	8003a1a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003a14:	7afb      	ldrb	r3, [r7, #11]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d11d      	bne.n	8003a56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a78:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d003      	beq.n	8003a88 <HAL_CAN_GetRxMessage+0x24>
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	f040 8103 	bne.w	8003c8e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0f7      	b.n	8003c9c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e8      	b.n	8003c9c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	331b      	adds	r3, #27
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0204 	and.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	331b      	adds	r3, #27
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	4413      	add	r3, r2
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0d5b      	lsrs	r3, r3, #21
 8003af8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e00b      	b.n	8003b1a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	331b      	adds	r3, #27
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	4413      	add	r3, r2
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	331b      	adds	r3, #27
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0202 	and.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	331b      	adds	r3, #27
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	611a      	str	r2, [r3, #16]
 8003b4e:	e00b      	b.n	8003b68 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	331b      	adds	r3, #27
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	331b      	adds	r3, #27
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	331b      	adds	r3, #27
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0a1a      	lsrs	r2, r3, #8
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0c1a      	lsrs	r2, r3, #16
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0e1a      	lsrs	r2, r3, #24
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3303      	adds	r3, #3
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0a1a      	lsrs	r2, r3, #8
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3305      	adds	r3, #5
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0c1a      	lsrs	r2, r3, #16
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3306      	adds	r3, #6
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	0e1a      	lsrs	r2, r3, #24
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3307      	adds	r3, #7
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0220 	orr.w	r2, r2, #32
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	e007      	b.n	8003c8a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e006      	b.n	8003c9c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d002      	beq.n	8003cc6 <HAL_CAN_ActivateNotification+0x1e>
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d109      	bne.n	8003cda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6959      	ldr	r1, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e006      	b.n	8003ce8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d07c      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d023      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f983 	bl	8004062 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d5c:	e016      	b.n	8003d8c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e00c      	b.n	8003d8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	e002      	b.n	8003d8c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f989 	bl	800409e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f963 	bl	8004076 <HAL_CAN_TxMailbox1CompleteCallback>
 8003db0:	e016      	b.n	8003de0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e00c      	b.n	8003de0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	e002      	b.n	8003de0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f969 	bl	80040b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d024      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003df2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f943 	bl	800408a <HAL_CAN_TxMailbox2CompleteCallback>
 8003e04:	e016      	b.n	8003e34 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	e00c      	b.n	8003e34 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	e002      	b.n	8003e34 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f949 	bl	80040c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2210      	movs	r2, #16
 8003e56:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2208      	movs	r2, #8
 8003e72:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f930 	bl	80040da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fb42 	bl	800151c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f912 	bl	8004102 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8f9 	bl	80040ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2210      	movs	r2, #16
 8003f16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8fc 	bl	8004116 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2208      	movs	r2, #8
 8003f38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8f5 	bl	800412a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d07b      	beq.n	8004042 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d072      	beq.n	800403a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d043      	beq.n	800403a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d03e      	beq.n	800403a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fc2:	2b60      	cmp	r3, #96	; 0x60
 8003fc4:	d02b      	beq.n	800401e <HAL_CAN_IRQHandler+0x32a>
 8003fc6:	2b60      	cmp	r3, #96	; 0x60
 8003fc8:	d82e      	bhi.n	8004028 <HAL_CAN_IRQHandler+0x334>
 8003fca:	2b50      	cmp	r3, #80	; 0x50
 8003fcc:	d022      	beq.n	8004014 <HAL_CAN_IRQHandler+0x320>
 8003fce:	2b50      	cmp	r3, #80	; 0x50
 8003fd0:	d82a      	bhi.n	8004028 <HAL_CAN_IRQHandler+0x334>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d019      	beq.n	800400a <HAL_CAN_IRQHandler+0x316>
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d826      	bhi.n	8004028 <HAL_CAN_IRQHandler+0x334>
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d010      	beq.n	8004000 <HAL_CAN_IRQHandler+0x30c>
 8003fde:	2b30      	cmp	r3, #48	; 0x30
 8003fe0:	d822      	bhi.n	8004028 <HAL_CAN_IRQHandler+0x334>
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d002      	beq.n	8003fec <HAL_CAN_IRQHandler+0x2f8>
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d005      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003fea:	e01d      	b.n	8004028 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f043 0308 	orr.w	r3, r3, #8
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ff4:	e019      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	f043 0310 	orr.w	r3, r3, #16
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ffe:	e014      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004008:	e00f      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004012:	e00a      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800401c:	e005      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004026:	e000      	b.n	800402a <HAL_CAN_IRQHandler+0x336>
            break;
 8004028:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004038:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2204      	movs	r2, #4
 8004040:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f872 	bl	800413e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800405a:	bf00      	nop
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800417c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004186:	4a04      	ldr	r2, [pc, #16]	; (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	60d3      	str	r3, [r2, #12]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <__NVIC_GetPriorityGrouping+0x18>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	f003 0307 	and.w	r3, r3, #7
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	db0b      	blt.n	80041e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	4907      	ldr	r1, [pc, #28]	; (80041f0 <__NVIC_EnableIRQ+0x38>)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2001      	movs	r0, #1
 80041da:	fa00 f202 	lsl.w	r2, r0, r2
 80041de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	; (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
         );
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c0:	d301      	bcc.n	80042c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00f      	b.n	80042e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <SysTick_Config+0x40>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ce:	210f      	movs	r1, #15
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f7ff ff8e 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <SysTick_Config+0x40>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <SysTick_Config+0x40>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010

080042f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff29 	bl	8004154 <__NVIC_SetPriorityGrouping>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800431c:	f7ff ff3e 	bl	800419c <__NVIC_GetPriorityGrouping>
 8004320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff ff8e 	bl	8004248 <NVIC_EncodePriority>
 800432c:	4602      	mov	r2, r0
 800432e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff5d 	bl	80041f4 <__NVIC_SetPriority>
}
 800433a:	bf00      	nop
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	4603      	mov	r3, r0
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff31 	bl	80041b8 <__NVIC_EnableIRQ>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ffa2 	bl	80042b0 <SysTick_Config>
 800436c:	4603      	mov	r3, r0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e037      	b.n	80043fc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9b8 	bl	8004754 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}  
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_DMA_Start_IT+0x20>
 8004420:	2302      	movs	r3, #2
 8004422:	e04a      	b.n	80044ba <HAL_DMA_Start_IT+0xb6>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004432:	2b01      	cmp	r3, #1
 8004434:	d13a      	bne.n	80044ac <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f94b 	bl	80046f6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 020e 	orr.w	r2, r2, #14
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e00f      	b.n	800449a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 020a 	orr.w	r2, r2, #10
 8004488:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0204 	bic.w	r2, r2, #4
 8004498:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e005      	b.n	80044b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
 80044b6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d008      	beq.n	80044e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2204      	movs	r2, #4
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e020      	b.n	8004528 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 020e 	bic.w	r2, r2, #14
 80044f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004546:	2b02      	cmp	r3, #2
 8004548:	d005      	beq.n	8004556 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e027      	b.n	80045a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 020e 	bic.w	r2, r2, #14
 8004564:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2101      	movs	r1, #1
 8004580:	fa01 f202 	lsl.w	r2, r1, r2
 8004584:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
    } 
  }
  return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	2204      	movs	r2, #4
 80045ce:	409a      	lsls	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d024      	beq.n	8004622 <HAL_DMA_IRQHandler+0x72>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01f      	beq.n	8004622 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0204 	bic.w	r2, r2, #4
 80045fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	2104      	movs	r1, #4
 800460a:	fa01 f202 	lsl.w	r2, r1, r2
 800460e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d06a      	beq.n	80046ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004620:	e065      	b.n	80046ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2202      	movs	r2, #2
 8004628:	409a      	lsls	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02c      	beq.n	800468c <HAL_DMA_IRQHandler+0xdc>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d027      	beq.n	800468c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 020a 	bic.w	r2, r2, #10
 8004658:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	2102      	movs	r1, #2
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d035      	beq.n	80046ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800468a:	e030      	b.n	80046ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2208      	movs	r2, #8
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d028      	beq.n	80046ee <HAL_DMA_IRQHandler+0x13e>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d023      	beq.n	80046ee <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 020e 	bic.w	r2, r2, #14
 80046b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f202 	lsl.w	r2, r1, r2
 80046c4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
    }
  }
}  
 80046ec:	e7ff      	b.n	80046ee <HAL_DMA_IRQHandler+0x13e>
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f202 	lsl.w	r2, r1, r2
 8004712:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b10      	cmp	r3, #16
 8004722:	d108      	bne.n	8004736 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004734:	e007      	b.n	8004746 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <DMA_CalcBaseAndBitshift+0x60>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d80f      	bhi.n	8004788 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004770:	4413      	add	r3, r2
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <DMA_CalcBaseAndBitshift+0x68>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004786:	e00e      	b.n	80047a6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <DMA_CalcBaseAndBitshift+0x70>)
 8004790:	4413      	add	r3, r2
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <DMA_CalcBaseAndBitshift+0x68>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <DMA_CalcBaseAndBitshift+0x74>)
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40020407 	.word	0x40020407
 80047b8:	bffdfff8 	.word	0xbffdfff8
 80047bc:	cccccccd 	.word	0xcccccccd
 80047c0:	40020000 	.word	0x40020000
 80047c4:	bffdfbf8 	.word	0xbffdfbf8
 80047c8:	40020400 	.word	0x40020400

080047cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047da:	e154      	b.n	8004a86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	4013      	ands	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8146 	beq.w	8004a80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d005      	beq.n	800480c <HAL_GPIO_Init+0x40>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d130      	bne.n	800486e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004842:	2201      	movs	r2, #1
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0201 	and.w	r2, r3, #1
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d017      	beq.n	80048aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	2203      	movs	r2, #3
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d123      	bne.n	80048fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	220f      	movs	r2, #15
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	6939      	ldr	r1, [r7, #16]
 80048fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0203 	and.w	r2, r3, #3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a0 	beq.w	8004a80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004940:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_GPIO_Init+0x2d8>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4a57      	ldr	r2, [pc, #348]	; (8004aa4 <HAL_GPIO_Init+0x2d8>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6193      	str	r3, [r2, #24]
 800494c:	4b55      	ldr	r3, [pc, #340]	; (8004aa4 <HAL_GPIO_Init+0x2d8>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004958:	4a53      	ldr	r2, [pc, #332]	; (8004aa8 <HAL_GPIO_Init+0x2dc>)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	3302      	adds	r3, #2
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004982:	d019      	beq.n	80049b8 <HAL_GPIO_Init+0x1ec>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a49      	ldr	r2, [pc, #292]	; (8004aac <HAL_GPIO_Init+0x2e0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_GPIO_Init+0x1e8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a48      	ldr	r2, [pc, #288]	; (8004ab0 <HAL_GPIO_Init+0x2e4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00d      	beq.n	80049b0 <HAL_GPIO_Init+0x1e4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a47      	ldr	r2, [pc, #284]	; (8004ab4 <HAL_GPIO_Init+0x2e8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <HAL_GPIO_Init+0x1e0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <HAL_GPIO_Init+0x2ec>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_GPIO_Init+0x1dc>
 80049a4:	2304      	movs	r3, #4
 80049a6:	e008      	b.n	80049ba <HAL_GPIO_Init+0x1ee>
 80049a8:	2305      	movs	r3, #5
 80049aa:	e006      	b.n	80049ba <HAL_GPIO_Init+0x1ee>
 80049ac:	2303      	movs	r3, #3
 80049ae:	e004      	b.n	80049ba <HAL_GPIO_Init+0x1ee>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e002      	b.n	80049ba <HAL_GPIO_Init+0x1ee>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_GPIO_Init+0x1ee>
 80049b8:	2300      	movs	r3, #0
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	f002 0203 	and.w	r2, r2, #3
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4093      	lsls	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ca:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_GPIO_Init+0x2dc>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d8:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049fc:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a02:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a50:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <HAL_GPIO_Init+0x2f0>)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f aea3 	bne.w	80047dc <HAL_GPIO_Init+0x10>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	48000400 	.word	0x48000400
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	48000c00 	.word	0x48000c00
 8004ab8:	48001000 	.word	0x48001000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e001      	b.n	8004ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b0c:	e002      	b.n	8004b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f001 b823 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 817d 	beq.w	8004e56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b5c:	4bbc      	ldr	r3, [pc, #752]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b68:	4bb9      	ldr	r3, [pc, #740]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d15c      	bne.n	8004c2e <HAL_RCC_OscConfig+0x10e>
 8004b74:	4bb6      	ldr	r3, [pc, #728]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d155      	bne.n	8004c2e <HAL_RCC_OscConfig+0x10e>
 8004b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x94>
 8004bae:	4ba8      	ldr	r3, [pc, #672]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	e015      	b.n	8004be0 <HAL_RCC_OscConfig+0xc0>
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004bd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004bdc:	4b9c      	ldr	r3, [pc, #624]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004bec:	fa92 f2a2 	rbit	r2, r2
 8004bf0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004bf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004bf8:	fab2 f282 	clz	r2, r2
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f042 0220 	orr.w	r2, r2, #32
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	f002 021f 	and.w	r2, r2, #31
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 811f 	beq.w	8004e54 <HAL_RCC_OscConfig+0x334>
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 8116 	bne.w	8004e54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f000 bfaf 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12e>
 8004c40:	4b83      	ldr	r3, [pc, #524]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a82      	ldr	r2, [pc, #520]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	e036      	b.n	8004cbc <HAL_RCC_OscConfig+0x19c>
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x158>
 8004c5e:	4b7c      	ldr	r3, [pc, #496]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7b      	ldr	r2, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4b79      	ldr	r3, [pc, #484]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a78      	ldr	r2, [pc, #480]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e021      	b.n	8004cbc <HAL_RCC_OscConfig+0x19c>
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x184>
 8004c8a:	4b71      	ldr	r3, [pc, #452]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a70      	ldr	r2, [pc, #448]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b6e      	ldr	r3, [pc, #440]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6d      	ldr	r2, [pc, #436]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0x19c>
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a69      	ldr	r2, [pc, #420]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b67      	ldr	r3, [pc, #412]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a66      	ldr	r2, [pc, #408]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cbc:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f023 020f 	bic.w	r2, r3, #15
 8004cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	495f      	ldr	r1, [pc, #380]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d059      	beq.n	8004d9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fb87 	bl	80023f8 <HAL_GetTick>
 8004cea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fb82 	bl	80023f8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b64      	cmp	r3, #100	; 0x64
 8004cfe:	d902      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	f000 bf43 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 8004d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d102      	bne.n	8004d38 <HAL_RCC_OscConfig+0x218>
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	e015      	b.n	8004d64 <HAL_RCC_OscConfig+0x244>
 8004d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d60:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004d6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d70:	fa92 f2a2 	rbit	r2, r2
 8004d74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004d78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004d7c:	fab2 f282 	clz	r2, r2
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f042 0220 	orr.w	r2, r2, #32
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	f002 021f 	and.w	r2, r2, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ab      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x1d0>
 8004d98:	e05d      	b.n	8004e56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fd fb2d 	bl	80023f8 <HAL_GetTick>
 8004d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fd fb28 	bl	80023f8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b64      	cmp	r3, #100	; 0x64
 8004db2:	d902      	bls.n	8004dba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	f000 bee9 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 8004dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d102      	bne.n	8004dec <HAL_RCC_OscConfig+0x2cc>
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	e015      	b.n	8004e18 <HAL_RCC_OscConfig+0x2f8>
 8004dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <HAL_RCC_OscConfig+0x330>)
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004e20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e24:	fa92 f2a2 	rbit	r2, r2
 8004e28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004e2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004e30:	fab2 f282 	clz	r2, r2
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	f042 0220 	orr.w	r2, r2, #32
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	f002 021f 	and.w	r2, r2, #31
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f202 	lsl.w	r2, r1, r2
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ab      	bne.n	8004da4 <HAL_RCC_OscConfig+0x284>
 8004e4c:	e003      	b.n	8004e56 <HAL_RCC_OscConfig+0x336>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 817d 	beq.w	8005166 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e6c:	4ba6      	ldr	r3, [pc, #664]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e78:	4ba3      	ldr	r3, [pc, #652]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d172      	bne.n	8004f6a <HAL_RCC_OscConfig+0x44a>
 8004e84:	4ba0      	ldr	r3, [pc, #640]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d16c      	bne.n	8004f6a <HAL_RCC_OscConfig+0x44a>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ea2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	fab3 f383 	clz	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3a0>
 8004eba:	4b93      	ldr	r3, [pc, #588]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	e013      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c8>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ed8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ee4:	4b88      	ldr	r3, [pc, #544]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004eee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ef2:	fa92 f2a2 	rbit	r2, r2
 8004ef6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004efa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004efe:	fab2 f282 	clz	r2, r2
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	f042 0220 	orr.w	r2, r2, #32
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	f002 021f 	and.w	r2, r2, #31
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f202 	lsl.w	r2, r1, r2
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCC_OscConfig+0x410>
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f000 be2e 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f30:	4b75      	ldr	r3, [pc, #468]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	21f8      	movs	r1, #248	; 0xf8
 8004f46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f4e:	fa91 f1a1 	rbit	r1, r1
 8004f52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004f56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004f5a:	fab1 f181 	clz	r1, r1
 8004f5e:	b2c9      	uxtb	r1, r1
 8004f60:	408b      	lsls	r3, r1
 8004f62:	4969      	ldr	r1, [pc, #420]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f68:	e0fd      	b.n	8005166 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8088 	beq.w	800508c <HAL_RCC_OscConfig+0x56c>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004f8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fd fa26 	bl	80023f8 <HAL_GetTick>
 8004fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb2:	f7fd fa21 	bl	80023f8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d902      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	f000 bde2 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d102      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4d8>
 8004ff2:	4b45      	ldr	r3, [pc, #276]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	e013      	b.n	8005020 <HAL_RCC_OscConfig+0x500>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005002:	fa93 f3a3 	rbit	r3, r3
 8005006:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800500a:	2302      	movs	r3, #2
 800500c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005010:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800501c:	4b3a      	ldr	r3, [pc, #232]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2202      	movs	r2, #2
 8005022:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005026:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800502a:	fa92 f2a2 	rbit	r2, r2
 800502e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005032:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005036:	fab2 f282 	clz	r2, r2
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	f002 021f 	and.w	r2, r2, #31
 8005046:	2101      	movs	r1, #1
 8005048:	fa01 f202 	lsl.w	r2, r1, r2
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0af      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005052:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	21f8      	movs	r1, #248	; 0xf8
 8005068:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005070:	fa91 f1a1 	rbit	r1, r1
 8005074:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005078:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800507c:	fab1 f181 	clz	r1, r1
 8005080:	b2c9      	uxtb	r1, r1
 8005082:	408b      	lsls	r3, r1
 8005084:	4920      	ldr	r1, [pc, #128]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
 800508a:	e06c      	b.n	8005166 <HAL_RCC_OscConfig+0x646>
 800508c:	2301      	movs	r3, #1
 800508e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800509e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fd f99e 	bl	80023f8 <HAL_GetTick>
 80050bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fd f999 	bl	80023f8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	f000 bd5a 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 80050d8:	2302      	movs	r3, #2
 80050da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d104      	bne.n	800510c <HAL_RCC_OscConfig+0x5ec>
 8005102:	4b01      	ldr	r3, [pc, #4]	; (8005108 <HAL_RCC_OscConfig+0x5e8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	e015      	b.n	8005134 <HAL_RCC_OscConfig+0x614>
 8005108:	40021000 	.word	0x40021000
 800510c:	2302      	movs	r3, #2
 800510e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800511e:	2302      	movs	r3, #2
 8005120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005130:	4bc8      	ldr	r3, [pc, #800]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2202      	movs	r2, #2
 8005136:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800513a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800513e:	fa92 f2a2 	rbit	r2, r2
 8005142:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005146:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800514a:	fab2 f282 	clz	r2, r2
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	f042 0220 	orr.w	r2, r2, #32
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	f002 021f 	and.w	r2, r2, #31
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ad      	bne.n	80050c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8110 	beq.w	800539c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800517c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d079      	beq.n	8005280 <HAL_RCC_OscConfig+0x760>
 800518c:	2301      	movs	r3, #1
 800518e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005192:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005196:	fa93 f3a3 	rbit	r3, r3
 800519a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	4bab      	ldr	r3, [pc, #684]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	2301      	movs	r3, #1
 80051b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fd f91f 	bl	80023f8 <HAL_GetTick>
 80051ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fd f91a 	bl	80023f8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d902      	bls.n	80051d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	f000 bcdb 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 80051d6:	2302      	movs	r3, #2
 80051d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051e0:	fa93 f3a3 	rbit	r3, r3
 80051e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051f0:	2202      	movs	r2, #2
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	fa93 f2a3 	rbit	r2, r3
 8005202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	fa93 f2a3 	rbit	r2, r3
 8005226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800522e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005230:	4b88      	ldr	r3, [pc, #544]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 8005232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005238:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800523c:	2102      	movs	r1, #2
 800523e:	6019      	str	r1, [r3, #0]
 8005240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005244:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	fa93 f1a3 	rbit	r1, r3
 800524e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005252:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005256:	6019      	str	r1, [r3, #0]
  return result;
 8005258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2101      	movs	r1, #1
 8005274:	fa01 f303 	lsl.w	r3, r1, r3
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0a0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x6a0>
 800527e:	e08d      	b.n	800539c <HAL_RCC_OscConfig+0x87c>
 8005280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	fa93 f2a3 	rbit	r2, r3
 800529a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052a2:	601a      	str	r2, [r3, #0]
  return result;
 80052a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b68      	ldr	r3, [pc, #416]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c2:	f7fd f899 	bl	80023f8 <HAL_GetTick>
 80052c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fd f894 	bl	80023f8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d902      	bls.n	80052e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	f000 bc55 	b.w	8005b8c <HAL_RCC_OscConfig+0x106c>
 80052e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052ea:	2202      	movs	r2, #2
 80052ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	fa93 f2a3 	rbit	r2, r3
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800530e:	2202      	movs	r2, #2
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005316:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	fa93 f2a3 	rbit	r2, r3
 8005320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005332:	2202      	movs	r2, #2
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	fa93 f2a3 	rbit	r2, r3
 8005344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005348:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800534c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800534e:	4b41      	ldr	r3, [pc, #260]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 8005350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005356:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800535a:	2102      	movs	r1, #2
 800535c:	6019      	str	r1, [r3, #0]
 800535e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005362:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fa93 f1a3 	rbit	r1, r3
 800536c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005370:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005374:	6019      	str	r1, [r3, #0]
  return result;
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2101      	movs	r1, #1
 8005392:	fa01 f303 	lsl.w	r3, r1, r3
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d197      	bne.n	80052cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800539c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 81a1 	beq.w	80056f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b8:	4b26      	ldr	r3, [pc, #152]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ce:	61d3      	str	r3, [r2, #28]
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80053d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80053ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCC_OscConfig+0x93c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d11a      	bne.n	8005434 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_RCC_OscConfig+0x93c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_RCC_OscConfig+0x93c>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540a:	f7fc fff5 	bl	80023f8 <HAL_GetTick>
 800540e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005412:	e009      	b.n	8005428 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005414:	f7fc fff0 	bl	80023f8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e3b1      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_RCC_OscConfig+0x93c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ef      	beq.n	8005414 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10d      	bne.n	8005460 <HAL_RCC_OscConfig+0x940>
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	4a02      	ldr	r2, [pc, #8]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6213      	str	r3, [r2, #32]
 8005450:	e03c      	b.n	80054cc <HAL_RCC_OscConfig+0x9ac>
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	10908120 	.word	0x10908120
 800545c:	40007000 	.word	0x40007000
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <HAL_RCC_OscConfig+0x96a>
 8005470:	4bc1      	ldr	r3, [pc, #772]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	4ac0      	ldr	r2, [pc, #768]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	6213      	str	r3, [r2, #32]
 800547c:	4bbe      	ldr	r3, [pc, #760]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4abd      	ldr	r2, [pc, #756]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	6213      	str	r3, [r2, #32]
 8005488:	e020      	b.n	80054cc <HAL_RCC_OscConfig+0x9ac>
 800548a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b05      	cmp	r3, #5
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x994>
 800549a:	4bb7      	ldr	r3, [pc, #732]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	4ab6      	ldr	r2, [pc, #728]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054a0:	f043 0304 	orr.w	r3, r3, #4
 80054a4:	6213      	str	r3, [r2, #32]
 80054a6:	4bb4      	ldr	r3, [pc, #720]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4ab3      	ldr	r2, [pc, #716]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6213      	str	r3, [r2, #32]
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0x9ac>
 80054b4:	4bb0      	ldr	r3, [pc, #704]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4aaf      	ldr	r2, [pc, #700]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	6213      	str	r3, [r2, #32]
 80054c0:	4bad      	ldr	r3, [pc, #692]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4aac      	ldr	r2, [pc, #688]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8081 	beq.w	80055e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054de:	f7fc ff8b 	bl	80023f8 <HAL_GetTick>
 80054e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	e00b      	b.n	8005500 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e8:	f7fc ff86 	bl	80023f8 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e345      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
 8005500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005504:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005508:	2202      	movs	r2, #2
 800550a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800552c:	2202      	movs	r2, #2
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	fa93 f2a3 	rbit	r2, r3
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005546:	601a      	str	r2, [r3, #0]
  return result;
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005550:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d102      	bne.n	800556c <HAL_RCC_OscConfig+0xa4c>
 8005566:	4b84      	ldr	r3, [pc, #528]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	e013      	b.n	8005594 <HAL_RCC_OscConfig+0xa74>
 800556c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005570:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005574:	2202      	movs	r2, #2
 8005576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	fa93 f2a3 	rbit	r2, r3
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	4b79      	ldr	r3, [pc, #484]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005598:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800559c:	2102      	movs	r1, #2
 800559e:	6011      	str	r1, [r2, #0]
 80055a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	fa92 f1a2 	rbit	r1, r2
 80055ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055b6:	6011      	str	r1, [r2, #0]
  return result;
 80055b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	fab2 f282 	clz	r2, r2
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	f002 021f 	and.w	r2, r2, #31
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f202 	lsl.w	r2, r1, r2
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d084      	beq.n	80054e8 <HAL_RCC_OscConfig+0x9c8>
 80055de:	e07f      	b.n	80056e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e0:	f7fc ff0a 	bl	80023f8 <HAL_GetTick>
 80055e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e8:	e00b      	b.n	8005602 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fc ff05 	bl	80023f8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e2c4      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800560a:	2202      	movs	r2, #2
 800560c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005612:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	fa93 f2a3 	rbit	r2, r3
 800561c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005620:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800562e:	2202      	movs	r2, #2
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005636:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	fa93 f2a3 	rbit	r2, r3
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005648:	601a      	str	r2, [r3, #0]
  return result;
 800564a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	b2db      	uxtb	r3, r3
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f043 0302 	orr.w	r3, r3, #2
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d102      	bne.n	800566e <HAL_RCC_OscConfig+0xb4e>
 8005668:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	e013      	b.n	8005696 <HAL_RCC_OscConfig+0xb76>
 800566e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005672:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005676:	2202      	movs	r2, #2
 8005678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	fa93 f2a3 	rbit	r2, r3
 8005688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	4b39      	ldr	r3, [pc, #228]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800569a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800569e:	2102      	movs	r1, #2
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	fa92 f1a2 	rbit	r1, r2
 80056b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056b8:	6011      	str	r1, [r2, #0]
  return result;
 80056ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	fab2 f282 	clz	r2, r2
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f002 021f 	and.w	r2, r2, #31
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f202 	lsl.w	r2, r1, r2
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d184      	bne.n	80055ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d105      	bne.n	80056f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e8:	4b23      	ldr	r3, [pc, #140]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 80056ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8242 	beq.w	8005b8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_RCC_OscConfig+0xc58>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b08      	cmp	r3, #8
 8005710:	f000 8213 	beq.w	8005b3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b02      	cmp	r3, #2
 8005722:	f040 8162 	bne.w	80059ea <HAL_RCC_OscConfig+0xeca>
 8005726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800572e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	fa93 f2a3 	rbit	r2, r3
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800574a:	601a      	str	r2, [r3, #0]
  return result;
 800574c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005750:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005754:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	461a      	mov	r2, r3
 8005768:	2300      	movs	r3, #0
 800576a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fc fe44 	bl	80023f8 <HAL_GetTick>
 8005770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005774:	e00c      	b.n	8005790 <HAL_RCC_OscConfig+0xc70>
 8005776:	bf00      	nop
 8005778:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fc fe3c 	bl	80023f8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1fd      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
 8005790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005794:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800579c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	fa93 f2a3 	rbit	r2, r3
 80057ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057b4:	601a      	str	r2, [r3, #0]
  return result;
 80057b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d102      	bne.n	80057da <HAL_RCC_OscConfig+0xcba>
 80057d4:	4bb0      	ldr	r3, [pc, #704]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	e027      	b.n	800582a <HAL_RCC_OscConfig+0xd0a>
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fa93 f2a3 	rbit	r2, r3
 80057f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005804:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005812:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	fa93 f2a3 	rbit	r2, r3
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	4b9c      	ldr	r3, [pc, #624]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800582e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005832:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005836:	6011      	str	r1, [r2, #0]
 8005838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800583c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	fa92 f1a2 	rbit	r1, r2
 8005846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800584a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800584e:	6011      	str	r1, [r2, #0]
  return result;
 8005850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005854:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	fab2 f282 	clz	r2, r2
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f042 0220 	orr.w	r2, r2, #32
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	f002 021f 	and.w	r2, r2, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f202 	lsl.w	r2, r1, r2
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d182      	bne.n	800577c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005876:	4b88      	ldr	r3, [pc, #544]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800587e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800588a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	430b      	orrs	r3, r1
 8005898:	497f      	ldr	r1, [pc, #508]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80058a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	fa93 f2a3 	rbit	r2, r3
 80058ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80058c2:	601a      	str	r2, [r3, #0]
  return result;
 80058c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80058cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ce:	fab3 f383 	clz	r3, r3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	461a      	mov	r2, r3
 80058e0:	2301      	movs	r3, #1
 80058e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fc fd88 	bl	80023f8 <HAL_GetTick>
 80058e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ec:	e009      	b.n	8005902 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fc fd83 	bl	80023f8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e144      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
 8005902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005906:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800590a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800590e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005914:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	fa93 f2a3 	rbit	r2, r3
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005926:	601a      	str	r2, [r3, #0]
  return result;
 8005928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d102      	bne.n	800594c <HAL_RCC_OscConfig+0xe2c>
 8005946:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	e027      	b.n	800599c <HAL_RCC_OscConfig+0xe7c>
 800594c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005950:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	fa93 f2a3 	rbit	r2, r3
 8005968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005976:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800597a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005984:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	fa93 f2a3 	rbit	r2, r3
 800598e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005992:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80059a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	fa92 f1a2 	rbit	r1, r2
 80059b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80059c0:	6011      	str	r1, [r2, #0]
  return result;
 80059c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	fab2 f282 	clz	r2, r2
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	f042 0220 	orr.w	r2, r2, #32
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	f002 021f 	and.w	r2, r2, #31
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f202 	lsl.w	r2, r1, r2
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d082      	beq.n	80058ee <HAL_RCC_OscConfig+0xdce>
 80059e8:	e0cf      	b.n	8005b8a <HAL_RCC_OscConfig+0x106a>
 80059ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80059f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	fa93 f2a3 	rbit	r2, r3
 8005a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a0e:	601a      	str	r2, [r3, #0]
  return result;
 8005a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1a:	fab3 f383 	clz	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fc fce2 	bl	80023f8 <HAL_GetTick>
 8005a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a38:	e009      	b.n	8005a4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fc fcdd 	bl	80023f8 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e09e      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
 8005a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	fa93 f2a3 	rbit	r2, r3
 8005a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a72:	601a      	str	r2, [r3, #0]
  return result;
 8005a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7e:	fab3 f383 	clz	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d104      	bne.n	8005a9c <HAL_RCC_OscConfig+0xf7c>
 8005a92:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <HAL_RCC_OscConfig+0xf78>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	e029      	b.n	8005aec <HAL_RCC_OscConfig+0xfcc>
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	fa93 f2a3 	rbit	r2, r3
 8005ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	fa93 f2a3 	rbit	r2, r3
 8005ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <HAL_RCC_OscConfig+0x1078>)
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005afe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	fa92 f1a2 	rbit	r1, r2
 8005b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b10:	6011      	str	r1, [r2, #0]
  return result;
 8005b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	fab2 f282 	clz	r2, r2
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	f042 0220 	orr.w	r2, r2, #32
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	f002 021f 	and.w	r2, r2, #31
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d180      	bne.n	8005a3a <HAL_RCC_OscConfig+0xf1a>
 8005b38:	e027      	b.n	8005b8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e01e      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_OscConfig+0x1078>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10b      	bne.n	8005b86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000

08005b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b09e      	sub	sp, #120	; 0x78
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e162      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b90      	ldr	r3, [pc, #576]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d910      	bls.n	8005be4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b8d      	ldr	r3, [pc, #564]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 0207 	bic.w	r2, r3, #7
 8005bca:	498b      	ldr	r1, [pc, #556]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b89      	ldr	r3, [pc, #548]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e14a      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf0:	4b82      	ldr	r3, [pc, #520]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	497f      	ldr	r1, [pc, #508]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80dc 	beq.w	8005dc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d13c      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xf6>
 8005c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c20:	fa93 f3a3 	rbit	r3, r3
 8005c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c28:	fab3 f383 	clz	r3, r3
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xa6>
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	e00f      	b.n	8005c62 <HAL_RCC_ClockConfig+0xc6>
 8005c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
 8005c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c58:	fa93 f3a3 	rbit	r3, r3
 8005c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c5e:	4b67      	ldr	r3, [pc, #412]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c66:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c6a:	fa92 f2a2 	rbit	r2, r2
 8005c6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c72:	fab2 f282 	clz	r2, r2
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	f042 0220 	orr.w	r2, r2, #32
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	f002 021f 	and.w	r2, r2, #31
 8005c82:	2101      	movs	r1, #1
 8005c84:	fa01 f202 	lsl.w	r2, r1, r2
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d17b      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0f3      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d13c      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x178>
 8005c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005caa:	fab3 f383 	clz	r3, r3
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x128>
 8005cbe:	4b4f      	ldr	r3, [pc, #316]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	e00f      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x148>
 8005cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cda:	fa93 f3a3 	rbit	r3, r3
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	4b46      	ldr	r3, [pc, #280]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ce8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cec:	fa92 f2a2 	rbit	r2, r2
 8005cf0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf4:	fab2 f282 	clz	r2, r2
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	f042 0220 	orr.w	r2, r2, #32
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	f002 021f 	and.w	r2, r2, #31
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f202 	lsl.w	r2, r1, r2
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d13a      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0b2      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
 8005d14:	2302      	movs	r3, #2
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	fa93 f3a3 	rbit	r3, r3
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d22:	fab3 f383 	clz	r3, r3
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x1a0>
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	e00d      	b.n	8005d58 <HAL_RCC_ClockConfig+0x1bc>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	2302      	movs	r3, #2
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	fa93 f3a3 	rbit	r3, r3
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2202      	movs	r2, #2
 8005d5a:	61ba      	str	r2, [r7, #24]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	fa92 f2a2 	rbit	r2, r2
 8005d62:	617a      	str	r2, [r7, #20]
  return result;
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	fab2 f282 	clz	r2, r2
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	f042 0220 	orr.w	r2, r2, #32
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f002 021f 	and.w	r2, r2, #31
 8005d76:	2101      	movs	r1, #1
 8005d78:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e079      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f023 0203 	bic.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	491a      	ldr	r1, [pc, #104]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d98:	f7fc fb2e 	bl	80023f8 <HAL_GetTick>
 8005d9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da0:	f7fc fb2a 	bl	80023f8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e061      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_RCC_ClockConfig+0x260>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 020c 	and.w	r2, r3, #12
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1eb      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d214      	bcs.n	8005e00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 0207 	bic.w	r2, r3, #7
 8005dde:	4906      	ldr	r1, [pc, #24]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <HAL_RCC_ClockConfig+0x25c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e040      	b.n	8005e7a <HAL_RCC_ClockConfig+0x2de>
 8005df8:	40022000 	.word	0x40022000
 8005dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_RCC_ClockConfig+0x2e8>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	491a      	ldr	r1, [pc, #104]	; (8005e84 <HAL_RCC_ClockConfig+0x2e8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <HAL_RCC_ClockConfig+0x2e8>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4912      	ldr	r1, [pc, #72]	; (8005e84 <HAL_RCC_ClockConfig+0x2e8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e3e:	f000 f829 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8005e42:	4601      	mov	r1, r0
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_RCC_ClockConfig+0x2e8>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e4c:	22f0      	movs	r2, #240	; 0xf0
 8005e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	fa92 f2a2 	rbit	r2, r2
 8005e56:	60fa      	str	r2, [r7, #12]
  return result;
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	fab2 f282 	clz	r2, r2
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	40d3      	lsrs	r3, r2
 8005e62:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <HAL_RCC_ClockConfig+0x2ec>)
 8005e64:	5cd3      	ldrb	r3, [r2, r3]
 8005e66:	fa21 f303 	lsr.w	r3, r1, r3
 8005e6a:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <HAL_RCC_ClockConfig+0x2f0>)
 8005e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_RCC_ClockConfig+0x2f4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fc fa7c 	bl	8002370 <HAL_InitTick>
  
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3778      	adds	r7, #120	; 0x78
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	0800d48c 	.word	0x0800d48c
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	20000004 	.word	0x20000004

08005e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b08b      	sub	sp, #44	; 0x2c
 8005e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d002      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d003      	beq.n	8005eca <HAL_RCC_GetSysClockFreq+0x36>
 8005ec2:	e03c      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ec4:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ec6:	623b      	str	r3, [r7, #32]
      break;
 8005ec8:	e03c      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ed0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ed4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	fa92 f2a2 	rbit	r2, r2
 8005edc:	607a      	str	r2, [r7, #4]
  return result;
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	fab2 f282 	clz	r2, r2
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	40d3      	lsrs	r3, r2
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
 8005eec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005eee:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	220f      	movs	r2, #15
 8005ef8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	fa92 f2a2 	rbit	r2, r2
 8005f00:	60fa      	str	r2, [r7, #12]
  return result;
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	fab2 f282 	clz	r2, r2
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	40d3      	lsrs	r3, r2
 8005f0c:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f1c:	4a0e      	ldr	r2, [pc, #56]	; (8005f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	e004      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	623b      	str	r3, [r7, #32]
      break;
 8005f3c:	e002      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f3e:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f40:	623b      	str	r3, [r7, #32]
      break;
 8005f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	372c      	adds	r7, #44	; 0x2c
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	007a1200 	.word	0x007a1200
 8005f5c:	0800d4a4 	.word	0x0800d4a4
 8005f60:	0800d4b4 	.word	0x0800d4b4
 8005f64:	003d0900 	.word	0x003d0900

08005f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000000 	.word	0x20000000

08005f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005f86:	f7ff ffef 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	fa92 f2a2 	rbit	r2, r2
 8005fa0:	603a      	str	r2, [r7, #0]
  return result;
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	fab2 f282 	clz	r2, r2
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	40d3      	lsrs	r3, r2
 8005fac:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0800d49c 	.word	0x0800d49c

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005fca:	f7ff ffcd 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fce:	4601      	mov	r1, r0
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005fd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005fdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	fa92 f2a2 	rbit	r2, r2
 8005fe4:	603a      	str	r2, [r7, #0]
  return result;
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	fab2 f282 	clz	r2, r2
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	40d3      	lsrs	r3, r2
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	0800d49c 	.word	0x0800d49c

08006008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b092      	sub	sp, #72	; 0x48
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80d4 	beq.w	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602c:	4b4e      	ldr	r3, [pc, #312]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10e      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4a4a      	ldr	r2, [pc, #296]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006042:	61d3      	str	r3, [r2, #28]
 8006044:	4b48      	ldr	r3, [pc, #288]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006056:	4b45      	ldr	r3, [pc, #276]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d118      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006062:	4b42      	ldr	r3, [pc, #264]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a41      	ldr	r2, [pc, #260]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606e:	f7fc f9c3 	bl	80023f8 <HAL_GetTick>
 8006072:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006074:	e008      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fc f9bf 	bl	80023f8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b64      	cmp	r3, #100	; 0x64
 8006082:	d901      	bls.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e169      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	4b38      	ldr	r3, [pc, #224]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006094:	4b34      	ldr	r3, [pc, #208]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8084 	beq.w	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d07c      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060b4:	4b2c      	ldr	r3, [pc, #176]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	fa93 f3a3 	rbit	r3, r3
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	461a      	mov	r2, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	fa93 f3a3 	rbit	r3, r3
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060f2:	fab3 f383 	clz	r3, r3
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006106:	4a18      	ldr	r2, [pc, #96]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d04b      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fc f96f 	bl	80023f8 <HAL_GetTick>
 800611a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fc f96b 	bl	80023f8 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	; 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e113      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006134:	2302      	movs	r3, #2
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	fa93 f3a3 	rbit	r3, r3
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	2302      	movs	r3, #2
 8006142:	623b      	str	r3, [r7, #32]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	fa93 f3a3 	rbit	r3, r3
 800614a:	61fb      	str	r3, [r7, #28]
  return result;
 800614c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614e:	fab3 f383 	clz	r3, r3
 8006152:	b2db      	uxtb	r3, r3
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f043 0302 	orr.w	r3, r3, #2
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d108      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006162:	4b01      	ldr	r3, [pc, #4]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	e00d      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006168:	40021000 	.word	0x40021000
 800616c:	40007000 	.word	0x40007000
 8006170:	10908100 	.word	0x10908100
 8006174:	2302      	movs	r3, #2
 8006176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	fa93 f3a3 	rbit	r3, r3
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	4b78      	ldr	r3, [pc, #480]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	2202      	movs	r2, #2
 8006186:	613a      	str	r2, [r7, #16]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	fa92 f2a2 	rbit	r2, r2
 800618e:	60fa      	str	r2, [r7, #12]
  return result;
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	fab2 f282 	clz	r2, r2
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	f002 021f 	and.w	r2, r2, #31
 80061a2:	2101      	movs	r1, #1
 80061a4:	fa01 f202 	lsl.w	r2, r1, r2
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0b7      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80061ae:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	496a      	ldr	r1, [pc, #424]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c8:	4b66      	ldr	r3, [pc, #408]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	4a65      	ldr	r2, [pc, #404]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e0:	4b60      	ldr	r3, [pc, #384]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	f023 0203 	bic.w	r2, r3, #3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	495d      	ldr	r1, [pc, #372]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061fe:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	4956      	ldr	r1, [pc, #344]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620c:	4313      	orrs	r3, r2
 800620e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800621c:	4b51      	ldr	r3, [pc, #324]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	494e      	ldr	r1, [pc, #312]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800623a:	4b4a      	ldr	r3, [pc, #296]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4947      	ldr	r1, [pc, #284]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	493f      	ldr	r1, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006276:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f023 0220 	bic.w	r2, r3, #32
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4938      	ldr	r1, [pc, #224]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006284:	4313      	orrs	r3, r2
 8006286:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006294:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	4930      	ldr	r1, [pc, #192]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062b2:	4b2c      	ldr	r3, [pc, #176]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	4929      	ldr	r1, [pc, #164]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062d0:	4b24      	ldr	r3, [pc, #144]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4921      	ldr	r1, [pc, #132]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	491a      	ldr	r1, [pc, #104]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800630c:	4b15      	ldr	r3, [pc, #84]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	4912      	ldr	r1, [pc, #72]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	490b      	ldr	r1, [pc, #44]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006338:	4313      	orrs	r3, r2
 800633a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	4903      	ldr	r1, [pc, #12]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3748      	adds	r7, #72	; 0x48
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000

08006368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e049      	b.n	800640e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fb fe1c 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fc54 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e04a      	b.n	80064c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x6c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d013      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x6c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x6c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <HAL_TIM_Base_Start_IT+0xc4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x6c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x6c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d115      	bne.n	80064b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d015      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0xaa>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d011      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	e008      	b.n	80064c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e000      	b.n	80064c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40013400 	.word	0x40013400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	00010007 	.word	0x00010007

080064ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e049      	b.n	8006592 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb fd3a 	bl	8001f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f000 fb92 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_TIM_PWM_Start+0x24>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e03c      	b.n	800663a <HAL_TIM_PWM_Start+0x9e>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d109      	bne.n	80065da <HAL_TIM_PWM_Start+0x3e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	bf14      	ite	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	2300      	moveq	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	e02f      	b.n	800663a <HAL_TIM_PWM_Start+0x9e>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d109      	bne.n	80065f4 <HAL_TIM_PWM_Start+0x58>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e022      	b.n	800663a <HAL_TIM_PWM_Start+0x9e>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b0c      	cmp	r3, #12
 80065f8:	d109      	bne.n	800660e <HAL_TIM_PWM_Start+0x72>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e015      	b.n	800663a <HAL_TIM_PWM_Start+0x9e>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b10      	cmp	r3, #16
 8006612:	d109      	bne.n	8006628 <HAL_TIM_PWM_Start+0x8c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	bf14      	ite	ne
 8006620:	2301      	movne	r3, #1
 8006622:	2300      	moveq	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e008      	b.n	800663a <HAL_TIM_PWM_Start+0x9e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e097      	b.n	8006772 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <HAL_TIM_PWM_Start+0xb6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006650:	e023      	b.n	800669a <HAL_TIM_PWM_Start+0xfe>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b04      	cmp	r3, #4
 8006656:	d104      	bne.n	8006662 <HAL_TIM_PWM_Start+0xc6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006660:	e01b      	b.n	800669a <HAL_TIM_PWM_Start+0xfe>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d104      	bne.n	8006672 <HAL_TIM_PWM_Start+0xd6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006670:	e013      	b.n	800669a <HAL_TIM_PWM_Start+0xfe>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d104      	bne.n	8006682 <HAL_TIM_PWM_Start+0xe6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006680:	e00b      	b.n	800669a <HAL_TIM_PWM_Start+0xfe>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b10      	cmp	r3, #16
 8006686:	d104      	bne.n	8006692 <HAL_TIM_PWM_Start+0xf6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006690:	e003      	b.n	800669a <HAL_TIM_PWM_Start+0xfe>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2201      	movs	r2, #1
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fe3c 	bl	8007320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a33      	ldr	r2, [pc, #204]	; (800677c <HAL_TIM_PWM_Start+0x1e0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_TIM_PWM_Start+0x13e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a32      	ldr	r2, [pc, #200]	; (8006780 <HAL_TIM_PWM_Start+0x1e4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_TIM_PWM_Start+0x13e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a30      	ldr	r2, [pc, #192]	; (8006784 <HAL_TIM_PWM_Start+0x1e8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_TIM_PWM_Start+0x13e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2f      	ldr	r2, [pc, #188]	; (8006788 <HAL_TIM_PWM_Start+0x1ec>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_TIM_PWM_Start+0x13e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2d      	ldr	r2, [pc, #180]	; (800678c <HAL_TIM_PWM_Start+0x1f0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_Start+0x142>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <HAL_TIM_PWM_Start+0x144>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <HAL_TIM_PWM_Start+0x1e0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_TIM_PWM_Start+0x194>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d013      	beq.n	8006730 <HAL_TIM_PWM_Start+0x194>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a20      	ldr	r2, [pc, #128]	; (8006790 <HAL_TIM_PWM_Start+0x1f4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_TIM_PWM_Start+0x194>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1f      	ldr	r2, [pc, #124]	; (8006794 <HAL_TIM_PWM_Start+0x1f8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_TIM_PWM_Start+0x194>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a17      	ldr	r2, [pc, #92]	; (8006780 <HAL_TIM_PWM_Start+0x1e4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_TIM_PWM_Start+0x194>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a16      	ldr	r2, [pc, #88]	; (8006784 <HAL_TIM_PWM_Start+0x1e8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d115      	bne.n	800675c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	4b18      	ldr	r3, [pc, #96]	; (8006798 <HAL_TIM_PWM_Start+0x1fc>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b06      	cmp	r3, #6
 8006740:	d015      	beq.n	800676e <HAL_TIM_PWM_Start+0x1d2>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006748:	d011      	beq.n	800676e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675a:	e008      	b.n	800676e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e000      	b.n	8006770 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	00010007 	.word	0x00010007

0800679c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d122      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d11b      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0202 	mvn.w	r2, #2
 80067c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa1a 	bl	8006c18 <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa0c 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa1d 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b04      	cmp	r3, #4
 8006804:	d122      	bne.n	800684c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d11b      	bne.n	800684c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0204 	mvn.w	r2, #4
 800681c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9f0 	bl	8006c18 <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9e2 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9f3 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b08      	cmp	r3, #8
 8006858:	d122      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d11b      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0208 	mvn.w	r2, #8
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2204      	movs	r2, #4
 8006876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9c6 	bl	8006c18 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9b8 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f9c9 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0210 	mvn.w	r2, #16
 80068c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2208      	movs	r2, #8
 80068ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f99c 	bl	8006c18 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f98e 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f99f 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d10e      	bne.n	8006920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0201 	mvn.w	r2, #1
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fa ff64 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fd9a 	bl	8007480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d10e      	bne.n	800697a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d107      	bne.n	800697a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fd8d 	bl	8007494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d10e      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d107      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f94d 	bl	8006c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d10e      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d107      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f06f 0220 	mvn.w	r2, #32
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fd4d 	bl	800746c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e0ff      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b14      	cmp	r3, #20
 8006a06:	f200 80f0 	bhi.w	8006bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	08006beb 	.word	0x08006beb
 8006a18:	08006beb 	.word	0x08006beb
 8006a1c:	08006beb 	.word	0x08006beb
 8006a20:	08006aa5 	.word	0x08006aa5
 8006a24:	08006beb 	.word	0x08006beb
 8006a28:	08006beb 	.word	0x08006beb
 8006a2c:	08006beb 	.word	0x08006beb
 8006a30:	08006ae7 	.word	0x08006ae7
 8006a34:	08006beb 	.word	0x08006beb
 8006a38:	08006beb 	.word	0x08006beb
 8006a3c:	08006beb 	.word	0x08006beb
 8006a40:	08006b27 	.word	0x08006b27
 8006a44:	08006beb 	.word	0x08006beb
 8006a48:	08006beb 	.word	0x08006beb
 8006a4c:	08006beb 	.word	0x08006beb
 8006a50:	08006b69 	.word	0x08006b69
 8006a54:	08006beb 	.word	0x08006beb
 8006a58:	08006beb 	.word	0x08006beb
 8006a5c:	08006beb 	.word	0x08006beb
 8006a60:	08006ba9 	.word	0x08006ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f982 	bl	8006d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0208 	orr.w	r2, r2, #8
 8006a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0204 	bic.w	r2, r2, #4
 8006a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6999      	ldr	r1, [r3, #24]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	619a      	str	r2, [r3, #24]
      break;
 8006aa2:	e0a5      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f9f2 	bl	8006e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6999      	ldr	r1, [r3, #24]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	021a      	lsls	r2, r3, #8
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	619a      	str	r2, [r3, #24]
      break;
 8006ae4:	e084      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fa5b 	bl	8006fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0208 	orr.w	r2, r2, #8
 8006b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0204 	bic.w	r2, r2, #4
 8006b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69d9      	ldr	r1, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	61da      	str	r2, [r3, #28]
      break;
 8006b24:	e064      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fac3 	bl	80070b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69d9      	ldr	r1, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	021a      	lsls	r2, r3, #8
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	61da      	str	r2, [r3, #28]
      break;
 8006b66:	e043      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fb0c 	bl	800718c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0208 	orr.w	r2, r2, #8
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ba6:	e023      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fb50 	bl	8007254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	021a      	lsls	r2, r3, #8
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006be8:	e002      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
      break;
 8006bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop

08006c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a3c      	ldr	r2, [pc, #240]	; (8006d58 <TIM_Base_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a39      	ldr	r2, [pc, #228]	; (8006d5c <TIM_Base_SetConfig+0x108>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a38      	ldr	r2, [pc, #224]	; (8006d60 <TIM_Base_SetConfig+0x10c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0x38>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a37      	ldr	r2, [pc, #220]	; (8006d64 <TIM_Base_SetConfig+0x110>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <TIM_Base_SetConfig+0x104>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d017      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <TIM_Base_SetConfig+0x108>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a29      	ldr	r2, [pc, #164]	; (8006d60 <TIM_Base_SetConfig+0x10c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00f      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a28      	ldr	r2, [pc, #160]	; (8006d64 <TIM_Base_SetConfig+0x110>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00b      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a27      	ldr	r2, [pc, #156]	; (8006d68 <TIM_Base_SetConfig+0x114>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d007      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <TIM_Base_SetConfig+0x118>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <TIM_Base_SetConfig+0x11c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d108      	bne.n	8006cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a10      	ldr	r2, [pc, #64]	; (8006d58 <TIM_Base_SetConfig+0x104>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00f      	beq.n	8006d3c <TIM_Base_SetConfig+0xe8>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <TIM_Base_SetConfig+0x110>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <TIM_Base_SetConfig+0xe8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <TIM_Base_SetConfig+0x114>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0xe8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a0f      	ldr	r2, [pc, #60]	; (8006d6c <TIM_Base_SetConfig+0x118>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0xe8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a0e      	ldr	r2, [pc, #56]	; (8006d70 <TIM_Base_SetConfig+0x11c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d103      	bne.n	8006d44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	615a      	str	r2, [r3, #20]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0201 	bic.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 0302 	bic.w	r3, r3, #2
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <TIM_OC1_SetConfig+0x10c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_OC1_SetConfig+0x80>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a2b      	ldr	r2, [pc, #172]	; (8006e84 <TIM_OC1_SetConfig+0x110>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_OC1_SetConfig+0x80>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <TIM_OC1_SetConfig+0x114>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_OC1_SetConfig+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_OC1_SetConfig+0x118>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC1_SetConfig+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <TIM_OC1_SetConfig+0x11c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d10c      	bne.n	8006e0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0308 	bic.w	r3, r3, #8
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f023 0304 	bic.w	r3, r3, #4
 8006e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <TIM_OC1_SetConfig+0x10c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00f      	beq.n	8006e36 <TIM_OC1_SetConfig+0xc2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <TIM_OC1_SetConfig+0x110>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_OC1_SetConfig+0xc2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <TIM_OC1_SetConfig+0x114>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_OC1_SetConfig+0xc2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <TIM_OC1_SetConfig+0x118>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_OC1_SetConfig+0xc2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <TIM_OC1_SetConfig+0x11c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d111      	bne.n	8006e5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40012c00 	.word	0x40012c00
 8006e84:	40013400 	.word	0x40013400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800

08006e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0210 	bic.w	r2, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0320 	bic.w	r3, r3, #32
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a28      	ldr	r2, [pc, #160]	; (8006f94 <TIM_OC2_SetConfig+0x100>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC2_SetConfig+0x6c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a27      	ldr	r2, [pc, #156]	; (8006f98 <TIM_OC2_SetConfig+0x104>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10d      	bne.n	8006f1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <TIM_OC2_SetConfig+0x100>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_OC2_SetConfig+0xb0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <TIM_OC2_SetConfig+0x104>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <TIM_OC2_SetConfig+0xb0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <TIM_OC2_SetConfig+0x108>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_OC2_SetConfig+0xb0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <TIM_OC2_SetConfig+0x10c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC2_SetConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a19      	ldr	r2, [pc, #100]	; (8006fa4 <TIM_OC2_SetConfig+0x110>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d113      	bne.n	8006f6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f4a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f52:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <TIM_OC3_SetConfig+0xfc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC3_SetConfig+0x6a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a26      	ldr	r2, [pc, #152]	; (80070a8 <TIM_OC3_SetConfig+0x100>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10d      	bne.n	800702e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800702c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <TIM_OC3_SetConfig+0xfc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00f      	beq.n	8007056 <TIM_OC3_SetConfig+0xae>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <TIM_OC3_SetConfig+0x100>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00b      	beq.n	8007056 <TIM_OC3_SetConfig+0xae>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a1a      	ldr	r2, [pc, #104]	; (80070ac <TIM_OC3_SetConfig+0x104>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <TIM_OC3_SetConfig+0xae>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a19      	ldr	r2, [pc, #100]	; (80070b0 <TIM_OC3_SetConfig+0x108>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0xae>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <TIM_OC3_SetConfig+0x10c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d113      	bne.n	800707e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800705c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40013400 	.word	0x40013400
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800

080070b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <TIM_OC4_SetConfig+0xc0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_OC4_SetConfig+0x84>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a17      	ldr	r2, [pc, #92]	; (800717c <TIM_OC4_SetConfig+0xc4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_OC4_SetConfig+0x84>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <TIM_OC4_SetConfig+0xc8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC4_SetConfig+0x84>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <TIM_OC4_SetConfig+0xcc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC4_SetConfig+0x84>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC4_SetConfig+0xd0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d109      	bne.n	8007150 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	019b      	lsls	r3, r3, #6
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a17      	ldr	r2, [pc, #92]	; (8007240 <TIM_OC5_SetConfig+0xb4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00f      	beq.n	8007206 <TIM_OC5_SetConfig+0x7a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a16      	ldr	r2, [pc, #88]	; (8007244 <TIM_OC5_SetConfig+0xb8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00b      	beq.n	8007206 <TIM_OC5_SetConfig+0x7a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <TIM_OC5_SetConfig+0xbc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_OC5_SetConfig+0x7a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a14      	ldr	r2, [pc, #80]	; (800724c <TIM_OC5_SetConfig+0xc0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_OC5_SetConfig+0x7a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <TIM_OC5_SetConfig+0xc4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d109      	bne.n	800721a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	621a      	str	r2, [r3, #32]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40013400 	.word	0x40013400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800

08007254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800729a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	051b      	lsls	r3, r3, #20
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC6_SetConfig+0xb8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_OC6_SetConfig+0x7c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a17      	ldr	r2, [pc, #92]	; (8007310 <TIM_OC6_SetConfig+0xbc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <TIM_OC6_SetConfig+0x7c>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a16      	ldr	r2, [pc, #88]	; (8007314 <TIM_OC6_SetConfig+0xc0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_OC6_SetConfig+0x7c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <TIM_OC6_SetConfig+0xc4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC6_SetConfig+0x7c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a14      	ldr	r2, [pc, #80]	; (800731c <TIM_OC6_SetConfig+0xc8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d109      	bne.n	80072e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	029b      	lsls	r3, r3, #10
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40012c00 	.word	0x40012c00
 8007310:	40013400 	.word	0x40013400
 8007314:	40014000 	.word	0x40014000
 8007318:	40014400 	.word	0x40014400
 800731c:	40014800 	.word	0x40014800

08007320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2201      	movs	r2, #1
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	43db      	mvns	r3, r3
 8007342:	401a      	ands	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	fa01 f303 	lsl.w	r3, r1, r3
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007380:	2302      	movs	r3, #2
 8007382:	e063      	b.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2a      	ldr	r2, [pc, #168]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d108      	bne.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f6:	d013      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a18      	ldr	r2, [pc, #96]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a12      	ldr	r2, [pc, #72]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a13      	ldr	r2, [pc, #76]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d10c      	bne.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007426:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4313      	orrs	r3, r2
 8007430:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40014000 	.word	0x40014000

0800746c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e040      	b.n	800753c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa fe3c 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2224      	movs	r2, #36	; 0x24
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fbfc 	bl	8007ce4 <UART_SetConfig>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e022      	b.n	800753c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fdc4 	bl	800808c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fe4b 	bl	80081d0 <UART_CheckIdleState>
 800753a:	4603      	mov	r3, r0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007558:	2b20      	cmp	r3, #32
 800755a:	d132      	bne.n	80075c2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_Receive_IT+0x24>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e02b      	b.n	80075c4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d018      	beq.n	80075b2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	613b      	str	r3, [r7, #16]
   return(result);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	623b      	str	r3, [r7, #32]
 80075a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	69f9      	ldr	r1, [r7, #28]
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e6      	bne.n	8007580 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	461a      	mov	r2, r3
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 ff19 	bl	80083f0 <UART_Start_Receive_IT>
 80075be:	4603      	mov	r3, r0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3728      	adds	r7, #40	; 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	; 0x28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d165      	bne.n	80076ae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_UART_Transmit_DMA+0x22>
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e05e      	b.n	80076b0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2221      	movs	r2, #33	; 0x21
 8007614:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	2b00      	cmp	r3, #0
 800761c:	d027      	beq.n	800766e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <HAL_UART_Transmit_DMA+0xec>)
 8007624:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762a:	4a24      	ldr	r2, [pc, #144]	; (80076bc <HAL_UART_Transmit_DMA+0xf0>)
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_UART_Transmit_DMA+0xf4>)
 8007634:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	2200      	movs	r2, #0
 800763c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	4619      	mov	r1, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3328      	adds	r3, #40	; 0x28
 800764e:	461a      	mov	r2, r3
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	f7fc fed7 	bl	8004404 <HAL_DMA_Start_IT>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2210      	movs	r2, #16
 8007660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e020      	b.n	80076b0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2240      	movs	r2, #64	; 0x40
 8007674:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3308      	adds	r3, #8
 800767c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	613b      	str	r3, [r7, #16]
   return(result);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007696:	623a      	str	r2, [r7, #32]
 8007698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	69f9      	ldr	r1, [r7, #28]
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e5      	bne.n	8007676 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e000      	b.n	80076b0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
  }
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3728      	adds	r7, #40	; 0x28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0800866d 	.word	0x0800866d
 80076bc:	08008701 	.word	0x08008701
 80076c0:	0800871d 	.word	0x0800871d

080076c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b0ba      	sub	sp, #232	; 0xe8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80076f2:	4013      	ands	r3, r2
 80076f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d115      	bne.n	800772c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00f      	beq.n	800772c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d009      	beq.n	800772c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 82ab 	beq.w	8007c78 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
      }
      return;
 800772a:	e2a5      	b.n	8007c78 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8117 	beq.w	8007964 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007746:	4b85      	ldr	r3, [pc, #532]	; (800795c <HAL_UART_IRQHandler+0x298>)
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 810a 	beq.w	8007964 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d011      	beq.n	8007780 <HAL_UART_IRQHandler+0xbc>
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <HAL_UART_IRQHandler+0xec>
 800778c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2202      	movs	r2, #2
 800779e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a6:	f043 0204 	orr.w	r2, r3, #4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d011      	beq.n	80077e0 <HAL_UART_IRQHandler+0x11c>
 80077bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2204      	movs	r2, #4
 80077ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d6:	f043 0202 	orr.w	r2, r3, #2
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2208      	movs	r2, #8
 800780a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007812:	f043 0208 	orr.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007824:	2b00      	cmp	r3, #0
 8007826:	d012      	beq.n	800784e <HAL_UART_IRQHandler+0x18a>
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00c      	beq.n	800784e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800783c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8211 	beq.w	8007c7c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d005      	beq.n	80078a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800789a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800789e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d04f      	beq.n	8007946 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fe7c 	bl	80085a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d141      	bne.n	800793e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1d9      	bne.n	80078ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790a:	2b00      	cmp	r3, #0
 800790c:	d013      	beq.n	8007936 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007912:	4a13      	ldr	r2, [pc, #76]	; (8007960 <HAL_UART_IRQHandler+0x29c>)
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791a:	4618      	mov	r0, r3
 800791c:	f7fc fe0a 	bl	8004534 <HAL_DMA_Abort_IT>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d017      	beq.n	8007956 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007934:	e00f      	b.n	8007956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f9be 	bl	8007cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	e00b      	b.n	8007956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9ba 	bl	8007cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e007      	b.n	8007956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9b6 	bl	8007cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007954:	e192      	b.n	8007c7c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007956:	bf00      	nop
    return;
 8007958:	e190      	b.n	8007c7c <HAL_UART_IRQHandler+0x5b8>
 800795a:	bf00      	nop
 800795c:	04000120 	.word	0x04000120
 8007960:	0800879b 	.word	0x0800879b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007968:	2b01      	cmp	r3, #1
 800796a:	f040 814b 	bne.w	8007c04 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800796e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8144 	beq.w	8007c04 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 813d 	beq.w	8007c04 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2210      	movs	r2, #16
 8007990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	f040 80b5 	bne.w	8007b0c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8164 	beq.w	8007c80 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079c2:	429a      	cmp	r2, r3
 80079c4:	f080 815c 	bcs.w	8007c80 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b20      	cmp	r3, #32
 80079da:	f000 8086 	beq.w	8007aea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1da      	bne.n	80079de <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3308      	adds	r3, #8
 8007a48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e1      	bne.n	8007a28 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e3      	bne.n	8007a64 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ace:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e4      	bne.n	8007aaa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fc fcec 	bl	80044c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8e1 	bl	8007ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b0a:	e0b9      	b.n	8007c80 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80ab 	beq.w	8007c84 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80a6 	beq.w	8007c84 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e4      	bne.n	8007b38 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f023 0301 	bic.w	r3, r3, #1
 8007b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b92:	633a      	str	r2, [r7, #48]	; 0x30
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e3      	bne.n	8007b6e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e4      	bne.n	8007bba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f865 	bl	8007ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c02:	e03f      	b.n	8007c84 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <HAL_UART_IRQHandler+0x56a>
 8007c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d008      	beq.n	8007c2e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 ff9f 	bl	8008b6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c2c:	e02d      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01c      	beq.n	8007c88 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
    }
    return;
 8007c56:	e017      	b.n	8007c88 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d012      	beq.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fda8 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 8007c76:	e008      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c78:	bf00      	nop
 8007c7a:	e006      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007c7c:	bf00      	nop
 8007c7e:	e004      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c80:	bf00      	nop
 8007c82:	e002      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007c88:	bf00      	nop
  }

}
 8007c8a:	37e8      	adds	r7, #232	; 0xe8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d12:	f023 030c 	bic.w	r3, r3, #12
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	6979      	ldr	r1, [r7, #20]
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4aa7      	ldr	r2, [pc, #668]	; (8007ffc <UART_SetConfig+0x318>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d120      	bne.n	8007da6 <UART_SetConfig+0xc2>
 8007d64:	4ba6      	ldr	r3, [pc, #664]	; (8008000 <UART_SetConfig+0x31c>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d817      	bhi.n	8007da0 <UART_SetConfig+0xbc>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x94>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d9b 	.word	0x08007d9b
 8007d84:	08007d8f 	.word	0x08007d8f
 8007d88:	2301      	movs	r3, #1
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e0b5      	b.n	8007efa <UART_SetConfig+0x216>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e0b2      	b.n	8007efa <UART_SetConfig+0x216>
 8007d94:	2304      	movs	r3, #4
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e0af      	b.n	8007efa <UART_SetConfig+0x216>
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e0ac      	b.n	8007efa <UART_SetConfig+0x216>
 8007da0:	2310      	movs	r3, #16
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e0a9      	b.n	8007efa <UART_SetConfig+0x216>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a96      	ldr	r2, [pc, #600]	; (8008004 <UART_SetConfig+0x320>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d124      	bne.n	8007dfa <UART_SetConfig+0x116>
 8007db0:	4b93      	ldr	r3, [pc, #588]	; (8008000 <UART_SetConfig+0x31c>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007db8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dbc:	d011      	beq.n	8007de2 <UART_SetConfig+0xfe>
 8007dbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dc2:	d817      	bhi.n	8007df4 <UART_SetConfig+0x110>
 8007dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dc8:	d011      	beq.n	8007dee <UART_SetConfig+0x10a>
 8007dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dce:	d811      	bhi.n	8007df4 <UART_SetConfig+0x110>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <UART_SetConfig+0xf8>
 8007dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd8:	d006      	beq.n	8007de8 <UART_SetConfig+0x104>
 8007dda:	e00b      	b.n	8007df4 <UART_SetConfig+0x110>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e08b      	b.n	8007efa <UART_SetConfig+0x216>
 8007de2:	2302      	movs	r3, #2
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e088      	b.n	8007efa <UART_SetConfig+0x216>
 8007de8:	2304      	movs	r3, #4
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e085      	b.n	8007efa <UART_SetConfig+0x216>
 8007dee:	2308      	movs	r3, #8
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e082      	b.n	8007efa <UART_SetConfig+0x216>
 8007df4:	2310      	movs	r3, #16
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e07f      	b.n	8007efa <UART_SetConfig+0x216>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a82      	ldr	r2, [pc, #520]	; (8008008 <UART_SetConfig+0x324>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d124      	bne.n	8007e4e <UART_SetConfig+0x16a>
 8007e04:	4b7e      	ldr	r3, [pc, #504]	; (8008000 <UART_SetConfig+0x31c>)
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e10:	d011      	beq.n	8007e36 <UART_SetConfig+0x152>
 8007e12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e16:	d817      	bhi.n	8007e48 <UART_SetConfig+0x164>
 8007e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e1c:	d011      	beq.n	8007e42 <UART_SetConfig+0x15e>
 8007e1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e22:	d811      	bhi.n	8007e48 <UART_SetConfig+0x164>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <UART_SetConfig+0x14c>
 8007e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e2c:	d006      	beq.n	8007e3c <UART_SetConfig+0x158>
 8007e2e:	e00b      	b.n	8007e48 <UART_SetConfig+0x164>
 8007e30:	2300      	movs	r3, #0
 8007e32:	77fb      	strb	r3, [r7, #31]
 8007e34:	e061      	b.n	8007efa <UART_SetConfig+0x216>
 8007e36:	2302      	movs	r3, #2
 8007e38:	77fb      	strb	r3, [r7, #31]
 8007e3a:	e05e      	b.n	8007efa <UART_SetConfig+0x216>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e05b      	b.n	8007efa <UART_SetConfig+0x216>
 8007e42:	2308      	movs	r3, #8
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e058      	b.n	8007efa <UART_SetConfig+0x216>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e055      	b.n	8007efa <UART_SetConfig+0x216>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a6e      	ldr	r2, [pc, #440]	; (800800c <UART_SetConfig+0x328>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d124      	bne.n	8007ea2 <UART_SetConfig+0x1be>
 8007e58:	4b69      	ldr	r3, [pc, #420]	; (8008000 <UART_SetConfig+0x31c>)
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e64:	d011      	beq.n	8007e8a <UART_SetConfig+0x1a6>
 8007e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e6a:	d817      	bhi.n	8007e9c <UART_SetConfig+0x1b8>
 8007e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e70:	d011      	beq.n	8007e96 <UART_SetConfig+0x1b2>
 8007e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e76:	d811      	bhi.n	8007e9c <UART_SetConfig+0x1b8>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <UART_SetConfig+0x1a0>
 8007e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e80:	d006      	beq.n	8007e90 <UART_SetConfig+0x1ac>
 8007e82:	e00b      	b.n	8007e9c <UART_SetConfig+0x1b8>
 8007e84:	2300      	movs	r3, #0
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e037      	b.n	8007efa <UART_SetConfig+0x216>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e034      	b.n	8007efa <UART_SetConfig+0x216>
 8007e90:	2304      	movs	r3, #4
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e031      	b.n	8007efa <UART_SetConfig+0x216>
 8007e96:	2308      	movs	r3, #8
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	e02e      	b.n	8007efa <UART_SetConfig+0x216>
 8007e9c:	2310      	movs	r3, #16
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e02b      	b.n	8007efa <UART_SetConfig+0x216>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a5a      	ldr	r2, [pc, #360]	; (8008010 <UART_SetConfig+0x32c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d124      	bne.n	8007ef6 <UART_SetConfig+0x212>
 8007eac:	4b54      	ldr	r3, [pc, #336]	; (8008000 <UART_SetConfig+0x31c>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007eb8:	d011      	beq.n	8007ede <UART_SetConfig+0x1fa>
 8007eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ebe:	d817      	bhi.n	8007ef0 <UART_SetConfig+0x20c>
 8007ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ec4:	d011      	beq.n	8007eea <UART_SetConfig+0x206>
 8007ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eca:	d811      	bhi.n	8007ef0 <UART_SetConfig+0x20c>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <UART_SetConfig+0x1f4>
 8007ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed4:	d006      	beq.n	8007ee4 <UART_SetConfig+0x200>
 8007ed6:	e00b      	b.n	8007ef0 <UART_SetConfig+0x20c>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e00d      	b.n	8007efa <UART_SetConfig+0x216>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e00a      	b.n	8007efa <UART_SetConfig+0x216>
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	77fb      	strb	r3, [r7, #31]
 8007ee8:	e007      	b.n	8007efa <UART_SetConfig+0x216>
 8007eea:	2308      	movs	r3, #8
 8007eec:	77fb      	strb	r3, [r7, #31]
 8007eee:	e004      	b.n	8007efa <UART_SetConfig+0x216>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e001      	b.n	8007efa <UART_SetConfig+0x216>
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f02:	d15b      	bne.n	8007fbc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007f04:	7ffb      	ldrb	r3, [r7, #31]
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d827      	bhi.n	8007f5a <UART_SetConfig+0x276>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0x22c>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f45 	.word	0x08007f45
 8007f1c:	08007f5b 	.word	0x08007f5b
 8007f20:	08007f4b 	.word	0x08007f4b
 8007f24:	08007f5b 	.word	0x08007f5b
 8007f28:	08007f5b 	.word	0x08007f5b
 8007f2c:	08007f5b 	.word	0x08007f5b
 8007f30:	08007f53 	.word	0x08007f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f34:	f7fe f824 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 8007f38:	61b8      	str	r0, [r7, #24]
        break;
 8007f3a:	e013      	b.n	8007f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f3c:	f7fe f842 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 8007f40:	61b8      	str	r0, [r7, #24]
        break;
 8007f42:	e00f      	b.n	8007f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f44:	4b33      	ldr	r3, [pc, #204]	; (8008014 <UART_SetConfig+0x330>)
 8007f46:	61bb      	str	r3, [r7, #24]
        break;
 8007f48:	e00c      	b.n	8007f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f4a:	f7fd ffa3 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8007f4e:	61b8      	str	r0, [r7, #24]
        break;
 8007f50:	e008      	b.n	8007f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f56:	61bb      	str	r3, [r7, #24]
        break;
 8007f58:	e004      	b.n	8007f64 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	77bb      	strb	r3, [r7, #30]
        break;
 8007f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8082 	beq.w	8008070 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	005a      	lsls	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b0f      	cmp	r3, #15
 8007f86:	d916      	bls.n	8007fb6 <UART_SetConfig+0x2d2>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8e:	d212      	bcs.n	8007fb6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f023 030f 	bic.w	r3, r3, #15
 8007f98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	89fa      	ldrh	r2, [r7, #14]
 8007fb2:	60da      	str	r2, [r3, #12]
 8007fb4:	e05c      	b.n	8008070 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	77bb      	strb	r3, [r7, #30]
 8007fba:	e059      	b.n	8008070 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fbc:	7ffb      	ldrb	r3, [r7, #31]
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d835      	bhi.n	800802e <UART_SetConfig+0x34a>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <UART_SetConfig+0x2e4>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08008019 	.word	0x08008019
 8007fd4:	0800802f 	.word	0x0800802f
 8007fd8:	0800801f 	.word	0x0800801f
 8007fdc:	0800802f 	.word	0x0800802f
 8007fe0:	0800802f 	.word	0x0800802f
 8007fe4:	0800802f 	.word	0x0800802f
 8007fe8:	08008027 	.word	0x08008027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fec:	f7fd ffc8 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 8007ff0:	61b8      	str	r0, [r7, #24]
        break;
 8007ff2:	e021      	b.n	8008038 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff4:	f7fd ffe6 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 8007ff8:	61b8      	str	r0, [r7, #24]
        break;
 8007ffa:	e01d      	b.n	8008038 <UART_SetConfig+0x354>
 8007ffc:	40013800 	.word	0x40013800
 8008000:	40021000 	.word	0x40021000
 8008004:	40004400 	.word	0x40004400
 8008008:	40004800 	.word	0x40004800
 800800c:	40004c00 	.word	0x40004c00
 8008010:	40005000 	.word	0x40005000
 8008014:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008018:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <UART_SetConfig+0x3a4>)
 800801a:	61bb      	str	r3, [r7, #24]
        break;
 800801c:	e00c      	b.n	8008038 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800801e:	f7fd ff39 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8008022:	61b8      	str	r0, [r7, #24]
        break;
 8008024:	e008      	b.n	8008038 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800802a:	61bb      	str	r3, [r7, #24]
        break;
 800802c:	e004      	b.n	8008038 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	77bb      	strb	r3, [r7, #30]
        break;
 8008036:	bf00      	nop
    }

    if (pclk != 0U)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d018      	beq.n	8008070 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	085a      	lsrs	r2, r3, #1
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	441a      	add	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b0f      	cmp	r3, #15
 8008056:	d909      	bls.n	800806c <UART_SetConfig+0x388>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d205      	bcs.n	800806c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	e001      	b.n	8008070 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800807c:	7fbb      	ldrb	r3, [r7, #30]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	007a1200 	.word	0x007a1200

0800808c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00a      	beq.n	80080b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01a      	beq.n	80081a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818a:	d10a      	bne.n	80081a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	605a      	str	r2, [r3, #4]
  }
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b098      	sub	sp, #96	; 0x60
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081e0:	f7fa f90a 	bl	80023f8 <HAL_GetTick>
 80081e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d12e      	bne.n	8008252 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f88c 	bl	8008320 <UART_WaitOnFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d021      	beq.n	8008252 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008222:	653b      	str	r3, [r7, #80]	; 0x50
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822c:	647b      	str	r3, [r7, #68]	; 0x44
 800822e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800823a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e6      	bne.n	800820e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e062      	b.n	8008318 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b04      	cmp	r3, #4
 800825e:	d149      	bne.n	80082f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f856 	bl	8008320 <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d03c      	beq.n	80082f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	623b      	str	r3, [r7, #32]
   return(result);
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800828e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
 800829a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800829e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e6      	bne.n	800827a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3308      	adds	r3, #8
 80082b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082cc:	61fa      	str	r2, [r7, #28]
 80082ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	69b9      	ldr	r1, [r7, #24]
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	617b      	str	r3, [r7, #20]
   return(result);
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e5      	bne.n	80082ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e011      	b.n	8008318 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3758      	adds	r7, #88	; 0x58
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008330:	e049      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d045      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800833a:	f7fa f85d 	bl	80023f8 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	429a      	cmp	r2, r3
 8008348:	d302      	bcc.n	8008350 <UART_WaitOnFlagUntilTimeout+0x30>
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e048      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d031      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d110      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2208      	movs	r2, #8
 8008376:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f913 	bl	80085a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2208      	movs	r2, #8
 8008382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e029      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a0:	d111      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f8f9 	bl	80085a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e00f      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4013      	ands	r3, r2
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d0a6      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b097      	sub	sp, #92	; 0x5c
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008422:	d10e      	bne.n	8008442 <UART_Start_Receive_IT+0x52>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d105      	bne.n	8008438 <UART_Start_Receive_IT+0x48>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008436:	e01a      	b.n	800846e <UART_Start_Receive_IT+0x7e>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	22ff      	movs	r2, #255	; 0xff
 800843c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008440:	e015      	b.n	800846e <UART_Start_Receive_IT+0x7e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10d      	bne.n	8008466 <UART_Start_Receive_IT+0x76>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <UART_Start_Receive_IT+0x6c>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800845a:	e008      	b.n	800846e <UART_Start_Receive_IT+0x7e>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	227f      	movs	r2, #127	; 0x7f
 8008460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008464:	e003      	b.n	800846e <UART_Start_Receive_IT+0x7e>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2222      	movs	r2, #34	; 0x22
 800847a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	657b      	str	r3, [r7, #84]	; 0x54
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800849e:	64ba      	str	r2, [r7, #72]	; 0x48
 80084a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ba:	d107      	bne.n	80084cc <UART_Start_Receive_IT+0xdc>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4a22      	ldr	r2, [pc, #136]	; (8008550 <UART_Start_Receive_IT+0x160>)
 80084c8:	669a      	str	r2, [r3, #104]	; 0x68
 80084ca:	e002      	b.n	80084d2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4a21      	ldr	r2, [pc, #132]	; (8008554 <UART_Start_Receive_IT+0x164>)
 80084d0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d019      	beq.n	800850e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
 80084fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_Start_Receive_IT+0xea>
 800850c:	e018      	b.n	8008540 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	613b      	str	r3, [r7, #16]
   return(result);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f043 0320 	orr.w	r3, r3, #32
 8008522:	653b      	str	r3, [r7, #80]	; 0x50
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852c:	623b      	str	r3, [r7, #32]
 800852e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	69f9      	ldr	r1, [r7, #28]
 8008532:	6a3a      	ldr	r2, [r7, #32]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	61bb      	str	r3, [r7, #24]
   return(result);
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e6      	bne.n	800850e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	375c      	adds	r7, #92	; 0x5c
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	080089c3 	.word	0x080089c3
 8008554:	0800881b 	.word	0x0800881b

08008558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b089      	sub	sp, #36	; 0x24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60bb      	str	r3, [r7, #8]
   return(result);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6979      	ldr	r1, [r7, #20]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008598:	bf00      	nop
 800859a:	3724      	adds	r7, #36	; 0x24
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b095      	sub	sp, #84	; 0x54
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ca:	643b      	str	r3, [r7, #64]	; 0x40
 80085cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e6      	bne.n	80085ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008616:	2b01      	cmp	r3, #1
 8008618:	d118      	bne.n	800864c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	60bb      	str	r3, [r7, #8]
   return(result);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f023 0310 	bic.w	r3, r3, #16
 800862e:	647b      	str	r3, [r7, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6979      	ldr	r1, [r7, #20]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	613b      	str	r3, [r7, #16]
   return(result);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e6      	bne.n	800861a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008660:	bf00      	nop
 8008662:	3754      	adds	r7, #84	; 0x54
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b090      	sub	sp, #64	; 0x40
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	2b20      	cmp	r3, #32
 8008680:	d037      	beq.n	80086f2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	2200      	movs	r2, #0
 8008686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	623b      	str	r3, [r7, #32]
   return(result);
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086aa:	633a      	str	r2, [r7, #48]	; 0x30
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
 80086d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	69b9      	ldr	r1, [r7, #24]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e6      	bne.n	80086be <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086f0:	e002      	b.n	80086f8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80086f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086f4:	f7ff facc 	bl	8007c90 <HAL_UART_TxCpltCallback>
}
 80086f8:	bf00      	nop
 80086fa:	3740      	adds	r7, #64	; 0x40
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fac8 	bl	8007ca4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d109      	bne.n	800875a <UART_DMAError+0x3e>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b21      	cmp	r3, #33	; 0x21
 800874a:	d106      	bne.n	800875a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f7ff feff 	bl	8008558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d109      	bne.n	800877c <UART_DMAError+0x60>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d106      	bne.n	800877c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff ff14 	bl	80085a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008782:	f043 0210 	orr.w	r2, r3, #16
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f7ff fa93 	bl	8007cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fa7d 	bl	8007cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b088      	sub	sp, #32
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff fa3f 	bl	8007c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b09c      	sub	sp, #112	; 0x70
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008828:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008832:	2b22      	cmp	r3, #34	; 0x22
 8008834:	f040 80b9 	bne.w	80089aa <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800883e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008842:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008846:	b2d9      	uxtb	r1, r3
 8008848:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800884c:	b2da      	uxtb	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	400a      	ands	r2, r1
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	b29a      	uxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 809c 	bne.w	80089ba <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008896:	66bb      	str	r3, [r7, #104]	; 0x68
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80088a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e6      	bne.n	8008882 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3308      	adds	r3, #8
 80088ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	667b      	str	r3, [r7, #100]	; 0x64
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088d4:	647a      	str	r2, [r7, #68]	; 0x44
 80088d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d018      	beq.n	800893c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	e853 3f00 	ldrex	r3, [r3]
 8008916:	623b      	str	r3, [r7, #32]
   return(result);
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800891e:	663b      	str	r3, [r7, #96]	; 0x60
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008928:	633b      	str	r3, [r7, #48]	; 0x30
 800892a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800892e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008930:	e841 2300 	strex	r3, r2, [r1]
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e6      	bne.n	800890a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008940:	2b01      	cmp	r3, #1
 8008942:	d12e      	bne.n	80089a2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60fb      	str	r3, [r7, #12]
   return(result);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	61fb      	str	r3, [r7, #28]
 800896a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	69b9      	ldr	r1, [r7, #24]
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	617b      	str	r3, [r7, #20]
   return(result);
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f003 0310 	and.w	r3, r3, #16
 8008986:	2b10      	cmp	r3, #16
 8008988:	d103      	bne.n	8008992 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2210      	movs	r2, #16
 8008990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff f996 	bl	8007ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089a0:	e00b      	b.n	80089ba <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7f8 fd6c 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 80089a8:	e007      	b.n	80089ba <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0208 	orr.w	r2, r2, #8
 80089b8:	619a      	str	r2, [r3, #24]
}
 80089ba:	bf00      	nop
 80089bc:	3770      	adds	r7, #112	; 0x70
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b09c      	sub	sp, #112	; 0x70
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089d0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089da:	2b22      	cmp	r3, #34	; 0x22
 80089dc:	f040 80b9 	bne.w	8008b52 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089f0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80089f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80089f8:	4013      	ands	r3, r2
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a04:	1c9a      	adds	r2, r3, #2
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 809c 	bne.w	8008b62 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a48:	657b      	str	r3, [r7, #84]	; 0x54
 8008a4a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f023 0301 	bic.w	r3, r3, #1
 8008a72:	663b      	str	r3, [r7, #96]	; 0x60
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d018      	beq.n	8008ae4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d12e      	bne.n	8008b4a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0310 	bic.w	r3, r3, #16
 8008b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6979      	ldr	r1, [r7, #20]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d103      	bne.n	8008b3a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2210      	movs	r2, #16
 8008b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff f8c2 	bl	8007ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b48:	e00b      	b.n	8008b62 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7f8 fc98 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 8008b50:	e007      	b.n	8008b62 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0208 	orr.w	r2, r2, #8
 8008b60:	619a      	str	r2, [r3, #24]
}
 8008b62:	bf00      	nop
 8008b64:	3770      	adds	r7, #112	; 0x70
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <__cvt>:
 8008b7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b82:	ec55 4b10 	vmov	r4, r5, d0
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	460e      	mov	r6, r1
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	bfbb      	ittet	lt
 8008b90:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b94:	461d      	movlt	r5, r3
 8008b96:	2300      	movge	r3, #0
 8008b98:	232d      	movlt	r3, #45	; 0x2d
 8008b9a:	700b      	strb	r3, [r1, #0]
 8008b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ba2:	4691      	mov	r9, r2
 8008ba4:	f023 0820 	bic.w	r8, r3, #32
 8008ba8:	bfbc      	itt	lt
 8008baa:	4622      	movlt	r2, r4
 8008bac:	4614      	movlt	r4, r2
 8008bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb2:	d005      	beq.n	8008bc0 <__cvt+0x42>
 8008bb4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bb8:	d100      	bne.n	8008bbc <__cvt+0x3e>
 8008bba:	3601      	adds	r6, #1
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	e000      	b.n	8008bc2 <__cvt+0x44>
 8008bc0:	2103      	movs	r1, #3
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	ab02      	add	r3, sp, #8
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	ec45 4b10 	vmov	d0, r4, r5
 8008bce:	4653      	mov	r3, sl
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	f001 f96d 	bl	8009eb0 <_dtoa_r>
 8008bd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bda:	4607      	mov	r7, r0
 8008bdc:	d102      	bne.n	8008be4 <__cvt+0x66>
 8008bde:	f019 0f01 	tst.w	r9, #1
 8008be2:	d022      	beq.n	8008c2a <__cvt+0xac>
 8008be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008be8:	eb07 0906 	add.w	r9, r7, r6
 8008bec:	d110      	bne.n	8008c10 <__cvt+0x92>
 8008bee:	783b      	ldrb	r3, [r7, #0]
 8008bf0:	2b30      	cmp	r3, #48	; 0x30
 8008bf2:	d10a      	bne.n	8008c0a <__cvt+0x8c>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c00:	b918      	cbnz	r0, 8008c0a <__cvt+0x8c>
 8008c02:	f1c6 0601 	rsb	r6, r6, #1
 8008c06:	f8ca 6000 	str.w	r6, [sl]
 8008c0a:	f8da 3000 	ldr.w	r3, [sl]
 8008c0e:	4499      	add	r9, r3
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c1c:	b108      	cbz	r0, 8008c22 <__cvt+0xa4>
 8008c1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c22:	2230      	movs	r2, #48	; 0x30
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	454b      	cmp	r3, r9
 8008c28:	d307      	bcc.n	8008c3a <__cvt+0xbc>
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2e:	1bdb      	subs	r3, r3, r7
 8008c30:	4638      	mov	r0, r7
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	b004      	add	sp, #16
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	1c59      	adds	r1, r3, #1
 8008c3c:	9103      	str	r1, [sp, #12]
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	e7f0      	b.n	8008c24 <__cvt+0xa6>

08008c42 <__exponent>:
 8008c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c44:	4603      	mov	r3, r0
 8008c46:	2900      	cmp	r1, #0
 8008c48:	bfb8      	it	lt
 8008c4a:	4249      	neglt	r1, r1
 8008c4c:	f803 2b02 	strb.w	r2, [r3], #2
 8008c50:	bfb4      	ite	lt
 8008c52:	222d      	movlt	r2, #45	; 0x2d
 8008c54:	222b      	movge	r2, #43	; 0x2b
 8008c56:	2909      	cmp	r1, #9
 8008c58:	7042      	strb	r2, [r0, #1]
 8008c5a:	dd2a      	ble.n	8008cb2 <__exponent+0x70>
 8008c5c:	f10d 0207 	add.w	r2, sp, #7
 8008c60:	4617      	mov	r7, r2
 8008c62:	260a      	movs	r6, #10
 8008c64:	4694      	mov	ip, r2
 8008c66:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c6a:	fb06 1415 	mls	r4, r6, r5, r1
 8008c6e:	3430      	adds	r4, #48	; 0x30
 8008c70:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008c74:	460c      	mov	r4, r1
 8008c76:	2c63      	cmp	r4, #99	; 0x63
 8008c78:	f102 32ff 	add.w	r2, r2, #4294967295
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	dcf1      	bgt.n	8008c64 <__exponent+0x22>
 8008c80:	3130      	adds	r1, #48	; 0x30
 8008c82:	f1ac 0402 	sub.w	r4, ip, #2
 8008c86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c8a:	1c41      	adds	r1, r0, #1
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	42ba      	cmp	r2, r7
 8008c90:	d30a      	bcc.n	8008ca8 <__exponent+0x66>
 8008c92:	f10d 0209 	add.w	r2, sp, #9
 8008c96:	eba2 020c 	sub.w	r2, r2, ip
 8008c9a:	42bc      	cmp	r4, r7
 8008c9c:	bf88      	it	hi
 8008c9e:	2200      	movhi	r2, #0
 8008ca0:	4413      	add	r3, r2
 8008ca2:	1a18      	subs	r0, r3, r0
 8008ca4:	b003      	add	sp, #12
 8008ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008cac:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008cb0:	e7ed      	b.n	8008c8e <__exponent+0x4c>
 8008cb2:	2330      	movs	r3, #48	; 0x30
 8008cb4:	3130      	adds	r1, #48	; 0x30
 8008cb6:	7083      	strb	r3, [r0, #2]
 8008cb8:	70c1      	strb	r1, [r0, #3]
 8008cba:	1d03      	adds	r3, r0, #4
 8008cbc:	e7f1      	b.n	8008ca2 <__exponent+0x60>
	...

08008cc0 <_printf_float>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b02 	vpush	{d8}
 8008cc8:	b08d      	sub	sp, #52	; 0x34
 8008cca:	460c      	mov	r4, r1
 8008ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	f000 ffe7 	bl	8009ca8 <_localeconv_r>
 8008cda:	f8d0 a000 	ldr.w	sl, [r0]
 8008cde:	4650      	mov	r0, sl
 8008ce0:	f7f7 fac6 	bl	8000270 <strlen>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	f103 0208 	add.w	r2, r3, #8
 8008cfe:	f8c8 2000 	str.w	r2, [r8]
 8008d02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d0a:	9307      	str	r3, [sp, #28]
 8008d0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d10:	ee08 0a10 	vmov	s16, r0
 8008d14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d1c:	4b9e      	ldr	r3, [pc, #632]	; (8008f98 <_printf_float+0x2d8>)
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	f7f7 ff03 	bl	8000b2c <__aeabi_dcmpun>
 8008d26:	bb88      	cbnz	r0, 8008d8c <_printf_float+0xcc>
 8008d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d2c:	4b9a      	ldr	r3, [pc, #616]	; (8008f98 <_printf_float+0x2d8>)
 8008d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d32:	f7f7 fedd 	bl	8000af0 <__aeabi_dcmple>
 8008d36:	bb48      	cbnz	r0, 8008d8c <_printf_float+0xcc>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4649      	mov	r1, r9
 8008d40:	f7f7 fecc 	bl	8000adc <__aeabi_dcmplt>
 8008d44:	b110      	cbz	r0, 8008d4c <_printf_float+0x8c>
 8008d46:	232d      	movs	r3, #45	; 0x2d
 8008d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4c:	4a93      	ldr	r2, [pc, #588]	; (8008f9c <_printf_float+0x2dc>)
 8008d4e:	4b94      	ldr	r3, [pc, #592]	; (8008fa0 <_printf_float+0x2e0>)
 8008d50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d54:	bf94      	ite	ls
 8008d56:	4690      	movls	r8, r2
 8008d58:	4698      	movhi	r8, r3
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	9b05      	ldr	r3, [sp, #20]
 8008d60:	f023 0304 	bic.w	r3, r3, #4
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	f04f 0900 	mov.w	r9, #0
 8008d6a:	9700      	str	r7, [sp, #0]
 8008d6c:	4633      	mov	r3, r6
 8008d6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 f9da 	bl	800912c <_printf_common>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f040 8090 	bne.w	8008e9e <_printf_float+0x1de>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b00d      	add	sp, #52	; 0x34
 8008d84:	ecbd 8b02 	vpop	{d8}
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	4640      	mov	r0, r8
 8008d92:	4649      	mov	r1, r9
 8008d94:	f7f7 feca 	bl	8000b2c <__aeabi_dcmpun>
 8008d98:	b140      	cbz	r0, 8008dac <_printf_float+0xec>
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfbc      	itt	lt
 8008da0:	232d      	movlt	r3, #45	; 0x2d
 8008da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008da6:	4a7f      	ldr	r2, [pc, #508]	; (8008fa4 <_printf_float+0x2e4>)
 8008da8:	4b7f      	ldr	r3, [pc, #508]	; (8008fa8 <_printf_float+0x2e8>)
 8008daa:	e7d1      	b.n	8008d50 <_printf_float+0x90>
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008db2:	9206      	str	r2, [sp, #24]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	d13f      	bne.n	8008e38 <_printf_float+0x178>
 8008db8:	2306      	movs	r3, #6
 8008dba:	6063      	str	r3, [r4, #4]
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	6861      	ldr	r1, [r4, #4]
 8008dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9303      	str	r3, [sp, #12]
 8008dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8008dca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dce:	ab09      	add	r3, sp, #36	; 0x24
 8008dd0:	ec49 8b10 	vmov	d0, r8, r9
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fece 	bl	8008b7e <__cvt>
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de6:	2b47      	cmp	r3, #71	; 0x47
 8008de8:	4680      	mov	r8, r0
 8008dea:	d108      	bne.n	8008dfe <_printf_float+0x13e>
 8008dec:	1cc8      	adds	r0, r1, #3
 8008dee:	db02      	blt.n	8008df6 <_printf_float+0x136>
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	4299      	cmp	r1, r3
 8008df4:	dd41      	ble.n	8008e7a <_printf_float+0x1ba>
 8008df6:	f1ab 0302 	sub.w	r3, fp, #2
 8008dfa:	fa5f fb83 	uxtb.w	fp, r3
 8008dfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e02:	d820      	bhi.n	8008e46 <_printf_float+0x186>
 8008e04:	3901      	subs	r1, #1
 8008e06:	465a      	mov	r2, fp
 8008e08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e0c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e0e:	f7ff ff18 	bl	8008c42 <__exponent>
 8008e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e14:	1813      	adds	r3, r2, r0
 8008e16:	2a01      	cmp	r2, #1
 8008e18:	4681      	mov	r9, r0
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	dc02      	bgt.n	8008e24 <_printf_float+0x164>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	07d2      	lsls	r2, r2, #31
 8008e22:	d501      	bpl.n	8008e28 <_printf_float+0x168>
 8008e24:	3301      	adds	r3, #1
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d09c      	beq.n	8008d6a <_printf_float+0xaa>
 8008e30:	232d      	movs	r3, #45	; 0x2d
 8008e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e36:	e798      	b.n	8008d6a <_printf_float+0xaa>
 8008e38:	9a06      	ldr	r2, [sp, #24]
 8008e3a:	2a47      	cmp	r2, #71	; 0x47
 8008e3c:	d1be      	bne.n	8008dbc <_printf_float+0xfc>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1bc      	bne.n	8008dbc <_printf_float+0xfc>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7b9      	b.n	8008dba <_printf_float+0xfa>
 8008e46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e4a:	d118      	bne.n	8008e7e <_printf_float+0x1be>
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	dd0b      	ble.n	8008e6a <_printf_float+0x1aa>
 8008e52:	6121      	str	r1, [r4, #16]
 8008e54:	b913      	cbnz	r3, 8008e5c <_printf_float+0x19c>
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	07d0      	lsls	r0, r2, #31
 8008e5a:	d502      	bpl.n	8008e62 <_printf_float+0x1a2>
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	440b      	add	r3, r1
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e64:	f04f 0900 	mov.w	r9, #0
 8008e68:	e7de      	b.n	8008e28 <_printf_float+0x168>
 8008e6a:	b913      	cbnz	r3, 8008e72 <_printf_float+0x1b2>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	d501      	bpl.n	8008e76 <_printf_float+0x1b6>
 8008e72:	3302      	adds	r3, #2
 8008e74:	e7f4      	b.n	8008e60 <_printf_float+0x1a0>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7f2      	b.n	8008e60 <_printf_float+0x1a0>
 8008e7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e80:	4299      	cmp	r1, r3
 8008e82:	db05      	blt.n	8008e90 <_printf_float+0x1d0>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	6121      	str	r1, [r4, #16]
 8008e88:	07d8      	lsls	r0, r3, #31
 8008e8a:	d5ea      	bpl.n	8008e62 <_printf_float+0x1a2>
 8008e8c:	1c4b      	adds	r3, r1, #1
 8008e8e:	e7e7      	b.n	8008e60 <_printf_float+0x1a0>
 8008e90:	2900      	cmp	r1, #0
 8008e92:	bfd4      	ite	le
 8008e94:	f1c1 0202 	rsble	r2, r1, #2
 8008e98:	2201      	movgt	r2, #1
 8008e9a:	4413      	add	r3, r2
 8008e9c:	e7e0      	b.n	8008e60 <_printf_float+0x1a0>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	055a      	lsls	r2, r3, #21
 8008ea2:	d407      	bmi.n	8008eb4 <_printf_float+0x1f4>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d12c      	bne.n	8008f0c <_printf_float+0x24c>
 8008eb2:	e764      	b.n	8008d7e <_printf_float+0xbe>
 8008eb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eb8:	f240 80e0 	bls.w	800907c <_printf_float+0x3bc>
 8008ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f7f7 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d034      	beq.n	8008f36 <_printf_float+0x276>
 8008ecc:	4a37      	ldr	r2, [pc, #220]	; (8008fac <_printf_float+0x2ec>)
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f43f af51 	beq.w	8008d7e <_printf_float+0xbe>
 8008edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	db02      	blt.n	8008eea <_printf_float+0x22a>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	07d8      	lsls	r0, r3, #31
 8008ee8:	d510      	bpl.n	8008f0c <_printf_float+0x24c>
 8008eea:	ee18 3a10 	vmov	r3, s16
 8008eee:	4652      	mov	r2, sl
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f af41 	beq.w	8008d7e <_printf_float+0xbe>
 8008efc:	f04f 0800 	mov.w	r8, #0
 8008f00:	f104 091a 	add.w	r9, r4, #26
 8008f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f06:	3b01      	subs	r3, #1
 8008f08:	4543      	cmp	r3, r8
 8008f0a:	dc09      	bgt.n	8008f20 <_printf_float+0x260>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	079b      	lsls	r3, r3, #30
 8008f10:	f100 8107 	bmi.w	8009122 <_printf_float+0x462>
 8008f14:	68e0      	ldr	r0, [r4, #12]
 8008f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f18:	4298      	cmp	r0, r3
 8008f1a:	bfb8      	it	lt
 8008f1c:	4618      	movlt	r0, r3
 8008f1e:	e730      	b.n	8008d82 <_printf_float+0xc2>
 8008f20:	2301      	movs	r3, #1
 8008f22:	464a      	mov	r2, r9
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	f43f af27 	beq.w	8008d7e <_printf_float+0xbe>
 8008f30:	f108 0801 	add.w	r8, r8, #1
 8008f34:	e7e6      	b.n	8008f04 <_printf_float+0x244>
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dc39      	bgt.n	8008fb0 <_printf_float+0x2f0>
 8008f3c:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <_printf_float+0x2ec>)
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f af19 	beq.w	8008d7e <_printf_float+0xbe>
 8008f4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f50:	4313      	orrs	r3, r2
 8008f52:	d102      	bne.n	8008f5a <_printf_float+0x29a>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	07d9      	lsls	r1, r3, #31
 8008f58:	d5d8      	bpl.n	8008f0c <_printf_float+0x24c>
 8008f5a:	ee18 3a10 	vmov	r3, s16
 8008f5e:	4652      	mov	r2, sl
 8008f60:	4631      	mov	r1, r6
 8008f62:	4628      	mov	r0, r5
 8008f64:	47b8      	blx	r7
 8008f66:	3001      	adds	r0, #1
 8008f68:	f43f af09 	beq.w	8008d7e <_printf_float+0xbe>
 8008f6c:	f04f 0900 	mov.w	r9, #0
 8008f70:	f104 0a1a 	add.w	sl, r4, #26
 8008f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f76:	425b      	negs	r3, r3
 8008f78:	454b      	cmp	r3, r9
 8008f7a:	dc01      	bgt.n	8008f80 <_printf_float+0x2c0>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	e792      	b.n	8008ea6 <_printf_float+0x1e6>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4652      	mov	r2, sl
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	f43f aef7 	beq.w	8008d7e <_printf_float+0xbe>
 8008f90:	f109 0901 	add.w	r9, r9, #1
 8008f94:	e7ee      	b.n	8008f74 <_printf_float+0x2b4>
 8008f96:	bf00      	nop
 8008f98:	7fefffff 	.word	0x7fefffff
 8008f9c:	0800d4c4 	.word	0x0800d4c4
 8008fa0:	0800d4c8 	.word	0x0800d4c8
 8008fa4:	0800d4cc 	.word	0x0800d4cc
 8008fa8:	0800d4d0 	.word	0x0800d4d0
 8008fac:	0800d4d4 	.word	0x0800d4d4
 8008fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	bfa8      	it	ge
 8008fb8:	461a      	movge	r2, r3
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	4691      	mov	r9, r2
 8008fbe:	dc37      	bgt.n	8009030 <_printf_float+0x370>
 8008fc0:	f04f 0b00 	mov.w	fp, #0
 8008fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc8:	f104 021a 	add.w	r2, r4, #26
 8008fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	eba3 0309 	sub.w	r3, r3, r9
 8008fd4:	455b      	cmp	r3, fp
 8008fd6:	dc33      	bgt.n	8009040 <_printf_float+0x380>
 8008fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	db3b      	blt.n	8009058 <_printf_float+0x398>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	07da      	lsls	r2, r3, #31
 8008fe4:	d438      	bmi.n	8009058 <_printf_float+0x398>
 8008fe6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008fea:	eba2 0903 	sub.w	r9, r2, r3
 8008fee:	9b05      	ldr	r3, [sp, #20]
 8008ff0:	1ad2      	subs	r2, r2, r3
 8008ff2:	4591      	cmp	r9, r2
 8008ff4:	bfa8      	it	ge
 8008ff6:	4691      	movge	r9, r2
 8008ff8:	f1b9 0f00 	cmp.w	r9, #0
 8008ffc:	dc35      	bgt.n	800906a <_printf_float+0x3aa>
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009006:	f104 0a1a 	add.w	sl, r4, #26
 800900a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800900e:	1a9b      	subs	r3, r3, r2
 8009010:	eba3 0309 	sub.w	r3, r3, r9
 8009014:	4543      	cmp	r3, r8
 8009016:	f77f af79 	ble.w	8008f0c <_printf_float+0x24c>
 800901a:	2301      	movs	r3, #1
 800901c:	4652      	mov	r2, sl
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f aeaa 	beq.w	8008d7e <_printf_float+0xbe>
 800902a:	f108 0801 	add.w	r8, r8, #1
 800902e:	e7ec      	b.n	800900a <_printf_float+0x34a>
 8009030:	4613      	mov	r3, r2
 8009032:	4631      	mov	r1, r6
 8009034:	4642      	mov	r2, r8
 8009036:	4628      	mov	r0, r5
 8009038:	47b8      	blx	r7
 800903a:	3001      	adds	r0, #1
 800903c:	d1c0      	bne.n	8008fc0 <_printf_float+0x300>
 800903e:	e69e      	b.n	8008d7e <_printf_float+0xbe>
 8009040:	2301      	movs	r3, #1
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	9205      	str	r2, [sp, #20]
 8009048:	47b8      	blx	r7
 800904a:	3001      	adds	r0, #1
 800904c:	f43f ae97 	beq.w	8008d7e <_printf_float+0xbe>
 8009050:	9a05      	ldr	r2, [sp, #20]
 8009052:	f10b 0b01 	add.w	fp, fp, #1
 8009056:	e7b9      	b.n	8008fcc <_printf_float+0x30c>
 8009058:	ee18 3a10 	vmov	r3, s16
 800905c:	4652      	mov	r2, sl
 800905e:	4631      	mov	r1, r6
 8009060:	4628      	mov	r0, r5
 8009062:	47b8      	blx	r7
 8009064:	3001      	adds	r0, #1
 8009066:	d1be      	bne.n	8008fe6 <_printf_float+0x326>
 8009068:	e689      	b.n	8008d7e <_printf_float+0xbe>
 800906a:	9a05      	ldr	r2, [sp, #20]
 800906c:	464b      	mov	r3, r9
 800906e:	4442      	add	r2, r8
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	d1c1      	bne.n	8008ffe <_printf_float+0x33e>
 800907a:	e680      	b.n	8008d7e <_printf_float+0xbe>
 800907c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907e:	2a01      	cmp	r2, #1
 8009080:	dc01      	bgt.n	8009086 <_printf_float+0x3c6>
 8009082:	07db      	lsls	r3, r3, #31
 8009084:	d53a      	bpl.n	80090fc <_printf_float+0x43c>
 8009086:	2301      	movs	r3, #1
 8009088:	4642      	mov	r2, r8
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	f43f ae74 	beq.w	8008d7e <_printf_float+0xbe>
 8009096:	ee18 3a10 	vmov	r3, s16
 800909a:	4652      	mov	r2, sl
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f ae6b 	beq.w	8008d7e <_printf_float+0xbe>
 80090a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ac:	2200      	movs	r2, #0
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80090b4:	f7f7 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b8:	b9d8      	cbnz	r0, 80090f2 <_printf_float+0x432>
 80090ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80090be:	f108 0201 	add.w	r2, r8, #1
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	d10e      	bne.n	80090ea <_printf_float+0x42a>
 80090cc:	e657      	b.n	8008d7e <_printf_float+0xbe>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4652      	mov	r2, sl
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae50 	beq.w	8008d7e <_printf_float+0xbe>
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e4:	3b01      	subs	r3, #1
 80090e6:	4543      	cmp	r3, r8
 80090e8:	dcf1      	bgt.n	80090ce <_printf_float+0x40e>
 80090ea:	464b      	mov	r3, r9
 80090ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090f0:	e6da      	b.n	8008ea8 <_printf_float+0x1e8>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 0a1a 	add.w	sl, r4, #26
 80090fa:	e7f2      	b.n	80090e2 <_printf_float+0x422>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4642      	mov	r2, r8
 8009100:	e7df      	b.n	80090c2 <_printf_float+0x402>
 8009102:	2301      	movs	r3, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f ae36 	beq.w	8008d7e <_printf_float+0xbe>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800911a:	1a5b      	subs	r3, r3, r1
 800911c:	4543      	cmp	r3, r8
 800911e:	dcf0      	bgt.n	8009102 <_printf_float+0x442>
 8009120:	e6f8      	b.n	8008f14 <_printf_float+0x254>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	f104 0919 	add.w	r9, r4, #25
 800912a:	e7f4      	b.n	8009116 <_printf_float+0x456>

0800912c <_printf_common>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	4616      	mov	r6, r2
 8009132:	4699      	mov	r9, r3
 8009134:	688a      	ldr	r2, [r1, #8]
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800913c:	4293      	cmp	r3, r2
 800913e:	bfb8      	it	lt
 8009140:	4613      	movlt	r3, r2
 8009142:	6033      	str	r3, [r6, #0]
 8009144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009148:	4607      	mov	r7, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b10a      	cbz	r2, 8009152 <_printf_common+0x26>
 800914e:	3301      	adds	r3, #1
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	0699      	lsls	r1, r3, #26
 8009156:	bf42      	ittt	mi
 8009158:	6833      	ldrmi	r3, [r6, #0]
 800915a:	3302      	addmi	r3, #2
 800915c:	6033      	strmi	r3, [r6, #0]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d106      	bne.n	8009174 <_printf_common+0x48>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	6832      	ldr	r2, [r6, #0]
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	42ab      	cmp	r3, r5
 8009172:	dc26      	bgt.n	80091c2 <_printf_common+0x96>
 8009174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009178:	1e13      	subs	r3, r2, #0
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	bf18      	it	ne
 800917e:	2301      	movne	r3, #1
 8009180:	0692      	lsls	r2, r2, #26
 8009182:	d42b      	bmi.n	80091dc <_printf_common+0xb0>
 8009184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d01e      	beq.n	80091d0 <_printf_common+0xa4>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	6922      	ldr	r2, [r4, #16]
 8009196:	f003 0306 	and.w	r3, r3, #6
 800919a:	2b04      	cmp	r3, #4
 800919c:	bf02      	ittt	eq
 800919e:	68e5      	ldreq	r5, [r4, #12]
 80091a0:	6833      	ldreq	r3, [r6, #0]
 80091a2:	1aed      	subeq	r5, r5, r3
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	bf0c      	ite	eq
 80091a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ac:	2500      	movne	r5, #0
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bfc4      	itt	gt
 80091b2:	1a9b      	subgt	r3, r3, r2
 80091b4:	18ed      	addgt	r5, r5, r3
 80091b6:	2600      	movs	r6, #0
 80091b8:	341a      	adds	r4, #26
 80091ba:	42b5      	cmp	r5, r6
 80091bc:	d11a      	bne.n	80091f4 <_printf_common+0xc8>
 80091be:	2000      	movs	r0, #0
 80091c0:	e008      	b.n	80091d4 <_printf_common+0xa8>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4652      	mov	r2, sl
 80091c6:	4649      	mov	r1, r9
 80091c8:	4638      	mov	r0, r7
 80091ca:	47c0      	blx	r8
 80091cc:	3001      	adds	r0, #1
 80091ce:	d103      	bne.n	80091d8 <_printf_common+0xac>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	3501      	adds	r5, #1
 80091da:	e7c6      	b.n	800916a <_printf_common+0x3e>
 80091dc:	18e1      	adds	r1, r4, r3
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	2030      	movs	r0, #48	; 0x30
 80091e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091e6:	4422      	add	r2, r4
 80091e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f0:	3302      	adds	r3, #2
 80091f2:	e7c7      	b.n	8009184 <_printf_common+0x58>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4622      	mov	r2, r4
 80091f8:	4649      	mov	r1, r9
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c0      	blx	r8
 80091fe:	3001      	adds	r0, #1
 8009200:	d0e6      	beq.n	80091d0 <_printf_common+0xa4>
 8009202:	3601      	adds	r6, #1
 8009204:	e7d9      	b.n	80091ba <_printf_common+0x8e>
	...

08009208 <_printf_i>:
 8009208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	7e0f      	ldrb	r7, [r1, #24]
 800920e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009210:	2f78      	cmp	r7, #120	; 0x78
 8009212:	4691      	mov	r9, r2
 8009214:	4680      	mov	r8, r0
 8009216:	460c      	mov	r4, r1
 8009218:	469a      	mov	sl, r3
 800921a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800921e:	d807      	bhi.n	8009230 <_printf_i+0x28>
 8009220:	2f62      	cmp	r7, #98	; 0x62
 8009222:	d80a      	bhi.n	800923a <_printf_i+0x32>
 8009224:	2f00      	cmp	r7, #0
 8009226:	f000 80d4 	beq.w	80093d2 <_printf_i+0x1ca>
 800922a:	2f58      	cmp	r7, #88	; 0x58
 800922c:	f000 80c0 	beq.w	80093b0 <_printf_i+0x1a8>
 8009230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009238:	e03a      	b.n	80092b0 <_printf_i+0xa8>
 800923a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800923e:	2b15      	cmp	r3, #21
 8009240:	d8f6      	bhi.n	8009230 <_printf_i+0x28>
 8009242:	a101      	add	r1, pc, #4	; (adr r1, 8009248 <_printf_i+0x40>)
 8009244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009248:	080092a1 	.word	0x080092a1
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009231 	.word	0x08009231
 8009254:	08009231 	.word	0x08009231
 8009258:	08009231 	.word	0x08009231
 800925c:	08009231 	.word	0x08009231
 8009260:	080092b5 	.word	0x080092b5
 8009264:	08009231 	.word	0x08009231
 8009268:	08009231 	.word	0x08009231
 800926c:	08009231 	.word	0x08009231
 8009270:	08009231 	.word	0x08009231
 8009274:	080093b9 	.word	0x080093b9
 8009278:	080092e1 	.word	0x080092e1
 800927c:	08009373 	.word	0x08009373
 8009280:	08009231 	.word	0x08009231
 8009284:	08009231 	.word	0x08009231
 8009288:	080093db 	.word	0x080093db
 800928c:	08009231 	.word	0x08009231
 8009290:	080092e1 	.word	0x080092e1
 8009294:	08009231 	.word	0x08009231
 8009298:	08009231 	.word	0x08009231
 800929c:	0800937b 	.word	0x0800937b
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	602a      	str	r2, [r5, #0]
 80092a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e09f      	b.n	80093f4 <_printf_i+0x1ec>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	0607      	lsls	r7, r0, #24
 80092ba:	f103 0104 	add.w	r1, r3, #4
 80092be:	6029      	str	r1, [r5, #0]
 80092c0:	d501      	bpl.n	80092c6 <_printf_i+0xbe>
 80092c2:	681e      	ldr	r6, [r3, #0]
 80092c4:	e003      	b.n	80092ce <_printf_i+0xc6>
 80092c6:	0646      	lsls	r6, r0, #25
 80092c8:	d5fb      	bpl.n	80092c2 <_printf_i+0xba>
 80092ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	da03      	bge.n	80092da <_printf_i+0xd2>
 80092d2:	232d      	movs	r3, #45	; 0x2d
 80092d4:	4276      	negs	r6, r6
 80092d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092da:	485a      	ldr	r0, [pc, #360]	; (8009444 <_printf_i+0x23c>)
 80092dc:	230a      	movs	r3, #10
 80092de:	e012      	b.n	8009306 <_printf_i+0xfe>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	6820      	ldr	r0, [r4, #0]
 80092e4:	1d19      	adds	r1, r3, #4
 80092e6:	6029      	str	r1, [r5, #0]
 80092e8:	0605      	lsls	r5, r0, #24
 80092ea:	d501      	bpl.n	80092f0 <_printf_i+0xe8>
 80092ec:	681e      	ldr	r6, [r3, #0]
 80092ee:	e002      	b.n	80092f6 <_printf_i+0xee>
 80092f0:	0641      	lsls	r1, r0, #25
 80092f2:	d5fb      	bpl.n	80092ec <_printf_i+0xe4>
 80092f4:	881e      	ldrh	r6, [r3, #0]
 80092f6:	4853      	ldr	r0, [pc, #332]	; (8009444 <_printf_i+0x23c>)
 80092f8:	2f6f      	cmp	r7, #111	; 0x6f
 80092fa:	bf0c      	ite	eq
 80092fc:	2308      	moveq	r3, #8
 80092fe:	230a      	movne	r3, #10
 8009300:	2100      	movs	r1, #0
 8009302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009306:	6865      	ldr	r5, [r4, #4]
 8009308:	60a5      	str	r5, [r4, #8]
 800930a:	2d00      	cmp	r5, #0
 800930c:	bfa2      	ittt	ge
 800930e:	6821      	ldrge	r1, [r4, #0]
 8009310:	f021 0104 	bicge.w	r1, r1, #4
 8009314:	6021      	strge	r1, [r4, #0]
 8009316:	b90e      	cbnz	r6, 800931c <_printf_i+0x114>
 8009318:	2d00      	cmp	r5, #0
 800931a:	d04b      	beq.n	80093b4 <_printf_i+0x1ac>
 800931c:	4615      	mov	r5, r2
 800931e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009322:	fb03 6711 	mls	r7, r3, r1, r6
 8009326:	5dc7      	ldrb	r7, [r0, r7]
 8009328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800932c:	4637      	mov	r7, r6
 800932e:	42bb      	cmp	r3, r7
 8009330:	460e      	mov	r6, r1
 8009332:	d9f4      	bls.n	800931e <_printf_i+0x116>
 8009334:	2b08      	cmp	r3, #8
 8009336:	d10b      	bne.n	8009350 <_printf_i+0x148>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	07de      	lsls	r6, r3, #31
 800933c:	d508      	bpl.n	8009350 <_printf_i+0x148>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	6861      	ldr	r1, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	bfde      	ittt	le
 8009346:	2330      	movle	r3, #48	; 0x30
 8009348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800934c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009350:	1b52      	subs	r2, r2, r5
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	f8cd a000 	str.w	sl, [sp]
 8009358:	464b      	mov	r3, r9
 800935a:	aa03      	add	r2, sp, #12
 800935c:	4621      	mov	r1, r4
 800935e:	4640      	mov	r0, r8
 8009360:	f7ff fee4 	bl	800912c <_printf_common>
 8009364:	3001      	adds	r0, #1
 8009366:	d14a      	bne.n	80093fe <_printf_i+0x1f6>
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	b004      	add	sp, #16
 800936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	f043 0320 	orr.w	r3, r3, #32
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	4833      	ldr	r0, [pc, #204]	; (8009448 <_printf_i+0x240>)
 800937c:	2778      	movs	r7, #120	; 0x78
 800937e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	6829      	ldr	r1, [r5, #0]
 8009386:	061f      	lsls	r7, r3, #24
 8009388:	f851 6b04 	ldr.w	r6, [r1], #4
 800938c:	d402      	bmi.n	8009394 <_printf_i+0x18c>
 800938e:	065f      	lsls	r7, r3, #25
 8009390:	bf48      	it	mi
 8009392:	b2b6      	uxthmi	r6, r6
 8009394:	07df      	lsls	r7, r3, #31
 8009396:	bf48      	it	mi
 8009398:	f043 0320 	orrmi.w	r3, r3, #32
 800939c:	6029      	str	r1, [r5, #0]
 800939e:	bf48      	it	mi
 80093a0:	6023      	strmi	r3, [r4, #0]
 80093a2:	b91e      	cbnz	r6, 80093ac <_printf_i+0x1a4>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	f023 0320 	bic.w	r3, r3, #32
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	2310      	movs	r3, #16
 80093ae:	e7a7      	b.n	8009300 <_printf_i+0xf8>
 80093b0:	4824      	ldr	r0, [pc, #144]	; (8009444 <_printf_i+0x23c>)
 80093b2:	e7e4      	b.n	800937e <_printf_i+0x176>
 80093b4:	4615      	mov	r5, r2
 80093b6:	e7bd      	b.n	8009334 <_printf_i+0x12c>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	6826      	ldr	r6, [r4, #0]
 80093bc:	6961      	ldr	r1, [r4, #20]
 80093be:	1d18      	adds	r0, r3, #4
 80093c0:	6028      	str	r0, [r5, #0]
 80093c2:	0635      	lsls	r5, r6, #24
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0x1c4>
 80093c8:	6019      	str	r1, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0x1ca>
 80093cc:	0670      	lsls	r0, r6, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0x1c0>
 80093d0:	8019      	strh	r1, [r3, #0]
 80093d2:	2300      	movs	r3, #0
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	4615      	mov	r5, r2
 80093d8:	e7bc      	b.n	8009354 <_printf_i+0x14c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	6862      	ldr	r2, [r4, #4]
 80093e4:	2100      	movs	r1, #0
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7f6 fef2 	bl	80001d0 <memchr>
 80093ec:	b108      	cbz	r0, 80093f2 <_printf_i+0x1ea>
 80093ee:	1b40      	subs	r0, r0, r5
 80093f0:	6060      	str	r0, [r4, #4]
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	2300      	movs	r3, #0
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fc:	e7aa      	b.n	8009354 <_printf_i+0x14c>
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	462a      	mov	r2, r5
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d0ad      	beq.n	8009368 <_printf_i+0x160>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	079b      	lsls	r3, r3, #30
 8009410:	d413      	bmi.n	800943a <_printf_i+0x232>
 8009412:	68e0      	ldr	r0, [r4, #12]
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	4298      	cmp	r0, r3
 8009418:	bfb8      	it	lt
 800941a:	4618      	movlt	r0, r3
 800941c:	e7a6      	b.n	800936c <_printf_i+0x164>
 800941e:	2301      	movs	r3, #1
 8009420:	4632      	mov	r2, r6
 8009422:	4649      	mov	r1, r9
 8009424:	4640      	mov	r0, r8
 8009426:	47d0      	blx	sl
 8009428:	3001      	adds	r0, #1
 800942a:	d09d      	beq.n	8009368 <_printf_i+0x160>
 800942c:	3501      	adds	r5, #1
 800942e:	68e3      	ldr	r3, [r4, #12]
 8009430:	9903      	ldr	r1, [sp, #12]
 8009432:	1a5b      	subs	r3, r3, r1
 8009434:	42ab      	cmp	r3, r5
 8009436:	dcf2      	bgt.n	800941e <_printf_i+0x216>
 8009438:	e7eb      	b.n	8009412 <_printf_i+0x20a>
 800943a:	2500      	movs	r5, #0
 800943c:	f104 0619 	add.w	r6, r4, #25
 8009440:	e7f5      	b.n	800942e <_printf_i+0x226>
 8009442:	bf00      	nop
 8009444:	0800d4d6 	.word	0x0800d4d6
 8009448:	0800d4e7 	.word	0x0800d4e7

0800944c <_scanf_float>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	b087      	sub	sp, #28
 8009452:	4617      	mov	r7, r2
 8009454:	9303      	str	r3, [sp, #12]
 8009456:	688b      	ldr	r3, [r1, #8]
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800945e:	bf83      	ittte	hi
 8009460:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009464:	195b      	addhi	r3, r3, r5
 8009466:	9302      	strhi	r3, [sp, #8]
 8009468:	2300      	movls	r3, #0
 800946a:	bf86      	itte	hi
 800946c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009470:	608b      	strhi	r3, [r1, #8]
 8009472:	9302      	strls	r3, [sp, #8]
 8009474:	680b      	ldr	r3, [r1, #0]
 8009476:	468b      	mov	fp, r1
 8009478:	2500      	movs	r5, #0
 800947a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800947e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009482:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009486:	4680      	mov	r8, r0
 8009488:	460c      	mov	r4, r1
 800948a:	465e      	mov	r6, fp
 800948c:	46aa      	mov	sl, r5
 800948e:	46a9      	mov	r9, r5
 8009490:	9501      	str	r5, [sp, #4]
 8009492:	68a2      	ldr	r2, [r4, #8]
 8009494:	b152      	cbz	r2, 80094ac <_scanf_float+0x60>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b4e      	cmp	r3, #78	; 0x4e
 800949c:	d864      	bhi.n	8009568 <_scanf_float+0x11c>
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d83c      	bhi.n	800951c <_scanf_float+0xd0>
 80094a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094a6:	b2c8      	uxtb	r0, r1
 80094a8:	280e      	cmp	r0, #14
 80094aa:	d93a      	bls.n	8009522 <_scanf_float+0xd6>
 80094ac:	f1b9 0f00 	cmp.w	r9, #0
 80094b0:	d003      	beq.n	80094ba <_scanf_float+0x6e>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094be:	f1ba 0f01 	cmp.w	sl, #1
 80094c2:	f200 8113 	bhi.w	80096ec <_scanf_float+0x2a0>
 80094c6:	455e      	cmp	r6, fp
 80094c8:	f200 8105 	bhi.w	80096d6 <_scanf_float+0x28a>
 80094cc:	2501      	movs	r5, #1
 80094ce:	4628      	mov	r0, r5
 80094d0:	b007      	add	sp, #28
 80094d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094da:	2a0d      	cmp	r2, #13
 80094dc:	d8e6      	bhi.n	80094ac <_scanf_float+0x60>
 80094de:	a101      	add	r1, pc, #4	; (adr r1, 80094e4 <_scanf_float+0x98>)
 80094e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094e4:	08009623 	.word	0x08009623
 80094e8:	080094ad 	.word	0x080094ad
 80094ec:	080094ad 	.word	0x080094ad
 80094f0:	080094ad 	.word	0x080094ad
 80094f4:	08009683 	.word	0x08009683
 80094f8:	0800965b 	.word	0x0800965b
 80094fc:	080094ad 	.word	0x080094ad
 8009500:	080094ad 	.word	0x080094ad
 8009504:	08009631 	.word	0x08009631
 8009508:	080094ad 	.word	0x080094ad
 800950c:	080094ad 	.word	0x080094ad
 8009510:	080094ad 	.word	0x080094ad
 8009514:	080094ad 	.word	0x080094ad
 8009518:	080095e9 	.word	0x080095e9
 800951c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009520:	e7db      	b.n	80094da <_scanf_float+0x8e>
 8009522:	290e      	cmp	r1, #14
 8009524:	d8c2      	bhi.n	80094ac <_scanf_float+0x60>
 8009526:	a001      	add	r0, pc, #4	; (adr r0, 800952c <_scanf_float+0xe0>)
 8009528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800952c:	080095db 	.word	0x080095db
 8009530:	080094ad 	.word	0x080094ad
 8009534:	080095db 	.word	0x080095db
 8009538:	0800966f 	.word	0x0800966f
 800953c:	080094ad 	.word	0x080094ad
 8009540:	08009589 	.word	0x08009589
 8009544:	080095c5 	.word	0x080095c5
 8009548:	080095c5 	.word	0x080095c5
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095c5 	.word	0x080095c5
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095c5 	.word	0x080095c5
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	2b6e      	cmp	r3, #110	; 0x6e
 800956a:	d809      	bhi.n	8009580 <_scanf_float+0x134>
 800956c:	2b60      	cmp	r3, #96	; 0x60
 800956e:	d8b2      	bhi.n	80094d6 <_scanf_float+0x8a>
 8009570:	2b54      	cmp	r3, #84	; 0x54
 8009572:	d077      	beq.n	8009664 <_scanf_float+0x218>
 8009574:	2b59      	cmp	r3, #89	; 0x59
 8009576:	d199      	bne.n	80094ac <_scanf_float+0x60>
 8009578:	2d07      	cmp	r5, #7
 800957a:	d197      	bne.n	80094ac <_scanf_float+0x60>
 800957c:	2508      	movs	r5, #8
 800957e:	e029      	b.n	80095d4 <_scanf_float+0x188>
 8009580:	2b74      	cmp	r3, #116	; 0x74
 8009582:	d06f      	beq.n	8009664 <_scanf_float+0x218>
 8009584:	2b79      	cmp	r3, #121	; 0x79
 8009586:	e7f6      	b.n	8009576 <_scanf_float+0x12a>
 8009588:	6821      	ldr	r1, [r4, #0]
 800958a:	05c8      	lsls	r0, r1, #23
 800958c:	d51a      	bpl.n	80095c4 <_scanf_float+0x178>
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009594:	6021      	str	r1, [r4, #0]
 8009596:	f109 0901 	add.w	r9, r9, #1
 800959a:	b11b      	cbz	r3, 80095a4 <_scanf_float+0x158>
 800959c:	3b01      	subs	r3, #1
 800959e:	3201      	adds	r2, #1
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	60a2      	str	r2, [r4, #8]
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	f340 8084 	ble.w	80096c4 <_scanf_float+0x278>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3301      	adds	r3, #1
 80095c0:	603b      	str	r3, [r7, #0]
 80095c2:	e766      	b.n	8009492 <_scanf_float+0x46>
 80095c4:	eb1a 0f05 	cmn.w	sl, r5
 80095c8:	f47f af70 	bne.w	80094ac <_scanf_float+0x60>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095d2:	6022      	str	r2, [r4, #0]
 80095d4:	f806 3b01 	strb.w	r3, [r6], #1
 80095d8:	e7e4      	b.n	80095a4 <_scanf_float+0x158>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	0610      	lsls	r0, r2, #24
 80095de:	f57f af65 	bpl.w	80094ac <_scanf_float+0x60>
 80095e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095e6:	e7f4      	b.n	80095d2 <_scanf_float+0x186>
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	d10e      	bne.n	800960c <_scanf_float+0x1c0>
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	d10e      	bne.n	8009612 <_scanf_float+0x1c6>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095fe:	d108      	bne.n	8009612 <_scanf_float+0x1c6>
 8009600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	f04f 0a01 	mov.w	sl, #1
 800960a:	e7e3      	b.n	80095d4 <_scanf_float+0x188>
 800960c:	f1ba 0f02 	cmp.w	sl, #2
 8009610:	d055      	beq.n	80096be <_scanf_float+0x272>
 8009612:	2d01      	cmp	r5, #1
 8009614:	d002      	beq.n	800961c <_scanf_float+0x1d0>
 8009616:	2d04      	cmp	r5, #4
 8009618:	f47f af48 	bne.w	80094ac <_scanf_float+0x60>
 800961c:	3501      	adds	r5, #1
 800961e:	b2ed      	uxtb	r5, r5
 8009620:	e7d8      	b.n	80095d4 <_scanf_float+0x188>
 8009622:	f1ba 0f01 	cmp.w	sl, #1
 8009626:	f47f af41 	bne.w	80094ac <_scanf_float+0x60>
 800962a:	f04f 0a02 	mov.w	sl, #2
 800962e:	e7d1      	b.n	80095d4 <_scanf_float+0x188>
 8009630:	b97d      	cbnz	r5, 8009652 <_scanf_float+0x206>
 8009632:	f1b9 0f00 	cmp.w	r9, #0
 8009636:	f47f af3c 	bne.w	80094b2 <_scanf_float+0x66>
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009640:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009644:	f47f af39 	bne.w	80094ba <_scanf_float+0x6e>
 8009648:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800964c:	6022      	str	r2, [r4, #0]
 800964e:	2501      	movs	r5, #1
 8009650:	e7c0      	b.n	80095d4 <_scanf_float+0x188>
 8009652:	2d03      	cmp	r5, #3
 8009654:	d0e2      	beq.n	800961c <_scanf_float+0x1d0>
 8009656:	2d05      	cmp	r5, #5
 8009658:	e7de      	b.n	8009618 <_scanf_float+0x1cc>
 800965a:	2d02      	cmp	r5, #2
 800965c:	f47f af26 	bne.w	80094ac <_scanf_float+0x60>
 8009660:	2503      	movs	r5, #3
 8009662:	e7b7      	b.n	80095d4 <_scanf_float+0x188>
 8009664:	2d06      	cmp	r5, #6
 8009666:	f47f af21 	bne.w	80094ac <_scanf_float+0x60>
 800966a:	2507      	movs	r5, #7
 800966c:	e7b2      	b.n	80095d4 <_scanf_float+0x188>
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	0591      	lsls	r1, r2, #22
 8009672:	f57f af1b 	bpl.w	80094ac <_scanf_float+0x60>
 8009676:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009680:	e7a8      	b.n	80095d4 <_scanf_float+0x188>
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009688:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800968c:	d006      	beq.n	800969c <_scanf_float+0x250>
 800968e:	0550      	lsls	r0, r2, #21
 8009690:	f57f af0c 	bpl.w	80094ac <_scanf_float+0x60>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	f43f af0f 	beq.w	80094ba <_scanf_float+0x6e>
 800969c:	0591      	lsls	r1, r2, #22
 800969e:	bf58      	it	pl
 80096a0:	9901      	ldrpl	r1, [sp, #4]
 80096a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096a6:	bf58      	it	pl
 80096a8:	eba9 0101 	subpl.w	r1, r9, r1
 80096ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096b0:	bf58      	it	pl
 80096b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	f04f 0900 	mov.w	r9, #0
 80096bc:	e78a      	b.n	80095d4 <_scanf_float+0x188>
 80096be:	f04f 0a03 	mov.w	sl, #3
 80096c2:	e787      	b.n	80095d4 <_scanf_float+0x188>
 80096c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096c8:	4639      	mov	r1, r7
 80096ca:	4640      	mov	r0, r8
 80096cc:	4798      	blx	r3
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f aedf 	beq.w	8009492 <_scanf_float+0x46>
 80096d4:	e6ea      	b.n	80094ac <_scanf_float+0x60>
 80096d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096de:	463a      	mov	r2, r7
 80096e0:	4640      	mov	r0, r8
 80096e2:	4798      	blx	r3
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e6ec      	b.n	80094c6 <_scanf_float+0x7a>
 80096ec:	1e6b      	subs	r3, r5, #1
 80096ee:	2b06      	cmp	r3, #6
 80096f0:	d825      	bhi.n	800973e <_scanf_float+0x2f2>
 80096f2:	2d02      	cmp	r5, #2
 80096f4:	d836      	bhi.n	8009764 <_scanf_float+0x318>
 80096f6:	455e      	cmp	r6, fp
 80096f8:	f67f aee8 	bls.w	80094cc <_scanf_float+0x80>
 80096fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009700:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009704:	463a      	mov	r2, r7
 8009706:	4640      	mov	r0, r8
 8009708:	4798      	blx	r3
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	3b01      	subs	r3, #1
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	e7f1      	b.n	80096f6 <_scanf_float+0x2aa>
 8009712:	9802      	ldr	r0, [sp, #8]
 8009714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009718:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800971c:	9002      	str	r0, [sp, #8]
 800971e:	463a      	mov	r2, r7
 8009720:	4640      	mov	r0, r8
 8009722:	4798      	blx	r3
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	3b01      	subs	r3, #1
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800972e:	fa5f fa8a 	uxtb.w	sl, sl
 8009732:	f1ba 0f02 	cmp.w	sl, #2
 8009736:	d1ec      	bne.n	8009712 <_scanf_float+0x2c6>
 8009738:	3d03      	subs	r5, #3
 800973a:	b2ed      	uxtb	r5, r5
 800973c:	1b76      	subs	r6, r6, r5
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	05da      	lsls	r2, r3, #23
 8009742:	d52f      	bpl.n	80097a4 <_scanf_float+0x358>
 8009744:	055b      	lsls	r3, r3, #21
 8009746:	d510      	bpl.n	800976a <_scanf_float+0x31e>
 8009748:	455e      	cmp	r6, fp
 800974a:	f67f aebf 	bls.w	80094cc <_scanf_float+0x80>
 800974e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009752:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009756:	463a      	mov	r2, r7
 8009758:	4640      	mov	r0, r8
 800975a:	4798      	blx	r3
 800975c:	6923      	ldr	r3, [r4, #16]
 800975e:	3b01      	subs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	e7f1      	b.n	8009748 <_scanf_float+0x2fc>
 8009764:	46aa      	mov	sl, r5
 8009766:	9602      	str	r6, [sp, #8]
 8009768:	e7df      	b.n	800972a <_scanf_float+0x2de>
 800976a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	2965      	cmp	r1, #101	; 0x65
 8009772:	f103 33ff 	add.w	r3, r3, #4294967295
 8009776:	f106 35ff 	add.w	r5, r6, #4294967295
 800977a:	6123      	str	r3, [r4, #16]
 800977c:	d00c      	beq.n	8009798 <_scanf_float+0x34c>
 800977e:	2945      	cmp	r1, #69	; 0x45
 8009780:	d00a      	beq.n	8009798 <_scanf_float+0x34c>
 8009782:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009786:	463a      	mov	r2, r7
 8009788:	4640      	mov	r0, r8
 800978a:	4798      	blx	r3
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009792:	3b01      	subs	r3, #1
 8009794:	1eb5      	subs	r5, r6, #2
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979c:	463a      	mov	r2, r7
 800979e:	4640      	mov	r0, r8
 80097a0:	4798      	blx	r3
 80097a2:	462e      	mov	r6, r5
 80097a4:	6825      	ldr	r5, [r4, #0]
 80097a6:	f015 0510 	ands.w	r5, r5, #16
 80097aa:	d158      	bne.n	800985e <_scanf_float+0x412>
 80097ac:	7035      	strb	r5, [r6, #0]
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b8:	d11c      	bne.n	80097f4 <_scanf_float+0x3a8>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	454b      	cmp	r3, r9
 80097be:	eba3 0209 	sub.w	r2, r3, r9
 80097c2:	d124      	bne.n	800980e <_scanf_float+0x3c2>
 80097c4:	2200      	movs	r2, #0
 80097c6:	4659      	mov	r1, fp
 80097c8:	4640      	mov	r0, r8
 80097ca:	f002 fd1d 	bl	800c208 <_strtod_r>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	6821      	ldr	r1, [r4, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f011 0f02 	tst.w	r1, #2
 80097d8:	ec57 6b10 	vmov	r6, r7, d0
 80097dc:	f103 0204 	add.w	r2, r3, #4
 80097e0:	d020      	beq.n	8009824 <_scanf_float+0x3d8>
 80097e2:	9903      	ldr	r1, [sp, #12]
 80097e4:	600a      	str	r2, [r1, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	e9c3 6700 	strd	r6, r7, [r3]
 80097ec:	68e3      	ldr	r3, [r4, #12]
 80097ee:	3301      	adds	r3, #1
 80097f0:	60e3      	str	r3, [r4, #12]
 80097f2:	e66c      	b.n	80094ce <_scanf_float+0x82>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0e4      	beq.n	80097c4 <_scanf_float+0x378>
 80097fa:	9905      	ldr	r1, [sp, #20]
 80097fc:	230a      	movs	r3, #10
 80097fe:	462a      	mov	r2, r5
 8009800:	3101      	adds	r1, #1
 8009802:	4640      	mov	r0, r8
 8009804:	f002 fd88 	bl	800c318 <_strtol_r>
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	9e05      	ldr	r6, [sp, #20]
 800980c:	1ac2      	subs	r2, r0, r3
 800980e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009812:	429e      	cmp	r6, r3
 8009814:	bf28      	it	cs
 8009816:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800981a:	4912      	ldr	r1, [pc, #72]	; (8009864 <_scanf_float+0x418>)
 800981c:	4630      	mov	r0, r6
 800981e:	f000 f943 	bl	8009aa8 <siprintf>
 8009822:	e7cf      	b.n	80097c4 <_scanf_float+0x378>
 8009824:	f011 0f04 	tst.w	r1, #4
 8009828:	9903      	ldr	r1, [sp, #12]
 800982a:	600a      	str	r2, [r1, #0]
 800982c:	d1db      	bne.n	80097e6 <_scanf_float+0x39a>
 800982e:	f8d3 8000 	ldr.w	r8, [r3]
 8009832:	ee10 2a10 	vmov	r2, s0
 8009836:	ee10 0a10 	vmov	r0, s0
 800983a:	463b      	mov	r3, r7
 800983c:	4639      	mov	r1, r7
 800983e:	f7f7 f975 	bl	8000b2c <__aeabi_dcmpun>
 8009842:	b128      	cbz	r0, 8009850 <_scanf_float+0x404>
 8009844:	4808      	ldr	r0, [pc, #32]	; (8009868 <_scanf_float+0x41c>)
 8009846:	f000 faa5 	bl	8009d94 <nanf>
 800984a:	ed88 0a00 	vstr	s0, [r8]
 800984e:	e7cd      	b.n	80097ec <_scanf_float+0x3a0>
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f7 f9c8 	bl	8000be8 <__aeabi_d2f>
 8009858:	f8c8 0000 	str.w	r0, [r8]
 800985c:	e7c6      	b.n	80097ec <_scanf_float+0x3a0>
 800985e:	2500      	movs	r5, #0
 8009860:	e635      	b.n	80094ce <_scanf_float+0x82>
 8009862:	bf00      	nop
 8009864:	0800d4f8 	.word	0x0800d4f8
 8009868:	0800d88d 	.word	0x0800d88d

0800986c <std>:
 800986c:	2300      	movs	r3, #0
 800986e:	b510      	push	{r4, lr}
 8009870:	4604      	mov	r4, r0
 8009872:	e9c0 3300 	strd	r3, r3, [r0]
 8009876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800987a:	6083      	str	r3, [r0, #8]
 800987c:	8181      	strh	r1, [r0, #12]
 800987e:	6643      	str	r3, [r0, #100]	; 0x64
 8009880:	81c2      	strh	r2, [r0, #14]
 8009882:	6183      	str	r3, [r0, #24]
 8009884:	4619      	mov	r1, r3
 8009886:	2208      	movs	r2, #8
 8009888:	305c      	adds	r0, #92	; 0x5c
 800988a:	f000 fa05 	bl	8009c98 <memset>
 800988e:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <std+0x38>)
 8009890:	6263      	str	r3, [r4, #36]	; 0x24
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <std+0x3c>)
 8009894:	62a3      	str	r3, [r4, #40]	; 0x28
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <std+0x40>)
 8009898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <std+0x44>)
 800989c:	6224      	str	r4, [r4, #32]
 800989e:	6323      	str	r3, [r4, #48]	; 0x30
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	bf00      	nop
 80098a4:	08009ae9 	.word	0x08009ae9
 80098a8:	08009b0b 	.word	0x08009b0b
 80098ac:	08009b43 	.word	0x08009b43
 80098b0:	08009b67 	.word	0x08009b67

080098b4 <stdio_exit_handler>:
 80098b4:	4a02      	ldr	r2, [pc, #8]	; (80098c0 <stdio_exit_handler+0xc>)
 80098b6:	4903      	ldr	r1, [pc, #12]	; (80098c4 <stdio_exit_handler+0x10>)
 80098b8:	4803      	ldr	r0, [pc, #12]	; (80098c8 <stdio_exit_handler+0x14>)
 80098ba:	f000 b869 	b.w	8009990 <_fwalk_sglue>
 80098be:	bf00      	nop
 80098c0:	2000000c 	.word	0x2000000c
 80098c4:	0800c961 	.word	0x0800c961
 80098c8:	20000018 	.word	0x20000018

080098cc <cleanup_stdio>:
 80098cc:	6841      	ldr	r1, [r0, #4]
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <cleanup_stdio+0x34>)
 80098d0:	4299      	cmp	r1, r3
 80098d2:	b510      	push	{r4, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	d001      	beq.n	80098dc <cleanup_stdio+0x10>
 80098d8:	f003 f842 	bl	800c960 <_fflush_r>
 80098dc:	68a1      	ldr	r1, [r4, #8]
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <cleanup_stdio+0x38>)
 80098e0:	4299      	cmp	r1, r3
 80098e2:	d002      	beq.n	80098ea <cleanup_stdio+0x1e>
 80098e4:	4620      	mov	r0, r4
 80098e6:	f003 f83b 	bl	800c960 <_fflush_r>
 80098ea:	68e1      	ldr	r1, [r4, #12]
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <cleanup_stdio+0x3c>)
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d004      	beq.n	80098fc <cleanup_stdio+0x30>
 80098f2:	4620      	mov	r0, r4
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	f003 b832 	b.w	800c960 <_fflush_r>
 80098fc:	bd10      	pop	{r4, pc}
 80098fe:	bf00      	nop
 8009900:	20000598 	.word	0x20000598
 8009904:	20000600 	.word	0x20000600
 8009908:	20000668 	.word	0x20000668

0800990c <global_stdio_init.part.0>:
 800990c:	b510      	push	{r4, lr}
 800990e:	4b0b      	ldr	r3, [pc, #44]	; (800993c <global_stdio_init.part.0+0x30>)
 8009910:	4c0b      	ldr	r4, [pc, #44]	; (8009940 <global_stdio_init.part.0+0x34>)
 8009912:	4a0c      	ldr	r2, [pc, #48]	; (8009944 <global_stdio_init.part.0+0x38>)
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	4620      	mov	r0, r4
 8009918:	2200      	movs	r2, #0
 800991a:	2104      	movs	r1, #4
 800991c:	f7ff ffa6 	bl	800986c <std>
 8009920:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009924:	2201      	movs	r2, #1
 8009926:	2109      	movs	r1, #9
 8009928:	f7ff ffa0 	bl	800986c <std>
 800992c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009930:	2202      	movs	r2, #2
 8009932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009936:	2112      	movs	r1, #18
 8009938:	f7ff bf98 	b.w	800986c <std>
 800993c:	200006d0 	.word	0x200006d0
 8009940:	20000598 	.word	0x20000598
 8009944:	080098b5 	.word	0x080098b5

08009948 <__sfp_lock_acquire>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__sfp_lock_acquire+0x8>)
 800994a:	f000 ba21 	b.w	8009d90 <__retarget_lock_acquire_recursive>
 800994e:	bf00      	nop
 8009950:	200006d9 	.word	0x200006d9

08009954 <__sfp_lock_release>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__sfp_lock_release+0x8>)
 8009956:	f000 ba1c 	b.w	8009d92 <__retarget_lock_release_recursive>
 800995a:	bf00      	nop
 800995c:	200006d9 	.word	0x200006d9

08009960 <__sinit>:
 8009960:	b510      	push	{r4, lr}
 8009962:	4604      	mov	r4, r0
 8009964:	f7ff fff0 	bl	8009948 <__sfp_lock_acquire>
 8009968:	6a23      	ldr	r3, [r4, #32]
 800996a:	b11b      	cbz	r3, 8009974 <__sinit+0x14>
 800996c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009970:	f7ff bff0 	b.w	8009954 <__sfp_lock_release>
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <__sinit+0x28>)
 8009976:	6223      	str	r3, [r4, #32]
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <__sinit+0x2c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1f5      	bne.n	800996c <__sinit+0xc>
 8009980:	f7ff ffc4 	bl	800990c <global_stdio_init.part.0>
 8009984:	e7f2      	b.n	800996c <__sinit+0xc>
 8009986:	bf00      	nop
 8009988:	080098cd 	.word	0x080098cd
 800998c:	200006d0 	.word	0x200006d0

08009990 <_fwalk_sglue>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	4607      	mov	r7, r0
 8009996:	4688      	mov	r8, r1
 8009998:	4614      	mov	r4, r2
 800999a:	2600      	movs	r6, #0
 800999c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a0:	f1b9 0901 	subs.w	r9, r9, #1
 80099a4:	d505      	bpl.n	80099b2 <_fwalk_sglue+0x22>
 80099a6:	6824      	ldr	r4, [r4, #0]
 80099a8:	2c00      	cmp	r4, #0
 80099aa:	d1f7      	bne.n	800999c <_fwalk_sglue+0xc>
 80099ac:	4630      	mov	r0, r6
 80099ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d907      	bls.n	80099c8 <_fwalk_sglue+0x38>
 80099b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099bc:	3301      	adds	r3, #1
 80099be:	d003      	beq.n	80099c8 <_fwalk_sglue+0x38>
 80099c0:	4629      	mov	r1, r5
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c0      	blx	r8
 80099c6:	4306      	orrs	r6, r0
 80099c8:	3568      	adds	r5, #104	; 0x68
 80099ca:	e7e9      	b.n	80099a0 <_fwalk_sglue+0x10>

080099cc <iprintf>:
 80099cc:	b40f      	push	{r0, r1, r2, r3}
 80099ce:	b507      	push	{r0, r1, r2, lr}
 80099d0:	4906      	ldr	r1, [pc, #24]	; (80099ec <iprintf+0x20>)
 80099d2:	ab04      	add	r3, sp, #16
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099da:	6881      	ldr	r1, [r0, #8]
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	f002 fe1f 	bl	800c620 <_vfiprintf_r>
 80099e2:	b003      	add	sp, #12
 80099e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e8:	b004      	add	sp, #16
 80099ea:	4770      	bx	lr
 80099ec:	20000064 	.word	0x20000064

080099f0 <_puts_r>:
 80099f0:	6a03      	ldr	r3, [r0, #32]
 80099f2:	b570      	push	{r4, r5, r6, lr}
 80099f4:	6884      	ldr	r4, [r0, #8]
 80099f6:	4605      	mov	r5, r0
 80099f8:	460e      	mov	r6, r1
 80099fa:	b90b      	cbnz	r3, 8009a00 <_puts_r+0x10>
 80099fc:	f7ff ffb0 	bl	8009960 <__sinit>
 8009a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a02:	07db      	lsls	r3, r3, #31
 8009a04:	d405      	bmi.n	8009a12 <_puts_r+0x22>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	0598      	lsls	r0, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_puts_r+0x22>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f000 f9bf 	bl	8009d90 <__retarget_lock_acquire_recursive>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	0719      	lsls	r1, r3, #28
 8009a16:	d513      	bpl.n	8009a40 <_puts_r+0x50>
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	b18b      	cbz	r3, 8009a40 <_puts_r+0x50>
 8009a1c:	3e01      	subs	r6, #1
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	b9e9      	cbnz	r1, 8009a66 <_puts_r+0x76>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da2e      	bge.n	8009a8c <_puts_r+0x9c>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	210a      	movs	r1, #10
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 f89b 	bl	8009b6e <__swbuf_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d007      	beq.n	8009a4c <_puts_r+0x5c>
 8009a3c:	250a      	movs	r5, #10
 8009a3e:	e007      	b.n	8009a50 <_puts_r+0x60>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f8d0 	bl	8009be8 <__swsetup_r>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d0e7      	beq.n	8009a1c <_puts_r+0x2c>
 8009a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8009a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a52:	07da      	lsls	r2, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_puts_r+0x72>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	059b      	lsls	r3, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_puts_r+0x72>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 f998 	bl	8009d92 <__retarget_lock_release_recursive>
 8009a62:	4628      	mov	r0, r5
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da04      	bge.n	8009a74 <_puts_r+0x84>
 8009a6a:	69a2      	ldr	r2, [r4, #24]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	dc06      	bgt.n	8009a7e <_puts_r+0x8e>
 8009a70:	290a      	cmp	r1, #10
 8009a72:	d004      	beq.n	8009a7e <_puts_r+0x8e>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	7019      	strb	r1, [r3, #0]
 8009a7c:	e7cf      	b.n	8009a1e <_puts_r+0x2e>
 8009a7e:	4622      	mov	r2, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f874 	bl	8009b6e <__swbuf_r>
 8009a86:	3001      	adds	r0, #1
 8009a88:	d1c9      	bne.n	8009a1e <_puts_r+0x2e>
 8009a8a:	e7df      	b.n	8009a4c <_puts_r+0x5c>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	250a      	movs	r5, #10
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	701d      	strb	r5, [r3, #0]
 8009a96:	e7db      	b.n	8009a50 <_puts_r+0x60>

08009a98 <puts>:
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <puts+0xc>)
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f7ff bfa7 	b.w	80099f0 <_puts_r>
 8009aa2:	bf00      	nop
 8009aa4:	20000064 	.word	0x20000064

08009aa8 <siprintf>:
 8009aa8:	b40e      	push	{r1, r2, r3}
 8009aaa:	b500      	push	{lr}
 8009aac:	b09c      	sub	sp, #112	; 0x70
 8009aae:	ab1d      	add	r3, sp, #116	; 0x74
 8009ab0:	9002      	str	r0, [sp, #8]
 8009ab2:	9006      	str	r0, [sp, #24]
 8009ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ab8:	4809      	ldr	r0, [pc, #36]	; (8009ae0 <siprintf+0x38>)
 8009aba:	9107      	str	r1, [sp, #28]
 8009abc:	9104      	str	r1, [sp, #16]
 8009abe:	4909      	ldr	r1, [pc, #36]	; (8009ae4 <siprintf+0x3c>)
 8009ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac4:	9105      	str	r1, [sp, #20]
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	a902      	add	r1, sp, #8
 8009acc:	f002 fc80 	bl	800c3d0 <_svfiprintf_r>
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	b01c      	add	sp, #112	; 0x70
 8009ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009adc:	b003      	add	sp, #12
 8009ade:	4770      	bx	lr
 8009ae0:	20000064 	.word	0x20000064
 8009ae4:	ffff0208 	.word	0xffff0208

08009ae8 <__sread>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	460c      	mov	r4, r1
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	f000 f900 	bl	8009cf4 <_read_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	bfab      	itete	ge
 8009af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009afa:	89a3      	ldrhlt	r3, [r4, #12]
 8009afc:	181b      	addge	r3, r3, r0
 8009afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b02:	bfac      	ite	ge
 8009b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b06:	81a3      	strhlt	r3, [r4, #12]
 8009b08:	bd10      	pop	{r4, pc}

08009b0a <__swrite>:
 8009b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0e:	461f      	mov	r7, r3
 8009b10:	898b      	ldrh	r3, [r1, #12]
 8009b12:	05db      	lsls	r3, r3, #23
 8009b14:	4605      	mov	r5, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4616      	mov	r6, r2
 8009b1a:	d505      	bpl.n	8009b28 <__swrite+0x1e>
 8009b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b20:	2302      	movs	r3, #2
 8009b22:	2200      	movs	r2, #0
 8009b24:	f000 f8d4 	bl	8009cd0 <_lseek_r>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	4632      	mov	r2, r6
 8009b36:	463b      	mov	r3, r7
 8009b38:	4628      	mov	r0, r5
 8009b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3e:	f000 b8eb 	b.w	8009d18 <_write_r>

08009b42 <__sseek>:
 8009b42:	b510      	push	{r4, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 f8c1 	bl	8009cd0 <_lseek_r>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	bf15      	itete	ne
 8009b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b5e:	81a3      	strheq	r3, [r4, #12]
 8009b60:	bf18      	it	ne
 8009b62:	81a3      	strhne	r3, [r4, #12]
 8009b64:	bd10      	pop	{r4, pc}

08009b66 <__sclose>:
 8009b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6a:	f000 b8a1 	b.w	8009cb0 <_close_r>

08009b6e <__swbuf_r>:
 8009b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b70:	460e      	mov	r6, r1
 8009b72:	4614      	mov	r4, r2
 8009b74:	4605      	mov	r5, r0
 8009b76:	b118      	cbz	r0, 8009b80 <__swbuf_r+0x12>
 8009b78:	6a03      	ldr	r3, [r0, #32]
 8009b7a:	b90b      	cbnz	r3, 8009b80 <__swbuf_r+0x12>
 8009b7c:	f7ff fef0 	bl	8009960 <__sinit>
 8009b80:	69a3      	ldr	r3, [r4, #24]
 8009b82:	60a3      	str	r3, [r4, #8]
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	071a      	lsls	r2, r3, #28
 8009b88:	d525      	bpl.n	8009bd6 <__swbuf_r+0x68>
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b31b      	cbz	r3, 8009bd6 <__swbuf_r+0x68>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	1a98      	subs	r0, r3, r2
 8009b94:	6963      	ldr	r3, [r4, #20]
 8009b96:	b2f6      	uxtb	r6, r6
 8009b98:	4283      	cmp	r3, r0
 8009b9a:	4637      	mov	r7, r6
 8009b9c:	dc04      	bgt.n	8009ba8 <__swbuf_r+0x3a>
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f002 fedd 	bl	800c960 <_fflush_r>
 8009ba6:	b9e0      	cbnz	r0, 8009be2 <__swbuf_r+0x74>
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	60a3      	str	r3, [r4, #8]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	701e      	strb	r6, [r3, #0]
 8009bb6:	6962      	ldr	r2, [r4, #20]
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d004      	beq.n	8009bc8 <__swbuf_r+0x5a>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	07db      	lsls	r3, r3, #31
 8009bc2:	d506      	bpl.n	8009bd2 <__swbuf_r+0x64>
 8009bc4:	2e0a      	cmp	r6, #10
 8009bc6:	d104      	bne.n	8009bd2 <__swbuf_r+0x64>
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f002 fec8 	bl	800c960 <_fflush_r>
 8009bd0:	b938      	cbnz	r0, 8009be2 <__swbuf_r+0x74>
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 f805 	bl	8009be8 <__swsetup_r>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d0d5      	beq.n	8009b8e <__swbuf_r+0x20>
 8009be2:	f04f 37ff 	mov.w	r7, #4294967295
 8009be6:	e7f4      	b.n	8009bd2 <__swbuf_r+0x64>

08009be8 <__swsetup_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4b2a      	ldr	r3, [pc, #168]	; (8009c94 <__swsetup_r+0xac>)
 8009bec:	4605      	mov	r5, r0
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	b118      	cbz	r0, 8009bfc <__swsetup_r+0x14>
 8009bf4:	6a03      	ldr	r3, [r0, #32]
 8009bf6:	b90b      	cbnz	r3, 8009bfc <__swsetup_r+0x14>
 8009bf8:	f7ff feb2 	bl	8009960 <__sinit>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c02:	0718      	lsls	r0, r3, #28
 8009c04:	d422      	bmi.n	8009c4c <__swsetup_r+0x64>
 8009c06:	06d9      	lsls	r1, r3, #27
 8009c08:	d407      	bmi.n	8009c1a <__swsetup_r+0x32>
 8009c0a:	2309      	movs	r3, #9
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	e034      	b.n	8009c84 <__swsetup_r+0x9c>
 8009c1a:	0758      	lsls	r0, r3, #29
 8009c1c:	d512      	bpl.n	8009c44 <__swsetup_r+0x5c>
 8009c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c20:	b141      	cbz	r1, 8009c34 <__swsetup_r+0x4c>
 8009c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c26:	4299      	cmp	r1, r3
 8009c28:	d002      	beq.n	8009c30 <__swsetup_r+0x48>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 ff32 	bl	800aa94 <_free_r>
 8009c30:	2300      	movs	r3, #0
 8009c32:	6363      	str	r3, [r4, #52]	; 0x34
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f043 0308 	orr.w	r3, r3, #8
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	b94b      	cbnz	r3, 8009c64 <__swsetup_r+0x7c>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c5a:	d003      	beq.n	8009c64 <__swsetup_r+0x7c>
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f002 fecc 	bl	800c9fc <__smakebuf_r>
 8009c64:	89a0      	ldrh	r0, [r4, #12]
 8009c66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c6a:	f010 0301 	ands.w	r3, r0, #1
 8009c6e:	d00a      	beq.n	8009c86 <__swsetup_r+0x9e>
 8009c70:	2300      	movs	r3, #0
 8009c72:	60a3      	str	r3, [r4, #8]
 8009c74:	6963      	ldr	r3, [r4, #20]
 8009c76:	425b      	negs	r3, r3
 8009c78:	61a3      	str	r3, [r4, #24]
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	b943      	cbnz	r3, 8009c90 <__swsetup_r+0xa8>
 8009c7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c82:	d1c4      	bne.n	8009c0e <__swsetup_r+0x26>
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	0781      	lsls	r1, r0, #30
 8009c88:	bf58      	it	pl
 8009c8a:	6963      	ldrpl	r3, [r4, #20]
 8009c8c:	60a3      	str	r3, [r4, #8]
 8009c8e:	e7f4      	b.n	8009c7a <__swsetup_r+0x92>
 8009c90:	2000      	movs	r0, #0
 8009c92:	e7f7      	b.n	8009c84 <__swsetup_r+0x9c>
 8009c94:	20000064 	.word	0x20000064

08009c98 <memset>:
 8009c98:	4402      	add	r2, r0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d100      	bne.n	8009ca2 <memset+0xa>
 8009ca0:	4770      	bx	lr
 8009ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca6:	e7f9      	b.n	8009c9c <memset+0x4>

08009ca8 <_localeconv_r>:
 8009ca8:	4800      	ldr	r0, [pc, #0]	; (8009cac <_localeconv_r+0x4>)
 8009caa:	4770      	bx	lr
 8009cac:	20000158 	.word	0x20000158

08009cb0 <_close_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d06      	ldr	r5, [pc, #24]	; (8009ccc <_close_r+0x1c>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	f7f8 f85d 	bl	8001d7a <_close>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_close_r+0x1a>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_close_r+0x1a>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	200006d4 	.word	0x200006d4

08009cd0 <_lseek_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_lseek_r+0x20>)
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7f8 f872 	bl	8001dc8 <_lseek>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_lseek_r+0x1e>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_lseek_r+0x1e>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	200006d4 	.word	0x200006d4

08009cf4 <_read_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	; (8009d14 <_read_r+0x20>)
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	4608      	mov	r0, r1
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f7f8 f81c 	bl	8001d40 <_read>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_read_r+0x1e>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_read_r+0x1e>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	200006d4 	.word	0x200006d4

08009d18 <_write_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d07      	ldr	r5, [pc, #28]	; (8009d38 <_write_r+0x20>)
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	4608      	mov	r0, r1
 8009d20:	4611      	mov	r1, r2
 8009d22:	2200      	movs	r2, #0
 8009d24:	602a      	str	r2, [r5, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	f7f7 fb96 	bl	8001458 <_write>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_write_r+0x1e>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_write_r+0x1e>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	200006d4 	.word	0x200006d4

08009d3c <__errno>:
 8009d3c:	4b01      	ldr	r3, [pc, #4]	; (8009d44 <__errno+0x8>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000064 	.word	0x20000064

08009d48 <__libc_init_array>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	4d0d      	ldr	r5, [pc, #52]	; (8009d80 <__libc_init_array+0x38>)
 8009d4c:	4c0d      	ldr	r4, [pc, #52]	; (8009d84 <__libc_init_array+0x3c>)
 8009d4e:	1b64      	subs	r4, r4, r5
 8009d50:	10a4      	asrs	r4, r4, #2
 8009d52:	2600      	movs	r6, #0
 8009d54:	42a6      	cmp	r6, r4
 8009d56:	d109      	bne.n	8009d6c <__libc_init_array+0x24>
 8009d58:	4d0b      	ldr	r5, [pc, #44]	; (8009d88 <__libc_init_array+0x40>)
 8009d5a:	4c0c      	ldr	r4, [pc, #48]	; (8009d8c <__libc_init_array+0x44>)
 8009d5c:	f003 fb40 	bl	800d3e0 <_init>
 8009d60:	1b64      	subs	r4, r4, r5
 8009d62:	10a4      	asrs	r4, r4, #2
 8009d64:	2600      	movs	r6, #0
 8009d66:	42a6      	cmp	r6, r4
 8009d68:	d105      	bne.n	8009d76 <__libc_init_array+0x2e>
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d70:	4798      	blx	r3
 8009d72:	3601      	adds	r6, #1
 8009d74:	e7ee      	b.n	8009d54 <__libc_init_array+0xc>
 8009d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d7a:	4798      	blx	r3
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	e7f2      	b.n	8009d66 <__libc_init_array+0x1e>
 8009d80:	0800d8f0 	.word	0x0800d8f0
 8009d84:	0800d8f0 	.word	0x0800d8f0
 8009d88:	0800d8f0 	.word	0x0800d8f0
 8009d8c:	0800d8f4 	.word	0x0800d8f4

08009d90 <__retarget_lock_acquire_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <__retarget_lock_release_recursive>:
 8009d92:	4770      	bx	lr

08009d94 <nanf>:
 8009d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d9c <nanf+0x8>
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	7fc00000 	.word	0x7fc00000

08009da0 <quorem>:
 8009da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	6903      	ldr	r3, [r0, #16]
 8009da6:	690c      	ldr	r4, [r1, #16]
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	4607      	mov	r7, r0
 8009dac:	db7e      	blt.n	8009eac <quorem+0x10c>
 8009dae:	3c01      	subs	r4, #1
 8009db0:	f101 0814 	add.w	r8, r1, #20
 8009db4:	f100 0514 	add.w	r5, r0, #20
 8009db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dd6:	d331      	bcc.n	8009e3c <quorem+0x9c>
 8009dd8:	f04f 0e00 	mov.w	lr, #0
 8009ddc:	4640      	mov	r0, r8
 8009dde:	46ac      	mov	ip, r5
 8009de0:	46f2      	mov	sl, lr
 8009de2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009de6:	b293      	uxth	r3, r2
 8009de8:	fb06 e303 	mla	r3, r6, r3, lr
 8009dec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009df0:	0c1a      	lsrs	r2, r3, #16
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ebaa 0303 	sub.w	r3, sl, r3
 8009df8:	f8dc a000 	ldr.w	sl, [ip]
 8009dfc:	fa13 f38a 	uxtah	r3, r3, sl
 8009e00:	fb06 220e 	mla	r2, r6, lr, r2
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e0c:	b292      	uxth	r2, r2
 8009e0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e16:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e1a:	4581      	cmp	r9, r0
 8009e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e20:	f84c 3b04 	str.w	r3, [ip], #4
 8009e24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e28:	d2db      	bcs.n	8009de2 <quorem+0x42>
 8009e2a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e2e:	b92b      	cbnz	r3, 8009e3c <quorem+0x9c>
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	3b04      	subs	r3, #4
 8009e34:	429d      	cmp	r5, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	d32c      	bcc.n	8009e94 <quorem+0xf4>
 8009e3a:	613c      	str	r4, [r7, #16]
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f001 f9ef 	bl	800b220 <__mcmp>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	db22      	blt.n	8009e8c <quorem+0xec>
 8009e46:	3601      	adds	r6, #1
 8009e48:	4629      	mov	r1, r5
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e50:	f8d1 c000 	ldr.w	ip, [r1]
 8009e54:	b293      	uxth	r3, r2
 8009e56:	1ac3      	subs	r3, r0, r3
 8009e58:	0c12      	lsrs	r2, r2, #16
 8009e5a:	fa13 f38c 	uxtah	r3, r3, ip
 8009e5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e6c:	45c1      	cmp	r9, r8
 8009e6e:	f841 3b04 	str.w	r3, [r1], #4
 8009e72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e76:	d2e9      	bcs.n	8009e4c <quorem+0xac>
 8009e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e80:	b922      	cbnz	r2, 8009e8c <quorem+0xec>
 8009e82:	3b04      	subs	r3, #4
 8009e84:	429d      	cmp	r5, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	d30a      	bcc.n	8009ea0 <quorem+0x100>
 8009e8a:	613c      	str	r4, [r7, #16]
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	b003      	add	sp, #12
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	3b04      	subs	r3, #4
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	d1ce      	bne.n	8009e3a <quorem+0x9a>
 8009e9c:	3c01      	subs	r4, #1
 8009e9e:	e7c9      	b.n	8009e34 <quorem+0x94>
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	3b04      	subs	r3, #4
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d1f0      	bne.n	8009e8a <quorem+0xea>
 8009ea8:	3c01      	subs	r4, #1
 8009eaa:	e7eb      	b.n	8009e84 <quorem+0xe4>
 8009eac:	2000      	movs	r0, #0
 8009eae:	e7ee      	b.n	8009e8e <quorem+0xee>

08009eb0 <_dtoa_r>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	ed2d 8b04 	vpush	{d8-d9}
 8009eb8:	69c5      	ldr	r5, [r0, #28]
 8009eba:	b093      	sub	sp, #76	; 0x4c
 8009ebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ec0:	ec57 6b10 	vmov	r6, r7, d0
 8009ec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ec8:	9107      	str	r1, [sp, #28]
 8009eca:	4604      	mov	r4, r0
 8009ecc:	920a      	str	r2, [sp, #40]	; 0x28
 8009ece:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed0:	b975      	cbnz	r5, 8009ef0 <_dtoa_r+0x40>
 8009ed2:	2010      	movs	r0, #16
 8009ed4:	f000 fe2a 	bl	800ab2c <malloc>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	61e0      	str	r0, [r4, #28]
 8009edc:	b920      	cbnz	r0, 8009ee8 <_dtoa_r+0x38>
 8009ede:	4bae      	ldr	r3, [pc, #696]	; (800a198 <_dtoa_r+0x2e8>)
 8009ee0:	21ef      	movs	r1, #239	; 0xef
 8009ee2:	48ae      	ldr	r0, [pc, #696]	; (800a19c <_dtoa_r+0x2ec>)
 8009ee4:	f002 fe3c 	bl	800cb60 <__assert_func>
 8009ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eec:	6005      	str	r5, [r0, #0]
 8009eee:	60c5      	str	r5, [r0, #12]
 8009ef0:	69e3      	ldr	r3, [r4, #28]
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	b151      	cbz	r1, 8009f0c <_dtoa_r+0x5c>
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	604a      	str	r2, [r1, #4]
 8009efa:	2301      	movs	r3, #1
 8009efc:	4093      	lsls	r3, r2
 8009efe:	608b      	str	r3, [r1, #8]
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 ff07 	bl	800ad14 <_Bfree>
 8009f06:	69e3      	ldr	r3, [r4, #28]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	1e3b      	subs	r3, r7, #0
 8009f0e:	bfbb      	ittet	lt
 8009f10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f14:	9303      	strlt	r3, [sp, #12]
 8009f16:	2300      	movge	r3, #0
 8009f18:	2201      	movlt	r2, #1
 8009f1a:	bfac      	ite	ge
 8009f1c:	f8c8 3000 	strge.w	r3, [r8]
 8009f20:	f8c8 2000 	strlt.w	r2, [r8]
 8009f24:	4b9e      	ldr	r3, [pc, #632]	; (800a1a0 <_dtoa_r+0x2f0>)
 8009f26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f2a:	ea33 0308 	bics.w	r3, r3, r8
 8009f2e:	d11b      	bne.n	8009f68 <_dtoa_r+0xb8>
 8009f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f3c:	4333      	orrs	r3, r6
 8009f3e:	f000 8593 	beq.w	800aa68 <_dtoa_r+0xbb8>
 8009f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f44:	b963      	cbnz	r3, 8009f60 <_dtoa_r+0xb0>
 8009f46:	4b97      	ldr	r3, [pc, #604]	; (800a1a4 <_dtoa_r+0x2f4>)
 8009f48:	e027      	b.n	8009f9a <_dtoa_r+0xea>
 8009f4a:	4b97      	ldr	r3, [pc, #604]	; (800a1a8 <_dtoa_r+0x2f8>)
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	9800      	ldr	r0, [sp, #0]
 8009f56:	b013      	add	sp, #76	; 0x4c
 8009f58:	ecbd 8b04 	vpop	{d8-d9}
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	4b90      	ldr	r3, [pc, #576]	; (800a1a4 <_dtoa_r+0x2f4>)
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	3303      	adds	r3, #3
 8009f66:	e7f3      	b.n	8009f50 <_dtoa_r+0xa0>
 8009f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	ec51 0b17 	vmov	r0, r1, d7
 8009f72:	eeb0 8a47 	vmov.f32	s16, s14
 8009f76:	eef0 8a67 	vmov.f32	s17, s15
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f7f6 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f80:	4681      	mov	r9, r0
 8009f82:	b160      	cbz	r0, 8009f9e <_dtoa_r+0xee>
 8009f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f86:	2301      	movs	r3, #1
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8568 	beq.w	800aa62 <_dtoa_r+0xbb2>
 8009f92:	4b86      	ldr	r3, [pc, #536]	; (800a1ac <_dtoa_r+0x2fc>)
 8009f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	e7da      	b.n	8009f54 <_dtoa_r+0xa4>
 8009f9e:	aa10      	add	r2, sp, #64	; 0x40
 8009fa0:	a911      	add	r1, sp, #68	; 0x44
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa8:	eef0 0a68 	vmov.f32	s1, s17
 8009fac:	f001 fa4e 	bl	800b44c <__d2b>
 8009fb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	d07f      	beq.n	800a0ba <_dtoa_r+0x20a>
 8009fba:	ee18 3a90 	vmov	r3, s17
 8009fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fc6:	ec51 0b18 	vmov	r0, r1, d8
 8009fca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4b75      	ldr	r3, [pc, #468]	; (800a1b0 <_dtoa_r+0x300>)
 8009fdc:	f7f6 f954 	bl	8000288 <__aeabi_dsub>
 8009fe0:	a367      	add	r3, pc, #412	; (adr r3, 800a180 <_dtoa_r+0x2d0>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	a367      	add	r3, pc, #412	; (adr r3, 800a188 <_dtoa_r+0x2d8>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 f94c 	bl	800028c <__adddf3>
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	f7f6 fa93 	bl	8000524 <__aeabi_i2d>
 8009ffe:	a364      	add	r3, pc, #400	; (adr r3, 800a190 <_dtoa_r+0x2e0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 faf8 	bl	80005f8 <__aeabi_dmul>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	f7f6 fd9e 	bl	8000b58 <__aeabi_d2iz>
 800a01c:	2200      	movs	r2, #0
 800a01e:	4683      	mov	fp, r0
 800a020:	2300      	movs	r3, #0
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 fd59 	bl	8000adc <__aeabi_dcmplt>
 800a02a:	b148      	cbz	r0, 800a040 <_dtoa_r+0x190>
 800a02c:	4658      	mov	r0, fp
 800a02e:	f7f6 fa79 	bl	8000524 <__aeabi_i2d>
 800a032:	4632      	mov	r2, r6
 800a034:	463b      	mov	r3, r7
 800a036:	f7f6 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800a03a:	b908      	cbnz	r0, 800a040 <_dtoa_r+0x190>
 800a03c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a040:	f1bb 0f16 	cmp.w	fp, #22
 800a044:	d857      	bhi.n	800a0f6 <_dtoa_r+0x246>
 800a046:	4b5b      	ldr	r3, [pc, #364]	; (800a1b4 <_dtoa_r+0x304>)
 800a048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 fd42 	bl	8000adc <__aeabi_dcmplt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d04e      	beq.n	800a0fa <_dtoa_r+0x24a>
 800a05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a060:	2300      	movs	r3, #0
 800a062:	930c      	str	r3, [sp, #48]	; 0x30
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	1b5b      	subs	r3, r3, r5
 800a068:	1e5a      	subs	r2, r3, #1
 800a06a:	bf45      	ittet	mi
 800a06c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a070:	9305      	strmi	r3, [sp, #20]
 800a072:	2300      	movpl	r3, #0
 800a074:	2300      	movmi	r3, #0
 800a076:	9206      	str	r2, [sp, #24]
 800a078:	bf54      	ite	pl
 800a07a:	9305      	strpl	r3, [sp, #20]
 800a07c:	9306      	strmi	r3, [sp, #24]
 800a07e:	f1bb 0f00 	cmp.w	fp, #0
 800a082:	db3c      	blt.n	800a0fe <_dtoa_r+0x24e>
 800a084:	9b06      	ldr	r3, [sp, #24]
 800a086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a08a:	445b      	add	r3, fp
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	2300      	movs	r3, #0
 800a090:	9308      	str	r3, [sp, #32]
 800a092:	9b07      	ldr	r3, [sp, #28]
 800a094:	2b09      	cmp	r3, #9
 800a096:	d868      	bhi.n	800a16a <_dtoa_r+0x2ba>
 800a098:	2b05      	cmp	r3, #5
 800a09a:	bfc4      	itt	gt
 800a09c:	3b04      	subgt	r3, #4
 800a09e:	9307      	strgt	r3, [sp, #28]
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0a6:	bfcc      	ite	gt
 800a0a8:	2500      	movgt	r5, #0
 800a0aa:	2501      	movle	r5, #1
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	f200 8085 	bhi.w	800a1bc <_dtoa_r+0x30c>
 800a0b2:	e8df f003 	tbb	[pc, r3]
 800a0b6:	3b2e      	.short	0x3b2e
 800a0b8:	5839      	.short	0x5839
 800a0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0be:	441d      	add	r5, r3
 800a0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	bfc1      	itttt	gt
 800a0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0d8:	bfd6      	itet	le
 800a0da:	f1c3 0320 	rsble	r3, r3, #32
 800a0de:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0e2:	fa06 f003 	lslle.w	r0, r6, r3
 800a0e6:	f7f6 fa0d 	bl	8000504 <__aeabi_ui2d>
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0f0:	3d01      	subs	r5, #1
 800a0f2:	920e      	str	r2, [sp, #56]	; 0x38
 800a0f4:	e76f      	b.n	8009fd6 <_dtoa_r+0x126>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e7b3      	b.n	800a062 <_dtoa_r+0x1b2>
 800a0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a0fc:	e7b2      	b.n	800a064 <_dtoa_r+0x1b4>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	eba3 030b 	sub.w	r3, r3, fp
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	f1cb 0300 	rsb	r3, fp, #0
 800a10a:	9308      	str	r3, [sp, #32]
 800a10c:	2300      	movs	r3, #0
 800a10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a110:	e7bf      	b.n	800a092 <_dtoa_r+0x1e2>
 800a112:	2300      	movs	r3, #0
 800a114:	9309      	str	r3, [sp, #36]	; 0x24
 800a116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dc52      	bgt.n	800a1c2 <_dtoa_r+0x312>
 800a11c:	2301      	movs	r3, #1
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	461a      	mov	r2, r3
 800a124:	920a      	str	r2, [sp, #40]	; 0x28
 800a126:	e00b      	b.n	800a140 <_dtoa_r+0x290>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7f3      	b.n	800a114 <_dtoa_r+0x264>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9309      	str	r3, [sp, #36]	; 0x24
 800a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a132:	445b      	add	r3, fp
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	3301      	adds	r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	bfb8      	it	lt
 800a13e:	2301      	movlt	r3, #1
 800a140:	69e0      	ldr	r0, [r4, #28]
 800a142:	2100      	movs	r1, #0
 800a144:	2204      	movs	r2, #4
 800a146:	f102 0614 	add.w	r6, r2, #20
 800a14a:	429e      	cmp	r6, r3
 800a14c:	d93d      	bls.n	800a1ca <_dtoa_r+0x31a>
 800a14e:	6041      	str	r1, [r0, #4]
 800a150:	4620      	mov	r0, r4
 800a152:	f000 fd9f 	bl	800ac94 <_Balloc>
 800a156:	9000      	str	r0, [sp, #0]
 800a158:	2800      	cmp	r0, #0
 800a15a:	d139      	bne.n	800a1d0 <_dtoa_r+0x320>
 800a15c:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <_dtoa_r+0x308>)
 800a15e:	4602      	mov	r2, r0
 800a160:	f240 11af 	movw	r1, #431	; 0x1af
 800a164:	e6bd      	b.n	8009ee2 <_dtoa_r+0x32>
 800a166:	2301      	movs	r3, #1
 800a168:	e7e1      	b.n	800a12e <_dtoa_r+0x27e>
 800a16a:	2501      	movs	r5, #1
 800a16c:	2300      	movs	r3, #0
 800a16e:	9307      	str	r3, [sp, #28]
 800a170:	9509      	str	r5, [sp, #36]	; 0x24
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	2200      	movs	r2, #0
 800a17c:	2312      	movs	r3, #18
 800a17e:	e7d1      	b.n	800a124 <_dtoa_r+0x274>
 800a180:	636f4361 	.word	0x636f4361
 800a184:	3fd287a7 	.word	0x3fd287a7
 800a188:	8b60c8b3 	.word	0x8b60c8b3
 800a18c:	3fc68a28 	.word	0x3fc68a28
 800a190:	509f79fb 	.word	0x509f79fb
 800a194:	3fd34413 	.word	0x3fd34413
 800a198:	0800d50a 	.word	0x0800d50a
 800a19c:	0800d521 	.word	0x0800d521
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	0800d506 	.word	0x0800d506
 800a1a8:	0800d4fd 	.word	0x0800d4fd
 800a1ac:	0800d4d5 	.word	0x0800d4d5
 800a1b0:	3ff80000 	.word	0x3ff80000
 800a1b4:	0800d610 	.word	0x0800d610
 800a1b8:	0800d579 	.word	0x0800d579
 800a1bc:	2301      	movs	r3, #1
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	e7d7      	b.n	800a172 <_dtoa_r+0x2c2>
 800a1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	e7ba      	b.n	800a140 <_dtoa_r+0x290>
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	e7ba      	b.n	800a146 <_dtoa_r+0x296>
 800a1d0:	69e3      	ldr	r3, [r4, #28]
 800a1d2:	9a00      	ldr	r2, [sp, #0]
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	2b0e      	cmp	r3, #14
 800a1da:	f200 80a8 	bhi.w	800a32e <_dtoa_r+0x47e>
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	f000 80a5 	beq.w	800a32e <_dtoa_r+0x47e>
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	dd38      	ble.n	800a25c <_dtoa_r+0x3ac>
 800a1ea:	4bc0      	ldr	r3, [pc, #768]	; (800a4ec <_dtoa_r+0x63c>)
 800a1ec:	f00b 020f 	and.w	r2, fp, #15
 800a1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a200:	d019      	beq.n	800a236 <_dtoa_r+0x386>
 800a202:	4bbb      	ldr	r3, [pc, #748]	; (800a4f0 <_dtoa_r+0x640>)
 800a204:	ec51 0b18 	vmov	r0, r1, d8
 800a208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a20c:	f7f6 fb1e 	bl	800084c <__aeabi_ddiv>
 800a210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a214:	f008 080f 	and.w	r8, r8, #15
 800a218:	2503      	movs	r5, #3
 800a21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4f0 <_dtoa_r+0x640>
 800a21e:	f1b8 0f00 	cmp.w	r8, #0
 800a222:	d10a      	bne.n	800a23a <_dtoa_r+0x38a>
 800a224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	f7f6 fb0e 	bl	800084c <__aeabi_ddiv>
 800a230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a234:	e02b      	b.n	800a28e <_dtoa_r+0x3de>
 800a236:	2502      	movs	r5, #2
 800a238:	e7ef      	b.n	800a21a <_dtoa_r+0x36a>
 800a23a:	f018 0f01 	tst.w	r8, #1
 800a23e:	d008      	beq.n	800a252 <_dtoa_r+0x3a2>
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a248:	f7f6 f9d6 	bl	80005f8 <__aeabi_dmul>
 800a24c:	3501      	adds	r5, #1
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a256:	f109 0908 	add.w	r9, r9, #8
 800a25a:	e7e0      	b.n	800a21e <_dtoa_r+0x36e>
 800a25c:	f000 809f 	beq.w	800a39e <_dtoa_r+0x4ee>
 800a260:	f1cb 0600 	rsb	r6, fp, #0
 800a264:	4ba1      	ldr	r3, [pc, #644]	; (800a4ec <_dtoa_r+0x63c>)
 800a266:	4fa2      	ldr	r7, [pc, #648]	; (800a4f0 <_dtoa_r+0x640>)
 800a268:	f006 020f 	and.w	r2, r6, #15
 800a26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	ec51 0b18 	vmov	r0, r1, d8
 800a278:	f7f6 f9be 	bl	80005f8 <__aeabi_dmul>
 800a27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a280:	1136      	asrs	r6, r6, #4
 800a282:	2300      	movs	r3, #0
 800a284:	2502      	movs	r5, #2
 800a286:	2e00      	cmp	r6, #0
 800a288:	d17e      	bne.n	800a388 <_dtoa_r+0x4d8>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1d0      	bne.n	800a230 <_dtoa_r+0x380>
 800a28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 8084 	beq.w	800a3a2 <_dtoa_r+0x4f2>
 800a29a:	4b96      	ldr	r3, [pc, #600]	; (800a4f4 <_dtoa_r+0x644>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	f7f6 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d07b      	beq.n	800a3a2 <_dtoa_r+0x4f2>
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d078      	beq.n	800a3a2 <_dtoa_r+0x4f2>
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd39      	ble.n	800a32a <_dtoa_r+0x47a>
 800a2b6:	4b90      	ldr	r3, [pc, #576]	; (800a4f8 <_dtoa_r+0x648>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f6 f99b 	bl	80005f8 <__aeabi_dmul>
 800a2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c6:	9e01      	ldr	r6, [sp, #4]
 800a2c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f7f6 f926 	bl	8000524 <__aeabi_i2d>
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	4b86      	ldr	r3, [pc, #536]	; (800a4fc <_dtoa_r+0x64c>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f0:	9303      	str	r3, [sp, #12]
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	d158      	bne.n	800a3a8 <_dtoa_r+0x4f8>
 800a2f6:	4b82      	ldr	r3, [pc, #520]	; (800a500 <_dtoa_r+0x650>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	f7f5 ffc3 	bl	8000288 <__aeabi_dsub>
 800a302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a306:	4680      	mov	r8, r0
 800a308:	4689      	mov	r9, r1
 800a30a:	f7f6 fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f040 8296 	bne.w	800a840 <_dtoa_r+0x990>
 800a314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a318:	4640      	mov	r0, r8
 800a31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a31e:	4649      	mov	r1, r9
 800a320:	f7f6 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 8289 	bne.w	800a83c <_dtoa_r+0x98c>
 800a32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a330:	2b00      	cmp	r3, #0
 800a332:	f2c0 814e 	blt.w	800a5d2 <_dtoa_r+0x722>
 800a336:	f1bb 0f0e 	cmp.w	fp, #14
 800a33a:	f300 814a 	bgt.w	800a5d2 <_dtoa_r+0x722>
 800a33e:	4b6b      	ldr	r3, [pc, #428]	; (800a4ec <_dtoa_r+0x63c>)
 800a340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f280 80dc 	bge.w	800a508 <_dtoa_r+0x658>
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f300 80d8 	bgt.w	800a508 <_dtoa_r+0x658>
 800a358:	f040 826f 	bne.w	800a83a <_dtoa_r+0x98a>
 800a35c:	4b68      	ldr	r3, [pc, #416]	; (800a500 <_dtoa_r+0x650>)
 800a35e:	2200      	movs	r2, #0
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f6 f948 	bl	80005f8 <__aeabi_dmul>
 800a368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a36c:	f7f6 fbca 	bl	8000b04 <__aeabi_dcmpge>
 800a370:	9e04      	ldr	r6, [sp, #16]
 800a372:	4637      	mov	r7, r6
 800a374:	2800      	cmp	r0, #0
 800a376:	f040 8245 	bne.w	800a804 <_dtoa_r+0x954>
 800a37a:	9d00      	ldr	r5, [sp, #0]
 800a37c:	2331      	movs	r3, #49	; 0x31
 800a37e:	f805 3b01 	strb.w	r3, [r5], #1
 800a382:	f10b 0b01 	add.w	fp, fp, #1
 800a386:	e241      	b.n	800a80c <_dtoa_r+0x95c>
 800a388:	07f2      	lsls	r2, r6, #31
 800a38a:	d505      	bpl.n	800a398 <_dtoa_r+0x4e8>
 800a38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	3501      	adds	r5, #1
 800a396:	2301      	movs	r3, #1
 800a398:	1076      	asrs	r6, r6, #1
 800a39a:	3708      	adds	r7, #8
 800a39c:	e773      	b.n	800a286 <_dtoa_r+0x3d6>
 800a39e:	2502      	movs	r5, #2
 800a3a0:	e775      	b.n	800a28e <_dtoa_r+0x3de>
 800a3a2:	9e04      	ldr	r6, [sp, #16]
 800a3a4:	465f      	mov	r7, fp
 800a3a6:	e792      	b.n	800a2ce <_dtoa_r+0x41e>
 800a3a8:	9900      	ldr	r1, [sp, #0]
 800a3aa:	4b50      	ldr	r3, [pc, #320]	; (800a4ec <_dtoa_r+0x63c>)
 800a3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3b0:	4431      	add	r1, r6
 800a3b2:	9102      	str	r1, [sp, #8]
 800a3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a3ba:	eef0 9a67 	vmov.f32	s19, s15
 800a3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d044      	beq.n	800a454 <_dtoa_r+0x5a4>
 800a3ca:	494e      	ldr	r1, [pc, #312]	; (800a504 <_dtoa_r+0x654>)
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f7f6 fa3d 	bl	800084c <__aeabi_ddiv>
 800a3d2:	ec53 2b19 	vmov	r2, r3, d9
 800a3d6:	f7f5 ff57 	bl	8000288 <__aeabi_dsub>
 800a3da:	9d00      	ldr	r5, [sp, #0]
 800a3dc:	ec41 0b19 	vmov	d9, r0, r1
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f7f6 fbb8 	bl	8000b58 <__aeabi_d2iz>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	f7f6 f89b 	bl	8000524 <__aeabi_i2d>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f5 ff47 	bl	8000288 <__aeabi_dsub>
 800a3fa:	3630      	adds	r6, #48	; 0x30
 800a3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a400:	ec53 2b19 	vmov	r2, r3, d9
 800a404:	4680      	mov	r8, r0
 800a406:	4689      	mov	r9, r1
 800a408:	f7f6 fb68 	bl	8000adc <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d164      	bne.n	800a4da <_dtoa_r+0x62a>
 800a410:	4642      	mov	r2, r8
 800a412:	464b      	mov	r3, r9
 800a414:	4937      	ldr	r1, [pc, #220]	; (800a4f4 <_dtoa_r+0x644>)
 800a416:	2000      	movs	r0, #0
 800a418:	f7f5 ff36 	bl	8000288 <__aeabi_dsub>
 800a41c:	ec53 2b19 	vmov	r2, r3, d9
 800a420:	f7f6 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 80b6 	bne.w	800a596 <_dtoa_r+0x6e6>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	429d      	cmp	r5, r3
 800a42e:	f43f af7c 	beq.w	800a32a <_dtoa_r+0x47a>
 800a432:	4b31      	ldr	r3, [pc, #196]	; (800a4f8 <_dtoa_r+0x648>)
 800a434:	ec51 0b19 	vmov	r0, r1, d9
 800a438:	2200      	movs	r2, #0
 800a43a:	f7f6 f8dd 	bl	80005f8 <__aeabi_dmul>
 800a43e:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <_dtoa_r+0x648>)
 800a440:	ec41 0b19 	vmov	d9, r0, r1
 800a444:	2200      	movs	r2, #0
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 f8d5 	bl	80005f8 <__aeabi_dmul>
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	e7c5      	b.n	800a3e0 <_dtoa_r+0x530>
 800a454:	ec51 0b17 	vmov	r0, r1, d7
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	9d00      	ldr	r5, [sp, #0]
 800a460:	930f      	str	r3, [sp, #60]	; 0x3c
 800a462:	ec41 0b19 	vmov	d9, r0, r1
 800a466:	4649      	mov	r1, r9
 800a468:	4640      	mov	r0, r8
 800a46a:	f7f6 fb75 	bl	8000b58 <__aeabi_d2iz>
 800a46e:	4606      	mov	r6, r0
 800a470:	f7f6 f858 	bl	8000524 <__aeabi_i2d>
 800a474:	3630      	adds	r6, #48	; 0x30
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f5 ff03 	bl	8000288 <__aeabi_dsub>
 800a482:	f805 6b01 	strb.w	r6, [r5], #1
 800a486:	9b02      	ldr	r3, [sp, #8]
 800a488:	429d      	cmp	r5, r3
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	d124      	bne.n	800a4de <_dtoa_r+0x62e>
 800a494:	4b1b      	ldr	r3, [pc, #108]	; (800a504 <_dtoa_r+0x654>)
 800a496:	ec51 0b19 	vmov	r0, r1, d9
 800a49a:	f7f5 fef7 	bl	800028c <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f6 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d173      	bne.n	800a596 <_dtoa_r+0x6e6>
 800a4ae:	ec53 2b19 	vmov	r2, r3, d9
 800a4b2:	4914      	ldr	r1, [pc, #80]	; (800a504 <_dtoa_r+0x654>)
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f7f5 fee7 	bl	8000288 <__aeabi_dsub>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f6 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f43f af2f 	beq.w	800a32a <_dtoa_r+0x47a>
 800a4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4ce:	1e6b      	subs	r3, r5, #1
 800a4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4d6:	2b30      	cmp	r3, #48	; 0x30
 800a4d8:	d0f8      	beq.n	800a4cc <_dtoa_r+0x61c>
 800a4da:	46bb      	mov	fp, r7
 800a4dc:	e04a      	b.n	800a574 <_dtoa_r+0x6c4>
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <_dtoa_r+0x648>)
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4689      	mov	r9, r1
 800a4e8:	e7bd      	b.n	800a466 <_dtoa_r+0x5b6>
 800a4ea:	bf00      	nop
 800a4ec:	0800d610 	.word	0x0800d610
 800a4f0:	0800d5e8 	.word	0x0800d5e8
 800a4f4:	3ff00000 	.word	0x3ff00000
 800a4f8:	40240000 	.word	0x40240000
 800a4fc:	401c0000 	.word	0x401c0000
 800a500:	40140000 	.word	0x40140000
 800a504:	3fe00000 	.word	0x3fe00000
 800a508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a50c:	9d00      	ldr	r5, [sp, #0]
 800a50e:	4642      	mov	r2, r8
 800a510:	464b      	mov	r3, r9
 800a512:	4630      	mov	r0, r6
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 f999 	bl	800084c <__aeabi_ddiv>
 800a51a:	f7f6 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800a51e:	9001      	str	r0, [sp, #4]
 800a520:	f7f6 f800 	bl	8000524 <__aeabi_i2d>
 800a524:	4642      	mov	r2, r8
 800a526:	464b      	mov	r3, r9
 800a528:	f7f6 f866 	bl	80005f8 <__aeabi_dmul>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	9e01      	ldr	r6, [sp, #4]
 800a53a:	9f04      	ldr	r7, [sp, #16]
 800a53c:	3630      	adds	r6, #48	; 0x30
 800a53e:	f805 6b01 	strb.w	r6, [r5], #1
 800a542:	9e00      	ldr	r6, [sp, #0]
 800a544:	1bae      	subs	r6, r5, r6
 800a546:	42b7      	cmp	r7, r6
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	d134      	bne.n	800a5b8 <_dtoa_r+0x708>
 800a54e:	f7f5 fe9d 	bl	800028c <__adddf3>
 800a552:	4642      	mov	r2, r8
 800a554:	464b      	mov	r3, r9
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	f7f6 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800a55e:	b9c8      	cbnz	r0, 800a594 <_dtoa_r+0x6e4>
 800a560:	4642      	mov	r2, r8
 800a562:	464b      	mov	r3, r9
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56c:	b110      	cbz	r0, 800a574 <_dtoa_r+0x6c4>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	07db      	lsls	r3, r3, #31
 800a572:	d40f      	bmi.n	800a594 <_dtoa_r+0x6e4>
 800a574:	4651      	mov	r1, sl
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fbcc 	bl	800ad14 <_Bfree>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a580:	702b      	strb	r3, [r5, #0]
 800a582:	f10b 0301 	add.w	r3, fp, #1
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f43f ace2 	beq.w	8009f54 <_dtoa_r+0xa4>
 800a590:	601d      	str	r5, [r3, #0]
 800a592:	e4df      	b.n	8009f54 <_dtoa_r+0xa4>
 800a594:	465f      	mov	r7, fp
 800a596:	462b      	mov	r3, r5
 800a598:	461d      	mov	r5, r3
 800a59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a59e:	2a39      	cmp	r2, #57	; 0x39
 800a5a0:	d106      	bne.n	800a5b0 <_dtoa_r+0x700>
 800a5a2:	9a00      	ldr	r2, [sp, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d1f7      	bne.n	800a598 <_dtoa_r+0x6e8>
 800a5a8:	9900      	ldr	r1, [sp, #0]
 800a5aa:	2230      	movs	r2, #48	; 0x30
 800a5ac:	3701      	adds	r7, #1
 800a5ae:	700a      	strb	r2, [r1, #0]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	e790      	b.n	800a4da <_dtoa_r+0x62a>
 800a5b8:	4ba3      	ldr	r3, [pc, #652]	; (800a848 <_dtoa_r+0x998>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7f6 f81c 	bl	80005f8 <__aeabi_dmul>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	f7f6 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d09e      	beq.n	800a50e <_dtoa_r+0x65e>
 800a5d0:	e7d0      	b.n	800a574 <_dtoa_r+0x6c4>
 800a5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	f000 80ca 	beq.w	800a76e <_dtoa_r+0x8be>
 800a5da:	9a07      	ldr	r2, [sp, #28]
 800a5dc:	2a01      	cmp	r2, #1
 800a5de:	f300 80ad 	bgt.w	800a73c <_dtoa_r+0x88c>
 800a5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	f000 80a5 	beq.w	800a734 <_dtoa_r+0x884>
 800a5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5ee:	9e08      	ldr	r6, [sp, #32]
 800a5f0:	9d05      	ldr	r5, [sp, #20]
 800a5f2:	9a05      	ldr	r2, [sp, #20]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	9205      	str	r2, [sp, #20]
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	441a      	add	r2, r3
 800a5fe:	4620      	mov	r0, r4
 800a600:	9206      	str	r2, [sp, #24]
 800a602:	f000 fc87 	bl	800af14 <__i2b>
 800a606:	4607      	mov	r7, r0
 800a608:	b165      	cbz	r5, 800a624 <_dtoa_r+0x774>
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd09      	ble.n	800a624 <_dtoa_r+0x774>
 800a610:	42ab      	cmp	r3, r5
 800a612:	9a05      	ldr	r2, [sp, #20]
 800a614:	bfa8      	it	ge
 800a616:	462b      	movge	r3, r5
 800a618:	1ad2      	subs	r2, r2, r3
 800a61a:	9205      	str	r2, [sp, #20]
 800a61c:	9a06      	ldr	r2, [sp, #24]
 800a61e:	1aed      	subs	r5, r5, r3
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	9306      	str	r3, [sp, #24]
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	b1f3      	cbz	r3, 800a666 <_dtoa_r+0x7b6>
 800a628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 80a3 	beq.w	800a776 <_dtoa_r+0x8c6>
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd10      	ble.n	800a656 <_dtoa_r+0x7a6>
 800a634:	4639      	mov	r1, r7
 800a636:	4632      	mov	r2, r6
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 fd2b 	bl	800b094 <__pow5mult>
 800a63e:	4652      	mov	r2, sl
 800a640:	4601      	mov	r1, r0
 800a642:	4607      	mov	r7, r0
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fc7b 	bl	800af40 <__multiply>
 800a64a:	4651      	mov	r1, sl
 800a64c:	4680      	mov	r8, r0
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 fb60 	bl	800ad14 <_Bfree>
 800a654:	46c2      	mov	sl, r8
 800a656:	9b08      	ldr	r3, [sp, #32]
 800a658:	1b9a      	subs	r2, r3, r6
 800a65a:	d004      	beq.n	800a666 <_dtoa_r+0x7b6>
 800a65c:	4651      	mov	r1, sl
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fd18 	bl	800b094 <__pow5mult>
 800a664:	4682      	mov	sl, r0
 800a666:	2101      	movs	r1, #1
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fc53 	bl	800af14 <__i2b>
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	2b00      	cmp	r3, #0
 800a672:	4606      	mov	r6, r0
 800a674:	f340 8081 	ble.w	800a77a <_dtoa_r+0x8ca>
 800a678:	461a      	mov	r2, r3
 800a67a:	4601      	mov	r1, r0
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 fd09 	bl	800b094 <__pow5mult>
 800a682:	9b07      	ldr	r3, [sp, #28]
 800a684:	2b01      	cmp	r3, #1
 800a686:	4606      	mov	r6, r0
 800a688:	dd7a      	ble.n	800a780 <_dtoa_r+0x8d0>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	6933      	ldr	r3, [r6, #16]
 800a690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	f000 fbef 	bl	800ae78 <__hi0bits>
 800a69a:	f1c0 0020 	rsb	r0, r0, #32
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	4418      	add	r0, r3
 800a6a2:	f010 001f 	ands.w	r0, r0, #31
 800a6a6:	f000 8094 	beq.w	800a7d2 <_dtoa_r+0x922>
 800a6aa:	f1c0 0320 	rsb	r3, r0, #32
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	f340 8085 	ble.w	800a7be <_dtoa_r+0x90e>
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	f1c0 001c 	rsb	r0, r0, #28
 800a6ba:	4403      	add	r3, r0
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	4403      	add	r3, r0
 800a6c2:	4405      	add	r5, r0
 800a6c4:	9306      	str	r3, [sp, #24]
 800a6c6:	9b05      	ldr	r3, [sp, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dd05      	ble.n	800a6d8 <_dtoa_r+0x828>
 800a6cc:	4651      	mov	r1, sl
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fd39 	bl	800b148 <__lshift>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	9b06      	ldr	r3, [sp, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dd05      	ble.n	800a6ea <_dtoa_r+0x83a>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fd30 	bl	800b148 <__lshift>
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d072      	beq.n	800a7d6 <_dtoa_r+0x926>
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f000 fd94 	bl	800b220 <__mcmp>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	da6c      	bge.n	800a7d6 <_dtoa_r+0x926>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4651      	mov	r1, sl
 800a700:	220a      	movs	r2, #10
 800a702:	4620      	mov	r0, r4
 800a704:	f000 fb28 	bl	800ad58 <__multadd>
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a70e:	4682      	mov	sl, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 81b0 	beq.w	800aa76 <_dtoa_r+0xbc6>
 800a716:	2300      	movs	r3, #0
 800a718:	4639      	mov	r1, r7
 800a71a:	220a      	movs	r2, #10
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fb1b 	bl	800ad58 <__multadd>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	4607      	mov	r7, r0
 800a728:	f300 8096 	bgt.w	800a858 <_dtoa_r+0x9a8>
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	dc59      	bgt.n	800a7e6 <_dtoa_r+0x936>
 800a732:	e091      	b.n	800a858 <_dtoa_r+0x9a8>
 800a734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a73a:	e758      	b.n	800a5ee <_dtoa_r+0x73e>
 800a73c:	9b04      	ldr	r3, [sp, #16]
 800a73e:	1e5e      	subs	r6, r3, #1
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	42b3      	cmp	r3, r6
 800a744:	bfbf      	itttt	lt
 800a746:	9b08      	ldrlt	r3, [sp, #32]
 800a748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a74a:	9608      	strlt	r6, [sp, #32]
 800a74c:	1af3      	sublt	r3, r6, r3
 800a74e:	bfb4      	ite	lt
 800a750:	18d2      	addlt	r2, r2, r3
 800a752:	1b9e      	subge	r6, r3, r6
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	bfbc      	itt	lt
 800a758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a75a:	2600      	movlt	r6, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb7      	itett	lt
 800a760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a768:	1a9d      	sublt	r5, r3, r2
 800a76a:	2300      	movlt	r3, #0
 800a76c:	e741      	b.n	800a5f2 <_dtoa_r+0x742>
 800a76e:	9e08      	ldr	r6, [sp, #32]
 800a770:	9d05      	ldr	r5, [sp, #20]
 800a772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a774:	e748      	b.n	800a608 <_dtoa_r+0x758>
 800a776:	9a08      	ldr	r2, [sp, #32]
 800a778:	e770      	b.n	800a65c <_dtoa_r+0x7ac>
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	dc19      	bgt.n	800a7b4 <_dtoa_r+0x904>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	b9bb      	cbnz	r3, 800a7b4 <_dtoa_r+0x904>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a78a:	b99b      	cbnz	r3, 800a7b4 <_dtoa_r+0x904>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a792:	0d1b      	lsrs	r3, r3, #20
 800a794:	051b      	lsls	r3, r3, #20
 800a796:	b183      	cbz	r3, 800a7ba <_dtoa_r+0x90a>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	3301      	adds	r3, #1
 800a79c:	9305      	str	r3, [sp, #20]
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	9306      	str	r3, [sp, #24]
 800a7a4:	f04f 0801 	mov.w	r8, #1
 800a7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f47f af6f 	bne.w	800a68e <_dtoa_r+0x7de>
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	e774      	b.n	800a69e <_dtoa_r+0x7ee>
 800a7b4:	f04f 0800 	mov.w	r8, #0
 800a7b8:	e7f6      	b.n	800a7a8 <_dtoa_r+0x8f8>
 800a7ba:	4698      	mov	r8, r3
 800a7bc:	e7f4      	b.n	800a7a8 <_dtoa_r+0x8f8>
 800a7be:	d082      	beq.n	800a6c6 <_dtoa_r+0x816>
 800a7c0:	9a05      	ldr	r2, [sp, #20]
 800a7c2:	331c      	adds	r3, #28
 800a7c4:	441a      	add	r2, r3
 800a7c6:	9205      	str	r2, [sp, #20]
 800a7c8:	9a06      	ldr	r2, [sp, #24]
 800a7ca:	441a      	add	r2, r3
 800a7cc:	441d      	add	r5, r3
 800a7ce:	9206      	str	r2, [sp, #24]
 800a7d0:	e779      	b.n	800a6c6 <_dtoa_r+0x816>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	e7f4      	b.n	800a7c0 <_dtoa_r+0x910>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc37      	bgt.n	800a84c <_dtoa_r+0x99c>
 800a7dc:	9b07      	ldr	r3, [sp, #28]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	dd34      	ble.n	800a84c <_dtoa_r+0x99c>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	b963      	cbnz	r3, 800a804 <_dtoa_r+0x954>
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	2205      	movs	r2, #5
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fab2 	bl	800ad58 <__multadd>
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f000 fd11 	bl	800b220 <__mcmp>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f73f adbb 	bgt.w	800a37a <_dtoa_r+0x4ca>
 800a804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a806:	9d00      	ldr	r5, [sp, #0]
 800a808:	ea6f 0b03 	mvn.w	fp, r3
 800a80c:	f04f 0800 	mov.w	r8, #0
 800a810:	4631      	mov	r1, r6
 800a812:	4620      	mov	r0, r4
 800a814:	f000 fa7e 	bl	800ad14 <_Bfree>
 800a818:	2f00      	cmp	r7, #0
 800a81a:	f43f aeab 	beq.w	800a574 <_dtoa_r+0x6c4>
 800a81e:	f1b8 0f00 	cmp.w	r8, #0
 800a822:	d005      	beq.n	800a830 <_dtoa_r+0x980>
 800a824:	45b8      	cmp	r8, r7
 800a826:	d003      	beq.n	800a830 <_dtoa_r+0x980>
 800a828:	4641      	mov	r1, r8
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fa72 	bl	800ad14 <_Bfree>
 800a830:	4639      	mov	r1, r7
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fa6e 	bl	800ad14 <_Bfree>
 800a838:	e69c      	b.n	800a574 <_dtoa_r+0x6c4>
 800a83a:	2600      	movs	r6, #0
 800a83c:	4637      	mov	r7, r6
 800a83e:	e7e1      	b.n	800a804 <_dtoa_r+0x954>
 800a840:	46bb      	mov	fp, r7
 800a842:	4637      	mov	r7, r6
 800a844:	e599      	b.n	800a37a <_dtoa_r+0x4ca>
 800a846:	bf00      	nop
 800a848:	40240000 	.word	0x40240000
 800a84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80c8 	beq.w	800a9e4 <_dtoa_r+0xb34>
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	2d00      	cmp	r5, #0
 800a85a:	dd05      	ble.n	800a868 <_dtoa_r+0x9b8>
 800a85c:	4639      	mov	r1, r7
 800a85e:	462a      	mov	r2, r5
 800a860:	4620      	mov	r0, r4
 800a862:	f000 fc71 	bl	800b148 <__lshift>
 800a866:	4607      	mov	r7, r0
 800a868:	f1b8 0f00 	cmp.w	r8, #0
 800a86c:	d05b      	beq.n	800a926 <_dtoa_r+0xa76>
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fa0f 	bl	800ac94 <_Balloc>
 800a876:	4605      	mov	r5, r0
 800a878:	b928      	cbnz	r0, 800a886 <_dtoa_r+0x9d6>
 800a87a:	4b83      	ldr	r3, [pc, #524]	; (800aa88 <_dtoa_r+0xbd8>)
 800a87c:	4602      	mov	r2, r0
 800a87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a882:	f7ff bb2e 	b.w	8009ee2 <_dtoa_r+0x32>
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	3202      	adds	r2, #2
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	f107 010c 	add.w	r1, r7, #12
 800a890:	300c      	adds	r0, #12
 800a892:	f002 f94d 	bl	800cb30 <memcpy>
 800a896:	2201      	movs	r2, #1
 800a898:	4629      	mov	r1, r5
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fc54 	bl	800b148 <__lshift>
 800a8a0:	9b00      	ldr	r3, [sp, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	9308      	str	r3, [sp, #32]
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	46b8      	mov	r8, r7
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	4631      	mov	r1, r6
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f7ff fa6c 	bl	8009da0 <quorem>
 800a8c8:	4641      	mov	r1, r8
 800a8ca:	9002      	str	r0, [sp, #8]
 800a8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	f000 fca5 	bl	800b220 <__mcmp>
 800a8d6:	463a      	mov	r2, r7
 800a8d8:	9005      	str	r0, [sp, #20]
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fcbb 	bl	800b258 <__mdiff>
 800a8e2:	68c2      	ldr	r2, [r0, #12]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	bb02      	cbnz	r2, 800a92a <_dtoa_r+0xa7a>
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	f000 fc98 	bl	800b220 <__mcmp>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f8:	f000 fa0c 	bl	800ad14 <_Bfree>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a900:	9d04      	ldr	r5, [sp, #16]
 800a902:	ea43 0102 	orr.w	r1, r3, r2
 800a906:	9b06      	ldr	r3, [sp, #24]
 800a908:	4319      	orrs	r1, r3
 800a90a:	d110      	bne.n	800a92e <_dtoa_r+0xa7e>
 800a90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a910:	d029      	beq.n	800a966 <_dtoa_r+0xab6>
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd02      	ble.n	800a91e <_dtoa_r+0xa6e>
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	f883 9000 	strb.w	r9, [r3]
 800a924:	e774      	b.n	800a810 <_dtoa_r+0x960>
 800a926:	4638      	mov	r0, r7
 800a928:	e7ba      	b.n	800a8a0 <_dtoa_r+0x9f0>
 800a92a:	2201      	movs	r2, #1
 800a92c:	e7e1      	b.n	800a8f2 <_dtoa_r+0xa42>
 800a92e:	9b05      	ldr	r3, [sp, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	db04      	blt.n	800a93e <_dtoa_r+0xa8e>
 800a934:	9907      	ldr	r1, [sp, #28]
 800a936:	430b      	orrs	r3, r1
 800a938:	9906      	ldr	r1, [sp, #24]
 800a93a:	430b      	orrs	r3, r1
 800a93c:	d120      	bne.n	800a980 <_dtoa_r+0xad0>
 800a93e:	2a00      	cmp	r2, #0
 800a940:	dded      	ble.n	800a91e <_dtoa_r+0xa6e>
 800a942:	4651      	mov	r1, sl
 800a944:	2201      	movs	r2, #1
 800a946:	4620      	mov	r0, r4
 800a948:	f000 fbfe 	bl	800b148 <__lshift>
 800a94c:	4631      	mov	r1, r6
 800a94e:	4682      	mov	sl, r0
 800a950:	f000 fc66 	bl	800b220 <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	dc03      	bgt.n	800a960 <_dtoa_r+0xab0>
 800a958:	d1e1      	bne.n	800a91e <_dtoa_r+0xa6e>
 800a95a:	f019 0f01 	tst.w	r9, #1
 800a95e:	d0de      	beq.n	800a91e <_dtoa_r+0xa6e>
 800a960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a964:	d1d8      	bne.n	800a918 <_dtoa_r+0xa68>
 800a966:	9a01      	ldr	r2, [sp, #4]
 800a968:	2339      	movs	r3, #57	; 0x39
 800a96a:	7013      	strb	r3, [r2, #0]
 800a96c:	462b      	mov	r3, r5
 800a96e:	461d      	mov	r5, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a976:	2a39      	cmp	r2, #57	; 0x39
 800a978:	d06c      	beq.n	800aa54 <_dtoa_r+0xba4>
 800a97a:	3201      	adds	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
 800a97e:	e747      	b.n	800a810 <_dtoa_r+0x960>
 800a980:	2a00      	cmp	r2, #0
 800a982:	dd07      	ble.n	800a994 <_dtoa_r+0xae4>
 800a984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a988:	d0ed      	beq.n	800a966 <_dtoa_r+0xab6>
 800a98a:	9a01      	ldr	r2, [sp, #4]
 800a98c:	f109 0301 	add.w	r3, r9, #1
 800a990:	7013      	strb	r3, [r2, #0]
 800a992:	e73d      	b.n	800a810 <_dtoa_r+0x960>
 800a994:	9b04      	ldr	r3, [sp, #16]
 800a996:	9a08      	ldr	r2, [sp, #32]
 800a998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d043      	beq.n	800aa28 <_dtoa_r+0xb78>
 800a9a0:	4651      	mov	r1, sl
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f9d6 	bl	800ad58 <__multadd>
 800a9ac:	45b8      	cmp	r8, r7
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	f04f 0300 	mov.w	r3, #0
 800a9b4:	f04f 020a 	mov.w	r2, #10
 800a9b8:	4641      	mov	r1, r8
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	d107      	bne.n	800a9ce <_dtoa_r+0xb1e>
 800a9be:	f000 f9cb 	bl	800ad58 <__multadd>
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	e775      	b.n	800a8ba <_dtoa_r+0xa0a>
 800a9ce:	f000 f9c3 	bl	800ad58 <__multadd>
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 f9bc 	bl	800ad58 <__multadd>
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	e7f0      	b.n	800a9c6 <_dtoa_r+0xb16>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	9d00      	ldr	r5, [sp, #0]
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	f7ff f9d7 	bl	8009da0 <quorem>
 800a9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	f805 9b01 	strb.w	r9, [r5], #1
 800a9fc:	1aea      	subs	r2, r5, r3
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	4293      	cmp	r3, r2
 800aa02:	dd07      	ble.n	800aa14 <_dtoa_r+0xb64>
 800aa04:	4651      	mov	r1, sl
 800aa06:	2300      	movs	r3, #0
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 f9a4 	bl	800ad58 <__multadd>
 800aa10:	4682      	mov	sl, r0
 800aa12:	e7ea      	b.n	800a9ea <_dtoa_r+0xb3a>
 800aa14:	9b01      	ldr	r3, [sp, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfc8      	it	gt
 800aa1a:	461d      	movgt	r5, r3
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	bfd8      	it	le
 800aa20:	2501      	movle	r5, #1
 800aa22:	441d      	add	r5, r3
 800aa24:	f04f 0800 	mov.w	r8, #0
 800aa28:	4651      	mov	r1, sl
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fb8b 	bl	800b148 <__lshift>
 800aa32:	4631      	mov	r1, r6
 800aa34:	4682      	mov	sl, r0
 800aa36:	f000 fbf3 	bl	800b220 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	dc96      	bgt.n	800a96c <_dtoa_r+0xabc>
 800aa3e:	d102      	bne.n	800aa46 <_dtoa_r+0xb96>
 800aa40:	f019 0f01 	tst.w	r9, #1
 800aa44:	d192      	bne.n	800a96c <_dtoa_r+0xabc>
 800aa46:	462b      	mov	r3, r5
 800aa48:	461d      	mov	r5, r3
 800aa4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4e:	2a30      	cmp	r2, #48	; 0x30
 800aa50:	d0fa      	beq.n	800aa48 <_dtoa_r+0xb98>
 800aa52:	e6dd      	b.n	800a810 <_dtoa_r+0x960>
 800aa54:	9a00      	ldr	r2, [sp, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d189      	bne.n	800a96e <_dtoa_r+0xabe>
 800aa5a:	f10b 0b01 	add.w	fp, fp, #1
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	e796      	b.n	800a990 <_dtoa_r+0xae0>
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <_dtoa_r+0xbdc>)
 800aa64:	f7ff ba99 	b.w	8009f9a <_dtoa_r+0xea>
 800aa68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f47f aa6d 	bne.w	8009f4a <_dtoa_r+0x9a>
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <_dtoa_r+0xbe0>)
 800aa72:	f7ff ba92 	b.w	8009f9a <_dtoa_r+0xea>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dcb5      	bgt.n	800a9e8 <_dtoa_r+0xb38>
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	f73f aeb1 	bgt.w	800a7e6 <_dtoa_r+0x936>
 800aa84:	e7b0      	b.n	800a9e8 <_dtoa_r+0xb38>
 800aa86:	bf00      	nop
 800aa88:	0800d579 	.word	0x0800d579
 800aa8c:	0800d4d4 	.word	0x0800d4d4
 800aa90:	0800d4fd 	.word	0x0800d4fd

0800aa94 <_free_r>:
 800aa94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d044      	beq.n	800ab24 <_free_r+0x90>
 800aa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa9e:	9001      	str	r0, [sp, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f1a1 0404 	sub.w	r4, r1, #4
 800aaa6:	bfb8      	it	lt
 800aaa8:	18e4      	addlt	r4, r4, r3
 800aaaa:	f000 f8e7 	bl	800ac7c <__malloc_lock>
 800aaae:	4a1e      	ldr	r2, [pc, #120]	; (800ab28 <_free_r+0x94>)
 800aab0:	9801      	ldr	r0, [sp, #4]
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	b933      	cbnz	r3, 800aac4 <_free_r+0x30>
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	6014      	str	r4, [r2, #0]
 800aaba:	b003      	add	sp, #12
 800aabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aac0:	f000 b8e2 	b.w	800ac88 <__malloc_unlock>
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d908      	bls.n	800aada <_free_r+0x46>
 800aac8:	6825      	ldr	r5, [r4, #0]
 800aaca:	1961      	adds	r1, r4, r5
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	e7ed      	b.n	800aab6 <_free_r+0x22>
 800aada:	461a      	mov	r2, r3
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	b10b      	cbz	r3, 800aae4 <_free_r+0x50>
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d9fa      	bls.n	800aada <_free_r+0x46>
 800aae4:	6811      	ldr	r1, [r2, #0]
 800aae6:	1855      	adds	r5, r2, r1
 800aae8:	42a5      	cmp	r5, r4
 800aaea:	d10b      	bne.n	800ab04 <_free_r+0x70>
 800aaec:	6824      	ldr	r4, [r4, #0]
 800aaee:	4421      	add	r1, r4
 800aaf0:	1854      	adds	r4, r2, r1
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	6011      	str	r1, [r2, #0]
 800aaf6:	d1e0      	bne.n	800aaba <_free_r+0x26>
 800aaf8:	681c      	ldr	r4, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	6053      	str	r3, [r2, #4]
 800aafe:	440c      	add	r4, r1
 800ab00:	6014      	str	r4, [r2, #0]
 800ab02:	e7da      	b.n	800aaba <_free_r+0x26>
 800ab04:	d902      	bls.n	800ab0c <_free_r+0x78>
 800ab06:	230c      	movs	r3, #12
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	e7d6      	b.n	800aaba <_free_r+0x26>
 800ab0c:	6825      	ldr	r5, [r4, #0]
 800ab0e:	1961      	adds	r1, r4, r5
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf04      	itt	eq
 800ab14:	6819      	ldreq	r1, [r3, #0]
 800ab16:	685b      	ldreq	r3, [r3, #4]
 800ab18:	6063      	str	r3, [r4, #4]
 800ab1a:	bf04      	itt	eq
 800ab1c:	1949      	addeq	r1, r1, r5
 800ab1e:	6021      	streq	r1, [r4, #0]
 800ab20:	6054      	str	r4, [r2, #4]
 800ab22:	e7ca      	b.n	800aaba <_free_r+0x26>
 800ab24:	b003      	add	sp, #12
 800ab26:	bd30      	pop	{r4, r5, pc}
 800ab28:	200006dc 	.word	0x200006dc

0800ab2c <malloc>:
 800ab2c:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <malloc+0xc>)
 800ab2e:	4601      	mov	r1, r0
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	f000 b823 	b.w	800ab7c <_malloc_r>
 800ab36:	bf00      	nop
 800ab38:	20000064 	.word	0x20000064

0800ab3c <sbrk_aligned>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	4e0e      	ldr	r6, [pc, #56]	; (800ab78 <sbrk_aligned+0x3c>)
 800ab40:	460c      	mov	r4, r1
 800ab42:	6831      	ldr	r1, [r6, #0]
 800ab44:	4605      	mov	r5, r0
 800ab46:	b911      	cbnz	r1, 800ab4e <sbrk_aligned+0x12>
 800ab48:	f001 ffe2 	bl	800cb10 <_sbrk_r>
 800ab4c:	6030      	str	r0, [r6, #0]
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	f001 ffdd 	bl	800cb10 <_sbrk_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d00a      	beq.n	800ab70 <sbrk_aligned+0x34>
 800ab5a:	1cc4      	adds	r4, r0, #3
 800ab5c:	f024 0403 	bic.w	r4, r4, #3
 800ab60:	42a0      	cmp	r0, r4
 800ab62:	d007      	beq.n	800ab74 <sbrk_aligned+0x38>
 800ab64:	1a21      	subs	r1, r4, r0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f001 ffd2 	bl	800cb10 <_sbrk_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d101      	bne.n	800ab74 <sbrk_aligned+0x38>
 800ab70:	f04f 34ff 	mov.w	r4, #4294967295
 800ab74:	4620      	mov	r0, r4
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	200006e0 	.word	0x200006e0

0800ab7c <_malloc_r>:
 800ab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab80:	1ccd      	adds	r5, r1, #3
 800ab82:	f025 0503 	bic.w	r5, r5, #3
 800ab86:	3508      	adds	r5, #8
 800ab88:	2d0c      	cmp	r5, #12
 800ab8a:	bf38      	it	cc
 800ab8c:	250c      	movcc	r5, #12
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	4607      	mov	r7, r0
 800ab92:	db01      	blt.n	800ab98 <_malloc_r+0x1c>
 800ab94:	42a9      	cmp	r1, r5
 800ab96:	d905      	bls.n	800aba4 <_malloc_r+0x28>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	4630      	mov	r0, r6
 800aba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac78 <_malloc_r+0xfc>
 800aba8:	f000 f868 	bl	800ac7c <__malloc_lock>
 800abac:	f8d8 3000 	ldr.w	r3, [r8]
 800abb0:	461c      	mov	r4, r3
 800abb2:	bb5c      	cbnz	r4, 800ac0c <_malloc_r+0x90>
 800abb4:	4629      	mov	r1, r5
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff ffc0 	bl	800ab3c <sbrk_aligned>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	4604      	mov	r4, r0
 800abc0:	d155      	bne.n	800ac6e <_malloc_r+0xf2>
 800abc2:	f8d8 4000 	ldr.w	r4, [r8]
 800abc6:	4626      	mov	r6, r4
 800abc8:	2e00      	cmp	r6, #0
 800abca:	d145      	bne.n	800ac58 <_malloc_r+0xdc>
 800abcc:	2c00      	cmp	r4, #0
 800abce:	d048      	beq.n	800ac62 <_malloc_r+0xe6>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	4631      	mov	r1, r6
 800abd4:	4638      	mov	r0, r7
 800abd6:	eb04 0903 	add.w	r9, r4, r3
 800abda:	f001 ff99 	bl	800cb10 <_sbrk_r>
 800abde:	4581      	cmp	r9, r0
 800abe0:	d13f      	bne.n	800ac62 <_malloc_r+0xe6>
 800abe2:	6821      	ldr	r1, [r4, #0]
 800abe4:	1a6d      	subs	r5, r5, r1
 800abe6:	4629      	mov	r1, r5
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff ffa7 	bl	800ab3c <sbrk_aligned>
 800abee:	3001      	adds	r0, #1
 800abf0:	d037      	beq.n	800ac62 <_malloc_r+0xe6>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	442b      	add	r3, r5
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	f8d8 3000 	ldr.w	r3, [r8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d038      	beq.n	800ac72 <_malloc_r+0xf6>
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	42a2      	cmp	r2, r4
 800ac04:	d12b      	bne.n	800ac5e <_malloc_r+0xe2>
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	e00f      	b.n	800ac2c <_malloc_r+0xb0>
 800ac0c:	6822      	ldr	r2, [r4, #0]
 800ac0e:	1b52      	subs	r2, r2, r5
 800ac10:	d41f      	bmi.n	800ac52 <_malloc_r+0xd6>
 800ac12:	2a0b      	cmp	r2, #11
 800ac14:	d917      	bls.n	800ac46 <_malloc_r+0xca>
 800ac16:	1961      	adds	r1, r4, r5
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	6025      	str	r5, [r4, #0]
 800ac1c:	bf18      	it	ne
 800ac1e:	6059      	strne	r1, [r3, #4]
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	bf08      	it	eq
 800ac24:	f8c8 1000 	streq.w	r1, [r8]
 800ac28:	5162      	str	r2, [r4, r5]
 800ac2a:	604b      	str	r3, [r1, #4]
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f104 060b 	add.w	r6, r4, #11
 800ac32:	f000 f829 	bl	800ac88 <__malloc_unlock>
 800ac36:	f026 0607 	bic.w	r6, r6, #7
 800ac3a:	1d23      	adds	r3, r4, #4
 800ac3c:	1af2      	subs	r2, r6, r3
 800ac3e:	d0ae      	beq.n	800ab9e <_malloc_r+0x22>
 800ac40:	1b9b      	subs	r3, r3, r6
 800ac42:	50a3      	str	r3, [r4, r2]
 800ac44:	e7ab      	b.n	800ab9e <_malloc_r+0x22>
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6862      	ldr	r2, [r4, #4]
 800ac4a:	d1dd      	bne.n	800ac08 <_malloc_r+0x8c>
 800ac4c:	f8c8 2000 	str.w	r2, [r8]
 800ac50:	e7ec      	b.n	800ac2c <_malloc_r+0xb0>
 800ac52:	4623      	mov	r3, r4
 800ac54:	6864      	ldr	r4, [r4, #4]
 800ac56:	e7ac      	b.n	800abb2 <_malloc_r+0x36>
 800ac58:	4634      	mov	r4, r6
 800ac5a:	6876      	ldr	r6, [r6, #4]
 800ac5c:	e7b4      	b.n	800abc8 <_malloc_r+0x4c>
 800ac5e:	4613      	mov	r3, r2
 800ac60:	e7cc      	b.n	800abfc <_malloc_r+0x80>
 800ac62:	230c      	movs	r3, #12
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4638      	mov	r0, r7
 800ac68:	f000 f80e 	bl	800ac88 <__malloc_unlock>
 800ac6c:	e797      	b.n	800ab9e <_malloc_r+0x22>
 800ac6e:	6025      	str	r5, [r4, #0]
 800ac70:	e7dc      	b.n	800ac2c <_malloc_r+0xb0>
 800ac72:	605b      	str	r3, [r3, #4]
 800ac74:	deff      	udf	#255	; 0xff
 800ac76:	bf00      	nop
 800ac78:	200006dc 	.word	0x200006dc

0800ac7c <__malloc_lock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_lock+0x8>)
 800ac7e:	f7ff b887 	b.w	8009d90 <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	200006d8 	.word	0x200006d8

0800ac88 <__malloc_unlock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__malloc_unlock+0x8>)
 800ac8a:	f7ff b882 	b.w	8009d92 <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	200006d8 	.word	0x200006d8

0800ac94 <_Balloc>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	69c6      	ldr	r6, [r0, #28]
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	b976      	cbnz	r6, 800acbc <_Balloc+0x28>
 800ac9e:	2010      	movs	r0, #16
 800aca0:	f7ff ff44 	bl	800ab2c <malloc>
 800aca4:	4602      	mov	r2, r0
 800aca6:	61e0      	str	r0, [r4, #28]
 800aca8:	b920      	cbnz	r0, 800acb4 <_Balloc+0x20>
 800acaa:	4b18      	ldr	r3, [pc, #96]	; (800ad0c <_Balloc+0x78>)
 800acac:	4818      	ldr	r0, [pc, #96]	; (800ad10 <_Balloc+0x7c>)
 800acae:	216b      	movs	r1, #107	; 0x6b
 800acb0:	f001 ff56 	bl	800cb60 <__assert_func>
 800acb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb8:	6006      	str	r6, [r0, #0]
 800acba:	60c6      	str	r6, [r0, #12]
 800acbc:	69e6      	ldr	r6, [r4, #28]
 800acbe:	68f3      	ldr	r3, [r6, #12]
 800acc0:	b183      	cbz	r3, 800ace4 <_Balloc+0x50>
 800acc2:	69e3      	ldr	r3, [r4, #28]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acca:	b9b8      	cbnz	r0, 800acfc <_Balloc+0x68>
 800accc:	2101      	movs	r1, #1
 800acce:	fa01 f605 	lsl.w	r6, r1, r5
 800acd2:	1d72      	adds	r2, r6, #5
 800acd4:	0092      	lsls	r2, r2, #2
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 ff60 	bl	800cb9c <_calloc_r>
 800acdc:	b160      	cbz	r0, 800acf8 <_Balloc+0x64>
 800acde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ace2:	e00e      	b.n	800ad02 <_Balloc+0x6e>
 800ace4:	2221      	movs	r2, #33	; 0x21
 800ace6:	2104      	movs	r1, #4
 800ace8:	4620      	mov	r0, r4
 800acea:	f001 ff57 	bl	800cb9c <_calloc_r>
 800acee:	69e3      	ldr	r3, [r4, #28]
 800acf0:	60f0      	str	r0, [r6, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e4      	bne.n	800acc2 <_Balloc+0x2e>
 800acf8:	2000      	movs	r0, #0
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	6802      	ldr	r2, [r0, #0]
 800acfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad02:	2300      	movs	r3, #0
 800ad04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad08:	e7f7      	b.n	800acfa <_Balloc+0x66>
 800ad0a:	bf00      	nop
 800ad0c:	0800d50a 	.word	0x0800d50a
 800ad10:	0800d58a 	.word	0x0800d58a

0800ad14 <_Bfree>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	69c6      	ldr	r6, [r0, #28]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	b976      	cbnz	r6, 800ad3c <_Bfree+0x28>
 800ad1e:	2010      	movs	r0, #16
 800ad20:	f7ff ff04 	bl	800ab2c <malloc>
 800ad24:	4602      	mov	r2, r0
 800ad26:	61e8      	str	r0, [r5, #28]
 800ad28:	b920      	cbnz	r0, 800ad34 <_Bfree+0x20>
 800ad2a:	4b09      	ldr	r3, [pc, #36]	; (800ad50 <_Bfree+0x3c>)
 800ad2c:	4809      	ldr	r0, [pc, #36]	; (800ad54 <_Bfree+0x40>)
 800ad2e:	218f      	movs	r1, #143	; 0x8f
 800ad30:	f001 ff16 	bl	800cb60 <__assert_func>
 800ad34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad38:	6006      	str	r6, [r0, #0]
 800ad3a:	60c6      	str	r6, [r0, #12]
 800ad3c:	b13c      	cbz	r4, 800ad4e <_Bfree+0x3a>
 800ad3e:	69eb      	ldr	r3, [r5, #28]
 800ad40:	6862      	ldr	r2, [r4, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad48:	6021      	str	r1, [r4, #0]
 800ad4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	0800d50a 	.word	0x0800d50a
 800ad54:	0800d58a 	.word	0x0800d58a

0800ad58 <__multadd>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	690d      	ldr	r5, [r1, #16]
 800ad5e:	4607      	mov	r7, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	461e      	mov	r6, r3
 800ad64:	f101 0c14 	add.w	ip, r1, #20
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad6e:	b299      	uxth	r1, r3
 800ad70:	fb02 6101 	mla	r1, r2, r1, r6
 800ad74:	0c1e      	lsrs	r6, r3, #16
 800ad76:	0c0b      	lsrs	r3, r1, #16
 800ad78:	fb02 3306 	mla	r3, r2, r6, r3
 800ad7c:	b289      	uxth	r1, r1
 800ad7e:	3001      	adds	r0, #1
 800ad80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad84:	4285      	cmp	r5, r0
 800ad86:	f84c 1b04 	str.w	r1, [ip], #4
 800ad8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad8e:	dcec      	bgt.n	800ad6a <__multadd+0x12>
 800ad90:	b30e      	cbz	r6, 800add6 <__multadd+0x7e>
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	dc19      	bgt.n	800adcc <__multadd+0x74>
 800ad98:	6861      	ldr	r1, [r4, #4]
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	3101      	adds	r1, #1
 800ad9e:	f7ff ff79 	bl	800ac94 <_Balloc>
 800ada2:	4680      	mov	r8, r0
 800ada4:	b928      	cbnz	r0, 800adb2 <__multadd+0x5a>
 800ada6:	4602      	mov	r2, r0
 800ada8:	4b0c      	ldr	r3, [pc, #48]	; (800addc <__multadd+0x84>)
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <__multadd+0x88>)
 800adac:	21ba      	movs	r1, #186	; 0xba
 800adae:	f001 fed7 	bl	800cb60 <__assert_func>
 800adb2:	6922      	ldr	r2, [r4, #16]
 800adb4:	3202      	adds	r2, #2
 800adb6:	f104 010c 	add.w	r1, r4, #12
 800adba:	0092      	lsls	r2, r2, #2
 800adbc:	300c      	adds	r0, #12
 800adbe:	f001 feb7 	bl	800cb30 <memcpy>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff ffa5 	bl	800ad14 <_Bfree>
 800adca:	4644      	mov	r4, r8
 800adcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800add0:	3501      	adds	r5, #1
 800add2:	615e      	str	r6, [r3, #20]
 800add4:	6125      	str	r5, [r4, #16]
 800add6:	4620      	mov	r0, r4
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	0800d579 	.word	0x0800d579
 800ade0:	0800d58a 	.word	0x0800d58a

0800ade4 <__s2b>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	4615      	mov	r5, r2
 800adec:	461f      	mov	r7, r3
 800adee:	2209      	movs	r2, #9
 800adf0:	3308      	adds	r3, #8
 800adf2:	4606      	mov	r6, r0
 800adf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf8:	2100      	movs	r1, #0
 800adfa:	2201      	movs	r2, #1
 800adfc:	429a      	cmp	r2, r3
 800adfe:	db09      	blt.n	800ae14 <__s2b+0x30>
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff ff47 	bl	800ac94 <_Balloc>
 800ae06:	b940      	cbnz	r0, 800ae1a <__s2b+0x36>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <__s2b+0x8c>)
 800ae0c:	4819      	ldr	r0, [pc, #100]	; (800ae74 <__s2b+0x90>)
 800ae0e:	21d3      	movs	r1, #211	; 0xd3
 800ae10:	f001 fea6 	bl	800cb60 <__assert_func>
 800ae14:	0052      	lsls	r2, r2, #1
 800ae16:	3101      	adds	r1, #1
 800ae18:	e7f0      	b.n	800adfc <__s2b+0x18>
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	6143      	str	r3, [r0, #20]
 800ae1e:	2d09      	cmp	r5, #9
 800ae20:	f04f 0301 	mov.w	r3, #1
 800ae24:	6103      	str	r3, [r0, #16]
 800ae26:	dd16      	ble.n	800ae56 <__s2b+0x72>
 800ae28:	f104 0909 	add.w	r9, r4, #9
 800ae2c:	46c8      	mov	r8, r9
 800ae2e:	442c      	add	r4, r5
 800ae30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae34:	4601      	mov	r1, r0
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff8c 	bl	800ad58 <__multadd>
 800ae40:	45a0      	cmp	r8, r4
 800ae42:	d1f5      	bne.n	800ae30 <__s2b+0x4c>
 800ae44:	f1a5 0408 	sub.w	r4, r5, #8
 800ae48:	444c      	add	r4, r9
 800ae4a:	1b2d      	subs	r5, r5, r4
 800ae4c:	1963      	adds	r3, r4, r5
 800ae4e:	42bb      	cmp	r3, r7
 800ae50:	db04      	blt.n	800ae5c <__s2b+0x78>
 800ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae56:	340a      	adds	r4, #10
 800ae58:	2509      	movs	r5, #9
 800ae5a:	e7f6      	b.n	800ae4a <__s2b+0x66>
 800ae5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae60:	4601      	mov	r1, r0
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	220a      	movs	r2, #10
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff76 	bl	800ad58 <__multadd>
 800ae6c:	e7ee      	b.n	800ae4c <__s2b+0x68>
 800ae6e:	bf00      	nop
 800ae70:	0800d579 	.word	0x0800d579
 800ae74:	0800d58a 	.word	0x0800d58a

0800ae78 <__hi0bits>:
 800ae78:	0c03      	lsrs	r3, r0, #16
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	b9d3      	cbnz	r3, 800aeb4 <__hi0bits+0x3c>
 800ae7e:	0400      	lsls	r0, r0, #16
 800ae80:	2310      	movs	r3, #16
 800ae82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae86:	bf04      	itt	eq
 800ae88:	0200      	lsleq	r0, r0, #8
 800ae8a:	3308      	addeq	r3, #8
 800ae8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae90:	bf04      	itt	eq
 800ae92:	0100      	lsleq	r0, r0, #4
 800ae94:	3304      	addeq	r3, #4
 800ae96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae9a:	bf04      	itt	eq
 800ae9c:	0080      	lsleq	r0, r0, #2
 800ae9e:	3302      	addeq	r3, #2
 800aea0:	2800      	cmp	r0, #0
 800aea2:	db05      	blt.n	800aeb0 <__hi0bits+0x38>
 800aea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aea8:	f103 0301 	add.w	r3, r3, #1
 800aeac:	bf08      	it	eq
 800aeae:	2320      	moveq	r3, #32
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	4770      	bx	lr
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7e4      	b.n	800ae82 <__hi0bits+0xa>

0800aeb8 <__lo0bits>:
 800aeb8:	6803      	ldr	r3, [r0, #0]
 800aeba:	f013 0207 	ands.w	r2, r3, #7
 800aebe:	d00c      	beq.n	800aeda <__lo0bits+0x22>
 800aec0:	07d9      	lsls	r1, r3, #31
 800aec2:	d422      	bmi.n	800af0a <__lo0bits+0x52>
 800aec4:	079a      	lsls	r2, r3, #30
 800aec6:	bf49      	itett	mi
 800aec8:	085b      	lsrmi	r3, r3, #1
 800aeca:	089b      	lsrpl	r3, r3, #2
 800aecc:	6003      	strmi	r3, [r0, #0]
 800aece:	2201      	movmi	r2, #1
 800aed0:	bf5c      	itt	pl
 800aed2:	6003      	strpl	r3, [r0, #0]
 800aed4:	2202      	movpl	r2, #2
 800aed6:	4610      	mov	r0, r2
 800aed8:	4770      	bx	lr
 800aeda:	b299      	uxth	r1, r3
 800aedc:	b909      	cbnz	r1, 800aee2 <__lo0bits+0x2a>
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	2210      	movs	r2, #16
 800aee2:	b2d9      	uxtb	r1, r3
 800aee4:	b909      	cbnz	r1, 800aeea <__lo0bits+0x32>
 800aee6:	3208      	adds	r2, #8
 800aee8:	0a1b      	lsrs	r3, r3, #8
 800aeea:	0719      	lsls	r1, r3, #28
 800aeec:	bf04      	itt	eq
 800aeee:	091b      	lsreq	r3, r3, #4
 800aef0:	3204      	addeq	r2, #4
 800aef2:	0799      	lsls	r1, r3, #30
 800aef4:	bf04      	itt	eq
 800aef6:	089b      	lsreq	r3, r3, #2
 800aef8:	3202      	addeq	r2, #2
 800aefa:	07d9      	lsls	r1, r3, #31
 800aefc:	d403      	bmi.n	800af06 <__lo0bits+0x4e>
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	f102 0201 	add.w	r2, r2, #1
 800af04:	d003      	beq.n	800af0e <__lo0bits+0x56>
 800af06:	6003      	str	r3, [r0, #0]
 800af08:	e7e5      	b.n	800aed6 <__lo0bits+0x1e>
 800af0a:	2200      	movs	r2, #0
 800af0c:	e7e3      	b.n	800aed6 <__lo0bits+0x1e>
 800af0e:	2220      	movs	r2, #32
 800af10:	e7e1      	b.n	800aed6 <__lo0bits+0x1e>
	...

0800af14 <__i2b>:
 800af14:	b510      	push	{r4, lr}
 800af16:	460c      	mov	r4, r1
 800af18:	2101      	movs	r1, #1
 800af1a:	f7ff febb 	bl	800ac94 <_Balloc>
 800af1e:	4602      	mov	r2, r0
 800af20:	b928      	cbnz	r0, 800af2e <__i2b+0x1a>
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <__i2b+0x24>)
 800af24:	4805      	ldr	r0, [pc, #20]	; (800af3c <__i2b+0x28>)
 800af26:	f240 1145 	movw	r1, #325	; 0x145
 800af2a:	f001 fe19 	bl	800cb60 <__assert_func>
 800af2e:	2301      	movs	r3, #1
 800af30:	6144      	str	r4, [r0, #20]
 800af32:	6103      	str	r3, [r0, #16]
 800af34:	bd10      	pop	{r4, pc}
 800af36:	bf00      	nop
 800af38:	0800d579 	.word	0x0800d579
 800af3c:	0800d58a 	.word	0x0800d58a

0800af40 <__multiply>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4691      	mov	r9, r2
 800af46:	690a      	ldr	r2, [r1, #16]
 800af48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	bfb8      	it	lt
 800af50:	460b      	movlt	r3, r1
 800af52:	460c      	mov	r4, r1
 800af54:	bfbc      	itt	lt
 800af56:	464c      	movlt	r4, r9
 800af58:	4699      	movlt	r9, r3
 800af5a:	6927      	ldr	r7, [r4, #16]
 800af5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af60:	68a3      	ldr	r3, [r4, #8]
 800af62:	6861      	ldr	r1, [r4, #4]
 800af64:	eb07 060a 	add.w	r6, r7, sl
 800af68:	42b3      	cmp	r3, r6
 800af6a:	b085      	sub	sp, #20
 800af6c:	bfb8      	it	lt
 800af6e:	3101      	addlt	r1, #1
 800af70:	f7ff fe90 	bl	800ac94 <_Balloc>
 800af74:	b930      	cbnz	r0, 800af84 <__multiply+0x44>
 800af76:	4602      	mov	r2, r0
 800af78:	4b44      	ldr	r3, [pc, #272]	; (800b08c <__multiply+0x14c>)
 800af7a:	4845      	ldr	r0, [pc, #276]	; (800b090 <__multiply+0x150>)
 800af7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af80:	f001 fdee 	bl	800cb60 <__assert_func>
 800af84:	f100 0514 	add.w	r5, r0, #20
 800af88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af8c:	462b      	mov	r3, r5
 800af8e:	2200      	movs	r2, #0
 800af90:	4543      	cmp	r3, r8
 800af92:	d321      	bcc.n	800afd8 <__multiply+0x98>
 800af94:	f104 0314 	add.w	r3, r4, #20
 800af98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af9c:	f109 0314 	add.w	r3, r9, #20
 800afa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afa4:	9202      	str	r2, [sp, #8]
 800afa6:	1b3a      	subs	r2, r7, r4
 800afa8:	3a15      	subs	r2, #21
 800afaa:	f022 0203 	bic.w	r2, r2, #3
 800afae:	3204      	adds	r2, #4
 800afb0:	f104 0115 	add.w	r1, r4, #21
 800afb4:	428f      	cmp	r7, r1
 800afb6:	bf38      	it	cc
 800afb8:	2204      	movcc	r2, #4
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	9a02      	ldr	r2, [sp, #8]
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d80c      	bhi.n	800afde <__multiply+0x9e>
 800afc4:	2e00      	cmp	r6, #0
 800afc6:	dd03      	ble.n	800afd0 <__multiply+0x90>
 800afc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d05b      	beq.n	800b088 <__multiply+0x148>
 800afd0:	6106      	str	r6, [r0, #16]
 800afd2:	b005      	add	sp, #20
 800afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	f843 2b04 	str.w	r2, [r3], #4
 800afdc:	e7d8      	b.n	800af90 <__multiply+0x50>
 800afde:	f8b3 a000 	ldrh.w	sl, [r3]
 800afe2:	f1ba 0f00 	cmp.w	sl, #0
 800afe6:	d024      	beq.n	800b032 <__multiply+0xf2>
 800afe8:	f104 0e14 	add.w	lr, r4, #20
 800afec:	46a9      	mov	r9, r5
 800afee:	f04f 0c00 	mov.w	ip, #0
 800aff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aff6:	f8d9 1000 	ldr.w	r1, [r9]
 800affa:	fa1f fb82 	uxth.w	fp, r2
 800affe:	b289      	uxth	r1, r1
 800b000:	fb0a 110b 	mla	r1, sl, fp, r1
 800b004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b008:	f8d9 2000 	ldr.w	r2, [r9]
 800b00c:	4461      	add	r1, ip
 800b00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b012:	fb0a c20b 	mla	r2, sl, fp, ip
 800b016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b01a:	b289      	uxth	r1, r1
 800b01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b020:	4577      	cmp	r7, lr
 800b022:	f849 1b04 	str.w	r1, [r9], #4
 800b026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b02a:	d8e2      	bhi.n	800aff2 <__multiply+0xb2>
 800b02c:	9a01      	ldr	r2, [sp, #4]
 800b02e:	f845 c002 	str.w	ip, [r5, r2]
 800b032:	9a03      	ldr	r2, [sp, #12]
 800b034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b038:	3304      	adds	r3, #4
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d021      	beq.n	800b084 <__multiply+0x144>
 800b040:	6829      	ldr	r1, [r5, #0]
 800b042:	f104 0c14 	add.w	ip, r4, #20
 800b046:	46ae      	mov	lr, r5
 800b048:	f04f 0a00 	mov.w	sl, #0
 800b04c:	f8bc b000 	ldrh.w	fp, [ip]
 800b050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b054:	fb09 220b 	mla	r2, r9, fp, r2
 800b058:	4452      	add	r2, sl
 800b05a:	b289      	uxth	r1, r1
 800b05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b060:	f84e 1b04 	str.w	r1, [lr], #4
 800b064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b06c:	f8be 1000 	ldrh.w	r1, [lr]
 800b070:	fb09 110a 	mla	r1, r9, sl, r1
 800b074:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b078:	4567      	cmp	r7, ip
 800b07a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b07e:	d8e5      	bhi.n	800b04c <__multiply+0x10c>
 800b080:	9a01      	ldr	r2, [sp, #4]
 800b082:	50a9      	str	r1, [r5, r2]
 800b084:	3504      	adds	r5, #4
 800b086:	e799      	b.n	800afbc <__multiply+0x7c>
 800b088:	3e01      	subs	r6, #1
 800b08a:	e79b      	b.n	800afc4 <__multiply+0x84>
 800b08c:	0800d579 	.word	0x0800d579
 800b090:	0800d58a 	.word	0x0800d58a

0800b094 <__pow5mult>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	4615      	mov	r5, r2
 800b09a:	f012 0203 	ands.w	r2, r2, #3
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	d007      	beq.n	800b0b4 <__pow5mult+0x20>
 800b0a4:	4c25      	ldr	r4, [pc, #148]	; (800b13c <__pow5mult+0xa8>)
 800b0a6:	3a01      	subs	r2, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ae:	f7ff fe53 	bl	800ad58 <__multadd>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	10ad      	asrs	r5, r5, #2
 800b0b6:	d03d      	beq.n	800b134 <__pow5mult+0xa0>
 800b0b8:	69f4      	ldr	r4, [r6, #28]
 800b0ba:	b97c      	cbnz	r4, 800b0dc <__pow5mult+0x48>
 800b0bc:	2010      	movs	r0, #16
 800b0be:	f7ff fd35 	bl	800ab2c <malloc>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	61f0      	str	r0, [r6, #28]
 800b0c6:	b928      	cbnz	r0, 800b0d4 <__pow5mult+0x40>
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <__pow5mult+0xac>)
 800b0ca:	481e      	ldr	r0, [pc, #120]	; (800b144 <__pow5mult+0xb0>)
 800b0cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b0d0:	f001 fd46 	bl	800cb60 <__assert_func>
 800b0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d8:	6004      	str	r4, [r0, #0]
 800b0da:	60c4      	str	r4, [r0, #12]
 800b0dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e4:	b94c      	cbnz	r4, 800b0fa <__pow5mult+0x66>
 800b0e6:	f240 2171 	movw	r1, #625	; 0x271
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff12 	bl	800af14 <__i2b>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	f04f 0900 	mov.w	r9, #0
 800b0fe:	07eb      	lsls	r3, r5, #31
 800b100:	d50a      	bpl.n	800b118 <__pow5mult+0x84>
 800b102:	4639      	mov	r1, r7
 800b104:	4622      	mov	r2, r4
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff1a 	bl	800af40 <__multiply>
 800b10c:	4639      	mov	r1, r7
 800b10e:	4680      	mov	r8, r0
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fdff 	bl	800ad14 <_Bfree>
 800b116:	4647      	mov	r7, r8
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	d00b      	beq.n	800b134 <__pow5mult+0xa0>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	b938      	cbnz	r0, 800b130 <__pow5mult+0x9c>
 800b120:	4622      	mov	r2, r4
 800b122:	4621      	mov	r1, r4
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ff0b 	bl	800af40 <__multiply>
 800b12a:	6020      	str	r0, [r4, #0]
 800b12c:	f8c0 9000 	str.w	r9, [r0]
 800b130:	4604      	mov	r4, r0
 800b132:	e7e4      	b.n	800b0fe <__pow5mult+0x6a>
 800b134:	4638      	mov	r0, r7
 800b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13a:	bf00      	nop
 800b13c:	0800d6d8 	.word	0x0800d6d8
 800b140:	0800d50a 	.word	0x0800d50a
 800b144:	0800d58a 	.word	0x0800d58a

0800b148 <__lshift>:
 800b148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	460c      	mov	r4, r1
 800b14e:	6849      	ldr	r1, [r1, #4]
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b156:	68a3      	ldr	r3, [r4, #8]
 800b158:	4607      	mov	r7, r0
 800b15a:	4691      	mov	r9, r2
 800b15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b160:	f108 0601 	add.w	r6, r8, #1
 800b164:	42b3      	cmp	r3, r6
 800b166:	db0b      	blt.n	800b180 <__lshift+0x38>
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff fd93 	bl	800ac94 <_Balloc>
 800b16e:	4605      	mov	r5, r0
 800b170:	b948      	cbnz	r0, 800b186 <__lshift+0x3e>
 800b172:	4602      	mov	r2, r0
 800b174:	4b28      	ldr	r3, [pc, #160]	; (800b218 <__lshift+0xd0>)
 800b176:	4829      	ldr	r0, [pc, #164]	; (800b21c <__lshift+0xd4>)
 800b178:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b17c:	f001 fcf0 	bl	800cb60 <__assert_func>
 800b180:	3101      	adds	r1, #1
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	e7ee      	b.n	800b164 <__lshift+0x1c>
 800b186:	2300      	movs	r3, #0
 800b188:	f100 0114 	add.w	r1, r0, #20
 800b18c:	f100 0210 	add.w	r2, r0, #16
 800b190:	4618      	mov	r0, r3
 800b192:	4553      	cmp	r3, sl
 800b194:	db33      	blt.n	800b1fe <__lshift+0xb6>
 800b196:	6920      	ldr	r0, [r4, #16]
 800b198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	f019 091f 	ands.w	r9, r9, #31
 800b1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1ac:	d02b      	beq.n	800b206 <__lshift+0xbe>
 800b1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b1b2:	468a      	mov	sl, r1
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	6818      	ldr	r0, [r3, #0]
 800b1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b1bc:	4310      	orrs	r0, r2
 800b1be:	f84a 0b04 	str.w	r0, [sl], #4
 800b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c6:	459c      	cmp	ip, r3
 800b1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1cc:	d8f3      	bhi.n	800b1b6 <__lshift+0x6e>
 800b1ce:	ebac 0304 	sub.w	r3, ip, r4
 800b1d2:	3b15      	subs	r3, #21
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	3304      	adds	r3, #4
 800b1da:	f104 0015 	add.w	r0, r4, #21
 800b1de:	4584      	cmp	ip, r0
 800b1e0:	bf38      	it	cc
 800b1e2:	2304      	movcc	r3, #4
 800b1e4:	50ca      	str	r2, [r1, r3]
 800b1e6:	b10a      	cbz	r2, 800b1ec <__lshift+0xa4>
 800b1e8:	f108 0602 	add.w	r6, r8, #2
 800b1ec:	3e01      	subs	r6, #1
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	612e      	str	r6, [r5, #16]
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	f7ff fd8e 	bl	800ad14 <_Bfree>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b202:	3301      	adds	r3, #1
 800b204:	e7c5      	b.n	800b192 <__lshift+0x4a>
 800b206:	3904      	subs	r1, #4
 800b208:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b210:	459c      	cmp	ip, r3
 800b212:	d8f9      	bhi.n	800b208 <__lshift+0xc0>
 800b214:	e7ea      	b.n	800b1ec <__lshift+0xa4>
 800b216:	bf00      	nop
 800b218:	0800d579 	.word	0x0800d579
 800b21c:	0800d58a 	.word	0x0800d58a

0800b220 <__mcmp>:
 800b220:	b530      	push	{r4, r5, lr}
 800b222:	6902      	ldr	r2, [r0, #16]
 800b224:	690c      	ldr	r4, [r1, #16]
 800b226:	1b12      	subs	r2, r2, r4
 800b228:	d10e      	bne.n	800b248 <__mcmp+0x28>
 800b22a:	f100 0314 	add.w	r3, r0, #20
 800b22e:	3114      	adds	r1, #20
 800b230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b23c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b240:	42a5      	cmp	r5, r4
 800b242:	d003      	beq.n	800b24c <__mcmp+0x2c>
 800b244:	d305      	bcc.n	800b252 <__mcmp+0x32>
 800b246:	2201      	movs	r2, #1
 800b248:	4610      	mov	r0, r2
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	4283      	cmp	r3, r0
 800b24e:	d3f3      	bcc.n	800b238 <__mcmp+0x18>
 800b250:	e7fa      	b.n	800b248 <__mcmp+0x28>
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	e7f7      	b.n	800b248 <__mcmp+0x28>

0800b258 <__mdiff>:
 800b258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	460c      	mov	r4, r1
 800b25e:	4606      	mov	r6, r0
 800b260:	4611      	mov	r1, r2
 800b262:	4620      	mov	r0, r4
 800b264:	4690      	mov	r8, r2
 800b266:	f7ff ffdb 	bl	800b220 <__mcmp>
 800b26a:	1e05      	subs	r5, r0, #0
 800b26c:	d110      	bne.n	800b290 <__mdiff+0x38>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff fd0f 	bl	800ac94 <_Balloc>
 800b276:	b930      	cbnz	r0, 800b286 <__mdiff+0x2e>
 800b278:	4b3a      	ldr	r3, [pc, #232]	; (800b364 <__mdiff+0x10c>)
 800b27a:	4602      	mov	r2, r0
 800b27c:	f240 2137 	movw	r1, #567	; 0x237
 800b280:	4839      	ldr	r0, [pc, #228]	; (800b368 <__mdiff+0x110>)
 800b282:	f001 fc6d 	bl	800cb60 <__assert_func>
 800b286:	2301      	movs	r3, #1
 800b288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	bfa4      	itt	ge
 800b292:	4643      	movge	r3, r8
 800b294:	46a0      	movge	r8, r4
 800b296:	4630      	mov	r0, r6
 800b298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b29c:	bfa6      	itte	ge
 800b29e:	461c      	movge	r4, r3
 800b2a0:	2500      	movge	r5, #0
 800b2a2:	2501      	movlt	r5, #1
 800b2a4:	f7ff fcf6 	bl	800ac94 <_Balloc>
 800b2a8:	b920      	cbnz	r0, 800b2b4 <__mdiff+0x5c>
 800b2aa:	4b2e      	ldr	r3, [pc, #184]	; (800b364 <__mdiff+0x10c>)
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	f240 2145 	movw	r1, #581	; 0x245
 800b2b2:	e7e5      	b.n	800b280 <__mdiff+0x28>
 800b2b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2b8:	6926      	ldr	r6, [r4, #16]
 800b2ba:	60c5      	str	r5, [r0, #12]
 800b2bc:	f104 0914 	add.w	r9, r4, #20
 800b2c0:	f108 0514 	add.w	r5, r8, #20
 800b2c4:	f100 0e14 	add.w	lr, r0, #20
 800b2c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2d0:	f108 0210 	add.w	r2, r8, #16
 800b2d4:	46f2      	mov	sl, lr
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2e0:	fa11 f88b 	uxtah	r8, r1, fp
 800b2e4:	b299      	uxth	r1, r3
 800b2e6:	0c1b      	lsrs	r3, r3, #16
 800b2e8:	eba8 0801 	sub.w	r8, r8, r1
 800b2ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2f4:	fa1f f888 	uxth.w	r8, r8
 800b2f8:	1419      	asrs	r1, r3, #16
 800b2fa:	454e      	cmp	r6, r9
 800b2fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b300:	f84a 3b04 	str.w	r3, [sl], #4
 800b304:	d8e8      	bhi.n	800b2d8 <__mdiff+0x80>
 800b306:	1b33      	subs	r3, r6, r4
 800b308:	3b15      	subs	r3, #21
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	3304      	adds	r3, #4
 800b310:	3415      	adds	r4, #21
 800b312:	42a6      	cmp	r6, r4
 800b314:	bf38      	it	cc
 800b316:	2304      	movcc	r3, #4
 800b318:	441d      	add	r5, r3
 800b31a:	4473      	add	r3, lr
 800b31c:	469e      	mov	lr, r3
 800b31e:	462e      	mov	r6, r5
 800b320:	4566      	cmp	r6, ip
 800b322:	d30e      	bcc.n	800b342 <__mdiff+0xea>
 800b324:	f10c 0203 	add.w	r2, ip, #3
 800b328:	1b52      	subs	r2, r2, r5
 800b32a:	f022 0203 	bic.w	r2, r2, #3
 800b32e:	3d03      	subs	r5, #3
 800b330:	45ac      	cmp	ip, r5
 800b332:	bf38      	it	cc
 800b334:	2200      	movcc	r2, #0
 800b336:	4413      	add	r3, r2
 800b338:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b33c:	b17a      	cbz	r2, 800b35e <__mdiff+0x106>
 800b33e:	6107      	str	r7, [r0, #16]
 800b340:	e7a4      	b.n	800b28c <__mdiff+0x34>
 800b342:	f856 8b04 	ldr.w	r8, [r6], #4
 800b346:	fa11 f288 	uxtah	r2, r1, r8
 800b34a:	1414      	asrs	r4, r2, #16
 800b34c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b350:	b292      	uxth	r2, r2
 800b352:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b356:	f84e 2b04 	str.w	r2, [lr], #4
 800b35a:	1421      	asrs	r1, r4, #16
 800b35c:	e7e0      	b.n	800b320 <__mdiff+0xc8>
 800b35e:	3f01      	subs	r7, #1
 800b360:	e7ea      	b.n	800b338 <__mdiff+0xe0>
 800b362:	bf00      	nop
 800b364:	0800d579 	.word	0x0800d579
 800b368:	0800d58a 	.word	0x0800d58a

0800b36c <__ulp>:
 800b36c:	b082      	sub	sp, #8
 800b36e:	ed8d 0b00 	vstr	d0, [sp]
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <__ulp+0x48>)
 800b376:	4013      	ands	r3, r2
 800b378:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc08      	bgt.n	800b392 <__ulp+0x26>
 800b380:	425b      	negs	r3, r3
 800b382:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b386:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b38a:	da04      	bge.n	800b396 <__ulp+0x2a>
 800b38c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b390:	4113      	asrs	r3, r2
 800b392:	2200      	movs	r2, #0
 800b394:	e008      	b.n	800b3a8 <__ulp+0x3c>
 800b396:	f1a2 0314 	sub.w	r3, r2, #20
 800b39a:	2b1e      	cmp	r3, #30
 800b39c:	bfda      	itte	le
 800b39e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b3a2:	40da      	lsrle	r2, r3
 800b3a4:	2201      	movgt	r2, #1
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	ec41 0b10 	vmov	d0, r0, r1
 800b3b0:	b002      	add	sp, #8
 800b3b2:	4770      	bx	lr
 800b3b4:	7ff00000 	.word	0x7ff00000

0800b3b8 <__b2d>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	6906      	ldr	r6, [r0, #16]
 800b3be:	f100 0814 	add.w	r8, r0, #20
 800b3c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3c6:	1f37      	subs	r7, r6, #4
 800b3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7ff fd53 	bl	800ae78 <__hi0bits>
 800b3d2:	f1c0 0320 	rsb	r3, r0, #32
 800b3d6:	280a      	cmp	r0, #10
 800b3d8:	600b      	str	r3, [r1, #0]
 800b3da:	491b      	ldr	r1, [pc, #108]	; (800b448 <__b2d+0x90>)
 800b3dc:	dc15      	bgt.n	800b40a <__b2d+0x52>
 800b3de:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3e6:	45b8      	cmp	r8, r7
 800b3e8:	ea43 0501 	orr.w	r5, r3, r1
 800b3ec:	bf34      	ite	cc
 800b3ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3f2:	2300      	movcs	r3, #0
 800b3f4:	3015      	adds	r0, #21
 800b3f6:	fa02 f000 	lsl.w	r0, r2, r0
 800b3fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3fe:	4303      	orrs	r3, r0
 800b400:	461c      	mov	r4, r3
 800b402:	ec45 4b10 	vmov	d0, r4, r5
 800b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40a:	45b8      	cmp	r8, r7
 800b40c:	bf3a      	itte	cc
 800b40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b412:	f1a6 0708 	subcc.w	r7, r6, #8
 800b416:	2300      	movcs	r3, #0
 800b418:	380b      	subs	r0, #11
 800b41a:	d012      	beq.n	800b442 <__b2d+0x8a>
 800b41c:	f1c0 0120 	rsb	r1, r0, #32
 800b420:	fa23 f401 	lsr.w	r4, r3, r1
 800b424:	4082      	lsls	r2, r0
 800b426:	4322      	orrs	r2, r4
 800b428:	4547      	cmp	r7, r8
 800b42a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b42e:	bf8c      	ite	hi
 800b430:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b434:	2200      	movls	r2, #0
 800b436:	4083      	lsls	r3, r0
 800b438:	40ca      	lsrs	r2, r1
 800b43a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b43e:	4313      	orrs	r3, r2
 800b440:	e7de      	b.n	800b400 <__b2d+0x48>
 800b442:	ea42 0501 	orr.w	r5, r2, r1
 800b446:	e7db      	b.n	800b400 <__b2d+0x48>
 800b448:	3ff00000 	.word	0x3ff00000

0800b44c <__d2b>:
 800b44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b450:	460f      	mov	r7, r1
 800b452:	2101      	movs	r1, #1
 800b454:	ec59 8b10 	vmov	r8, r9, d0
 800b458:	4616      	mov	r6, r2
 800b45a:	f7ff fc1b 	bl	800ac94 <_Balloc>
 800b45e:	4604      	mov	r4, r0
 800b460:	b930      	cbnz	r0, 800b470 <__d2b+0x24>
 800b462:	4602      	mov	r2, r0
 800b464:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <__d2b+0xac>)
 800b466:	4825      	ldr	r0, [pc, #148]	; (800b4fc <__d2b+0xb0>)
 800b468:	f240 310f 	movw	r1, #783	; 0x30f
 800b46c:	f001 fb78 	bl	800cb60 <__assert_func>
 800b470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b478:	bb2d      	cbnz	r5, 800b4c6 <__d2b+0x7a>
 800b47a:	9301      	str	r3, [sp, #4]
 800b47c:	f1b8 0300 	subs.w	r3, r8, #0
 800b480:	d026      	beq.n	800b4d0 <__d2b+0x84>
 800b482:	4668      	mov	r0, sp
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	f7ff fd17 	bl	800aeb8 <__lo0bits>
 800b48a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b48e:	b1e8      	cbz	r0, 800b4cc <__d2b+0x80>
 800b490:	f1c0 0320 	rsb	r3, r0, #32
 800b494:	fa02 f303 	lsl.w	r3, r2, r3
 800b498:	430b      	orrs	r3, r1
 800b49a:	40c2      	lsrs	r2, r0
 800b49c:	6163      	str	r3, [r4, #20]
 800b49e:	9201      	str	r2, [sp, #4]
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	61a3      	str	r3, [r4, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	2202      	movne	r2, #2
 800b4aa:	2201      	moveq	r2, #1
 800b4ac:	6122      	str	r2, [r4, #16]
 800b4ae:	b1bd      	cbz	r5, 800b4e0 <__d2b+0x94>
 800b4b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4b4:	4405      	add	r5, r0
 800b4b6:	603d      	str	r5, [r7, #0]
 800b4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4bc:	6030      	str	r0, [r6, #0]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	b003      	add	sp, #12
 800b4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4ca:	e7d6      	b.n	800b47a <__d2b+0x2e>
 800b4cc:	6161      	str	r1, [r4, #20]
 800b4ce:	e7e7      	b.n	800b4a0 <__d2b+0x54>
 800b4d0:	a801      	add	r0, sp, #4
 800b4d2:	f7ff fcf1 	bl	800aeb8 <__lo0bits>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	6163      	str	r3, [r4, #20]
 800b4da:	3020      	adds	r0, #32
 800b4dc:	2201      	movs	r2, #1
 800b4de:	e7e5      	b.n	800b4ac <__d2b+0x60>
 800b4e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4e8:	6038      	str	r0, [r7, #0]
 800b4ea:	6918      	ldr	r0, [r3, #16]
 800b4ec:	f7ff fcc4 	bl	800ae78 <__hi0bits>
 800b4f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4f4:	e7e2      	b.n	800b4bc <__d2b+0x70>
 800b4f6:	bf00      	nop
 800b4f8:	0800d579 	.word	0x0800d579
 800b4fc:	0800d58a 	.word	0x0800d58a

0800b500 <__ratio>:
 800b500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	4688      	mov	r8, r1
 800b506:	4669      	mov	r1, sp
 800b508:	4681      	mov	r9, r0
 800b50a:	f7ff ff55 	bl	800b3b8 <__b2d>
 800b50e:	a901      	add	r1, sp, #4
 800b510:	4640      	mov	r0, r8
 800b512:	ec55 4b10 	vmov	r4, r5, d0
 800b516:	f7ff ff4f 	bl	800b3b8 <__b2d>
 800b51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b51e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b522:	eba3 0c02 	sub.w	ip, r3, r2
 800b526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b530:	ec51 0b10 	vmov	r0, r1, d0
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfd6      	itet	le
 800b538:	460a      	movle	r2, r1
 800b53a:	462a      	movgt	r2, r5
 800b53c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b540:	468b      	mov	fp, r1
 800b542:	462f      	mov	r7, r5
 800b544:	bfd4      	ite	le
 800b546:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b54a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b54e:	4620      	mov	r0, r4
 800b550:	ee10 2a10 	vmov	r2, s0
 800b554:	465b      	mov	r3, fp
 800b556:	4639      	mov	r1, r7
 800b558:	f7f5 f978 	bl	800084c <__aeabi_ddiv>
 800b55c:	ec41 0b10 	vmov	d0, r0, r1
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b566 <__copybits>:
 800b566:	3901      	subs	r1, #1
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	1149      	asrs	r1, r1, #5
 800b56c:	6914      	ldr	r4, [r2, #16]
 800b56e:	3101      	adds	r1, #1
 800b570:	f102 0314 	add.w	r3, r2, #20
 800b574:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b578:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b57c:	1f05      	subs	r5, r0, #4
 800b57e:	42a3      	cmp	r3, r4
 800b580:	d30c      	bcc.n	800b59c <__copybits+0x36>
 800b582:	1aa3      	subs	r3, r4, r2
 800b584:	3b11      	subs	r3, #17
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	3211      	adds	r2, #17
 800b58c:	42a2      	cmp	r2, r4
 800b58e:	bf88      	it	hi
 800b590:	2300      	movhi	r3, #0
 800b592:	4418      	add	r0, r3
 800b594:	2300      	movs	r3, #0
 800b596:	4288      	cmp	r0, r1
 800b598:	d305      	bcc.n	800b5a6 <__copybits+0x40>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5a4:	e7eb      	b.n	800b57e <__copybits+0x18>
 800b5a6:	f840 3b04 	str.w	r3, [r0], #4
 800b5aa:	e7f4      	b.n	800b596 <__copybits+0x30>

0800b5ac <__any_on>:
 800b5ac:	f100 0214 	add.w	r2, r0, #20
 800b5b0:	6900      	ldr	r0, [r0, #16]
 800b5b2:	114b      	asrs	r3, r1, #5
 800b5b4:	4298      	cmp	r0, r3
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	db11      	blt.n	800b5de <__any_on+0x32>
 800b5ba:	dd0a      	ble.n	800b5d2 <__any_on+0x26>
 800b5bc:	f011 011f 	ands.w	r1, r1, #31
 800b5c0:	d007      	beq.n	800b5d2 <__any_on+0x26>
 800b5c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5c6:	fa24 f001 	lsr.w	r0, r4, r1
 800b5ca:	fa00 f101 	lsl.w	r1, r0, r1
 800b5ce:	428c      	cmp	r4, r1
 800b5d0:	d10b      	bne.n	800b5ea <__any_on+0x3e>
 800b5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d803      	bhi.n	800b5e2 <__any_on+0x36>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	4603      	mov	r3, r0
 800b5e0:	e7f7      	b.n	800b5d2 <__any_on+0x26>
 800b5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e6:	2900      	cmp	r1, #0
 800b5e8:	d0f5      	beq.n	800b5d6 <__any_on+0x2a>
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e7f6      	b.n	800b5dc <__any_on+0x30>

0800b5ee <sulp>:
 800b5ee:	b570      	push	{r4, r5, r6, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	ec45 4b10 	vmov	d0, r4, r5
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	f7ff feb7 	bl	800b36c <__ulp>
 800b5fe:	ec51 0b10 	vmov	r0, r1, d0
 800b602:	b17e      	cbz	r6, 800b624 <sulp+0x36>
 800b604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <sulp+0x36>
 800b610:	051b      	lsls	r3, r3, #20
 800b612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b616:	2400      	movs	r4, #0
 800b618:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b61c:	4622      	mov	r2, r4
 800b61e:	462b      	mov	r3, r5
 800b620:	f7f4 ffea 	bl	80005f8 <__aeabi_dmul>
 800b624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b628 <_strtod_l>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ed2d 8b02 	vpush	{d8}
 800b630:	b09b      	sub	sp, #108	; 0x6c
 800b632:	4604      	mov	r4, r0
 800b634:	9213      	str	r2, [sp, #76]	; 0x4c
 800b636:	2200      	movs	r2, #0
 800b638:	9216      	str	r2, [sp, #88]	; 0x58
 800b63a:	460d      	mov	r5, r1
 800b63c:	f04f 0800 	mov.w	r8, #0
 800b640:	f04f 0900 	mov.w	r9, #0
 800b644:	460a      	mov	r2, r1
 800b646:	9215      	str	r2, [sp, #84]	; 0x54
 800b648:	7811      	ldrb	r1, [r2, #0]
 800b64a:	292b      	cmp	r1, #43	; 0x2b
 800b64c:	d04c      	beq.n	800b6e8 <_strtod_l+0xc0>
 800b64e:	d83a      	bhi.n	800b6c6 <_strtod_l+0x9e>
 800b650:	290d      	cmp	r1, #13
 800b652:	d834      	bhi.n	800b6be <_strtod_l+0x96>
 800b654:	2908      	cmp	r1, #8
 800b656:	d834      	bhi.n	800b6c2 <_strtod_l+0x9a>
 800b658:	2900      	cmp	r1, #0
 800b65a:	d03d      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b65c:	2200      	movs	r2, #0
 800b65e:	920a      	str	r2, [sp, #40]	; 0x28
 800b660:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b662:	7832      	ldrb	r2, [r6, #0]
 800b664:	2a30      	cmp	r2, #48	; 0x30
 800b666:	f040 80b4 	bne.w	800b7d2 <_strtod_l+0x1aa>
 800b66a:	7872      	ldrb	r2, [r6, #1]
 800b66c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b670:	2a58      	cmp	r2, #88	; 0x58
 800b672:	d170      	bne.n	800b756 <_strtod_l+0x12e>
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	ab16      	add	r3, sp, #88	; 0x58
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	4a8e      	ldr	r2, [pc, #568]	; (800b8b8 <_strtod_l+0x290>)
 800b680:	ab17      	add	r3, sp, #92	; 0x5c
 800b682:	a915      	add	r1, sp, #84	; 0x54
 800b684:	4620      	mov	r0, r4
 800b686:	f001 fb07 	bl	800cc98 <__gethex>
 800b68a:	f010 070f 	ands.w	r7, r0, #15
 800b68e:	4605      	mov	r5, r0
 800b690:	d005      	beq.n	800b69e <_strtod_l+0x76>
 800b692:	2f06      	cmp	r7, #6
 800b694:	d12a      	bne.n	800b6ec <_strtod_l+0xc4>
 800b696:	3601      	adds	r6, #1
 800b698:	2300      	movs	r3, #0
 800b69a:	9615      	str	r6, [sp, #84]	; 0x54
 800b69c:	930a      	str	r3, [sp, #40]	; 0x28
 800b69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f040 857f 	bne.w	800c1a4 <_strtod_l+0xb7c>
 800b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a8:	b1db      	cbz	r3, 800b6e2 <_strtod_l+0xba>
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b6b0:	ec43 2b10 	vmov	d0, r2, r3
 800b6b4:	b01b      	add	sp, #108	; 0x6c
 800b6b6:	ecbd 8b02 	vpop	{d8}
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	2920      	cmp	r1, #32
 800b6c0:	d1cc      	bne.n	800b65c <_strtod_l+0x34>
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	e7bf      	b.n	800b646 <_strtod_l+0x1e>
 800b6c6:	292d      	cmp	r1, #45	; 0x2d
 800b6c8:	d1c8      	bne.n	800b65c <_strtod_l+0x34>
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	910a      	str	r1, [sp, #40]	; 0x28
 800b6ce:	1c51      	adds	r1, r2, #1
 800b6d0:	9115      	str	r1, [sp, #84]	; 0x54
 800b6d2:	7852      	ldrb	r2, [r2, #1]
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	d1c3      	bne.n	800b660 <_strtod_l+0x38>
 800b6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6da:	9515      	str	r5, [sp, #84]	; 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f040 855f 	bne.w	800c1a0 <_strtod_l+0xb78>
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	e7e3      	b.n	800b6b0 <_strtod_l+0x88>
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	e7ef      	b.n	800b6cc <_strtod_l+0xa4>
 800b6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6ee:	b13a      	cbz	r2, 800b700 <_strtod_l+0xd8>
 800b6f0:	2135      	movs	r1, #53	; 0x35
 800b6f2:	a818      	add	r0, sp, #96	; 0x60
 800b6f4:	f7ff ff37 	bl	800b566 <__copybits>
 800b6f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff fb0a 	bl	800ad14 <_Bfree>
 800b700:	3f01      	subs	r7, #1
 800b702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b704:	2f04      	cmp	r7, #4
 800b706:	d806      	bhi.n	800b716 <_strtod_l+0xee>
 800b708:	e8df f007 	tbb	[pc, r7]
 800b70c:	201d0314 	.word	0x201d0314
 800b710:	14          	.byte	0x14
 800b711:	00          	.byte	0x00
 800b712:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b716:	05e9      	lsls	r1, r5, #23
 800b718:	bf48      	it	mi
 800b71a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b722:	0d1b      	lsrs	r3, r3, #20
 800b724:	051b      	lsls	r3, r3, #20
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1b9      	bne.n	800b69e <_strtod_l+0x76>
 800b72a:	f7fe fb07 	bl	8009d3c <__errno>
 800b72e:	2322      	movs	r3, #34	; 0x22
 800b730:	6003      	str	r3, [r0, #0]
 800b732:	e7b4      	b.n	800b69e <_strtod_l+0x76>
 800b734:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b73c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b744:	e7e7      	b.n	800b716 <_strtod_l+0xee>
 800b746:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b8c0 <_strtod_l+0x298>
 800b74a:	e7e4      	b.n	800b716 <_strtod_l+0xee>
 800b74c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b750:	f04f 38ff 	mov.w	r8, #4294967295
 800b754:	e7df      	b.n	800b716 <_strtod_l+0xee>
 800b756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	9215      	str	r2, [sp, #84]	; 0x54
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b30      	cmp	r3, #48	; 0x30
 800b760:	d0f9      	beq.n	800b756 <_strtod_l+0x12e>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d09b      	beq.n	800b69e <_strtod_l+0x76>
 800b766:	2301      	movs	r3, #1
 800b768:	f04f 0a00 	mov.w	sl, #0
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b770:	930b      	str	r3, [sp, #44]	; 0x2c
 800b772:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b776:	46d3      	mov	fp, sl
 800b778:	220a      	movs	r2, #10
 800b77a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b77c:	7806      	ldrb	r6, [r0, #0]
 800b77e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b782:	b2d9      	uxtb	r1, r3
 800b784:	2909      	cmp	r1, #9
 800b786:	d926      	bls.n	800b7d6 <_strtod_l+0x1ae>
 800b788:	494c      	ldr	r1, [pc, #304]	; (800b8bc <_strtod_l+0x294>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	f001 f98c 	bl	800caa8 <strncmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	d030      	beq.n	800b7f6 <_strtod_l+0x1ce>
 800b794:	2000      	movs	r0, #0
 800b796:	4632      	mov	r2, r6
 800b798:	9005      	str	r0, [sp, #20]
 800b79a:	465e      	mov	r6, fp
 800b79c:	4603      	mov	r3, r0
 800b79e:	2a65      	cmp	r2, #101	; 0x65
 800b7a0:	d001      	beq.n	800b7a6 <_strtod_l+0x17e>
 800b7a2:	2a45      	cmp	r2, #69	; 0x45
 800b7a4:	d113      	bne.n	800b7ce <_strtod_l+0x1a6>
 800b7a6:	b91e      	cbnz	r6, 800b7b0 <_strtod_l+0x188>
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	4302      	orrs	r2, r0
 800b7ac:	d094      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b7b2:	1c6a      	adds	r2, r5, #1
 800b7b4:	9215      	str	r2, [sp, #84]	; 0x54
 800b7b6:	786a      	ldrb	r2, [r5, #1]
 800b7b8:	2a2b      	cmp	r2, #43	; 0x2b
 800b7ba:	d074      	beq.n	800b8a6 <_strtod_l+0x27e>
 800b7bc:	2a2d      	cmp	r2, #45	; 0x2d
 800b7be:	d078      	beq.n	800b8b2 <_strtod_l+0x28a>
 800b7c0:	f04f 0c00 	mov.w	ip, #0
 800b7c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7c8:	2909      	cmp	r1, #9
 800b7ca:	d97f      	bls.n	800b8cc <_strtod_l+0x2a4>
 800b7cc:	9515      	str	r5, [sp, #84]	; 0x54
 800b7ce:	2700      	movs	r7, #0
 800b7d0:	e09e      	b.n	800b910 <_strtod_l+0x2e8>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e7c8      	b.n	800b768 <_strtod_l+0x140>
 800b7d6:	f1bb 0f08 	cmp.w	fp, #8
 800b7da:	bfd8      	it	le
 800b7dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bfda      	itte	le
 800b7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b7ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b7ee:	f10b 0b01 	add.w	fp, fp, #1
 800b7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800b7f4:	e7c1      	b.n	800b77a <_strtod_l+0x152>
 800b7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	9215      	str	r2, [sp, #84]	; 0x54
 800b7fc:	785a      	ldrb	r2, [r3, #1]
 800b7fe:	f1bb 0f00 	cmp.w	fp, #0
 800b802:	d037      	beq.n	800b874 <_strtod_l+0x24c>
 800b804:	9005      	str	r0, [sp, #20]
 800b806:	465e      	mov	r6, fp
 800b808:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d912      	bls.n	800b836 <_strtod_l+0x20e>
 800b810:	2301      	movs	r3, #1
 800b812:	e7c4      	b.n	800b79e <_strtod_l+0x176>
 800b814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	9215      	str	r2, [sp, #84]	; 0x54
 800b81a:	785a      	ldrb	r2, [r3, #1]
 800b81c:	3001      	adds	r0, #1
 800b81e:	2a30      	cmp	r2, #48	; 0x30
 800b820:	d0f8      	beq.n	800b814 <_strtod_l+0x1ec>
 800b822:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b826:	2b08      	cmp	r3, #8
 800b828:	f200 84c1 	bhi.w	800c1ae <_strtod_l+0xb86>
 800b82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b82e:	9005      	str	r0, [sp, #20]
 800b830:	2000      	movs	r0, #0
 800b832:	930b      	str	r3, [sp, #44]	; 0x2c
 800b834:	4606      	mov	r6, r0
 800b836:	3a30      	subs	r2, #48	; 0x30
 800b838:	f100 0301 	add.w	r3, r0, #1
 800b83c:	d014      	beq.n	800b868 <_strtod_l+0x240>
 800b83e:	9905      	ldr	r1, [sp, #20]
 800b840:	4419      	add	r1, r3
 800b842:	9105      	str	r1, [sp, #20]
 800b844:	4633      	mov	r3, r6
 800b846:	eb00 0c06 	add.w	ip, r0, r6
 800b84a:	210a      	movs	r1, #10
 800b84c:	4563      	cmp	r3, ip
 800b84e:	d113      	bne.n	800b878 <_strtod_l+0x250>
 800b850:	1833      	adds	r3, r6, r0
 800b852:	2b08      	cmp	r3, #8
 800b854:	f106 0601 	add.w	r6, r6, #1
 800b858:	4406      	add	r6, r0
 800b85a:	dc1a      	bgt.n	800b892 <_strtod_l+0x26a>
 800b85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b85e:	230a      	movs	r3, #10
 800b860:	fb03 2301 	mla	r3, r3, r1, r2
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	2300      	movs	r3, #0
 800b868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b86a:	1c51      	adds	r1, r2, #1
 800b86c:	9115      	str	r1, [sp, #84]	; 0x54
 800b86e:	7852      	ldrb	r2, [r2, #1]
 800b870:	4618      	mov	r0, r3
 800b872:	e7c9      	b.n	800b808 <_strtod_l+0x1e0>
 800b874:	4658      	mov	r0, fp
 800b876:	e7d2      	b.n	800b81e <_strtod_l+0x1f6>
 800b878:	2b08      	cmp	r3, #8
 800b87a:	f103 0301 	add.w	r3, r3, #1
 800b87e:	dc03      	bgt.n	800b888 <_strtod_l+0x260>
 800b880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b882:	434f      	muls	r7, r1
 800b884:	9709      	str	r7, [sp, #36]	; 0x24
 800b886:	e7e1      	b.n	800b84c <_strtod_l+0x224>
 800b888:	2b10      	cmp	r3, #16
 800b88a:	bfd8      	it	le
 800b88c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b890:	e7dc      	b.n	800b84c <_strtod_l+0x224>
 800b892:	2e10      	cmp	r6, #16
 800b894:	bfdc      	itt	le
 800b896:	230a      	movle	r3, #10
 800b898:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b89c:	e7e3      	b.n	800b866 <_strtod_l+0x23e>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e780      	b.n	800b7a8 <_strtod_l+0x180>
 800b8a6:	f04f 0c00 	mov.w	ip, #0
 800b8aa:	1caa      	adds	r2, r5, #2
 800b8ac:	9215      	str	r2, [sp, #84]	; 0x54
 800b8ae:	78aa      	ldrb	r2, [r5, #2]
 800b8b0:	e788      	b.n	800b7c4 <_strtod_l+0x19c>
 800b8b2:	f04f 0c01 	mov.w	ip, #1
 800b8b6:	e7f8      	b.n	800b8aa <_strtod_l+0x282>
 800b8b8:	0800d6e8 	.word	0x0800d6e8
 800b8bc:	0800d6e4 	.word	0x0800d6e4
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8c6:	1c51      	adds	r1, r2, #1
 800b8c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b8ca:	7852      	ldrb	r2, [r2, #1]
 800b8cc:	2a30      	cmp	r2, #48	; 0x30
 800b8ce:	d0f9      	beq.n	800b8c4 <_strtod_l+0x29c>
 800b8d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8d4:	2908      	cmp	r1, #8
 800b8d6:	f63f af7a 	bhi.w	800b7ce <_strtod_l+0x1a6>
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	9208      	str	r2, [sp, #32]
 800b8de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e0:	920c      	str	r2, [sp, #48]	; 0x30
 800b8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e4:	1c57      	adds	r7, r2, #1
 800b8e6:	9715      	str	r7, [sp, #84]	; 0x54
 800b8e8:	7852      	ldrb	r2, [r2, #1]
 800b8ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8ee:	f1be 0f09 	cmp.w	lr, #9
 800b8f2:	d938      	bls.n	800b966 <_strtod_l+0x33e>
 800b8f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8f6:	1a7f      	subs	r7, r7, r1
 800b8f8:	2f08      	cmp	r7, #8
 800b8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b8fe:	dc03      	bgt.n	800b908 <_strtod_l+0x2e0>
 800b900:	9908      	ldr	r1, [sp, #32]
 800b902:	428f      	cmp	r7, r1
 800b904:	bfa8      	it	ge
 800b906:	460f      	movge	r7, r1
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	d000      	beq.n	800b910 <_strtod_l+0x2e8>
 800b90e:	427f      	negs	r7, r7
 800b910:	2e00      	cmp	r6, #0
 800b912:	d14f      	bne.n	800b9b4 <_strtod_l+0x38c>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4301      	orrs	r1, r0
 800b918:	f47f aec1 	bne.w	800b69e <_strtod_l+0x76>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f47f aedb 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d029      	beq.n	800b97a <_strtod_l+0x352>
 800b926:	dc26      	bgt.n	800b976 <_strtod_l+0x34e>
 800b928:	2a49      	cmp	r2, #73	; 0x49
 800b92a:	d026      	beq.n	800b97a <_strtod_l+0x352>
 800b92c:	2a4e      	cmp	r2, #78	; 0x4e
 800b92e:	f47f aed3 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b932:	499b      	ldr	r1, [pc, #620]	; (800bba0 <_strtod_l+0x578>)
 800b934:	a815      	add	r0, sp, #84	; 0x54
 800b936:	f001 fbef 	bl	800d118 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aecc 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b28      	cmp	r3, #40	; 0x28
 800b946:	d12f      	bne.n	800b9a8 <_strtod_l+0x380>
 800b948:	4996      	ldr	r1, [pc, #600]	; (800bba4 <_strtod_l+0x57c>)
 800b94a:	aa18      	add	r2, sp, #96	; 0x60
 800b94c:	a815      	add	r0, sp, #84	; 0x54
 800b94e:	f001 fbf7 	bl	800d140 <__hexnan>
 800b952:	2805      	cmp	r0, #5
 800b954:	d128      	bne.n	800b9a8 <_strtod_l+0x380>
 800b956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b964:	e69b      	b.n	800b69e <_strtod_l+0x76>
 800b966:	9f08      	ldr	r7, [sp, #32]
 800b968:	210a      	movs	r1, #10
 800b96a:	fb01 2107 	mla	r1, r1, r7, r2
 800b96e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b972:	9208      	str	r2, [sp, #32]
 800b974:	e7b5      	b.n	800b8e2 <_strtod_l+0x2ba>
 800b976:	2a6e      	cmp	r2, #110	; 0x6e
 800b978:	e7d9      	b.n	800b92e <_strtod_l+0x306>
 800b97a:	498b      	ldr	r1, [pc, #556]	; (800bba8 <_strtod_l+0x580>)
 800b97c:	a815      	add	r0, sp, #84	; 0x54
 800b97e:	f001 fbcb 	bl	800d118 <__match>
 800b982:	2800      	cmp	r0, #0
 800b984:	f43f aea8 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b98a:	4988      	ldr	r1, [pc, #544]	; (800bbac <_strtod_l+0x584>)
 800b98c:	3b01      	subs	r3, #1
 800b98e:	a815      	add	r0, sp, #84	; 0x54
 800b990:	9315      	str	r3, [sp, #84]	; 0x54
 800b992:	f001 fbc1 	bl	800d118 <__match>
 800b996:	b910      	cbnz	r0, 800b99e <_strtod_l+0x376>
 800b998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b99a:	3301      	adds	r3, #1
 800b99c:	9315      	str	r3, [sp, #84]	; 0x54
 800b99e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bbbc <_strtod_l+0x594>
 800b9a2:	f04f 0800 	mov.w	r8, #0
 800b9a6:	e67a      	b.n	800b69e <_strtod_l+0x76>
 800b9a8:	4881      	ldr	r0, [pc, #516]	; (800bbb0 <_strtod_l+0x588>)
 800b9aa:	f001 f8d1 	bl	800cb50 <nan>
 800b9ae:	ec59 8b10 	vmov	r8, r9, d0
 800b9b2:	e674      	b.n	800b69e <_strtod_l+0x76>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b8:	1afb      	subs	r3, r7, r3
 800b9ba:	f1bb 0f00 	cmp.w	fp, #0
 800b9be:	bf08      	it	eq
 800b9c0:	46b3      	moveq	fp, r6
 800b9c2:	2e10      	cmp	r6, #16
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	4635      	mov	r5, r6
 800b9c8:	bfa8      	it	ge
 800b9ca:	2510      	movge	r5, #16
 800b9cc:	f7f4 fd9a 	bl	8000504 <__aeabi_ui2d>
 800b9d0:	2e09      	cmp	r6, #9
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	dd13      	ble.n	800ba00 <_strtod_l+0x3d8>
 800b9d8:	4b76      	ldr	r3, [pc, #472]	; (800bbb4 <_strtod_l+0x58c>)
 800b9da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4689      	mov	r9, r1
 800b9ec:	f7f4 fd8a 	bl	8000504 <__aeabi_ui2d>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc48 	bl	800028c <__adddf3>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	2e0f      	cmp	r6, #15
 800ba02:	dc38      	bgt.n	800ba76 <_strtod_l+0x44e>
 800ba04:	9b08      	ldr	r3, [sp, #32]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f43f ae49 	beq.w	800b69e <_strtod_l+0x76>
 800ba0c:	dd24      	ble.n	800ba58 <_strtod_l+0x430>
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	dc0b      	bgt.n	800ba2a <_strtod_l+0x402>
 800ba12:	4968      	ldr	r1, [pc, #416]	; (800bbb4 <_strtod_l+0x58c>)
 800ba14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	f7f4 fdea 	bl	80005f8 <__aeabi_dmul>
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	e639      	b.n	800b69e <_strtod_l+0x76>
 800ba2a:	9a08      	ldr	r2, [sp, #32]
 800ba2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ba30:	4293      	cmp	r3, r2
 800ba32:	db20      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba34:	4c5f      	ldr	r4, [pc, #380]	; (800bbb4 <_strtod_l+0x58c>)
 800ba36:	f1c6 060f 	rsb	r6, r6, #15
 800ba3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ba3e:	4642      	mov	r2, r8
 800ba40:	464b      	mov	r3, r9
 800ba42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba46:	f7f4 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ba4a:	9b08      	ldr	r3, [sp, #32]
 800ba4c:	1b9e      	subs	r6, r3, r6
 800ba4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba56:	e7e3      	b.n	800ba20 <_strtod_l+0x3f8>
 800ba58:	9b08      	ldr	r3, [sp, #32]
 800ba5a:	3316      	adds	r3, #22
 800ba5c:	db0b      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	1bdf      	subs	r7, r3, r7
 800ba62:	4b54      	ldr	r3, [pc, #336]	; (800bbb4 <_strtod_l+0x58c>)
 800ba64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 feec 	bl	800084c <__aeabi_ddiv>
 800ba74:	e7d6      	b.n	800ba24 <_strtod_l+0x3fc>
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	1b75      	subs	r5, r6, r5
 800ba7a:	441d      	add	r5, r3
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	dd70      	ble.n	800bb62 <_strtod_l+0x53a>
 800ba80:	f015 030f 	ands.w	r3, r5, #15
 800ba84:	d00a      	beq.n	800ba9c <_strtod_l+0x474>
 800ba86:	494b      	ldr	r1, [pc, #300]	; (800bbb4 <_strtod_l+0x58c>)
 800ba88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	464b      	mov	r3, r9
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	f7f4 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	f035 050f 	bics.w	r5, r5, #15
 800baa0:	d04d      	beq.n	800bb3e <_strtod_l+0x516>
 800baa2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800baa6:	dd22      	ble.n	800baee <_strtod_l+0x4c6>
 800baa8:	2500      	movs	r5, #0
 800baaa:	46ab      	mov	fp, r5
 800baac:	9509      	str	r5, [sp, #36]	; 0x24
 800baae:	9505      	str	r5, [sp, #20]
 800bab0:	2322      	movs	r3, #34	; 0x22
 800bab2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bbbc <_strtod_l+0x594>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f04f 0800 	mov.w	r8, #0
 800babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f43f aded 	beq.w	800b69e <_strtod_l+0x76>
 800bac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7ff f924 	bl	800ad14 <_Bfree>
 800bacc:	9905      	ldr	r1, [sp, #20]
 800bace:	4620      	mov	r0, r4
 800bad0:	f7ff f920 	bl	800ad14 <_Bfree>
 800bad4:	4659      	mov	r1, fp
 800bad6:	4620      	mov	r0, r4
 800bad8:	f7ff f91c 	bl	800ad14 <_Bfree>
 800badc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff f918 	bl	800ad14 <_Bfree>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff f914 	bl	800ad14 <_Bfree>
 800baec:	e5d7      	b.n	800b69e <_strtod_l+0x76>
 800baee:	4b32      	ldr	r3, [pc, #200]	; (800bbb8 <_strtod_l+0x590>)
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	112d      	asrs	r5, r5, #4
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	469a      	mov	sl, r3
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	dc21      	bgt.n	800bb44 <_strtod_l+0x51c>
 800bb00:	b10b      	cbz	r3, 800bb06 <_strtod_l+0x4de>
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	492c      	ldr	r1, [pc, #176]	; (800bbb8 <_strtod_l+0x590>)
 800bb08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bb0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb18:	f7f4 fd6e 	bl	80005f8 <__aeabi_dmul>
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <_strtod_l+0x594>)
 800bb1e:	460a      	mov	r2, r1
 800bb20:	400b      	ands	r3, r1
 800bb22:	4927      	ldr	r1, [pc, #156]	; (800bbc0 <_strtod_l+0x598>)
 800bb24:	428b      	cmp	r3, r1
 800bb26:	4680      	mov	r8, r0
 800bb28:	d8be      	bhi.n	800baa8 <_strtod_l+0x480>
 800bb2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb2e:	428b      	cmp	r3, r1
 800bb30:	bf86      	itte	hi
 800bb32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bbc4 <_strtod_l+0x59c>
 800bb36:	f04f 38ff 	movhi.w	r8, #4294967295
 800bb3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	e07b      	b.n	800bc3c <_strtod_l+0x614>
 800bb44:	07ea      	lsls	r2, r5, #31
 800bb46:	d505      	bpl.n	800bb54 <_strtod_l+0x52c>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	2301      	movs	r3, #1
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	3208      	adds	r2, #8
 800bb58:	f10a 0a01 	add.w	sl, sl, #1
 800bb5c:	106d      	asrs	r5, r5, #1
 800bb5e:	9204      	str	r2, [sp, #16]
 800bb60:	e7cc      	b.n	800bafc <_strtod_l+0x4d4>
 800bb62:	d0ec      	beq.n	800bb3e <_strtod_l+0x516>
 800bb64:	426d      	negs	r5, r5
 800bb66:	f015 020f 	ands.w	r2, r5, #15
 800bb6a:	d00a      	beq.n	800bb82 <_strtod_l+0x55a>
 800bb6c:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <_strtod_l+0x58c>)
 800bb6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fe67 	bl	800084c <__aeabi_ddiv>
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	112d      	asrs	r5, r5, #4
 800bb84:	d0db      	beq.n	800bb3e <_strtod_l+0x516>
 800bb86:	2d1f      	cmp	r5, #31
 800bb88:	dd1e      	ble.n	800bbc8 <_strtod_l+0x5a0>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	46ab      	mov	fp, r5
 800bb8e:	9509      	str	r5, [sp, #36]	; 0x24
 800bb90:	9505      	str	r5, [sp, #20]
 800bb92:	2322      	movs	r3, #34	; 0x22
 800bb94:	f04f 0800 	mov.w	r8, #0
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	e78d      	b.n	800babc <_strtod_l+0x494>
 800bba0:	0800d4d1 	.word	0x0800d4d1
 800bba4:	0800d6fc 	.word	0x0800d6fc
 800bba8:	0800d4c9 	.word	0x0800d4c9
 800bbac:	0800d500 	.word	0x0800d500
 800bbb0:	0800d88d 	.word	0x0800d88d
 800bbb4:	0800d610 	.word	0x0800d610
 800bbb8:	0800d5e8 	.word	0x0800d5e8
 800bbbc:	7ff00000 	.word	0x7ff00000
 800bbc0:	7ca00000 	.word	0x7ca00000
 800bbc4:	7fefffff 	.word	0x7fefffff
 800bbc8:	f015 0310 	ands.w	r3, r5, #16
 800bbcc:	bf18      	it	ne
 800bbce:	236a      	movne	r3, #106	; 0x6a
 800bbd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bf74 <_strtod_l+0x94c>
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	2300      	movs	r3, #0
 800bbdc:	07ea      	lsls	r2, r5, #31
 800bbde:	d504      	bpl.n	800bbea <_strtod_l+0x5c2>
 800bbe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800bbe4:	f7f4 fd08 	bl	80005f8 <__aeabi_dmul>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	106d      	asrs	r5, r5, #1
 800bbec:	f10a 0a08 	add.w	sl, sl, #8
 800bbf0:	d1f4      	bne.n	800bbdc <_strtod_l+0x5b4>
 800bbf2:	b10b      	cbz	r3, 800bbf8 <_strtod_l+0x5d0>
 800bbf4:	4680      	mov	r8, r0
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	b1bb      	cbz	r3, 800bc2c <_strtod_l+0x604>
 800bbfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bc00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	4649      	mov	r1, r9
 800bc08:	dd10      	ble.n	800bc2c <_strtod_l+0x604>
 800bc0a:	2b1f      	cmp	r3, #31
 800bc0c:	f340 811e 	ble.w	800be4c <_strtod_l+0x824>
 800bc10:	2b34      	cmp	r3, #52	; 0x34
 800bc12:	bfde      	ittt	le
 800bc14:	f04f 33ff 	movle.w	r3, #4294967295
 800bc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc1c:	4093      	lslle	r3, r2
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	bfcc      	ite	gt
 800bc24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bc28:	ea03 0901 	andle.w	r9, r3, r1
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1a6      	bne.n	800bb8a <_strtod_l+0x562>
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc42:	4633      	mov	r3, r6
 800bc44:	465a      	mov	r2, fp
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff f8cc 	bl	800ade4 <__s2b>
 800bc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f af2a 	beq.w	800baa8 <_strtod_l+0x480>
 800bc54:	9a08      	ldr	r2, [sp, #32]
 800bc56:	9b05      	ldr	r3, [sp, #20]
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	eba3 0307 	sub.w	r3, r3, r7
 800bc5e:	bfa8      	it	ge
 800bc60:	2300      	movge	r3, #0
 800bc62:	930c      	str	r3, [sp, #48]	; 0x30
 800bc64:	2500      	movs	r5, #0
 800bc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc6c:	46ab      	mov	fp, r5
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	4620      	mov	r0, r4
 800bc72:	6859      	ldr	r1, [r3, #4]
 800bc74:	f7ff f80e 	bl	800ac94 <_Balloc>
 800bc78:	9005      	str	r0, [sp, #20]
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f af18 	beq.w	800bab0 <_strtod_l+0x488>
 800bc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	3202      	adds	r2, #2
 800bc86:	f103 010c 	add.w	r1, r3, #12
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	300c      	adds	r0, #12
 800bc8e:	f000 ff4f 	bl	800cb30 <memcpy>
 800bc92:	ec49 8b10 	vmov	d0, r8, r9
 800bc96:	aa18      	add	r2, sp, #96	; 0x60
 800bc98:	a917      	add	r1, sp, #92	; 0x5c
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7ff fbd6 	bl	800b44c <__d2b>
 800bca0:	ec49 8b18 	vmov	d8, r8, r9
 800bca4:	9016      	str	r0, [sp, #88]	; 0x58
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f af02 	beq.w	800bab0 <_strtod_l+0x488>
 800bcac:	2101      	movs	r1, #1
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7ff f930 	bl	800af14 <__i2b>
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f aefa 	beq.w	800bab0 <_strtod_l+0x488>
 800bcbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bcbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bcc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bcc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bcca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bcce:	bfac      	ite	ge
 800bcd0:	eb06 0a03 	addge.w	sl, r6, r3
 800bcd4:	1b9f      	sublt	r7, r3, r6
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	1af6      	subs	r6, r6, r3
 800bcda:	4416      	add	r6, r2
 800bcdc:	4ba0      	ldr	r3, [pc, #640]	; (800bf60 <_strtod_l+0x938>)
 800bcde:	3e01      	subs	r6, #1
 800bce0:	429e      	cmp	r6, r3
 800bce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bce6:	f280 80c4 	bge.w	800be72 <_strtod_l+0x84a>
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	2b1f      	cmp	r3, #31
 800bcee:	eba2 0203 	sub.w	r2, r2, r3
 800bcf2:	f04f 0101 	mov.w	r1, #1
 800bcf6:	f300 80b0 	bgt.w	800be5a <_strtod_l+0x832>
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	930e      	str	r3, [sp, #56]	; 0x38
 800bd00:	2300      	movs	r3, #0
 800bd02:	930d      	str	r3, [sp, #52]	; 0x34
 800bd04:	eb0a 0602 	add.w	r6, sl, r2
 800bd08:	9b04      	ldr	r3, [sp, #16]
 800bd0a:	45b2      	cmp	sl, r6
 800bd0c:	4417      	add	r7, r2
 800bd0e:	441f      	add	r7, r3
 800bd10:	4653      	mov	r3, sl
 800bd12:	bfa8      	it	ge
 800bd14:	4633      	movge	r3, r6
 800bd16:	42bb      	cmp	r3, r7
 800bd18:	bfa8      	it	ge
 800bd1a:	463b      	movge	r3, r7
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bfc2      	ittt	gt
 800bd20:	1af6      	subgt	r6, r6, r3
 800bd22:	1aff      	subgt	r7, r7, r3
 800bd24:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dd17      	ble.n	800bd5e <_strtod_l+0x736>
 800bd2e:	4659      	mov	r1, fp
 800bd30:	461a      	mov	r2, r3
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7ff f9ae 	bl	800b094 <__pow5mult>
 800bd38:	4683      	mov	fp, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f43f aeb8 	beq.w	800bab0 <_strtod_l+0x488>
 800bd40:	4601      	mov	r1, r0
 800bd42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7ff f8fb 	bl	800af40 <__multiply>
 800bd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f43f aeaf 	beq.w	800bab0 <_strtod_l+0x488>
 800bd52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7fe ffdd 	bl	800ad14 <_Bfree>
 800bd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5c:	9316      	str	r3, [sp, #88]	; 0x58
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	f300 808c 	bgt.w	800be7c <_strtod_l+0x854>
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd08      	ble.n	800bd7c <_strtod_l+0x754>
 800bd6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd6c:	9905      	ldr	r1, [sp, #20]
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7ff f990 	bl	800b094 <__pow5mult>
 800bd74:	9005      	str	r0, [sp, #20]
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f ae9a 	beq.w	800bab0 <_strtod_l+0x488>
 800bd7c:	2f00      	cmp	r7, #0
 800bd7e:	dd08      	ble.n	800bd92 <_strtod_l+0x76a>
 800bd80:	9905      	ldr	r1, [sp, #20]
 800bd82:	463a      	mov	r2, r7
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7ff f9df 	bl	800b148 <__lshift>
 800bd8a:	9005      	str	r0, [sp, #20]
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f43f ae8f 	beq.w	800bab0 <_strtod_l+0x488>
 800bd92:	f1ba 0f00 	cmp.w	sl, #0
 800bd96:	dd08      	ble.n	800bdaa <_strtod_l+0x782>
 800bd98:	4659      	mov	r1, fp
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f7ff f9d3 	bl	800b148 <__lshift>
 800bda2:	4683      	mov	fp, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f ae83 	beq.w	800bab0 <_strtod_l+0x488>
 800bdaa:	9a05      	ldr	r2, [sp, #20]
 800bdac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7ff fa52 	bl	800b258 <__mdiff>
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f43f ae7a 	beq.w	800bab0 <_strtod_l+0x488>
 800bdbc:	68c3      	ldr	r3, [r0, #12]
 800bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60c3      	str	r3, [r0, #12]
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f7ff fa2b 	bl	800b220 <__mcmp>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	da60      	bge.n	800be90 <_strtod_l+0x868>
 800bdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd0:	ea53 0308 	orrs.w	r3, r3, r8
 800bdd4:	f040 8084 	bne.w	800bee0 <_strtod_l+0x8b8>
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d17f      	bne.n	800bee0 <_strtod_l+0x8b8>
 800bde0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bde4:	0d1b      	lsrs	r3, r3, #20
 800bde6:	051b      	lsls	r3, r3, #20
 800bde8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdec:	d978      	bls.n	800bee0 <_strtod_l+0x8b8>
 800bdee:	696b      	ldr	r3, [r5, #20]
 800bdf0:	b913      	cbnz	r3, 800bdf8 <_strtod_l+0x7d0>
 800bdf2:	692b      	ldr	r3, [r5, #16]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	dd73      	ble.n	800bee0 <_strtod_l+0x8b8>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f7ff f9a3 	bl	800b148 <__lshift>
 800be02:	4659      	mov	r1, fp
 800be04:	4605      	mov	r5, r0
 800be06:	f7ff fa0b 	bl	800b220 <__mcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	dd68      	ble.n	800bee0 <_strtod_l+0x8b8>
 800be0e:	9904      	ldr	r1, [sp, #16]
 800be10:	4a54      	ldr	r2, [pc, #336]	; (800bf64 <_strtod_l+0x93c>)
 800be12:	464b      	mov	r3, r9
 800be14:	2900      	cmp	r1, #0
 800be16:	f000 8084 	beq.w	800bf22 <_strtod_l+0x8fa>
 800be1a:	ea02 0109 	and.w	r1, r2, r9
 800be1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be22:	dc7e      	bgt.n	800bf22 <_strtod_l+0x8fa>
 800be24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be28:	f77f aeb3 	ble.w	800bb92 <_strtod_l+0x56a>
 800be2c:	4b4e      	ldr	r3, [pc, #312]	; (800bf68 <_strtod_l+0x940>)
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 fbe0 	bl	80005f8 <__aeabi_dmul>
 800be38:	4b4a      	ldr	r3, [pc, #296]	; (800bf64 <_strtod_l+0x93c>)
 800be3a:	400b      	ands	r3, r1
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	2b00      	cmp	r3, #0
 800be42:	f47f ae3f 	bne.w	800bac4 <_strtod_l+0x49c>
 800be46:	2322      	movs	r3, #34	; 0x22
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	e63b      	b.n	800bac4 <_strtod_l+0x49c>
 800be4c:	f04f 32ff 	mov.w	r2, #4294967295
 800be50:	fa02 f303 	lsl.w	r3, r2, r3
 800be54:	ea03 0808 	and.w	r8, r3, r8
 800be58:	e6e8      	b.n	800bc2c <_strtod_l+0x604>
 800be5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800be5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800be62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800be66:	36e2      	adds	r6, #226	; 0xe2
 800be68:	fa01 f306 	lsl.w	r3, r1, r6
 800be6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800be70:	e748      	b.n	800bd04 <_strtod_l+0x6dc>
 800be72:	2100      	movs	r1, #0
 800be74:	2301      	movs	r3, #1
 800be76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800be7a:	e743      	b.n	800bd04 <_strtod_l+0x6dc>
 800be7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be7e:	4632      	mov	r2, r6
 800be80:	4620      	mov	r0, r4
 800be82:	f7ff f961 	bl	800b148 <__lshift>
 800be86:	9016      	str	r0, [sp, #88]	; 0x58
 800be88:	2800      	cmp	r0, #0
 800be8a:	f47f af6b 	bne.w	800bd64 <_strtod_l+0x73c>
 800be8e:	e60f      	b.n	800bab0 <_strtod_l+0x488>
 800be90:	46ca      	mov	sl, r9
 800be92:	d171      	bne.n	800bf78 <_strtod_l+0x950>
 800be94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9a:	b352      	cbz	r2, 800bef2 <_strtod_l+0x8ca>
 800be9c:	4a33      	ldr	r2, [pc, #204]	; (800bf6c <_strtod_l+0x944>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d12a      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	4641      	mov	r1, r8
 800bea6:	b1fb      	cbz	r3, 800bee8 <_strtod_l+0x8c0>
 800bea8:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <_strtod_l+0x93c>)
 800beaa:	ea09 0303 	and.w	r3, r9, r3
 800beae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295
 800beb6:	d81a      	bhi.n	800beee <_strtod_l+0x8c6>
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	4299      	cmp	r1, r3
 800bec4:	d118      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bec6:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <_strtod_l+0x948>)
 800bec8:	459a      	cmp	sl, r3
 800beca:	d102      	bne.n	800bed2 <_strtod_l+0x8aa>
 800becc:	3101      	adds	r1, #1
 800bece:	f43f adef 	beq.w	800bab0 <_strtod_l+0x488>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <_strtod_l+0x93c>)
 800bed4:	ea0a 0303 	and.w	r3, sl, r3
 800bed8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bedc:	f04f 0800 	mov.w	r8, #0
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1a2      	bne.n	800be2c <_strtod_l+0x804>
 800bee6:	e5ed      	b.n	800bac4 <_strtod_l+0x49c>
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	e7e9      	b.n	800bec2 <_strtod_l+0x89a>
 800beee:	4613      	mov	r3, r2
 800bef0:	e7e7      	b.n	800bec2 <_strtod_l+0x89a>
 800bef2:	ea53 0308 	orrs.w	r3, r3, r8
 800bef6:	d08a      	beq.n	800be0e <_strtod_l+0x7e6>
 800bef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800befa:	b1e3      	cbz	r3, 800bf36 <_strtod_l+0x90e>
 800befc:	ea13 0f0a 	tst.w	r3, sl
 800bf00:	d0ee      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	b1c3      	cbz	r3, 800bf3e <_strtod_l+0x916>
 800bf0c:	f7ff fb6f 	bl	800b5ee <sulp>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	ec51 0b18 	vmov	r0, r1, d8
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	4689      	mov	r9, r1
 800bf20:	e7de      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf22:	4013      	ands	r3, r2
 800bf24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bf2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bf30:	f04f 38ff 	mov.w	r8, #4294967295
 800bf34:	e7d4      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf38:	ea13 0f08 	tst.w	r3, r8
 800bf3c:	e7e0      	b.n	800bf00 <_strtod_l+0x8d8>
 800bf3e:	f7ff fb56 	bl	800b5ee <sulp>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	ec51 0b18 	vmov	r0, r1, d8
 800bf4a:	f7f4 f99d 	bl	8000288 <__aeabi_dsub>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	f7f4 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0c0      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf5e:	e618      	b.n	800bb92 <_strtod_l+0x56a>
 800bf60:	fffffc02 	.word	0xfffffc02
 800bf64:	7ff00000 	.word	0x7ff00000
 800bf68:	39500000 	.word	0x39500000
 800bf6c:	000fffff 	.word	0x000fffff
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	0800d710 	.word	0x0800d710
 800bf78:	4659      	mov	r1, fp
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7ff fac0 	bl	800b500 <__ratio>
 800bf80:	ec57 6b10 	vmov	r6, r7, d0
 800bf84:	ee10 0a10 	vmov	r0, s0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fdae 	bl	8000af0 <__aeabi_dcmple>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d071      	beq.n	800c07c <_strtod_l+0xa54>
 800bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d17c      	bne.n	800c098 <_strtod_l+0xa70>
 800bf9e:	f1b8 0f00 	cmp.w	r8, #0
 800bfa2:	d15a      	bne.n	800c05a <_strtod_l+0xa32>
 800bfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d15d      	bne.n	800c068 <_strtod_l+0xa40>
 800bfac:	4b90      	ldr	r3, [pc, #576]	; (800c1f0 <_strtod_l+0xbc8>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fd92 	bl	8000adc <__aeabi_dcmplt>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d15c      	bne.n	800c076 <_strtod_l+0xa4e>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	4b8c      	ldr	r3, [pc, #560]	; (800c1f4 <_strtod_l+0xbcc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb18 	bl	80005f8 <__aeabi_dmul>
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bfd0:	9606      	str	r6, [sp, #24]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bfdc:	4b86      	ldr	r3, [pc, #536]	; (800c1f8 <_strtod_l+0xbd0>)
 800bfde:	ea0a 0303 	and.w	r3, sl, r3
 800bfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfe6:	4b85      	ldr	r3, [pc, #532]	; (800c1fc <_strtod_l+0xbd4>)
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	f040 8090 	bne.w	800c10e <_strtod_l+0xae6>
 800bfee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bff2:	ec49 8b10 	vmov	d0, r8, r9
 800bff6:	f7ff f9b9 	bl	800b36c <__ulp>
 800bffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bffe:	ec51 0b10 	vmov	r0, r1, d0
 800c002:	f7f4 faf9 	bl	80005f8 <__aeabi_dmul>
 800c006:	4642      	mov	r2, r8
 800c008:	464b      	mov	r3, r9
 800c00a:	f7f4 f93f 	bl	800028c <__adddf3>
 800c00e:	460b      	mov	r3, r1
 800c010:	4979      	ldr	r1, [pc, #484]	; (800c1f8 <_strtod_l+0xbd0>)
 800c012:	4a7b      	ldr	r2, [pc, #492]	; (800c200 <_strtod_l+0xbd8>)
 800c014:	4019      	ands	r1, r3
 800c016:	4291      	cmp	r1, r2
 800c018:	4680      	mov	r8, r0
 800c01a:	d944      	bls.n	800c0a6 <_strtod_l+0xa7e>
 800c01c:	ee18 2a90 	vmov	r2, s17
 800c020:	4b78      	ldr	r3, [pc, #480]	; (800c204 <_strtod_l+0xbdc>)
 800c022:	429a      	cmp	r2, r3
 800c024:	d104      	bne.n	800c030 <_strtod_l+0xa08>
 800c026:	ee18 3a10 	vmov	r3, s16
 800c02a:	3301      	adds	r3, #1
 800c02c:	f43f ad40 	beq.w	800bab0 <_strtod_l+0x488>
 800c030:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c204 <_strtod_l+0xbdc>
 800c034:	f04f 38ff 	mov.w	r8, #4294967295
 800c038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c03a:	4620      	mov	r0, r4
 800c03c:	f7fe fe6a 	bl	800ad14 <_Bfree>
 800c040:	9905      	ldr	r1, [sp, #20]
 800c042:	4620      	mov	r0, r4
 800c044:	f7fe fe66 	bl	800ad14 <_Bfree>
 800c048:	4659      	mov	r1, fp
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7fe fe62 	bl	800ad14 <_Bfree>
 800c050:	4629      	mov	r1, r5
 800c052:	4620      	mov	r0, r4
 800c054:	f7fe fe5e 	bl	800ad14 <_Bfree>
 800c058:	e609      	b.n	800bc6e <_strtod_l+0x646>
 800c05a:	f1b8 0f01 	cmp.w	r8, #1
 800c05e:	d103      	bne.n	800c068 <_strtod_l+0xa40>
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	f43f ad95 	beq.w	800bb92 <_strtod_l+0x56a>
 800c068:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c1c0 <_strtod_l+0xb98>
 800c06c:	4f60      	ldr	r7, [pc, #384]	; (800c1f0 <_strtod_l+0xbc8>)
 800c06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c072:	2600      	movs	r6, #0
 800c074:	e7ae      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c076:	4f5f      	ldr	r7, [pc, #380]	; (800c1f4 <_strtod_l+0xbcc>)
 800c078:	2600      	movs	r6, #0
 800c07a:	e7a7      	b.n	800bfcc <_strtod_l+0x9a4>
 800c07c:	4b5d      	ldr	r3, [pc, #372]	; (800c1f4 <_strtod_l+0xbcc>)
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fab8 	bl	80005f8 <__aeabi_dmul>
 800c088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d09c      	beq.n	800bfcc <_strtod_l+0x9a4>
 800c092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c096:	e79d      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c098:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c1c8 <_strtod_l+0xba0>
 800c09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0a0:	ec57 6b17 	vmov	r6, r7, d7
 800c0a4:	e796      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c0a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	46ca      	mov	sl, r9
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1c2      	bne.n	800c038 <_strtod_l+0xa10>
 800c0b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0b8:	0d1b      	lsrs	r3, r3, #20
 800c0ba:	051b      	lsls	r3, r3, #20
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d1bb      	bne.n	800c038 <_strtod_l+0xa10>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fde0 	bl	8000c88 <__aeabi_d2lz>
 800c0c8:	f7f4 fa68 	bl	800059c <__aeabi_l2d>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0de:	ea43 0308 	orr.w	r3, r3, r8
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	d054      	beq.n	800c194 <_strtod_l+0xb6c>
 800c0ea:	a339      	add	r3, pc, #228	; (adr r3, 800c1d0 <_strtod_l+0xba8>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f7f4 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f47f ace5 	bne.w	800bac4 <_strtod_l+0x49c>
 800c0fa:	a337      	add	r3, pc, #220	; (adr r3, 800c1d8 <_strtod_l+0xbb0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d095      	beq.n	800c038 <_strtod_l+0xa10>
 800c10c:	e4da      	b.n	800bac4 <_strtod_l+0x49c>
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	b333      	cbz	r3, 800c160 <_strtod_l+0xb38>
 800c112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c118:	d822      	bhi.n	800c160 <_strtod_l+0xb38>
 800c11a:	a331      	add	r3, pc, #196	; (adr r3, 800c1e0 <_strtod_l+0xbb8>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fce4 	bl	8000af0 <__aeabi_dcmple>
 800c128:	b1a0      	cbz	r0, 800c154 <_strtod_l+0xb2c>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7f4 fd3b 	bl	8000ba8 <__aeabi_d2uiz>
 800c132:	2801      	cmp	r0, #1
 800c134:	bf38      	it	cc
 800c136:	2001      	movcc	r0, #1
 800c138:	f7f4 f9e4 	bl	8000504 <__aeabi_ui2d>
 800c13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13e:	4606      	mov	r6, r0
 800c140:	460f      	mov	r7, r1
 800c142:	bb23      	cbnz	r3, 800c18e <_strtod_l+0xb66>
 800c144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c148:	9010      	str	r0, [sp, #64]	; 0x40
 800c14a:	9311      	str	r3, [sp, #68]	; 0x44
 800c14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c164:	eeb0 0a48 	vmov.f32	s0, s16
 800c168:	eef0 0a68 	vmov.f32	s1, s17
 800c16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c170:	f7ff f8fc 	bl	800b36c <__ulp>
 800c174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c178:	ec53 2b10 	vmov	r2, r3, d0
 800c17c:	f7f4 fa3c 	bl	80005f8 <__aeabi_dmul>
 800c180:	ec53 2b18 	vmov	r2, r3, d8
 800c184:	f7f4 f882 	bl	800028c <__adddf3>
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	e78d      	b.n	800c0aa <_strtod_l+0xa82>
 800c18e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c192:	e7db      	b.n	800c14c <_strtod_l+0xb24>
 800c194:	a314      	add	r3, pc, #80	; (adr r3, 800c1e8 <_strtod_l+0xbc0>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800c19e:	e7b3      	b.n	800c108 <_strtod_l+0xae0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	f7ff ba7c 	b.w	800b6a6 <_strtod_l+0x7e>
 800c1ae:	2a65      	cmp	r2, #101	; 0x65
 800c1b0:	f43f ab75 	beq.w	800b89e <_strtod_l+0x276>
 800c1b4:	2a45      	cmp	r2, #69	; 0x45
 800c1b6:	f43f ab72 	beq.w	800b89e <_strtod_l+0x276>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f7ff bbaa 	b.w	800b914 <_strtod_l+0x2ec>
 800c1c0:	00000000 	.word	0x00000000
 800c1c4:	bff00000 	.word	0xbff00000
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	3ff00000 	.word	0x3ff00000
 800c1d0:	94a03595 	.word	0x94a03595
 800c1d4:	3fdfffff 	.word	0x3fdfffff
 800c1d8:	35afe535 	.word	0x35afe535
 800c1dc:	3fe00000 	.word	0x3fe00000
 800c1e0:	ffc00000 	.word	0xffc00000
 800c1e4:	41dfffff 	.word	0x41dfffff
 800c1e8:	94a03595 	.word	0x94a03595
 800c1ec:	3fcfffff 	.word	0x3fcfffff
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	3fe00000 	.word	0x3fe00000
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	7fe00000 	.word	0x7fe00000
 800c200:	7c9fffff 	.word	0x7c9fffff
 800c204:	7fefffff 	.word	0x7fefffff

0800c208 <_strtod_r>:
 800c208:	4b01      	ldr	r3, [pc, #4]	; (800c210 <_strtod_r+0x8>)
 800c20a:	f7ff ba0d 	b.w	800b628 <_strtod_l>
 800c20e:	bf00      	nop
 800c210:	20000068 	.word	0x20000068

0800c214 <_strtol_l.constprop.0>:
 800c214:	2b01      	cmp	r3, #1
 800c216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c21a:	d001      	beq.n	800c220 <_strtol_l.constprop.0+0xc>
 800c21c:	2b24      	cmp	r3, #36	; 0x24
 800c21e:	d906      	bls.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c220:	f7fd fd8c 	bl	8009d3c <__errno>
 800c224:	2316      	movs	r3, #22
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	2000      	movs	r0, #0
 800c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c314 <_strtol_l.constprop.0+0x100>
 800c232:	460d      	mov	r5, r1
 800c234:	462e      	mov	r6, r5
 800c236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c23a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c23e:	f017 0708 	ands.w	r7, r7, #8
 800c242:	d1f7      	bne.n	800c234 <_strtol_l.constprop.0+0x20>
 800c244:	2c2d      	cmp	r4, #45	; 0x2d
 800c246:	d132      	bne.n	800c2ae <_strtol_l.constprop.0+0x9a>
 800c248:	782c      	ldrb	r4, [r5, #0]
 800c24a:	2701      	movs	r7, #1
 800c24c:	1cb5      	adds	r5, r6, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d05b      	beq.n	800c30a <_strtol_l.constprop.0+0xf6>
 800c252:	2b10      	cmp	r3, #16
 800c254:	d109      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c256:	2c30      	cmp	r4, #48	; 0x30
 800c258:	d107      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c25a:	782c      	ldrb	r4, [r5, #0]
 800c25c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c260:	2c58      	cmp	r4, #88	; 0x58
 800c262:	d14d      	bne.n	800c300 <_strtol_l.constprop.0+0xec>
 800c264:	786c      	ldrb	r4, [r5, #1]
 800c266:	2310      	movs	r3, #16
 800c268:	3502      	adds	r5, #2
 800c26a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c26e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c272:	f04f 0e00 	mov.w	lr, #0
 800c276:	fbb8 f9f3 	udiv	r9, r8, r3
 800c27a:	4676      	mov	r6, lr
 800c27c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c284:	f1bc 0f09 	cmp.w	ip, #9
 800c288:	d816      	bhi.n	800c2b8 <_strtol_l.constprop.0+0xa4>
 800c28a:	4664      	mov	r4, ip
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	dd24      	ble.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c290:	f1be 3fff 	cmp.w	lr, #4294967295
 800c294:	d008      	beq.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c296:	45b1      	cmp	r9, r6
 800c298:	d31c      	bcc.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c29a:	d101      	bne.n	800c2a0 <_strtol_l.constprop.0+0x8c>
 800c29c:	45a2      	cmp	sl, r4
 800c29e:	db19      	blt.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c2a0:	fb06 4603 	mla	r6, r6, r3, r4
 800c2a4:	f04f 0e01 	mov.w	lr, #1
 800c2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2ac:	e7e8      	b.n	800c280 <_strtol_l.constprop.0+0x6c>
 800c2ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c2b0:	bf04      	itt	eq
 800c2b2:	782c      	ldrbeq	r4, [r5, #0]
 800c2b4:	1cb5      	addeq	r5, r6, #2
 800c2b6:	e7ca      	b.n	800c24e <_strtol_l.constprop.0+0x3a>
 800c2b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c2bc:	f1bc 0f19 	cmp.w	ip, #25
 800c2c0:	d801      	bhi.n	800c2c6 <_strtol_l.constprop.0+0xb2>
 800c2c2:	3c37      	subs	r4, #55	; 0x37
 800c2c4:	e7e2      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c2ca:	f1bc 0f19 	cmp.w	ip, #25
 800c2ce:	d804      	bhi.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c2d0:	3c57      	subs	r4, #87	; 0x57
 800c2d2:	e7db      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2d4:	f04f 3eff 	mov.w	lr, #4294967295
 800c2d8:	e7e6      	b.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c2da:	f1be 3fff 	cmp.w	lr, #4294967295
 800c2de:	d105      	bne.n	800c2ec <_strtol_l.constprop.0+0xd8>
 800c2e0:	2322      	movs	r3, #34	; 0x22
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	4646      	mov	r6, r8
 800c2e6:	b942      	cbnz	r2, 800c2fa <_strtol_l.constprop.0+0xe6>
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	e79e      	b.n	800c22a <_strtol_l.constprop.0+0x16>
 800c2ec:	b107      	cbz	r7, 800c2f0 <_strtol_l.constprop.0+0xdc>
 800c2ee:	4276      	negs	r6, r6
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d0f9      	beq.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c2f4:	f1be 0f00 	cmp.w	lr, #0
 800c2f8:	d000      	beq.n	800c2fc <_strtol_l.constprop.0+0xe8>
 800c2fa:	1e69      	subs	r1, r5, #1
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	e7f3      	b.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c300:	2430      	movs	r4, #48	; 0x30
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1b1      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c306:	2308      	movs	r3, #8
 800c308:	e7af      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c30a:	2c30      	cmp	r4, #48	; 0x30
 800c30c:	d0a5      	beq.n	800c25a <_strtol_l.constprop.0+0x46>
 800c30e:	230a      	movs	r3, #10
 800c310:	e7ab      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c312:	bf00      	nop
 800c314:	0800d739 	.word	0x0800d739

0800c318 <_strtol_r>:
 800c318:	f7ff bf7c 	b.w	800c214 <_strtol_l.constprop.0>

0800c31c <__ssputs_r>:
 800c31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c320:	688e      	ldr	r6, [r1, #8]
 800c322:	461f      	mov	r7, r3
 800c324:	42be      	cmp	r6, r7
 800c326:	680b      	ldr	r3, [r1, #0]
 800c328:	4682      	mov	sl, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	4690      	mov	r8, r2
 800c32e:	d82c      	bhi.n	800c38a <__ssputs_r+0x6e>
 800c330:	898a      	ldrh	r2, [r1, #12]
 800c332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c336:	d026      	beq.n	800c386 <__ssputs_r+0x6a>
 800c338:	6965      	ldr	r5, [r4, #20]
 800c33a:	6909      	ldr	r1, [r1, #16]
 800c33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c340:	eba3 0901 	sub.w	r9, r3, r1
 800c344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c348:	1c7b      	adds	r3, r7, #1
 800c34a:	444b      	add	r3, r9
 800c34c:	106d      	asrs	r5, r5, #1
 800c34e:	429d      	cmp	r5, r3
 800c350:	bf38      	it	cc
 800c352:	461d      	movcc	r5, r3
 800c354:	0553      	lsls	r3, r2, #21
 800c356:	d527      	bpl.n	800c3a8 <__ssputs_r+0x8c>
 800c358:	4629      	mov	r1, r5
 800c35a:	f7fe fc0f 	bl	800ab7c <_malloc_r>
 800c35e:	4606      	mov	r6, r0
 800c360:	b360      	cbz	r0, 800c3bc <__ssputs_r+0xa0>
 800c362:	6921      	ldr	r1, [r4, #16]
 800c364:	464a      	mov	r2, r9
 800c366:	f000 fbe3 	bl	800cb30 <memcpy>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	6126      	str	r6, [r4, #16]
 800c378:	6165      	str	r5, [r4, #20]
 800c37a:	444e      	add	r6, r9
 800c37c:	eba5 0509 	sub.w	r5, r5, r9
 800c380:	6026      	str	r6, [r4, #0]
 800c382:	60a5      	str	r5, [r4, #8]
 800c384:	463e      	mov	r6, r7
 800c386:	42be      	cmp	r6, r7
 800c388:	d900      	bls.n	800c38c <__ssputs_r+0x70>
 800c38a:	463e      	mov	r6, r7
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	4632      	mov	r2, r6
 800c390:	4641      	mov	r1, r8
 800c392:	f000 fb6f 	bl	800ca74 <memmove>
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	60a3      	str	r3, [r4, #8]
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	4433      	add	r3, r6
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	462a      	mov	r2, r5
 800c3aa:	f000 ff76 	bl	800d29a <_realloc_r>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d1e0      	bne.n	800c376 <__ssputs_r+0x5a>
 800c3b4:	6921      	ldr	r1, [r4, #16]
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	f7fe fb6c 	bl	800aa94 <_free_r>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	f8ca 3000 	str.w	r3, [sl]
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	e7e9      	b.n	800c3a4 <__ssputs_r+0x88>

0800c3d0 <_svfiprintf_r>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	4698      	mov	r8, r3
 800c3d6:	898b      	ldrh	r3, [r1, #12]
 800c3d8:	061b      	lsls	r3, r3, #24
 800c3da:	b09d      	sub	sp, #116	; 0x74
 800c3dc:	4607      	mov	r7, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	4614      	mov	r4, r2
 800c3e2:	d50e      	bpl.n	800c402 <_svfiprintf_r+0x32>
 800c3e4:	690b      	ldr	r3, [r1, #16]
 800c3e6:	b963      	cbnz	r3, 800c402 <_svfiprintf_r+0x32>
 800c3e8:	2140      	movs	r1, #64	; 0x40
 800c3ea:	f7fe fbc7 	bl	800ab7c <_malloc_r>
 800c3ee:	6028      	str	r0, [r5, #0]
 800c3f0:	6128      	str	r0, [r5, #16]
 800c3f2:	b920      	cbnz	r0, 800c3fe <_svfiprintf_r+0x2e>
 800c3f4:	230c      	movs	r3, #12
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e0d0      	b.n	800c5a0 <_svfiprintf_r+0x1d0>
 800c3fe:	2340      	movs	r3, #64	; 0x40
 800c400:	616b      	str	r3, [r5, #20]
 800c402:	2300      	movs	r3, #0
 800c404:	9309      	str	r3, [sp, #36]	; 0x24
 800c406:	2320      	movs	r3, #32
 800c408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c410:	2330      	movs	r3, #48	; 0x30
 800c412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5b8 <_svfiprintf_r+0x1e8>
 800c416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c41a:	f04f 0901 	mov.w	r9, #1
 800c41e:	4623      	mov	r3, r4
 800c420:	469a      	mov	sl, r3
 800c422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c426:	b10a      	cbz	r2, 800c42c <_svfiprintf_r+0x5c>
 800c428:	2a25      	cmp	r2, #37	; 0x25
 800c42a:	d1f9      	bne.n	800c420 <_svfiprintf_r+0x50>
 800c42c:	ebba 0b04 	subs.w	fp, sl, r4
 800c430:	d00b      	beq.n	800c44a <_svfiprintf_r+0x7a>
 800c432:	465b      	mov	r3, fp
 800c434:	4622      	mov	r2, r4
 800c436:	4629      	mov	r1, r5
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff ff6f 	bl	800c31c <__ssputs_r>
 800c43e:	3001      	adds	r0, #1
 800c440:	f000 80a9 	beq.w	800c596 <_svfiprintf_r+0x1c6>
 800c444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c446:	445a      	add	r2, fp
 800c448:	9209      	str	r2, [sp, #36]	; 0x24
 800c44a:	f89a 3000 	ldrb.w	r3, [sl]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 80a1 	beq.w	800c596 <_svfiprintf_r+0x1c6>
 800c454:	2300      	movs	r3, #0
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c45e:	f10a 0a01 	add.w	sl, sl, #1
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	9307      	str	r3, [sp, #28]
 800c466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c46a:	931a      	str	r3, [sp, #104]	; 0x68
 800c46c:	4654      	mov	r4, sl
 800c46e:	2205      	movs	r2, #5
 800c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c474:	4850      	ldr	r0, [pc, #320]	; (800c5b8 <_svfiprintf_r+0x1e8>)
 800c476:	f7f3 feab 	bl	80001d0 <memchr>
 800c47a:	9a04      	ldr	r2, [sp, #16]
 800c47c:	b9d8      	cbnz	r0, 800c4b6 <_svfiprintf_r+0xe6>
 800c47e:	06d0      	lsls	r0, r2, #27
 800c480:	bf44      	itt	mi
 800c482:	2320      	movmi	r3, #32
 800c484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c488:	0711      	lsls	r1, r2, #28
 800c48a:	bf44      	itt	mi
 800c48c:	232b      	movmi	r3, #43	; 0x2b
 800c48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c492:	f89a 3000 	ldrb.w	r3, [sl]
 800c496:	2b2a      	cmp	r3, #42	; 0x2a
 800c498:	d015      	beq.n	800c4c6 <_svfiprintf_r+0xf6>
 800c49a:	9a07      	ldr	r2, [sp, #28]
 800c49c:	4654      	mov	r4, sl
 800c49e:	2000      	movs	r0, #0
 800c4a0:	f04f 0c0a 	mov.w	ip, #10
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4aa:	3b30      	subs	r3, #48	; 0x30
 800c4ac:	2b09      	cmp	r3, #9
 800c4ae:	d94d      	bls.n	800c54c <_svfiprintf_r+0x17c>
 800c4b0:	b1b0      	cbz	r0, 800c4e0 <_svfiprintf_r+0x110>
 800c4b2:	9207      	str	r2, [sp, #28]
 800c4b4:	e014      	b.n	800c4e0 <_svfiprintf_r+0x110>
 800c4b6:	eba0 0308 	sub.w	r3, r0, r8
 800c4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	46a2      	mov	sl, r4
 800c4c4:	e7d2      	b.n	800c46c <_svfiprintf_r+0x9c>
 800c4c6:	9b03      	ldr	r3, [sp, #12]
 800c4c8:	1d19      	adds	r1, r3, #4
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	9103      	str	r1, [sp, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bfbb      	ittet	lt
 800c4d2:	425b      	neglt	r3, r3
 800c4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4d8:	9307      	strge	r3, [sp, #28]
 800c4da:	9307      	strlt	r3, [sp, #28]
 800c4dc:	bfb8      	it	lt
 800c4de:	9204      	strlt	r2, [sp, #16]
 800c4e0:	7823      	ldrb	r3, [r4, #0]
 800c4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e4:	d10c      	bne.n	800c500 <_svfiprintf_r+0x130>
 800c4e6:	7863      	ldrb	r3, [r4, #1]
 800c4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ea:	d134      	bne.n	800c556 <_svfiprintf_r+0x186>
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	1d1a      	adds	r2, r3, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	9203      	str	r2, [sp, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfb8      	it	lt
 800c4f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4fc:	3402      	adds	r4, #2
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c5c8 <_svfiprintf_r+0x1f8>
 800c504:	7821      	ldrb	r1, [r4, #0]
 800c506:	2203      	movs	r2, #3
 800c508:	4650      	mov	r0, sl
 800c50a:	f7f3 fe61 	bl	80001d0 <memchr>
 800c50e:	b138      	cbz	r0, 800c520 <_svfiprintf_r+0x150>
 800c510:	9b04      	ldr	r3, [sp, #16]
 800c512:	eba0 000a 	sub.w	r0, r0, sl
 800c516:	2240      	movs	r2, #64	; 0x40
 800c518:	4082      	lsls	r2, r0
 800c51a:	4313      	orrs	r3, r2
 800c51c:	3401      	adds	r4, #1
 800c51e:	9304      	str	r3, [sp, #16]
 800c520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c524:	4825      	ldr	r0, [pc, #148]	; (800c5bc <_svfiprintf_r+0x1ec>)
 800c526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c52a:	2206      	movs	r2, #6
 800c52c:	f7f3 fe50 	bl	80001d0 <memchr>
 800c530:	2800      	cmp	r0, #0
 800c532:	d038      	beq.n	800c5a6 <_svfiprintf_r+0x1d6>
 800c534:	4b22      	ldr	r3, [pc, #136]	; (800c5c0 <_svfiprintf_r+0x1f0>)
 800c536:	bb1b      	cbnz	r3, 800c580 <_svfiprintf_r+0x1b0>
 800c538:	9b03      	ldr	r3, [sp, #12]
 800c53a:	3307      	adds	r3, #7
 800c53c:	f023 0307 	bic.w	r3, r3, #7
 800c540:	3308      	adds	r3, #8
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c546:	4433      	add	r3, r6
 800c548:	9309      	str	r3, [sp, #36]	; 0x24
 800c54a:	e768      	b.n	800c41e <_svfiprintf_r+0x4e>
 800c54c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c550:	460c      	mov	r4, r1
 800c552:	2001      	movs	r0, #1
 800c554:	e7a6      	b.n	800c4a4 <_svfiprintf_r+0xd4>
 800c556:	2300      	movs	r3, #0
 800c558:	3401      	adds	r4, #1
 800c55a:	9305      	str	r3, [sp, #20]
 800c55c:	4619      	mov	r1, r3
 800c55e:	f04f 0c0a 	mov.w	ip, #10
 800c562:	4620      	mov	r0, r4
 800c564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c568:	3a30      	subs	r2, #48	; 0x30
 800c56a:	2a09      	cmp	r2, #9
 800c56c:	d903      	bls.n	800c576 <_svfiprintf_r+0x1a6>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0c6      	beq.n	800c500 <_svfiprintf_r+0x130>
 800c572:	9105      	str	r1, [sp, #20]
 800c574:	e7c4      	b.n	800c500 <_svfiprintf_r+0x130>
 800c576:	fb0c 2101 	mla	r1, ip, r1, r2
 800c57a:	4604      	mov	r4, r0
 800c57c:	2301      	movs	r3, #1
 800c57e:	e7f0      	b.n	800c562 <_svfiprintf_r+0x192>
 800c580:	ab03      	add	r3, sp, #12
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	462a      	mov	r2, r5
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <_svfiprintf_r+0x1f4>)
 800c588:	a904      	add	r1, sp, #16
 800c58a:	4638      	mov	r0, r7
 800c58c:	f7fc fb98 	bl	8008cc0 <_printf_float>
 800c590:	1c42      	adds	r2, r0, #1
 800c592:	4606      	mov	r6, r0
 800c594:	d1d6      	bne.n	800c544 <_svfiprintf_r+0x174>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	065b      	lsls	r3, r3, #25
 800c59a:	f53f af2d 	bmi.w	800c3f8 <_svfiprintf_r+0x28>
 800c59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a0:	b01d      	add	sp, #116	; 0x74
 800c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a6:	ab03      	add	r3, sp, #12
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <_svfiprintf_r+0x1f4>)
 800c5ae:	a904      	add	r1, sp, #16
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7fc fe29 	bl	8009208 <_printf_i>
 800c5b6:	e7eb      	b.n	800c590 <_svfiprintf_r+0x1c0>
 800c5b8:	0800d839 	.word	0x0800d839
 800c5bc:	0800d843 	.word	0x0800d843
 800c5c0:	08008cc1 	.word	0x08008cc1
 800c5c4:	0800c31d 	.word	0x0800c31d
 800c5c8:	0800d83f 	.word	0x0800d83f

0800c5cc <__sfputc_r>:
 800c5cc:	6893      	ldr	r3, [r2, #8]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	b410      	push	{r4}
 800c5d4:	6093      	str	r3, [r2, #8]
 800c5d6:	da08      	bge.n	800c5ea <__sfputc_r+0x1e>
 800c5d8:	6994      	ldr	r4, [r2, #24]
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	db01      	blt.n	800c5e2 <__sfputc_r+0x16>
 800c5de:	290a      	cmp	r1, #10
 800c5e0:	d103      	bne.n	800c5ea <__sfputc_r+0x1e>
 800c5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e6:	f7fd bac2 	b.w	8009b6e <__swbuf_r>
 800c5ea:	6813      	ldr	r3, [r2, #0]
 800c5ec:	1c58      	adds	r0, r3, #1
 800c5ee:	6010      	str	r0, [r2, #0]
 800c5f0:	7019      	strb	r1, [r3, #0]
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <__sfputs_r>:
 800c5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	460f      	mov	r7, r1
 800c600:	4614      	mov	r4, r2
 800c602:	18d5      	adds	r5, r2, r3
 800c604:	42ac      	cmp	r4, r5
 800c606:	d101      	bne.n	800c60c <__sfputs_r+0x12>
 800c608:	2000      	movs	r0, #0
 800c60a:	e007      	b.n	800c61c <__sfputs_r+0x22>
 800c60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c610:	463a      	mov	r2, r7
 800c612:	4630      	mov	r0, r6
 800c614:	f7ff ffda 	bl	800c5cc <__sfputc_r>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d1f3      	bne.n	800c604 <__sfputs_r+0xa>
 800c61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c620 <_vfiprintf_r>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	460d      	mov	r5, r1
 800c626:	b09d      	sub	sp, #116	; 0x74
 800c628:	4614      	mov	r4, r2
 800c62a:	4698      	mov	r8, r3
 800c62c:	4606      	mov	r6, r0
 800c62e:	b118      	cbz	r0, 800c638 <_vfiprintf_r+0x18>
 800c630:	6a03      	ldr	r3, [r0, #32]
 800c632:	b90b      	cbnz	r3, 800c638 <_vfiprintf_r+0x18>
 800c634:	f7fd f994 	bl	8009960 <__sinit>
 800c638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c63a:	07d9      	lsls	r1, r3, #31
 800c63c:	d405      	bmi.n	800c64a <_vfiprintf_r+0x2a>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	059a      	lsls	r2, r3, #22
 800c642:	d402      	bmi.n	800c64a <_vfiprintf_r+0x2a>
 800c644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c646:	f7fd fba3 	bl	8009d90 <__retarget_lock_acquire_recursive>
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	071b      	lsls	r3, r3, #28
 800c64e:	d501      	bpl.n	800c654 <_vfiprintf_r+0x34>
 800c650:	692b      	ldr	r3, [r5, #16]
 800c652:	b99b      	cbnz	r3, 800c67c <_vfiprintf_r+0x5c>
 800c654:	4629      	mov	r1, r5
 800c656:	4630      	mov	r0, r6
 800c658:	f7fd fac6 	bl	8009be8 <__swsetup_r>
 800c65c:	b170      	cbz	r0, 800c67c <_vfiprintf_r+0x5c>
 800c65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c660:	07dc      	lsls	r4, r3, #31
 800c662:	d504      	bpl.n	800c66e <_vfiprintf_r+0x4e>
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	b01d      	add	sp, #116	; 0x74
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	89ab      	ldrh	r3, [r5, #12]
 800c670:	0598      	lsls	r0, r3, #22
 800c672:	d4f7      	bmi.n	800c664 <_vfiprintf_r+0x44>
 800c674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c676:	f7fd fb8c 	bl	8009d92 <__retarget_lock_release_recursive>
 800c67a:	e7f3      	b.n	800c664 <_vfiprintf_r+0x44>
 800c67c:	2300      	movs	r3, #0
 800c67e:	9309      	str	r3, [sp, #36]	; 0x24
 800c680:	2320      	movs	r3, #32
 800c682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c686:	f8cd 800c 	str.w	r8, [sp, #12]
 800c68a:	2330      	movs	r3, #48	; 0x30
 800c68c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c840 <_vfiprintf_r+0x220>
 800c690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c694:	f04f 0901 	mov.w	r9, #1
 800c698:	4623      	mov	r3, r4
 800c69a:	469a      	mov	sl, r3
 800c69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6a0:	b10a      	cbz	r2, 800c6a6 <_vfiprintf_r+0x86>
 800c6a2:	2a25      	cmp	r2, #37	; 0x25
 800c6a4:	d1f9      	bne.n	800c69a <_vfiprintf_r+0x7a>
 800c6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6aa:	d00b      	beq.n	800c6c4 <_vfiprintf_r+0xa4>
 800c6ac:	465b      	mov	r3, fp
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7ff ffa1 	bl	800c5fa <__sfputs_r>
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f000 80a9 	beq.w	800c810 <_vfiprintf_r+0x1f0>
 800c6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6c0:	445a      	add	r2, fp
 800c6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80a1 	beq.w	800c810 <_vfiprintf_r+0x1f0>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d8:	f10a 0a01 	add.w	sl, sl, #1
 800c6dc:	9304      	str	r3, [sp, #16]
 800c6de:	9307      	str	r3, [sp, #28]
 800c6e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c6e6:	4654      	mov	r4, sl
 800c6e8:	2205      	movs	r2, #5
 800c6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ee:	4854      	ldr	r0, [pc, #336]	; (800c840 <_vfiprintf_r+0x220>)
 800c6f0:	f7f3 fd6e 	bl	80001d0 <memchr>
 800c6f4:	9a04      	ldr	r2, [sp, #16]
 800c6f6:	b9d8      	cbnz	r0, 800c730 <_vfiprintf_r+0x110>
 800c6f8:	06d1      	lsls	r1, r2, #27
 800c6fa:	bf44      	itt	mi
 800c6fc:	2320      	movmi	r3, #32
 800c6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c702:	0713      	lsls	r3, r2, #28
 800c704:	bf44      	itt	mi
 800c706:	232b      	movmi	r3, #43	; 0x2b
 800c708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c70c:	f89a 3000 	ldrb.w	r3, [sl]
 800c710:	2b2a      	cmp	r3, #42	; 0x2a
 800c712:	d015      	beq.n	800c740 <_vfiprintf_r+0x120>
 800c714:	9a07      	ldr	r2, [sp, #28]
 800c716:	4654      	mov	r4, sl
 800c718:	2000      	movs	r0, #0
 800c71a:	f04f 0c0a 	mov.w	ip, #10
 800c71e:	4621      	mov	r1, r4
 800c720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c724:	3b30      	subs	r3, #48	; 0x30
 800c726:	2b09      	cmp	r3, #9
 800c728:	d94d      	bls.n	800c7c6 <_vfiprintf_r+0x1a6>
 800c72a:	b1b0      	cbz	r0, 800c75a <_vfiprintf_r+0x13a>
 800c72c:	9207      	str	r2, [sp, #28]
 800c72e:	e014      	b.n	800c75a <_vfiprintf_r+0x13a>
 800c730:	eba0 0308 	sub.w	r3, r0, r8
 800c734:	fa09 f303 	lsl.w	r3, r9, r3
 800c738:	4313      	orrs	r3, r2
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	46a2      	mov	sl, r4
 800c73e:	e7d2      	b.n	800c6e6 <_vfiprintf_r+0xc6>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	1d19      	adds	r1, r3, #4
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	9103      	str	r1, [sp, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bfbb      	ittet	lt
 800c74c:	425b      	neglt	r3, r3
 800c74e:	f042 0202 	orrlt.w	r2, r2, #2
 800c752:	9307      	strge	r3, [sp, #28]
 800c754:	9307      	strlt	r3, [sp, #28]
 800c756:	bfb8      	it	lt
 800c758:	9204      	strlt	r2, [sp, #16]
 800c75a:	7823      	ldrb	r3, [r4, #0]
 800c75c:	2b2e      	cmp	r3, #46	; 0x2e
 800c75e:	d10c      	bne.n	800c77a <_vfiprintf_r+0x15a>
 800c760:	7863      	ldrb	r3, [r4, #1]
 800c762:	2b2a      	cmp	r3, #42	; 0x2a
 800c764:	d134      	bne.n	800c7d0 <_vfiprintf_r+0x1b0>
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	1d1a      	adds	r2, r3, #4
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	9203      	str	r2, [sp, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	bfb8      	it	lt
 800c772:	f04f 33ff 	movlt.w	r3, #4294967295
 800c776:	3402      	adds	r4, #2
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c850 <_vfiprintf_r+0x230>
 800c77e:	7821      	ldrb	r1, [r4, #0]
 800c780:	2203      	movs	r2, #3
 800c782:	4650      	mov	r0, sl
 800c784:	f7f3 fd24 	bl	80001d0 <memchr>
 800c788:	b138      	cbz	r0, 800c79a <_vfiprintf_r+0x17a>
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	eba0 000a 	sub.w	r0, r0, sl
 800c790:	2240      	movs	r2, #64	; 0x40
 800c792:	4082      	lsls	r2, r0
 800c794:	4313      	orrs	r3, r2
 800c796:	3401      	adds	r4, #1
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79e:	4829      	ldr	r0, [pc, #164]	; (800c844 <_vfiprintf_r+0x224>)
 800c7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7a4:	2206      	movs	r2, #6
 800c7a6:	f7f3 fd13 	bl	80001d0 <memchr>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d03f      	beq.n	800c82e <_vfiprintf_r+0x20e>
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <_vfiprintf_r+0x228>)
 800c7b0:	bb1b      	cbnz	r3, 800c7fa <_vfiprintf_r+0x1da>
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	3307      	adds	r3, #7
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	443b      	add	r3, r7
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	e768      	b.n	800c698 <_vfiprintf_r+0x78>
 800c7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	e7a6      	b.n	800c71e <_vfiprintf_r+0xfe>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	9305      	str	r3, [sp, #20]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e2:	3a30      	subs	r2, #48	; 0x30
 800c7e4:	2a09      	cmp	r2, #9
 800c7e6:	d903      	bls.n	800c7f0 <_vfiprintf_r+0x1d0>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0c6      	beq.n	800c77a <_vfiprintf_r+0x15a>
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	e7c4      	b.n	800c77a <_vfiprintf_r+0x15a>
 800c7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7f0      	b.n	800c7dc <_vfiprintf_r+0x1bc>
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	462a      	mov	r2, r5
 800c800:	4b12      	ldr	r3, [pc, #72]	; (800c84c <_vfiprintf_r+0x22c>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	4630      	mov	r0, r6
 800c806:	f7fc fa5b 	bl	8008cc0 <_printf_float>
 800c80a:	4607      	mov	r7, r0
 800c80c:	1c78      	adds	r0, r7, #1
 800c80e:	d1d6      	bne.n	800c7be <_vfiprintf_r+0x19e>
 800c810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c812:	07d9      	lsls	r1, r3, #31
 800c814:	d405      	bmi.n	800c822 <_vfiprintf_r+0x202>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	059a      	lsls	r2, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_vfiprintf_r+0x202>
 800c81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c81e:	f7fd fab8 	bl	8009d92 <__retarget_lock_release_recursive>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	065b      	lsls	r3, r3, #25
 800c826:	f53f af1d 	bmi.w	800c664 <_vfiprintf_r+0x44>
 800c82a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c82c:	e71c      	b.n	800c668 <_vfiprintf_r+0x48>
 800c82e:	ab03      	add	r3, sp, #12
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	462a      	mov	r2, r5
 800c834:	4b05      	ldr	r3, [pc, #20]	; (800c84c <_vfiprintf_r+0x22c>)
 800c836:	a904      	add	r1, sp, #16
 800c838:	4630      	mov	r0, r6
 800c83a:	f7fc fce5 	bl	8009208 <_printf_i>
 800c83e:	e7e4      	b.n	800c80a <_vfiprintf_r+0x1ea>
 800c840:	0800d839 	.word	0x0800d839
 800c844:	0800d843 	.word	0x0800d843
 800c848:	08008cc1 	.word	0x08008cc1
 800c84c:	0800c5fb 	.word	0x0800c5fb
 800c850:	0800d83f 	.word	0x0800d83f

0800c854 <__sflush_r>:
 800c854:	898a      	ldrh	r2, [r1, #12]
 800c856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85a:	4605      	mov	r5, r0
 800c85c:	0710      	lsls	r0, r2, #28
 800c85e:	460c      	mov	r4, r1
 800c860:	d458      	bmi.n	800c914 <__sflush_r+0xc0>
 800c862:	684b      	ldr	r3, [r1, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	dc05      	bgt.n	800c874 <__sflush_r+0x20>
 800c868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	dc02      	bgt.n	800c874 <__sflush_r+0x20>
 800c86e:	2000      	movs	r0, #0
 800c870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c876:	2e00      	cmp	r6, #0
 800c878:	d0f9      	beq.n	800c86e <__sflush_r+0x1a>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c880:	682f      	ldr	r7, [r5, #0]
 800c882:	6a21      	ldr	r1, [r4, #32]
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	d032      	beq.n	800c8ee <__sflush_r+0x9a>
 800c888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c88a:	89a3      	ldrh	r3, [r4, #12]
 800c88c:	075a      	lsls	r2, r3, #29
 800c88e:	d505      	bpl.n	800c89c <__sflush_r+0x48>
 800c890:	6863      	ldr	r3, [r4, #4]
 800c892:	1ac0      	subs	r0, r0, r3
 800c894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c896:	b10b      	cbz	r3, 800c89c <__sflush_r+0x48>
 800c898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c89a:	1ac0      	subs	r0, r0, r3
 800c89c:	2300      	movs	r3, #0
 800c89e:	4602      	mov	r2, r0
 800c8a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8a2:	6a21      	ldr	r1, [r4, #32]
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b0      	blx	r6
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	d106      	bne.n	800c8bc <__sflush_r+0x68>
 800c8ae:	6829      	ldr	r1, [r5, #0]
 800c8b0:	291d      	cmp	r1, #29
 800c8b2:	d82b      	bhi.n	800c90c <__sflush_r+0xb8>
 800c8b4:	4a29      	ldr	r2, [pc, #164]	; (800c95c <__sflush_r+0x108>)
 800c8b6:	410a      	asrs	r2, r1
 800c8b8:	07d6      	lsls	r6, r2, #31
 800c8ba:	d427      	bmi.n	800c90c <__sflush_r+0xb8>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	6062      	str	r2, [r4, #4]
 800c8c0:	04d9      	lsls	r1, r3, #19
 800c8c2:	6922      	ldr	r2, [r4, #16]
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	d504      	bpl.n	800c8d2 <__sflush_r+0x7e>
 800c8c8:	1c42      	adds	r2, r0, #1
 800c8ca:	d101      	bne.n	800c8d0 <__sflush_r+0x7c>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b903      	cbnz	r3, 800c8d2 <__sflush_r+0x7e>
 800c8d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c8d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8d4:	602f      	str	r7, [r5, #0]
 800c8d6:	2900      	cmp	r1, #0
 800c8d8:	d0c9      	beq.n	800c86e <__sflush_r+0x1a>
 800c8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8de:	4299      	cmp	r1, r3
 800c8e0:	d002      	beq.n	800c8e8 <__sflush_r+0x94>
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7fe f8d6 	bl	800aa94 <_free_r>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c8ec:	e7c0      	b.n	800c870 <__sflush_r+0x1c>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	47b0      	blx	r6
 800c8f4:	1c41      	adds	r1, r0, #1
 800c8f6:	d1c8      	bne.n	800c88a <__sflush_r+0x36>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0c5      	beq.n	800c88a <__sflush_r+0x36>
 800c8fe:	2b1d      	cmp	r3, #29
 800c900:	d001      	beq.n	800c906 <__sflush_r+0xb2>
 800c902:	2b16      	cmp	r3, #22
 800c904:	d101      	bne.n	800c90a <__sflush_r+0xb6>
 800c906:	602f      	str	r7, [r5, #0]
 800c908:	e7b1      	b.n	800c86e <__sflush_r+0x1a>
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	e7ad      	b.n	800c870 <__sflush_r+0x1c>
 800c914:	690f      	ldr	r7, [r1, #16]
 800c916:	2f00      	cmp	r7, #0
 800c918:	d0a9      	beq.n	800c86e <__sflush_r+0x1a>
 800c91a:	0793      	lsls	r3, r2, #30
 800c91c:	680e      	ldr	r6, [r1, #0]
 800c91e:	bf08      	it	eq
 800c920:	694b      	ldreq	r3, [r1, #20]
 800c922:	600f      	str	r7, [r1, #0]
 800c924:	bf18      	it	ne
 800c926:	2300      	movne	r3, #0
 800c928:	eba6 0807 	sub.w	r8, r6, r7
 800c92c:	608b      	str	r3, [r1, #8]
 800c92e:	f1b8 0f00 	cmp.w	r8, #0
 800c932:	dd9c      	ble.n	800c86e <__sflush_r+0x1a>
 800c934:	6a21      	ldr	r1, [r4, #32]
 800c936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c938:	4643      	mov	r3, r8
 800c93a:	463a      	mov	r2, r7
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b0      	blx	r6
 800c940:	2800      	cmp	r0, #0
 800c942:	dc06      	bgt.n	800c952 <__sflush_r+0xfe>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295
 800c950:	e78e      	b.n	800c870 <__sflush_r+0x1c>
 800c952:	4407      	add	r7, r0
 800c954:	eba8 0800 	sub.w	r8, r8, r0
 800c958:	e7e9      	b.n	800c92e <__sflush_r+0xda>
 800c95a:	bf00      	nop
 800c95c:	dfbffffe 	.word	0xdfbffffe

0800c960 <_fflush_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	690b      	ldr	r3, [r1, #16]
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	b913      	cbnz	r3, 800c970 <_fflush_r+0x10>
 800c96a:	2500      	movs	r5, #0
 800c96c:	4628      	mov	r0, r5
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	b118      	cbz	r0, 800c97a <_fflush_r+0x1a>
 800c972:	6a03      	ldr	r3, [r0, #32]
 800c974:	b90b      	cbnz	r3, 800c97a <_fflush_r+0x1a>
 800c976:	f7fc fff3 	bl	8009960 <__sinit>
 800c97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0f3      	beq.n	800c96a <_fflush_r+0xa>
 800c982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c984:	07d0      	lsls	r0, r2, #31
 800c986:	d404      	bmi.n	800c992 <_fflush_r+0x32>
 800c988:	0599      	lsls	r1, r3, #22
 800c98a:	d402      	bmi.n	800c992 <_fflush_r+0x32>
 800c98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c98e:	f7fd f9ff 	bl	8009d90 <__retarget_lock_acquire_recursive>
 800c992:	4628      	mov	r0, r5
 800c994:	4621      	mov	r1, r4
 800c996:	f7ff ff5d 	bl	800c854 <__sflush_r>
 800c99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c99c:	07da      	lsls	r2, r3, #31
 800c99e:	4605      	mov	r5, r0
 800c9a0:	d4e4      	bmi.n	800c96c <_fflush_r+0xc>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	059b      	lsls	r3, r3, #22
 800c9a6:	d4e1      	bmi.n	800c96c <_fflush_r+0xc>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9aa:	f7fd f9f2 	bl	8009d92 <__retarget_lock_release_recursive>
 800c9ae:	e7dd      	b.n	800c96c <_fflush_r+0xc>

0800c9b0 <__swhatbuf_r>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	b096      	sub	sp, #88	; 0x58
 800c9bc:	4615      	mov	r5, r2
 800c9be:	461e      	mov	r6, r3
 800c9c0:	da0d      	bge.n	800c9de <__swhatbuf_r+0x2e>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9c8:	f04f 0100 	mov.w	r1, #0
 800c9cc:	bf0c      	ite	eq
 800c9ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c9d2:	2340      	movne	r3, #64	; 0x40
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	6031      	str	r1, [r6, #0]
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	b016      	add	sp, #88	; 0x58
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	466a      	mov	r2, sp
 800c9e0:	f000 f874 	bl	800cacc <_fstat_r>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	dbec      	blt.n	800c9c2 <__swhatbuf_r+0x12>
 800c9e8:	9901      	ldr	r1, [sp, #4]
 800c9ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c9ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9f2:	4259      	negs	r1, r3
 800c9f4:	4159      	adcs	r1, r3
 800c9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9fa:	e7eb      	b.n	800c9d4 <__swhatbuf_r+0x24>

0800c9fc <__smakebuf_r>:
 800c9fc:	898b      	ldrh	r3, [r1, #12]
 800c9fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca00:	079d      	lsls	r5, r3, #30
 800ca02:	4606      	mov	r6, r0
 800ca04:	460c      	mov	r4, r1
 800ca06:	d507      	bpl.n	800ca18 <__smakebuf_r+0x1c>
 800ca08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	2301      	movs	r3, #1
 800ca12:	6163      	str	r3, [r4, #20]
 800ca14:	b002      	add	sp, #8
 800ca16:	bd70      	pop	{r4, r5, r6, pc}
 800ca18:	ab01      	add	r3, sp, #4
 800ca1a:	466a      	mov	r2, sp
 800ca1c:	f7ff ffc8 	bl	800c9b0 <__swhatbuf_r>
 800ca20:	9900      	ldr	r1, [sp, #0]
 800ca22:	4605      	mov	r5, r0
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7fe f8a9 	bl	800ab7c <_malloc_r>
 800ca2a:	b948      	cbnz	r0, 800ca40 <__smakebuf_r+0x44>
 800ca2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca30:	059a      	lsls	r2, r3, #22
 800ca32:	d4ef      	bmi.n	800ca14 <__smakebuf_r+0x18>
 800ca34:	f023 0303 	bic.w	r3, r3, #3
 800ca38:	f043 0302 	orr.w	r3, r3, #2
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	e7e3      	b.n	800ca08 <__smakebuf_r+0xc>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	6020      	str	r0, [r4, #0]
 800ca44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	9b00      	ldr	r3, [sp, #0]
 800ca4c:	6163      	str	r3, [r4, #20]
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	6120      	str	r0, [r4, #16]
 800ca52:	b15b      	cbz	r3, 800ca6c <__smakebuf_r+0x70>
 800ca54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f000 f849 	bl	800caf0 <_isatty_r>
 800ca5e:	b128      	cbz	r0, 800ca6c <__smakebuf_r+0x70>
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	f023 0303 	bic.w	r3, r3, #3
 800ca66:	f043 0301 	orr.w	r3, r3, #1
 800ca6a:	81a3      	strh	r3, [r4, #12]
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	431d      	orrs	r5, r3
 800ca70:	81a5      	strh	r5, [r4, #12]
 800ca72:	e7cf      	b.n	800ca14 <__smakebuf_r+0x18>

0800ca74 <memmove>:
 800ca74:	4288      	cmp	r0, r1
 800ca76:	b510      	push	{r4, lr}
 800ca78:	eb01 0402 	add.w	r4, r1, r2
 800ca7c:	d902      	bls.n	800ca84 <memmove+0x10>
 800ca7e:	4284      	cmp	r4, r0
 800ca80:	4623      	mov	r3, r4
 800ca82:	d807      	bhi.n	800ca94 <memmove+0x20>
 800ca84:	1e43      	subs	r3, r0, #1
 800ca86:	42a1      	cmp	r1, r4
 800ca88:	d008      	beq.n	800ca9c <memmove+0x28>
 800ca8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca92:	e7f8      	b.n	800ca86 <memmove+0x12>
 800ca94:	4402      	add	r2, r0
 800ca96:	4601      	mov	r1, r0
 800ca98:	428a      	cmp	r2, r1
 800ca9a:	d100      	bne.n	800ca9e <memmove+0x2a>
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caa6:	e7f7      	b.n	800ca98 <memmove+0x24>

0800caa8 <strncmp>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	b16a      	cbz	r2, 800cac8 <strncmp+0x20>
 800caac:	3901      	subs	r1, #1
 800caae:	1884      	adds	r4, r0, r2
 800cab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cab8:	429a      	cmp	r2, r3
 800caba:	d103      	bne.n	800cac4 <strncmp+0x1c>
 800cabc:	42a0      	cmp	r0, r4
 800cabe:	d001      	beq.n	800cac4 <strncmp+0x1c>
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	d1f5      	bne.n	800cab0 <strncmp+0x8>
 800cac4:	1ad0      	subs	r0, r2, r3
 800cac6:	bd10      	pop	{r4, pc}
 800cac8:	4610      	mov	r0, r2
 800caca:	e7fc      	b.n	800cac6 <strncmp+0x1e>

0800cacc <_fstat_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d07      	ldr	r5, [pc, #28]	; (800caec <_fstat_r+0x20>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	f7f5 f95a 	bl	8001d92 <_fstat>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	d102      	bne.n	800cae8 <_fstat_r+0x1c>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	b103      	cbz	r3, 800cae8 <_fstat_r+0x1c>
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	bd38      	pop	{r3, r4, r5, pc}
 800caea:	bf00      	nop
 800caec:	200006d4 	.word	0x200006d4

0800caf0 <_isatty_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d06      	ldr	r5, [pc, #24]	; (800cb0c <_isatty_r+0x1c>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	602b      	str	r3, [r5, #0]
 800cafc:	f7f5 f959 	bl	8001db2 <_isatty>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_isatty_r+0x1a>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_isatty_r+0x1a>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	200006d4 	.word	0x200006d4

0800cb10 <_sbrk_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d06      	ldr	r5, [pc, #24]	; (800cb2c <_sbrk_r+0x1c>)
 800cb14:	2300      	movs	r3, #0
 800cb16:	4604      	mov	r4, r0
 800cb18:	4608      	mov	r0, r1
 800cb1a:	602b      	str	r3, [r5, #0]
 800cb1c:	f7f5 f962 	bl	8001de4 <_sbrk>
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	d102      	bne.n	800cb2a <_sbrk_r+0x1a>
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	b103      	cbz	r3, 800cb2a <_sbrk_r+0x1a>
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
 800cb2c:	200006d4 	.word	0x200006d4

0800cb30 <memcpy>:
 800cb30:	440a      	add	r2, r1
 800cb32:	4291      	cmp	r1, r2
 800cb34:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb38:	d100      	bne.n	800cb3c <memcpy+0xc>
 800cb3a:	4770      	bx	lr
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb46:	4291      	cmp	r1, r2
 800cb48:	d1f9      	bne.n	800cb3e <memcpy+0xe>
 800cb4a:	bd10      	pop	{r4, pc}
 800cb4c:	0000      	movs	r0, r0
	...

0800cb50 <nan>:
 800cb50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb58 <nan+0x8>
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	7ff80000 	.word	0x7ff80000

0800cb60 <__assert_func>:
 800cb60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb62:	4614      	mov	r4, r2
 800cb64:	461a      	mov	r2, r3
 800cb66:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <__assert_func+0x2c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	68d8      	ldr	r0, [r3, #12]
 800cb6e:	b14c      	cbz	r4, 800cb84 <__assert_func+0x24>
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <__assert_func+0x30>)
 800cb72:	9100      	str	r1, [sp, #0]
 800cb74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb78:	4906      	ldr	r1, [pc, #24]	; (800cb94 <__assert_func+0x34>)
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	f000 fbca 	bl	800d314 <fiprintf>
 800cb80:	f000 fbda 	bl	800d338 <abort>
 800cb84:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <__assert_func+0x38>)
 800cb86:	461c      	mov	r4, r3
 800cb88:	e7f3      	b.n	800cb72 <__assert_func+0x12>
 800cb8a:	bf00      	nop
 800cb8c:	20000064 	.word	0x20000064
 800cb90:	0800d852 	.word	0x0800d852
 800cb94:	0800d85f 	.word	0x0800d85f
 800cb98:	0800d88d 	.word	0x0800d88d

0800cb9c <_calloc_r>:
 800cb9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb9e:	fba1 2402 	umull	r2, r4, r1, r2
 800cba2:	b94c      	cbnz	r4, 800cbb8 <_calloc_r+0x1c>
 800cba4:	4611      	mov	r1, r2
 800cba6:	9201      	str	r2, [sp, #4]
 800cba8:	f7fd ffe8 	bl	800ab7c <_malloc_r>
 800cbac:	9a01      	ldr	r2, [sp, #4]
 800cbae:	4605      	mov	r5, r0
 800cbb0:	b930      	cbnz	r0, 800cbc0 <_calloc_r+0x24>
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	b003      	add	sp, #12
 800cbb6:	bd30      	pop	{r4, r5, pc}
 800cbb8:	220c      	movs	r2, #12
 800cbba:	6002      	str	r2, [r0, #0]
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	e7f8      	b.n	800cbb2 <_calloc_r+0x16>
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	f7fd f869 	bl	8009c98 <memset>
 800cbc6:	e7f4      	b.n	800cbb2 <_calloc_r+0x16>

0800cbc8 <rshift>:
 800cbc8:	6903      	ldr	r3, [r0, #16]
 800cbca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cbce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cbd6:	f100 0414 	add.w	r4, r0, #20
 800cbda:	dd45      	ble.n	800cc68 <rshift+0xa0>
 800cbdc:	f011 011f 	ands.w	r1, r1, #31
 800cbe0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cbe4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cbe8:	d10c      	bne.n	800cc04 <rshift+0x3c>
 800cbea:	f100 0710 	add.w	r7, r0, #16
 800cbee:	4629      	mov	r1, r5
 800cbf0:	42b1      	cmp	r1, r6
 800cbf2:	d334      	bcc.n	800cc5e <rshift+0x96>
 800cbf4:	1a9b      	subs	r3, r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	1eea      	subs	r2, r5, #3
 800cbfa:	4296      	cmp	r6, r2
 800cbfc:	bf38      	it	cc
 800cbfe:	2300      	movcc	r3, #0
 800cc00:	4423      	add	r3, r4
 800cc02:	e015      	b.n	800cc30 <rshift+0x68>
 800cc04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc08:	f1c1 0820 	rsb	r8, r1, #32
 800cc0c:	40cf      	lsrs	r7, r1
 800cc0e:	f105 0e04 	add.w	lr, r5, #4
 800cc12:	46a1      	mov	r9, r4
 800cc14:	4576      	cmp	r6, lr
 800cc16:	46f4      	mov	ip, lr
 800cc18:	d815      	bhi.n	800cc46 <rshift+0x7e>
 800cc1a:	1a9a      	subs	r2, r3, r2
 800cc1c:	0092      	lsls	r2, r2, #2
 800cc1e:	3a04      	subs	r2, #4
 800cc20:	3501      	adds	r5, #1
 800cc22:	42ae      	cmp	r6, r5
 800cc24:	bf38      	it	cc
 800cc26:	2200      	movcc	r2, #0
 800cc28:	18a3      	adds	r3, r4, r2
 800cc2a:	50a7      	str	r7, [r4, r2]
 800cc2c:	b107      	cbz	r7, 800cc30 <rshift+0x68>
 800cc2e:	3304      	adds	r3, #4
 800cc30:	1b1a      	subs	r2, r3, r4
 800cc32:	42a3      	cmp	r3, r4
 800cc34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc38:	bf08      	it	eq
 800cc3a:	2300      	moveq	r3, #0
 800cc3c:	6102      	str	r2, [r0, #16]
 800cc3e:	bf08      	it	eq
 800cc40:	6143      	streq	r3, [r0, #20]
 800cc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc46:	f8dc c000 	ldr.w	ip, [ip]
 800cc4a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc4e:	ea4c 0707 	orr.w	r7, ip, r7
 800cc52:	f849 7b04 	str.w	r7, [r9], #4
 800cc56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc5a:	40cf      	lsrs	r7, r1
 800cc5c:	e7da      	b.n	800cc14 <rshift+0x4c>
 800cc5e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc62:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc66:	e7c3      	b.n	800cbf0 <rshift+0x28>
 800cc68:	4623      	mov	r3, r4
 800cc6a:	e7e1      	b.n	800cc30 <rshift+0x68>

0800cc6c <__hexdig_fun>:
 800cc6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cc70:	2b09      	cmp	r3, #9
 800cc72:	d802      	bhi.n	800cc7a <__hexdig_fun+0xe>
 800cc74:	3820      	subs	r0, #32
 800cc76:	b2c0      	uxtb	r0, r0
 800cc78:	4770      	bx	lr
 800cc7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cc7e:	2b05      	cmp	r3, #5
 800cc80:	d801      	bhi.n	800cc86 <__hexdig_fun+0x1a>
 800cc82:	3847      	subs	r0, #71	; 0x47
 800cc84:	e7f7      	b.n	800cc76 <__hexdig_fun+0xa>
 800cc86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d801      	bhi.n	800cc92 <__hexdig_fun+0x26>
 800cc8e:	3827      	subs	r0, #39	; 0x27
 800cc90:	e7f1      	b.n	800cc76 <__hexdig_fun+0xa>
 800cc92:	2000      	movs	r0, #0
 800cc94:	4770      	bx	lr
	...

0800cc98 <__gethex>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	4617      	mov	r7, r2
 800cc9e:	680a      	ldr	r2, [r1, #0]
 800cca0:	b085      	sub	sp, #20
 800cca2:	f102 0b02 	add.w	fp, r2, #2
 800cca6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ccaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ccae:	4681      	mov	r9, r0
 800ccb0:	468a      	mov	sl, r1
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	32fe      	adds	r2, #254	; 0xfe
 800ccb6:	eb02 030b 	add.w	r3, r2, fp
 800ccba:	46d8      	mov	r8, fp
 800ccbc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	2830      	cmp	r0, #48	; 0x30
 800ccc4:	d0f7      	beq.n	800ccb6 <__gethex+0x1e>
 800ccc6:	f7ff ffd1 	bl	800cc6c <__hexdig_fun>
 800ccca:	4604      	mov	r4, r0
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d138      	bne.n	800cd42 <__gethex+0xaa>
 800ccd0:	49a7      	ldr	r1, [pc, #668]	; (800cf70 <__gethex+0x2d8>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	4640      	mov	r0, r8
 800ccd6:	f7ff fee7 	bl	800caa8 <strncmp>
 800ccda:	4606      	mov	r6, r0
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d169      	bne.n	800cdb4 <__gethex+0x11c>
 800cce0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cce4:	465d      	mov	r5, fp
 800cce6:	f7ff ffc1 	bl	800cc6c <__hexdig_fun>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d064      	beq.n	800cdb8 <__gethex+0x120>
 800ccee:	465a      	mov	r2, fp
 800ccf0:	7810      	ldrb	r0, [r2, #0]
 800ccf2:	2830      	cmp	r0, #48	; 0x30
 800ccf4:	4690      	mov	r8, r2
 800ccf6:	f102 0201 	add.w	r2, r2, #1
 800ccfa:	d0f9      	beq.n	800ccf0 <__gethex+0x58>
 800ccfc:	f7ff ffb6 	bl	800cc6c <__hexdig_fun>
 800cd00:	2301      	movs	r3, #1
 800cd02:	fab0 f480 	clz	r4, r0
 800cd06:	0964      	lsrs	r4, r4, #5
 800cd08:	465e      	mov	r6, fp
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	4642      	mov	r2, r8
 800cd0e:	4615      	mov	r5, r2
 800cd10:	3201      	adds	r2, #1
 800cd12:	7828      	ldrb	r0, [r5, #0]
 800cd14:	f7ff ffaa 	bl	800cc6c <__hexdig_fun>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d1f8      	bne.n	800cd0e <__gethex+0x76>
 800cd1c:	4994      	ldr	r1, [pc, #592]	; (800cf70 <__gethex+0x2d8>)
 800cd1e:	2201      	movs	r2, #1
 800cd20:	4628      	mov	r0, r5
 800cd22:	f7ff fec1 	bl	800caa8 <strncmp>
 800cd26:	b978      	cbnz	r0, 800cd48 <__gethex+0xb0>
 800cd28:	b946      	cbnz	r6, 800cd3c <__gethex+0xa4>
 800cd2a:	1c6e      	adds	r6, r5, #1
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	4615      	mov	r5, r2
 800cd30:	3201      	adds	r2, #1
 800cd32:	7828      	ldrb	r0, [r5, #0]
 800cd34:	f7ff ff9a 	bl	800cc6c <__hexdig_fun>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1f8      	bne.n	800cd2e <__gethex+0x96>
 800cd3c:	1b73      	subs	r3, r6, r5
 800cd3e:	009e      	lsls	r6, r3, #2
 800cd40:	e004      	b.n	800cd4c <__gethex+0xb4>
 800cd42:	2400      	movs	r4, #0
 800cd44:	4626      	mov	r6, r4
 800cd46:	e7e1      	b.n	800cd0c <__gethex+0x74>
 800cd48:	2e00      	cmp	r6, #0
 800cd4a:	d1f7      	bne.n	800cd3c <__gethex+0xa4>
 800cd4c:	782b      	ldrb	r3, [r5, #0]
 800cd4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd52:	2b50      	cmp	r3, #80	; 0x50
 800cd54:	d13d      	bne.n	800cdd2 <__gethex+0x13a>
 800cd56:	786b      	ldrb	r3, [r5, #1]
 800cd58:	2b2b      	cmp	r3, #43	; 0x2b
 800cd5a:	d02f      	beq.n	800cdbc <__gethex+0x124>
 800cd5c:	2b2d      	cmp	r3, #45	; 0x2d
 800cd5e:	d031      	beq.n	800cdc4 <__gethex+0x12c>
 800cd60:	1c69      	adds	r1, r5, #1
 800cd62:	f04f 0b00 	mov.w	fp, #0
 800cd66:	7808      	ldrb	r0, [r1, #0]
 800cd68:	f7ff ff80 	bl	800cc6c <__hexdig_fun>
 800cd6c:	1e42      	subs	r2, r0, #1
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	2a18      	cmp	r2, #24
 800cd72:	d82e      	bhi.n	800cdd2 <__gethex+0x13a>
 800cd74:	f1a0 0210 	sub.w	r2, r0, #16
 800cd78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd7c:	f7ff ff76 	bl	800cc6c <__hexdig_fun>
 800cd80:	f100 3cff 	add.w	ip, r0, #4294967295
 800cd84:	fa5f fc8c 	uxtb.w	ip, ip
 800cd88:	f1bc 0f18 	cmp.w	ip, #24
 800cd8c:	d91d      	bls.n	800cdca <__gethex+0x132>
 800cd8e:	f1bb 0f00 	cmp.w	fp, #0
 800cd92:	d000      	beq.n	800cd96 <__gethex+0xfe>
 800cd94:	4252      	negs	r2, r2
 800cd96:	4416      	add	r6, r2
 800cd98:	f8ca 1000 	str.w	r1, [sl]
 800cd9c:	b1dc      	cbz	r4, 800cdd6 <__gethex+0x13e>
 800cd9e:	9b01      	ldr	r3, [sp, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bf14      	ite	ne
 800cda4:	f04f 0800 	movne.w	r8, #0
 800cda8:	f04f 0806 	moveq.w	r8, #6
 800cdac:	4640      	mov	r0, r8
 800cdae:	b005      	add	sp, #20
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	4645      	mov	r5, r8
 800cdb6:	4626      	mov	r6, r4
 800cdb8:	2401      	movs	r4, #1
 800cdba:	e7c7      	b.n	800cd4c <__gethex+0xb4>
 800cdbc:	f04f 0b00 	mov.w	fp, #0
 800cdc0:	1ca9      	adds	r1, r5, #2
 800cdc2:	e7d0      	b.n	800cd66 <__gethex+0xce>
 800cdc4:	f04f 0b01 	mov.w	fp, #1
 800cdc8:	e7fa      	b.n	800cdc0 <__gethex+0x128>
 800cdca:	230a      	movs	r3, #10
 800cdcc:	fb03 0002 	mla	r0, r3, r2, r0
 800cdd0:	e7d0      	b.n	800cd74 <__gethex+0xdc>
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	e7e0      	b.n	800cd98 <__gethex+0x100>
 800cdd6:	eba5 0308 	sub.w	r3, r5, r8
 800cdda:	3b01      	subs	r3, #1
 800cddc:	4621      	mov	r1, r4
 800cdde:	2b07      	cmp	r3, #7
 800cde0:	dc0a      	bgt.n	800cdf8 <__gethex+0x160>
 800cde2:	4648      	mov	r0, r9
 800cde4:	f7fd ff56 	bl	800ac94 <_Balloc>
 800cde8:	4604      	mov	r4, r0
 800cdea:	b940      	cbnz	r0, 800cdfe <__gethex+0x166>
 800cdec:	4b61      	ldr	r3, [pc, #388]	; (800cf74 <__gethex+0x2dc>)
 800cdee:	4602      	mov	r2, r0
 800cdf0:	21e4      	movs	r1, #228	; 0xe4
 800cdf2:	4861      	ldr	r0, [pc, #388]	; (800cf78 <__gethex+0x2e0>)
 800cdf4:	f7ff feb4 	bl	800cb60 <__assert_func>
 800cdf8:	3101      	adds	r1, #1
 800cdfa:	105b      	asrs	r3, r3, #1
 800cdfc:	e7ef      	b.n	800cdde <__gethex+0x146>
 800cdfe:	f100 0a14 	add.w	sl, r0, #20
 800ce02:	2300      	movs	r3, #0
 800ce04:	495a      	ldr	r1, [pc, #360]	; (800cf70 <__gethex+0x2d8>)
 800ce06:	f8cd a004 	str.w	sl, [sp, #4]
 800ce0a:	469b      	mov	fp, r3
 800ce0c:	45a8      	cmp	r8, r5
 800ce0e:	d342      	bcc.n	800ce96 <__gethex+0x1fe>
 800ce10:	9801      	ldr	r0, [sp, #4]
 800ce12:	f840 bb04 	str.w	fp, [r0], #4
 800ce16:	eba0 000a 	sub.w	r0, r0, sl
 800ce1a:	1080      	asrs	r0, r0, #2
 800ce1c:	6120      	str	r0, [r4, #16]
 800ce1e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ce22:	4658      	mov	r0, fp
 800ce24:	f7fe f828 	bl	800ae78 <__hi0bits>
 800ce28:	683d      	ldr	r5, [r7, #0]
 800ce2a:	eba8 0000 	sub.w	r0, r8, r0
 800ce2e:	42a8      	cmp	r0, r5
 800ce30:	dd59      	ble.n	800cee6 <__gethex+0x24e>
 800ce32:	eba0 0805 	sub.w	r8, r0, r5
 800ce36:	4641      	mov	r1, r8
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f7fe fbb7 	bl	800b5ac <__any_on>
 800ce3e:	4683      	mov	fp, r0
 800ce40:	b1b8      	cbz	r0, 800ce72 <__gethex+0x1da>
 800ce42:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce46:	1159      	asrs	r1, r3, #5
 800ce48:	f003 021f 	and.w	r2, r3, #31
 800ce4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ce50:	f04f 0b01 	mov.w	fp, #1
 800ce54:	fa0b f202 	lsl.w	r2, fp, r2
 800ce58:	420a      	tst	r2, r1
 800ce5a:	d00a      	beq.n	800ce72 <__gethex+0x1da>
 800ce5c:	455b      	cmp	r3, fp
 800ce5e:	dd06      	ble.n	800ce6e <__gethex+0x1d6>
 800ce60:	f1a8 0102 	sub.w	r1, r8, #2
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7fe fba1 	bl	800b5ac <__any_on>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d138      	bne.n	800cee0 <__gethex+0x248>
 800ce6e:	f04f 0b02 	mov.w	fp, #2
 800ce72:	4641      	mov	r1, r8
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff fea7 	bl	800cbc8 <rshift>
 800ce7a:	4446      	add	r6, r8
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	42b3      	cmp	r3, r6
 800ce80:	da41      	bge.n	800cf06 <__gethex+0x26e>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4648      	mov	r0, r9
 800ce86:	f7fd ff45 	bl	800ad14 <_Bfree>
 800ce8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	6013      	str	r3, [r2, #0]
 800ce90:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ce94:	e78a      	b.n	800cdac <__gethex+0x114>
 800ce96:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ce9a:	2a2e      	cmp	r2, #46	; 0x2e
 800ce9c:	d014      	beq.n	800cec8 <__gethex+0x230>
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	d106      	bne.n	800ceb0 <__gethex+0x218>
 800cea2:	9b01      	ldr	r3, [sp, #4]
 800cea4:	f843 bb04 	str.w	fp, [r3], #4
 800cea8:	f04f 0b00 	mov.w	fp, #0
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	465b      	mov	r3, fp
 800ceb0:	7828      	ldrb	r0, [r5, #0]
 800ceb2:	9303      	str	r3, [sp, #12]
 800ceb4:	f7ff feda 	bl	800cc6c <__hexdig_fun>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	f000 000f 	and.w	r0, r0, #15
 800cebe:	4098      	lsls	r0, r3
 800cec0:	ea4b 0b00 	orr.w	fp, fp, r0
 800cec4:	3304      	adds	r3, #4
 800cec6:	e7a1      	b.n	800ce0c <__gethex+0x174>
 800cec8:	45a8      	cmp	r8, r5
 800ceca:	d8e8      	bhi.n	800ce9e <__gethex+0x206>
 800cecc:	2201      	movs	r2, #1
 800cece:	4628      	mov	r0, r5
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	f7ff fde9 	bl	800caa8 <strncmp>
 800ced6:	4926      	ldr	r1, [pc, #152]	; (800cf70 <__gethex+0x2d8>)
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d1df      	bne.n	800ce9e <__gethex+0x206>
 800cede:	e795      	b.n	800ce0c <__gethex+0x174>
 800cee0:	f04f 0b03 	mov.w	fp, #3
 800cee4:	e7c5      	b.n	800ce72 <__gethex+0x1da>
 800cee6:	da0b      	bge.n	800cf00 <__gethex+0x268>
 800cee8:	eba5 0800 	sub.w	r8, r5, r0
 800ceec:	4621      	mov	r1, r4
 800ceee:	4642      	mov	r2, r8
 800cef0:	4648      	mov	r0, r9
 800cef2:	f7fe f929 	bl	800b148 <__lshift>
 800cef6:	eba6 0608 	sub.w	r6, r6, r8
 800cefa:	4604      	mov	r4, r0
 800cefc:	f100 0a14 	add.w	sl, r0, #20
 800cf00:	f04f 0b00 	mov.w	fp, #0
 800cf04:	e7ba      	b.n	800ce7c <__gethex+0x1e4>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	42b3      	cmp	r3, r6
 800cf0a:	dd73      	ble.n	800cff4 <__gethex+0x35c>
 800cf0c:	1b9e      	subs	r6, r3, r6
 800cf0e:	42b5      	cmp	r5, r6
 800cf10:	dc34      	bgt.n	800cf7c <__gethex+0x2e4>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d023      	beq.n	800cf60 <__gethex+0x2c8>
 800cf18:	2b03      	cmp	r3, #3
 800cf1a:	d025      	beq.n	800cf68 <__gethex+0x2d0>
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d115      	bne.n	800cf4c <__gethex+0x2b4>
 800cf20:	42b5      	cmp	r5, r6
 800cf22:	d113      	bne.n	800cf4c <__gethex+0x2b4>
 800cf24:	2d01      	cmp	r5, #1
 800cf26:	d10b      	bne.n	800cf40 <__gethex+0x2a8>
 800cf28:	9a02      	ldr	r2, [sp, #8]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	2301      	movs	r3, #1
 800cf30:	6123      	str	r3, [r4, #16]
 800cf32:	f8ca 3000 	str.w	r3, [sl]
 800cf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf38:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cf3c:	601c      	str	r4, [r3, #0]
 800cf3e:	e735      	b.n	800cdac <__gethex+0x114>
 800cf40:	1e69      	subs	r1, r5, #1
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7fe fb32 	bl	800b5ac <__any_on>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d1ed      	bne.n	800cf28 <__gethex+0x290>
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f7fd fee0 	bl	800ad14 <_Bfree>
 800cf54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf56:	2300      	movs	r3, #0
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cf5e:	e725      	b.n	800cdac <__gethex+0x114>
 800cf60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1f2      	bne.n	800cf4c <__gethex+0x2b4>
 800cf66:	e7df      	b.n	800cf28 <__gethex+0x290>
 800cf68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1dc      	bne.n	800cf28 <__gethex+0x290>
 800cf6e:	e7ed      	b.n	800cf4c <__gethex+0x2b4>
 800cf70:	0800d6e4 	.word	0x0800d6e4
 800cf74:	0800d579 	.word	0x0800d579
 800cf78:	0800d88e 	.word	0x0800d88e
 800cf7c:	f106 38ff 	add.w	r8, r6, #4294967295
 800cf80:	f1bb 0f00 	cmp.w	fp, #0
 800cf84:	d133      	bne.n	800cfee <__gethex+0x356>
 800cf86:	f1b8 0f00 	cmp.w	r8, #0
 800cf8a:	d004      	beq.n	800cf96 <__gethex+0x2fe>
 800cf8c:	4641      	mov	r1, r8
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7fe fb0c 	bl	800b5ac <__any_on>
 800cf94:	4683      	mov	fp, r0
 800cf96:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cfa0:	f008 081f 	and.w	r8, r8, #31
 800cfa4:	fa03 f308 	lsl.w	r3, r3, r8
 800cfa8:	4213      	tst	r3, r2
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4620      	mov	r0, r4
 800cfae:	bf18      	it	ne
 800cfb0:	f04b 0b02 	orrne.w	fp, fp, #2
 800cfb4:	1bad      	subs	r5, r5, r6
 800cfb6:	f7ff fe07 	bl	800cbc8 <rshift>
 800cfba:	687e      	ldr	r6, [r7, #4]
 800cfbc:	f04f 0802 	mov.w	r8, #2
 800cfc0:	f1bb 0f00 	cmp.w	fp, #0
 800cfc4:	d04a      	beq.n	800d05c <__gethex+0x3c4>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d016      	beq.n	800cffa <__gethex+0x362>
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d018      	beq.n	800d002 <__gethex+0x36a>
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d109      	bne.n	800cfe8 <__gethex+0x350>
 800cfd4:	f01b 0f02 	tst.w	fp, #2
 800cfd8:	d006      	beq.n	800cfe8 <__gethex+0x350>
 800cfda:	f8da 3000 	ldr.w	r3, [sl]
 800cfde:	ea4b 0b03 	orr.w	fp, fp, r3
 800cfe2:	f01b 0f01 	tst.w	fp, #1
 800cfe6:	d10f      	bne.n	800d008 <__gethex+0x370>
 800cfe8:	f048 0810 	orr.w	r8, r8, #16
 800cfec:	e036      	b.n	800d05c <__gethex+0x3c4>
 800cfee:	f04f 0b01 	mov.w	fp, #1
 800cff2:	e7d0      	b.n	800cf96 <__gethex+0x2fe>
 800cff4:	f04f 0801 	mov.w	r8, #1
 800cff8:	e7e2      	b.n	800cfc0 <__gethex+0x328>
 800cffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cffc:	f1c3 0301 	rsb	r3, r3, #1
 800d000:	930f      	str	r3, [sp, #60]	; 0x3c
 800d002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0ef      	beq.n	800cfe8 <__gethex+0x350>
 800d008:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d00c:	f104 0214 	add.w	r2, r4, #20
 800d010:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d01a:	2300      	movs	r3, #0
 800d01c:	4694      	mov	ip, r2
 800d01e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d022:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d026:	d01e      	beq.n	800d066 <__gethex+0x3ce>
 800d028:	3101      	adds	r1, #1
 800d02a:	f8cc 1000 	str.w	r1, [ip]
 800d02e:	f1b8 0f02 	cmp.w	r8, #2
 800d032:	f104 0214 	add.w	r2, r4, #20
 800d036:	d13d      	bne.n	800d0b4 <__gethex+0x41c>
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	42ab      	cmp	r3, r5
 800d03e:	d10b      	bne.n	800d058 <__gethex+0x3c0>
 800d040:	1169      	asrs	r1, r5, #5
 800d042:	2301      	movs	r3, #1
 800d044:	f005 051f 	and.w	r5, r5, #31
 800d048:	fa03 f505 	lsl.w	r5, r3, r5
 800d04c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d050:	421d      	tst	r5, r3
 800d052:	bf18      	it	ne
 800d054:	f04f 0801 	movne.w	r8, #1
 800d058:	f048 0820 	orr.w	r8, r8, #32
 800d05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d05e:	601c      	str	r4, [r3, #0]
 800d060:	9b02      	ldr	r3, [sp, #8]
 800d062:	601e      	str	r6, [r3, #0]
 800d064:	e6a2      	b.n	800cdac <__gethex+0x114>
 800d066:	4290      	cmp	r0, r2
 800d068:	f842 3c04 	str.w	r3, [r2, #-4]
 800d06c:	d8d6      	bhi.n	800d01c <__gethex+0x384>
 800d06e:	68a2      	ldr	r2, [r4, #8]
 800d070:	4593      	cmp	fp, r2
 800d072:	db17      	blt.n	800d0a4 <__gethex+0x40c>
 800d074:	6861      	ldr	r1, [r4, #4]
 800d076:	4648      	mov	r0, r9
 800d078:	3101      	adds	r1, #1
 800d07a:	f7fd fe0b 	bl	800ac94 <_Balloc>
 800d07e:	4682      	mov	sl, r0
 800d080:	b918      	cbnz	r0, 800d08a <__gethex+0x3f2>
 800d082:	4b1b      	ldr	r3, [pc, #108]	; (800d0f0 <__gethex+0x458>)
 800d084:	4602      	mov	r2, r0
 800d086:	2184      	movs	r1, #132	; 0x84
 800d088:	e6b3      	b.n	800cdf2 <__gethex+0x15a>
 800d08a:	6922      	ldr	r2, [r4, #16]
 800d08c:	3202      	adds	r2, #2
 800d08e:	f104 010c 	add.w	r1, r4, #12
 800d092:	0092      	lsls	r2, r2, #2
 800d094:	300c      	adds	r0, #12
 800d096:	f7ff fd4b 	bl	800cb30 <memcpy>
 800d09a:	4621      	mov	r1, r4
 800d09c:	4648      	mov	r0, r9
 800d09e:	f7fd fe39 	bl	800ad14 <_Bfree>
 800d0a2:	4654      	mov	r4, sl
 800d0a4:	6922      	ldr	r2, [r4, #16]
 800d0a6:	1c51      	adds	r1, r2, #1
 800d0a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d0ac:	6121      	str	r1, [r4, #16]
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	6151      	str	r1, [r2, #20]
 800d0b2:	e7bc      	b.n	800d02e <__gethex+0x396>
 800d0b4:	6921      	ldr	r1, [r4, #16]
 800d0b6:	4559      	cmp	r1, fp
 800d0b8:	dd0b      	ble.n	800d0d2 <__gethex+0x43a>
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f7ff fd83 	bl	800cbc8 <rshift>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	3601      	adds	r6, #1
 800d0c6:	42b3      	cmp	r3, r6
 800d0c8:	f6ff aedb 	blt.w	800ce82 <__gethex+0x1ea>
 800d0cc:	f04f 0801 	mov.w	r8, #1
 800d0d0:	e7c2      	b.n	800d058 <__gethex+0x3c0>
 800d0d2:	f015 051f 	ands.w	r5, r5, #31
 800d0d6:	d0f9      	beq.n	800d0cc <__gethex+0x434>
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	441a      	add	r2, r3
 800d0dc:	f1c5 0520 	rsb	r5, r5, #32
 800d0e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d0e4:	f7fd fec8 	bl	800ae78 <__hi0bits>
 800d0e8:	42a8      	cmp	r0, r5
 800d0ea:	dbe6      	blt.n	800d0ba <__gethex+0x422>
 800d0ec:	e7ee      	b.n	800d0cc <__gethex+0x434>
 800d0ee:	bf00      	nop
 800d0f0:	0800d579 	.word	0x0800d579

0800d0f4 <L_shift>:
 800d0f4:	f1c2 0208 	rsb	r2, r2, #8
 800d0f8:	0092      	lsls	r2, r2, #2
 800d0fa:	b570      	push	{r4, r5, r6, lr}
 800d0fc:	f1c2 0620 	rsb	r6, r2, #32
 800d100:	6843      	ldr	r3, [r0, #4]
 800d102:	6804      	ldr	r4, [r0, #0]
 800d104:	fa03 f506 	lsl.w	r5, r3, r6
 800d108:	432c      	orrs	r4, r5
 800d10a:	40d3      	lsrs	r3, r2
 800d10c:	6004      	str	r4, [r0, #0]
 800d10e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d112:	4288      	cmp	r0, r1
 800d114:	d3f4      	bcc.n	800d100 <L_shift+0xc>
 800d116:	bd70      	pop	{r4, r5, r6, pc}

0800d118 <__match>:
 800d118:	b530      	push	{r4, r5, lr}
 800d11a:	6803      	ldr	r3, [r0, #0]
 800d11c:	3301      	adds	r3, #1
 800d11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d122:	b914      	cbnz	r4, 800d12a <__match+0x12>
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	2001      	movs	r0, #1
 800d128:	bd30      	pop	{r4, r5, pc}
 800d12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d132:	2d19      	cmp	r5, #25
 800d134:	bf98      	it	ls
 800d136:	3220      	addls	r2, #32
 800d138:	42a2      	cmp	r2, r4
 800d13a:	d0f0      	beq.n	800d11e <__match+0x6>
 800d13c:	2000      	movs	r0, #0
 800d13e:	e7f3      	b.n	800d128 <__match+0x10>

0800d140 <__hexnan>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	680b      	ldr	r3, [r1, #0]
 800d146:	6801      	ldr	r1, [r0, #0]
 800d148:	115e      	asrs	r6, r3, #5
 800d14a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d14e:	f013 031f 	ands.w	r3, r3, #31
 800d152:	b087      	sub	sp, #28
 800d154:	bf18      	it	ne
 800d156:	3604      	addne	r6, #4
 800d158:	2500      	movs	r5, #0
 800d15a:	1f37      	subs	r7, r6, #4
 800d15c:	4682      	mov	sl, r0
 800d15e:	4690      	mov	r8, r2
 800d160:	9301      	str	r3, [sp, #4]
 800d162:	f846 5c04 	str.w	r5, [r6, #-4]
 800d166:	46b9      	mov	r9, r7
 800d168:	463c      	mov	r4, r7
 800d16a:	9502      	str	r5, [sp, #8]
 800d16c:	46ab      	mov	fp, r5
 800d16e:	784a      	ldrb	r2, [r1, #1]
 800d170:	1c4b      	adds	r3, r1, #1
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	b342      	cbz	r2, 800d1c8 <__hexnan+0x88>
 800d176:	4610      	mov	r0, r2
 800d178:	9105      	str	r1, [sp, #20]
 800d17a:	9204      	str	r2, [sp, #16]
 800d17c:	f7ff fd76 	bl	800cc6c <__hexdig_fun>
 800d180:	2800      	cmp	r0, #0
 800d182:	d14f      	bne.n	800d224 <__hexnan+0xe4>
 800d184:	9a04      	ldr	r2, [sp, #16]
 800d186:	9905      	ldr	r1, [sp, #20]
 800d188:	2a20      	cmp	r2, #32
 800d18a:	d818      	bhi.n	800d1be <__hexnan+0x7e>
 800d18c:	9b02      	ldr	r3, [sp, #8]
 800d18e:	459b      	cmp	fp, r3
 800d190:	dd13      	ble.n	800d1ba <__hexnan+0x7a>
 800d192:	454c      	cmp	r4, r9
 800d194:	d206      	bcs.n	800d1a4 <__hexnan+0x64>
 800d196:	2d07      	cmp	r5, #7
 800d198:	dc04      	bgt.n	800d1a4 <__hexnan+0x64>
 800d19a:	462a      	mov	r2, r5
 800d19c:	4649      	mov	r1, r9
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f7ff ffa8 	bl	800d0f4 <L_shift>
 800d1a4:	4544      	cmp	r4, r8
 800d1a6:	d950      	bls.n	800d24a <__hexnan+0x10a>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f1a4 0904 	sub.w	r9, r4, #4
 800d1ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1b2:	f8cd b008 	str.w	fp, [sp, #8]
 800d1b6:	464c      	mov	r4, r9
 800d1b8:	461d      	mov	r5, r3
 800d1ba:	9903      	ldr	r1, [sp, #12]
 800d1bc:	e7d7      	b.n	800d16e <__hexnan+0x2e>
 800d1be:	2a29      	cmp	r2, #41	; 0x29
 800d1c0:	d155      	bne.n	800d26e <__hexnan+0x12e>
 800d1c2:	3102      	adds	r1, #2
 800d1c4:	f8ca 1000 	str.w	r1, [sl]
 800d1c8:	f1bb 0f00 	cmp.w	fp, #0
 800d1cc:	d04f      	beq.n	800d26e <__hexnan+0x12e>
 800d1ce:	454c      	cmp	r4, r9
 800d1d0:	d206      	bcs.n	800d1e0 <__hexnan+0xa0>
 800d1d2:	2d07      	cmp	r5, #7
 800d1d4:	dc04      	bgt.n	800d1e0 <__hexnan+0xa0>
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4649      	mov	r1, r9
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f7ff ff8a 	bl	800d0f4 <L_shift>
 800d1e0:	4544      	cmp	r4, r8
 800d1e2:	d934      	bls.n	800d24e <__hexnan+0x10e>
 800d1e4:	f1a8 0204 	sub.w	r2, r8, #4
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800d1ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800d1f2:	429f      	cmp	r7, r3
 800d1f4:	d2f9      	bcs.n	800d1ea <__hexnan+0xaa>
 800d1f6:	1b3b      	subs	r3, r7, r4
 800d1f8:	f023 0303 	bic.w	r3, r3, #3
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	3e03      	subs	r6, #3
 800d200:	3401      	adds	r4, #1
 800d202:	42a6      	cmp	r6, r4
 800d204:	bf38      	it	cc
 800d206:	2304      	movcc	r3, #4
 800d208:	4443      	add	r3, r8
 800d20a:	2200      	movs	r2, #0
 800d20c:	f843 2b04 	str.w	r2, [r3], #4
 800d210:	429f      	cmp	r7, r3
 800d212:	d2fb      	bcs.n	800d20c <__hexnan+0xcc>
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	b91b      	cbnz	r3, 800d220 <__hexnan+0xe0>
 800d218:	4547      	cmp	r7, r8
 800d21a:	d126      	bne.n	800d26a <__hexnan+0x12a>
 800d21c:	2301      	movs	r3, #1
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	2005      	movs	r0, #5
 800d222:	e025      	b.n	800d270 <__hexnan+0x130>
 800d224:	3501      	adds	r5, #1
 800d226:	2d08      	cmp	r5, #8
 800d228:	f10b 0b01 	add.w	fp, fp, #1
 800d22c:	dd06      	ble.n	800d23c <__hexnan+0xfc>
 800d22e:	4544      	cmp	r4, r8
 800d230:	d9c3      	bls.n	800d1ba <__hexnan+0x7a>
 800d232:	2300      	movs	r3, #0
 800d234:	f844 3c04 	str.w	r3, [r4, #-4]
 800d238:	2501      	movs	r5, #1
 800d23a:	3c04      	subs	r4, #4
 800d23c:	6822      	ldr	r2, [r4, #0]
 800d23e:	f000 000f 	and.w	r0, r0, #15
 800d242:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d246:	6020      	str	r0, [r4, #0]
 800d248:	e7b7      	b.n	800d1ba <__hexnan+0x7a>
 800d24a:	2508      	movs	r5, #8
 800d24c:	e7b5      	b.n	800d1ba <__hexnan+0x7a>
 800d24e:	9b01      	ldr	r3, [sp, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d0df      	beq.n	800d214 <__hexnan+0xd4>
 800d254:	f1c3 0320 	rsb	r3, r3, #32
 800d258:	f04f 32ff 	mov.w	r2, #4294967295
 800d25c:	40da      	lsrs	r2, r3
 800d25e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d262:	4013      	ands	r3, r2
 800d264:	f846 3c04 	str.w	r3, [r6, #-4]
 800d268:	e7d4      	b.n	800d214 <__hexnan+0xd4>
 800d26a:	3f04      	subs	r7, #4
 800d26c:	e7d2      	b.n	800d214 <__hexnan+0xd4>
 800d26e:	2004      	movs	r0, #4
 800d270:	b007      	add	sp, #28
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d276 <__ascii_mbtowc>:
 800d276:	b082      	sub	sp, #8
 800d278:	b901      	cbnz	r1, 800d27c <__ascii_mbtowc+0x6>
 800d27a:	a901      	add	r1, sp, #4
 800d27c:	b142      	cbz	r2, 800d290 <__ascii_mbtowc+0x1a>
 800d27e:	b14b      	cbz	r3, 800d294 <__ascii_mbtowc+0x1e>
 800d280:	7813      	ldrb	r3, [r2, #0]
 800d282:	600b      	str	r3, [r1, #0]
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	1e10      	subs	r0, r2, #0
 800d288:	bf18      	it	ne
 800d28a:	2001      	movne	r0, #1
 800d28c:	b002      	add	sp, #8
 800d28e:	4770      	bx	lr
 800d290:	4610      	mov	r0, r2
 800d292:	e7fb      	b.n	800d28c <__ascii_mbtowc+0x16>
 800d294:	f06f 0001 	mvn.w	r0, #1
 800d298:	e7f8      	b.n	800d28c <__ascii_mbtowc+0x16>

0800d29a <_realloc_r>:
 800d29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	460e      	mov	r6, r1
 800d2a4:	b921      	cbnz	r1, 800d2b0 <_realloc_r+0x16>
 800d2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	f7fd bc66 	b.w	800ab7c <_malloc_r>
 800d2b0:	b92a      	cbnz	r2, 800d2be <_realloc_r+0x24>
 800d2b2:	f7fd fbef 	bl	800aa94 <_free_r>
 800d2b6:	4625      	mov	r5, r4
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2be:	f000 f842 	bl	800d346 <_malloc_usable_size_r>
 800d2c2:	4284      	cmp	r4, r0
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	d802      	bhi.n	800d2ce <_realloc_r+0x34>
 800d2c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2cc:	d812      	bhi.n	800d2f4 <_realloc_r+0x5a>
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	f7fd fc53 	bl	800ab7c <_malloc_r>
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d0ed      	beq.n	800d2b8 <_realloc_r+0x1e>
 800d2dc:	42bc      	cmp	r4, r7
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	bf28      	it	cs
 800d2e4:	463a      	movcs	r2, r7
 800d2e6:	f7ff fc23 	bl	800cb30 <memcpy>
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	f7fd fbd1 	bl	800aa94 <_free_r>
 800d2f2:	e7e1      	b.n	800d2b8 <_realloc_r+0x1e>
 800d2f4:	4635      	mov	r5, r6
 800d2f6:	e7df      	b.n	800d2b8 <_realloc_r+0x1e>

0800d2f8 <__ascii_wctomb>:
 800d2f8:	b149      	cbz	r1, 800d30e <__ascii_wctomb+0x16>
 800d2fa:	2aff      	cmp	r2, #255	; 0xff
 800d2fc:	bf85      	ittet	hi
 800d2fe:	238a      	movhi	r3, #138	; 0x8a
 800d300:	6003      	strhi	r3, [r0, #0]
 800d302:	700a      	strbls	r2, [r1, #0]
 800d304:	f04f 30ff 	movhi.w	r0, #4294967295
 800d308:	bf98      	it	ls
 800d30a:	2001      	movls	r0, #1
 800d30c:	4770      	bx	lr
 800d30e:	4608      	mov	r0, r1
 800d310:	4770      	bx	lr
	...

0800d314 <fiprintf>:
 800d314:	b40e      	push	{r1, r2, r3}
 800d316:	b503      	push	{r0, r1, lr}
 800d318:	4601      	mov	r1, r0
 800d31a:	ab03      	add	r3, sp, #12
 800d31c:	4805      	ldr	r0, [pc, #20]	; (800d334 <fiprintf+0x20>)
 800d31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d322:	6800      	ldr	r0, [r0, #0]
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	f7ff f97b 	bl	800c620 <_vfiprintf_r>
 800d32a:	b002      	add	sp, #8
 800d32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d330:	b003      	add	sp, #12
 800d332:	4770      	bx	lr
 800d334:	20000064 	.word	0x20000064

0800d338 <abort>:
 800d338:	b508      	push	{r3, lr}
 800d33a:	2006      	movs	r0, #6
 800d33c:	f000 f834 	bl	800d3a8 <raise>
 800d340:	2001      	movs	r0, #1
 800d342:	f7f4 fcf3 	bl	8001d2c <_exit>

0800d346 <_malloc_usable_size_r>:
 800d346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d34a:	1f18      	subs	r0, r3, #4
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfbc      	itt	lt
 800d350:	580b      	ldrlt	r3, [r1, r0]
 800d352:	18c0      	addlt	r0, r0, r3
 800d354:	4770      	bx	lr

0800d356 <_raise_r>:
 800d356:	291f      	cmp	r1, #31
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4604      	mov	r4, r0
 800d35c:	460d      	mov	r5, r1
 800d35e:	d904      	bls.n	800d36a <_raise_r+0x14>
 800d360:	2316      	movs	r3, #22
 800d362:	6003      	str	r3, [r0, #0]
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	bd38      	pop	{r3, r4, r5, pc}
 800d36a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d36c:	b112      	cbz	r2, 800d374 <_raise_r+0x1e>
 800d36e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d372:	b94b      	cbnz	r3, 800d388 <_raise_r+0x32>
 800d374:	4620      	mov	r0, r4
 800d376:	f000 f831 	bl	800d3dc <_getpid_r>
 800d37a:	462a      	mov	r2, r5
 800d37c:	4601      	mov	r1, r0
 800d37e:	4620      	mov	r0, r4
 800d380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d384:	f000 b818 	b.w	800d3b8 <_kill_r>
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d00a      	beq.n	800d3a2 <_raise_r+0x4c>
 800d38c:	1c59      	adds	r1, r3, #1
 800d38e:	d103      	bne.n	800d398 <_raise_r+0x42>
 800d390:	2316      	movs	r3, #22
 800d392:	6003      	str	r3, [r0, #0]
 800d394:	2001      	movs	r0, #1
 800d396:	e7e7      	b.n	800d368 <_raise_r+0x12>
 800d398:	2400      	movs	r4, #0
 800d39a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d39e:	4628      	mov	r0, r5
 800d3a0:	4798      	blx	r3
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e7e0      	b.n	800d368 <_raise_r+0x12>
	...

0800d3a8 <raise>:
 800d3a8:	4b02      	ldr	r3, [pc, #8]	; (800d3b4 <raise+0xc>)
 800d3aa:	4601      	mov	r1, r0
 800d3ac:	6818      	ldr	r0, [r3, #0]
 800d3ae:	f7ff bfd2 	b.w	800d356 <_raise_r>
 800d3b2:	bf00      	nop
 800d3b4:	20000064 	.word	0x20000064

0800d3b8 <_kill_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d07      	ldr	r5, [pc, #28]	; (800d3d8 <_kill_r+0x20>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	602b      	str	r3, [r5, #0]
 800d3c6:	f7f4 fca1 	bl	8001d0c <_kill>
 800d3ca:	1c43      	adds	r3, r0, #1
 800d3cc:	d102      	bne.n	800d3d4 <_kill_r+0x1c>
 800d3ce:	682b      	ldr	r3, [r5, #0]
 800d3d0:	b103      	cbz	r3, 800d3d4 <_kill_r+0x1c>
 800d3d2:	6023      	str	r3, [r4, #0]
 800d3d4:	bd38      	pop	{r3, r4, r5, pc}
 800d3d6:	bf00      	nop
 800d3d8:	200006d4 	.word	0x200006d4

0800d3dc <_getpid_r>:
 800d3dc:	f7f4 bc8e 	b.w	8001cfc <_getpid>

0800d3e0 <_init>:
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	bf00      	nop
 800d3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3e6:	bc08      	pop	{r3}
 800d3e8:	469e      	mov	lr, r3
 800d3ea:	4770      	bx	lr

0800d3ec <_fini>:
 800d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ee:	bf00      	nop
 800d3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f2:	bc08      	pop	{r3}
 800d3f4:	469e      	mov	lr, r3
 800d3f6:	4770      	bx	lr
