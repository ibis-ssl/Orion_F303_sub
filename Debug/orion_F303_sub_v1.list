
orion_F303_sub_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  0800e520  0800e520  0001e520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7e0  0800f7e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f7e0  0800f7e0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f7e0  0800f7e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7e0  0800f7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000096c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b48  20000b48  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019d02  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d82  00000000  00000000  00039f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001540  00000000  00000000  0003dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001078  00000000  00000000  0003f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b72  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ec0c  00000000  00000000  00061e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5d11  00000000  00000000  00080a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d50  00000000  00000000  00146720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0014d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e508 	.word	0x0800e508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800e508 	.word	0x0800e508

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d72:	f001 ff9d 	bl	8002cb0 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f001 f8b9 	bl	8001ef2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000d8c:	f002 fdf0 	bl	8003970 <HAL_ADCEx_MultiModeConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f001 f8ac 	bl	8001ef2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000da6:	2306      	movs	r3, #6
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_ADC1_Init+0xdc>)
 8000db8:	f002 faf0 	bl	800339c <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dc2:	f001 f896 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001f8 	.word	0x200001f8

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_ADC2_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e44:	f001 ff34 	bl	8002cb0 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000e4e:	f001 f850 	bl	8001ef2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e52:	230c      	movs	r3, #12
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC2_Init+0xb4>)
 8000e70:	f002 fa94 	bl	800339c <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e7a:	f001 f83a 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000248 	.word	0x20000248
 8000e8c:	50000100 	.word	0x50000100

08000e90 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb0:	d12e      	bne.n	8000f10 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f004 f8af 	bl	800506c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f0e:	e031      	b.n	8000f74 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f004 f87c 	bl	800506c <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000298 	.word	0x20000298
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000100 	.word	0x50000100
 8000f88:	48000400 	.word	0x48000400

08000f8c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_CAN_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fb2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000fb6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_CAN_Init+0x64>)
 8000fde:	f002 fe83 	bl	8003ce8 <HAL_CAN_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 ff83 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d131      	bne.n	800107e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_CAN_MspInit+0x94>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f003 ffff 	bl	800506c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2014      	movs	r0, #20
 8001074:	f003 fd99 	bl	8004baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001078:	2014      	movs	r0, #20
 800107a:	f003 fdb2 	bl	8004be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  sFilterConfig.FilterIdHigh = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /*
  sFilterConfig.FilterIdHigh = (0x104) << 5;
  sFilterConfig.FilterIdLow = (0x105) << 5;
  sFilterConfig.FilterMaskIdHigh = (0x100) << 5;
  sFilterConfig.FilterMaskIdLow = (0x101) << 5;*/
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010c4:	f002 ff0b 	bl	8003ede <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Filter_Init+0x42>
  {
    Error_Handler();
 80010ce:	f000 ff10 	bl	8001ef2 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010d2:	2102      	movs	r1, #2
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <CAN_Filter_Init+0x5c>)
 80010d6:	f003 fa37 	bl	8004548 <HAL_CAN_ActivateNotification>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CAN_Filter_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 ff07 	bl	8001ef2 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000029c 	.word	0x2000029c

080010f0 <can_send>:

void can_send(uint32_t can_id, can_msg_buf_t msg)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	e883 0006 	stmia.w	r3, {r1, r2}
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	61bb      	str	r3, [r7, #24]
  can_header.ExtId = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  can_header.RTR = CAN_RTR_DATA;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  can_header.DLC = 8;
 800110a:	2308      	movs	r3, #8
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  can_header.IDE = CAN_ID_STD;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  can_header.TransmitGlobalTime = DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	f107 0118 	add.w	r1, r7, #24
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <can_send+0x40>)
 8001124:	f002 ffe9 	bl	80040fa <HAL_CAN_AddTxMessage>
  }
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000029c 	.word	0x2000029c

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_DMA_Init+0x38>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <MX_DMA_Init+0x38>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_DMA_Init+0x38>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	200e      	movs	r0, #14
 8001158:	f003 fd27 	bl	8004baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800115c:	200e      	movs	r0, #14
 800115e:	f003 fd40 	bl	8004be2 <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <MX_GPIO_Init+0x134>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <MX_GPIO_Init+0x134>)
 800118c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <MX_GPIO_Init+0x134>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a34      	ldr	r2, [pc, #208]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <MX_GPIO_Init+0x134>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011ec:	482e      	ldr	r0, [pc, #184]	; (80012a8 <MX_GPIO_Init+0x138>)
 80011ee:	f004 f8cf 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	21c1      	movs	r1, #193	; 0xc1
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f004 f8c9 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f246 0140 	movw	r1, #24640	; 0x6040
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <MX_GPIO_Init+0x13c>)
 8001206:	f004 f8c3 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 800120a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4821      	ldr	r0, [pc, #132]	; (80012a8 <MX_GPIO_Init+0x138>)
 8001224:	f003 ff22 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EX_GPIO_4_Pin|LED_3_Pin|LED_4_Pin;
 8001228:	23c1      	movs	r3, #193	; 0xc1
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f003 ff13 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW_3_Pin|SW_1_Pin;
 8001246:	f44f 7384 	mov.w	r3, #264	; 0x108
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f003 ff05 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_2_Pin|SW_0_Pin;
 8001262:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_GPIO_Init+0x13c>)
 8001278:	f003 fef8 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_0_Pin|PHOTO_1_Pin|EX_GPIO_3_Pin;
 800127c:	f246 0340 	movw	r3, #24640	; 0x6040
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_GPIO_Init+0x13c>)
 8001296:	f003 fee9 	bl	800506c <HAL_GPIO_Init>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000400 	.word	0x48000400

080012b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_I2C1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_I2C1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_I2C1_Init+0x74>)
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <MX_I2C1_Init+0x7c>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ec:	f004 f868 	bl	80053c0 <HAL_I2C_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f6:	f000 fdfc 	bl	8001ef2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_I2C1_Init+0x74>)
 80012fe:	f004 fc67 	bl	8005bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 fdf3 	bl	8001ef2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_I2C1_Init+0x74>)
 8001310:	f004 fca9 	bl	8005c66 <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 fdea 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002c4 	.word	0x200002c4
 8001328:	40005400 	.word	0x40005400
 800132c:	2000090e 	.word	0x2000090e

08001330 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_I2C_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d128      	bne.n	80013a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137c:	2304      	movs	r3, #4
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 8001388:	f003 fe70 	bl	800506c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	61d3      	str	r3, [r2, #28]
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_I2C_MspInit+0x80>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <lcdInit>:
#define LCD_LINE_0 (0)
#define LCD_LINE_1 (22)
#define LCD_LINE_2 (44)

void lcdInit(I2C_HandleTypeDef * i2ch)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  ssd1306_Init(i2ch);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fdb3 	bl	8001f2c <ssd1306_Init>
  ssd1306_SetCursor(0, LCD_LINE_0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2000      	movs	r0, #0
 80013ca:	f001 f82b 	bl	8002424 <ssd1306_SetCursor>
  char buf[50] = {0};
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	222e      	movs	r2, #46	; 0x2e
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f009 fc5b 	bl	800ac96 <memset>
  sprintf(buf, "OrionSub V4");
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	491a      	ldr	r1, [pc, #104]	; (8001450 <lcdInit+0x98>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 fbf2 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <lcdInit+0x9c>)
 80013ee:	f107 000c 	add.w	r0, r7, #12
 80013f2:	2301      	movs	r3, #1
 80013f4:	ca06      	ldmia	r2, {r1, r2}
 80013f6:	f000 ffef 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_1);
 80013fa:	2116      	movs	r1, #22
 80013fc:	2000      	movs	r0, #0
 80013fe:	f001 f811 	bl	8002424 <ssd1306_SetCursor>
  sprintf(buf, "%s", __DATE__);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <lcdInit+0xa0>)
 8001408:	4914      	ldr	r1, [pc, #80]	; (800145c <lcdInit+0xa4>)
 800140a:	4618      	mov	r0, r3
 800140c:	f009 fbe0 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 8001410:	4a10      	ldr	r2, [pc, #64]	; (8001454 <lcdInit+0x9c>)
 8001412:	f107 000c 	add.w	r0, r7, #12
 8001416:	2301      	movs	r3, #1
 8001418:	ca06      	ldmia	r2, {r1, r2}
 800141a:	f000 ffdd 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_2);
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	2000      	movs	r0, #0
 8001422:	f000 ffff 	bl	8002424 <ssd1306_SetCursor>
  sprintf(buf, "%s", __TIME__);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <lcdInit+0xa8>)
 800142c:	490b      	ldr	r1, [pc, #44]	; (800145c <lcdInit+0xa4>)
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fbce 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <lcdInit+0x9c>)
 8001436:	f107 000c 	add.w	r0, r7, #12
 800143a:	2301      	movs	r3, #1
 800143c:	ca06      	ldmia	r2, {r1, r2}
 800143e:	f000 ffcb 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_UpdateScreen(i2ch);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 feb6 	bl	80021b4 <ssd1306_UpdateScreen>
}
 8001448:	bf00      	nop
 800144a:	3740      	adds	r7, #64	; 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0800e520 	.word	0x0800e520
 8001454:	20000000 	.word	0x20000000
 8001458:	0800e52c 	.word	0x0800e52c
 800145c:	0800e538 	.word	0x0800e538
 8001460:	0800e53c 	.word	0x0800e53c

08001464 <lcdPrint>:

void lcdPrint(I2C_HandleTypeDef * i2ch, float batt_v, int can_rx, int ball_0, int ball_1)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b096      	sub	sp, #88	; 0x58
 8001468:	af02      	add	r7, sp, #8
 800146a:	6178      	str	r0, [r7, #20]
 800146c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001470:	60f9      	str	r1, [r7, #12]
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
  ssd1306_Fill(Black);
 8001476:	2000      	movs	r0, #0
 8001478:	f000 fe78 	bl	800216c <ssd1306_Fill>
  char buf[50] = {0};
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	222e      	movs	r2, #46	; 0x2e
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f009 fc04 	bl	800ac96 <memset>

  ssd1306_SetCursor(0, LCD_LINE_0);
 800148e:	2100      	movs	r1, #0
 8001490:	2000      	movs	r0, #0
 8001492:	f000 ffc7 	bl	8002424 <ssd1306_SetCursor>
  sprintf(buf, "%3.1fV %3d", batt_v, can_rx);
 8001496:	6938      	ldr	r0, [r7, #16]
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f107 001c 	add.w	r0, r7, #28
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	9100      	str	r1, [sp, #0]
 80014a8:	4919      	ldr	r1, [pc, #100]	; (8001510 <lcdPrint+0xac>)
 80014aa:	f009 fb91 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <lcdPrint+0xb0>)
 80014b0:	f107 001c 	add.w	r0, r7, #28
 80014b4:	2301      	movs	r3, #1
 80014b6:	ca06      	ldmia	r2, {r1, r2}
 80014b8:	f000 ff8e 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_1);
 80014bc:	2116      	movs	r1, #22
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 ffb0 	bl	8002424 <ssd1306_SetCursor>
  sprintf(buf, "%+4d %+4d", ball_0, ball_1);
 80014c4:	f107 001c 	add.w	r0, r7, #28
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <lcdPrint+0xb4>)
 80014ce:	f009 fb7f 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <lcdPrint+0xb0>)
 80014d4:	f107 001c 	add.w	r0, r7, #28
 80014d8:	2301      	movs	r3, #1
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	f000 ff7c 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_SetCursor(0, LCD_LINE_2);
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 ff9e 	bl	8002424 <ssd1306_SetCursor>
  sprintf(buf, "push4update");
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	490b      	ldr	r1, [pc, #44]	; (800151c <lcdPrint+0xb8>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f009 fb6e 	bl	800abd0 <siprintf>
  ssd1306_WriteString(buf, Font_11x18, White);
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <lcdPrint+0xb0>)
 80014f6:	f107 001c 	add.w	r0, r7, #28
 80014fa:	2301      	movs	r3, #1
 80014fc:	ca06      	ldmia	r2, {r1, r2}
 80014fe:	f000 ff6b 	bl	80023d8 <ssd1306_WriteString>

  ssd1306_UpdateScreen(i2ch);
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f000 fe56 	bl	80021b4 <ssd1306_UpdateScreen>
 8001508:	bf00      	nop
 800150a:	3750      	adds	r7, #80	; 0x50
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800e548 	.word	0x0800e548
 8001514:	20000000 	.word	0x20000000
 8001518:	0800e554 	.word	0x0800e554
 800151c:	0800e560 	.word	0x0800e560

08001520 <parseTelemetryCmt>:
} tlm_msg;
volatile int16_t tmp = 0;
volatile uint32_t tlm_rx_idx = 0;

void parseTelemetryCmt(uint8_t rx_data)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  switch (tlm_rx_idx) {
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <parseTelemetryCmt+0x17c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b09      	cmp	r3, #9
 8001530:	f200 80a8 	bhi.w	8001684 <parseTelemetryCmt+0x164>
 8001534:	a201      	add	r2, pc, #4	; (adr r2, 800153c <parseTelemetryCmt+0x1c>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	08001565 	.word	0x08001565
 8001540:	0800157f 	.word	0x0800157f
 8001544:	08001595 	.word	0x08001595
 8001548:	080015bd 	.word	0x080015bd
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015fb 	.word	0x080015fb
 8001554:	08001611 	.word	0x08001611
 8001558:	08001639 	.word	0x08001639
 800155c:	0800164f 	.word	0x0800164f
 8001560:	08001677 	.word	0x08001677
    case 0:
      if (rx_data == 0x2c || rx_data == 0x2d) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b2c      	cmp	r3, #44	; 0x2c
 8001568:	d003      	beq.n	8001572 <parseTelemetryCmt+0x52>
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b2d      	cmp	r3, #45	; 0x2d
 800156e:	f040 808d 	bne.w	800168c <parseTelemetryCmt+0x16c>
        tlm_rx_idx++;
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <parseTelemetryCmt+0x17c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a48      	ldr	r2, [pc, #288]	; (800169c <parseTelemetryCmt+0x17c>)
 800157a:	6013      	str	r3, [r2, #0]
      }
      break;
 800157c:	e086      	b.n	800168c <parseTelemetryCmt+0x16c>
    case 1:
      tmp = rx_data << 8;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001586:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001588:	4b44      	ldr	r3, [pc, #272]	; (800169c <parseTelemetryCmt+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a43      	ldr	r2, [pc, #268]	; (800169c <parseTelemetryCmt+0x17c>)
 8001590:	6013      	str	r3, [r2, #0]
      break;
 8001592:	e07c      	b.n	800168e <parseTelemetryCmt+0x16e>
    case 2:
      tmp |= rx_data;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <parseTelemetryCmt+0x180>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015a4:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_1 = tmp;
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <parseTelemetryCmt+0x184>)
 80015ae:	805a      	strh	r2, [r3, #2]
      tlm_rx_idx++;
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <parseTelemetryCmt+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4a39      	ldr	r2, [pc, #228]	; (800169c <parseTelemetryCmt+0x17c>)
 80015b8:	6013      	str	r3, [r2, #0]
      break;
 80015ba:	e068      	b.n	800168e <parseTelemetryCmt+0x16e>

    case 3:
      tmp = rx_data << 8;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015c4:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <parseTelemetryCmt+0x17c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <parseTelemetryCmt+0x17c>)
 80015ce:	6013      	str	r3, [r2, #0]
      break;
 80015d0:	e05d      	b.n	800168e <parseTelemetryCmt+0x16e>
    case 4:
      tmp |= rx_data;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015e2:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_2 = tmp;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <parseTelemetryCmt+0x180>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <parseTelemetryCmt+0x184>)
 80015ec:	809a      	strh	r2, [r3, #4]
      tlm_rx_idx++;
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <parseTelemetryCmt+0x17c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <parseTelemetryCmt+0x17c>)
 80015f6:	6013      	str	r3, [r2, #0]
      break;
 80015f8:	e049      	b.n	800168e <parseTelemetryCmt+0x16e>

    case 5:
      tmp = rx_data << 8;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001602:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <parseTelemetryCmt+0x17c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <parseTelemetryCmt+0x17c>)
 800160c:	6013      	str	r3, [r2, #0]
      break;
 800160e:	e03e      	b.n	800168e <parseTelemetryCmt+0x16e>
    case 6:
      tmp |= rx_data;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001620:	801a      	strh	r2, [r3, #0]
      tlm_msg.head_3 = tmp;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <parseTelemetryCmt+0x184>)
 800162a:	80da      	strh	r2, [r3, #6]
      tlm_rx_idx++;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <parseTelemetryCmt+0x17c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <parseTelemetryCmt+0x17c>)
 8001634:	6013      	str	r3, [r2, #0]
      break;
 8001636:	e02a      	b.n	800168e <parseTelemetryCmt+0x16e>

    case 7:
      tmp = rx_data << 8;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001640:	801a      	strh	r2, [r3, #0]
      tlm_rx_idx++;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <parseTelemetryCmt+0x17c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <parseTelemetryCmt+0x17c>)
 800164a:	6013      	str	r3, [r2, #0]
      break;
 800164c:	e01f      	b.n	800168e <parseTelemetryCmt+0x16e>
    case 8:
      tmp |= rx_data;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <parseTelemetryCmt+0x180>)
 800165e:	801a      	strh	r2, [r3, #0]
      tlm_msg.speed = tmp;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <parseTelemetryCmt+0x180>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <parseTelemetryCmt+0x184>)
 8001668:	811a      	strh	r2, [r3, #8]
      tlm_rx_idx++;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <parseTelemetryCmt+0x17c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <parseTelemetryCmt+0x17c>)
 8001672:	6013      	str	r3, [r2, #0]
      break;
 8001674:	e00b      	b.n	800168e <parseTelemetryCmt+0x16e>

    case 9:
      tlm_msg.sum = rx_data;
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <parseTelemetryCmt+0x184>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	7293      	strb	r3, [r2, #10]
      tlm_rx_idx = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <parseTelemetryCmt+0x17c>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
      break;
 8001682:	e004      	b.n	800168e <parseTelemetryCmt+0x16e>

    default:
      tlm_rx_idx = 0;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <parseTelemetryCmt+0x17c>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
      break;
 800168a:	e000      	b.n	800168e <parseTelemetryCmt+0x16e>
      break;
 800168c:	bf00      	nop
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000328 	.word	0x20000328
 80016a0:	20000324 	.word	0x20000324
 80016a4:	20000318 	.word	0x20000318

080016a8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char * ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len);  // 2ms
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <_write+0x24>)
 80016be:	f007 f875 	bl	80087ac <HAL_UART_Transmit_DMA>
  return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200008a4 	.word	0x200008a4

080016d0 <HAL_UART_RxCpltCallback>:
uint8_t uart3_rx_buf[10] = {0}, esc_tlm_buf[ESC_TLM_BUF_SIZE];
volatile bool uart_rx_flag = false, uart3_rx_flag = false;
volatile uint32_t uart_rx_cnt = 0, uart3_rx_cnt = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_UART_RxCpltCallback+0x70>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10d      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x2e>
    uart_rx_flag = true;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_UART_RxCpltCallback+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    uart_rx_cnt++;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_RxCpltCallback+0x78>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_UART_RxCpltCallback+0x78>)
 80016f0:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	4915      	ldr	r1, [pc, #84]	; (800174c <HAL_UART_RxCpltCallback+0x7c>)
 80016f6:	4816      	ldr	r0, [pc, #88]	; (8001750 <HAL_UART_RxCpltCallback+0x80>)
 80016f8:	f007 f814 	bl	8008724 <HAL_UART_Receive_IT>
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
    uart3_rx_cnt++;
    parseTelemetryCmt(uart3_rx_buf[0]);
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
  }
}
 80016fc:	e01c      	b.n	8001738 <HAL_UART_RxCpltCallback+0x68>
  } else if (huart->Instance == USART3) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a14      	ldr	r2, [pc, #80]	; (8001754 <HAL_UART_RxCpltCallback+0x84>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d117      	bne.n	8001738 <HAL_UART_RxCpltCallback+0x68>
    uart3_rx_flag = true;
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_UART_RxCpltCallback+0x88>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    esc_tlm_buf[uart3_rx_cnt] = uart3_rx_buf[0];
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_UART_RxCpltCallback+0x8c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001714:	7811      	ldrb	r1, [r2, #0]
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_UART_RxCpltCallback+0x94>)
 8001718:	54d1      	strb	r1, [r2, r3]
    uart3_rx_cnt++;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_UART_RxCpltCallback+0x8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_UART_RxCpltCallback+0x8c>)
 8001722:	6013      	str	r3, [r2, #0]
    parseTelemetryCmt(uart3_rx_buf[0]);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fef9 	bl	8001520 <parseTelemetryCmt>
    HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 800172e:	2201      	movs	r2, #1
 8001730:	490b      	ldr	r1, [pc, #44]	; (8001760 <HAL_UART_RxCpltCallback+0x90>)
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <HAL_UART_RxCpltCallback+0x98>)
 8001734:	f006 fff6 	bl	8008724 <HAL_UART_Receive_IT>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013800 	.word	0x40013800
 8001744:	200003a8 	.word	0x200003a8
 8001748:	200003ac 	.word	0x200003ac
 800174c:	2000032c 	.word	0x2000032c
 8001750:	200008a4 	.word	0x200008a4
 8001754:	40004800 	.word	0x40004800
 8001758:	200003a9 	.word	0x200003a9
 800175c:	200003b0 	.word	0x200003b0
 8001760:	20000338 	.word	0x20000338
 8001764:	20000344 	.word	0x20000344
 8001768:	2000092c 	.word	0x2000092c

0800176c <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile float serv_angle = 0, dribbler_speed = 0;
volatile int servo_timeout_cnt = 0, dribbler_timeout_cnt = 0;
volatile float battery_voltage = 0;
volatile uint32_t can_rx_cnt = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  can_msg_buf_t can_rx_buf;
  CAN_RxHeaderTypeDef can_rx_header;
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	2100      	movs	r1, #0
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 fdc0 	bl	8004304 <HAL_CAN_GetRxMessage>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    /* Reception Error */
    Error_Handler();
 800178a:	f000 fbb2 	bl	8001ef2 <Error_Handler>
  }

  can_rx_cnt++;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001796:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800179e:	d018      	beq.n	80017d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017a4:	d817      	bhi.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 80017a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80017ac:	f240 1205 	movw	r2, #261	; 0x105
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
      break;

    case 0x300:
      break;
    default:
      break;
 80017b4:	e00f      	b.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
      dribbler_timeout_cnt = 0;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
      dribbler_speed = can_rx_buf.speed;
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80017c0:	6013      	str	r3, [r2, #0]
      break;
 80017c2:	e009      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      servo_timeout_cnt = 0;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
      serv_angle = can_rx_buf.speed;
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80017ce:	6013      	str	r3, [r2, #0]
      break;
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
      break;
 80017d6:	bf00      	nop
  }
}
 80017d8:	bf00      	nop
 80017da:	3730      	adds	r7, #48	; 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200003c8 	.word	0x200003c8
 80017e4:	200003c0 	.word	0x200003c0
 80017e8:	200003b8 	.word	0x200003b8
 80017ec:	200003bc 	.word	0x200003bc
 80017f0:	200003b4 	.word	0x200003b4
 80017f4:	00000000 	.word	0x00000000

080017f8 <ball_sensor>:

int32_t ball_detect[2] = {0, 0};

void ball_sensor(void)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  static int32_t ball_detect_process = 0;
  static int32_t adc_raw[3];

  bool ball_detected[2];

  switch (ball_detect_process) {
 80017fe:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <ball_sensor+0x260>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	f000 8091 	beq.w	800192a <ball_sensor+0x132>
 8001808:	2b02      	cmp	r3, #2
 800180a:	f300 810e 	bgt.w	8001a2a <ball_sensor+0x232>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <ball_sensor+0x20>
 8001812:	2b01      	cmp	r3, #1
 8001814:	d02a      	beq.n	800186c <ball_sensor+0x74>
 8001816:	e108      	b.n	8001a2a <ball_sensor+0x232>
    case 0:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181e:	488f      	ldr	r0, [pc, #572]	; (8001a5c <ball_sensor+0x264>)
 8001820:	f003 fdb6 	bl	8005390 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	488c      	ldr	r0, [pc, #560]	; (8001a5c <ball_sensor+0x264>)
 800182c:	f003 fdb0 	bl	8005390 <HAL_GPIO_WritePin>
      adc_raw[0] = HAL_ADC_GetValue(&hadc2);
 8001830:	488b      	ldr	r0, [pc, #556]	; (8001a60 <ball_sensor+0x268>)
 8001832:	f001 fd33 	bl	800329c <HAL_ADC_GetValue>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <ball_sensor+0x26c>)
 800183c:	601a      	str	r2, [r3, #0]
      ball_detect_process++;
 800183e:	4b86      	ldr	r3, [pc, #536]	; (8001a58 <ball_sensor+0x260>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a84      	ldr	r2, [pc, #528]	; (8001a58 <ball_sensor+0x260>)
 8001846:	6013      	str	r3, [r2, #0]

      speed_msg.speed = tlm_msg.speed;
 8001848:	4b87      	ldr	r3, [pc, #540]	; (8001a68 <ball_sensor+0x270>)
 800184a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	4b85      	ldr	r3, [pc, #532]	; (8001a6c <ball_sensor+0x274>)
 8001858:	edc3 7a00 	vstr	s15, [r3]
      can_send(0x204, speed_msg);
 800185c:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <ball_sensor+0x274>)
 800185e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001862:	f44f 7001 	mov.w	r0, #516	; 0x204
 8001866:	f7ff fc43 	bl	80010f0 <can_send>
      break;
 800186a:	e0e2      	b.n	8001a32 <ball_sensor+0x23a>

    case 1:
      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001872:	487a      	ldr	r0, [pc, #488]	; (8001a5c <ball_sensor+0x264>)
 8001874:	f003 fd8c 	bl	8005390 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187e:	4877      	ldr	r0, [pc, #476]	; (8001a5c <ball_sensor+0x264>)
 8001880:	f003 fd86 	bl	8005390 <HAL_GPIO_WritePin>

      adc_raw[1] = HAL_ADC_GetValue(&hadc2);
 8001884:	4876      	ldr	r0, [pc, #472]	; (8001a60 <ball_sensor+0x268>)
 8001886:	f001 fd09 	bl	800329c <HAL_ADC_GetValue>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <ball_sensor+0x26c>)
 8001890:	605a      	str	r2, [r3, #4]

      ball_detect_process++;
 8001892:	4b71      	ldr	r3, [pc, #452]	; (8001a58 <ball_sensor+0x260>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a6f      	ldr	r2, [pc, #444]	; (8001a58 <ball_sensor+0x260>)
 800189a:	6013      	str	r3, [r2, #0]
      battery_voltage = battery_voltage * 0.9 + (HAL_ADC_GetValue(&hadc1) * 36.3 / 4096) * 0.1;
 800189c:	4b74      	ldr	r3, [pc, #464]	; (8001a70 <ball_sensor+0x278>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	a366      	add	r3, pc, #408	; (adr r3, 8001a40 <ball_sensor+0x248>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fea4 	bl	80005f8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	486e      	ldr	r0, [pc, #440]	; (8001a74 <ball_sensor+0x27c>)
 80018ba:	f001 fcef 	bl	800329c <HAL_ADC_GetValue>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe1f 	bl	8000504 <__aeabi_ui2d>
 80018c6:	a360      	add	r3, pc, #384	; (adr r3, 8001a48 <ball_sensor+0x250>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <ball_sensor+0x280>)
 80018de:	f7fe ffb5 	bl	800084c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a359      	add	r3, pc, #356	; (adr r3, 8001a50 <ball_sensor+0x258>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fcc6 	bl	800028c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f96e 	bl	8000be8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <ball_sensor+0x278>)
 8001910:	6013      	str	r3, [r2, #0]
      voltage_msg.voltage = battery_voltage;
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <ball_sensor+0x278>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a59      	ldr	r2, [pc, #356]	; (8001a7c <ball_sensor+0x284>)
 8001918:	6013      	str	r3, [r2, #0]
      can_send(0x214, voltage_msg);
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <ball_sensor+0x284>)
 800191c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001920:	f44f 7005 	mov.w	r0, #532	; 0x214
 8001924:	f7ff fbe4 	bl	80010f0 <can_send>
      break;
 8001928:	e083      	b.n	8001a32 <ball_sensor+0x23a>

    case 2:

      HAL_GPIO_WritePin(PHOTO_0_GPIO_Port, PHOTO_0_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001930:	484a      	ldr	r0, [pc, #296]	; (8001a5c <ball_sensor+0x264>)
 8001932:	f003 fd2d 	bl	8005390 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PHOTO_1_GPIO_Port, PHOTO_1_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193c:	4847      	ldr	r0, [pc, #284]	; (8001a5c <ball_sensor+0x264>)
 800193e:	f003 fd27 	bl	8005390 <HAL_GPIO_WritePin>

      adc_raw[2] = HAL_ADC_GetValue(&hadc2);
 8001942:	4847      	ldr	r0, [pc, #284]	; (8001a60 <ball_sensor+0x268>)
 8001944:	f001 fcaa 	bl	800329c <HAL_ADC_GetValue>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <ball_sensor+0x26c>)
 800194e:	609a      	str	r2, [r3, #8]

      ball_detect[0] = adc_raw[0] - adc_raw[1];
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <ball_sensor+0x26c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <ball_sensor+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <ball_sensor+0x288>)
 800195c:	6013      	str	r3, [r2, #0]
      ball_detect[1] = adc_raw[0] - adc_raw[2];
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <ball_sensor+0x26c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <ball_sensor+0x26c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a45      	ldr	r2, [pc, #276]	; (8001a80 <ball_sensor+0x288>)
 800196a:	6053      	str	r3, [r2, #4]

      if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET) {
 800196c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001970:	483a      	ldr	r0, [pc, #232]	; (8001a5c <ball_sensor+0x264>)
 8001972:	f003 fcf5 	bl	8005360 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <ball_sensor+0x190>
        ball_detect[0] = 0;
 800197c:	4b40      	ldr	r3, [pc, #256]	; (8001a80 <ball_sensor+0x288>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
        ball_detect[1] = 0;
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <ball_sensor+0x288>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
      }

      //
      if (ball_detect[1] < BALL_DETECTOR_THRESH) {
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <ball_sensor+0x288>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001990:	da08      	bge.n	80019a4 <ball_sensor+0x1ac>
        ball_detected[0] = true;
 8001992:	2301      	movs	r3, #1
 8001994:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f003 fcf7 	bl	8005390 <HAL_GPIO_WritePin>
 80019a2:	e007      	b.n	80019b4 <ball_sensor+0x1bc>
      } else {
        ball_detected[0] = false;
 80019a4:	2300      	movs	r3, #0
 80019a6:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f003 fcee 	bl	8005390 <HAL_GPIO_WritePin>
      }
      if (ball_detect[0] < BALL_DETECTOR_THRESH) {
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <ball_sensor+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019bc:	da08      	bge.n	80019d0 <ball_sensor+0x1d8>
        ball_detected[1] = true;
 80019be:	2301      	movs	r3, #1
 80019c0:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f003 fce1 	bl	8005390 <HAL_GPIO_WritePin>
 80019ce:	e007      	b.n	80019e0 <ball_sensor+0x1e8>
      } else {
        ball_detected[1] = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	717b      	strb	r3, [r7, #5]
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f003 fcd8 	bl	8005390 <HAL_GPIO_WritePin>
      }

      if (ball_detected[0]) {
 80019e0:	793b      	ldrb	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <ball_sensor+0x1fc>
        ball_msg.data[0] = 1;
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <ball_sensor+0x28c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <ball_sensor+0x28c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	705a      	strb	r2, [r3, #1]
 80019f2:	e00f      	b.n	8001a14 <ball_sensor+0x21c>
      } else if (ball_detected[1]) {
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <ball_sensor+0x210>
        ball_msg.data[0] = 1;
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <ball_sensor+0x28c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 5;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <ball_sensor+0x28c>)
 8001a02:	2205      	movs	r2, #5
 8001a04:	705a      	strb	r2, [r3, #1]
 8001a06:	e005      	b.n	8001a14 <ball_sensor+0x21c>
      } else {
        ball_msg.data[0] = 0;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <ball_sensor+0x28c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
        ball_msg.data[1] = 0;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <ball_sensor+0x28c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	705a      	strb	r2, [r3, #1]
      }

      can_send(0x240, ball_msg);
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <ball_sensor+0x28c>)
 8001a16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a1a:	f44f 7010 	mov.w	r0, #576	; 0x240
 8001a1e:	f7ff fb67 	bl	80010f0 <can_send>

      ball_detect_process = 0;
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <ball_sensor+0x260>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
      break;
 8001a28:	e003      	b.n	8001a32 <ball_sensor+0x23a>

    default:
      ball_detect_process = 0;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <ball_sensor+0x260>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
      break;
 8001a30:	bf00      	nop
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	f3af 8000 	nop.w
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	3feccccc 	.word	0x3feccccc
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	40422666 	.word	0x40422666
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	3fb99999 	.word	0x3fb99999
 8001a58:	200003d4 	.word	0x200003d4
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	20000248 	.word	0x20000248
 8001a64:	200003d8 	.word	0x200003d8
 8001a68:	20000318 	.word	0x20000318
 8001a6c:	200003e4 	.word	0x200003e4
 8001a70:	200003c4 	.word	0x200003c4
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	40b00000 	.word	0x40b00000
 8001a7c:	200003ec 	.word	0x200003ec
 8001a80:	200003cc 	.word	0x200003cc
 8001a84:	200003f4 	.word	0x200003f4

08001a88 <HAL_TIM_PeriodElapsedCallback>:

// 2kHz cycle
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a8c:	b09b      	sub	sp, #108	; 0x6c
 8001a8e:	af10      	add	r7, sp, #64	; 0x40
 8001a90:	6278      	str	r0, [r7, #36]	; 0x24
  static uint32_t print_interval = 0;
  ball_sensor();
 8001a92:	f7ff feb1 	bl	80017f8 <ball_sensor>

  print_interval++;
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	4a8b      	ldr	r2, [pc, #556]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a9e:	6013      	str	r3, [r2, #0]
  if (print_interval >= 200) {
 8001aa0:	4b8a      	ldr	r3, [pc, #552]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2bc7      	cmp	r3, #199	; 0xc7
 8001aa6:	f240 810b 	bls.w	8001cc0 <HAL_TIM_PeriodElapsedCallback+0x238>
    print_interval = 0;
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    printf(
 8001ab0:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd47 	bl	8000548 <__aeabi_f2d>
 8001aba:	4680      	mov	r8, r0
 8001abc:	4689      	mov	r9, r1
      "\e[0mbatt %4.1f spd %4d Mbx %ld can rx %3ld uart rx %4ld %4ld dribbler %6.3f servo %6.3f timeout %4d %4d ball %+5ld %+5ld %d%d \n", battery_voltage, tlm_msg.speed,
 8001abe:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ac0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    printf(
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	4884      	ldr	r0, [pc, #528]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ac8:	f002 fbe7 	bl	800429a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001acc:	61f8      	str	r0, [r7, #28]
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	61ba      	str	r2, [r7, #24]
 8001ad4:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	6179      	str	r1, [r7, #20]
 8001ada:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001adc:	681c      	ldr	r4, [r3, #0]
 8001ade:	613c      	str	r4, [r7, #16]
 8001ae0:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2f 	bl	8000548 <__aeabi_f2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_f2d>
 8001af8:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001afa:	681e      	ldr	r6, [r3, #0]
 8001afc:	60fe      	str	r6, [r7, #12]
 8001afe:	4b7d      	ldr	r3, [pc, #500]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b0c:	685e      	ldr	r6, [r3, #4]
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b1e:	920e      	str	r2, [sp, #56]	; 0x38
 8001b20:	960d      	str	r6, [sp, #52]	; 0x34
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	920c      	str	r2, [sp, #48]	; 0x30
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b2a:	68fe      	ldr	r6, [r7, #12]
 8001b2c:	960a      	str	r6, [sp, #40]	; 0x28
 8001b2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001b32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001b36:	693c      	ldr	r4, [r7, #16]
 8001b38:	9404      	str	r4, [sp, #16]
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	9103      	str	r1, [sp, #12]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	9202      	str	r2, [sp, #8]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	486d      	ldr	r0, [pc, #436]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b50:	f009 f82c 	bl	800abac <iprintf>
      HAL_CAN_GetTxMailboxesFreeLevel(&hcan), can_rx_cnt, uart_rx_cnt, uart3_rx_cnt, dribbler_speed, serv_angle, dribbler_timeout_cnt, servo_timeout_cnt, ball_detect[0], ball_detect[1], uart3_rx_flag,
      uart_rx_flag);

    if (HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_RESET) {
 8001b54:	2108      	movs	r1, #8
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5a:	f003 fc01 	bl	8005360 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0xfa>
      lcdPrint(&hi2c1, battery_voltage, can_rx_cnt, ball_detect[0], ball_detect[1]);
 8001b64:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b60      	ldr	r3, [pc, #384]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	4862      	ldr	r0, [pc, #392]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b7e:	f7ff fc71 	bl	8001464 <lcdPrint>
    }

    // TEL (LED0,PA3)
    if (uart3_rx_cnt > 0) {
 8001b82:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x110>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b90:	485e      	ldr	r0, [pc, #376]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b92:	f003 fbfd 	bl	8005390 <HAL_GPIO_WritePin>
 8001b96:	e005      	b.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x11c>
    } else {
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9e:	485b      	ldr	r0, [pc, #364]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ba0:	f003 fbf6 	bl	8005390 <HAL_GPIO_WritePin>
    }

    // RX (can rx,LED2,PA5)
    if (can_rx_cnt > 0) {
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x132>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb2:	4856      	ldr	r0, [pc, #344]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bb4:	f003 fbec 	bl	8005390 <HAL_GPIO_WritePin>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x13e>
    } else {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc0:	4852      	ldr	r0, [pc, #328]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bc2:	f003 fbe5 	bl	8005390 <HAL_GPIO_WritePin>
    }

    if (dribbler_speed != 0) {
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d006      	beq.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x15c>
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	484b      	ldr	r0, [pc, #300]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bde:	f003 fbd7 	bl	8005390 <HAL_GPIO_WritePin>
 8001be2:	e005      	b.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x168>
    } else {
      HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bea:	4848      	ldr	r0, [pc, #288]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bec:	f003 fbd0 	bl	8005390 <HAL_GPIO_WritePin>
    }

    can_rx_cnt = 0;
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    uart_rx_cnt = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    uart3_rx_cnt = 0;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_SET) {
 8001c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c06:	4842      	ldr	r0, [pc, #264]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c08:	f003 fbaa 	bl	8005360 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d112      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x1b0>
      htim3.Instance->CCR3 = 1500 + 600 * dribbler_speed;  // esc
 8001c12:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001d14 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001d18 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c30:	ee17 2a90 	vmov	r2, s15
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c36:	e004      	b.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x1ba>
    } else {
      htim3.Instance->CCR3 = 1500 + USER_SW_ESC_PULSE_WITDH;  // esc
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET) {
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f003 fb89 	bl	8005360 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d116      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x1fa>
      htim3.Instance->CCR4 = 1500 - 600 * serv_angle + SERVO_CENTOR_OFFSET;  // servo
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001d14 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d18 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d20 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7a:	ee17 2a90 	vmov	r2, s15
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c80:	e004      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x204>
    } else {
      htim3.Instance->CCR4 = 1500 - USER_SW_SERVO_PULSE_WITDH + SERVO_CENTOR_OFFSET;  // servo
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f240 424c 	movw	r2, #1100	; 0x44c
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    dribbler_timeout_cnt++;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c94:	6013      	str	r3, [r2, #0]
    servo_timeout_cnt++;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c9e:	6013      	str	r3, [r2, #0]
    if (dribbler_timeout_cnt > 50) {
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b32      	cmp	r3, #50	; 0x32
 8001ca6:	dd03      	ble.n	8001cb0 <HAL_TIM_PeriodElapsedCallback+0x228>
      dribbler_speed = 0;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    }
    if (servo_timeout_cnt > 50) {
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b32      	cmp	r3, #50	; 0x32
 8001cb6:	dd03      	ble.n	8001cc0 <HAL_TIM_PeriodElapsedCallback+0x238>
      serv_angle = 0;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	372c      	adds	r7, #44	; 0x2c
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003fc 	.word	0x200003fc
 8001cd0:	200003c4 	.word	0x200003c4
 8001cd4:	20000318 	.word	0x20000318
 8001cd8:	2000029c 	.word	0x2000029c
 8001cdc:	200003c8 	.word	0x200003c8
 8001ce0:	200003ac 	.word	0x200003ac
 8001ce4:	200003b0 	.word	0x200003b0
 8001ce8:	200003b8 	.word	0x200003b8
 8001cec:	200003b4 	.word	0x200003b4
 8001cf0:	200003c0 	.word	0x200003c0
 8001cf4:	200003bc 	.word	0x200003bc
 8001cf8:	200003cc 	.word	0x200003cc
 8001cfc:	200003a9 	.word	0x200003a9
 8001d00:	200003a8 	.word	0x200003a8
 8001d04:	0800e56c 	.word	0x0800e56c
 8001d08:	200002c4 	.word	0x200002c4
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000400 	.word	0x48000400
 8001d14:	44160000 	.word	0x44160000
 8001d18:	44bb8000 	.word	0x44bb8000
 8001d1c:	2000080c 	.word	0x2000080c
 8001d20:	42c80000 	.word	0x42c80000

08001d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d28:	f000 ff38 	bl	8002b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2c:	f000 f87e 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d30:	f7ff fa1e 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d34:	f7ff f9fe 	bl	8001134 <MX_DMA_Init>
  MX_CAN_Init();
 8001d38:	f7ff f928 	bl	8000f8c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001d3c:	f000 fdd0 	bl	80028e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d40:	f000 fdfe 	bl	8002940 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d44:	f000 fcc2 	bl	80026cc <MX_TIM3_Init>
  MX_ADC2_Init();
 8001d48:	f7ff f844 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001d4c:	f7fe ffd2 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001d50:	f000 fd22 	bl	8002798 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001d54:	f7ff faac 	bl	80012b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("start sub board !! %s %s\n", __DATE__, __TIME__);
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <main+0xcc>)
 8001d5a:	4926      	ldr	r1, [pc, #152]	; (8001df4 <main+0xd0>)
 8001d5c:	4826      	ldr	r0, [pc, #152]	; (8001df8 <main+0xd4>)
 8001d5e:	f008 ff25 	bl	800abac <iprintf>
  HAL_UART_Receive_IT(&huart3, uart3_rx_buf, 1);
 8001d62:	2201      	movs	r2, #1
 8001d64:	4925      	ldr	r1, [pc, #148]	; (8001dfc <main+0xd8>)
 8001d66:	4826      	ldr	r0, [pc, #152]	; (8001e00 <main+0xdc>)
 8001d68:	f006 fcdc 	bl	8008724 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4925      	ldr	r1, [pc, #148]	; (8001e04 <main+0xe0>)
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <main+0xe4>)
 8001d72:	f006 fcd7 	bl	8008724 <HAL_UART_Receive_IT>

  lcdInit(&hi2c1);
 8001d76:	4825      	ldr	r0, [pc, #148]	; (8001e0c <main+0xe8>)
 8001d78:	f7ff fb1e 	bl	80013b8 <lcdInit>

  CAN_Filter_Init();
 8001d7c:	f7ff f988 	bl	8001090 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8001d80:	4823      	ldr	r0, [pc, #140]	; (8001e10 <main+0xec>)
 8001d82:	f002 f976 	bl	8004072 <HAL_CAN_Start>

  HAL_TIM_Base_Start_IT(&htim17);
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <main+0xf0>)
 8001d88:	f005 fc36 	bl	80075f8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Init(&htim3);
 8001d8c:	4822      	ldr	r0, [pc, #136]	; (8001e18 <main+0xf4>)
 8001d8e:	f005 fc9d 	bl	80076cc <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d92:	2108      	movs	r1, #8
 8001d94:	4820      	ldr	r0, [pc, #128]	; (8001e18 <main+0xf4>)
 8001d96:	f005 fcf1 	bl	800777c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	481e      	ldr	r0, [pc, #120]	; (8001e18 <main+0xf4>)
 8001d9e:	f005 fced 	bl	800777c <HAL_TIM_PWM_Start>
  htim3.Instance->CCR3 = 0;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <main+0xf4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = 0;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <main+0xf4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
  servo_timeout_cnt = 0;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <main+0xf8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  dribbler_timeout_cnt = 0;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <main+0xfc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <main+0x100>)
 8001dc2:	f001 fa78 	bl	80032b6 <HAL_ADCEx_Calibration_Start>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <main+0xac>
    /* Calibration Error */
    Error_Handler();
 8001dcc:	f000 f891 	bl	8001ef2 <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4815      	ldr	r0, [pc, #84]	; (8001e28 <main+0x104>)
 8001dd4:	f001 fa6f 	bl	80032b6 <HAL_ADCEx_Calibration_Start>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <main+0xbe>
    /* Calibration Error */
    Error_Handler();
 8001dde:	f000 f888 	bl	8001ef2 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <main+0x100>)
 8001de4:	f001 f944 	bl	8003070 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001de8:	480f      	ldr	r0, [pc, #60]	; (8001e28 <main+0x104>)
 8001dea:	f001 f941 	bl	8003070 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001dee:	e7fe      	b.n	8001dee <main+0xca>
 8001df0:	0800e5ec 	.word	0x0800e5ec
 8001df4:	0800e5f8 	.word	0x0800e5f8
 8001df8:	0800e604 	.word	0x0800e604
 8001dfc:	20000338 	.word	0x20000338
 8001e00:	2000092c 	.word	0x2000092c
 8001e04:	2000032c 	.word	0x2000032c
 8001e08:	200008a4 	.word	0x200008a4
 8001e0c:	200002c4 	.word	0x200002c4
 8001e10:	2000029c 	.word	0x2000029c
 8001e14:	20000858 	.word	0x20000858
 8001e18:	2000080c 	.word	0x2000080c
 8001e1c:	200003bc 	.word	0x200003bc
 8001e20:	200003c0 	.word	0x200003c0
 8001e24:	200001f8 	.word	0x200001f8
 8001e28:	20000248 	.word	0x20000248

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09e      	sub	sp, #120	; 0x78
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e36:	2228      	movs	r2, #40	; 0x28
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 ff2b 	bl	800ac96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	223c      	movs	r2, #60	; 0x3c
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f008 ff1d 	bl	800ac96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e80:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 ff3a 	bl	8005d00 <HAL_RCC_OscConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x6a>
    Error_Handler();
 8001e92:	f000 f82e 	bl	8001ef2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	230f      	movs	r3, #15
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001eac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 ff62 	bl	8006d7c <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x96>
    Error_Handler();
 8001ebe:	f000 f818 	bl	8001ef2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC12;
 8001ec2:	23a5      	movs	r3, #165	; 0xa5
 8001ec4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 f984 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xbe>
    Error_Handler();
 8001ee6:	f000 f804 	bl	8001ef2 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3778      	adds	r7, #120	; 0x78
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef6:	b672      	cpsid	i
}
 8001ef8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001efa:	e7fe      	b.n	8001efa <Error_Handler+0x8>

08001efc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af04      	add	r7, sp, #16
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001f08:	230a      	movs	r3, #10
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	1cfb      	adds	r3, r7, #3
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	2200      	movs	r2, #0
 8001f18:	2178      	movs	r1, #120	; 0x78
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f003 fae0 	bl	80054e0 <HAL_I2C_Mem_Write>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f000 fe97 	bl	8002c68 <HAL_Delay>
    int status = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001f3e:	21ae      	movs	r1, #174	; 0xae
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffdb 	bl	8001efc <ssd1306_WriteCommand>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001f50:	2120      	movs	r1, #32
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffd2 	bl	8001efc <ssd1306_WriteCommand>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f62:	2110      	movs	r1, #16
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffc9 	bl	8001efc <ssd1306_WriteCommand>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001f74:	21b0      	movs	r1, #176	; 0xb0
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffc0 	bl	8001efc <ssd1306_WriteCommand>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001f86:	21c8      	movs	r1, #200	; 0xc8
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ffb7 	bl	8001efc <ssd1306_WriteCommand>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffae 	bl	8001efc <ssd1306_WriteCommand>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001faa:	2110      	movs	r1, #16
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffa5 	bl	8001efc <ssd1306_WriteCommand>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff9c 	bl	8001efc <ssd1306_WriteCommand>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001fce:	2181      	movs	r1, #129	; 0x81
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff93 	bl	8001efc <ssd1306_WriteCommand>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001fe0:	21ff      	movs	r1, #255	; 0xff
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff8a 	bl	8001efc <ssd1306_WriteCommand>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001ff2:	21a1      	movs	r1, #161	; 0xa1
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff81 	bl	8001efc <ssd1306_WriteCommand>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8002004:	21a6      	movs	r1, #166	; 0xa6
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff78 	bl	8001efc <ssd1306_WriteCommand>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8002016:	21a8      	movs	r1, #168	; 0xa8
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff6f 	bl	8001efc <ssd1306_WriteCommand>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8002028:	213f      	movs	r1, #63	; 0x3f
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff66 	bl	8001efc <ssd1306_WriteCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800203a:	21a4      	movs	r1, #164	; 0xa4
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff5d 	bl	8001efc <ssd1306_WriteCommand>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 800204c:	21d3      	movs	r1, #211	; 0xd3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff54 	bl	8001efc <ssd1306_WriteCommand>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff4b 	bl	8001efc <ssd1306_WriteCommand>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002070:	21d5      	movs	r1, #213	; 0xd5
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff42 	bl	8001efc <ssd1306_WriteCommand>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8002082:	21f0      	movs	r1, #240	; 0xf0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff39 	bl	8001efc <ssd1306_WriteCommand>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8002094:	21d9      	movs	r1, #217	; 0xd9
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff30 	bl	8001efc <ssd1306_WriteCommand>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80020a6:	2122      	movs	r1, #34	; 0x22
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff27 	bl	8001efc <ssd1306_WriteCommand>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80020b8:	21da      	movs	r1, #218	; 0xda
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff1e 	bl	8001efc <ssd1306_WriteCommand>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80020ca:	2112      	movs	r1, #18
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff15 	bl	8001efc <ssd1306_WriteCommand>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80020dc:	21db      	movs	r1, #219	; 0xdb
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff0c 	bl	8001efc <ssd1306_WriteCommand>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80020ee:	2120      	movs	r1, #32
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff03 	bl	8001efc <ssd1306_WriteCommand>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002100:	218d      	movs	r1, #141	; 0x8d
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fefa 	bl	8001efc <ssd1306_WriteCommand>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002112:	2114      	movs	r1, #20
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fef1 	bl	8001efc <ssd1306_WriteCommand>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002124:	21af      	movs	r1, #175	; 0xaf
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fee8 	bl	8001efc <ssd1306_WriteCommand>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <ssd1306_Init+0x214>
        return 1;
 800213c:	2301      	movs	r3, #1
 800213e:	e00f      	b.n	8002160 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002140:	2000      	movs	r0, #0
 8002142:	f000 f813 	bl	800216c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f834 	bl	80021b4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <ssd1306_Init+0x23c>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <ssd1306_Init+0x23c>)
 8002154:	2200      	movs	r2, #0
 8002156:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <ssd1306_Init+0x23c>)
 800215a:	2201      	movs	r2, #1
 800215c:	715a      	strb	r2, [r3, #5]

    return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000800 	.word	0x20000800

0800216c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e00d      	b.n	8002198 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <ssd1306_Fill+0x1a>
 8002182:	2100      	movs	r1, #0
 8002184:	e000      	b.n	8002188 <ssd1306_Fill+0x1c>
 8002186:	21ff      	movs	r1, #255	; 0xff
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <ssd1306_Fill+0x44>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	460a      	mov	r2, r1
 8002190:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d3ed      	bcc.n	800217c <ssd1306_Fill+0x10>
    }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000400 	.word	0x20000400

080021b4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af04      	add	r7, sp, #16
 80021ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e020      	b.n	8002204 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3b50      	subs	r3, #80	; 0x50
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fe96 	bl	8001efc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fe92 	bl	8001efc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80021d8:	2110      	movs	r1, #16
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fe8e 	bl	8001efc <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	01db      	lsls	r3, r3, #7
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <ssd1306_UpdateScreen+0x60>)
 80021e6:	4413      	add	r3, r2
 80021e8:	2264      	movs	r2, #100	; 0x64
 80021ea:	9202      	str	r2, [sp, #8]
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2301      	movs	r3, #1
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	2178      	movs	r1, #120	; 0x78
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f003 f971 	bl	80054e0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b07      	cmp	r3, #7
 8002208:	d9db      	bls.n	80021c2 <ssd1306_UpdateScreen+0xe>
    }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000400 	.word	0x20000400

08002218 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	460b      	mov	r3, r1
 8002224:	71bb      	strb	r3, [r7, #6]
 8002226:	4613      	mov	r3, r2
 8002228:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db48      	blt.n	80022c4 <ssd1306_DrawPixel+0xac>
 8002232:	79bb      	ldrb	r3, [r7, #6]
 8002234:	2b3f      	cmp	r3, #63	; 0x3f
 8002236:	d845      	bhi.n	80022c4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <ssd1306_DrawPixel+0xb8>)
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002240:	797b      	ldrb	r3, [r7, #5]
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800224e:	797b      	ldrb	r3, [r7, #5]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d11a      	bne.n	800228a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	4603      	mov	r3, r0
 800225e:	01db      	lsls	r3, r3, #7
 8002260:	4413      	add	r3, r2
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <ssd1306_DrawPixel+0xbc>)
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	b25a      	sxtb	r2, r3
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	b25b      	sxtb	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b259      	sxtb	r1, r3
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	4603      	mov	r3, r0
 800227e:	01db      	lsls	r3, r3, #7
 8002280:	4413      	add	r3, r2
 8002282:	b2c9      	uxtb	r1, r1
 8002284:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <ssd1306_DrawPixel+0xbc>)
 8002286:	54d1      	strb	r1, [r2, r3]
 8002288:	e01d      	b.n	80022c6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	4603      	mov	r3, r0
 8002294:	01db      	lsls	r3, r3, #7
 8002296:	4413      	add	r3, r2
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <ssd1306_DrawPixel+0xbc>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	b25a      	sxtb	r2, r3
 800229e:	79bb      	ldrb	r3, [r7, #6]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	b259      	sxtb	r1, r3
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	4603      	mov	r3, r0
 80022b8:	01db      	lsls	r3, r3, #7
 80022ba:	4413      	add	r3, r2
 80022bc:	b2c9      	uxtb	r1, r1
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <ssd1306_DrawPixel+0xbc>)
 80022c0:	54d1      	strb	r1, [r2, r3]
 80022c2:	e000      	b.n	80022c6 <ssd1306_DrawPixel+0xae>
        return;
 80022c4:	bf00      	nop
    }
}
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	20000800 	.word	0x20000800
 80022d4:	20000400 	.word	0x20000400

080022d8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4604      	mov	r4, r0
 80022e0:	1d38      	adds	r0, r7, #4
 80022e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	4613      	mov	r3, r2
 80022ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	793b      	ldrb	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	2b7f      	cmp	r3, #127	; 0x7f
 80022fc:	dc06      	bgt.n	800230c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 8002300:	885b      	ldrh	r3, [r3, #2]
 8002302:	461a      	mov	r2, r3
 8002304:	797b      	ldrb	r3, [r7, #5]
 8002306:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002308:	2b3f      	cmp	r3, #63	; 0x3f
 800230a:	dd01      	ble.n	8002310 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800230c:	2300      	movs	r3, #0
 800230e:	e05d      	b.n	80023cc <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	e04c      	b.n	80023b0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3b20      	subs	r3, #32
 800231c:	7979      	ldrb	r1, [r7, #5]
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4619      	mov	r1, r3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	440b      	add	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e034      	b.n	80023a0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4413      	add	r3, r2
 8002352:	b2d8      	uxtb	r0, r3
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 8002356:	885b      	ldrh	r3, [r3, #2]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	7bba      	ldrb	r2, [r7, #14]
 8002364:	4619      	mov	r1, r3
 8002366:	f7ff ff57 	bl	8002218 <ssd1306_DrawPixel>
 800236a:	e016      	b.n	800239a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4413      	add	r3, r2
 8002378:	b2d8      	uxtb	r0, r3
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 800237c:	885b      	ldrh	r3, [r3, #2]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4413      	add	r3, r2
 8002386:	b2d9      	uxtb	r1, r3
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff ff3f 	bl	8002218 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	3301      	adds	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	793b      	ldrb	r3, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d3c5      	bcc.n	8002336 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	797b      	ldrb	r3, [r7, #5]
 80023b2:	461a      	mov	r2, r3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d3ad      	bcc.n	8002316 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	793b      	ldrb	r3, [r7, #4]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <ssd1306_WriteChar+0xfc>)
 80023c8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	20000800 	.word	0x20000800

080023d8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	1d38      	adds	r0, r7, #4
 80023e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80023e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80023e8:	e012      	b.n	8002410 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	7818      	ldrb	r0, [r3, #0]
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	1d3a      	adds	r2, r7, #4
 80023f2:	ca06      	ldmia	r2, {r1, r2}
 80023f4:	f7ff ff70 	bl	80022d8 <ssd1306_WriteChar>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d002      	beq.n	800240a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	e008      	b.n	800241c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e8      	bne.n	80023ea <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	781b      	ldrb	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	460a      	mov	r2, r1
 800242e:	71fb      	strb	r3, [r7, #7]
 8002430:	4613      	mov	r3, r2
 8002432:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <ssd1306_SetCursor+0x2c>)
 800243a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <ssd1306_SetCursor+0x2c>)
 8002442:	805a      	strh	r2, [r3, #2]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	20000800 	.word	0x20000800

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_MspInit+0x44>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_MspInit+0x44>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_MspInit+0x44>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_MspInit+0x44>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_MspInit+0x44>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_MspInit+0x44>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <NMI_Handler+0x4>

080024a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <MemManage_Handler+0x4>

080024ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <BusFault_Handler+0x4>

080024b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler+0x4>

080024ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e8:	f000 fb9e 	bl	8002c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <DMA1_Channel4_IRQHandler+0x10>)
 80024f6:	f002 fcab 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200009b4 	.word	0x200009b4

08002504 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800250a:	f002 f843 	bl	8004594 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000029c 	.word	0x2000029c

08002518 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800251e:	f005 fa2d 	bl	800797c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000858 	.word	0x20000858

0800252c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <USART1_IRQHandler+0x10>)
 8002532:	f006 f9b7 	bl	80088a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200008a4 	.word	0x200008a4

08002540 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <USART3_IRQHandler+0x10>)
 8002546:	f006 f9ad 	bl	80088a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000092c 	.word	0x2000092c

08002554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	return 1;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_kill>:

int _kill(int pid, int sig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800256e:	f008 fbe5 	bl	800ad3c <__errno>
 8002572:	4603      	mov	r3, r0
 8002574:	2216      	movs	r2, #22
 8002576:	601a      	str	r2, [r3, #0]
	return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_exit>:

void _exit (int status)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffe7 	bl	8002564 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002596:	e7fe      	b.n	8002596 <_exit+0x12>

08002598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e00a      	b.n	80025c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025aa:	f3af 8000 	nop.w
 80025ae:	4601      	mov	r1, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dbf0      	blt.n	80025aa <_read+0x12>
	}

return len;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
	return -1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fa:	605a      	str	r2, [r3, #4]
	return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_isatty>:

int _isatty(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	return 1;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800266c:	f008 fb66 	bl	800ad3c <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20008000 	.word	0x20008000
 800269c:	00000400 	.word	0x00000400
 80026a0:	20000808 	.word	0x20000808
 80026a4:	20000b48 	.word	0x20000b48

080026a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <SystemInit+0x20>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <SystemInit+0x20>)
 80026b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026de:	463b      	mov	r3, r7
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <MX_TIM3_Init+0xc4>)
 80026f2:	4a28      	ldr	r2, [pc, #160]	; (8002794 <MX_TIM3_Init+0xc8>)
 80026f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <MX_TIM3_Init+0xc4>)
 80026f8:	2248      	movs	r2, #72	; 0x48
 80026fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <MX_TIM3_Init+0xc4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002704:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <MX_TIM3_Init+0xc4>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002716:	481e      	ldr	r0, [pc, #120]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002718:	f004 ffd8 	bl	80076cc <HAL_TIM_PWM_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002722:	f7ff fbe6 	bl	8001ef2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002736:	f005 ff09 	bl	800854c <HAL_TIMEx_MasterConfigSynchronization>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002740:	f7ff fbd7 	bl	8001ef2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002744:	2360      	movs	r3, #96	; 0x60
 8002746:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15000;
 8002748:	f643 2398 	movw	r3, #15000	; 0x3a98
 800274c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	2208      	movs	r2, #8
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <MX_TIM3_Init+0xc4>)
 800275e:	f005 fa2d 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002768:	f7ff fbc3 	bl	8001ef2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	220c      	movs	r2, #12
 8002770:	4619      	mov	r1, r3
 8002772:	4807      	ldr	r0, [pc, #28]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002774:	f005 fa22 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800277e:	f7ff fbb8 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002782:	4803      	ldr	r0, [pc, #12]	; (8002790 <MX_TIM3_Init+0xc4>)
 8002784:	f000 f874 	bl	8002870 <HAL_TIM_MspPostInit>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2000080c 	.word	0x2000080c
 8002794:	40000400 	.word	0x40000400

08002798 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_TIM17_Init+0x44>)
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <MX_TIM17_Init+0x48>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_TIM17_Init+0x44>)
 80027a4:	2248      	movs	r2, #72	; 0x48
 80027a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_TIM17_Init+0x44>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 500;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_TIM17_Init+0x44>)
 80027b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027b4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_TIM17_Init+0x44>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <MX_TIM17_Init+0x44>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_TIM17_Init+0x44>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <MX_TIM17_Init+0x44>)
 80027ca:	f004 febd 	bl	8007548 <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80027d4:	f7ff fb8d 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000858 	.word	0x20000858
 80027e0:	40014800 	.word	0x40014800

080027e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_TIM_PWM_MspInit+0x38>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10b      	bne.n	800280e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_TIM_PWM_MspInit+0x3c>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_TIM_PWM_MspInit+0x3c>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_TIM_PWM_MspInit+0x3c>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40000400 	.word	0x40000400
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_TIM_Base_MspInit+0x44>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d113      	bne.n	800285e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_TIM_Base_MspInit+0x48>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4a0c      	ldr	r2, [pc, #48]	; (800286c <HAL_TIM_Base_MspInit+0x48>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6193      	str	r3, [r2, #24]
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_TIM_Base_MspInit+0x48>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	201a      	movs	r0, #26
 8002854:	f002 f9a9 	bl	8004baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002858:	201a      	movs	r0, #26
 800285a:	f002 f9c2 	bl	8004be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40014800 	.word	0x40014800
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_TIM_MspPostInit+0x64>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d11b      	bne.n	80028ca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_TIM_MspPostInit+0x68>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_TIM_MspPostInit+0x68>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6153      	str	r3, [r2, #20]
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_TIM_MspPostInit+0x68>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028aa:	2303      	movs	r3, #3
 80028ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_TIM_MspPostInit+0x6c>)
 80028c6:	f002 fbd1 	bl	800506c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48000400 	.word	0x48000400

080028e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <MX_USART1_UART_Init+0x54>)
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <MX_USART1_UART_Init+0x58>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_USART1_UART_Init+0x54>)
 80028ec:	4a13      	ldr	r2, [pc, #76]	; (800293c <MX_USART1_UART_Init+0x5c>)
 80028ee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_USART1_UART_Init+0x54>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_USART1_UART_Init+0x54>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <MX_USART1_UART_Init+0x54>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_USART1_UART_Init+0x54>)
 8002904:	220c      	movs	r2, #12
 8002906:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_USART1_UART_Init+0x54>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_USART1_UART_Init+0x54>)
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <MX_USART1_UART_Init+0x54>)
 8002916:	2200      	movs	r2, #0
 8002918:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_USART1_UART_Init+0x54>)
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <MX_USART1_UART_Init+0x54>)
 8002922:	f005 feb1 	bl	8008688 <HAL_UART_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800292c:	f7ff fae1 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200008a4 	.word	0x200008a4
 8002938:	40013800 	.word	0x40013800
 800293c:	001e8480 	.word	0x001e8480

08002940 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002946:	4a15      	ldr	r2, [pc, #84]	; (800299c <MX_USART3_UART_Init+0x5c>)
 8002948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <MX_USART3_UART_Init+0x58>)
 800294c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <MX_USART3_UART_Init+0x58>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002966:	220c      	movs	r2, #12
 8002968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_USART3_UART_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_USART3_UART_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_USART3_UART_Init+0x58>)
 8002984:	f005 fe80 	bl	8008688 <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800298e:	f7ff fab0 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000092c 	.word	0x2000092c
 800299c:	40004800 	.word	0x40004800

080029a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5c      	ldr	r2, [pc, #368]	; (8002b30 <HAL_UART_MspInit+0x190>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d16a      	bne.n	8002a98 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c2:	4b5c      	ldr	r3, [pc, #368]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	4a5b      	ldr	r2, [pc, #364]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6193      	str	r3, [r2, #24]
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	6153      	str	r3, [r2, #20]
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_UART_MspInit+0x194>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a04:	2307      	movs	r3, #7
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a12:	f002 fb2b 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a36:	f002 fb19 	bl	800506c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a3c:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <HAL_UART_MspInit+0x19c>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a42:	2210      	movs	r2, #16
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a6a:	4833      	ldr	r0, [pc, #204]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a6c:	f002 f8d3 	bl	8004c16 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8002a76:	f7ff fa3c 	bl	8001ef2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a7e:	671a      	str	r2, [r3, #112]	; 0x70
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <HAL_UART_MspInit+0x198>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2025      	movs	r0, #37	; 0x25
 8002a8c:	f002 f88d 	bl	8004baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a90:	2025      	movs	r0, #37	; 0x25
 8002a92:	f002 f8a6 	bl	8004be2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a96:	e046      	b.n	8002b26 <HAL_UART_MspInit+0x186>
  else if(uartHandle->Instance==USART3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_UART_MspInit+0x1a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d141      	bne.n	8002b26 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a23      	ldr	r2, [pc, #140]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6153      	str	r3, [r2, #20]
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_UART_MspInit+0x194>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	4815      	ldr	r0, [pc, #84]	; (8002b44 <HAL_UART_MspInit+0x1a4>)
 8002af0:	f002 fabc 	bl	800506c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b06:	2307      	movs	r3, #7
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <HAL_UART_MspInit+0x1a4>)
 8002b12:	f002 faab 	bl	800506c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2027      	movs	r0, #39	; 0x27
 8002b1c:	f002 f845 	bl	8004baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b20:	2027      	movs	r0, #39	; 0x27
 8002b22:	f002 f85e 	bl	8004be2 <HAL_NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3730      	adds	r7, #48	; 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	200009b4 	.word	0x200009b4
 8002b3c:	40020044 	.word	0x40020044
 8002b40:	40004800 	.word	0x40004800
 8002b44:	48000400 	.word	0x48000400

08002b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b4e:	490e      	ldr	r1, [pc, #56]	; (8002b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <LoopForever+0xe>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b54:	e002      	b.n	8002b5c <LoopCopyDataInit>

08002b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5a:	3304      	adds	r3, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b60:	d3f9      	bcc.n	8002b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b64:	4c0b      	ldr	r4, [pc, #44]	; (8002b94 <LoopForever+0x16>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b68:	e001      	b.n	8002b6e <LoopFillZerobss>

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b6c:	3204      	adds	r2, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b72:	f7ff fd99 	bl	80026a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b76:	f008 f8e7 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b7a:	f7ff f8d3 	bl	8001d24 <main>

08002b7e <LoopForever>:

LoopForever:
    b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b8c:	0800f7e8 	.word	0x0800f7e8
  ldr r2, =_sbss
 8002b90:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b94:	20000b48 	.word	0x20000b48

08002b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC1_2_IRQHandler>
	...

08002b9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_Init+0x28>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <HAL_Init+0x28>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bac:	2003      	movs	r0, #3
 8002bae:	f001 fff1 	bl	8004b94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f000 f808 	bl	8002bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb8:	f7ff fc4c 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000

08002bc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x54>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x58>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 f809 	bl	8004bfe <HAL_SYSTICK_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00e      	b.n	8002c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d80a      	bhi.n	8002c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f001 ffd1 	bl	8004baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c08:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_InitTick+0x5c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	20000010 	.word	0x20000010
 8002c24:	2000000c 	.word	0x2000000c

08002c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x20>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_IncTick+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_IncTick+0x24>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000010 	.word	0x20000010
 8002c4c:	200009f8 	.word	0x200009f8

08002c50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_GetTick+0x14>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	200009f8 	.word	0x200009f8

08002c68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff ffee 	bl	8002c50 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d005      	beq.n	8002c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_Delay+0x44>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c8e:	bf00      	nop
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d8f7      	bhi.n	8002c90 <HAL_Delay+0x28>
  {
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000010 	.word	0x20000010

08002cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b09a      	sub	sp, #104	; 0x68
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e1c9      	b.n	8003064 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d176      	bne.n	8002dd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d152      	bne.n	8002d90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fe f8c3 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13b      	bne.n	8002d90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 ff7f 	bl	8003c1c <ADC_Disable>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d12f      	bne.n	8002d90 <HAL_ADC_Init+0xe0>
 8002d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12b      	bne.n	8002d90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d40:	f023 0302 	bic.w	r3, r3, #2
 8002d44:	f043 0202 	orr.w	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d6c:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <HAL_ADC_Init+0x2d8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a86      	ldr	r2, [pc, #536]	; (8002f8c <HAL_ADC_Init+0x2dc>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0c9a      	lsrs	r2, r3, #18
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d82:	e002      	b.n	8002d8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d110      	bne.n	8002dd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f023 0312 	bic.w	r3, r3, #18
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8136 	bne.w	800304a <HAL_ADC_Init+0x39a>
 8002dde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 8131 	bne.w	800304a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8129 	bne.w	800304a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_Init+0x16c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5e      	ldr	r2, [pc, #376]	; (8002f90 <HAL_ADC_Init+0x2e0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_Init+0x170>
 8002e1c:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_ADC_Init+0x2e4>)
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_Init+0x172>
 8002e20:	4b5d      	ldr	r3, [pc, #372]	; (8002f98 <HAL_ADC_Init+0x2e8>)
 8002e22:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2c:	d102      	bne.n	8002e34 <HAL_ADC_Init+0x184>
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_ADC_Init+0x2e0>)
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e01a      	b.n	8002e6a <HAL_ADC_Init+0x1ba>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a55      	ldr	r2, [pc, #340]	; (8002f90 <HAL_ADC_Init+0x2e0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d103      	bne.n	8002e46 <HAL_ADC_Init+0x196>
 8002e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e011      	b.n	8002e6a <HAL_ADC_Init+0x1ba>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_ADC_Init+0x2ec>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <HAL_ADC_Init+0x1a6>
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_ADC_Init+0x2f0>)
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e009      	b.n	8002e6a <HAL_ADC_Init+0x1ba>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <HAL_ADC_Init+0x2f0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADC_Init+0x1b6>
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_ADC_Init+0x2ec>)
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e001      	b.n	8002e6a <HAL_ADC_Init+0x1ba>
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_ADC_Init+0x1da>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x1da>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_Init+0x1dc>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11c      	bne.n	8002eca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_ADC_Init+0x202>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x202>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_Init+0x204>
 8002eb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7e5b      	ldrb	r3, [r3, #25]
 8002ece:	035b      	lsls	r3, r3, #13
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed4:	2a01      	cmp	r2, #1
 8002ed6:	d002      	beq.n	8002ede <HAL_ADC_Init+0x22e>
 8002ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_Init+0x230>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d11b      	bne.n	8002f36 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7e5b      	ldrb	r3, [r3, #25]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	045a      	lsls	r2, r3, #17
 8002f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	663b      	str	r3, [r7, #96]	; 0x60
 8002f18:	e00d      	b.n	8002f36 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d03a      	beq.n	8002fb4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_ADC_Init+0x2ec>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_Init+0x2a2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_ADC_Init+0x2f0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d128      	bne.n	8002fa4 <HAL_ADC_Init+0x2f4>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002f5a:	d012      	beq.n	8002f82 <HAL_ADC_Init+0x2d2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f64:	d00a      	beq.n	8002f7c <HAL_ADC_Init+0x2cc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002f6e:	d002      	beq.n	8002f76 <HAL_ADC_Init+0x2c6>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	e018      	b.n	8002fa8 <HAL_ADC_Init+0x2f8>
 8002f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7a:	e015      	b.n	8002fa8 <HAL_ADC_Init+0x2f8>
 8002f7c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002f80:	e012      	b.n	8002fa8 <HAL_ADC_Init+0x2f8>
 8002f82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002f86:	e00f      	b.n	8002fa8 <HAL_ADC_Init+0x2f8>
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	50000100 	.word	0x50000100
 8002f94:	50000300 	.word	0x50000300
 8002f98:	50000700 	.word	0x50000700
 8002f9c:	50000400 	.word	0x50000400
 8002fa0:	50000500 	.word	0x50000500
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fac:	4313      	orrs	r3, r2
 8002fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d114      	bne.n	8002fec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd0:	f023 0302 	bic.w	r3, r3, #2
 8002fd4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7e1b      	ldrb	r3, [r3, #24]
 8002fda:	039a      	lsls	r2, r3, #14
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_ADC_Init+0x3bc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10c      	bne.n	8003022 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f023 010f 	bic.w	r1, r3, #15
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
 8003020:	e007      	b.n	8003032 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020f 	bic.w	r2, r2, #15
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f023 0303 	bic.w	r3, r3, #3
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
 8003048:	e00a      	b.n	8003060 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f023 0312 	bic.w	r3, r3, #18
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003060:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003064:	4618      	mov	r0, r3
 8003066:	3768      	adds	r7, #104	; 0x68
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	fff0c007 	.word	0xfff0c007

08003070 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80f9 	bne.w	800327e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_ADC_Start+0x2a>
 8003096:	2302      	movs	r3, #2
 8003098:	e0f4      	b.n	8003284 <HAL_ADC_Start+0x214>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fd56 	bl	8003b54 <ADC_Enable>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 80e0 	bne.w	8003274 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_Start+0x6c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_ADC_Start+0x21c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d106      	bne.n	80030ea <HAL_ADC_Start+0x7a>
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_ADC_Start+0x220>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_ADC_Start+0x9a>
 80030e8:	e005      	b.n	80030f6 <HAL_ADC_Start+0x86>
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_ADC_Start+0x224>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_ADC_Start+0x9a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d004      	beq.n	800310a <HAL_ADC_Start+0x9a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_ADC_Start+0x228>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d115      	bne.n	8003136 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d036      	beq.n	8003192 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800312c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003134:	e02d      	b.n	8003192 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d004      	beq.n	8003156 <HAL_ADC_Start+0xe6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_ADC_Start+0x21c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10a      	bne.n	800316c <HAL_ADC_Start+0xfc>
 8003156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <HAL_ADC_Start+0x10e>
 800316c:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_ADC_Start+0x228>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d106      	bne.n	80031ae <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f023 0206 	bic.w	r2, r3, #6
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	221c      	movs	r2, #28
 80031c2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031cc:	d004      	beq.n	80031d8 <HAL_ADC_Start+0x168>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2e      	ldr	r2, [pc, #184]	; (800328c <HAL_ADC_Start+0x21c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_Start+0x176>
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_ADC_Start+0x220>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d03e      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 80031e4:	e005      	b.n	80031f2 <HAL_ADC_Start+0x182>
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_ADC_Start+0x224>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d037      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_Start+0x196>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_ADC_Start+0x21c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d106      	bne.n	8003214 <HAL_ADC_Start+0x1a4>
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_ADC_Start+0x220>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2b05      	cmp	r3, #5
 8003210:	d027      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 8003212:	e005      	b.n	8003220 <HAL_ADC_Start+0x1b0>
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_ADC_Start+0x224>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2b05      	cmp	r3, #5
 800321e:	d020      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003228:	d004      	beq.n	8003234 <HAL_ADC_Start+0x1c4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_ADC_Start+0x21c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d106      	bne.n	8003242 <HAL_ADC_Start+0x1d2>
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_ADC_Start+0x220>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2b09      	cmp	r3, #9
 800323e:	d010      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 8003240:	e005      	b.n	800324e <HAL_ADC_Start+0x1de>
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_ADC_Start+0x224>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2b09      	cmp	r3, #9
 800324c:	d009      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d004      	beq.n	8003262 <HAL_ADC_Start+0x1f2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_ADC_Start+0x228>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10f      	bne.n	8003282 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0204 	orr.w	r2, r2, #4
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e006      	b.n	8003282 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800327c:	e001      	b.n	8003282 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	50000100 	.word	0x50000100
 8003290:	50000300 	.word	0x50000300
 8003294:	50000700 	.word	0x50000700
 8003298:	50000400 	.word	0x50000400

0800329c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADCEx_Calibration_Start+0x1c>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e05f      	b.n	8003392 <HAL_ADCEx_Calibration_Start+0xdc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fc9e 	bl	8003c1c <ADC_Disable>
 80032e0:	4603      	mov	r3, r0
 80032e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14e      	bne.n	8003388 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80032fe:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003314:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003324:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003326:	f7ff fc93 	bl	8002c50 <HAL_GetTick>
 800332a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800332c:	e01c      	b.n	8003368 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800332e:	f7ff fc8f 	bl	8002c50 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b0a      	cmp	r3, #10
 800333a:	d915      	bls.n	8003368 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334a:	d10d      	bne.n	8003368 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f023 0312 	bic.w	r3, r3, #18
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e014      	b.n	8003392 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003376:	d0da      	beq.n	800332e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f023 0303 	bic.w	r3, r3, #3
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800339c:	b480      	push	{r7}
 800339e:	b09b      	sub	sp, #108	; 0x6c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x22>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e2c8      	b.n	8003950 <HAL_ADC_ConfigChannel+0x5b4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 82ac 	bne.w	800392e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d81c      	bhi.n	8003418 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	461a      	mov	r2, r3
 80033f2:	231f      	movs	r3, #31
 80033f4:	4093      	lsls	r3, r2
 80033f6:	43db      	mvns	r3, r3
 80033f8:	4019      	ands	r1, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa00 f203 	lsl.w	r2, r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
 8003416:	e063      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b09      	cmp	r3, #9
 800341e:	d81e      	bhi.n	800345e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	3b1e      	subs	r3, #30
 8003434:	221f      	movs	r2, #31
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	4019      	ands	r1, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	3b1e      	subs	r3, #30
 8003450:	fa00 f203 	lsl.w	r2, r0, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	635a      	str	r2, [r3, #52]	; 0x34
 800345c:	e040      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b0e      	cmp	r3, #14
 8003464:	d81e      	bhi.n	80034a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	3b3c      	subs	r3, #60	; 0x3c
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	4019      	ands	r1, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	3b3c      	subs	r3, #60	; 0x3c
 8003496:	fa00 f203 	lsl.w	r2, r0, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
 80034a2:	e01d      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	3b5a      	subs	r3, #90	; 0x5a
 80034b8:	221f      	movs	r2, #31
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	4019      	ands	r1, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	3b5a      	subs	r3, #90	; 0x5a
 80034d4:	fa00 f203 	lsl.w	r2, r0, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 80e5 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b09      	cmp	r3, #9
 80034f6:	d91c      	bls.n	8003532 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	3b1e      	subs	r3, #30
 800350a:	2207      	movs	r2, #7
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	4019      	ands	r1, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6898      	ldr	r0, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	3b1e      	subs	r3, #30
 8003524:	fa00 f203 	lsl.w	r2, r0, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	619a      	str	r2, [r3, #24]
 8003530:	e019      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6959      	ldr	r1, [r3, #20]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	2207      	movs	r2, #7
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	4019      	ands	r1, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6898      	ldr	r0, [r3, #8]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	fa00 f203 	lsl.w	r2, r0, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	3b01      	subs	r3, #1
 8003584:	2b03      	cmp	r3, #3
 8003586:	d84f      	bhi.n	8003628 <HAL_ADC_ConfigChannel+0x28c>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_ADC_ConfigChannel+0x1f4>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035c3 	.word	0x080035c3
 8003598:	080035e5 	.word	0x080035e5
 800359c:	08003607 	.word	0x08003607
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a6:	4b99      	ldr	r3, [pc, #612]	; (800380c <HAL_ADC_ConfigChannel+0x470>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	0691      	lsls	r1, r2, #26
 80035b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035b2:	430a      	orrs	r2, r1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035c0:	e07b      	b.n	80036ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035c8:	4b90      	ldr	r3, [pc, #576]	; (800380c <HAL_ADC_ConfigChannel+0x470>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	0691      	lsls	r1, r2, #26
 80035d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d4:	430a      	orrs	r2, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035e2:	e06a      	b.n	80036ba <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_ADC_ConfigChannel+0x470>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	0691      	lsls	r1, r2, #26
 80035f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035f6:	430a      	orrs	r2, r1
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003602:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003604:	e059      	b.n	80036ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800360c:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_ADC_ConfigChannel+0x470>)
 800360e:	4013      	ands	r3, r2
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	0691      	lsls	r1, r2, #26
 8003616:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003618:	430a      	orrs	r2, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003624:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003626:	e048      	b.n	80036ba <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	069b      	lsls	r3, r3, #26
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800364a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	429a      	cmp	r2, r3
 800365e:	d107      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800366e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	069b      	lsls	r3, r3, #26
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003692:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	069b      	lsls	r3, r3, #26
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80036b8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_ADC_ConfigChannel+0x33e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x33e>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_ADC_ConfigChannel+0x340>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 8131 	bne.w	8003944 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d00f      	beq.n	800370a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43da      	mvns	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	400a      	ands	r2, r1
 8003704:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003708:	e049      	b.n	800379e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	409a      	lsls	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b09      	cmp	r3, #9
 800372a:	d91c      	bls.n	8003766 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	3b1b      	subs	r3, #27
 800373e:	2207      	movs	r2, #7
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	4019      	ands	r1, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6898      	ldr	r0, [r3, #8]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	3b1b      	subs	r3, #27
 8003758:	fa00 f203 	lsl.w	r2, r0, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
 8003764:	e01b      	b.n	800379e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6959      	ldr	r1, [r3, #20]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	2207      	movs	r2, #7
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	4019      	ands	r1, r3
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6898      	ldr	r0, [r3, #8]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	fa00 f203 	lsl.w	r2, r0, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a6:	d004      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0x416>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a18      	ldr	r2, [pc, #96]	; (8003810 <HAL_ADC_ConfigChannel+0x474>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x41a>
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_ADC_ConfigChannel+0x478>)
 80037b4:	e000      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x41c>
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_ADC_ConfigChannel+0x47c>)
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d105      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037d2:	2b11      	cmp	r3, #17
 80037d4:	d105      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	f040 80ac 	bne.w	8003944 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 80a5 	bne.w	8003944 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003802:	d10b      	bne.n	800381c <HAL_ADC_ConfigChannel+0x480>
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <HAL_ADC_ConfigChannel+0x474>)
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e023      	b.n	8003852 <HAL_ADC_ConfigChannel+0x4b6>
 800380a:	bf00      	nop
 800380c:	83fff000 	.word	0x83fff000
 8003810:	50000100 	.word	0x50000100
 8003814:	50000300 	.word	0x50000300
 8003818:	50000700 	.word	0x50000700
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4e      	ldr	r2, [pc, #312]	; (800395c <HAL_ADC_ConfigChannel+0x5c0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d103      	bne.n	800382e <HAL_ADC_ConfigChannel+0x492>
 8003826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e011      	b.n	8003852 <HAL_ADC_ConfigChannel+0x4b6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_ADC_ConfigChannel+0x5c4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <HAL_ADC_ConfigChannel+0x4a2>
 8003838:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_ADC_ConfigChannel+0x5c8>)
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e009      	b.n	8003852 <HAL_ADC_ConfigChannel+0x4b6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_ADC_ConfigChannel+0x5c8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d102      	bne.n	800384e <HAL_ADC_ConfigChannel+0x4b2>
 8003848:	4b45      	ldr	r3, [pc, #276]	; (8003960 <HAL_ADC_ConfigChannel+0x5c4>)
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <HAL_ADC_ConfigChannel+0x4b6>
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x4d6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x4d6>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_ADC_ConfigChannel+0x4d8>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d150      	bne.n	800391a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003878:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	d010      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_ADC_ConfigChannel+0x4fe>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x4fe>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x500>
 800389a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13c      	bne.n	800391a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d11d      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x548>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b0:	d118      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_ADC_ConfigChannel+0x5cc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2a      	ldr	r2, [pc, #168]	; (800396c <HAL_ADC_ConfigChannel+0x5d0>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	0c9a      	lsrs	r2, r3, #18
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038d4:	e002      	b.n	80038dc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f9      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038e2:	e02e      	b.n	8003942 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b11      	cmp	r3, #17
 80038ea:	d10b      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x568>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f4:	d106      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80038f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003900:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003902:	e01e      	b.n	8003942 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b12      	cmp	r3, #18
 800390a:	d11a      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800390c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003916:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003918:	e013      	b.n	8003942 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800392c:	e00a      	b.n	8003944 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003940:	e000      	b.n	8003944 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003942:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800394c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003950:	4618      	mov	r0, r3
 8003952:	376c      	adds	r7, #108	; 0x6c
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	50000100 	.word	0x50000100
 8003960:	50000400 	.word	0x50000400
 8003964:	50000500 	.word	0x50000500
 8003968:	20000008 	.word	0x20000008
 800396c:	431bde83 	.word	0x431bde83

08003970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003970:	b480      	push	{r7}
 8003972:	b099      	sub	sp, #100	; 0x64
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003988:	d102      	bne.n	8003990 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	e01a      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d103      	bne.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800399a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	e011      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d102      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	e009      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a64      	ldr	r2, [pc, #400]	; (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d102      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e001      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b0      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0a9      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 808d 	bne.w	8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8086 	bne.w	8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a0c:	d004      	beq.n	8003a18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a18:	4b4c      	ldr	r3, [pc, #304]	; (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003a1a:	e000      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a1c:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003a1e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d040      	beq.n	8003aaa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a3a:	035b      	lsls	r3, r3, #13
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a42:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15c      	bne.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003a86:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d14b      	bne.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a94:	f023 030f 	bic.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	6811      	ldr	r1, [r2, #0]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa8:	e03c      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d123      	bne.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003af8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d112      	bne.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b0e:	e009      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003b22:	e000      	b.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b24:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003b32:	4618      	mov	r0, r3
 8003b34:	3764      	adds	r7, #100	; 0x64
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	50000100 	.word	0x50000100
 8003b44:	50000400 	.word	0x50000400
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	50000300 	.word	0x50000300
 8003b50:	50000700 	.word	0x50000700

08003b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <ADC_Enable+0x2c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <ADC_Enable+0x2c>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <ADC_Enable+0x2e>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d143      	bne.n	8003c0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <ADC_Enable+0xc4>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0210 	orr.w	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e02f      	b.n	8003c10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003bc0:	f7ff f846 	bl	8002c50 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bc6:	e01b      	b.n	8003c00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc8:	f7ff f842 	bl	8002c50 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d914      	bls.n	8003c00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d00d      	beq.n	8003c00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e007      	b.n	8003c10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d1dc      	bne.n	8003bc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	8000003f 	.word	0x8000003f

08003c1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d108      	bne.n	8003c48 <ADC_Disable+0x2c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <ADC_Disable+0x2c>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <ADC_Disable+0x2e>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d047      	beq.n	8003cde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030d 	and.w	r3, r3, #13
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10f      	bne.n	8003c7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0202 	orr.w	r2, r2, #2
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2203      	movs	r2, #3
 8003c72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c74:	f7fe ffec 	bl	8002c50 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c7a:	e029      	b.n	8003cd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f043 0210 	orr.w	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e023      	b.n	8003ce0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c98:	f7fe ffda 	bl	8002c50 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d914      	bls.n	8003cd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10d      	bne.n	8003cd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d0dc      	beq.n	8003c98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0ed      	b.n	8003ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd f976 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d1c:	f7fe ff98 	bl	8002c50 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d22:	e012      	b.n	8003d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d24:	f7fe ff94 	bl	8002c50 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	d90b      	bls.n	8003d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2205      	movs	r2, #5
 8003d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0c5      	b.n	8003ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0e5      	beq.n	8003d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0202 	bic.w	r2, r2, #2
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d68:	f7fe ff72 	bl	8002c50 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d6e:	e012      	b.n	8003d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d70:	f7fe ff6e 	bl	8002c50 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b0a      	cmp	r3, #10
 8003d7c:	d90b      	bls.n	8003d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e09f      	b.n	8003ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	e007      	b.n	8003dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7e5b      	ldrb	r3, [r3, #25]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7e9b      	ldrb	r3, [r3, #26]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d108      	bne.n	8003e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0220 	orr.w	r2, r2, #32
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e007      	b.n	8003e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0220 	bic.w	r2, r2, #32
 8003e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7edb      	ldrb	r3, [r3, #27]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0210 	bic.w	r2, r2, #16
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e007      	b.n	8003e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0210 	orr.w	r2, r2, #16
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7f1b      	ldrb	r3, [r3, #28]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d108      	bne.n	8003e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e007      	b.n	8003e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0208 	bic.w	r2, r2, #8
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7f5b      	ldrb	r3, [r3, #29]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d108      	bne.n	8003e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e007      	b.n	8003ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	ea42 0103 	orr.w	r1, r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b087      	sub	sp, #28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d003      	beq.n	8003f04 <HAL_CAN_ConfigFilter+0x26>
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	f040 80aa 	bne.w	8004058 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	401a      	ands	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d123      	bne.n	8003f86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	401a      	ands	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3248      	adds	r2, #72	; 0x48
 8003f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d122      	bne.n	8003fd4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3248      	adds	r2, #72	; 0x48
 8003fb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	3348      	adds	r3, #72	; 0x48
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003fee:	e007      	b.n	8004000 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800401a:	e007      	b.n	800402c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	431a      	orrs	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	431a      	orrs	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e006      	b.n	8004066 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d12e      	bne.n	80040e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409e:	f7fe fdd7 	bl	8002c50 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040a4:	e012      	b.n	80040cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040a6:	f7fe fdd3 	bl	8002c50 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b0a      	cmp	r3, #10
 80040b2:	d90b      	bls.n	80040cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2205      	movs	r2, #5
 80040c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e012      	b.n	80040f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e006      	b.n	80040f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b089      	sub	sp, #36	; 0x24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004118:	7ffb      	ldrb	r3, [r7, #31]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <HAL_CAN_AddTxMessage+0x2c>
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	2b02      	cmp	r3, #2
 8004122:	f040 80ad 	bne.w	8004280 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8095 	beq.w	8004270 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004150:	2201      	movs	r2, #1
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	409a      	lsls	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	6809      	ldr	r1, [r1, #0]
 8004170:	431a      	orrs	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3318      	adds	r3, #24
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	440b      	add	r3, r1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e00f      	b.n	800419e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004188:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004192:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3318      	adds	r3, #24
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	440b      	add	r3, r1
 800419c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3318      	adds	r3, #24
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	440b      	add	r3, r1
 80041ae:	3304      	adds	r3, #4
 80041b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	7d1b      	ldrb	r3, [r3, #20]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d111      	bne.n	80041de <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3318      	adds	r3, #24
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6811      	ldr	r1, [r2, #0]
 80041ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3318      	adds	r3, #24
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	440b      	add	r3, r1
 80041da:	3304      	adds	r3, #4
 80041dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3307      	adds	r3, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	061a      	lsls	r2, r3, #24
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3306      	adds	r3, #6
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3305      	adds	r3, #5
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	4313      	orrs	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	3204      	adds	r2, #4
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	4610      	mov	r0, r2
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	ea43 0200 	orr.w	r2, r3, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	440b      	add	r3, r1
 8004210:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004214:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3303      	adds	r3, #3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	061a      	lsls	r2, r3, #24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3302      	adds	r3, #2
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	4313      	orrs	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	4610      	mov	r0, r2
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	6811      	ldr	r1, [r2, #0]
 800423c:	ea43 0200 	orr.w	r2, r3, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	440b      	add	r3, r1
 8004246:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800424a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3318      	adds	r3, #24
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3318      	adds	r3, #24
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	440b      	add	r3, r1
 800426a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e00e      	b.n	800428e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e006      	b.n	800428e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80042ae:	7afb      	ldrb	r3, [r7, #11]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d002      	beq.n	80042ba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80042b4:	7afb      	ldrb	r3, [r7, #11]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d11d      	bne.n	80042f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004318:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d003      	beq.n	8004328 <HAL_CAN_GetRxMessage+0x24>
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b02      	cmp	r3, #2
 8004324:	f040 8103 	bne.w	800452e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10e      	bne.n	800434c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d116      	bne.n	800436a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0f7      	b.n	800453c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0e8      	b.n	800453c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	331b      	adds	r3, #27
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4413      	add	r3, r2
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0204 	and.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	331b      	adds	r3, #27
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	4413      	add	r3, r2
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0d5b      	lsrs	r3, r3, #21
 8004398:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e00b      	b.n	80043ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	331b      	adds	r3, #27
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	331b      	adds	r3, #27
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0202 	and.w	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	331b      	adds	r3, #27
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2208      	movs	r2, #8
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e00b      	b.n	8004408 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	331b      	adds	r3, #27
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4413      	add	r3, r2
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	331b      	adds	r3, #27
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	b2da      	uxtb	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	331b      	adds	r3, #27
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4413      	add	r3, r2
 8004458:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	0a1a      	lsrs	r2, r3, #8
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4413      	add	r3, r2
 8004472:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0c1a      	lsrs	r2, r3, #16
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3302      	adds	r3, #2
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4413      	add	r3, r2
 800448c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0e1a      	lsrs	r2, r3, #24
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	3303      	adds	r3, #3
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3304      	adds	r3, #4
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0a1a      	lsrs	r2, r3, #8
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	3305      	adds	r3, #5
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0c1a      	lsrs	r2, r3, #16
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3306      	adds	r3, #6
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e1a      	lsrs	r2, r3, #24
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	3307      	adds	r3, #7
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e007      	b.n	800452a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0220 	orr.w	r2, r2, #32
 8004528:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e006      	b.n	800453c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004558:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <HAL_CAN_ActivateNotification+0x1e>
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d109      	bne.n	800457a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6959      	ldr	r1, [r3, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e006      	b.n	8004588 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d07c      	beq.n	80046d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f983 	bl	8004902 <HAL_CAN_TxMailbox0CompleteCallback>
 80045fc:	e016      	b.n	800462c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
 8004610:	e00c      	b.n	800462c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
 8004624:	e002      	b.n	800462c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f989 	bl	800493e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d024      	beq.n	8004680 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800463e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f963 	bl	8004916 <HAL_CAN_TxMailbox1CompleteCallback>
 8004650:	e016      	b.n	8004680 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	e00c      	b.n	8004680 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	e002      	b.n	8004680 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f969 	bl	8004952 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d024      	beq.n	80046d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004692:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f943 	bl	800492a <HAL_CAN_TxMailbox2CompleteCallback>
 80046a4:	e016      	b.n	80046d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	e00c      	b.n	80046d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	e002      	b.n	80046d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f949 	bl	8004966 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2210      	movs	r2, #16
 80046f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2208      	movs	r2, #8
 8004712:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f930 	bl	800497a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd f81a 	bl	800176c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004752:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2210      	movs	r2, #16
 800475a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2208      	movs	r2, #8
 8004776:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f912 	bl	80049a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8f9 	bl	800498e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8fc 	bl	80049b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00b      	beq.n	80047e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2208      	movs	r2, #8
 80047d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8f5 	bl	80049ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d07b      	beq.n	80048e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d072      	beq.n	80048da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f043 0304 	orr.w	r3, r3, #4
 8004846:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	2b00      	cmp	r3, #0
 8004850:	d043      	beq.n	80048da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004858:	2b00      	cmp	r3, #0
 800485a:	d03e      	beq.n	80048da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004862:	2b60      	cmp	r3, #96	; 0x60
 8004864:	d02b      	beq.n	80048be <HAL_CAN_IRQHandler+0x32a>
 8004866:	2b60      	cmp	r3, #96	; 0x60
 8004868:	d82e      	bhi.n	80048c8 <HAL_CAN_IRQHandler+0x334>
 800486a:	2b50      	cmp	r3, #80	; 0x50
 800486c:	d022      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x320>
 800486e:	2b50      	cmp	r3, #80	; 0x50
 8004870:	d82a      	bhi.n	80048c8 <HAL_CAN_IRQHandler+0x334>
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d019      	beq.n	80048aa <HAL_CAN_IRQHandler+0x316>
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d826      	bhi.n	80048c8 <HAL_CAN_IRQHandler+0x334>
 800487a:	2b30      	cmp	r3, #48	; 0x30
 800487c:	d010      	beq.n	80048a0 <HAL_CAN_IRQHandler+0x30c>
 800487e:	2b30      	cmp	r3, #48	; 0x30
 8004880:	d822      	bhi.n	80048c8 <HAL_CAN_IRQHandler+0x334>
 8004882:	2b10      	cmp	r3, #16
 8004884:	d002      	beq.n	800488c <HAL_CAN_IRQHandler+0x2f8>
 8004886:	2b20      	cmp	r3, #32
 8004888:	d005      	beq.n	8004896 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800488a:	e01d      	b.n	80048c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f043 0308 	orr.w	r3, r3, #8
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004894:	e019      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	f043 0310 	orr.w	r3, r3, #16
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800489e:	e014      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	f043 0320 	orr.w	r3, r3, #32
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048a8:	e00f      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048b2:	e00a      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048bc:	e005      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048c6:	e000      	b.n	80048ca <HAL_CAN_IRQHandler+0x336>
            break;
 80048c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2204      	movs	r2, #4
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f872 	bl	80049de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <__NVIC_SetPriorityGrouping+0x44>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a10:	4013      	ands	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a26:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <__NVIC_SetPriorityGrouping+0x44>)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	60d3      	str	r3, [r2, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <__NVIC_GetPriorityGrouping+0x18>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	f003 0307 	and.w	r3, r3, #7
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db0b      	blt.n	8004a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <__NVIC_EnableIRQ+0x38>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e100 	.word	0xe000e100

08004a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db0a      	blt.n	8004abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	490c      	ldr	r1, [pc, #48]	; (8004ae0 <__NVIC_SetPriority+0x4c>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004abc:	e00a      	b.n	8004ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <__NVIC_SetPriority+0x50>)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3b04      	subs	r3, #4
 8004acc:	0112      	lsls	r2, r2, #4
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	761a      	strb	r2, [r3, #24]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000e100 	.word	0xe000e100
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf28      	it	cs
 8004b06:	2304      	movcs	r3, #4
 8004b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d902      	bls.n	8004b18 <NVIC_EncodePriority+0x30>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3b03      	subs	r3, #3
 8004b16:	e000      	b.n	8004b1a <NVIC_EncodePriority+0x32>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b30:	f04f 31ff 	mov.w	r1, #4294967295
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	43d9      	mvns	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b40:	4313      	orrs	r3, r2
         );
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3724      	adds	r7, #36	; 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b60:	d301      	bcc.n	8004b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b62:	2301      	movs	r3, #1
 8004b64:	e00f      	b.n	8004b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b66:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <SysTick_Config+0x40>)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b6e:	210f      	movs	r1, #15
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	f7ff ff8e 	bl	8004a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <SysTick_Config+0x40>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <SysTick_Config+0x40>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000e010 	.word	0xe000e010

08004b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff29 	bl	80049f4 <__NVIC_SetPriorityGrouping>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bbc:	f7ff ff3e 	bl	8004a3c <__NVIC_GetPriorityGrouping>
 8004bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	6978      	ldr	r0, [r7, #20]
 8004bc8:	f7ff ff8e 	bl	8004ae8 <NVIC_EncodePriority>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff5d 	bl	8004a94 <__NVIC_SetPriority>
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ff31 	bl	8004a58 <__NVIC_EnableIRQ>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ffa2 	bl	8004b50 <SysTick_Config>
 8004c0c:	4603      	mov	r3, r0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e037      	b.n	8004c9c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9b8 	bl	8004ff4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}  
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Start_IT+0x20>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e04a      	b.n	8004d5a <HAL_DMA_Start_IT+0xb6>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d13a      	bne.n	8004d4c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f94b 	bl	8004f96 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 020e 	orr.w	r2, r2, #14
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	e00f      	b.n	8004d3a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 020a 	orr.w	r2, r2, #10
 8004d28:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0204 	bic.w	r2, r2, #4
 8004d38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e005      	b.n	8004d58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
 8004d56:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d008      	beq.n	8004d86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e020      	b.n	8004dc8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 020e 	bic.w	r2, r2, #14
 8004d94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d005      	beq.n	8004df6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2204      	movs	r2, #4
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e027      	b.n	8004e46 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 020e 	bic.w	r2, r2, #14
 8004e04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f202 	lsl.w	r2, r1, r2
 8004e24:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
    } 
  }
  return status;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d024      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x72>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01f      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004eae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d06a      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ec0:	e065      	b.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02c      	beq.n	8004f2c <HAL_DMA_IRQHandler+0xdc>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d027      	beq.n	8004f2c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 020a 	bic.w	r2, r2, #10
 8004ef8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f10:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d035      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004f2a:	e030      	b.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2208      	movs	r2, #8
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d028      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d023      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 020e 	bic.w	r2, r2, #14
 8004f54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
    }
  }
}  
 8004f8c:	e7ff      	b.n	8004f8e <HAL_DMA_IRQHandler+0x13e>
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d108      	bne.n	8004fd6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fd4:	e007      	b.n	8004fe6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <DMA_CalcBaseAndBitshift+0x60>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d80f      	bhi.n	8005028 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	4b12      	ldr	r3, [pc, #72]	; (8005058 <DMA_CalcBaseAndBitshift+0x64>)
 8005010:	4413      	add	r3, r2
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <DMA_CalcBaseAndBitshift+0x68>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	009a      	lsls	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <DMA_CalcBaseAndBitshift+0x6c>)
 8005024:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005026:	e00e      	b.n	8005046 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <DMA_CalcBaseAndBitshift+0x70>)
 8005030:	4413      	add	r3, r2
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <DMA_CalcBaseAndBitshift+0x68>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	009a      	lsls	r2, r3, #2
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <DMA_CalcBaseAndBitshift+0x74>)
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40020407 	.word	0x40020407
 8005058:	bffdfff8 	.word	0xbffdfff8
 800505c:	cccccccd 	.word	0xcccccccd
 8005060:	40020000 	.word	0x40020000
 8005064:	bffdfbf8 	.word	0xbffdfbf8
 8005068:	40020400 	.word	0x40020400

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800507a:	e154      	b.n	8005326 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8146 	beq.w	8005320 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d005      	beq.n	80050ac <HAL_GPIO_Init+0x40>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d130      	bne.n	800510e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	2203      	movs	r2, #3
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050e2:	2201      	movs	r2, #1
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0201 	and.w	r2, r3, #1
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d017      	beq.n	800514a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d123      	bne.n	800519e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	08da      	lsrs	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3208      	adds	r2, #8
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	6939      	ldr	r1, [r7, #16]
 800519a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0203 	and.w	r2, r3, #3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80a0 	beq.w	8005320 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e0:	4b58      	ldr	r3, [pc, #352]	; (8005344 <HAL_GPIO_Init+0x2d8>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	4a57      	ldr	r2, [pc, #348]	; (8005344 <HAL_GPIO_Init+0x2d8>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6193      	str	r3, [r2, #24]
 80051ec:	4b55      	ldr	r3, [pc, #340]	; (8005344 <HAL_GPIO_Init+0x2d8>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051f8:	4a53      	ldr	r2, [pc, #332]	; (8005348 <HAL_GPIO_Init+0x2dc>)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	089b      	lsrs	r3, r3, #2
 80051fe:	3302      	adds	r3, #2
 8005200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	220f      	movs	r2, #15
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005222:	d019      	beq.n	8005258 <HAL_GPIO_Init+0x1ec>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a49      	ldr	r2, [pc, #292]	; (800534c <HAL_GPIO_Init+0x2e0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_GPIO_Init+0x1e8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_GPIO_Init+0x2e4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00d      	beq.n	8005250 <HAL_GPIO_Init+0x1e4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a47      	ldr	r2, [pc, #284]	; (8005354 <HAL_GPIO_Init+0x2e8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <HAL_GPIO_Init+0x1e0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a46      	ldr	r2, [pc, #280]	; (8005358 <HAL_GPIO_Init+0x2ec>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_GPIO_Init+0x1dc>
 8005244:	2304      	movs	r3, #4
 8005246:	e008      	b.n	800525a <HAL_GPIO_Init+0x1ee>
 8005248:	2305      	movs	r3, #5
 800524a:	e006      	b.n	800525a <HAL_GPIO_Init+0x1ee>
 800524c:	2303      	movs	r3, #3
 800524e:	e004      	b.n	800525a <HAL_GPIO_Init+0x1ee>
 8005250:	2302      	movs	r3, #2
 8005252:	e002      	b.n	800525a <HAL_GPIO_Init+0x1ee>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_GPIO_Init+0x1ee>
 8005258:	2300      	movs	r3, #0
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	f002 0203 	and.w	r2, r2, #3
 8005260:	0092      	lsls	r2, r2, #2
 8005262:	4093      	lsls	r3, r2
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800526a:	4937      	ldr	r1, [pc, #220]	; (8005348 <HAL_GPIO_Init+0x2dc>)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	3302      	adds	r3, #2
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005278:	4b38      	ldr	r3, [pc, #224]	; (800535c <HAL_GPIO_Init+0x2f0>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	43db      	mvns	r3, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800529c:	4a2f      	ldr	r2, [pc, #188]	; (800535c <HAL_GPIO_Init+0x2f0>)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052a2:	4b2e      	ldr	r3, [pc, #184]	; (800535c <HAL_GPIO_Init+0x2f0>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4013      	ands	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052c6:	4a25      	ldr	r2, [pc, #148]	; (800535c <HAL_GPIO_Init+0x2f0>)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052cc:	4b23      	ldr	r3, [pc, #140]	; (800535c <HAL_GPIO_Init+0x2f0>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4013      	ands	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052f0:	4a1a      	ldr	r2, [pc, #104]	; (800535c <HAL_GPIO_Init+0x2f0>)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <HAL_GPIO_Init+0x2f0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	43db      	mvns	r3, r3
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800531a:	4a10      	ldr	r2, [pc, #64]	; (800535c <HAL_GPIO_Init+0x2f0>)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	3301      	adds	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f aea3 	bne.w	800507c <HAL_GPIO_Init+0x10>
  }
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40021000 	.word	0x40021000
 8005348:	40010000 	.word	0x40010000
 800534c:	48000400 	.word	0x48000400
 8005350:	48000800 	.word	0x48000800
 8005354:	48000c00 	.word	0x48000c00
 8005358:	48001000 	.word	0x48001000
 800535c:	40010400 	.word	0x40010400

08005360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e001      	b.n	8005382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
 800539c:	4613      	mov	r3, r2
 800539e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a0:	787b      	ldrb	r3, [r7, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053ac:	e002      	b.n	80053b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e081      	b.n	80054d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb ffa2 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d107      	bne.n	800543a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	e006      	b.n	8005448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d104      	bne.n	800545a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800547c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69d9      	ldr	r1, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	461a      	mov	r2, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	817b      	strh	r3, [r7, #10]
 80054f2:	460b      	mov	r3, r1
 80054f4:	813b      	strh	r3, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	f040 80f9 	bne.w	80056fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_I2C_Mem_Write+0x34>
 800550e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0ed      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_I2C_Mem_Write+0x4e>
 800552a:	2302      	movs	r3, #2
 800552c:	e0e6      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005536:	f7fd fb8b 	bl	8002c50 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2319      	movs	r3, #25
 8005542:	2201      	movs	r2, #1
 8005544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f955 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0d1      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2221      	movs	r2, #33	; 0x21
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005580:	88f8      	ldrh	r0, [r7, #6]
 8005582:	893a      	ldrh	r2, [r7, #8]
 8005584:	8979      	ldrh	r1, [r7, #10]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4603      	mov	r3, r0
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f8b9 	bl	8005708 <I2C_RequestMemoryWrite>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0a9      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2bff      	cmp	r3, #255	; 0xff
 80055b0:	d90e      	bls.n	80055d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	8979      	ldrh	r1, [r7, #10]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 facf 	bl	8005b6c <I2C_TransferConfig>
 80055ce:	e00f      	b.n	80055f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	8979      	ldrh	r1, [r7, #10]
 80055e2:	2300      	movs	r3, #0
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fabe 	bl	8005b6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f94e 	bl	8005896 <I2C_WaitOnTXISFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e07b      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d034      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x1c8>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d130      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2200      	movs	r2, #0
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f8d1 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e04d      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2bff      	cmp	r3, #255	; 0xff
 8005668:	d90e      	bls.n	8005688 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	b2da      	uxtb	r2, r3
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	2300      	movs	r3, #0
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa73 	bl	8005b6c <I2C_TransferConfig>
 8005686:	e00f      	b.n	80056a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	b2da      	uxtb	r2, r3
 8005698:	8979      	ldrh	r1, [r7, #10]
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa62 	bl	8005b6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d19e      	bne.n	80055f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f934 	bl	8005924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e01a      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2220      	movs	r2, #32
 80056cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <HAL_I2C_Mem_Write+0x224>)
 80056da:	400b      	ands	r3, r1
 80056dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	fe00e800 	.word	0xfe00e800

08005708 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	4603      	mov	r3, r0
 8005718:	817b      	strh	r3, [r7, #10]
 800571a:	460b      	mov	r3, r1
 800571c:	813b      	strh	r3, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	8979      	ldrh	r1, [r7, #10]
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <I2C_RequestMemoryWrite+0xa4>)
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fa1b 	bl	8005b6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f8ab 	bl	8005896 <I2C_WaitOnTXISFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e02c      	b.n	80057a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	629a      	str	r2, [r3, #40]	; 0x28
 800575a:	e015      	b.n	8005788 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800575c:	893b      	ldrh	r3, [r7, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f891 	bl	8005896 <I2C_WaitOnTXISFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e012      	b.n	80057a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800577e:	893b      	ldrh	r3, [r7, #8]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2200      	movs	r2, #0
 8005790:	2180      	movs	r1, #128	; 0x80
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f830 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	80002000 	.word	0x80002000

080057b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d103      	bne.n	80057ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d007      	beq.n	80057ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	619a      	str	r2, [r3, #24]
  }
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005808:	e031      	b.n	800586e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d02d      	beq.n	800586e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005812:	f7fd fa1d 	bl	8002c50 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d122      	bne.n	800586e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	429a      	cmp	r2, r3
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	429a      	cmp	r2, r3
 8005844:	d113      	bne.n	800586e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00f      	b.n	800588e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	429a      	cmp	r2, r3
 800588a:	d0be      	beq.n	800580a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058a2:	e033      	b.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f87f 	bl	80059ac <I2C_IsErrorOccurred>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e031      	b.n	800591c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d025      	beq.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c0:	f7fd f9c6 	bl	8002c50 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11a      	bne.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d013      	beq.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e007      	b.n	800591c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d1c4      	bne.n	80058a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005930:	e02f      	b.n	8005992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f838 	bl	80059ac <I2C_IsErrorOccurred>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e02d      	b.n	80059a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005946:	f7fd f983 	bl	8002c50 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	d302      	bcc.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11a      	bne.n	8005992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b20      	cmp	r3, #32
 8005968:	d013      	beq.n	8005992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	f043 0220 	orr.w	r2, r3, #32
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e007      	b.n	80059a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b20      	cmp	r3, #32
 800599e:	d1c8      	bne.n	8005932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d068      	beq.n	8005aaa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059e0:	e049      	b.n	8005a76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d045      	beq.n	8005a76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fd f931 	bl	8002c50 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <I2C_IsErrorOccurred+0x54>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d13a      	bne.n	8005a76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a22:	d121      	bne.n	8005a68 <I2C_IsErrorOccurred+0xbc>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a2a:	d01d      	beq.n	8005a68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d01a      	beq.n	8005a68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a42:	f7fd f905 	bl	8002c50 <HAL_GetTick>
 8005a46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a48:	e00e      	b.n	8005a68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a4a:	f7fd f901 	bl	8002c50 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b19      	cmp	r3, #25
 8005a56:	d907      	bls.n	8005a68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f043 0320 	orr.w	r3, r3, #32
 8005a5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005a66:	e006      	b.n	8005a76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d1e9      	bne.n	8005a4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d003      	beq.n	8005a8c <I2C_IsErrorOccurred+0xe0>
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0aa      	beq.n	80059e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f043 0308 	orr.w	r3, r3, #8
 8005ae4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f043 0302 	orr.w	r3, r3, #2
 8005b06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fe45 	bl	80057b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <I2C_IsErrorOccurred+0x1bc>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	fe00e800 	.word	0xfe00e800

08005b6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b84:	7a7b      	ldrb	r3, [r7, #9]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	0d5b      	lsrs	r3, r3, #21
 8005ba6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <I2C_TransferConfig+0x60>)
 8005bac:	430b      	orrs	r3, r1
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	ea02 0103 	and.w	r1, r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	03ff63ff 	.word	0x03ff63ff

08005bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d138      	bne.n	8005c58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e032      	b.n	8005c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d139      	bne.n	8005cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e033      	b.n	8005cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2224      	movs	r2, #36	; 0x24
 8005c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f001 b823 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 817d 	beq.w	8006036 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d3c:	4bbc      	ldr	r3, [pc, #752]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d00c      	beq.n	8005d62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d48:	4bb9      	ldr	r3, [pc, #740]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d15c      	bne.n	8005e0e <HAL_RCC_OscConfig+0x10e>
 8005d54:	4bb6      	ldr	r3, [pc, #728]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d155      	bne.n	8005e0e <HAL_RCC_OscConfig+0x10e>
 8005d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005d6e:	fa93 f3a3 	rbit	r3, r3
 8005d72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7a:	fab3 f383 	clz	r3, r3
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_RCC_OscConfig+0x94>
 8005d8e:	4ba8      	ldr	r3, [pc, #672]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	e015      	b.n	8005dc0 <HAL_RCC_OscConfig+0xc0>
 8005d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005da0:	fa93 f3a3 	rbit	r3, r3
 8005da4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005db0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005db4:	fa93 f3a3 	rbit	r3, r3
 8005db8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005dbc:	4b9c      	ldr	r3, [pc, #624]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dc4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005dc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005dcc:	fa92 f2a2 	rbit	r2, r2
 8005dd0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005dd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f042 0220 	orr.w	r2, r2, #32
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	f002 021f 	and.w	r2, r2, #31
 8005de8:	2101      	movs	r1, #1
 8005dea:	fa01 f202 	lsl.w	r2, r1, r2
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 811f 	beq.w	8006034 <HAL_RCC_OscConfig+0x334>
 8005df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 8116 	bne.w	8006034 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f000 bfaf 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x12e>
 8005e20:	4b83      	ldr	r3, [pc, #524]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a82      	ldr	r2, [pc, #520]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e036      	b.n	8005e9c <HAL_RCC_OscConfig+0x19c>
 8005e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x158>
 8005e3e:	4b7c      	ldr	r3, [pc, #496]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a7b      	ldr	r2, [pc, #492]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	4b79      	ldr	r3, [pc, #484]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a78      	ldr	r2, [pc, #480]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e021      	b.n	8005e9c <HAL_RCC_OscConfig+0x19c>
 8005e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x184>
 8005e6a:	4b71      	ldr	r3, [pc, #452]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a70      	ldr	r2, [pc, #448]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	4b6e      	ldr	r3, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a6d      	ldr	r2, [pc, #436]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e00b      	b.n	8005e9c <HAL_RCC_OscConfig+0x19c>
 8005e84:	4b6a      	ldr	r3, [pc, #424]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a69      	ldr	r2, [pc, #420]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4b67      	ldr	r3, [pc, #412]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a66      	ldr	r2, [pc, #408]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f023 020f 	bic.w	r2, r3, #15
 8005ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	495f      	ldr	r1, [pc, #380]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d059      	beq.n	8005f7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fec3 	bl	8002c50 <HAL_GetTick>
 8005eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fc febe 	bl	8002c50 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b64      	cmp	r3, #100	; 0x64
 8005ede:	d902      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	f000 bf43 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 8005ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005ef2:	fa93 f3a3 	rbit	r3, r3
 8005ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005efa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_RCC_OscConfig+0x218>
 8005f12:	4b47      	ldr	r3, [pc, #284]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e015      	b.n	8005f44 <HAL_RCC_OscConfig+0x244>
 8005f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005f24:	fa93 f3a3 	rbit	r3, r3
 8005f28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005f34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005f38:	fa93 f3a3 	rbit	r3, r3
 8005f3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005f4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005f50:	fa92 f2a2 	rbit	r2, r2
 8005f54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005f58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005f5c:	fab2 f282 	clz	r2, r2
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	f042 0220 	orr.w	r2, r2, #32
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	f002 021f 	and.w	r2, r2, #31
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0ab      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x1d0>
 8005f78:	e05d      	b.n	8006036 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7fc fe69 	bl	8002c50 <HAL_GetTick>
 8005f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fc fe64 	bl	8002c50 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b64      	cmp	r3, #100	; 0x64
 8005f92:	d902      	bls.n	8005f9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	f000 bee9 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 8005f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005fa6:	fa93 f3a3 	rbit	r3, r3
 8005faa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005fae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb2:	fab3 f383 	clz	r3, r3
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <HAL_RCC_OscConfig+0x2cc>
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	e015      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2f8>
 8005fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fd0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005fd8:	fa93 f3a3 	rbit	r3, r3
 8005fdc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fe4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005fe8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005fec:	fa93 f3a3 	rbit	r3, r3
 8005ff0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ffc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006000:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006004:	fa92 f2a2 	rbit	r2, r2
 8006008:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800600c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006010:	fab2 f282 	clz	r2, r2
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	f042 0220 	orr.w	r2, r2, #32
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	f002 021f 	and.w	r2, r2, #31
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f202 	lsl.w	r2, r1, r2
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ab      	bne.n	8005f84 <HAL_RCC_OscConfig+0x284>
 800602c:	e003      	b.n	8006036 <HAL_RCC_OscConfig+0x336>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 817d 	beq.w	8006346 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800604c:	4ba6      	ldr	r3, [pc, #664]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 030c 	and.w	r3, r3, #12
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006058:	4ba3      	ldr	r3, [pc, #652]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 030c 	and.w	r3, r3, #12
 8006060:	2b08      	cmp	r3, #8
 8006062:	d172      	bne.n	800614a <HAL_RCC_OscConfig+0x44a>
 8006064:	4ba0      	ldr	r3, [pc, #640]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d16c      	bne.n	800614a <HAL_RCC_OscConfig+0x44a>
 8006070:	2302      	movs	r3, #2
 8006072:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800607a:	fa93 f3a3 	rbit	r3, r3
 800607e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006082:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006086:	fab3 f383 	clz	r3, r3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d102      	bne.n	80060a0 <HAL_RCC_OscConfig+0x3a0>
 800609a:	4b93      	ldr	r3, [pc, #588]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	e013      	b.n	80060c8 <HAL_RCC_OscConfig+0x3c8>
 80060a0:	2302      	movs	r3, #2
 80060a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80060aa:	fa93 f3a3 	rbit	r3, r3
 80060ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80060b2:	2302      	movs	r3, #2
 80060b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80060b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80060c4:	4b88      	ldr	r3, [pc, #544]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2202      	movs	r2, #2
 80060ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80060ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80060d2:	fa92 f2a2 	rbit	r2, r2
 80060d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80060da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80060de:	fab2 f282 	clz	r2, r2
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	f042 0220 	orr.w	r2, r2, #32
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	f002 021f 	and.w	r2, r2, #31
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f202 	lsl.w	r2, r1, r2
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCC_OscConfig+0x410>
 80060fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d002      	beq.n	8006110 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f000 be2e 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006110:	4b75      	ldr	r3, [pc, #468]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800611c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	21f8      	movs	r1, #248	; 0xf8
 8006126:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800612e:	fa91 f1a1 	rbit	r1, r1
 8006132:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006136:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800613a:	fab1 f181 	clz	r1, r1
 800613e:	b2c9      	uxtb	r1, r1
 8006140:	408b      	lsls	r3, r1
 8006142:	4969      	ldr	r1, [pc, #420]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006148:	e0fd      	b.n	8006346 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8088 	beq.w	800626c <HAL_RCC_OscConfig+0x56c>
 800615c:	2301      	movs	r3, #1
 800615e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006166:	fa93 f3a3 	rbit	r3, r3
 800616a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800616e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006172:	fab3 f383 	clz	r3, r3
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800617c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	461a      	mov	r2, r3
 8006184:	2301      	movs	r3, #1
 8006186:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006188:	f7fc fd62 	bl	8002c50 <HAL_GetTick>
 800618c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006190:	e00a      	b.n	80061a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006192:	f7fc fd5d 	bl	8002c50 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d902      	bls.n	80061a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	f000 bde2 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80061b2:	fa93 f3a3 	rbit	r3, r3
 80061b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80061ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061be:	fab3 f383 	clz	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d102      	bne.n	80061d8 <HAL_RCC_OscConfig+0x4d8>
 80061d2:	4b45      	ldr	r3, [pc, #276]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	e013      	b.n	8006200 <HAL_RCC_OscConfig+0x500>
 80061d8:	2302      	movs	r3, #2
 80061da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80061e2:	fa93 f3a3 	rbit	r3, r3
 80061e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80061ea:	2302      	movs	r3, #2
 80061ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80061f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80061f4:	fa93 f3a3 	rbit	r3, r3
 80061f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80061fc:	4b3a      	ldr	r3, [pc, #232]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2202      	movs	r2, #2
 8006202:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006206:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800620a:	fa92 f2a2 	rbit	r2, r2
 800620e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006212:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006216:	fab2 f282 	clz	r2, r2
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	f042 0220 	orr.w	r2, r2, #32
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	f002 021f 	and.w	r2, r2, #31
 8006226:	2101      	movs	r1, #1
 8006228:	fa01 f202 	lsl.w	r2, r1, r2
 800622c:	4013      	ands	r3, r2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0af      	beq.n	8006192 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006232:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	21f8      	movs	r1, #248	; 0xf8
 8006248:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006250:	fa91 f1a1 	rbit	r1, r1
 8006254:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006258:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800625c:	fab1 f181 	clz	r1, r1
 8006260:	b2c9      	uxtb	r1, r1
 8006262:	408b      	lsls	r3, r1
 8006264:	4920      	ldr	r1, [pc, #128]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
 800626a:	e06c      	b.n	8006346 <HAL_RCC_OscConfig+0x646>
 800626c:	2301      	movs	r3, #1
 800626e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800627e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006282:	fab3 f383 	clz	r3, r3
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800628c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fc fcda 	bl	8002c50 <HAL_GetTick>
 800629c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a2:	f7fc fcd5 	bl	8002c50 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d902      	bls.n	80062b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	f000 bd5a 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 80062b8:	2302      	movs	r3, #2
 80062ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062c2:	fa93 f3a3 	rbit	r3, r3
 80062c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80062ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ce:	fab3 f383 	clz	r3, r3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d104      	bne.n	80062ec <HAL_RCC_OscConfig+0x5ec>
 80062e2:	4b01      	ldr	r3, [pc, #4]	; (80062e8 <HAL_RCC_OscConfig+0x5e8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	e015      	b.n	8006314 <HAL_RCC_OscConfig+0x614>
 80062e8:	40021000 	.word	0x40021000
 80062ec:	2302      	movs	r3, #2
 80062ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062fe:	2302      	movs	r3, #2
 8006300:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006304:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006308:	fa93 f3a3 	rbit	r3, r3
 800630c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006310:	4bc8      	ldr	r3, [pc, #800]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	2202      	movs	r2, #2
 8006316:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800631a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800631e:	fa92 f2a2 	rbit	r2, r2
 8006322:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006326:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800632a:	fab2 f282 	clz	r2, r2
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	f042 0220 	orr.w	r2, r2, #32
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	f002 021f 	and.w	r2, r2, #31
 800633a:	2101      	movs	r1, #1
 800633c:	fa01 f202 	lsl.w	r2, r1, r2
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1ad      	bne.n	80062a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800634a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8110 	beq.w	800657c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800635c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d079      	beq.n	8006460 <HAL_RCC_OscConfig+0x760>
 800636c:	2301      	movs	r3, #1
 800636e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800637e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006382:	fab3 f383 	clz	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	4bab      	ldr	r3, [pc, #684]	; (8006638 <HAL_RCC_OscConfig+0x938>)
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	461a      	mov	r2, r3
 8006392:	2301      	movs	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006396:	f7fc fc5b 	bl	8002c50 <HAL_GetTick>
 800639a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a0:	f7fc fc56 	bl	8002c50 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d902      	bls.n	80063b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	f000 bcdb 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 80063b6:	2302      	movs	r3, #2
 80063b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063c0:	fa93 f3a3 	rbit	r3, r3
 80063c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80063d0:	2202      	movs	r2, #2
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	fa93 f2a3 	rbit	r2, r3
 80063e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	2202      	movs	r2, #2
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	fa93 f2a3 	rbit	r2, r3
 8006406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800640a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800640e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006410:	4b88      	ldr	r3, [pc, #544]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 8006412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800641c:	2102      	movs	r1, #2
 800641e:	6019      	str	r1, [r3, #0]
 8006420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006424:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	fa93 f1a3 	rbit	r1, r3
 800642e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006432:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006436:	6019      	str	r1, [r3, #0]
  return result;
 8006438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800643c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2101      	movs	r1, #1
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0a0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x6a0>
 800645e:	e08d      	b.n	800657c <HAL_RCC_OscConfig+0x87c>
 8006460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006464:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006470:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	fa93 f2a3 	rbit	r2, r3
 800647a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800647e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006482:	601a      	str	r2, [r3, #0]
  return result;
 8006484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006488:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800648c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800648e:	fab3 f383 	clz	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	4b68      	ldr	r3, [pc, #416]	; (8006638 <HAL_RCC_OscConfig+0x938>)
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	461a      	mov	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a2:	f7fc fbd5 	bl	8002c50 <HAL_GetTick>
 80064a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ac:	f7fc fbd0 	bl	8002c50 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d902      	bls.n	80064c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	f000 bc55 	b.w	8006d6c <HAL_RCC_OscConfig+0x106c>
 80064c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064ca:	2202      	movs	r2, #2
 80064cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	fa93 f2a3 	rbit	r2, r3
 80064dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80064ee:	2202      	movs	r2, #2
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	fa93 f2a3 	rbit	r2, r3
 8006500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	2202      	movs	r2, #2
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	fa93 f2a3 	rbit	r2, r3
 8006524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006528:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800652c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800652e:	4b41      	ldr	r3, [pc, #260]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 8006530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006536:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800653a:	2102      	movs	r1, #2
 800653c:	6019      	str	r1, [r3, #0]
 800653e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006542:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	fa93 f1a3 	rbit	r1, r3
 800654c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006550:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006554:	6019      	str	r1, [r3, #0]
  return result;
 8006556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	fab3 f383 	clz	r3, r3
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f303 	lsl.w	r3, r1, r3
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d197      	bne.n	80064ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 81a1 	beq.w	80068d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d116      	bne.n	80065d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	61d3      	str	r3, [r2, #28]
 80065b0:	4b20      	ldr	r3, [pc, #128]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80065b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80065ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	4b1a      	ldr	r3, [pc, #104]	; (800663c <HAL_RCC_OscConfig+0x93c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11a      	bne.n	8006614 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065de:	4b17      	ldr	r3, [pc, #92]	; (800663c <HAL_RCC_OscConfig+0x93c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a16      	ldr	r2, [pc, #88]	; (800663c <HAL_RCC_OscConfig+0x93c>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fc fb31 	bl	8002c50 <HAL_GetTick>
 80065ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f2:	e009      	b.n	8006608 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f4:	f7fc fb2c 	bl	8002c50 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b64      	cmp	r3, #100	; 0x64
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e3b1      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <HAL_RCC_OscConfig+0x93c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ef      	beq.n	80065f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10d      	bne.n	8006640 <HAL_RCC_OscConfig+0x940>
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	4a02      	ldr	r2, [pc, #8]	; (8006634 <HAL_RCC_OscConfig+0x934>)
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	6213      	str	r3, [r2, #32]
 8006630:	e03c      	b.n	80066ac <HAL_RCC_OscConfig+0x9ac>
 8006632:	bf00      	nop
 8006634:	40021000 	.word	0x40021000
 8006638:	10908120 	.word	0x10908120
 800663c:	40007000 	.word	0x40007000
 8006640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <HAL_RCC_OscConfig+0x96a>
 8006650:	4bc1      	ldr	r3, [pc, #772]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4ac0      	ldr	r2, [pc, #768]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	6213      	str	r3, [r2, #32]
 800665c:	4bbe      	ldr	r3, [pc, #760]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	4abd      	ldr	r2, [pc, #756]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006662:	f023 0304 	bic.w	r3, r3, #4
 8006666:	6213      	str	r3, [r2, #32]
 8006668:	e020      	b.n	80066ac <HAL_RCC_OscConfig+0x9ac>
 800666a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x994>
 800667a:	4bb7      	ldr	r3, [pc, #732]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	4ab6      	ldr	r2, [pc, #728]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6213      	str	r3, [r2, #32]
 8006686:	4bb4      	ldr	r3, [pc, #720]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4ab3      	ldr	r2, [pc, #716]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6213      	str	r3, [r2, #32]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x9ac>
 8006694:	4bb0      	ldr	r3, [pc, #704]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	4aaf      	ldr	r2, [pc, #700]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	6213      	str	r3, [r2, #32]
 80066a0:	4bad      	ldr	r3, [pc, #692]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	4aac      	ldr	r2, [pc, #688]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 80066a6:	f023 0304 	bic.w	r3, r3, #4
 80066aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8081 	beq.w	80067c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fc fac7 	bl	8002c50 <HAL_GetTick>
 80066c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c6:	e00b      	b.n	80066e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fc fac2 	bl	8002c50 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e345      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
 80066e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80066e8:	2202      	movs	r2, #2
 80066ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	fa93 f2a3 	rbit	r2, r3
 80066fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006708:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800670c:	2202      	movs	r2, #2
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006714:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	fa93 f2a3 	rbit	r2, r3
 800671e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006722:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006726:	601a      	str	r2, [r3, #0]
  return result;
 8006728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800672c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006730:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006732:	fab3 f383 	clz	r3, r3
 8006736:	b2db      	uxtb	r3, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f043 0302 	orr.w	r3, r3, #2
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d102      	bne.n	800674c <HAL_RCC_OscConfig+0xa4c>
 8006746:	4b84      	ldr	r3, [pc, #528]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	e013      	b.n	8006774 <HAL_RCC_OscConfig+0xa74>
 800674c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006750:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006754:	2202      	movs	r2, #2
 8006756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800675c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	fa93 f2a3 	rbit	r2, r3
 8006766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800676a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	4b79      	ldr	r3, [pc, #484]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006778:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800677c:	2102      	movs	r1, #2
 800677e:	6011      	str	r1, [r2, #0]
 8006780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006784:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	fa92 f1a2 	rbit	r1, r2
 800678e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006792:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006796:	6011      	str	r1, [r2, #0]
  return result;
 8006798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800679c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	fab2 f282 	clz	r2, r2
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	f002 021f 	and.w	r2, r2, #31
 80067b2:	2101      	movs	r1, #1
 80067b4:	fa01 f202 	lsl.w	r2, r1, r2
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d084      	beq.n	80066c8 <HAL_RCC_OscConfig+0x9c8>
 80067be:	e07f      	b.n	80068c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c0:	f7fc fa46 	bl	8002c50 <HAL_GetTick>
 80067c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c8:	e00b      	b.n	80067e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fc fa41 	bl	8002c50 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e2c4      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
 80067e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80067ea:	2202      	movs	r2, #2
 80067ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	fa93 f2a3 	rbit	r2, r3
 80067fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006800:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800680a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800680e:	2202      	movs	r2, #2
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006816:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	fa93 f2a3 	rbit	r2, r3
 8006820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006824:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006828:	601a      	str	r2, [r3, #0]
  return result;
 800682a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006832:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006834:	fab3 f383 	clz	r3, r3
 8006838:	b2db      	uxtb	r3, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f043 0302 	orr.w	r3, r3, #2
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d102      	bne.n	800684e <HAL_RCC_OscConfig+0xb4e>
 8006848:	4b43      	ldr	r3, [pc, #268]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	e013      	b.n	8006876 <HAL_RCC_OscConfig+0xb76>
 800684e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006852:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006856:	2202      	movs	r2, #2
 8006858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800685e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	fa93 f2a3 	rbit	r2, r3
 8006868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	4b39      	ldr	r3, [pc, #228]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800687a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800687e:	2102      	movs	r1, #2
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006886:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	fa92 f1a2 	rbit	r1, r2
 8006890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006894:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006898:	6011      	str	r1, [r2, #0]
  return result;
 800689a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800689e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	f002 021f 	and.w	r2, r2, #31
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f202 	lsl.w	r2, r1, r2
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d184      	bne.n	80067ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d105      	bne.n	80068d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4a22      	ldr	r2, [pc, #136]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 80068ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8242 	beq.w	8006d6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068e6:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <HAL_RCC_OscConfig+0xc58>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	f000 8213 	beq.w	8006d1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	2b02      	cmp	r3, #2
 8006902:	f040 8162 	bne.w	8006bca <HAL_RCC_OscConfig+0xeca>
 8006906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800690a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800690e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006918:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	fa93 f2a3 	rbit	r2, r3
 8006922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006926:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800692a:	601a      	str	r2, [r3, #0]
  return result;
 800692c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006930:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006934:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	fab3 f383 	clz	r3, r3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	461a      	mov	r2, r3
 8006948:	2300      	movs	r3, #0
 800694a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fc f980 	bl	8002c50 <HAL_GetTick>
 8006950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006954:	e00c      	b.n	8006970 <HAL_RCC_OscConfig+0xc70>
 8006956:	bf00      	nop
 8006958:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695c:	f7fc f978 	bl	8002c50 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1fd      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
 8006970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006974:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800697c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006982:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	fa93 f2a3 	rbit	r2, r3
 800698c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006990:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006994:	601a      	str	r2, [r3, #0]
  return result;
 8006996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800699a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800699e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a0:	fab3 f383 	clz	r3, r3
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d102      	bne.n	80069ba <HAL_RCC_OscConfig+0xcba>
 80069b4:	4bb0      	ldr	r3, [pc, #704]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	e027      	b.n	8006a0a <HAL_RCC_OscConfig+0xd0a>
 80069ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80069c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	fa93 f2a3 	rbit	r2, r3
 80069d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80069e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	fa93 f2a3 	rbit	r2, r3
 80069fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4b9c      	ldr	r3, [pc, #624]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006a12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a16:	6011      	str	r1, [r2, #0]
 8006a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	fa92 f1a2 	rbit	r1, r2
 8006a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006a2e:	6011      	str	r1, [r2, #0]
  return result;
 8006a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	fab2 f282 	clz	r2, r2
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	f042 0220 	orr.w	r2, r2, #32
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	f002 021f 	and.w	r2, r2, #31
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d182      	bne.n	800695c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a56:	4b88      	ldr	r3, [pc, #544]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	497f      	ldr	r1, [pc, #508]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	604b      	str	r3, [r1, #4]
 8006a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	fa93 f2a3 	rbit	r2, r3
 8006a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006aa2:	601a      	str	r2, [r3, #0]
  return result;
 8006aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006aac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aae:	fab3 f383 	clz	r3, r3
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fc f8c4 	bl	8002c50 <HAL_GetTick>
 8006ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006acc:	e009      	b.n	8006ae2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fc f8bf 	bl	8002c50 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e144      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
 8006ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	fa93 f2a3 	rbit	r2, r3
 8006afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006b06:	601a      	str	r2, [r3, #0]
  return result;
 8006b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b12:	fab3 f383 	clz	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d102      	bne.n	8006b2c <HAL_RCC_OscConfig+0xe2c>
 8006b26:	4b54      	ldr	r3, [pc, #336]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	e027      	b.n	8006b7c <HAL_RCC_OscConfig+0xe7c>
 8006b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	fa93 f2a3 	rbit	r2, r3
 8006b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	fa93 f2a3 	rbit	r2, r3
 8006b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	4b3f      	ldr	r3, [pc, #252]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	fa92 f1a2 	rbit	r1, r2
 8006b98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ba0:	6011      	str	r1, [r2, #0]
  return result;
 8006ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ba6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	fab2 f282 	clz	r2, r2
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	f042 0220 	orr.w	r2, r2, #32
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	f002 021f 	and.w	r2, r2, #31
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d082      	beq.n	8006ace <HAL_RCC_OscConfig+0xdce>
 8006bc8:	e0cf      	b.n	8006d6a <HAL_RCC_OscConfig+0x106a>
 8006bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bdc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	fa93 f2a3 	rbit	r2, r3
 8006be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006bee:	601a      	str	r2, [r3, #0]
  return result;
 8006bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bf4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006bf8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfa:	fab3 f383 	clz	r3, r3
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fc f81e 	bl	8002c50 <HAL_GetTick>
 8006c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c18:	e009      	b.n	8006c2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fc f819 	bl	8002c50 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e09e      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
 8006c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	fa93 f2a3 	rbit	r2, r3
 8006c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006c52:	601a      	str	r2, [r3, #0]
  return result;
 8006c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006c5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c5e:	fab3 f383 	clz	r3, r3
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d104      	bne.n	8006c7c <HAL_RCC_OscConfig+0xf7c>
 8006c72:	4b01      	ldr	r3, [pc, #4]	; (8006c78 <HAL_RCC_OscConfig+0xf78>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	e029      	b.n	8006ccc <HAL_RCC_OscConfig+0xfcc>
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	fa93 f2a3 	rbit	r2, r3
 8006c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ca6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	fa93 f2a3 	rbit	r2, r3
 8006cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	; (8006d78 <HAL_RCC_OscConfig+0x1078>)
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006cd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006cd8:	6011      	str	r1, [r2, #0]
 8006cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	fa92 f1a2 	rbit	r1, r2
 8006ce8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006cf0:	6011      	str	r1, [r2, #0]
  return result;
 8006cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cf6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	fab2 f282 	clz	r2, r2
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	f042 0220 	orr.w	r2, r2, #32
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	f002 021f 	and.w	r2, r2, #31
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d180      	bne.n	8006c1a <HAL_RCC_OscConfig+0xf1a>
 8006d18:	e027      	b.n	8006d6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e01e      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_RCC_OscConfig+0x1078>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006d3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d10b      	bne.n	8006d66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006d4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d001      	beq.n	8006d6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000

08006d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b09e      	sub	sp, #120	; 0x78
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e162      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d94:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d910      	bls.n	8006dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b8d      	ldr	r3, [pc, #564]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f023 0207 	bic.w	r2, r3, #7
 8006daa:	498b      	ldr	r1, [pc, #556]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db2:	4b89      	ldr	r3, [pc, #548]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e14a      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd0:	4b82      	ldr	r3, [pc, #520]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	497f      	ldr	r1, [pc, #508]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80dc 	beq.w	8006fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d13c      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xf6>
 8006df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e00:	fa93 f3a3 	rbit	r3, r3
 8006e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e08:	fab3 f383 	clz	r3, r3
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xa6>
 8006e1c:	4b6f      	ldr	r3, [pc, #444]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	e00f      	b.n	8006e42 <HAL_RCC_ClockConfig+0xc6>
 8006e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e2a:	fa93 f3a3 	rbit	r3, r3
 8006e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8006e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e34:	663b      	str	r3, [r7, #96]	; 0x60
 8006e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e38:	fa93 f3a3 	rbit	r3, r3
 8006e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3e:	4b67      	ldr	r3, [pc, #412]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e4a:	fa92 f2a2 	rbit	r2, r2
 8006e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e52:	fab2 f282 	clz	r2, r2
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	f042 0220 	orr.w	r2, r2, #32
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	f002 021f 	and.w	r2, r2, #31
 8006e62:	2101      	movs	r1, #1
 8006e64:	fa01 f202 	lsl.w	r2, r1, r2
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d17b      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e0f3      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d13c      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x178>
 8006e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e82:	fa93 f3a3 	rbit	r3, r3
 8006e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	fab3 f383 	clz	r3, r3
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d102      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x128>
 8006e9e:	4b4f      	ldr	r3, [pc, #316]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	e00f      	b.n	8006ec4 <HAL_RCC_ClockConfig+0x148>
 8006ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eac:	fa93 f3a3 	rbit	r3, r3
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eba:	fa93 f3a3 	rbit	r3, r3
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	4b46      	ldr	r3, [pc, #280]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8006eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ecc:	fa92 f2a2 	rbit	r2, r2
 8006ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ed4:	fab2 f282 	clz	r2, r2
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	f042 0220 	orr.w	r2, r2, #32
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	f002 021f 	and.w	r2, r2, #31
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13a      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0b2      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	fa93 f3a3 	rbit	r3, r3
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f02:	fab3 f383 	clz	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d102      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x1a0>
 8006f16:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	e00d      	b.n	8006f38 <HAL_RCC_ClockConfig+0x1bc>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	fa93 f3a3 	rbit	r3, r3
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
 8006f28:	2302      	movs	r3, #2
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	fa93 f3a3 	rbit	r3, r3
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2202      	movs	r2, #2
 8006f3a:	61ba      	str	r2, [r7, #24]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	fa92 f2a2 	rbit	r2, r2
 8006f42:	617a      	str	r2, [r7, #20]
  return result;
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	fab2 f282 	clz	r2, r2
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	f042 0220 	orr.w	r2, r2, #32
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	f002 021f 	and.w	r2, r2, #31
 8006f56:	2101      	movs	r1, #1
 8006f58:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e079      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f66:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f023 0203 	bic.w	r2, r3, #3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	491a      	ldr	r1, [pc, #104]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f78:	f7fb fe6a 	bl	8002c50 <HAL_GetTick>
 8006f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7e:	e00a      	b.n	8006f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f80:	f7fb fe66 	bl	8002c50 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e061      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <HAL_RCC_ClockConfig+0x260>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f003 020c 	and.w	r2, r3, #12
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d1eb      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d214      	bcs.n	8006fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb6:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 0207 	bic.w	r2, r3, #7
 8006fbe:	4906      	ldr	r1, [pc, #24]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <HAL_RCC_ClockConfig+0x25c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e040      	b.n	800705a <HAL_RCC_ClockConfig+0x2de>
 8006fd8:	40022000 	.word	0x40022000
 8006fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_RCC_ClockConfig+0x2e8>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	491a      	ldr	r1, [pc, #104]	; (8007064 <HAL_RCC_ClockConfig+0x2e8>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800700a:	4b16      	ldr	r3, [pc, #88]	; (8007064 <HAL_RCC_ClockConfig+0x2e8>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4912      	ldr	r1, [pc, #72]	; (8007064 <HAL_RCC_ClockConfig+0x2e8>)
 800701a:	4313      	orrs	r3, r2
 800701c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800701e:	f000 f829 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8007022:	4601      	mov	r1, r0
 8007024:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <HAL_RCC_ClockConfig+0x2e8>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702c:	22f0      	movs	r2, #240	; 0xf0
 800702e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	fa92 f2a2 	rbit	r2, r2
 8007036:	60fa      	str	r2, [r7, #12]
  return result;
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	fab2 f282 	clz	r2, r2
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	40d3      	lsrs	r3, r2
 8007042:	4a09      	ldr	r2, [pc, #36]	; (8007068 <HAL_RCC_ClockConfig+0x2ec>)
 8007044:	5cd3      	ldrb	r3, [r2, r3]
 8007046:	fa21 f303 	lsr.w	r3, r1, r3
 800704a:	4a08      	ldr	r2, [pc, #32]	; (800706c <HAL_RCC_ClockConfig+0x2f0>)
 800704c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_RCC_ClockConfig+0x2f4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fb fdb8 	bl	8002bc8 <HAL_InitTick>
  
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3778      	adds	r7, #120	; 0x78
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40021000 	.word	0x40021000
 8007068:	0800f37c 	.word	0x0800f37c
 800706c:	20000008 	.word	0x20000008
 8007070:	2000000c 	.word	0x2000000c

08007074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007074:	b480      	push	{r7}
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800708e:	4b29      	ldr	r3, [pc, #164]	; (8007134 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b04      	cmp	r3, #4
 800709c:	d002      	beq.n	80070a4 <HAL_RCC_GetSysClockFreq+0x30>
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d003      	beq.n	80070aa <HAL_RCC_GetSysClockFreq+0x36>
 80070a2:	e03c      	b.n	800711e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070a4:	4b24      	ldr	r3, [pc, #144]	; (8007138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80070a6:	623b      	str	r3, [r7, #32]
      break;
 80070a8:	e03c      	b.n	8007124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80070b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80070b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	fa92 f2a2 	rbit	r2, r2
 80070bc:	607a      	str	r2, [r7, #4]
  return result;
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	fab2 f282 	clz	r2, r2
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	40d3      	lsrs	r3, r2
 80070c8:	4a1c      	ldr	r2, [pc, #112]	; (800713c <HAL_RCC_GetSysClockFreq+0xc8>)
 80070ca:	5cd3      	ldrb	r3, [r2, r3]
 80070cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80070ce:	4b19      	ldr	r3, [pc, #100]	; (8007134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	220f      	movs	r2, #15
 80070d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	fa92 f2a2 	rbit	r2, r2
 80070e0:	60fa      	str	r2, [r7, #12]
  return result;
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	fab2 f282 	clz	r2, r2
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	40d3      	lsrs	r3, r2
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070ee:	5cd3      	ldrb	r3, [r2, r3]
 80070f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070fc:	4a0e      	ldr	r2, [pc, #56]	; (8007138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	fbb2 f2f3 	udiv	r2, r2, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
 800710c:	e004      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	623b      	str	r3, [r7, #32]
      break;
 800711c:	e002      	b.n	8007124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007120:	623b      	str	r3, [r7, #32]
      break;
 8007122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007124:	6a3b      	ldr	r3, [r7, #32]
}
 8007126:	4618      	mov	r0, r3
 8007128:	372c      	adds	r7, #44	; 0x2c
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40021000 	.word	0x40021000
 8007138:	007a1200 	.word	0x007a1200
 800713c:	0800f394 	.word	0x0800f394
 8007140:	0800f3a4 	.word	0x0800f3a4
 8007144:	003d0900 	.word	0x003d0900

08007148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800714c:	4b03      	ldr	r3, [pc, #12]	; (800715c <HAL_RCC_GetHCLKFreq+0x14>)
 800714e:	681b      	ldr	r3, [r3, #0]
}
 8007150:	4618      	mov	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000008 	.word	0x20000008

08007160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007166:	f7ff ffef 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 800716a:	4601      	mov	r1, r0
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007174:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007178:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	fa92 f2a2 	rbit	r2, r2
 8007180:	603a      	str	r2, [r7, #0]
  return result;
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	fab2 f282 	clz	r2, r2
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	40d3      	lsrs	r3, r2
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800718e:	5cd3      	ldrb	r3, [r2, r3]
 8007190:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000
 80071a0:	0800f38c 	.word	0x0800f38c

080071a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80071aa:	f7ff ffcd 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 80071ae:	4601      	mov	r1, r0
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80071b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80071bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	fa92 f2a2 	rbit	r2, r2
 80071c4:	603a      	str	r2, [r7, #0]
  return result;
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	fab2 f282 	clz	r2, r2
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	40d3      	lsrs	r3, r2
 80071d0:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80071d2:	5cd3      	ldrb	r3, [r2, r3]
 80071d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40021000 	.word	0x40021000
 80071e4:	0800f38c 	.word	0x0800f38c

080071e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b092      	sub	sp, #72	; 0x48
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80d4 	beq.w	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720c:	4b4e      	ldr	r3, [pc, #312]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10e      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007218:	4b4b      	ldr	r3, [pc, #300]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	4a4a      	ldr	r2, [pc, #296]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	61d3      	str	r3, [r2, #28]
 8007224:	4b48      	ldr	r3, [pc, #288]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007236:	4b45      	ldr	r3, [pc, #276]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	2b00      	cmp	r3, #0
 8007240:	d118      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007242:	4b42      	ldr	r3, [pc, #264]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a41      	ldr	r2, [pc, #260]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724e:	f7fb fcff 	bl	8002c50 <HAL_GetTick>
 8007252:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007254:	e008      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fb fcfb 	bl	8002c50 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b64      	cmp	r3, #100	; 0x64
 8007262:	d901      	bls.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e169      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	4b38      	ldr	r3, [pc, #224]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007274:	4b34      	ldr	r3, [pc, #208]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8084 	beq.w	800738e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007290:	429a      	cmp	r2, r3
 8007292:	d07c      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	461a      	mov	r2, r3
 80072be:	2301      	movs	r3, #1
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	fa93 f3a3 	rbit	r3, r3
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d2:	fab3 f383 	clz	r3, r3
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	4b1d      	ldr	r3, [pc, #116]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	461a      	mov	r2, r3
 80072e2:	2300      	movs	r3, #0
 80072e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072e6:	4a18      	ldr	r2, [pc, #96]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d04b      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f6:	f7fb fcab 	bl	8002c50 <HAL_GetTick>
 80072fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fc:	e00a      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fe:	f7fb fca7 	bl	8002c50 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	; 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e113      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007314:	2302      	movs	r3, #2
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
 8007320:	2302      	movs	r3, #2
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	fa93 f3a3 	rbit	r3, r3
 800732a:	61fb      	str	r3, [r7, #28]
  return result;
 800732c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f043 0302 	orr.w	r3, r3, #2
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d108      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007342:	4b01      	ldr	r3, [pc, #4]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	e00d      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007348:	40021000 	.word	0x40021000
 800734c:	40007000 	.word	0x40007000
 8007350:	10908100 	.word	0x10908100
 8007354:	2302      	movs	r3, #2
 8007356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	fa93 f3a3 	rbit	r3, r3
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	4b78      	ldr	r3, [pc, #480]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2202      	movs	r2, #2
 8007366:	613a      	str	r2, [r7, #16]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	fa92 f2a2 	rbit	r2, r2
 800736e:	60fa      	str	r2, [r7, #12]
  return result;
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	fab2 f282 	clz	r2, r2
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	f002 021f 	and.w	r2, r2, #31
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f202 	lsl.w	r2, r1, r2
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0b7      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800738e:	4b6d      	ldr	r3, [pc, #436]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	496a      	ldr	r1, [pc, #424]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80073a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d105      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a8:	4b66      	ldr	r3, [pc, #408]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	4a65      	ldr	r2, [pc, #404]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073c0:	4b60      	ldr	r3, [pc, #384]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	f023 0203 	bic.w	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	495d      	ldr	r1, [pc, #372]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073de:	4b59      	ldr	r3, [pc, #356]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	4956      	ldr	r1, [pc, #344]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073fc:	4b51      	ldr	r3, [pc, #324]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	494e      	ldr	r1, [pc, #312]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800741a:	4b4a      	ldr	r3, [pc, #296]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f023 0210 	bic.w	r2, r3, #16
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	4947      	ldr	r1, [pc, #284]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007438:	4b42      	ldr	r3, [pc, #264]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	493f      	ldr	r1, [pc, #252]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007446:	4313      	orrs	r3, r2
 8007448:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d008      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007456:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f023 0220 	bic.w	r2, r3, #32
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	4938      	ldr	r1, [pc, #224]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007464:	4313      	orrs	r3, r2
 8007466:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007474:	4b33      	ldr	r3, [pc, #204]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	4930      	ldr	r1, [pc, #192]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007492:	4b2c      	ldr	r3, [pc, #176]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	4929      	ldr	r1, [pc, #164]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074b0:	4b24      	ldr	r3, [pc, #144]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4921      	ldr	r1, [pc, #132]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d008      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80074ce:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	491a      	ldr	r1, [pc, #104]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80074ec:	4b15      	ldr	r3, [pc, #84]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	4912      	ldr	r1, [pc, #72]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	490b      	ldr	r1, [pc, #44]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007518:	4313      	orrs	r3, r2
 800751a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d008      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	4903      	ldr	r1, [pc, #12]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3748      	adds	r7, #72	; 0x48
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40021000 	.word	0x40021000

08007548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e049      	b.n	80075ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fb f958 	bl	8002824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f000 fc54 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e04a      	b.n	80076a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x6c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d013      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x6c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x6c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIM_Base_Start_IT+0xc4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x6c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x6c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d115      	bne.n	8007690 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b06      	cmp	r3, #6
 8007674:	d015      	beq.n	80076a2 <HAL_TIM_Base_Start_IT+0xaa>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767c:	d011      	beq.n	80076a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768e:	e008      	b.n	80076a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40013400 	.word	0x40013400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e049      	b.n	8007772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fb f876 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f000 fb92 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <HAL_TIM_PWM_Start+0x24>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e03c      	b.n	800781a <HAL_TIM_PWM_Start+0x9e>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d109      	bne.n	80077ba <HAL_TIM_PWM_Start+0x3e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	e02f      	b.n	800781a <HAL_TIM_PWM_Start+0x9e>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d109      	bne.n	80077d4 <HAL_TIM_PWM_Start+0x58>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	e022      	b.n	800781a <HAL_TIM_PWM_Start+0x9e>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b0c      	cmp	r3, #12
 80077d8:	d109      	bne.n	80077ee <HAL_TIM_PWM_Start+0x72>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	bf14      	ite	ne
 80077e6:	2301      	movne	r3, #1
 80077e8:	2300      	moveq	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	e015      	b.n	800781a <HAL_TIM_PWM_Start+0x9e>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d109      	bne.n	8007808 <HAL_TIM_PWM_Start+0x8c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	e008      	b.n	800781a <HAL_TIM_PWM_Start+0x9e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e097      	b.n	8007952 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <HAL_TIM_PWM_Start+0xb6>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007830:	e023      	b.n	800787a <HAL_TIM_PWM_Start+0xfe>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b04      	cmp	r3, #4
 8007836:	d104      	bne.n	8007842 <HAL_TIM_PWM_Start+0xc6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007840:	e01b      	b.n	800787a <HAL_TIM_PWM_Start+0xfe>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d104      	bne.n	8007852 <HAL_TIM_PWM_Start+0xd6>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	e013      	b.n	800787a <HAL_TIM_PWM_Start+0xfe>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d104      	bne.n	8007862 <HAL_TIM_PWM_Start+0xe6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007860:	e00b      	b.n	800787a <HAL_TIM_PWM_Start+0xfe>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b10      	cmp	r3, #16
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start+0xf6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007870:	e003      	b.n	800787a <HAL_TIM_PWM_Start+0xfe>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2201      	movs	r2, #1
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fe3c 	bl	8008500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a33      	ldr	r2, [pc, #204]	; (800795c <HAL_TIM_PWM_Start+0x1e0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <HAL_TIM_PWM_Start+0x13e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a32      	ldr	r2, [pc, #200]	; (8007960 <HAL_TIM_PWM_Start+0x1e4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00e      	beq.n	80078ba <HAL_TIM_PWM_Start+0x13e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a30      	ldr	r2, [pc, #192]	; (8007964 <HAL_TIM_PWM_Start+0x1e8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d009      	beq.n	80078ba <HAL_TIM_PWM_Start+0x13e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2f      	ldr	r2, [pc, #188]	; (8007968 <HAL_TIM_PWM_Start+0x1ec>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d004      	beq.n	80078ba <HAL_TIM_PWM_Start+0x13e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2d      	ldr	r2, [pc, #180]	; (800796c <HAL_TIM_PWM_Start+0x1f0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d101      	bne.n	80078be <HAL_TIM_PWM_Start+0x142>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <HAL_TIM_PWM_Start+0x144>
 80078be:	2300      	movs	r3, #0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a20      	ldr	r2, [pc, #128]	; (800795c <HAL_TIM_PWM_Start+0x1e0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIM_PWM_Start+0x194>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_PWM_Start+0x194>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a20      	ldr	r2, [pc, #128]	; (8007970 <HAL_TIM_PWM_Start+0x1f4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_PWM_Start+0x194>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <HAL_TIM_PWM_Start+0x1f8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_PWM_Start+0x194>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <HAL_TIM_PWM_Start+0x1e4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_PWM_Start+0x194>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_TIM_PWM_Start+0x1e8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d115      	bne.n	800793c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <HAL_TIM_PWM_Start+0x1fc>)
 8007918:	4013      	ands	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b06      	cmp	r3, #6
 8007920:	d015      	beq.n	800794e <HAL_TIM_PWM_Start+0x1d2>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007928:	d011      	beq.n	800794e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e008      	b.n	800794e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e000      	b.n	8007950 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40014000 	.word	0x40014000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	00010007 	.word	0x00010007

0800797c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d122      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d11b      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0202 	mvn.w	r2, #2
 80079a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fa1a 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 80079c4:	e005      	b.n	80079d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa0c 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fa1d 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d122      	bne.n	8007a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d11b      	bne.n	8007a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0204 	mvn.w	r2, #4
 80079fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9f0 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007a18:	e005      	b.n	8007a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9e2 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9f3 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d122      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d11b      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0208 	mvn.w	r2, #8
 8007a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9c6 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007a6c:	e005      	b.n	8007a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9b8 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9c9 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b10      	cmp	r3, #16
 8007a8c:	d122      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d11b      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0210 	mvn.w	r2, #16
 8007aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f99c 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007ac0:	e005      	b.n	8007ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f98e 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f99f 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10e      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0201 	mvn.w	r2, #1
 8007af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f9 ffc4 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d10e      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d107      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fd9a 	bl	8008660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3a:	d10e      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b46:	2b80      	cmp	r3, #128	; 0x80
 8007b48:	d107      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fd8d 	bl	8008674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d10e      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d107      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f94d 	bl	8007e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d10e      	bne.n	8007bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d107      	bne.n	8007bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f06f 0220 	mvn.w	r2, #32
 8007baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fd4d 	bl	800864c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e0ff      	b.n	8007dda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b14      	cmp	r3, #20
 8007be6:	f200 80f0 	bhi.w	8007dca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007dcb 	.word	0x08007dcb
 8007bf8:	08007dcb 	.word	0x08007dcb
 8007bfc:	08007dcb 	.word	0x08007dcb
 8007c00:	08007c85 	.word	0x08007c85
 8007c04:	08007dcb 	.word	0x08007dcb
 8007c08:	08007dcb 	.word	0x08007dcb
 8007c0c:	08007dcb 	.word	0x08007dcb
 8007c10:	08007cc7 	.word	0x08007cc7
 8007c14:	08007dcb 	.word	0x08007dcb
 8007c18:	08007dcb 	.word	0x08007dcb
 8007c1c:	08007dcb 	.word	0x08007dcb
 8007c20:	08007d07 	.word	0x08007d07
 8007c24:	08007dcb 	.word	0x08007dcb
 8007c28:	08007dcb 	.word	0x08007dcb
 8007c2c:	08007dcb 	.word	0x08007dcb
 8007c30:	08007d49 	.word	0x08007d49
 8007c34:	08007dcb 	.word	0x08007dcb
 8007c38:	08007dcb 	.word	0x08007dcb
 8007c3c:	08007dcb 	.word	0x08007dcb
 8007c40:	08007d89 	.word	0x08007d89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f982 	bl	8007f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0208 	orr.w	r2, r2, #8
 8007c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0204 	bic.w	r2, r2, #4
 8007c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6999      	ldr	r1, [r3, #24]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	619a      	str	r2, [r3, #24]
      break;
 8007c82:	e0a5      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f9f2 	bl	8008074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6999      	ldr	r1, [r3, #24]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	619a      	str	r2, [r3, #24]
      break;
 8007cc4:	e084      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fa5b 	bl	8008188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0208 	orr.w	r2, r2, #8
 8007ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0204 	bic.w	r2, r2, #4
 8007cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69d9      	ldr	r1, [r3, #28]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	691a      	ldr	r2, [r3, #16]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	61da      	str	r2, [r3, #28]
      break;
 8007d04:	e064      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fac3 	bl	8008298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69d9      	ldr	r1, [r3, #28]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	021a      	lsls	r2, r3, #8
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	61da      	str	r2, [r3, #28]
      break;
 8007d46:	e043      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fb0c 	bl	800836c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0204 	bic.w	r2, r2, #4
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d86:	e023      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fb50 	bl	8008434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	021a      	lsls	r2, r3, #8
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dc8:	e002      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop

08007de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3c      	ldr	r2, [pc, #240]	; (8007f38 <TIM_Base_SetConfig+0x104>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00f      	beq.n	8007e6c <TIM_Base_SetConfig+0x38>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d00b      	beq.n	8007e6c <TIM_Base_SetConfig+0x38>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a39      	ldr	r2, [pc, #228]	; (8007f3c <TIM_Base_SetConfig+0x108>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d007      	beq.n	8007e6c <TIM_Base_SetConfig+0x38>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <TIM_Base_SetConfig+0x10c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_Base_SetConfig+0x38>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a37      	ldr	r2, [pc, #220]	; (8007f44 <TIM_Base_SetConfig+0x110>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d108      	bne.n	8007e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2d      	ldr	r2, [pc, #180]	; (8007f38 <TIM_Base_SetConfig+0x104>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01b      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8c:	d017      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2a      	ldr	r2, [pc, #168]	; (8007f3c <TIM_Base_SetConfig+0x108>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a29      	ldr	r2, [pc, #164]	; (8007f40 <TIM_Base_SetConfig+0x10c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00f      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a28      	ldr	r2, [pc, #160]	; (8007f44 <TIM_Base_SetConfig+0x110>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a26      	ldr	r2, [pc, #152]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_Base_SetConfig+0x8a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a25      	ldr	r2, [pc, #148]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <TIM_Base_SetConfig+0x104>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0xe8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <TIM_Base_SetConfig+0x110>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0xe8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0xe8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0xe8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a0e      	ldr	r2, [pc, #56]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d103      	bne.n	8007f24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	615a      	str	r2, [r3, #20]
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f023 0201 	bic.w	r2, r3, #1
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0303 	bic.w	r3, r3, #3
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f023 0302 	bic.w	r3, r3, #2
 8007fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a2c      	ldr	r2, [pc, #176]	; (8008060 <TIM_OC1_SetConfig+0x10c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x80>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a2b      	ldr	r2, [pc, #172]	; (8008064 <TIM_OC1_SetConfig+0x110>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00b      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	; (8008068 <TIM_OC1_SetConfig+0x114>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x80>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a29      	ldr	r2, [pc, #164]	; (800806c <TIM_OC1_SetConfig+0x118>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x80>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a28      	ldr	r2, [pc, #160]	; (8008070 <TIM_OC1_SetConfig+0x11c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d10c      	bne.n	8007fee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f023 0308 	bic.w	r3, r3, #8
 8007fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <TIM_OC1_SetConfig+0x10c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00f      	beq.n	8008016 <TIM_OC1_SetConfig+0xc2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <TIM_OC1_SetConfig+0x110>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00b      	beq.n	8008016 <TIM_OC1_SetConfig+0xc2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a19      	ldr	r2, [pc, #100]	; (8008068 <TIM_OC1_SetConfig+0x114>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d007      	beq.n	8008016 <TIM_OC1_SetConfig+0xc2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <TIM_OC1_SetConfig+0x118>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_OC1_SetConfig+0xc2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <TIM_OC1_SetConfig+0x11c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d111      	bne.n	800803a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800801c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	621a      	str	r2, [r3, #32]
}
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40013400 	.word	0x40013400
 8008068:	40014000 	.word	0x40014000
 800806c:	40014400 	.word	0x40014400
 8008070:	40014800 	.word	0x40014800

08008074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	f023 0210 	bic.w	r2, r3, #16
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0320 	bic.w	r3, r3, #32
 80080c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a28      	ldr	r2, [pc, #160]	; (8008174 <TIM_OC2_SetConfig+0x100>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_OC2_SetConfig+0x6c>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a27      	ldr	r2, [pc, #156]	; (8008178 <TIM_OC2_SetConfig+0x104>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d10d      	bne.n	80080fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <TIM_OC2_SetConfig+0x100>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00f      	beq.n	8008124 <TIM_OC2_SetConfig+0xb0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <TIM_OC2_SetConfig+0x104>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00b      	beq.n	8008124 <TIM_OC2_SetConfig+0xb0>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1b      	ldr	r2, [pc, #108]	; (800817c <TIM_OC2_SetConfig+0x108>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d007      	beq.n	8008124 <TIM_OC2_SetConfig+0xb0>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a1a      	ldr	r2, [pc, #104]	; (8008180 <TIM_OC2_SetConfig+0x10c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_OC2_SetConfig+0xb0>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a19      	ldr	r2, [pc, #100]	; (8008184 <TIM_OC2_SetConfig+0x110>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d113      	bne.n	800814c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800812a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008132:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	621a      	str	r2, [r3, #32]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40013400 	.word	0x40013400
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a27      	ldr	r2, [pc, #156]	; (8008284 <TIM_OC3_SetConfig+0xfc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_OC3_SetConfig+0x6a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a26      	ldr	r2, [pc, #152]	; (8008288 <TIM_OC3_SetConfig+0x100>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d10d      	bne.n	800820e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800820c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1c      	ldr	r2, [pc, #112]	; (8008284 <TIM_OC3_SetConfig+0xfc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00f      	beq.n	8008236 <TIM_OC3_SetConfig+0xae>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <TIM_OC3_SetConfig+0x100>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00b      	beq.n	8008236 <TIM_OC3_SetConfig+0xae>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <TIM_OC3_SetConfig+0x104>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d007      	beq.n	8008236 <TIM_OC3_SetConfig+0xae>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <TIM_OC3_SetConfig+0x108>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC3_SetConfig+0xae>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <TIM_OC3_SetConfig+0x10c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d113      	bne.n	800825e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800823c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	40012c00 	.word	0x40012c00
 8008288:	40013400 	.word	0x40013400
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800

08008298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	031b      	lsls	r3, r3, #12
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a18      	ldr	r2, [pc, #96]	; (8008358 <TIM_OC4_SetConfig+0xc0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00f      	beq.n	800831c <TIM_OC4_SetConfig+0x84>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a17      	ldr	r2, [pc, #92]	; (800835c <TIM_OC4_SetConfig+0xc4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00b      	beq.n	800831c <TIM_OC4_SetConfig+0x84>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a16      	ldr	r2, [pc, #88]	; (8008360 <TIM_OC4_SetConfig+0xc8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d007      	beq.n	800831c <TIM_OC4_SetConfig+0x84>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a15      	ldr	r2, [pc, #84]	; (8008364 <TIM_OC4_SetConfig+0xcc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_OC4_SetConfig+0x84>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a14      	ldr	r2, [pc, #80]	; (8008368 <TIM_OC4_SetConfig+0xd0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d109      	bne.n	8008330 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	019b      	lsls	r3, r3, #6
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	40014800 	.word	0x40014800

0800836c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800839a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a17      	ldr	r2, [pc, #92]	; (8008420 <TIM_OC5_SetConfig+0xb4>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00f      	beq.n	80083e6 <TIM_OC5_SetConfig+0x7a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a16      	ldr	r2, [pc, #88]	; (8008424 <TIM_OC5_SetConfig+0xb8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00b      	beq.n	80083e6 <TIM_OC5_SetConfig+0x7a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a15      	ldr	r2, [pc, #84]	; (8008428 <TIM_OC5_SetConfig+0xbc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d007      	beq.n	80083e6 <TIM_OC5_SetConfig+0x7a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a14      	ldr	r2, [pc, #80]	; (800842c <TIM_OC5_SetConfig+0xc0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC5_SetConfig+0x7a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a13      	ldr	r2, [pc, #76]	; (8008430 <TIM_OC5_SetConfig+0xc4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d109      	bne.n	80083fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40012c00 	.word	0x40012c00
 8008424:	40013400 	.word	0x40013400
 8008428:	40014000 	.word	0x40014000
 800842c:	40014400 	.word	0x40014400
 8008430:	40014800 	.word	0x40014800

08008434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4313      	orrs	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800847a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	051b      	lsls	r3, r3, #20
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a18      	ldr	r2, [pc, #96]	; (80084ec <TIM_OC6_SetConfig+0xb8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00f      	beq.n	80084b0 <TIM_OC6_SetConfig+0x7c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a17      	ldr	r2, [pc, #92]	; (80084f0 <TIM_OC6_SetConfig+0xbc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00b      	beq.n	80084b0 <TIM_OC6_SetConfig+0x7c>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <TIM_OC6_SetConfig+0xc0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d007      	beq.n	80084b0 <TIM_OC6_SetConfig+0x7c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <TIM_OC6_SetConfig+0xc4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_OC6_SetConfig+0x7c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a14      	ldr	r2, [pc, #80]	; (80084fc <TIM_OC6_SetConfig+0xc8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d109      	bne.n	80084c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	621a      	str	r2, [r3, #32]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40012c00 	.word	0x40012c00
 80084f0:	40013400 	.word	0x40013400
 80084f4:	40014000 	.word	0x40014000
 80084f8:	40014400 	.word	0x40014400
 80084fc:	40014800 	.word	0x40014800

08008500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	2201      	movs	r2, #1
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1a      	ldr	r2, [r3, #32]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	fa01 f303 	lsl.w	r3, r1, r3
 8008538:	431a      	orrs	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008560:	2302      	movs	r3, #2
 8008562:	e063      	b.n	800862c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a2b      	ldr	r2, [pc, #172]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a2a      	ldr	r2, [pc, #168]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d108      	bne.n	80085aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800859e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d018      	beq.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	d013      	beq.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a18      	ldr	r2, [pc, #96]	; (8008640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a17      	ldr	r2, [pc, #92]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a12      	ldr	r2, [pc, #72]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a13      	ldr	r2, [pc, #76]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d10c      	bne.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	4313      	orrs	r3, r2
 8008610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40013400 	.word	0x40013400
 8008640:	40000400 	.word	0x40000400
 8008644:	40000800 	.word	0x40000800
 8008648:	40014000 	.word	0x40014000

0800864c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e040      	b.n	800871c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fa f978 	bl	80029a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2224      	movs	r2, #36	; 0x24
 80086b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fbfc 	bl	8008ec4 <UART_SetConfig>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e022      	b.n	800871c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fdc4 	bl	800926c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0201 	orr.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fe4b 	bl	80093b0 <UART_CheckIdleState>
 800871a:	4603      	mov	r3, r0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08a      	sub	sp, #40	; 0x28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008738:	2b20      	cmp	r3, #32
 800873a:	d132      	bne.n	80087a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Receive_IT+0x24>
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e02b      	b.n	80087a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d018      	beq.n	8008792 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	69f9      	ldr	r1, [r7, #28]
 8008784:	6a3a      	ldr	r2, [r7, #32]
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	61bb      	str	r3, [r7, #24]
   return(result);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e6      	bne.n	8008760 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	461a      	mov	r2, r3
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 ff19 	bl	80095d0 <UART_Start_Receive_IT>
 800879e:	4603      	mov	r3, r0
 80087a0:	e000      	b.n	80087a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80087a2:	2302      	movs	r3, #2
  }
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08a      	sub	sp, #40	; 0x28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4613      	mov	r3, r2
 80087b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	2b20      	cmp	r3, #32
 80087c0:	d165      	bne.n	800888e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_UART_Transmit_DMA+0x22>
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e05e      	b.n	8008890 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2221      	movs	r2, #33	; 0x21
 80087f4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d027      	beq.n	800884e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008802:	4a25      	ldr	r2, [pc, #148]	; (8008898 <HAL_UART_Transmit_DMA+0xec>)
 8008804:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	4a24      	ldr	r2, [pc, #144]	; (800889c <HAL_UART_Transmit_DMA+0xf0>)
 800880c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	4a23      	ldr	r2, [pc, #140]	; (80088a0 <HAL_UART_Transmit_DMA+0xf4>)
 8008814:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881a:	2200      	movs	r2, #0
 800881c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	4619      	mov	r1, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3328      	adds	r3, #40	; 0x28
 800882e:	461a      	mov	r2, r3
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	f7fc fa37 	bl	8004ca4 <HAL_DMA_Start_IT>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d008      	beq.n	800884e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2210      	movs	r2, #16
 8008840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e020      	b.n	8008890 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2240      	movs	r2, #64	; 0x40
 8008854:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3308      	adds	r3, #8
 8008874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008876:	623a      	str	r2, [r7, #32]
 8008878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	61bb      	str	r3, [r7, #24]
   return(result);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e5      	bne.n	8008856 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	e000      	b.n	8008890 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800888e:	2302      	movs	r3, #2
  }
}
 8008890:	4618      	mov	r0, r3
 8008892:	3728      	adds	r7, #40	; 0x28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0800984d 	.word	0x0800984d
 800889c:	080098e1 	.word	0x080098e1
 80088a0:	080098fd 	.word	0x080098fd

080088a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0ba      	sub	sp, #232	; 0xe8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80088ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80088d2:	4013      	ands	r3, r2
 80088d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80088d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d115      	bne.n	800890c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80088e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00f      	beq.n	800890c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 82ab 	beq.w	8008e58 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
      }
      return;
 800890a:	e2a5      	b.n	8008e58 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800890c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8117 	beq.w	8008b44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008926:	4b85      	ldr	r3, [pc, #532]	; (8008b3c <HAL_UART_IRQHandler+0x298>)
 8008928:	4013      	ands	r3, r2
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 810a 	beq.w	8008b44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d011      	beq.n	8008960 <HAL_UART_IRQHandler+0xbc>
 800893c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2201      	movs	r2, #1
 800894e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008956:	f043 0201 	orr.w	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d011      	beq.n	8008990 <HAL_UART_IRQHandler+0xec>
 800896c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2202      	movs	r2, #2
 800897e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008986:	f043 0204 	orr.w	r2, r3, #4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d011      	beq.n	80089c0 <HAL_UART_IRQHandler+0x11c>
 800899c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2204      	movs	r2, #4
 80089ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b6:	f043 0202 	orr.w	r2, r3, #2
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d105      	bne.n	80089e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80089d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2208      	movs	r2, #8
 80089ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f2:	f043 0208 	orr.w	r2, r3, #8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d012      	beq.n	8008a2e <HAL_UART_IRQHandler+0x18a>
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a24:	f043 0220 	orr.w	r2, r3, #32
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8211 	beq.w	8008e5c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d04f      	beq.n	8008b26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fe7c 	bl	8009784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d141      	bne.n	8008b1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d9      	bne.n	8008a9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d013      	beq.n	8008b16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af2:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <HAL_UART_IRQHandler+0x29c>)
 8008af4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fc f96a 	bl	8004dd4 <HAL_DMA_Abort_IT>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d017      	beq.n	8008b36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b14:	e00f      	b.n	8008b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9be 	bl	8008e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1c:	e00b      	b.n	8008b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f9ba 	bl	8008e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b24:	e007      	b.n	8008b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f9b6 	bl	8008e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008b34:	e192      	b.n	8008e5c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b36:	bf00      	nop
    return;
 8008b38:	e190      	b.n	8008e5c <HAL_UART_IRQHandler+0x5b8>
 8008b3a:	bf00      	nop
 8008b3c:	04000120 	.word	0x04000120
 8008b40:	0800997b 	.word	0x0800997b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	f040 814b 	bne.w	8008de4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 8144 	beq.w	8008de4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 813d 	beq.w	8008de4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	f040 80b5 	bne.w	8008cec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8164 	beq.w	8008e60 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f080 815c 	bcs.w	8008e60 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b20      	cmp	r3, #32
 8008bba:	f000 8086 	beq.w	8008cca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1da      	bne.n	8008bbe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c1a:	f023 0301 	bic.w	r3, r3, #1
 8008c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3308      	adds	r3, #8
 8008c28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e1      	bne.n	8008c08 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e3      	bne.n	8008c44 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fc f84c 	bl	8004d62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f8e1 	bl	8008eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cea:	e0b9      	b.n	8008e60 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 80ab 	beq.w	8008e64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80a6 	beq.w	8008e64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e4      	bne.n	8008d18 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d72:	633a      	str	r2, [r7, #48]	; 0x30
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e3      	bne.n	8008d4e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0310 	bic.w	r3, r3, #16
 8008dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	69b9      	ldr	r1, [r7, #24]
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e4      	bne.n	8008d9a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f865 	bl	8008eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008de2:	e03f      	b.n	8008e64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00e      	beq.n	8008e0e <HAL_UART_IRQHandler+0x56a>
 8008df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 ff9f 	bl	8009d4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e0c:	e02d      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01c      	beq.n	8008e68 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
    }
    return;
 8008e36:	e017      	b.n	8008e68 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d012      	beq.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
 8008e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00c      	beq.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fda8 	bl	80099a6 <UART_EndTransmit_IT>
    return;
 8008e56:	e008      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008e58:	bf00      	nop
 8008e5a:	e006      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008e5c:	bf00      	nop
 8008e5e:	e004      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008e60:	bf00      	nop
 8008e62:	e002      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008e64:	bf00      	nop
 8008e66:	e000      	b.n	8008e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008e68:	bf00      	nop
  }

}
 8008e6a:	37e8      	adds	r7, #232	; 0xe8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ef2:	f023 030c 	bic.w	r3, r3, #12
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	6979      	ldr	r1, [r7, #20]
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4aa7      	ldr	r2, [pc, #668]	; (80091dc <UART_SetConfig+0x318>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d120      	bne.n	8008f86 <UART_SetConfig+0xc2>
 8008f44:	4ba6      	ldr	r3, [pc, #664]	; (80091e0 <UART_SetConfig+0x31c>)
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d817      	bhi.n	8008f80 <UART_SetConfig+0xbc>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x94>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008f69 	.word	0x08008f69
 8008f5c:	08008f75 	.word	0x08008f75
 8008f60:	08008f7b 	.word	0x08008f7b
 8008f64:	08008f6f 	.word	0x08008f6f
 8008f68:	2301      	movs	r3, #1
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e0b5      	b.n	80090da <UART_SetConfig+0x216>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e0b2      	b.n	80090da <UART_SetConfig+0x216>
 8008f74:	2304      	movs	r3, #4
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e0af      	b.n	80090da <UART_SetConfig+0x216>
 8008f7a:	2308      	movs	r3, #8
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e0ac      	b.n	80090da <UART_SetConfig+0x216>
 8008f80:	2310      	movs	r3, #16
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e0a9      	b.n	80090da <UART_SetConfig+0x216>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a96      	ldr	r2, [pc, #600]	; (80091e4 <UART_SetConfig+0x320>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d124      	bne.n	8008fda <UART_SetConfig+0x116>
 8008f90:	4b93      	ldr	r3, [pc, #588]	; (80091e0 <UART_SetConfig+0x31c>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f9c:	d011      	beq.n	8008fc2 <UART_SetConfig+0xfe>
 8008f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fa2:	d817      	bhi.n	8008fd4 <UART_SetConfig+0x110>
 8008fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa8:	d011      	beq.n	8008fce <UART_SetConfig+0x10a>
 8008faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fae:	d811      	bhi.n	8008fd4 <UART_SetConfig+0x110>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <UART_SetConfig+0xf8>
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d006      	beq.n	8008fc8 <UART_SetConfig+0x104>
 8008fba:	e00b      	b.n	8008fd4 <UART_SetConfig+0x110>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	77fb      	strb	r3, [r7, #31]
 8008fc0:	e08b      	b.n	80090da <UART_SetConfig+0x216>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	77fb      	strb	r3, [r7, #31]
 8008fc6:	e088      	b.n	80090da <UART_SetConfig+0x216>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	e085      	b.n	80090da <UART_SetConfig+0x216>
 8008fce:	2308      	movs	r3, #8
 8008fd0:	77fb      	strb	r3, [r7, #31]
 8008fd2:	e082      	b.n	80090da <UART_SetConfig+0x216>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e07f      	b.n	80090da <UART_SetConfig+0x216>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a82      	ldr	r2, [pc, #520]	; (80091e8 <UART_SetConfig+0x324>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d124      	bne.n	800902e <UART_SetConfig+0x16a>
 8008fe4:	4b7e      	ldr	r3, [pc, #504]	; (80091e0 <UART_SetConfig+0x31c>)
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ff0:	d011      	beq.n	8009016 <UART_SetConfig+0x152>
 8008ff2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ff6:	d817      	bhi.n	8009028 <UART_SetConfig+0x164>
 8008ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ffc:	d011      	beq.n	8009022 <UART_SetConfig+0x15e>
 8008ffe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009002:	d811      	bhi.n	8009028 <UART_SetConfig+0x164>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <UART_SetConfig+0x14c>
 8009008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800900c:	d006      	beq.n	800901c <UART_SetConfig+0x158>
 800900e:	e00b      	b.n	8009028 <UART_SetConfig+0x164>
 8009010:	2300      	movs	r3, #0
 8009012:	77fb      	strb	r3, [r7, #31]
 8009014:	e061      	b.n	80090da <UART_SetConfig+0x216>
 8009016:	2302      	movs	r3, #2
 8009018:	77fb      	strb	r3, [r7, #31]
 800901a:	e05e      	b.n	80090da <UART_SetConfig+0x216>
 800901c:	2304      	movs	r3, #4
 800901e:	77fb      	strb	r3, [r7, #31]
 8009020:	e05b      	b.n	80090da <UART_SetConfig+0x216>
 8009022:	2308      	movs	r3, #8
 8009024:	77fb      	strb	r3, [r7, #31]
 8009026:	e058      	b.n	80090da <UART_SetConfig+0x216>
 8009028:	2310      	movs	r3, #16
 800902a:	77fb      	strb	r3, [r7, #31]
 800902c:	e055      	b.n	80090da <UART_SetConfig+0x216>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a6e      	ldr	r2, [pc, #440]	; (80091ec <UART_SetConfig+0x328>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d124      	bne.n	8009082 <UART_SetConfig+0x1be>
 8009038:	4b69      	ldr	r3, [pc, #420]	; (80091e0 <UART_SetConfig+0x31c>)
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009044:	d011      	beq.n	800906a <UART_SetConfig+0x1a6>
 8009046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800904a:	d817      	bhi.n	800907c <UART_SetConfig+0x1b8>
 800904c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009050:	d011      	beq.n	8009076 <UART_SetConfig+0x1b2>
 8009052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009056:	d811      	bhi.n	800907c <UART_SetConfig+0x1b8>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <UART_SetConfig+0x1a0>
 800905c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009060:	d006      	beq.n	8009070 <UART_SetConfig+0x1ac>
 8009062:	e00b      	b.n	800907c <UART_SetConfig+0x1b8>
 8009064:	2300      	movs	r3, #0
 8009066:	77fb      	strb	r3, [r7, #31]
 8009068:	e037      	b.n	80090da <UART_SetConfig+0x216>
 800906a:	2302      	movs	r3, #2
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e034      	b.n	80090da <UART_SetConfig+0x216>
 8009070:	2304      	movs	r3, #4
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e031      	b.n	80090da <UART_SetConfig+0x216>
 8009076:	2308      	movs	r3, #8
 8009078:	77fb      	strb	r3, [r7, #31]
 800907a:	e02e      	b.n	80090da <UART_SetConfig+0x216>
 800907c:	2310      	movs	r3, #16
 800907e:	77fb      	strb	r3, [r7, #31]
 8009080:	e02b      	b.n	80090da <UART_SetConfig+0x216>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a5a      	ldr	r2, [pc, #360]	; (80091f0 <UART_SetConfig+0x32c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d124      	bne.n	80090d6 <UART_SetConfig+0x212>
 800908c:	4b54      	ldr	r3, [pc, #336]	; (80091e0 <UART_SetConfig+0x31c>)
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009098:	d011      	beq.n	80090be <UART_SetConfig+0x1fa>
 800909a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800909e:	d817      	bhi.n	80090d0 <UART_SetConfig+0x20c>
 80090a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a4:	d011      	beq.n	80090ca <UART_SetConfig+0x206>
 80090a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090aa:	d811      	bhi.n	80090d0 <UART_SetConfig+0x20c>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <UART_SetConfig+0x1f4>
 80090b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090b4:	d006      	beq.n	80090c4 <UART_SetConfig+0x200>
 80090b6:	e00b      	b.n	80090d0 <UART_SetConfig+0x20c>
 80090b8:	2300      	movs	r3, #0
 80090ba:	77fb      	strb	r3, [r7, #31]
 80090bc:	e00d      	b.n	80090da <UART_SetConfig+0x216>
 80090be:	2302      	movs	r3, #2
 80090c0:	77fb      	strb	r3, [r7, #31]
 80090c2:	e00a      	b.n	80090da <UART_SetConfig+0x216>
 80090c4:	2304      	movs	r3, #4
 80090c6:	77fb      	strb	r3, [r7, #31]
 80090c8:	e007      	b.n	80090da <UART_SetConfig+0x216>
 80090ca:	2308      	movs	r3, #8
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	e004      	b.n	80090da <UART_SetConfig+0x216>
 80090d0:	2310      	movs	r3, #16
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e001      	b.n	80090da <UART_SetConfig+0x216>
 80090d6:	2310      	movs	r3, #16
 80090d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e2:	d15b      	bne.n	800919c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80090e4:	7ffb      	ldrb	r3, [r7, #31]
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	d827      	bhi.n	800913a <UART_SetConfig+0x276>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <UART_SetConfig+0x22c>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009115 	.word	0x08009115
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	08009125 	.word	0x08009125
 80090fc:	0800913b 	.word	0x0800913b
 8009100:	0800912b 	.word	0x0800912b
 8009104:	0800913b 	.word	0x0800913b
 8009108:	0800913b 	.word	0x0800913b
 800910c:	0800913b 	.word	0x0800913b
 8009110:	08009133 	.word	0x08009133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009114:	f7fe f824 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 8009118:	61b8      	str	r0, [r7, #24]
        break;
 800911a:	e013      	b.n	8009144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800911c:	f7fe f842 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8009120:	61b8      	str	r0, [r7, #24]
        break;
 8009122:	e00f      	b.n	8009144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009124:	4b33      	ldr	r3, [pc, #204]	; (80091f4 <UART_SetConfig+0x330>)
 8009126:	61bb      	str	r3, [r7, #24]
        break;
 8009128:	e00c      	b.n	8009144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912a:	f7fd ffa3 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 800912e:	61b8      	str	r0, [r7, #24]
        break;
 8009130:	e008      	b.n	8009144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009136:	61bb      	str	r3, [r7, #24]
        break;
 8009138:	e004      	b.n	8009144 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	77bb      	strb	r3, [r7, #30]
        break;
 8009142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 8082 	beq.w	8009250 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	005a      	lsls	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	441a      	add	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b0f      	cmp	r3, #15
 8009166:	d916      	bls.n	8009196 <UART_SetConfig+0x2d2>
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916e:	d212      	bcs.n	8009196 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f023 030f 	bic.w	r3, r3, #15
 8009178:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	b29b      	uxth	r3, r3
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	b29a      	uxth	r2, r3
 8009186:	89fb      	ldrh	r3, [r7, #14]
 8009188:	4313      	orrs	r3, r2
 800918a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	89fa      	ldrh	r2, [r7, #14]
 8009192:	60da      	str	r2, [r3, #12]
 8009194:	e05c      	b.n	8009250 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	77bb      	strb	r3, [r7, #30]
 800919a:	e059      	b.n	8009250 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800919c:	7ffb      	ldrb	r3, [r7, #31]
 800919e:	2b08      	cmp	r3, #8
 80091a0:	d835      	bhi.n	800920e <UART_SetConfig+0x34a>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x2e4>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091d5 	.word	0x080091d5
 80091b0:	080091f9 	.word	0x080091f9
 80091b4:	0800920f 	.word	0x0800920f
 80091b8:	080091ff 	.word	0x080091ff
 80091bc:	0800920f 	.word	0x0800920f
 80091c0:	0800920f 	.word	0x0800920f
 80091c4:	0800920f 	.word	0x0800920f
 80091c8:	08009207 	.word	0x08009207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091cc:	f7fd ffc8 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 80091d0:	61b8      	str	r0, [r7, #24]
        break;
 80091d2:	e021      	b.n	8009218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d4:	f7fd ffe6 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 80091d8:	61b8      	str	r0, [r7, #24]
        break;
 80091da:	e01d      	b.n	8009218 <UART_SetConfig+0x354>
 80091dc:	40013800 	.word	0x40013800
 80091e0:	40021000 	.word	0x40021000
 80091e4:	40004400 	.word	0x40004400
 80091e8:	40004800 	.word	0x40004800
 80091ec:	40004c00 	.word	0x40004c00
 80091f0:	40005000 	.word	0x40005000
 80091f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <UART_SetConfig+0x3a4>)
 80091fa:	61bb      	str	r3, [r7, #24]
        break;
 80091fc:	e00c      	b.n	8009218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091fe:	f7fd ff39 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009202:	61b8      	str	r0, [r7, #24]
        break;
 8009204:	e008      	b.n	8009218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800920a:	61bb      	str	r3, [r7, #24]
        break;
 800920c:	e004      	b.n	8009218 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	77bb      	strb	r3, [r7, #30]
        break;
 8009216:	bf00      	nop
    }

    if (pclk != 0U)
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d018      	beq.n	8009250 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	085a      	lsrs	r2, r3, #1
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b0f      	cmp	r3, #15
 8009236:	d909      	bls.n	800924c <UART_SetConfig+0x388>
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923e:	d205      	bcs.n	800924c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e001      	b.n	8009250 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800925c:	7fbb      	ldrb	r3, [r7, #30]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	007a1200 	.word	0x007a1200

0800926c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936a:	d10a      	bne.n	8009382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b098      	sub	sp, #96	; 0x60
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093c0:	f7f9 fc46 	bl	8002c50 <HAL_GetTick>
 80093c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d12e      	bne.n	8009432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f88c 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d021      	beq.n	8009432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009402:	653b      	str	r3, [r7, #80]	; 0x50
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940c:	647b      	str	r3, [r7, #68]	; 0x44
 800940e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e6      	bne.n	80093ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e062      	b.n	80094f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b04      	cmp	r3, #4
 800943e:	d149      	bne.n	80094d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009448:	2200      	movs	r2, #0
 800944a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f856 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d03c      	beq.n	80094d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	623b      	str	r3, [r7, #32]
   return(result);
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800946e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009478:	633b      	str	r3, [r7, #48]	; 0x30
 800947a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800947e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	60fb      	str	r3, [r7, #12]
   return(result);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ac:	61fa      	str	r2, [r7, #28]
 80094ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	69b9      	ldr	r1, [r7, #24]
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	617b      	str	r3, [r7, #20]
   return(result);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e5      	bne.n	800948c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e011      	b.n	80094f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3758      	adds	r7, #88	; 0x58
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009510:	e049      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d045      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7f9 fb99 	bl	8002c50 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <UART_WaitOnFlagUntilTimeout+0x30>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e048      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d031      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b08      	cmp	r3, #8
 800954e:	d110      	bne.n	8009572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 f913 	bl	8009784 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2208      	movs	r2, #8
 8009562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e029      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800957c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009580:	d111      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f8f9 	bl	8009784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e00f      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d0a6      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b097      	sub	sp, #92	; 0x5c
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009602:	d10e      	bne.n	8009622 <UART_Start_Receive_IT+0x52>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <UART_Start_Receive_IT+0x48>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009616:	e01a      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	22ff      	movs	r2, #255	; 0xff
 800961c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009620:	e015      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10d      	bne.n	8009646 <UART_Start_Receive_IT+0x76>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <UART_Start_Receive_IT+0x6c>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22ff      	movs	r2, #255	; 0xff
 8009636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800963a:	e008      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	227f      	movs	r2, #127	; 0x7f
 8009640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009644:	e003      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2222      	movs	r2, #34	; 0x22
 800965a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	657b      	str	r3, [r7, #84]	; 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800967e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009680:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800968c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e5      	bne.n	800965e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d107      	bne.n	80096ac <UART_Start_Receive_IT+0xdc>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4a22      	ldr	r2, [pc, #136]	; (8009730 <UART_Start_Receive_IT+0x160>)
 80096a8:	669a      	str	r2, [r3, #104]	; 0x68
 80096aa:	e002      	b.n	80096b2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a21      	ldr	r2, [pc, #132]	; (8009734 <UART_Start_Receive_IT+0x164>)
 80096b0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d019      	beq.n	80096ee <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80096ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
 80096da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_Start_Receive_IT+0xea>
 80096ec:	e018      	b.n	8009720 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	e853 3f00 	ldrex	r3, [r3]
 80096fa:	613b      	str	r3, [r7, #16]
   return(result);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f043 0320 	orr.w	r3, r3, #32
 8009702:	653b      	str	r3, [r7, #80]	; 0x50
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970c:	623b      	str	r3, [r7, #32]
 800970e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	e841 2300 	strex	r3, r2, [r1]
 8009718:	61bb      	str	r3, [r7, #24]
   return(result);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e6      	bne.n	80096ee <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	375c      	adds	r7, #92	; 0x5c
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	08009ba3 	.word	0x08009ba3
 8009734:	080099fb 	.word	0x080099fb

08009738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b089      	sub	sp, #36	; 0x24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	60bb      	str	r3, [r7, #8]
   return(result);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	613b      	str	r3, [r7, #16]
   return(result);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009778:	bf00      	nop
 800977a:	3724      	adds	r7, #36	; 0x24
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009784:	b480      	push	{r7}
 8009786:	b095      	sub	sp, #84	; 0x54
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	643b      	str	r3, [r7, #64]	; 0x40
 80097ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e6      	bne.n	800978c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3308      	adds	r3, #8
 80097c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	f023 0301 	bic.w	r3, r3, #1
 80097d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3308      	adds	r3, #8
 80097dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e5      	bne.n	80097be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d118      	bne.n	800982c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	60bb      	str	r3, [r7, #8]
   return(result);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f023 0310 	bic.w	r3, r3, #16
 800980e:	647b      	str	r3, [r7, #68]	; 0x44
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009840:	bf00      	nop
 8009842:	3754      	adds	r7, #84	; 0x54
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b090      	sub	sp, #64	; 0x40
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	2b20      	cmp	r3, #32
 8009860:	d037      	beq.n	80098d2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	2200      	movs	r2, #0
 8009866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	623b      	str	r3, [r7, #32]
   return(result);
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
 8009882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988a:	633a      	str	r2, [r7, #48]	; 0x30
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e5      	bne.n	800986a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800989e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
 80098b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098bc:	61fb      	str	r3, [r7, #28]
 80098be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	69b9      	ldr	r1, [r7, #24]
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e6      	bne.n	800989e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098d0:	e002      	b.n	80098d8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80098d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80098d4:	f7ff facc 	bl	8008e70 <HAL_UART_TxCpltCallback>
}
 80098d8:	bf00      	nop
 80098da:	3740      	adds	r7, #64	; 0x40
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fac8 	bl	8008e84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009916:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d109      	bne.n	800993a <UART_DMAError+0x3e>
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b21      	cmp	r3, #33	; 0x21
 800992a:	d106      	bne.n	800993a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2200      	movs	r2, #0
 8009930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009934:	6978      	ldr	r0, [r7, #20]
 8009936:	f7ff feff 	bl	8009738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b40      	cmp	r3, #64	; 0x40
 8009946:	d109      	bne.n	800995c <UART_DMAError+0x60>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b22      	cmp	r3, #34	; 0x22
 800994c:	d106      	bne.n	800995c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009956:	6978      	ldr	r0, [r7, #20]
 8009958:	f7ff ff14 	bl	8009784 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009962:	f043 0210 	orr.w	r2, r3, #16
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	f7ff fa93 	bl	8008e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009972:	bf00      	nop
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fa7d 	bl	8008e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b088      	sub	sp, #32
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c2:	61fb      	str	r3, [r7, #28]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6979      	ldr	r1, [r7, #20]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	613b      	str	r3, [r7, #16]
   return(result);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e6      	bne.n	80099ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fa3f 	bl	8008e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f2:	bf00      	nop
 80099f4:	3720      	adds	r7, #32
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b09c      	sub	sp, #112	; 0x70
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a08:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a12:	2b22      	cmp	r3, #34	; 0x22
 8009a14:	f040 80b9 	bne.w	8009b8a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a1e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a26:	b2d9      	uxtb	r1, r3
 8009a28:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a32:	400a      	ands	r2, r1
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 809c 	bne.w	8009b9a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e6      	bne.n	8009a62 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa6:	f023 0301 	bic.w	r3, r3, #1
 8009aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ab4:	647a      	str	r2, [r7, #68]	; 0x44
 8009ab6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e5      	bne.n	8009a94 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d018      	beq.n	8009b1c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	623b      	str	r3, [r7, #32]
   return(result);
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009afe:	663b      	str	r3, [r7, #96]	; 0x60
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b08:	633b      	str	r3, [r7, #48]	; 0x30
 8009b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d12e      	bne.n	8009b82 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0310 	bic.w	r3, r3, #16
 8009b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b48:	61fb      	str	r3, [r7, #28]
 8009b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	69b9      	ldr	r1, [r7, #24]
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	617b      	str	r3, [r7, #20]
   return(result);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	2b10      	cmp	r3, #16
 8009b68:	d103      	bne.n	8009b72 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2210      	movs	r2, #16
 8009b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff f996 	bl	8008eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b80:	e00b      	b.n	8009b9a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f7 fda4 	bl	80016d0 <HAL_UART_RxCpltCallback>
}
 8009b88:	e007      	b.n	8009b9a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	699a      	ldr	r2, [r3, #24]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0208 	orr.w	r2, r2, #8
 8009b98:	619a      	str	r2, [r3, #24]
}
 8009b9a:	bf00      	nop
 8009b9c:	3770      	adds	r7, #112	; 0x70
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b09c      	sub	sp, #112	; 0x70
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bb0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bba:	2b22      	cmp	r3, #34	; 0x22
 8009bbc:	f040 80b9 	bne.w	8009d32 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009bc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009bd0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009bd4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009bd8:	4013      	ands	r3, r2
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bde:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	1c9a      	adds	r2, r3, #2
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 809c 	bne.w	8009d42 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	461a      	mov	r2, r3
 8009c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c28:	657b      	str	r3, [r7, #84]	; 0x54
 8009c2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e6      	bne.n	8009c0a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	f023 0301 	bic.w	r3, r3, #1
 8009c52:	663b      	str	r3, [r7, #96]	; 0x60
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8009c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e5      	bne.n	8009c3c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d018      	beq.n	8009cc4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e6      	bne.n	8009c92 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d12e      	bne.n	8009d2a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f023 0310 	bic.w	r3, r3, #16
 8009ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6979      	ldr	r1, [r7, #20]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e6      	bne.n	8009cd2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b10      	cmp	r3, #16
 8009d10:	d103      	bne.n	8009d1a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2210      	movs	r2, #16
 8009d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff f8c2 	bl	8008eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d28:	e00b      	b.n	8009d42 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7f7 fcd0 	bl	80016d0 <HAL_UART_RxCpltCallback>
}
 8009d30:	e007      	b.n	8009d42 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0208 	orr.w	r2, r2, #8
 8009d40:	619a      	str	r2, [r3, #24]
}
 8009d42:	bf00      	nop
 8009d44:	3770      	adds	r7, #112	; 0x70
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <__cvt>:
 8009d5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d62:	ec55 4b10 	vmov	r4, r5, d0
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	460e      	mov	r6, r1
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	bfbb      	ittet	lt
 8009d70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d74:	461d      	movlt	r5, r3
 8009d76:	2300      	movge	r3, #0
 8009d78:	232d      	movlt	r3, #45	; 0x2d
 8009d7a:	700b      	strb	r3, [r1, #0]
 8009d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d82:	4691      	mov	r9, r2
 8009d84:	f023 0820 	bic.w	r8, r3, #32
 8009d88:	bfbc      	itt	lt
 8009d8a:	4622      	movlt	r2, r4
 8009d8c:	4614      	movlt	r4, r2
 8009d8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d92:	d005      	beq.n	8009da0 <__cvt+0x42>
 8009d94:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d98:	d100      	bne.n	8009d9c <__cvt+0x3e>
 8009d9a:	3601      	adds	r6, #1
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	e000      	b.n	8009da2 <__cvt+0x44>
 8009da0:	2103      	movs	r1, #3
 8009da2:	ab03      	add	r3, sp, #12
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	ab02      	add	r3, sp, #8
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	ec45 4b10 	vmov	d0, r4, r5
 8009dae:	4653      	mov	r3, sl
 8009db0:	4632      	mov	r2, r6
 8009db2:	f001 f87d 	bl	800aeb0 <_dtoa_r>
 8009db6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009dba:	4607      	mov	r7, r0
 8009dbc:	d102      	bne.n	8009dc4 <__cvt+0x66>
 8009dbe:	f019 0f01 	tst.w	r9, #1
 8009dc2:	d022      	beq.n	8009e0a <__cvt+0xac>
 8009dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dc8:	eb07 0906 	add.w	r9, r7, r6
 8009dcc:	d110      	bne.n	8009df0 <__cvt+0x92>
 8009dce:	783b      	ldrb	r3, [r7, #0]
 8009dd0:	2b30      	cmp	r3, #48	; 0x30
 8009dd2:	d10a      	bne.n	8009dea <__cvt+0x8c>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4620      	mov	r0, r4
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f7f6 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 8009de0:	b918      	cbnz	r0, 8009dea <__cvt+0x8c>
 8009de2:	f1c6 0601 	rsb	r6, r6, #1
 8009de6:	f8ca 6000 	str.w	r6, [sl]
 8009dea:	f8da 3000 	ldr.w	r3, [sl]
 8009dee:	4499      	add	r9, r3
 8009df0:	2200      	movs	r2, #0
 8009df2:	2300      	movs	r3, #0
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dfc:	b108      	cbz	r0, 8009e02 <__cvt+0xa4>
 8009dfe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e02:	2230      	movs	r2, #48	; 0x30
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	454b      	cmp	r3, r9
 8009e08:	d307      	bcc.n	8009e1a <__cvt+0xbc>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0e:	1bdb      	subs	r3, r3, r7
 8009e10:	4638      	mov	r0, r7
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	b004      	add	sp, #16
 8009e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1a:	1c59      	adds	r1, r3, #1
 8009e1c:	9103      	str	r1, [sp, #12]
 8009e1e:	701a      	strb	r2, [r3, #0]
 8009e20:	e7f0      	b.n	8009e04 <__cvt+0xa6>

08009e22 <__exponent>:
 8009e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e24:	4603      	mov	r3, r0
 8009e26:	2900      	cmp	r1, #0
 8009e28:	bfb8      	it	lt
 8009e2a:	4249      	neglt	r1, r1
 8009e2c:	f803 2b02 	strb.w	r2, [r3], #2
 8009e30:	bfb4      	ite	lt
 8009e32:	222d      	movlt	r2, #45	; 0x2d
 8009e34:	222b      	movge	r2, #43	; 0x2b
 8009e36:	2909      	cmp	r1, #9
 8009e38:	7042      	strb	r2, [r0, #1]
 8009e3a:	dd2a      	ble.n	8009e92 <__exponent+0x70>
 8009e3c:	f10d 0207 	add.w	r2, sp, #7
 8009e40:	4617      	mov	r7, r2
 8009e42:	260a      	movs	r6, #10
 8009e44:	4694      	mov	ip, r2
 8009e46:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e4a:	fb06 1415 	mls	r4, r6, r5, r1
 8009e4e:	3430      	adds	r4, #48	; 0x30
 8009e50:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e54:	460c      	mov	r4, r1
 8009e56:	2c63      	cmp	r4, #99	; 0x63
 8009e58:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	dcf1      	bgt.n	8009e44 <__exponent+0x22>
 8009e60:	3130      	adds	r1, #48	; 0x30
 8009e62:	f1ac 0402 	sub.w	r4, ip, #2
 8009e66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e6a:	1c41      	adds	r1, r0, #1
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	42ba      	cmp	r2, r7
 8009e70:	d30a      	bcc.n	8009e88 <__exponent+0x66>
 8009e72:	f10d 0209 	add.w	r2, sp, #9
 8009e76:	eba2 020c 	sub.w	r2, r2, ip
 8009e7a:	42bc      	cmp	r4, r7
 8009e7c:	bf88      	it	hi
 8009e7e:	2200      	movhi	r2, #0
 8009e80:	4413      	add	r3, r2
 8009e82:	1a18      	subs	r0, r3, r0
 8009e84:	b003      	add	sp, #12
 8009e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e88:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e8c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009e90:	e7ed      	b.n	8009e6e <__exponent+0x4c>
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	3130      	adds	r1, #48	; 0x30
 8009e96:	7083      	strb	r3, [r0, #2]
 8009e98:	70c1      	strb	r1, [r0, #3]
 8009e9a:	1d03      	adds	r3, r0, #4
 8009e9c:	e7f1      	b.n	8009e82 <__exponent+0x60>
	...

08009ea0 <_printf_float>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	ed2d 8b02 	vpush	{d8}
 8009ea8:	b08d      	sub	sp, #52	; 0x34
 8009eaa:	460c      	mov	r4, r1
 8009eac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	f000 fef7 	bl	800aca8 <_localeconv_r>
 8009eba:	f8d0 a000 	ldr.w	sl, [r0]
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	f7f6 f9d6 	bl	8000270 <strlen>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	9305      	str	r3, [sp, #20]
 8009ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ed4:	3307      	adds	r3, #7
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	f103 0208 	add.w	r2, r3, #8
 8009ede:	f8c8 2000 	str.w	r2, [r8]
 8009ee2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ef0:	ee08 0a10 	vmov	s16, r0
 8009ef4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009efc:	4b9e      	ldr	r3, [pc, #632]	; (800a178 <_printf_float+0x2d8>)
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295
 8009f02:	f7f6 fe13 	bl	8000b2c <__aeabi_dcmpun>
 8009f06:	bb88      	cbnz	r0, 8009f6c <_printf_float+0xcc>
 8009f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f0c:	4b9a      	ldr	r3, [pc, #616]	; (800a178 <_printf_float+0x2d8>)
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	f7f6 fded 	bl	8000af0 <__aeabi_dcmple>
 8009f16:	bb48      	cbnz	r0, 8009f6c <_printf_float+0xcc>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 fddc 	bl	8000adc <__aeabi_dcmplt>
 8009f24:	b110      	cbz	r0, 8009f2c <_printf_float+0x8c>
 8009f26:	232d      	movs	r3, #45	; 0x2d
 8009f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f2c:	4a93      	ldr	r2, [pc, #588]	; (800a17c <_printf_float+0x2dc>)
 8009f2e:	4b94      	ldr	r3, [pc, #592]	; (800a180 <_printf_float+0x2e0>)
 8009f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f34:	bf94      	ite	ls
 8009f36:	4690      	movls	r8, r2
 8009f38:	4698      	movhi	r8, r3
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	9b05      	ldr	r3, [sp, #20]
 8009f40:	f023 0304 	bic.w	r3, r3, #4
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	f04f 0900 	mov.w	r9, #0
 8009f4a:	9700      	str	r7, [sp, #0]
 8009f4c:	4633      	mov	r3, r6
 8009f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f9da 	bl	800a30c <_printf_common>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f040 8090 	bne.w	800a07e <_printf_float+0x1de>
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	b00d      	add	sp, #52	; 0x34
 8009f64:	ecbd 8b02 	vpop	{d8}
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	4640      	mov	r0, r8
 8009f72:	4649      	mov	r1, r9
 8009f74:	f7f6 fdda 	bl	8000b2c <__aeabi_dcmpun>
 8009f78:	b140      	cbz	r0, 8009f8c <_printf_float+0xec>
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbc      	itt	lt
 8009f80:	232d      	movlt	r3, #45	; 0x2d
 8009f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f86:	4a7f      	ldr	r2, [pc, #508]	; (800a184 <_printf_float+0x2e4>)
 8009f88:	4b7f      	ldr	r3, [pc, #508]	; (800a188 <_printf_float+0x2e8>)
 8009f8a:	e7d1      	b.n	8009f30 <_printf_float+0x90>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f92:	9206      	str	r2, [sp, #24]
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	d13f      	bne.n	800a018 <_printf_float+0x178>
 8009f98:	2306      	movs	r3, #6
 8009f9a:	6063      	str	r3, [r4, #4]
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	6861      	ldr	r1, [r4, #4]
 8009fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8009faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fae:	ab09      	add	r3, sp, #36	; 0x24
 8009fb0:	ec49 8b10 	vmov	d0, r8, r9
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7ff fece 	bl	8009d5e <__cvt>
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fc6:	2b47      	cmp	r3, #71	; 0x47
 8009fc8:	4680      	mov	r8, r0
 8009fca:	d108      	bne.n	8009fde <_printf_float+0x13e>
 8009fcc:	1cc8      	adds	r0, r1, #3
 8009fce:	db02      	blt.n	8009fd6 <_printf_float+0x136>
 8009fd0:	6863      	ldr	r3, [r4, #4]
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	dd41      	ble.n	800a05a <_printf_float+0x1ba>
 8009fd6:	f1ab 0302 	sub.w	r3, fp, #2
 8009fda:	fa5f fb83 	uxtb.w	fp, r3
 8009fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fe2:	d820      	bhi.n	800a026 <_printf_float+0x186>
 8009fe4:	3901      	subs	r1, #1
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fec:	9109      	str	r1, [sp, #36]	; 0x24
 8009fee:	f7ff ff18 	bl	8009e22 <__exponent>
 8009ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff4:	1813      	adds	r3, r2, r0
 8009ff6:	2a01      	cmp	r2, #1
 8009ff8:	4681      	mov	r9, r0
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	dc02      	bgt.n	800a004 <_printf_float+0x164>
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	07d2      	lsls	r2, r2, #31
 800a002:	d501      	bpl.n	800a008 <_printf_float+0x168>
 800a004:	3301      	adds	r3, #1
 800a006:	6123      	str	r3, [r4, #16]
 800a008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d09c      	beq.n	8009f4a <_printf_float+0xaa>
 800a010:	232d      	movs	r3, #45	; 0x2d
 800a012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a016:	e798      	b.n	8009f4a <_printf_float+0xaa>
 800a018:	9a06      	ldr	r2, [sp, #24]
 800a01a:	2a47      	cmp	r2, #71	; 0x47
 800a01c:	d1be      	bne.n	8009f9c <_printf_float+0xfc>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1bc      	bne.n	8009f9c <_printf_float+0xfc>
 800a022:	2301      	movs	r3, #1
 800a024:	e7b9      	b.n	8009f9a <_printf_float+0xfa>
 800a026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a02a:	d118      	bne.n	800a05e <_printf_float+0x1be>
 800a02c:	2900      	cmp	r1, #0
 800a02e:	6863      	ldr	r3, [r4, #4]
 800a030:	dd0b      	ble.n	800a04a <_printf_float+0x1aa>
 800a032:	6121      	str	r1, [r4, #16]
 800a034:	b913      	cbnz	r3, 800a03c <_printf_float+0x19c>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	07d0      	lsls	r0, r2, #31
 800a03a:	d502      	bpl.n	800a042 <_printf_float+0x1a2>
 800a03c:	3301      	adds	r3, #1
 800a03e:	440b      	add	r3, r1
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	65a1      	str	r1, [r4, #88]	; 0x58
 800a044:	f04f 0900 	mov.w	r9, #0
 800a048:	e7de      	b.n	800a008 <_printf_float+0x168>
 800a04a:	b913      	cbnz	r3, 800a052 <_printf_float+0x1b2>
 800a04c:	6822      	ldr	r2, [r4, #0]
 800a04e:	07d2      	lsls	r2, r2, #31
 800a050:	d501      	bpl.n	800a056 <_printf_float+0x1b6>
 800a052:	3302      	adds	r3, #2
 800a054:	e7f4      	b.n	800a040 <_printf_float+0x1a0>
 800a056:	2301      	movs	r3, #1
 800a058:	e7f2      	b.n	800a040 <_printf_float+0x1a0>
 800a05a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a060:	4299      	cmp	r1, r3
 800a062:	db05      	blt.n	800a070 <_printf_float+0x1d0>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	6121      	str	r1, [r4, #16]
 800a068:	07d8      	lsls	r0, r3, #31
 800a06a:	d5ea      	bpl.n	800a042 <_printf_float+0x1a2>
 800a06c:	1c4b      	adds	r3, r1, #1
 800a06e:	e7e7      	b.n	800a040 <_printf_float+0x1a0>
 800a070:	2900      	cmp	r1, #0
 800a072:	bfd4      	ite	le
 800a074:	f1c1 0202 	rsble	r2, r1, #2
 800a078:	2201      	movgt	r2, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	e7e0      	b.n	800a040 <_printf_float+0x1a0>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	055a      	lsls	r2, r3, #21
 800a082:	d407      	bmi.n	800a094 <_printf_float+0x1f4>
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	4642      	mov	r2, r8
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	d12c      	bne.n	800a0ec <_printf_float+0x24c>
 800a092:	e764      	b.n	8009f5e <_printf_float+0xbe>
 800a094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a098:	f240 80e0 	bls.w	800a25c <_printf_float+0x3bc>
 800a09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f7f6 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d034      	beq.n	800a116 <_printf_float+0x276>
 800a0ac:	4a37      	ldr	r2, [pc, #220]	; (800a18c <_printf_float+0x2ec>)
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b8      	blx	r7
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f43f af51 	beq.w	8009f5e <_printf_float+0xbe>
 800a0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	db02      	blt.n	800a0ca <_printf_float+0x22a>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	07d8      	lsls	r0, r3, #31
 800a0c8:	d510      	bpl.n	800a0ec <_printf_float+0x24c>
 800a0ca:	ee18 3a10 	vmov	r3, s16
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f af41 	beq.w	8009f5e <_printf_float+0xbe>
 800a0dc:	f04f 0800 	mov.w	r8, #0
 800a0e0:	f104 091a 	add.w	r9, r4, #26
 800a0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	4543      	cmp	r3, r8
 800a0ea:	dc09      	bgt.n	800a100 <_printf_float+0x260>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	079b      	lsls	r3, r3, #30
 800a0f0:	f100 8107 	bmi.w	800a302 <_printf_float+0x462>
 800a0f4:	68e0      	ldr	r0, [r4, #12]
 800a0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f8:	4298      	cmp	r0, r3
 800a0fa:	bfb8      	it	lt
 800a0fc:	4618      	movlt	r0, r3
 800a0fe:	e730      	b.n	8009f62 <_printf_float+0xc2>
 800a100:	2301      	movs	r3, #1
 800a102:	464a      	mov	r2, r9
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	47b8      	blx	r7
 800a10a:	3001      	adds	r0, #1
 800a10c:	f43f af27 	beq.w	8009f5e <_printf_float+0xbe>
 800a110:	f108 0801 	add.w	r8, r8, #1
 800a114:	e7e6      	b.n	800a0e4 <_printf_float+0x244>
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dc39      	bgt.n	800a190 <_printf_float+0x2f0>
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <_printf_float+0x2ec>)
 800a11e:	2301      	movs	r3, #1
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f af19 	beq.w	8009f5e <_printf_float+0xbe>
 800a12c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a130:	4313      	orrs	r3, r2
 800a132:	d102      	bne.n	800a13a <_printf_float+0x29a>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	07d9      	lsls	r1, r3, #31
 800a138:	d5d8      	bpl.n	800a0ec <_printf_float+0x24c>
 800a13a:	ee18 3a10 	vmov	r3, s16
 800a13e:	4652      	mov	r2, sl
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f af09 	beq.w	8009f5e <_printf_float+0xbe>
 800a14c:	f04f 0900 	mov.w	r9, #0
 800a150:	f104 0a1a 	add.w	sl, r4, #26
 800a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a156:	425b      	negs	r3, r3
 800a158:	454b      	cmp	r3, r9
 800a15a:	dc01      	bgt.n	800a160 <_printf_float+0x2c0>
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	e792      	b.n	800a086 <_printf_float+0x1e6>
 800a160:	2301      	movs	r3, #1
 800a162:	4652      	mov	r2, sl
 800a164:	4631      	mov	r1, r6
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f aef7 	beq.w	8009f5e <_printf_float+0xbe>
 800a170:	f109 0901 	add.w	r9, r9, #1
 800a174:	e7ee      	b.n	800a154 <_printf_float+0x2b4>
 800a176:	bf00      	nop
 800a178:	7fefffff 	.word	0x7fefffff
 800a17c:	0800f3b4 	.word	0x0800f3b4
 800a180:	0800f3b8 	.word	0x0800f3b8
 800a184:	0800f3bc 	.word	0x0800f3bc
 800a188:	0800f3c0 	.word	0x0800f3c0
 800a18c:	0800f3c4 	.word	0x0800f3c4
 800a190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a194:	429a      	cmp	r2, r3
 800a196:	bfa8      	it	ge
 800a198:	461a      	movge	r2, r3
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	4691      	mov	r9, r2
 800a19e:	dc37      	bgt.n	800a210 <_printf_float+0x370>
 800a1a0:	f04f 0b00 	mov.w	fp, #0
 800a1a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a8:	f104 021a 	add.w	r2, r4, #26
 800a1ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	eba3 0309 	sub.w	r3, r3, r9
 800a1b4:	455b      	cmp	r3, fp
 800a1b6:	dc33      	bgt.n	800a220 <_printf_float+0x380>
 800a1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	db3b      	blt.n	800a238 <_printf_float+0x398>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	07da      	lsls	r2, r3, #31
 800a1c4:	d438      	bmi.n	800a238 <_printf_float+0x398>
 800a1c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1ca:	eba2 0903 	sub.w	r9, r2, r3
 800a1ce:	9b05      	ldr	r3, [sp, #20]
 800a1d0:	1ad2      	subs	r2, r2, r3
 800a1d2:	4591      	cmp	r9, r2
 800a1d4:	bfa8      	it	ge
 800a1d6:	4691      	movge	r9, r2
 800a1d8:	f1b9 0f00 	cmp.w	r9, #0
 800a1dc:	dc35      	bgt.n	800a24a <_printf_float+0x3aa>
 800a1de:	f04f 0800 	mov.w	r8, #0
 800a1e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e6:	f104 0a1a 	add.w	sl, r4, #26
 800a1ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	eba3 0309 	sub.w	r3, r3, r9
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	f77f af79 	ble.w	800a0ec <_printf_float+0x24c>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	4631      	mov	r1, r6
 800a200:	4628      	mov	r0, r5
 800a202:	47b8      	blx	r7
 800a204:	3001      	adds	r0, #1
 800a206:	f43f aeaa 	beq.w	8009f5e <_printf_float+0xbe>
 800a20a:	f108 0801 	add.w	r8, r8, #1
 800a20e:	e7ec      	b.n	800a1ea <_printf_float+0x34a>
 800a210:	4613      	mov	r3, r2
 800a212:	4631      	mov	r1, r6
 800a214:	4642      	mov	r2, r8
 800a216:	4628      	mov	r0, r5
 800a218:	47b8      	blx	r7
 800a21a:	3001      	adds	r0, #1
 800a21c:	d1c0      	bne.n	800a1a0 <_printf_float+0x300>
 800a21e:	e69e      	b.n	8009f5e <_printf_float+0xbe>
 800a220:	2301      	movs	r3, #1
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	9205      	str	r2, [sp, #20]
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f ae97 	beq.w	8009f5e <_printf_float+0xbe>
 800a230:	9a05      	ldr	r2, [sp, #20]
 800a232:	f10b 0b01 	add.w	fp, fp, #1
 800a236:	e7b9      	b.n	800a1ac <_printf_float+0x30c>
 800a238:	ee18 3a10 	vmov	r3, s16
 800a23c:	4652      	mov	r2, sl
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	d1be      	bne.n	800a1c6 <_printf_float+0x326>
 800a248:	e689      	b.n	8009f5e <_printf_float+0xbe>
 800a24a:	9a05      	ldr	r2, [sp, #20]
 800a24c:	464b      	mov	r3, r9
 800a24e:	4442      	add	r2, r8
 800a250:	4631      	mov	r1, r6
 800a252:	4628      	mov	r0, r5
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	d1c1      	bne.n	800a1de <_printf_float+0x33e>
 800a25a:	e680      	b.n	8009f5e <_printf_float+0xbe>
 800a25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a25e:	2a01      	cmp	r2, #1
 800a260:	dc01      	bgt.n	800a266 <_printf_float+0x3c6>
 800a262:	07db      	lsls	r3, r3, #31
 800a264:	d53a      	bpl.n	800a2dc <_printf_float+0x43c>
 800a266:	2301      	movs	r3, #1
 800a268:	4642      	mov	r2, r8
 800a26a:	4631      	mov	r1, r6
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b8      	blx	r7
 800a270:	3001      	adds	r0, #1
 800a272:	f43f ae74 	beq.w	8009f5e <_printf_float+0xbe>
 800a276:	ee18 3a10 	vmov	r3, s16
 800a27a:	4652      	mov	r2, sl
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f ae6b 	beq.w	8009f5e <_printf_float+0xbe>
 800a288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a294:	f7f6 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a298:	b9d8      	cbnz	r0, 800a2d2 <_printf_float+0x432>
 800a29a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a29e:	f108 0201 	add.w	r2, r8, #1
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d10e      	bne.n	800a2ca <_printf_float+0x42a>
 800a2ac:	e657      	b.n	8009f5e <_printf_float+0xbe>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f43f ae50 	beq.w	8009f5e <_printf_float+0xbe>
 800a2be:	f108 0801 	add.w	r8, r8, #1
 800a2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	4543      	cmp	r3, r8
 800a2c8:	dcf1      	bgt.n	800a2ae <_printf_float+0x40e>
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2d0:	e6da      	b.n	800a088 <_printf_float+0x1e8>
 800a2d2:	f04f 0800 	mov.w	r8, #0
 800a2d6:	f104 0a1a 	add.w	sl, r4, #26
 800a2da:	e7f2      	b.n	800a2c2 <_printf_float+0x422>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4642      	mov	r2, r8
 800a2e0:	e7df      	b.n	800a2a2 <_printf_float+0x402>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	464a      	mov	r2, r9
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae36 	beq.w	8009f5e <_printf_float+0xbe>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	68e3      	ldr	r3, [r4, #12]
 800a2f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2fa:	1a5b      	subs	r3, r3, r1
 800a2fc:	4543      	cmp	r3, r8
 800a2fe:	dcf0      	bgt.n	800a2e2 <_printf_float+0x442>
 800a300:	e6f8      	b.n	800a0f4 <_printf_float+0x254>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	f104 0919 	add.w	r9, r4, #25
 800a30a:	e7f4      	b.n	800a2f6 <_printf_float+0x456>

0800a30c <_printf_common>:
 800a30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a310:	4616      	mov	r6, r2
 800a312:	4699      	mov	r9, r3
 800a314:	688a      	ldr	r2, [r1, #8]
 800a316:	690b      	ldr	r3, [r1, #16]
 800a318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	bfb8      	it	lt
 800a320:	4613      	movlt	r3, r2
 800a322:	6033      	str	r3, [r6, #0]
 800a324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a328:	4607      	mov	r7, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b10a      	cbz	r2, 800a332 <_printf_common+0x26>
 800a32e:	3301      	adds	r3, #1
 800a330:	6033      	str	r3, [r6, #0]
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	0699      	lsls	r1, r3, #26
 800a336:	bf42      	ittt	mi
 800a338:	6833      	ldrmi	r3, [r6, #0]
 800a33a:	3302      	addmi	r3, #2
 800a33c:	6033      	strmi	r3, [r6, #0]
 800a33e:	6825      	ldr	r5, [r4, #0]
 800a340:	f015 0506 	ands.w	r5, r5, #6
 800a344:	d106      	bne.n	800a354 <_printf_common+0x48>
 800a346:	f104 0a19 	add.w	sl, r4, #25
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	6832      	ldr	r2, [r6, #0]
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	42ab      	cmp	r3, r5
 800a352:	dc26      	bgt.n	800a3a2 <_printf_common+0x96>
 800a354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a358:	1e13      	subs	r3, r2, #0
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	bf18      	it	ne
 800a35e:	2301      	movne	r3, #1
 800a360:	0692      	lsls	r2, r2, #26
 800a362:	d42b      	bmi.n	800a3bc <_printf_common+0xb0>
 800a364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d01e      	beq.n	800a3b0 <_printf_common+0xa4>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	f003 0306 	and.w	r3, r3, #6
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	bf02      	ittt	eq
 800a37e:	68e5      	ldreq	r5, [r4, #12]
 800a380:	6833      	ldreq	r3, [r6, #0]
 800a382:	1aed      	subeq	r5, r5, r3
 800a384:	68a3      	ldr	r3, [r4, #8]
 800a386:	bf0c      	ite	eq
 800a388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a38c:	2500      	movne	r5, #0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfc4      	itt	gt
 800a392:	1a9b      	subgt	r3, r3, r2
 800a394:	18ed      	addgt	r5, r5, r3
 800a396:	2600      	movs	r6, #0
 800a398:	341a      	adds	r4, #26
 800a39a:	42b5      	cmp	r5, r6
 800a39c:	d11a      	bne.n	800a3d4 <_printf_common+0xc8>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e008      	b.n	800a3b4 <_printf_common+0xa8>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	47c0      	blx	r8
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d103      	bne.n	800a3b8 <_printf_common+0xac>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	e7c6      	b.n	800a34a <_printf_common+0x3e>
 800a3bc:	18e1      	adds	r1, r4, r3
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	2030      	movs	r0, #48	; 0x30
 800a3c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c6:	4422      	add	r2, r4
 800a3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	e7c7      	b.n	800a364 <_printf_common+0x58>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d0e6      	beq.n	800a3b0 <_printf_common+0xa4>
 800a3e2:	3601      	adds	r6, #1
 800a3e4:	e7d9      	b.n	800a39a <_printf_common+0x8e>
	...

0800a3e8 <_printf_i>:
 800a3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ec:	7e0f      	ldrb	r7, [r1, #24]
 800a3ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3f0:	2f78      	cmp	r7, #120	; 0x78
 800a3f2:	4691      	mov	r9, r2
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	469a      	mov	sl, r3
 800a3fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3fe:	d807      	bhi.n	800a410 <_printf_i+0x28>
 800a400:	2f62      	cmp	r7, #98	; 0x62
 800a402:	d80a      	bhi.n	800a41a <_printf_i+0x32>
 800a404:	2f00      	cmp	r7, #0
 800a406:	f000 80d4 	beq.w	800a5b2 <_printf_i+0x1ca>
 800a40a:	2f58      	cmp	r7, #88	; 0x58
 800a40c:	f000 80c0 	beq.w	800a590 <_printf_i+0x1a8>
 800a410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a418:	e03a      	b.n	800a490 <_printf_i+0xa8>
 800a41a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a41e:	2b15      	cmp	r3, #21
 800a420:	d8f6      	bhi.n	800a410 <_printf_i+0x28>
 800a422:	a101      	add	r1, pc, #4	; (adr r1, 800a428 <_printf_i+0x40>)
 800a424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a428:	0800a481 	.word	0x0800a481
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a411 	.word	0x0800a411
 800a434:	0800a411 	.word	0x0800a411
 800a438:	0800a411 	.word	0x0800a411
 800a43c:	0800a411 	.word	0x0800a411
 800a440:	0800a495 	.word	0x0800a495
 800a444:	0800a411 	.word	0x0800a411
 800a448:	0800a411 	.word	0x0800a411
 800a44c:	0800a411 	.word	0x0800a411
 800a450:	0800a411 	.word	0x0800a411
 800a454:	0800a599 	.word	0x0800a599
 800a458:	0800a4c1 	.word	0x0800a4c1
 800a45c:	0800a553 	.word	0x0800a553
 800a460:	0800a411 	.word	0x0800a411
 800a464:	0800a411 	.word	0x0800a411
 800a468:	0800a5bb 	.word	0x0800a5bb
 800a46c:	0800a411 	.word	0x0800a411
 800a470:	0800a4c1 	.word	0x0800a4c1
 800a474:	0800a411 	.word	0x0800a411
 800a478:	0800a411 	.word	0x0800a411
 800a47c:	0800a55b 	.word	0x0800a55b
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	1d1a      	adds	r2, r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	602a      	str	r2, [r5, #0]
 800a488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a490:	2301      	movs	r3, #1
 800a492:	e09f      	b.n	800a5d4 <_printf_i+0x1ec>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	0607      	lsls	r7, r0, #24
 800a49a:	f103 0104 	add.w	r1, r3, #4
 800a49e:	6029      	str	r1, [r5, #0]
 800a4a0:	d501      	bpl.n	800a4a6 <_printf_i+0xbe>
 800a4a2:	681e      	ldr	r6, [r3, #0]
 800a4a4:	e003      	b.n	800a4ae <_printf_i+0xc6>
 800a4a6:	0646      	lsls	r6, r0, #25
 800a4a8:	d5fb      	bpl.n	800a4a2 <_printf_i+0xba>
 800a4aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	da03      	bge.n	800a4ba <_printf_i+0xd2>
 800a4b2:	232d      	movs	r3, #45	; 0x2d
 800a4b4:	4276      	negs	r6, r6
 800a4b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ba:	485a      	ldr	r0, [pc, #360]	; (800a624 <_printf_i+0x23c>)
 800a4bc:	230a      	movs	r3, #10
 800a4be:	e012      	b.n	800a4e6 <_printf_i+0xfe>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	6820      	ldr	r0, [r4, #0]
 800a4c4:	1d19      	adds	r1, r3, #4
 800a4c6:	6029      	str	r1, [r5, #0]
 800a4c8:	0605      	lsls	r5, r0, #24
 800a4ca:	d501      	bpl.n	800a4d0 <_printf_i+0xe8>
 800a4cc:	681e      	ldr	r6, [r3, #0]
 800a4ce:	e002      	b.n	800a4d6 <_printf_i+0xee>
 800a4d0:	0641      	lsls	r1, r0, #25
 800a4d2:	d5fb      	bpl.n	800a4cc <_printf_i+0xe4>
 800a4d4:	881e      	ldrh	r6, [r3, #0]
 800a4d6:	4853      	ldr	r0, [pc, #332]	; (800a624 <_printf_i+0x23c>)
 800a4d8:	2f6f      	cmp	r7, #111	; 0x6f
 800a4da:	bf0c      	ite	eq
 800a4dc:	2308      	moveq	r3, #8
 800a4de:	230a      	movne	r3, #10
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e6:	6865      	ldr	r5, [r4, #4]
 800a4e8:	60a5      	str	r5, [r4, #8]
 800a4ea:	2d00      	cmp	r5, #0
 800a4ec:	bfa2      	ittt	ge
 800a4ee:	6821      	ldrge	r1, [r4, #0]
 800a4f0:	f021 0104 	bicge.w	r1, r1, #4
 800a4f4:	6021      	strge	r1, [r4, #0]
 800a4f6:	b90e      	cbnz	r6, 800a4fc <_printf_i+0x114>
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	d04b      	beq.n	800a594 <_printf_i+0x1ac>
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800a502:	fb03 6711 	mls	r7, r3, r1, r6
 800a506:	5dc7      	ldrb	r7, [r0, r7]
 800a508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a50c:	4637      	mov	r7, r6
 800a50e:	42bb      	cmp	r3, r7
 800a510:	460e      	mov	r6, r1
 800a512:	d9f4      	bls.n	800a4fe <_printf_i+0x116>
 800a514:	2b08      	cmp	r3, #8
 800a516:	d10b      	bne.n	800a530 <_printf_i+0x148>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	07de      	lsls	r6, r3, #31
 800a51c:	d508      	bpl.n	800a530 <_printf_i+0x148>
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	4299      	cmp	r1, r3
 800a524:	bfde      	ittt	le
 800a526:	2330      	movle	r3, #48	; 0x30
 800a528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a52c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a530:	1b52      	subs	r2, r2, r5
 800a532:	6122      	str	r2, [r4, #16]
 800a534:	f8cd a000 	str.w	sl, [sp]
 800a538:	464b      	mov	r3, r9
 800a53a:	aa03      	add	r2, sp, #12
 800a53c:	4621      	mov	r1, r4
 800a53e:	4640      	mov	r0, r8
 800a540:	f7ff fee4 	bl	800a30c <_printf_common>
 800a544:	3001      	adds	r0, #1
 800a546:	d14a      	bne.n	800a5de <_printf_i+0x1f6>
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	b004      	add	sp, #16
 800a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	f043 0320 	orr.w	r3, r3, #32
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	4833      	ldr	r0, [pc, #204]	; (800a628 <_printf_i+0x240>)
 800a55c:	2778      	movs	r7, #120	; 0x78
 800a55e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	061f      	lsls	r7, r3, #24
 800a568:	f851 6b04 	ldr.w	r6, [r1], #4
 800a56c:	d402      	bmi.n	800a574 <_printf_i+0x18c>
 800a56e:	065f      	lsls	r7, r3, #25
 800a570:	bf48      	it	mi
 800a572:	b2b6      	uxthmi	r6, r6
 800a574:	07df      	lsls	r7, r3, #31
 800a576:	bf48      	it	mi
 800a578:	f043 0320 	orrmi.w	r3, r3, #32
 800a57c:	6029      	str	r1, [r5, #0]
 800a57e:	bf48      	it	mi
 800a580:	6023      	strmi	r3, [r4, #0]
 800a582:	b91e      	cbnz	r6, 800a58c <_printf_i+0x1a4>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	f023 0320 	bic.w	r3, r3, #32
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	2310      	movs	r3, #16
 800a58e:	e7a7      	b.n	800a4e0 <_printf_i+0xf8>
 800a590:	4824      	ldr	r0, [pc, #144]	; (800a624 <_printf_i+0x23c>)
 800a592:	e7e4      	b.n	800a55e <_printf_i+0x176>
 800a594:	4615      	mov	r5, r2
 800a596:	e7bd      	b.n	800a514 <_printf_i+0x12c>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	6826      	ldr	r6, [r4, #0]
 800a59c:	6961      	ldr	r1, [r4, #20]
 800a59e:	1d18      	adds	r0, r3, #4
 800a5a0:	6028      	str	r0, [r5, #0]
 800a5a2:	0635      	lsls	r5, r6, #24
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	d501      	bpl.n	800a5ac <_printf_i+0x1c4>
 800a5a8:	6019      	str	r1, [r3, #0]
 800a5aa:	e002      	b.n	800a5b2 <_printf_i+0x1ca>
 800a5ac:	0670      	lsls	r0, r6, #25
 800a5ae:	d5fb      	bpl.n	800a5a8 <_printf_i+0x1c0>
 800a5b0:	8019      	strh	r1, [r3, #0]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	e7bc      	b.n	800a534 <_printf_i+0x14c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	602a      	str	r2, [r5, #0]
 800a5c0:	681d      	ldr	r5, [r3, #0]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7f5 fe02 	bl	80001d0 <memchr>
 800a5cc:	b108      	cbz	r0, 800a5d2 <_printf_i+0x1ea>
 800a5ce:	1b40      	subs	r0, r0, r5
 800a5d0:	6060      	str	r0, [r4, #4]
 800a5d2:	6863      	ldr	r3, [r4, #4]
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5dc:	e7aa      	b.n	800a534 <_printf_i+0x14c>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d0ad      	beq.n	800a548 <_printf_i+0x160>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	079b      	lsls	r3, r3, #30
 800a5f0:	d413      	bmi.n	800a61a <_printf_i+0x232>
 800a5f2:	68e0      	ldr	r0, [r4, #12]
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	4298      	cmp	r0, r3
 800a5f8:	bfb8      	it	lt
 800a5fa:	4618      	movlt	r0, r3
 800a5fc:	e7a6      	b.n	800a54c <_printf_i+0x164>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4640      	mov	r0, r8
 800a606:	47d0      	blx	sl
 800a608:	3001      	adds	r0, #1
 800a60a:	d09d      	beq.n	800a548 <_printf_i+0x160>
 800a60c:	3501      	adds	r5, #1
 800a60e:	68e3      	ldr	r3, [r4, #12]
 800a610:	9903      	ldr	r1, [sp, #12]
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	42ab      	cmp	r3, r5
 800a616:	dcf2      	bgt.n	800a5fe <_printf_i+0x216>
 800a618:	e7eb      	b.n	800a5f2 <_printf_i+0x20a>
 800a61a:	2500      	movs	r5, #0
 800a61c:	f104 0619 	add.w	r6, r4, #25
 800a620:	e7f5      	b.n	800a60e <_printf_i+0x226>
 800a622:	bf00      	nop
 800a624:	0800f3c6 	.word	0x0800f3c6
 800a628:	0800f3d7 	.word	0x0800f3d7

0800a62c <_scanf_float>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	b087      	sub	sp, #28
 800a632:	4617      	mov	r7, r2
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	688b      	ldr	r3, [r1, #8]
 800a638:	1e5a      	subs	r2, r3, #1
 800a63a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a63e:	bf83      	ittte	hi
 800a640:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a644:	195b      	addhi	r3, r3, r5
 800a646:	9302      	strhi	r3, [sp, #8]
 800a648:	2300      	movls	r3, #0
 800a64a:	bf86      	itte	hi
 800a64c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a650:	608b      	strhi	r3, [r1, #8]
 800a652:	9302      	strls	r3, [sp, #8]
 800a654:	680b      	ldr	r3, [r1, #0]
 800a656:	468b      	mov	fp, r1
 800a658:	2500      	movs	r5, #0
 800a65a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a65e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a662:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a666:	4680      	mov	r8, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	465e      	mov	r6, fp
 800a66c:	46aa      	mov	sl, r5
 800a66e:	46a9      	mov	r9, r5
 800a670:	9501      	str	r5, [sp, #4]
 800a672:	68a2      	ldr	r2, [r4, #8]
 800a674:	b152      	cbz	r2, 800a68c <_scanf_float+0x60>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b4e      	cmp	r3, #78	; 0x4e
 800a67c:	d864      	bhi.n	800a748 <_scanf_float+0x11c>
 800a67e:	2b40      	cmp	r3, #64	; 0x40
 800a680:	d83c      	bhi.n	800a6fc <_scanf_float+0xd0>
 800a682:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a686:	b2c8      	uxtb	r0, r1
 800a688:	280e      	cmp	r0, #14
 800a68a:	d93a      	bls.n	800a702 <_scanf_float+0xd6>
 800a68c:	f1b9 0f00 	cmp.w	r9, #0
 800a690:	d003      	beq.n	800a69a <_scanf_float+0x6e>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a69e:	f1ba 0f01 	cmp.w	sl, #1
 800a6a2:	f200 8113 	bhi.w	800a8cc <_scanf_float+0x2a0>
 800a6a6:	455e      	cmp	r6, fp
 800a6a8:	f200 8105 	bhi.w	800a8b6 <_scanf_float+0x28a>
 800a6ac:	2501      	movs	r5, #1
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	b007      	add	sp, #28
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6ba:	2a0d      	cmp	r2, #13
 800a6bc:	d8e6      	bhi.n	800a68c <_scanf_float+0x60>
 800a6be:	a101      	add	r1, pc, #4	; (adr r1, 800a6c4 <_scanf_float+0x98>)
 800a6c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6c4:	0800a803 	.word	0x0800a803
 800a6c8:	0800a68d 	.word	0x0800a68d
 800a6cc:	0800a68d 	.word	0x0800a68d
 800a6d0:	0800a68d 	.word	0x0800a68d
 800a6d4:	0800a863 	.word	0x0800a863
 800a6d8:	0800a83b 	.word	0x0800a83b
 800a6dc:	0800a68d 	.word	0x0800a68d
 800a6e0:	0800a68d 	.word	0x0800a68d
 800a6e4:	0800a811 	.word	0x0800a811
 800a6e8:	0800a68d 	.word	0x0800a68d
 800a6ec:	0800a68d 	.word	0x0800a68d
 800a6f0:	0800a68d 	.word	0x0800a68d
 800a6f4:	0800a68d 	.word	0x0800a68d
 800a6f8:	0800a7c9 	.word	0x0800a7c9
 800a6fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a700:	e7db      	b.n	800a6ba <_scanf_float+0x8e>
 800a702:	290e      	cmp	r1, #14
 800a704:	d8c2      	bhi.n	800a68c <_scanf_float+0x60>
 800a706:	a001      	add	r0, pc, #4	; (adr r0, 800a70c <_scanf_float+0xe0>)
 800a708:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a70c:	0800a7bb 	.word	0x0800a7bb
 800a710:	0800a68d 	.word	0x0800a68d
 800a714:	0800a7bb 	.word	0x0800a7bb
 800a718:	0800a84f 	.word	0x0800a84f
 800a71c:	0800a68d 	.word	0x0800a68d
 800a720:	0800a769 	.word	0x0800a769
 800a724:	0800a7a5 	.word	0x0800a7a5
 800a728:	0800a7a5 	.word	0x0800a7a5
 800a72c:	0800a7a5 	.word	0x0800a7a5
 800a730:	0800a7a5 	.word	0x0800a7a5
 800a734:	0800a7a5 	.word	0x0800a7a5
 800a738:	0800a7a5 	.word	0x0800a7a5
 800a73c:	0800a7a5 	.word	0x0800a7a5
 800a740:	0800a7a5 	.word	0x0800a7a5
 800a744:	0800a7a5 	.word	0x0800a7a5
 800a748:	2b6e      	cmp	r3, #110	; 0x6e
 800a74a:	d809      	bhi.n	800a760 <_scanf_float+0x134>
 800a74c:	2b60      	cmp	r3, #96	; 0x60
 800a74e:	d8b2      	bhi.n	800a6b6 <_scanf_float+0x8a>
 800a750:	2b54      	cmp	r3, #84	; 0x54
 800a752:	d077      	beq.n	800a844 <_scanf_float+0x218>
 800a754:	2b59      	cmp	r3, #89	; 0x59
 800a756:	d199      	bne.n	800a68c <_scanf_float+0x60>
 800a758:	2d07      	cmp	r5, #7
 800a75a:	d197      	bne.n	800a68c <_scanf_float+0x60>
 800a75c:	2508      	movs	r5, #8
 800a75e:	e029      	b.n	800a7b4 <_scanf_float+0x188>
 800a760:	2b74      	cmp	r3, #116	; 0x74
 800a762:	d06f      	beq.n	800a844 <_scanf_float+0x218>
 800a764:	2b79      	cmp	r3, #121	; 0x79
 800a766:	e7f6      	b.n	800a756 <_scanf_float+0x12a>
 800a768:	6821      	ldr	r1, [r4, #0]
 800a76a:	05c8      	lsls	r0, r1, #23
 800a76c:	d51a      	bpl.n	800a7a4 <_scanf_float+0x178>
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a774:	6021      	str	r1, [r4, #0]
 800a776:	f109 0901 	add.w	r9, r9, #1
 800a77a:	b11b      	cbz	r3, 800a784 <_scanf_float+0x158>
 800a77c:	3b01      	subs	r3, #1
 800a77e:	3201      	adds	r2, #1
 800a780:	9302      	str	r3, [sp, #8]
 800a782:	60a2      	str	r2, [r4, #8]
 800a784:	68a3      	ldr	r3, [r4, #8]
 800a786:	3b01      	subs	r3, #1
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	3301      	adds	r3, #1
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3b01      	subs	r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	f340 8084 	ble.w	800a8a4 <_scanf_float+0x278>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	603b      	str	r3, [r7, #0]
 800a7a2:	e766      	b.n	800a672 <_scanf_float+0x46>
 800a7a4:	eb1a 0f05 	cmn.w	sl, r5
 800a7a8:	f47f af70 	bne.w	800a68c <_scanf_float+0x60>
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b8:	e7e4      	b.n	800a784 <_scanf_float+0x158>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	0610      	lsls	r0, r2, #24
 800a7be:	f57f af65 	bpl.w	800a68c <_scanf_float+0x60>
 800a7c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7c6:	e7f4      	b.n	800a7b2 <_scanf_float+0x186>
 800a7c8:	f1ba 0f00 	cmp.w	sl, #0
 800a7cc:	d10e      	bne.n	800a7ec <_scanf_float+0x1c0>
 800a7ce:	f1b9 0f00 	cmp.w	r9, #0
 800a7d2:	d10e      	bne.n	800a7f2 <_scanf_float+0x1c6>
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7de:	d108      	bne.n	800a7f2 <_scanf_float+0x1c6>
 800a7e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7e4:	6022      	str	r2, [r4, #0]
 800a7e6:	f04f 0a01 	mov.w	sl, #1
 800a7ea:	e7e3      	b.n	800a7b4 <_scanf_float+0x188>
 800a7ec:	f1ba 0f02 	cmp.w	sl, #2
 800a7f0:	d055      	beq.n	800a89e <_scanf_float+0x272>
 800a7f2:	2d01      	cmp	r5, #1
 800a7f4:	d002      	beq.n	800a7fc <_scanf_float+0x1d0>
 800a7f6:	2d04      	cmp	r5, #4
 800a7f8:	f47f af48 	bne.w	800a68c <_scanf_float+0x60>
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	b2ed      	uxtb	r5, r5
 800a800:	e7d8      	b.n	800a7b4 <_scanf_float+0x188>
 800a802:	f1ba 0f01 	cmp.w	sl, #1
 800a806:	f47f af41 	bne.w	800a68c <_scanf_float+0x60>
 800a80a:	f04f 0a02 	mov.w	sl, #2
 800a80e:	e7d1      	b.n	800a7b4 <_scanf_float+0x188>
 800a810:	b97d      	cbnz	r5, 800a832 <_scanf_float+0x206>
 800a812:	f1b9 0f00 	cmp.w	r9, #0
 800a816:	f47f af3c 	bne.w	800a692 <_scanf_float+0x66>
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a820:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a824:	f47f af39 	bne.w	800a69a <_scanf_float+0x6e>
 800a828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	2501      	movs	r5, #1
 800a830:	e7c0      	b.n	800a7b4 <_scanf_float+0x188>
 800a832:	2d03      	cmp	r5, #3
 800a834:	d0e2      	beq.n	800a7fc <_scanf_float+0x1d0>
 800a836:	2d05      	cmp	r5, #5
 800a838:	e7de      	b.n	800a7f8 <_scanf_float+0x1cc>
 800a83a:	2d02      	cmp	r5, #2
 800a83c:	f47f af26 	bne.w	800a68c <_scanf_float+0x60>
 800a840:	2503      	movs	r5, #3
 800a842:	e7b7      	b.n	800a7b4 <_scanf_float+0x188>
 800a844:	2d06      	cmp	r5, #6
 800a846:	f47f af21 	bne.w	800a68c <_scanf_float+0x60>
 800a84a:	2507      	movs	r5, #7
 800a84c:	e7b2      	b.n	800a7b4 <_scanf_float+0x188>
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	0591      	lsls	r1, r2, #22
 800a852:	f57f af1b 	bpl.w	800a68c <_scanf_float+0x60>
 800a856:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a85a:	6022      	str	r2, [r4, #0]
 800a85c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a860:	e7a8      	b.n	800a7b4 <_scanf_float+0x188>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a868:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a86c:	d006      	beq.n	800a87c <_scanf_float+0x250>
 800a86e:	0550      	lsls	r0, r2, #21
 800a870:	f57f af0c 	bpl.w	800a68c <_scanf_float+0x60>
 800a874:	f1b9 0f00 	cmp.w	r9, #0
 800a878:	f43f af0f 	beq.w	800a69a <_scanf_float+0x6e>
 800a87c:	0591      	lsls	r1, r2, #22
 800a87e:	bf58      	it	pl
 800a880:	9901      	ldrpl	r1, [sp, #4]
 800a882:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a886:	bf58      	it	pl
 800a888:	eba9 0101 	subpl.w	r1, r9, r1
 800a88c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a890:	bf58      	it	pl
 800a892:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	f04f 0900 	mov.w	r9, #0
 800a89c:	e78a      	b.n	800a7b4 <_scanf_float+0x188>
 800a89e:	f04f 0a03 	mov.w	sl, #3
 800a8a2:	e787      	b.n	800a7b4 <_scanf_float+0x188>
 800a8a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8a8:	4639      	mov	r1, r7
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	4798      	blx	r3
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f aedf 	beq.w	800a672 <_scanf_float+0x46>
 800a8b4:	e6ea      	b.n	800a68c <_scanf_float+0x60>
 800a8b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4798      	blx	r3
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	e6ec      	b.n	800a6a6 <_scanf_float+0x7a>
 800a8cc:	1e6b      	subs	r3, r5, #1
 800a8ce:	2b06      	cmp	r3, #6
 800a8d0:	d825      	bhi.n	800a91e <_scanf_float+0x2f2>
 800a8d2:	2d02      	cmp	r5, #2
 800a8d4:	d836      	bhi.n	800a944 <_scanf_float+0x318>
 800a8d6:	455e      	cmp	r6, fp
 800a8d8:	f67f aee8 	bls.w	800a6ac <_scanf_float+0x80>
 800a8dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8e4:	463a      	mov	r2, r7
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	4798      	blx	r3
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	e7f1      	b.n	800a8d6 <_scanf_float+0x2aa>
 800a8f2:	9802      	ldr	r0, [sp, #8]
 800a8f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a8fc:	9002      	str	r0, [sp, #8]
 800a8fe:	463a      	mov	r2, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4798      	blx	r3
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	3b01      	subs	r3, #1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a90e:	fa5f fa8a 	uxtb.w	sl, sl
 800a912:	f1ba 0f02 	cmp.w	sl, #2
 800a916:	d1ec      	bne.n	800a8f2 <_scanf_float+0x2c6>
 800a918:	3d03      	subs	r5, #3
 800a91a:	b2ed      	uxtb	r5, r5
 800a91c:	1b76      	subs	r6, r6, r5
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	05da      	lsls	r2, r3, #23
 800a922:	d52f      	bpl.n	800a984 <_scanf_float+0x358>
 800a924:	055b      	lsls	r3, r3, #21
 800a926:	d510      	bpl.n	800a94a <_scanf_float+0x31e>
 800a928:	455e      	cmp	r6, fp
 800a92a:	f67f aebf 	bls.w	800a6ac <_scanf_float+0x80>
 800a92e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a936:	463a      	mov	r2, r7
 800a938:	4640      	mov	r0, r8
 800a93a:	4798      	blx	r3
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	3b01      	subs	r3, #1
 800a940:	6123      	str	r3, [r4, #16]
 800a942:	e7f1      	b.n	800a928 <_scanf_float+0x2fc>
 800a944:	46aa      	mov	sl, r5
 800a946:	9602      	str	r6, [sp, #8]
 800a948:	e7df      	b.n	800a90a <_scanf_float+0x2de>
 800a94a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	2965      	cmp	r1, #101	; 0x65
 800a952:	f103 33ff 	add.w	r3, r3, #4294967295
 800a956:	f106 35ff 	add.w	r5, r6, #4294967295
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	d00c      	beq.n	800a978 <_scanf_float+0x34c>
 800a95e:	2945      	cmp	r1, #69	; 0x45
 800a960:	d00a      	beq.n	800a978 <_scanf_float+0x34c>
 800a962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a966:	463a      	mov	r2, r7
 800a968:	4640      	mov	r0, r8
 800a96a:	4798      	blx	r3
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a972:	3b01      	subs	r3, #1
 800a974:	1eb5      	subs	r5, r6, #2
 800a976:	6123      	str	r3, [r4, #16]
 800a978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a97c:	463a      	mov	r2, r7
 800a97e:	4640      	mov	r0, r8
 800a980:	4798      	blx	r3
 800a982:	462e      	mov	r6, r5
 800a984:	6825      	ldr	r5, [r4, #0]
 800a986:	f015 0510 	ands.w	r5, r5, #16
 800a98a:	d158      	bne.n	800aa3e <_scanf_float+0x412>
 800a98c:	7035      	strb	r5, [r6, #0]
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a998:	d11c      	bne.n	800a9d4 <_scanf_float+0x3a8>
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	454b      	cmp	r3, r9
 800a99e:	eba3 0209 	sub.w	r2, r3, r9
 800a9a2:	d124      	bne.n	800a9ee <_scanf_float+0x3c2>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4659      	mov	r1, fp
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	f002 fc2d 	bl	800d208 <_strtod_r>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	6821      	ldr	r1, [r4, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f011 0f02 	tst.w	r1, #2
 800a9b8:	ec57 6b10 	vmov	r6, r7, d0
 800a9bc:	f103 0204 	add.w	r2, r3, #4
 800a9c0:	d020      	beq.n	800aa04 <_scanf_float+0x3d8>
 800a9c2:	9903      	ldr	r1, [sp, #12]
 800a9c4:	600a      	str	r2, [r1, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	e9c3 6700 	strd	r6, r7, [r3]
 800a9cc:	68e3      	ldr	r3, [r4, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	60e3      	str	r3, [r4, #12]
 800a9d2:	e66c      	b.n	800a6ae <_scanf_float+0x82>
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0e4      	beq.n	800a9a4 <_scanf_float+0x378>
 800a9da:	9905      	ldr	r1, [sp, #20]
 800a9dc:	230a      	movs	r3, #10
 800a9de:	462a      	mov	r2, r5
 800a9e0:	3101      	adds	r1, #1
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f002 fc98 	bl	800d318 <_strtol_r>
 800a9e8:	9b04      	ldr	r3, [sp, #16]
 800a9ea:	9e05      	ldr	r6, [sp, #20]
 800a9ec:	1ac2      	subs	r2, r0, r3
 800a9ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9f2:	429e      	cmp	r6, r3
 800a9f4:	bf28      	it	cs
 800a9f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9fa:	4912      	ldr	r1, [pc, #72]	; (800aa44 <_scanf_float+0x418>)
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f8e7 	bl	800abd0 <siprintf>
 800aa02:	e7cf      	b.n	800a9a4 <_scanf_float+0x378>
 800aa04:	f011 0f04 	tst.w	r1, #4
 800aa08:	9903      	ldr	r1, [sp, #12]
 800aa0a:	600a      	str	r2, [r1, #0]
 800aa0c:	d1db      	bne.n	800a9c6 <_scanf_float+0x39a>
 800aa0e:	f8d3 8000 	ldr.w	r8, [r3]
 800aa12:	ee10 2a10 	vmov	r2, s0
 800aa16:	ee10 0a10 	vmov	r0, s0
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f6 f885 	bl	8000b2c <__aeabi_dcmpun>
 800aa22:	b128      	cbz	r0, 800aa30 <_scanf_float+0x404>
 800aa24:	4808      	ldr	r0, [pc, #32]	; (800aa48 <_scanf_float+0x41c>)
 800aa26:	f000 f9b5 	bl	800ad94 <nanf>
 800aa2a:	ed88 0a00 	vstr	s0, [r8]
 800aa2e:	e7cd      	b.n	800a9cc <_scanf_float+0x3a0>
 800aa30:	4630      	mov	r0, r6
 800aa32:	4639      	mov	r1, r7
 800aa34:	f7f6 f8d8 	bl	8000be8 <__aeabi_d2f>
 800aa38:	f8c8 0000 	str.w	r0, [r8]
 800aa3c:	e7c6      	b.n	800a9cc <_scanf_float+0x3a0>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	e635      	b.n	800a6ae <_scanf_float+0x82>
 800aa42:	bf00      	nop
 800aa44:	0800f3e8 	.word	0x0800f3e8
 800aa48:	0800f77d 	.word	0x0800f77d

0800aa4c <std>:
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	e9c0 3300 	strd	r3, r3, [r0]
 800aa56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa5a:	6083      	str	r3, [r0, #8]
 800aa5c:	8181      	strh	r1, [r0, #12]
 800aa5e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa60:	81c2      	strh	r2, [r0, #14]
 800aa62:	6183      	str	r3, [r0, #24]
 800aa64:	4619      	mov	r1, r3
 800aa66:	2208      	movs	r2, #8
 800aa68:	305c      	adds	r0, #92	; 0x5c
 800aa6a:	f000 f914 	bl	800ac96 <memset>
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <std+0x38>)
 800aa70:	6263      	str	r3, [r4, #36]	; 0x24
 800aa72:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <std+0x3c>)
 800aa74:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <std+0x40>)
 800aa78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <std+0x44>)
 800aa7c:	6224      	str	r4, [r4, #32]
 800aa7e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	bf00      	nop
 800aa84:	0800ac11 	.word	0x0800ac11
 800aa88:	0800ac33 	.word	0x0800ac33
 800aa8c:	0800ac6b 	.word	0x0800ac6b
 800aa90:	0800ac8f 	.word	0x0800ac8f

0800aa94 <stdio_exit_handler>:
 800aa94:	4a02      	ldr	r2, [pc, #8]	; (800aaa0 <stdio_exit_handler+0xc>)
 800aa96:	4903      	ldr	r1, [pc, #12]	; (800aaa4 <stdio_exit_handler+0x10>)
 800aa98:	4803      	ldr	r0, [pc, #12]	; (800aaa8 <stdio_exit_handler+0x14>)
 800aa9a:	f000 b869 	b.w	800ab70 <_fwalk_sglue>
 800aa9e:	bf00      	nop
 800aaa0:	20000014 	.word	0x20000014
 800aaa4:	0800d961 	.word	0x0800d961
 800aaa8:	20000020 	.word	0x20000020

0800aaac <cleanup_stdio>:
 800aaac:	6841      	ldr	r1, [r0, #4]
 800aaae:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <cleanup_stdio+0x34>)
 800aab0:	4299      	cmp	r1, r3
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	d001      	beq.n	800aabc <cleanup_stdio+0x10>
 800aab8:	f002 ff52 	bl	800d960 <_fflush_r>
 800aabc:	68a1      	ldr	r1, [r4, #8]
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <cleanup_stdio+0x38>)
 800aac0:	4299      	cmp	r1, r3
 800aac2:	d002      	beq.n	800aaca <cleanup_stdio+0x1e>
 800aac4:	4620      	mov	r0, r4
 800aac6:	f002 ff4b 	bl	800d960 <_fflush_r>
 800aaca:	68e1      	ldr	r1, [r4, #12]
 800aacc:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <cleanup_stdio+0x3c>)
 800aace:	4299      	cmp	r1, r3
 800aad0:	d004      	beq.n	800aadc <cleanup_stdio+0x30>
 800aad2:	4620      	mov	r0, r4
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	f002 bf42 	b.w	800d960 <_fflush_r>
 800aadc:	bd10      	pop	{r4, pc}
 800aade:	bf00      	nop
 800aae0:	200009fc 	.word	0x200009fc
 800aae4:	20000a64 	.word	0x20000a64
 800aae8:	20000acc 	.word	0x20000acc

0800aaec <global_stdio_init.part.0>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <global_stdio_init.part.0+0x30>)
 800aaf0:	4c0b      	ldr	r4, [pc, #44]	; (800ab20 <global_stdio_init.part.0+0x34>)
 800aaf2:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <global_stdio_init.part.0+0x38>)
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2104      	movs	r1, #4
 800aafc:	f7ff ffa6 	bl	800aa4c <std>
 800ab00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab04:	2201      	movs	r2, #1
 800ab06:	2109      	movs	r1, #9
 800ab08:	f7ff ffa0 	bl	800aa4c <std>
 800ab0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab10:	2202      	movs	r2, #2
 800ab12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab16:	2112      	movs	r1, #18
 800ab18:	f7ff bf98 	b.w	800aa4c <std>
 800ab1c:	20000b34 	.word	0x20000b34
 800ab20:	200009fc 	.word	0x200009fc
 800ab24:	0800aa95 	.word	0x0800aa95

0800ab28 <__sfp_lock_acquire>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__sfp_lock_acquire+0x8>)
 800ab2a:	f000 b931 	b.w	800ad90 <__retarget_lock_acquire_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000b3d 	.word	0x20000b3d

0800ab34 <__sfp_lock_release>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__sfp_lock_release+0x8>)
 800ab36:	f000 b92c 	b.w	800ad92 <__retarget_lock_release_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	20000b3d 	.word	0x20000b3d

0800ab40 <__sinit>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	f7ff fff0 	bl	800ab28 <__sfp_lock_acquire>
 800ab48:	6a23      	ldr	r3, [r4, #32]
 800ab4a:	b11b      	cbz	r3, 800ab54 <__sinit+0x14>
 800ab4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab50:	f7ff bff0 	b.w	800ab34 <__sfp_lock_release>
 800ab54:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <__sinit+0x28>)
 800ab56:	6223      	str	r3, [r4, #32]
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <__sinit+0x2c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1f5      	bne.n	800ab4c <__sinit+0xc>
 800ab60:	f7ff ffc4 	bl	800aaec <global_stdio_init.part.0>
 800ab64:	e7f2      	b.n	800ab4c <__sinit+0xc>
 800ab66:	bf00      	nop
 800ab68:	0800aaad 	.word	0x0800aaad
 800ab6c:	20000b34 	.word	0x20000b34

0800ab70 <_fwalk_sglue>:
 800ab70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab74:	4607      	mov	r7, r0
 800ab76:	4688      	mov	r8, r1
 800ab78:	4614      	mov	r4, r2
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab80:	f1b9 0901 	subs.w	r9, r9, #1
 800ab84:	d505      	bpl.n	800ab92 <_fwalk_sglue+0x22>
 800ab86:	6824      	ldr	r4, [r4, #0]
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	d1f7      	bne.n	800ab7c <_fwalk_sglue+0xc>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d907      	bls.n	800aba8 <_fwalk_sglue+0x38>
 800ab98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	d003      	beq.n	800aba8 <_fwalk_sglue+0x38>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4638      	mov	r0, r7
 800aba4:	47c0      	blx	r8
 800aba6:	4306      	orrs	r6, r0
 800aba8:	3568      	adds	r5, #104	; 0x68
 800abaa:	e7e9      	b.n	800ab80 <_fwalk_sglue+0x10>

0800abac <iprintf>:
 800abac:	b40f      	push	{r0, r1, r2, r3}
 800abae:	b507      	push	{r0, r1, r2, lr}
 800abb0:	4906      	ldr	r1, [pc, #24]	; (800abcc <iprintf+0x20>)
 800abb2:	ab04      	add	r3, sp, #16
 800abb4:	6808      	ldr	r0, [r1, #0]
 800abb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abba:	6881      	ldr	r1, [r0, #8]
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	f002 fd2f 	bl	800d620 <_vfiprintf_r>
 800abc2:	b003      	add	sp, #12
 800abc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc8:	b004      	add	sp, #16
 800abca:	4770      	bx	lr
 800abcc:	2000006c 	.word	0x2000006c

0800abd0 <siprintf>:
 800abd0:	b40e      	push	{r1, r2, r3}
 800abd2:	b500      	push	{lr}
 800abd4:	b09c      	sub	sp, #112	; 0x70
 800abd6:	ab1d      	add	r3, sp, #116	; 0x74
 800abd8:	9002      	str	r0, [sp, #8]
 800abda:	9006      	str	r0, [sp, #24]
 800abdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abe0:	4809      	ldr	r0, [pc, #36]	; (800ac08 <siprintf+0x38>)
 800abe2:	9107      	str	r1, [sp, #28]
 800abe4:	9104      	str	r1, [sp, #16]
 800abe6:	4909      	ldr	r1, [pc, #36]	; (800ac0c <siprintf+0x3c>)
 800abe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abec:	9105      	str	r1, [sp, #20]
 800abee:	6800      	ldr	r0, [r0, #0]
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	a902      	add	r1, sp, #8
 800abf4:	f002 fbec 	bl	800d3d0 <_svfiprintf_r>
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	b01c      	add	sp, #112	; 0x70
 800ac00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac04:	b003      	add	sp, #12
 800ac06:	4770      	bx	lr
 800ac08:	2000006c 	.word	0x2000006c
 800ac0c:	ffff0208 	.word	0xffff0208

0800ac10 <__sread>:
 800ac10:	b510      	push	{r4, lr}
 800ac12:	460c      	mov	r4, r1
 800ac14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac18:	f000 f86c 	bl	800acf4 <_read_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	bfab      	itete	ge
 800ac20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac22:	89a3      	ldrhlt	r3, [r4, #12]
 800ac24:	181b      	addge	r3, r3, r0
 800ac26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac2a:	bfac      	ite	ge
 800ac2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac2e:	81a3      	strhlt	r3, [r4, #12]
 800ac30:	bd10      	pop	{r4, pc}

0800ac32 <__swrite>:
 800ac32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	461f      	mov	r7, r3
 800ac38:	898b      	ldrh	r3, [r1, #12]
 800ac3a:	05db      	lsls	r3, r3, #23
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4616      	mov	r6, r2
 800ac42:	d505      	bpl.n	800ac50 <__swrite+0x1e>
 800ac44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac48:	2302      	movs	r3, #2
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f000 f840 	bl	800acd0 <_lseek_r>
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	4632      	mov	r2, r6
 800ac5e:	463b      	mov	r3, r7
 800ac60:	4628      	mov	r0, r5
 800ac62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac66:	f000 b857 	b.w	800ad18 <_write_r>

0800ac6a <__sseek>:
 800ac6a:	b510      	push	{r4, lr}
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac72:	f000 f82d 	bl	800acd0 <_lseek_r>
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	bf15      	itete	ne
 800ac7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac86:	81a3      	strheq	r3, [r4, #12]
 800ac88:	bf18      	it	ne
 800ac8a:	81a3      	strhne	r3, [r4, #12]
 800ac8c:	bd10      	pop	{r4, pc}

0800ac8e <__sclose>:
 800ac8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac92:	f000 b80d 	b.w	800acb0 <_close_r>

0800ac96 <memset>:
 800ac96:	4402      	add	r2, r0
 800ac98:	4603      	mov	r3, r0
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d100      	bne.n	800aca0 <memset+0xa>
 800ac9e:	4770      	bx	lr
 800aca0:	f803 1b01 	strb.w	r1, [r3], #1
 800aca4:	e7f9      	b.n	800ac9a <memset+0x4>
	...

0800aca8 <_localeconv_r>:
 800aca8:	4800      	ldr	r0, [pc, #0]	; (800acac <_localeconv_r+0x4>)
 800acaa:	4770      	bx	lr
 800acac:	20000160 	.word	0x20000160

0800acb0 <_close_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	; (800accc <_close_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7f7 fc89 	bl	80025d2 <_close>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_close_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_close_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	20000b38 	.word	0x20000b38

0800acd0 <_lseek_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	; (800acf0 <_lseek_r+0x20>)
 800acd4:	4604      	mov	r4, r0
 800acd6:	4608      	mov	r0, r1
 800acd8:	4611      	mov	r1, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	602a      	str	r2, [r5, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f7f7 fc9e 	bl	8002620 <_lseek>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d102      	bne.n	800acee <_lseek_r+0x1e>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	b103      	cbz	r3, 800acee <_lseek_r+0x1e>
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	20000b38 	.word	0x20000b38

0800acf4 <_read_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	; (800ad14 <_read_r+0x20>)
 800acf8:	4604      	mov	r4, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f7f7 fc48 	bl	8002598 <_read>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_read_r+0x1e>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_read_r+0x1e>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20000b38 	.word	0x20000b38

0800ad18 <_write_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_write_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f6 fcbe 	bl	80016a8 <_write>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_write_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_write_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000b38 	.word	0x20000b38

0800ad3c <__errno>:
 800ad3c:	4b01      	ldr	r3, [pc, #4]	; (800ad44 <__errno+0x8>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	2000006c 	.word	0x2000006c

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4d0d      	ldr	r5, [pc, #52]	; (800ad80 <__libc_init_array+0x38>)
 800ad4c:	4c0d      	ldr	r4, [pc, #52]	; (800ad84 <__libc_init_array+0x3c>)
 800ad4e:	1b64      	subs	r4, r4, r5
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	2600      	movs	r6, #0
 800ad54:	42a6      	cmp	r6, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	4d0b      	ldr	r5, [pc, #44]	; (800ad88 <__libc_init_array+0x40>)
 800ad5a:	4c0c      	ldr	r4, [pc, #48]	; (800ad8c <__libc_init_array+0x44>)
 800ad5c:	f003 fbd4 	bl	800e508 <_init>
 800ad60:	1b64      	subs	r4, r4, r5
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	2600      	movs	r6, #0
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad70:	4798      	blx	r3
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7a:	4798      	blx	r3
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800f7e0 	.word	0x0800f7e0
 800ad84:	0800f7e0 	.word	0x0800f7e0
 800ad88:	0800f7e0 	.word	0x0800f7e0
 800ad8c:	0800f7e4 	.word	0x0800f7e4

0800ad90 <__retarget_lock_acquire_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <__retarget_lock_release_recursive>:
 800ad92:	4770      	bx	lr

0800ad94 <nanf>:
 800ad94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad9c <nanf+0x8>
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	7fc00000 	.word	0x7fc00000

0800ada0 <quorem>:
 800ada0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	6903      	ldr	r3, [r0, #16]
 800ada6:	690c      	ldr	r4, [r1, #16]
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	4607      	mov	r7, r0
 800adac:	db7e      	blt.n	800aeac <quorem+0x10c>
 800adae:	3c01      	subs	r4, #1
 800adb0:	f101 0814 	add.w	r8, r1, #20
 800adb4:	f100 0514 	add.w	r5, r0, #20
 800adb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc6:	3301      	adds	r3, #1
 800adc8:	429a      	cmp	r2, r3
 800adca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800add2:	fbb2 f6f3 	udiv	r6, r2, r3
 800add6:	d331      	bcc.n	800ae3c <quorem+0x9c>
 800add8:	f04f 0e00 	mov.w	lr, #0
 800addc:	4640      	mov	r0, r8
 800adde:	46ac      	mov	ip, r5
 800ade0:	46f2      	mov	sl, lr
 800ade2:	f850 2b04 	ldr.w	r2, [r0], #4
 800ade6:	b293      	uxth	r3, r2
 800ade8:	fb06 e303 	mla	r3, r6, r3, lr
 800adec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adf0:	0c1a      	lsrs	r2, r3, #16
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	ebaa 0303 	sub.w	r3, sl, r3
 800adf8:	f8dc a000 	ldr.w	sl, [ip]
 800adfc:	fa13 f38a 	uxtah	r3, r3, sl
 800ae00:	fb06 220e 	mla	r2, r6, lr, r2
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	9b00      	ldr	r3, [sp, #0]
 800ae08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae16:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae1a:	4581      	cmp	r9, r0
 800ae1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae20:	f84c 3b04 	str.w	r3, [ip], #4
 800ae24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae28:	d2db      	bcs.n	800ade2 <quorem+0x42>
 800ae2a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae2e:	b92b      	cbnz	r3, 800ae3c <quorem+0x9c>
 800ae30:	9b01      	ldr	r3, [sp, #4]
 800ae32:	3b04      	subs	r3, #4
 800ae34:	429d      	cmp	r5, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	d32c      	bcc.n	800ae94 <quorem+0xf4>
 800ae3a:	613c      	str	r4, [r7, #16]
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f001 f9ef 	bl	800c220 <__mcmp>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	db22      	blt.n	800ae8c <quorem+0xec>
 800ae46:	3601      	adds	r6, #1
 800ae48:	4629      	mov	r1, r5
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae50:	f8d1 c000 	ldr.w	ip, [r1]
 800ae54:	b293      	uxth	r3, r2
 800ae56:	1ac3      	subs	r3, r0, r3
 800ae58:	0c12      	lsrs	r2, r2, #16
 800ae5a:	fa13 f38c 	uxtah	r3, r3, ip
 800ae5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae6c:	45c1      	cmp	r9, r8
 800ae6e:	f841 3b04 	str.w	r3, [r1], #4
 800ae72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae76:	d2e9      	bcs.n	800ae4c <quorem+0xac>
 800ae78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae80:	b922      	cbnz	r2, 800ae8c <quorem+0xec>
 800ae82:	3b04      	subs	r3, #4
 800ae84:	429d      	cmp	r5, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	d30a      	bcc.n	800aea0 <quorem+0x100>
 800ae8a:	613c      	str	r4, [r7, #16]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	b003      	add	sp, #12
 800ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae94:	6812      	ldr	r2, [r2, #0]
 800ae96:	3b04      	subs	r3, #4
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	d1ce      	bne.n	800ae3a <quorem+0x9a>
 800ae9c:	3c01      	subs	r4, #1
 800ae9e:	e7c9      	b.n	800ae34 <quorem+0x94>
 800aea0:	6812      	ldr	r2, [r2, #0]
 800aea2:	3b04      	subs	r3, #4
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d1f0      	bne.n	800ae8a <quorem+0xea>
 800aea8:	3c01      	subs	r4, #1
 800aeaa:	e7eb      	b.n	800ae84 <quorem+0xe4>
 800aeac:	2000      	movs	r0, #0
 800aeae:	e7ee      	b.n	800ae8e <quorem+0xee>

0800aeb0 <_dtoa_r>:
 800aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	ed2d 8b04 	vpush	{d8-d9}
 800aeb8:	69c5      	ldr	r5, [r0, #28]
 800aeba:	b093      	sub	sp, #76	; 0x4c
 800aebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aec0:	ec57 6b10 	vmov	r6, r7, d0
 800aec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aec8:	9107      	str	r1, [sp, #28]
 800aeca:	4604      	mov	r4, r0
 800aecc:	920a      	str	r2, [sp, #40]	; 0x28
 800aece:	930d      	str	r3, [sp, #52]	; 0x34
 800aed0:	b975      	cbnz	r5, 800aef0 <_dtoa_r+0x40>
 800aed2:	2010      	movs	r0, #16
 800aed4:	f000 fe2a 	bl	800bb2c <malloc>
 800aed8:	4602      	mov	r2, r0
 800aeda:	61e0      	str	r0, [r4, #28]
 800aedc:	b920      	cbnz	r0, 800aee8 <_dtoa_r+0x38>
 800aede:	4bae      	ldr	r3, [pc, #696]	; (800b198 <_dtoa_r+0x2e8>)
 800aee0:	21ef      	movs	r1, #239	; 0xef
 800aee2:	48ae      	ldr	r0, [pc, #696]	; (800b19c <_dtoa_r+0x2ec>)
 800aee4:	f002 fe4c 	bl	800db80 <__assert_func>
 800aee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aeec:	6005      	str	r5, [r0, #0]
 800aeee:	60c5      	str	r5, [r0, #12]
 800aef0:	69e3      	ldr	r3, [r4, #28]
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	b151      	cbz	r1, 800af0c <_dtoa_r+0x5c>
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	604a      	str	r2, [r1, #4]
 800aefa:	2301      	movs	r3, #1
 800aefc:	4093      	lsls	r3, r2
 800aefe:	608b      	str	r3, [r1, #8]
 800af00:	4620      	mov	r0, r4
 800af02:	f000 ff07 	bl	800bd14 <_Bfree>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	1e3b      	subs	r3, r7, #0
 800af0e:	bfbb      	ittet	lt
 800af10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af14:	9303      	strlt	r3, [sp, #12]
 800af16:	2300      	movge	r3, #0
 800af18:	2201      	movlt	r2, #1
 800af1a:	bfac      	ite	ge
 800af1c:	f8c8 3000 	strge.w	r3, [r8]
 800af20:	f8c8 2000 	strlt.w	r2, [r8]
 800af24:	4b9e      	ldr	r3, [pc, #632]	; (800b1a0 <_dtoa_r+0x2f0>)
 800af26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af2a:	ea33 0308 	bics.w	r3, r3, r8
 800af2e:	d11b      	bne.n	800af68 <_dtoa_r+0xb8>
 800af30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af32:	f242 730f 	movw	r3, #9999	; 0x270f
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800af3c:	4333      	orrs	r3, r6
 800af3e:	f000 8593 	beq.w	800ba68 <_dtoa_r+0xbb8>
 800af42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af44:	b963      	cbnz	r3, 800af60 <_dtoa_r+0xb0>
 800af46:	4b97      	ldr	r3, [pc, #604]	; (800b1a4 <_dtoa_r+0x2f4>)
 800af48:	e027      	b.n	800af9a <_dtoa_r+0xea>
 800af4a:	4b97      	ldr	r3, [pc, #604]	; (800b1a8 <_dtoa_r+0x2f8>)
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	9800      	ldr	r0, [sp, #0]
 800af56:	b013      	add	sp, #76	; 0x4c
 800af58:	ecbd 8b04 	vpop	{d8-d9}
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	4b90      	ldr	r3, [pc, #576]	; (800b1a4 <_dtoa_r+0x2f4>)
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	3303      	adds	r3, #3
 800af66:	e7f3      	b.n	800af50 <_dtoa_r+0xa0>
 800af68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	ec51 0b17 	vmov	r0, r1, d7
 800af72:	eeb0 8a47 	vmov.f32	s16, s14
 800af76:	eef0 8a67 	vmov.f32	s17, s15
 800af7a:	2300      	movs	r3, #0
 800af7c:	f7f5 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af80:	4681      	mov	r9, r0
 800af82:	b160      	cbz	r0, 800af9e <_dtoa_r+0xee>
 800af84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af86:	2301      	movs	r3, #1
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8568 	beq.w	800ba62 <_dtoa_r+0xbb2>
 800af92:	4b86      	ldr	r3, [pc, #536]	; (800b1ac <_dtoa_r+0x2fc>)
 800af94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	3b01      	subs	r3, #1
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	e7da      	b.n	800af54 <_dtoa_r+0xa4>
 800af9e:	aa10      	add	r2, sp, #64	; 0x40
 800afa0:	a911      	add	r1, sp, #68	; 0x44
 800afa2:	4620      	mov	r0, r4
 800afa4:	eeb0 0a48 	vmov.f32	s0, s16
 800afa8:	eef0 0a68 	vmov.f32	s1, s17
 800afac:	f001 fa4e 	bl	800c44c <__d2b>
 800afb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800afb4:	4682      	mov	sl, r0
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	d07f      	beq.n	800b0ba <_dtoa_r+0x20a>
 800afba:	ee18 3a90 	vmov	r3, s17
 800afbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800afc6:	ec51 0b18 	vmov	r0, r1, d8
 800afca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800afd6:	4619      	mov	r1, r3
 800afd8:	2200      	movs	r2, #0
 800afda:	4b75      	ldr	r3, [pc, #468]	; (800b1b0 <_dtoa_r+0x300>)
 800afdc:	f7f5 f954 	bl	8000288 <__aeabi_dsub>
 800afe0:	a367      	add	r3, pc, #412	; (adr r3, 800b180 <_dtoa_r+0x2d0>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	a367      	add	r3, pc, #412	; (adr r3, 800b188 <_dtoa_r+0x2d8>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f94c 	bl	800028c <__adddf3>
 800aff4:	4606      	mov	r6, r0
 800aff6:	4628      	mov	r0, r5
 800aff8:	460f      	mov	r7, r1
 800affa:	f7f5 fa93 	bl	8000524 <__aeabi_i2d>
 800affe:	a364      	add	r3, pc, #400	; (adr r3, 800b190 <_dtoa_r+0x2e0>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f7f5 faf8 	bl	80005f8 <__aeabi_dmul>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 f93c 	bl	800028c <__adddf3>
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	f7f5 fd9e 	bl	8000b58 <__aeabi_d2iz>
 800b01c:	2200      	movs	r2, #0
 800b01e:	4683      	mov	fp, r0
 800b020:	2300      	movs	r3, #0
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 fd59 	bl	8000adc <__aeabi_dcmplt>
 800b02a:	b148      	cbz	r0, 800b040 <_dtoa_r+0x190>
 800b02c:	4658      	mov	r0, fp
 800b02e:	f7f5 fa79 	bl	8000524 <__aeabi_i2d>
 800b032:	4632      	mov	r2, r6
 800b034:	463b      	mov	r3, r7
 800b036:	f7f5 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800b03a:	b908      	cbnz	r0, 800b040 <_dtoa_r+0x190>
 800b03c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b040:	f1bb 0f16 	cmp.w	fp, #22
 800b044:	d857      	bhi.n	800b0f6 <_dtoa_r+0x246>
 800b046:	4b5b      	ldr	r3, [pc, #364]	; (800b1b4 <_dtoa_r+0x304>)
 800b048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	ec51 0b18 	vmov	r0, r1, d8
 800b054:	f7f5 fd42 	bl	8000adc <__aeabi_dcmplt>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d04e      	beq.n	800b0fa <_dtoa_r+0x24a>
 800b05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b060:	2300      	movs	r3, #0
 800b062:	930c      	str	r3, [sp, #48]	; 0x30
 800b064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b066:	1b5b      	subs	r3, r3, r5
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	bf45      	ittet	mi
 800b06c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b070:	9305      	strmi	r3, [sp, #20]
 800b072:	2300      	movpl	r3, #0
 800b074:	2300      	movmi	r3, #0
 800b076:	9206      	str	r2, [sp, #24]
 800b078:	bf54      	ite	pl
 800b07a:	9305      	strpl	r3, [sp, #20]
 800b07c:	9306      	strmi	r3, [sp, #24]
 800b07e:	f1bb 0f00 	cmp.w	fp, #0
 800b082:	db3c      	blt.n	800b0fe <_dtoa_r+0x24e>
 800b084:	9b06      	ldr	r3, [sp, #24]
 800b086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b08a:	445b      	add	r3, fp
 800b08c:	9306      	str	r3, [sp, #24]
 800b08e:	2300      	movs	r3, #0
 800b090:	9308      	str	r3, [sp, #32]
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	2b09      	cmp	r3, #9
 800b096:	d868      	bhi.n	800b16a <_dtoa_r+0x2ba>
 800b098:	2b05      	cmp	r3, #5
 800b09a:	bfc4      	itt	gt
 800b09c:	3b04      	subgt	r3, #4
 800b09e:	9307      	strgt	r3, [sp, #28]
 800b0a0:	9b07      	ldr	r3, [sp, #28]
 800b0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0a6:	bfcc      	ite	gt
 800b0a8:	2500      	movgt	r5, #0
 800b0aa:	2501      	movle	r5, #1
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	f200 8085 	bhi.w	800b1bc <_dtoa_r+0x30c>
 800b0b2:	e8df f003 	tbb	[pc, r3]
 800b0b6:	3b2e      	.short	0x3b2e
 800b0b8:	5839      	.short	0x5839
 800b0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0be:	441d      	add	r5, r3
 800b0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	bfc1      	itttt	gt
 800b0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b0d8:	bfd6      	itet	le
 800b0da:	f1c3 0320 	rsble	r3, r3, #32
 800b0de:	ea48 0003 	orrgt.w	r0, r8, r3
 800b0e2:	fa06 f003 	lslle.w	r0, r6, r3
 800b0e6:	f7f5 fa0d 	bl	8000504 <__aeabi_ui2d>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b0f0:	3d01      	subs	r5, #1
 800b0f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b0f4:	e76f      	b.n	800afd6 <_dtoa_r+0x126>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e7b3      	b.n	800b062 <_dtoa_r+0x1b2>
 800b0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b0fc:	e7b2      	b.n	800b064 <_dtoa_r+0x1b4>
 800b0fe:	9b05      	ldr	r3, [sp, #20]
 800b100:	eba3 030b 	sub.w	r3, r3, fp
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	f1cb 0300 	rsb	r3, fp, #0
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	2300      	movs	r3, #0
 800b10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b110:	e7bf      	b.n	800b092 <_dtoa_r+0x1e2>
 800b112:	2300      	movs	r3, #0
 800b114:	9309      	str	r3, [sp, #36]	; 0x24
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc52      	bgt.n	800b1c2 <_dtoa_r+0x312>
 800b11c:	2301      	movs	r3, #1
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	461a      	mov	r2, r3
 800b124:	920a      	str	r2, [sp, #40]	; 0x28
 800b126:	e00b      	b.n	800b140 <_dtoa_r+0x290>
 800b128:	2301      	movs	r3, #1
 800b12a:	e7f3      	b.n	800b114 <_dtoa_r+0x264>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9309      	str	r3, [sp, #36]	; 0x24
 800b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b132:	445b      	add	r3, fp
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	3301      	adds	r3, #1
 800b138:	2b01      	cmp	r3, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	bfb8      	it	lt
 800b13e:	2301      	movlt	r3, #1
 800b140:	69e0      	ldr	r0, [r4, #28]
 800b142:	2100      	movs	r1, #0
 800b144:	2204      	movs	r2, #4
 800b146:	f102 0614 	add.w	r6, r2, #20
 800b14a:	429e      	cmp	r6, r3
 800b14c:	d93d      	bls.n	800b1ca <_dtoa_r+0x31a>
 800b14e:	6041      	str	r1, [r0, #4]
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fd9f 	bl	800bc94 <_Balloc>
 800b156:	9000      	str	r0, [sp, #0]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d139      	bne.n	800b1d0 <_dtoa_r+0x320>
 800b15c:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_dtoa_r+0x308>)
 800b15e:	4602      	mov	r2, r0
 800b160:	f240 11af 	movw	r1, #431	; 0x1af
 800b164:	e6bd      	b.n	800aee2 <_dtoa_r+0x32>
 800b166:	2301      	movs	r3, #1
 800b168:	e7e1      	b.n	800b12e <_dtoa_r+0x27e>
 800b16a:	2501      	movs	r5, #1
 800b16c:	2300      	movs	r3, #0
 800b16e:	9307      	str	r3, [sp, #28]
 800b170:	9509      	str	r5, [sp, #36]	; 0x24
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	2200      	movs	r2, #0
 800b17c:	2312      	movs	r3, #18
 800b17e:	e7d1      	b.n	800b124 <_dtoa_r+0x274>
 800b180:	636f4361 	.word	0x636f4361
 800b184:	3fd287a7 	.word	0x3fd287a7
 800b188:	8b60c8b3 	.word	0x8b60c8b3
 800b18c:	3fc68a28 	.word	0x3fc68a28
 800b190:	509f79fb 	.word	0x509f79fb
 800b194:	3fd34413 	.word	0x3fd34413
 800b198:	0800f3fa 	.word	0x0800f3fa
 800b19c:	0800f411 	.word	0x0800f411
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	0800f3f6 	.word	0x0800f3f6
 800b1a8:	0800f3ed 	.word	0x0800f3ed
 800b1ac:	0800f3c5 	.word	0x0800f3c5
 800b1b0:	3ff80000 	.word	0x3ff80000
 800b1b4:	0800f500 	.word	0x0800f500
 800b1b8:	0800f469 	.word	0x0800f469
 800b1bc:	2301      	movs	r3, #1
 800b1be:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c0:	e7d7      	b.n	800b172 <_dtoa_r+0x2c2>
 800b1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	e7ba      	b.n	800b140 <_dtoa_r+0x290>
 800b1ca:	3101      	adds	r1, #1
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	e7ba      	b.n	800b146 <_dtoa_r+0x296>
 800b1d0:	69e3      	ldr	r3, [r4, #28]
 800b1d2:	9a00      	ldr	r2, [sp, #0]
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	2b0e      	cmp	r3, #14
 800b1da:	f200 80a8 	bhi.w	800b32e <_dtoa_r+0x47e>
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	f000 80a5 	beq.w	800b32e <_dtoa_r+0x47e>
 800b1e4:	f1bb 0f00 	cmp.w	fp, #0
 800b1e8:	dd38      	ble.n	800b25c <_dtoa_r+0x3ac>
 800b1ea:	4bc0      	ldr	r3, [pc, #768]	; (800b4ec <_dtoa_r+0x63c>)
 800b1ec:	f00b 020f 	and.w	r2, fp, #15
 800b1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b200:	d019      	beq.n	800b236 <_dtoa_r+0x386>
 800b202:	4bbb      	ldr	r3, [pc, #748]	; (800b4f0 <_dtoa_r+0x640>)
 800b204:	ec51 0b18 	vmov	r0, r1, d8
 800b208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b20c:	f7f5 fb1e 	bl	800084c <__aeabi_ddiv>
 800b210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b214:	f008 080f 	and.w	r8, r8, #15
 800b218:	2503      	movs	r5, #3
 800b21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b4f0 <_dtoa_r+0x640>
 800b21e:	f1b8 0f00 	cmp.w	r8, #0
 800b222:	d10a      	bne.n	800b23a <_dtoa_r+0x38a>
 800b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 fb0e 	bl	800084c <__aeabi_ddiv>
 800b230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b234:	e02b      	b.n	800b28e <_dtoa_r+0x3de>
 800b236:	2502      	movs	r5, #2
 800b238:	e7ef      	b.n	800b21a <_dtoa_r+0x36a>
 800b23a:	f018 0f01 	tst.w	r8, #1
 800b23e:	d008      	beq.n	800b252 <_dtoa_r+0x3a2>
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b248:	f7f5 f9d6 	bl	80005f8 <__aeabi_dmul>
 800b24c:	3501      	adds	r5, #1
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b256:	f109 0908 	add.w	r9, r9, #8
 800b25a:	e7e0      	b.n	800b21e <_dtoa_r+0x36e>
 800b25c:	f000 809f 	beq.w	800b39e <_dtoa_r+0x4ee>
 800b260:	f1cb 0600 	rsb	r6, fp, #0
 800b264:	4ba1      	ldr	r3, [pc, #644]	; (800b4ec <_dtoa_r+0x63c>)
 800b266:	4fa2      	ldr	r7, [pc, #648]	; (800b4f0 <_dtoa_r+0x640>)
 800b268:	f006 020f 	and.w	r2, r6, #15
 800b26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	ec51 0b18 	vmov	r0, r1, d8
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b280:	1136      	asrs	r6, r6, #4
 800b282:	2300      	movs	r3, #0
 800b284:	2502      	movs	r5, #2
 800b286:	2e00      	cmp	r6, #0
 800b288:	d17e      	bne.n	800b388 <_dtoa_r+0x4d8>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1d0      	bne.n	800b230 <_dtoa_r+0x380>
 800b28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 8084 	beq.w	800b3a2 <_dtoa_r+0x4f2>
 800b29a:	4b96      	ldr	r3, [pc, #600]	; (800b4f4 <_dtoa_r+0x644>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f5 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d07b      	beq.n	800b3a2 <_dtoa_r+0x4f2>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d078      	beq.n	800b3a2 <_dtoa_r+0x4f2>
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dd39      	ble.n	800b32a <_dtoa_r+0x47a>
 800b2b6:	4b90      	ldr	r3, [pc, #576]	; (800b4f8 <_dtoa_r+0x648>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 f99b 	bl	80005f8 <__aeabi_dmul>
 800b2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c6:	9e01      	ldr	r6, [sp, #4]
 800b2c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7f5 f926 	bl	8000524 <__aeabi_i2d>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	464b      	mov	r3, r9
 800b2dc:	f7f5 f98c 	bl	80005f8 <__aeabi_dmul>
 800b2e0:	4b86      	ldr	r3, [pc, #536]	; (800b4fc <_dtoa_r+0x64c>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f7f4 ffd2 	bl	800028c <__adddf3>
 800b2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d158      	bne.n	800b3a8 <_dtoa_r+0x4f8>
 800b2f6:	4b82      	ldr	r3, [pc, #520]	; (800b500 <_dtoa_r+0x650>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f4 ffc3 	bl	8000288 <__aeabi_dsub>
 800b302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b306:	4680      	mov	r8, r0
 800b308:	4689      	mov	r9, r1
 800b30a:	f7f5 fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f040 8296 	bne.w	800b840 <_dtoa_r+0x990>
 800b314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b318:	4640      	mov	r0, r8
 800b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f040 8289 	bne.w	800b83c <_dtoa_r+0x98c>
 800b32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b330:	2b00      	cmp	r3, #0
 800b332:	f2c0 814e 	blt.w	800b5d2 <_dtoa_r+0x722>
 800b336:	f1bb 0f0e 	cmp.w	fp, #14
 800b33a:	f300 814a 	bgt.w	800b5d2 <_dtoa_r+0x722>
 800b33e:	4b6b      	ldr	r3, [pc, #428]	; (800b4ec <_dtoa_r+0x63c>)
 800b340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f280 80dc 	bge.w	800b508 <_dtoa_r+0x658>
 800b350:	9b04      	ldr	r3, [sp, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f300 80d8 	bgt.w	800b508 <_dtoa_r+0x658>
 800b358:	f040 826f 	bne.w	800b83a <_dtoa_r+0x98a>
 800b35c:	4b68      	ldr	r3, [pc, #416]	; (800b500 <_dtoa_r+0x650>)
 800b35e:	2200      	movs	r2, #0
 800b360:	4640      	mov	r0, r8
 800b362:	4649      	mov	r1, r9
 800b364:	f7f5 f948 	bl	80005f8 <__aeabi_dmul>
 800b368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b36c:	f7f5 fbca 	bl	8000b04 <__aeabi_dcmpge>
 800b370:	9e04      	ldr	r6, [sp, #16]
 800b372:	4637      	mov	r7, r6
 800b374:	2800      	cmp	r0, #0
 800b376:	f040 8245 	bne.w	800b804 <_dtoa_r+0x954>
 800b37a:	9d00      	ldr	r5, [sp, #0]
 800b37c:	2331      	movs	r3, #49	; 0x31
 800b37e:	f805 3b01 	strb.w	r3, [r5], #1
 800b382:	f10b 0b01 	add.w	fp, fp, #1
 800b386:	e241      	b.n	800b80c <_dtoa_r+0x95c>
 800b388:	07f2      	lsls	r2, r6, #31
 800b38a:	d505      	bpl.n	800b398 <_dtoa_r+0x4e8>
 800b38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b390:	f7f5 f932 	bl	80005f8 <__aeabi_dmul>
 800b394:	3501      	adds	r5, #1
 800b396:	2301      	movs	r3, #1
 800b398:	1076      	asrs	r6, r6, #1
 800b39a:	3708      	adds	r7, #8
 800b39c:	e773      	b.n	800b286 <_dtoa_r+0x3d6>
 800b39e:	2502      	movs	r5, #2
 800b3a0:	e775      	b.n	800b28e <_dtoa_r+0x3de>
 800b3a2:	9e04      	ldr	r6, [sp, #16]
 800b3a4:	465f      	mov	r7, fp
 800b3a6:	e792      	b.n	800b2ce <_dtoa_r+0x41e>
 800b3a8:	9900      	ldr	r1, [sp, #0]
 800b3aa:	4b50      	ldr	r3, [pc, #320]	; (800b4ec <_dtoa_r+0x63c>)
 800b3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b0:	4431      	add	r1, r6
 800b3b2:	9102      	str	r1, [sp, #8]
 800b3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3b6:	eeb0 9a47 	vmov.f32	s18, s14
 800b3ba:	eef0 9a67 	vmov.f32	s19, s15
 800b3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d044      	beq.n	800b454 <_dtoa_r+0x5a4>
 800b3ca:	494e      	ldr	r1, [pc, #312]	; (800b504 <_dtoa_r+0x654>)
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7f5 fa3d 	bl	800084c <__aeabi_ddiv>
 800b3d2:	ec53 2b19 	vmov	r2, r3, d9
 800b3d6:	f7f4 ff57 	bl	8000288 <__aeabi_dsub>
 800b3da:	9d00      	ldr	r5, [sp, #0]
 800b3dc:	ec41 0b19 	vmov	d9, r0, r1
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	f7f5 fbb8 	bl	8000b58 <__aeabi_d2iz>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	f7f5 f89b 	bl	8000524 <__aeabi_i2d>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f4 ff47 	bl	8000288 <__aeabi_dsub>
 800b3fa:	3630      	adds	r6, #48	; 0x30
 800b3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b400:	ec53 2b19 	vmov	r2, r3, d9
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	f7f5 fb68 	bl	8000adc <__aeabi_dcmplt>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d164      	bne.n	800b4da <_dtoa_r+0x62a>
 800b410:	4642      	mov	r2, r8
 800b412:	464b      	mov	r3, r9
 800b414:	4937      	ldr	r1, [pc, #220]	; (800b4f4 <_dtoa_r+0x644>)
 800b416:	2000      	movs	r0, #0
 800b418:	f7f4 ff36 	bl	8000288 <__aeabi_dsub>
 800b41c:	ec53 2b19 	vmov	r2, r3, d9
 800b420:	f7f5 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800b424:	2800      	cmp	r0, #0
 800b426:	f040 80b6 	bne.w	800b596 <_dtoa_r+0x6e6>
 800b42a:	9b02      	ldr	r3, [sp, #8]
 800b42c:	429d      	cmp	r5, r3
 800b42e:	f43f af7c 	beq.w	800b32a <_dtoa_r+0x47a>
 800b432:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <_dtoa_r+0x648>)
 800b434:	ec51 0b19 	vmov	r0, r1, d9
 800b438:	2200      	movs	r2, #0
 800b43a:	f7f5 f8dd 	bl	80005f8 <__aeabi_dmul>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <_dtoa_r+0x648>)
 800b440:	ec41 0b19 	vmov	d9, r0, r1
 800b444:	2200      	movs	r2, #0
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f5 f8d5 	bl	80005f8 <__aeabi_dmul>
 800b44e:	4680      	mov	r8, r0
 800b450:	4689      	mov	r9, r1
 800b452:	e7c5      	b.n	800b3e0 <_dtoa_r+0x530>
 800b454:	ec51 0b17 	vmov	r0, r1, d7
 800b458:	f7f5 f8ce 	bl	80005f8 <__aeabi_dmul>
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	9d00      	ldr	r5, [sp, #0]
 800b460:	930f      	str	r3, [sp, #60]	; 0x3c
 800b462:	ec41 0b19 	vmov	d9, r0, r1
 800b466:	4649      	mov	r1, r9
 800b468:	4640      	mov	r0, r8
 800b46a:	f7f5 fb75 	bl	8000b58 <__aeabi_d2iz>
 800b46e:	4606      	mov	r6, r0
 800b470:	f7f5 f858 	bl	8000524 <__aeabi_i2d>
 800b474:	3630      	adds	r6, #48	; 0x30
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f4 ff03 	bl	8000288 <__aeabi_dsub>
 800b482:	f805 6b01 	strb.w	r6, [r5], #1
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	429d      	cmp	r5, r3
 800b48a:	4680      	mov	r8, r0
 800b48c:	4689      	mov	r9, r1
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	d124      	bne.n	800b4de <_dtoa_r+0x62e>
 800b494:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <_dtoa_r+0x654>)
 800b496:	ec51 0b19 	vmov	r0, r1, d9
 800b49a:	f7f4 fef7 	bl	800028c <__adddf3>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f5 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d173      	bne.n	800b596 <_dtoa_r+0x6e6>
 800b4ae:	ec53 2b19 	vmov	r2, r3, d9
 800b4b2:	4914      	ldr	r1, [pc, #80]	; (800b504 <_dtoa_r+0x654>)
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f5 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f43f af2f 	beq.w	800b32a <_dtoa_r+0x47a>
 800b4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4ce:	1e6b      	subs	r3, r5, #1
 800b4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4d6:	2b30      	cmp	r3, #48	; 0x30
 800b4d8:	d0f8      	beq.n	800b4cc <_dtoa_r+0x61c>
 800b4da:	46bb      	mov	fp, r7
 800b4dc:	e04a      	b.n	800b574 <_dtoa_r+0x6c4>
 800b4de:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <_dtoa_r+0x648>)
 800b4e0:	f7f5 f88a 	bl	80005f8 <__aeabi_dmul>
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	e7bd      	b.n	800b466 <_dtoa_r+0x5b6>
 800b4ea:	bf00      	nop
 800b4ec:	0800f500 	.word	0x0800f500
 800b4f0:	0800f4d8 	.word	0x0800f4d8
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	40240000 	.word	0x40240000
 800b4fc:	401c0000 	.word	0x401c0000
 800b500:	40140000 	.word	0x40140000
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b50c:	9d00      	ldr	r5, [sp, #0]
 800b50e:	4642      	mov	r2, r8
 800b510:	464b      	mov	r3, r9
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f5 f999 	bl	800084c <__aeabi_ddiv>
 800b51a:	f7f5 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800b51e:	9001      	str	r0, [sp, #4]
 800b520:	f7f5 f800 	bl	8000524 <__aeabi_i2d>
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	9e01      	ldr	r6, [sp, #4]
 800b53a:	9f04      	ldr	r7, [sp, #16]
 800b53c:	3630      	adds	r6, #48	; 0x30
 800b53e:	f805 6b01 	strb.w	r6, [r5], #1
 800b542:	9e00      	ldr	r6, [sp, #0]
 800b544:	1bae      	subs	r6, r5, r6
 800b546:	42b7      	cmp	r7, r6
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	d134      	bne.n	800b5b8 <_dtoa_r+0x708>
 800b54e:	f7f4 fe9d 	bl	800028c <__adddf3>
 800b552:	4642      	mov	r2, r8
 800b554:	464b      	mov	r3, r9
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	f7f5 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800b55e:	b9c8      	cbnz	r0, 800b594 <_dtoa_r+0x6e4>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f5 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b56c:	b110      	cbz	r0, 800b574 <_dtoa_r+0x6c4>
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	07db      	lsls	r3, r3, #31
 800b572:	d40f      	bmi.n	800b594 <_dtoa_r+0x6e4>
 800b574:	4651      	mov	r1, sl
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fbcc 	bl	800bd14 <_Bfree>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b580:	702b      	strb	r3, [r5, #0]
 800b582:	f10b 0301 	add.w	r3, fp, #1
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f43f ace2 	beq.w	800af54 <_dtoa_r+0xa4>
 800b590:	601d      	str	r5, [r3, #0]
 800b592:	e4df      	b.n	800af54 <_dtoa_r+0xa4>
 800b594:	465f      	mov	r7, fp
 800b596:	462b      	mov	r3, r5
 800b598:	461d      	mov	r5, r3
 800b59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b59e:	2a39      	cmp	r2, #57	; 0x39
 800b5a0:	d106      	bne.n	800b5b0 <_dtoa_r+0x700>
 800b5a2:	9a00      	ldr	r2, [sp, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d1f7      	bne.n	800b598 <_dtoa_r+0x6e8>
 800b5a8:	9900      	ldr	r1, [sp, #0]
 800b5aa:	2230      	movs	r2, #48	; 0x30
 800b5ac:	3701      	adds	r7, #1
 800b5ae:	700a      	strb	r2, [r1, #0]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	3201      	adds	r2, #1
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	e790      	b.n	800b4da <_dtoa_r+0x62a>
 800b5b8:	4ba3      	ldr	r3, [pc, #652]	; (800b848 <_dtoa_r+0x998>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	f7f5 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d09e      	beq.n	800b50e <_dtoa_r+0x65e>
 800b5d0:	e7d0      	b.n	800b574 <_dtoa_r+0x6c4>
 800b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	f000 80ca 	beq.w	800b76e <_dtoa_r+0x8be>
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	2a01      	cmp	r2, #1
 800b5de:	f300 80ad 	bgt.w	800b73c <_dtoa_r+0x88c>
 800b5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	f000 80a5 	beq.w	800b734 <_dtoa_r+0x884>
 800b5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5ee:	9e08      	ldr	r6, [sp, #32]
 800b5f0:	9d05      	ldr	r5, [sp, #20]
 800b5f2:	9a05      	ldr	r2, [sp, #20]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	9205      	str	r2, [sp, #20]
 800b5f8:	9a06      	ldr	r2, [sp, #24]
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	441a      	add	r2, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	9206      	str	r2, [sp, #24]
 800b602:	f000 fc87 	bl	800bf14 <__i2b>
 800b606:	4607      	mov	r7, r0
 800b608:	b165      	cbz	r5, 800b624 <_dtoa_r+0x774>
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <_dtoa_r+0x774>
 800b610:	42ab      	cmp	r3, r5
 800b612:	9a05      	ldr	r2, [sp, #20]
 800b614:	bfa8      	it	ge
 800b616:	462b      	movge	r3, r5
 800b618:	1ad2      	subs	r2, r2, r3
 800b61a:	9205      	str	r2, [sp, #20]
 800b61c:	9a06      	ldr	r2, [sp, #24]
 800b61e:	1aed      	subs	r5, r5, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	9306      	str	r3, [sp, #24]
 800b624:	9b08      	ldr	r3, [sp, #32]
 800b626:	b1f3      	cbz	r3, 800b666 <_dtoa_r+0x7b6>
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80a3 	beq.w	800b776 <_dtoa_r+0x8c6>
 800b630:	2e00      	cmp	r6, #0
 800b632:	dd10      	ble.n	800b656 <_dtoa_r+0x7a6>
 800b634:	4639      	mov	r1, r7
 800b636:	4632      	mov	r2, r6
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fd2b 	bl	800c094 <__pow5mult>
 800b63e:	4652      	mov	r2, sl
 800b640:	4601      	mov	r1, r0
 800b642:	4607      	mov	r7, r0
 800b644:	4620      	mov	r0, r4
 800b646:	f000 fc7b 	bl	800bf40 <__multiply>
 800b64a:	4651      	mov	r1, sl
 800b64c:	4680      	mov	r8, r0
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fb60 	bl	800bd14 <_Bfree>
 800b654:	46c2      	mov	sl, r8
 800b656:	9b08      	ldr	r3, [sp, #32]
 800b658:	1b9a      	subs	r2, r3, r6
 800b65a:	d004      	beq.n	800b666 <_dtoa_r+0x7b6>
 800b65c:	4651      	mov	r1, sl
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fd18 	bl	800c094 <__pow5mult>
 800b664:	4682      	mov	sl, r0
 800b666:	2101      	movs	r1, #1
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 fc53 	bl	800bf14 <__i2b>
 800b66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b670:	2b00      	cmp	r3, #0
 800b672:	4606      	mov	r6, r0
 800b674:	f340 8081 	ble.w	800b77a <_dtoa_r+0x8ca>
 800b678:	461a      	mov	r2, r3
 800b67a:	4601      	mov	r1, r0
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 fd09 	bl	800c094 <__pow5mult>
 800b682:	9b07      	ldr	r3, [sp, #28]
 800b684:	2b01      	cmp	r3, #1
 800b686:	4606      	mov	r6, r0
 800b688:	dd7a      	ble.n	800b780 <_dtoa_r+0x8d0>
 800b68a:	f04f 0800 	mov.w	r8, #0
 800b68e:	6933      	ldr	r3, [r6, #16]
 800b690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b694:	6918      	ldr	r0, [r3, #16]
 800b696:	f000 fbef 	bl	800be78 <__hi0bits>
 800b69a:	f1c0 0020 	rsb	r0, r0, #32
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	4418      	add	r0, r3
 800b6a2:	f010 001f 	ands.w	r0, r0, #31
 800b6a6:	f000 8094 	beq.w	800b7d2 <_dtoa_r+0x922>
 800b6aa:	f1c0 0320 	rsb	r3, r0, #32
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	f340 8085 	ble.w	800b7be <_dtoa_r+0x90e>
 800b6b4:	9b05      	ldr	r3, [sp, #20]
 800b6b6:	f1c0 001c 	rsb	r0, r0, #28
 800b6ba:	4403      	add	r3, r0
 800b6bc:	9305      	str	r3, [sp, #20]
 800b6be:	9b06      	ldr	r3, [sp, #24]
 800b6c0:	4403      	add	r3, r0
 800b6c2:	4405      	add	r5, r0
 800b6c4:	9306      	str	r3, [sp, #24]
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dd05      	ble.n	800b6d8 <_dtoa_r+0x828>
 800b6cc:	4651      	mov	r1, sl
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fd39 	bl	800c148 <__lshift>
 800b6d6:	4682      	mov	sl, r0
 800b6d8:	9b06      	ldr	r3, [sp, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dd05      	ble.n	800b6ea <_dtoa_r+0x83a>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 fd30 	bl	800c148 <__lshift>
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d072      	beq.n	800b7d6 <_dtoa_r+0x926>
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f000 fd94 	bl	800c220 <__mcmp>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	da6c      	bge.n	800b7d6 <_dtoa_r+0x926>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4651      	mov	r1, sl
 800b700:	220a      	movs	r2, #10
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fb28 	bl	800bd58 <__multadd>
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b70e:	4682      	mov	sl, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 81b0 	beq.w	800ba76 <_dtoa_r+0xbc6>
 800b716:	2300      	movs	r3, #0
 800b718:	4639      	mov	r1, r7
 800b71a:	220a      	movs	r2, #10
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fb1b 	bl	800bd58 <__multadd>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	4607      	mov	r7, r0
 800b728:	f300 8096 	bgt.w	800b858 <_dtoa_r+0x9a8>
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	2b02      	cmp	r3, #2
 800b730:	dc59      	bgt.n	800b7e6 <_dtoa_r+0x936>
 800b732:	e091      	b.n	800b858 <_dtoa_r+0x9a8>
 800b734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b73a:	e758      	b.n	800b5ee <_dtoa_r+0x73e>
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	1e5e      	subs	r6, r3, #1
 800b740:	9b08      	ldr	r3, [sp, #32]
 800b742:	42b3      	cmp	r3, r6
 800b744:	bfbf      	itttt	lt
 800b746:	9b08      	ldrlt	r3, [sp, #32]
 800b748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b74a:	9608      	strlt	r6, [sp, #32]
 800b74c:	1af3      	sublt	r3, r6, r3
 800b74e:	bfb4      	ite	lt
 800b750:	18d2      	addlt	r2, r2, r3
 800b752:	1b9e      	subge	r6, r3, r6
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	bfbc      	itt	lt
 800b758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b75a:	2600      	movlt	r6, #0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfb7      	itett	lt
 800b760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b768:	1a9d      	sublt	r5, r3, r2
 800b76a:	2300      	movlt	r3, #0
 800b76c:	e741      	b.n	800b5f2 <_dtoa_r+0x742>
 800b76e:	9e08      	ldr	r6, [sp, #32]
 800b770:	9d05      	ldr	r5, [sp, #20]
 800b772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b774:	e748      	b.n	800b608 <_dtoa_r+0x758>
 800b776:	9a08      	ldr	r2, [sp, #32]
 800b778:	e770      	b.n	800b65c <_dtoa_r+0x7ac>
 800b77a:	9b07      	ldr	r3, [sp, #28]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	dc19      	bgt.n	800b7b4 <_dtoa_r+0x904>
 800b780:	9b02      	ldr	r3, [sp, #8]
 800b782:	b9bb      	cbnz	r3, 800b7b4 <_dtoa_r+0x904>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b78a:	b99b      	cbnz	r3, 800b7b4 <_dtoa_r+0x904>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b792:	0d1b      	lsrs	r3, r3, #20
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	b183      	cbz	r3, 800b7ba <_dtoa_r+0x90a>
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	3301      	adds	r3, #1
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	9306      	str	r3, [sp, #24]
 800b7a4:	f04f 0801 	mov.w	r8, #1
 800b7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f af6f 	bne.w	800b68e <_dtoa_r+0x7de>
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	e774      	b.n	800b69e <_dtoa_r+0x7ee>
 800b7b4:	f04f 0800 	mov.w	r8, #0
 800b7b8:	e7f6      	b.n	800b7a8 <_dtoa_r+0x8f8>
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	e7f4      	b.n	800b7a8 <_dtoa_r+0x8f8>
 800b7be:	d082      	beq.n	800b6c6 <_dtoa_r+0x816>
 800b7c0:	9a05      	ldr	r2, [sp, #20]
 800b7c2:	331c      	adds	r3, #28
 800b7c4:	441a      	add	r2, r3
 800b7c6:	9205      	str	r2, [sp, #20]
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	441d      	add	r5, r3
 800b7ce:	9206      	str	r2, [sp, #24]
 800b7d0:	e779      	b.n	800b6c6 <_dtoa_r+0x816>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	e7f4      	b.n	800b7c0 <_dtoa_r+0x910>
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dc37      	bgt.n	800b84c <_dtoa_r+0x99c>
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	dd34      	ble.n	800b84c <_dtoa_r+0x99c>
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	b963      	cbnz	r3, 800b804 <_dtoa_r+0x954>
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	2205      	movs	r2, #5
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fab2 	bl	800bd58 <__multadd>
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	f000 fd11 	bl	800c220 <__mcmp>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	f73f adbb 	bgt.w	800b37a <_dtoa_r+0x4ca>
 800b804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b806:	9d00      	ldr	r5, [sp, #0]
 800b808:	ea6f 0b03 	mvn.w	fp, r3
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	4631      	mov	r1, r6
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fa7e 	bl	800bd14 <_Bfree>
 800b818:	2f00      	cmp	r7, #0
 800b81a:	f43f aeab 	beq.w	800b574 <_dtoa_r+0x6c4>
 800b81e:	f1b8 0f00 	cmp.w	r8, #0
 800b822:	d005      	beq.n	800b830 <_dtoa_r+0x980>
 800b824:	45b8      	cmp	r8, r7
 800b826:	d003      	beq.n	800b830 <_dtoa_r+0x980>
 800b828:	4641      	mov	r1, r8
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 fa72 	bl	800bd14 <_Bfree>
 800b830:	4639      	mov	r1, r7
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fa6e 	bl	800bd14 <_Bfree>
 800b838:	e69c      	b.n	800b574 <_dtoa_r+0x6c4>
 800b83a:	2600      	movs	r6, #0
 800b83c:	4637      	mov	r7, r6
 800b83e:	e7e1      	b.n	800b804 <_dtoa_r+0x954>
 800b840:	46bb      	mov	fp, r7
 800b842:	4637      	mov	r7, r6
 800b844:	e599      	b.n	800b37a <_dtoa_r+0x4ca>
 800b846:	bf00      	nop
 800b848:	40240000 	.word	0x40240000
 800b84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80c8 	beq.w	800b9e4 <_dtoa_r+0xb34>
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	2d00      	cmp	r5, #0
 800b85a:	dd05      	ble.n	800b868 <_dtoa_r+0x9b8>
 800b85c:	4639      	mov	r1, r7
 800b85e:	462a      	mov	r2, r5
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fc71 	bl	800c148 <__lshift>
 800b866:	4607      	mov	r7, r0
 800b868:	f1b8 0f00 	cmp.w	r8, #0
 800b86c:	d05b      	beq.n	800b926 <_dtoa_r+0xa76>
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fa0f 	bl	800bc94 <_Balloc>
 800b876:	4605      	mov	r5, r0
 800b878:	b928      	cbnz	r0, 800b886 <_dtoa_r+0x9d6>
 800b87a:	4b83      	ldr	r3, [pc, #524]	; (800ba88 <_dtoa_r+0xbd8>)
 800b87c:	4602      	mov	r2, r0
 800b87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b882:	f7ff bb2e 	b.w	800aee2 <_dtoa_r+0x32>
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	3202      	adds	r2, #2
 800b88a:	0092      	lsls	r2, r2, #2
 800b88c:	f107 010c 	add.w	r1, r7, #12
 800b890:	300c      	adds	r0, #12
 800b892:	f002 f95f 	bl	800db54 <memcpy>
 800b896:	2201      	movs	r2, #1
 800b898:	4629      	mov	r1, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fc54 	bl	800c148 <__lshift>
 800b8a0:	9b00      	ldr	r3, [sp, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	9308      	str	r3, [sp, #32]
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	46b8      	mov	r8, r7
 800b8b6:	9306      	str	r3, [sp, #24]
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	4631      	mov	r1, r6
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	4650      	mov	r0, sl
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	f7ff fa6c 	bl	800ada0 <quorem>
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	9002      	str	r0, [sp, #8]
 800b8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	f000 fca5 	bl	800c220 <__mcmp>
 800b8d6:	463a      	mov	r2, r7
 800b8d8:	9005      	str	r0, [sp, #20]
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fcbb 	bl	800c258 <__mdiff>
 800b8e2:	68c2      	ldr	r2, [r0, #12]
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	bb02      	cbnz	r2, 800b92a <_dtoa_r+0xa7a>
 800b8e8:	4601      	mov	r1, r0
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	f000 fc98 	bl	800c220 <__mcmp>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f8:	f000 fa0c 	bl	800bd14 <_Bfree>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b900:	9d04      	ldr	r5, [sp, #16]
 800b902:	ea43 0102 	orr.w	r1, r3, r2
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	4319      	orrs	r1, r3
 800b90a:	d110      	bne.n	800b92e <_dtoa_r+0xa7e>
 800b90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b910:	d029      	beq.n	800b966 <_dtoa_r+0xab6>
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	dd02      	ble.n	800b91e <_dtoa_r+0xa6e>
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	f883 9000 	strb.w	r9, [r3]
 800b924:	e774      	b.n	800b810 <_dtoa_r+0x960>
 800b926:	4638      	mov	r0, r7
 800b928:	e7ba      	b.n	800b8a0 <_dtoa_r+0x9f0>
 800b92a:	2201      	movs	r2, #1
 800b92c:	e7e1      	b.n	800b8f2 <_dtoa_r+0xa42>
 800b92e:	9b05      	ldr	r3, [sp, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	db04      	blt.n	800b93e <_dtoa_r+0xa8e>
 800b934:	9907      	ldr	r1, [sp, #28]
 800b936:	430b      	orrs	r3, r1
 800b938:	9906      	ldr	r1, [sp, #24]
 800b93a:	430b      	orrs	r3, r1
 800b93c:	d120      	bne.n	800b980 <_dtoa_r+0xad0>
 800b93e:	2a00      	cmp	r2, #0
 800b940:	dded      	ble.n	800b91e <_dtoa_r+0xa6e>
 800b942:	4651      	mov	r1, sl
 800b944:	2201      	movs	r2, #1
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fbfe 	bl	800c148 <__lshift>
 800b94c:	4631      	mov	r1, r6
 800b94e:	4682      	mov	sl, r0
 800b950:	f000 fc66 	bl	800c220 <__mcmp>
 800b954:	2800      	cmp	r0, #0
 800b956:	dc03      	bgt.n	800b960 <_dtoa_r+0xab0>
 800b958:	d1e1      	bne.n	800b91e <_dtoa_r+0xa6e>
 800b95a:	f019 0f01 	tst.w	r9, #1
 800b95e:	d0de      	beq.n	800b91e <_dtoa_r+0xa6e>
 800b960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b964:	d1d8      	bne.n	800b918 <_dtoa_r+0xa68>
 800b966:	9a01      	ldr	r2, [sp, #4]
 800b968:	2339      	movs	r3, #57	; 0x39
 800b96a:	7013      	strb	r3, [r2, #0]
 800b96c:	462b      	mov	r3, r5
 800b96e:	461d      	mov	r5, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b976:	2a39      	cmp	r2, #57	; 0x39
 800b978:	d06c      	beq.n	800ba54 <_dtoa_r+0xba4>
 800b97a:	3201      	adds	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	e747      	b.n	800b810 <_dtoa_r+0x960>
 800b980:	2a00      	cmp	r2, #0
 800b982:	dd07      	ble.n	800b994 <_dtoa_r+0xae4>
 800b984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b988:	d0ed      	beq.n	800b966 <_dtoa_r+0xab6>
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	f109 0301 	add.w	r3, r9, #1
 800b990:	7013      	strb	r3, [r2, #0]
 800b992:	e73d      	b.n	800b810 <_dtoa_r+0x960>
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	9a08      	ldr	r2, [sp, #32]
 800b998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d043      	beq.n	800ba28 <_dtoa_r+0xb78>
 800b9a0:	4651      	mov	r1, sl
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 f9d6 	bl	800bd58 <__multadd>
 800b9ac:	45b8      	cmp	r8, r7
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	f04f 0300 	mov.w	r3, #0
 800b9b4:	f04f 020a 	mov.w	r2, #10
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	d107      	bne.n	800b9ce <_dtoa_r+0xb1e>
 800b9be:	f000 f9cb 	bl	800bd58 <__multadd>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	e775      	b.n	800b8ba <_dtoa_r+0xa0a>
 800b9ce:	f000 f9c3 	bl	800bd58 <__multadd>
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	220a      	movs	r2, #10
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 f9bc 	bl	800bd58 <__multadd>
 800b9e0:	4607      	mov	r7, r0
 800b9e2:	e7f0      	b.n	800b9c6 <_dtoa_r+0xb16>
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	9d00      	ldr	r5, [sp, #0]
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4650      	mov	r0, sl
 800b9ee:	f7ff f9d7 	bl	800ada0 <quorem>
 800b9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9f6:	9b00      	ldr	r3, [sp, #0]
 800b9f8:	f805 9b01 	strb.w	r9, [r5], #1
 800b9fc:	1aea      	subs	r2, r5, r3
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	dd07      	ble.n	800ba14 <_dtoa_r+0xb64>
 800ba04:	4651      	mov	r1, sl
 800ba06:	2300      	movs	r3, #0
 800ba08:	220a      	movs	r2, #10
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 f9a4 	bl	800bd58 <__multadd>
 800ba10:	4682      	mov	sl, r0
 800ba12:	e7ea      	b.n	800b9ea <_dtoa_r+0xb3a>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfc8      	it	gt
 800ba1a:	461d      	movgt	r5, r3
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	bfd8      	it	le
 800ba20:	2501      	movle	r5, #1
 800ba22:	441d      	add	r5, r3
 800ba24:	f04f 0800 	mov.w	r8, #0
 800ba28:	4651      	mov	r1, sl
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fb8b 	bl	800c148 <__lshift>
 800ba32:	4631      	mov	r1, r6
 800ba34:	4682      	mov	sl, r0
 800ba36:	f000 fbf3 	bl	800c220 <__mcmp>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	dc96      	bgt.n	800b96c <_dtoa_r+0xabc>
 800ba3e:	d102      	bne.n	800ba46 <_dtoa_r+0xb96>
 800ba40:	f019 0f01 	tst.w	r9, #1
 800ba44:	d192      	bne.n	800b96c <_dtoa_r+0xabc>
 800ba46:	462b      	mov	r3, r5
 800ba48:	461d      	mov	r5, r3
 800ba4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4e:	2a30      	cmp	r2, #48	; 0x30
 800ba50:	d0fa      	beq.n	800ba48 <_dtoa_r+0xb98>
 800ba52:	e6dd      	b.n	800b810 <_dtoa_r+0x960>
 800ba54:	9a00      	ldr	r2, [sp, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d189      	bne.n	800b96e <_dtoa_r+0xabe>
 800ba5a:	f10b 0b01 	add.w	fp, fp, #1
 800ba5e:	2331      	movs	r3, #49	; 0x31
 800ba60:	e796      	b.n	800b990 <_dtoa_r+0xae0>
 800ba62:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <_dtoa_r+0xbdc>)
 800ba64:	f7ff ba99 	b.w	800af9a <_dtoa_r+0xea>
 800ba68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f47f aa6d 	bne.w	800af4a <_dtoa_r+0x9a>
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <_dtoa_r+0xbe0>)
 800ba72:	f7ff ba92 	b.w	800af9a <_dtoa_r+0xea>
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dcb5      	bgt.n	800b9e8 <_dtoa_r+0xb38>
 800ba7c:	9b07      	ldr	r3, [sp, #28]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	f73f aeb1 	bgt.w	800b7e6 <_dtoa_r+0x936>
 800ba84:	e7b0      	b.n	800b9e8 <_dtoa_r+0xb38>
 800ba86:	bf00      	nop
 800ba88:	0800f469 	.word	0x0800f469
 800ba8c:	0800f3c4 	.word	0x0800f3c4
 800ba90:	0800f3ed 	.word	0x0800f3ed

0800ba94 <_free_r>:
 800ba94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba96:	2900      	cmp	r1, #0
 800ba98:	d044      	beq.n	800bb24 <_free_r+0x90>
 800ba9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9e:	9001      	str	r0, [sp, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f1a1 0404 	sub.w	r4, r1, #4
 800baa6:	bfb8      	it	lt
 800baa8:	18e4      	addlt	r4, r4, r3
 800baaa:	f000 f8e7 	bl	800bc7c <__malloc_lock>
 800baae:	4a1e      	ldr	r2, [pc, #120]	; (800bb28 <_free_r+0x94>)
 800bab0:	9801      	ldr	r0, [sp, #4]
 800bab2:	6813      	ldr	r3, [r2, #0]
 800bab4:	b933      	cbnz	r3, 800bac4 <_free_r+0x30>
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	6014      	str	r4, [r2, #0]
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac0:	f000 b8e2 	b.w	800bc88 <__malloc_unlock>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d908      	bls.n	800bada <_free_r+0x46>
 800bac8:	6825      	ldr	r5, [r4, #0]
 800baca:	1961      	adds	r1, r4, r5
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf01      	itttt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	1949      	addeq	r1, r1, r5
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	e7ed      	b.n	800bab6 <_free_r+0x22>
 800bada:	461a      	mov	r2, r3
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	b10b      	cbz	r3, 800bae4 <_free_r+0x50>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d9fa      	bls.n	800bada <_free_r+0x46>
 800bae4:	6811      	ldr	r1, [r2, #0]
 800bae6:	1855      	adds	r5, r2, r1
 800bae8:	42a5      	cmp	r5, r4
 800baea:	d10b      	bne.n	800bb04 <_free_r+0x70>
 800baec:	6824      	ldr	r4, [r4, #0]
 800baee:	4421      	add	r1, r4
 800baf0:	1854      	adds	r4, r2, r1
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	6011      	str	r1, [r2, #0]
 800baf6:	d1e0      	bne.n	800baba <_free_r+0x26>
 800baf8:	681c      	ldr	r4, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	6053      	str	r3, [r2, #4]
 800bafe:	440c      	add	r4, r1
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	e7da      	b.n	800baba <_free_r+0x26>
 800bb04:	d902      	bls.n	800bb0c <_free_r+0x78>
 800bb06:	230c      	movs	r3, #12
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	e7d6      	b.n	800baba <_free_r+0x26>
 800bb0c:	6825      	ldr	r5, [r4, #0]
 800bb0e:	1961      	adds	r1, r4, r5
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf04      	itt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	bf04      	itt	eq
 800bb1c:	1949      	addeq	r1, r1, r5
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	6054      	str	r4, [r2, #4]
 800bb22:	e7ca      	b.n	800baba <_free_r+0x26>
 800bb24:	b003      	add	sp, #12
 800bb26:	bd30      	pop	{r4, r5, pc}
 800bb28:	20000b40 	.word	0x20000b40

0800bb2c <malloc>:
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <malloc+0xc>)
 800bb2e:	4601      	mov	r1, r0
 800bb30:	6818      	ldr	r0, [r3, #0]
 800bb32:	f000 b823 	b.w	800bb7c <_malloc_r>
 800bb36:	bf00      	nop
 800bb38:	2000006c 	.word	0x2000006c

0800bb3c <sbrk_aligned>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	4e0e      	ldr	r6, [pc, #56]	; (800bb78 <sbrk_aligned+0x3c>)
 800bb40:	460c      	mov	r4, r1
 800bb42:	6831      	ldr	r1, [r6, #0]
 800bb44:	4605      	mov	r5, r0
 800bb46:	b911      	cbnz	r1, 800bb4e <sbrk_aligned+0x12>
 800bb48:	f001 fff4 	bl	800db34 <_sbrk_r>
 800bb4c:	6030      	str	r0, [r6, #0]
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4628      	mov	r0, r5
 800bb52:	f001 ffef 	bl	800db34 <_sbrk_r>
 800bb56:	1c43      	adds	r3, r0, #1
 800bb58:	d00a      	beq.n	800bb70 <sbrk_aligned+0x34>
 800bb5a:	1cc4      	adds	r4, r0, #3
 800bb5c:	f024 0403 	bic.w	r4, r4, #3
 800bb60:	42a0      	cmp	r0, r4
 800bb62:	d007      	beq.n	800bb74 <sbrk_aligned+0x38>
 800bb64:	1a21      	subs	r1, r4, r0
 800bb66:	4628      	mov	r0, r5
 800bb68:	f001 ffe4 	bl	800db34 <_sbrk_r>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d101      	bne.n	800bb74 <sbrk_aligned+0x38>
 800bb70:	f04f 34ff 	mov.w	r4, #4294967295
 800bb74:	4620      	mov	r0, r4
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	20000b44 	.word	0x20000b44

0800bb7c <_malloc_r>:
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb80:	1ccd      	adds	r5, r1, #3
 800bb82:	f025 0503 	bic.w	r5, r5, #3
 800bb86:	3508      	adds	r5, #8
 800bb88:	2d0c      	cmp	r5, #12
 800bb8a:	bf38      	it	cc
 800bb8c:	250c      	movcc	r5, #12
 800bb8e:	2d00      	cmp	r5, #0
 800bb90:	4607      	mov	r7, r0
 800bb92:	db01      	blt.n	800bb98 <_malloc_r+0x1c>
 800bb94:	42a9      	cmp	r1, r5
 800bb96:	d905      	bls.n	800bba4 <_malloc_r+0x28>
 800bb98:	230c      	movs	r3, #12
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	2600      	movs	r6, #0
 800bb9e:	4630      	mov	r0, r6
 800bba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc78 <_malloc_r+0xfc>
 800bba8:	f000 f868 	bl	800bc7c <__malloc_lock>
 800bbac:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb0:	461c      	mov	r4, r3
 800bbb2:	bb5c      	cbnz	r4, 800bc0c <_malloc_r+0x90>
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	f7ff ffc0 	bl	800bb3c <sbrk_aligned>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	d155      	bne.n	800bc6e <_malloc_r+0xf2>
 800bbc2:	f8d8 4000 	ldr.w	r4, [r8]
 800bbc6:	4626      	mov	r6, r4
 800bbc8:	2e00      	cmp	r6, #0
 800bbca:	d145      	bne.n	800bc58 <_malloc_r+0xdc>
 800bbcc:	2c00      	cmp	r4, #0
 800bbce:	d048      	beq.n	800bc62 <_malloc_r+0xe6>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	eb04 0903 	add.w	r9, r4, r3
 800bbda:	f001 ffab 	bl	800db34 <_sbrk_r>
 800bbde:	4581      	cmp	r9, r0
 800bbe0:	d13f      	bne.n	800bc62 <_malloc_r+0xe6>
 800bbe2:	6821      	ldr	r1, [r4, #0]
 800bbe4:	1a6d      	subs	r5, r5, r1
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f7ff ffa7 	bl	800bb3c <sbrk_aligned>
 800bbee:	3001      	adds	r0, #1
 800bbf0:	d037      	beq.n	800bc62 <_malloc_r+0xe6>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	442b      	add	r3, r5
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d038      	beq.n	800bc72 <_malloc_r+0xf6>
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	42a2      	cmp	r2, r4
 800bc04:	d12b      	bne.n	800bc5e <_malloc_r+0xe2>
 800bc06:	2200      	movs	r2, #0
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	e00f      	b.n	800bc2c <_malloc_r+0xb0>
 800bc0c:	6822      	ldr	r2, [r4, #0]
 800bc0e:	1b52      	subs	r2, r2, r5
 800bc10:	d41f      	bmi.n	800bc52 <_malloc_r+0xd6>
 800bc12:	2a0b      	cmp	r2, #11
 800bc14:	d917      	bls.n	800bc46 <_malloc_r+0xca>
 800bc16:	1961      	adds	r1, r4, r5
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	6025      	str	r5, [r4, #0]
 800bc1c:	bf18      	it	ne
 800bc1e:	6059      	strne	r1, [r3, #4]
 800bc20:	6863      	ldr	r3, [r4, #4]
 800bc22:	bf08      	it	eq
 800bc24:	f8c8 1000 	streq.w	r1, [r8]
 800bc28:	5162      	str	r2, [r4, r5]
 800bc2a:	604b      	str	r3, [r1, #4]
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f104 060b 	add.w	r6, r4, #11
 800bc32:	f000 f829 	bl	800bc88 <__malloc_unlock>
 800bc36:	f026 0607 	bic.w	r6, r6, #7
 800bc3a:	1d23      	adds	r3, r4, #4
 800bc3c:	1af2      	subs	r2, r6, r3
 800bc3e:	d0ae      	beq.n	800bb9e <_malloc_r+0x22>
 800bc40:	1b9b      	subs	r3, r3, r6
 800bc42:	50a3      	str	r3, [r4, r2]
 800bc44:	e7ab      	b.n	800bb9e <_malloc_r+0x22>
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	6862      	ldr	r2, [r4, #4]
 800bc4a:	d1dd      	bne.n	800bc08 <_malloc_r+0x8c>
 800bc4c:	f8c8 2000 	str.w	r2, [r8]
 800bc50:	e7ec      	b.n	800bc2c <_malloc_r+0xb0>
 800bc52:	4623      	mov	r3, r4
 800bc54:	6864      	ldr	r4, [r4, #4]
 800bc56:	e7ac      	b.n	800bbb2 <_malloc_r+0x36>
 800bc58:	4634      	mov	r4, r6
 800bc5a:	6876      	ldr	r6, [r6, #4]
 800bc5c:	e7b4      	b.n	800bbc8 <_malloc_r+0x4c>
 800bc5e:	4613      	mov	r3, r2
 800bc60:	e7cc      	b.n	800bbfc <_malloc_r+0x80>
 800bc62:	230c      	movs	r3, #12
 800bc64:	603b      	str	r3, [r7, #0]
 800bc66:	4638      	mov	r0, r7
 800bc68:	f000 f80e 	bl	800bc88 <__malloc_unlock>
 800bc6c:	e797      	b.n	800bb9e <_malloc_r+0x22>
 800bc6e:	6025      	str	r5, [r4, #0]
 800bc70:	e7dc      	b.n	800bc2c <_malloc_r+0xb0>
 800bc72:	605b      	str	r3, [r3, #4]
 800bc74:	deff      	udf	#255	; 0xff
 800bc76:	bf00      	nop
 800bc78:	20000b40 	.word	0x20000b40

0800bc7c <__malloc_lock>:
 800bc7c:	4801      	ldr	r0, [pc, #4]	; (800bc84 <__malloc_lock+0x8>)
 800bc7e:	f7ff b887 	b.w	800ad90 <__retarget_lock_acquire_recursive>
 800bc82:	bf00      	nop
 800bc84:	20000b3c 	.word	0x20000b3c

0800bc88 <__malloc_unlock>:
 800bc88:	4801      	ldr	r0, [pc, #4]	; (800bc90 <__malloc_unlock+0x8>)
 800bc8a:	f7ff b882 	b.w	800ad92 <__retarget_lock_release_recursive>
 800bc8e:	bf00      	nop
 800bc90:	20000b3c 	.word	0x20000b3c

0800bc94 <_Balloc>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	69c6      	ldr	r6, [r0, #28]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	b976      	cbnz	r6, 800bcbc <_Balloc+0x28>
 800bc9e:	2010      	movs	r0, #16
 800bca0:	f7ff ff44 	bl	800bb2c <malloc>
 800bca4:	4602      	mov	r2, r0
 800bca6:	61e0      	str	r0, [r4, #28]
 800bca8:	b920      	cbnz	r0, 800bcb4 <_Balloc+0x20>
 800bcaa:	4b18      	ldr	r3, [pc, #96]	; (800bd0c <_Balloc+0x78>)
 800bcac:	4818      	ldr	r0, [pc, #96]	; (800bd10 <_Balloc+0x7c>)
 800bcae:	216b      	movs	r1, #107	; 0x6b
 800bcb0:	f001 ff66 	bl	800db80 <__assert_func>
 800bcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcb8:	6006      	str	r6, [r0, #0]
 800bcba:	60c6      	str	r6, [r0, #12]
 800bcbc:	69e6      	ldr	r6, [r4, #28]
 800bcbe:	68f3      	ldr	r3, [r6, #12]
 800bcc0:	b183      	cbz	r3, 800bce4 <_Balloc+0x50>
 800bcc2:	69e3      	ldr	r3, [r4, #28]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcca:	b9b8      	cbnz	r0, 800bcfc <_Balloc+0x68>
 800bccc:	2101      	movs	r1, #1
 800bcce:	fa01 f605 	lsl.w	r6, r1, r5
 800bcd2:	1d72      	adds	r2, r6, #5
 800bcd4:	0092      	lsls	r2, r2, #2
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f001 ff70 	bl	800dbbc <_calloc_r>
 800bcdc:	b160      	cbz	r0, 800bcf8 <_Balloc+0x64>
 800bcde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bce2:	e00e      	b.n	800bd02 <_Balloc+0x6e>
 800bce4:	2221      	movs	r2, #33	; 0x21
 800bce6:	2104      	movs	r1, #4
 800bce8:	4620      	mov	r0, r4
 800bcea:	f001 ff67 	bl	800dbbc <_calloc_r>
 800bcee:	69e3      	ldr	r3, [r4, #28]
 800bcf0:	60f0      	str	r0, [r6, #12]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e4      	bne.n	800bcc2 <_Balloc+0x2e>
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	6802      	ldr	r2, [r0, #0]
 800bcfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd02:	2300      	movs	r3, #0
 800bd04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd08:	e7f7      	b.n	800bcfa <_Balloc+0x66>
 800bd0a:	bf00      	nop
 800bd0c:	0800f3fa 	.word	0x0800f3fa
 800bd10:	0800f47a 	.word	0x0800f47a

0800bd14 <_Bfree>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	69c6      	ldr	r6, [r0, #28]
 800bd18:	4605      	mov	r5, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b976      	cbnz	r6, 800bd3c <_Bfree+0x28>
 800bd1e:	2010      	movs	r0, #16
 800bd20:	f7ff ff04 	bl	800bb2c <malloc>
 800bd24:	4602      	mov	r2, r0
 800bd26:	61e8      	str	r0, [r5, #28]
 800bd28:	b920      	cbnz	r0, 800bd34 <_Bfree+0x20>
 800bd2a:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <_Bfree+0x3c>)
 800bd2c:	4809      	ldr	r0, [pc, #36]	; (800bd54 <_Bfree+0x40>)
 800bd2e:	218f      	movs	r1, #143	; 0x8f
 800bd30:	f001 ff26 	bl	800db80 <__assert_func>
 800bd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd38:	6006      	str	r6, [r0, #0]
 800bd3a:	60c6      	str	r6, [r0, #12]
 800bd3c:	b13c      	cbz	r4, 800bd4e <_Bfree+0x3a>
 800bd3e:	69eb      	ldr	r3, [r5, #28]
 800bd40:	6862      	ldr	r2, [r4, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd48:	6021      	str	r1, [r4, #0]
 800bd4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	0800f3fa 	.word	0x0800f3fa
 800bd54:	0800f47a 	.word	0x0800f47a

0800bd58 <__multadd>:
 800bd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5c:	690d      	ldr	r5, [r1, #16]
 800bd5e:	4607      	mov	r7, r0
 800bd60:	460c      	mov	r4, r1
 800bd62:	461e      	mov	r6, r3
 800bd64:	f101 0c14 	add.w	ip, r1, #20
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f8dc 3000 	ldr.w	r3, [ip]
 800bd6e:	b299      	uxth	r1, r3
 800bd70:	fb02 6101 	mla	r1, r2, r1, r6
 800bd74:	0c1e      	lsrs	r6, r3, #16
 800bd76:	0c0b      	lsrs	r3, r1, #16
 800bd78:	fb02 3306 	mla	r3, r2, r6, r3
 800bd7c:	b289      	uxth	r1, r1
 800bd7e:	3001      	adds	r0, #1
 800bd80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd84:	4285      	cmp	r5, r0
 800bd86:	f84c 1b04 	str.w	r1, [ip], #4
 800bd8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd8e:	dcec      	bgt.n	800bd6a <__multadd+0x12>
 800bd90:	b30e      	cbz	r6, 800bdd6 <__multadd+0x7e>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	42ab      	cmp	r3, r5
 800bd96:	dc19      	bgt.n	800bdcc <__multadd+0x74>
 800bd98:	6861      	ldr	r1, [r4, #4]
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	3101      	adds	r1, #1
 800bd9e:	f7ff ff79 	bl	800bc94 <_Balloc>
 800bda2:	4680      	mov	r8, r0
 800bda4:	b928      	cbnz	r0, 800bdb2 <__multadd+0x5a>
 800bda6:	4602      	mov	r2, r0
 800bda8:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <__multadd+0x84>)
 800bdaa:	480d      	ldr	r0, [pc, #52]	; (800bde0 <__multadd+0x88>)
 800bdac:	21ba      	movs	r1, #186	; 0xba
 800bdae:	f001 fee7 	bl	800db80 <__assert_func>
 800bdb2:	6922      	ldr	r2, [r4, #16]
 800bdb4:	3202      	adds	r2, #2
 800bdb6:	f104 010c 	add.w	r1, r4, #12
 800bdba:	0092      	lsls	r2, r2, #2
 800bdbc:	300c      	adds	r0, #12
 800bdbe:	f001 fec9 	bl	800db54 <memcpy>
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff ffa5 	bl	800bd14 <_Bfree>
 800bdca:	4644      	mov	r4, r8
 800bdcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	615e      	str	r6, [r3, #20]
 800bdd4:	6125      	str	r5, [r4, #16]
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bddc:	0800f469 	.word	0x0800f469
 800bde0:	0800f47a 	.word	0x0800f47a

0800bde4 <__s2b>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	4615      	mov	r5, r2
 800bdec:	461f      	mov	r7, r3
 800bdee:	2209      	movs	r2, #9
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	db09      	blt.n	800be14 <__s2b+0x30>
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff ff47 	bl	800bc94 <_Balloc>
 800be06:	b940      	cbnz	r0, 800be1a <__s2b+0x36>
 800be08:	4602      	mov	r2, r0
 800be0a:	4b19      	ldr	r3, [pc, #100]	; (800be70 <__s2b+0x8c>)
 800be0c:	4819      	ldr	r0, [pc, #100]	; (800be74 <__s2b+0x90>)
 800be0e:	21d3      	movs	r1, #211	; 0xd3
 800be10:	f001 feb6 	bl	800db80 <__assert_func>
 800be14:	0052      	lsls	r2, r2, #1
 800be16:	3101      	adds	r1, #1
 800be18:	e7f0      	b.n	800bdfc <__s2b+0x18>
 800be1a:	9b08      	ldr	r3, [sp, #32]
 800be1c:	6143      	str	r3, [r0, #20]
 800be1e:	2d09      	cmp	r5, #9
 800be20:	f04f 0301 	mov.w	r3, #1
 800be24:	6103      	str	r3, [r0, #16]
 800be26:	dd16      	ble.n	800be56 <__s2b+0x72>
 800be28:	f104 0909 	add.w	r9, r4, #9
 800be2c:	46c8      	mov	r8, r9
 800be2e:	442c      	add	r4, r5
 800be30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be34:	4601      	mov	r1, r0
 800be36:	3b30      	subs	r3, #48	; 0x30
 800be38:	220a      	movs	r2, #10
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff ff8c 	bl	800bd58 <__multadd>
 800be40:	45a0      	cmp	r8, r4
 800be42:	d1f5      	bne.n	800be30 <__s2b+0x4c>
 800be44:	f1a5 0408 	sub.w	r4, r5, #8
 800be48:	444c      	add	r4, r9
 800be4a:	1b2d      	subs	r5, r5, r4
 800be4c:	1963      	adds	r3, r4, r5
 800be4e:	42bb      	cmp	r3, r7
 800be50:	db04      	blt.n	800be5c <__s2b+0x78>
 800be52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be56:	340a      	adds	r4, #10
 800be58:	2509      	movs	r5, #9
 800be5a:	e7f6      	b.n	800be4a <__s2b+0x66>
 800be5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be60:	4601      	mov	r1, r0
 800be62:	3b30      	subs	r3, #48	; 0x30
 800be64:	220a      	movs	r2, #10
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff76 	bl	800bd58 <__multadd>
 800be6c:	e7ee      	b.n	800be4c <__s2b+0x68>
 800be6e:	bf00      	nop
 800be70:	0800f469 	.word	0x0800f469
 800be74:	0800f47a 	.word	0x0800f47a

0800be78 <__hi0bits>:
 800be78:	0c03      	lsrs	r3, r0, #16
 800be7a:	041b      	lsls	r3, r3, #16
 800be7c:	b9d3      	cbnz	r3, 800beb4 <__hi0bits+0x3c>
 800be7e:	0400      	lsls	r0, r0, #16
 800be80:	2310      	movs	r3, #16
 800be82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be86:	bf04      	itt	eq
 800be88:	0200      	lsleq	r0, r0, #8
 800be8a:	3308      	addeq	r3, #8
 800be8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be90:	bf04      	itt	eq
 800be92:	0100      	lsleq	r0, r0, #4
 800be94:	3304      	addeq	r3, #4
 800be96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be9a:	bf04      	itt	eq
 800be9c:	0080      	lsleq	r0, r0, #2
 800be9e:	3302      	addeq	r3, #2
 800bea0:	2800      	cmp	r0, #0
 800bea2:	db05      	blt.n	800beb0 <__hi0bits+0x38>
 800bea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bea8:	f103 0301 	add.w	r3, r3, #1
 800beac:	bf08      	it	eq
 800beae:	2320      	moveq	r3, #32
 800beb0:	4618      	mov	r0, r3
 800beb2:	4770      	bx	lr
 800beb4:	2300      	movs	r3, #0
 800beb6:	e7e4      	b.n	800be82 <__hi0bits+0xa>

0800beb8 <__lo0bits>:
 800beb8:	6803      	ldr	r3, [r0, #0]
 800beba:	f013 0207 	ands.w	r2, r3, #7
 800bebe:	d00c      	beq.n	800beda <__lo0bits+0x22>
 800bec0:	07d9      	lsls	r1, r3, #31
 800bec2:	d422      	bmi.n	800bf0a <__lo0bits+0x52>
 800bec4:	079a      	lsls	r2, r3, #30
 800bec6:	bf49      	itett	mi
 800bec8:	085b      	lsrmi	r3, r3, #1
 800beca:	089b      	lsrpl	r3, r3, #2
 800becc:	6003      	strmi	r3, [r0, #0]
 800bece:	2201      	movmi	r2, #1
 800bed0:	bf5c      	itt	pl
 800bed2:	6003      	strpl	r3, [r0, #0]
 800bed4:	2202      	movpl	r2, #2
 800bed6:	4610      	mov	r0, r2
 800bed8:	4770      	bx	lr
 800beda:	b299      	uxth	r1, r3
 800bedc:	b909      	cbnz	r1, 800bee2 <__lo0bits+0x2a>
 800bede:	0c1b      	lsrs	r3, r3, #16
 800bee0:	2210      	movs	r2, #16
 800bee2:	b2d9      	uxtb	r1, r3
 800bee4:	b909      	cbnz	r1, 800beea <__lo0bits+0x32>
 800bee6:	3208      	adds	r2, #8
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	0719      	lsls	r1, r3, #28
 800beec:	bf04      	itt	eq
 800beee:	091b      	lsreq	r3, r3, #4
 800bef0:	3204      	addeq	r2, #4
 800bef2:	0799      	lsls	r1, r3, #30
 800bef4:	bf04      	itt	eq
 800bef6:	089b      	lsreq	r3, r3, #2
 800bef8:	3202      	addeq	r2, #2
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	d403      	bmi.n	800bf06 <__lo0bits+0x4e>
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	f102 0201 	add.w	r2, r2, #1
 800bf04:	d003      	beq.n	800bf0e <__lo0bits+0x56>
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	e7e5      	b.n	800bed6 <__lo0bits+0x1e>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	e7e3      	b.n	800bed6 <__lo0bits+0x1e>
 800bf0e:	2220      	movs	r2, #32
 800bf10:	e7e1      	b.n	800bed6 <__lo0bits+0x1e>
	...

0800bf14 <__i2b>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	460c      	mov	r4, r1
 800bf18:	2101      	movs	r1, #1
 800bf1a:	f7ff febb 	bl	800bc94 <_Balloc>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <__i2b+0x1a>
 800bf22:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <__i2b+0x24>)
 800bf24:	4805      	ldr	r0, [pc, #20]	; (800bf3c <__i2b+0x28>)
 800bf26:	f240 1145 	movw	r1, #325	; 0x145
 800bf2a:	f001 fe29 	bl	800db80 <__assert_func>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	6144      	str	r4, [r0, #20]
 800bf32:	6103      	str	r3, [r0, #16]
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	bf00      	nop
 800bf38:	0800f469 	.word	0x0800f469
 800bf3c:	0800f47a 	.word	0x0800f47a

0800bf40 <__multiply>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	4691      	mov	r9, r2
 800bf46:	690a      	ldr	r2, [r1, #16]
 800bf48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	bfb8      	it	lt
 800bf50:	460b      	movlt	r3, r1
 800bf52:	460c      	mov	r4, r1
 800bf54:	bfbc      	itt	lt
 800bf56:	464c      	movlt	r4, r9
 800bf58:	4699      	movlt	r9, r3
 800bf5a:	6927      	ldr	r7, [r4, #16]
 800bf5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	6861      	ldr	r1, [r4, #4]
 800bf64:	eb07 060a 	add.w	r6, r7, sl
 800bf68:	42b3      	cmp	r3, r6
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	bfb8      	it	lt
 800bf6e:	3101      	addlt	r1, #1
 800bf70:	f7ff fe90 	bl	800bc94 <_Balloc>
 800bf74:	b930      	cbnz	r0, 800bf84 <__multiply+0x44>
 800bf76:	4602      	mov	r2, r0
 800bf78:	4b44      	ldr	r3, [pc, #272]	; (800c08c <__multiply+0x14c>)
 800bf7a:	4845      	ldr	r0, [pc, #276]	; (800c090 <__multiply+0x150>)
 800bf7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bf80:	f001 fdfe 	bl	800db80 <__assert_func>
 800bf84:	f100 0514 	add.w	r5, r0, #20
 800bf88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4543      	cmp	r3, r8
 800bf92:	d321      	bcc.n	800bfd8 <__multiply+0x98>
 800bf94:	f104 0314 	add.w	r3, r4, #20
 800bf98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf9c:	f109 0314 	add.w	r3, r9, #20
 800bfa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bfa4:	9202      	str	r2, [sp, #8]
 800bfa6:	1b3a      	subs	r2, r7, r4
 800bfa8:	3a15      	subs	r2, #21
 800bfaa:	f022 0203 	bic.w	r2, r2, #3
 800bfae:	3204      	adds	r2, #4
 800bfb0:	f104 0115 	add.w	r1, r4, #21
 800bfb4:	428f      	cmp	r7, r1
 800bfb6:	bf38      	it	cc
 800bfb8:	2204      	movcc	r2, #4
 800bfba:	9201      	str	r2, [sp, #4]
 800bfbc:	9a02      	ldr	r2, [sp, #8]
 800bfbe:	9303      	str	r3, [sp, #12]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d80c      	bhi.n	800bfde <__multiply+0x9e>
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	dd03      	ble.n	800bfd0 <__multiply+0x90>
 800bfc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d05b      	beq.n	800c088 <__multiply+0x148>
 800bfd0:	6106      	str	r6, [r0, #16]
 800bfd2:	b005      	add	sp, #20
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	f843 2b04 	str.w	r2, [r3], #4
 800bfdc:	e7d8      	b.n	800bf90 <__multiply+0x50>
 800bfde:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfe2:	f1ba 0f00 	cmp.w	sl, #0
 800bfe6:	d024      	beq.n	800c032 <__multiply+0xf2>
 800bfe8:	f104 0e14 	add.w	lr, r4, #20
 800bfec:	46a9      	mov	r9, r5
 800bfee:	f04f 0c00 	mov.w	ip, #0
 800bff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bff6:	f8d9 1000 	ldr.w	r1, [r9]
 800bffa:	fa1f fb82 	uxth.w	fp, r2
 800bffe:	b289      	uxth	r1, r1
 800c000:	fb0a 110b 	mla	r1, sl, fp, r1
 800c004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c008:	f8d9 2000 	ldr.w	r2, [r9]
 800c00c:	4461      	add	r1, ip
 800c00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c012:	fb0a c20b 	mla	r2, sl, fp, ip
 800c016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c01a:	b289      	uxth	r1, r1
 800c01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c020:	4577      	cmp	r7, lr
 800c022:	f849 1b04 	str.w	r1, [r9], #4
 800c026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c02a:	d8e2      	bhi.n	800bff2 <__multiply+0xb2>
 800c02c:	9a01      	ldr	r2, [sp, #4]
 800c02e:	f845 c002 	str.w	ip, [r5, r2]
 800c032:	9a03      	ldr	r2, [sp, #12]
 800c034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c038:	3304      	adds	r3, #4
 800c03a:	f1b9 0f00 	cmp.w	r9, #0
 800c03e:	d021      	beq.n	800c084 <__multiply+0x144>
 800c040:	6829      	ldr	r1, [r5, #0]
 800c042:	f104 0c14 	add.w	ip, r4, #20
 800c046:	46ae      	mov	lr, r5
 800c048:	f04f 0a00 	mov.w	sl, #0
 800c04c:	f8bc b000 	ldrh.w	fp, [ip]
 800c050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c054:	fb09 220b 	mla	r2, r9, fp, r2
 800c058:	4452      	add	r2, sl
 800c05a:	b289      	uxth	r1, r1
 800c05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c060:	f84e 1b04 	str.w	r1, [lr], #4
 800c064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c06c:	f8be 1000 	ldrh.w	r1, [lr]
 800c070:	fb09 110a 	mla	r1, r9, sl, r1
 800c074:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c078:	4567      	cmp	r7, ip
 800c07a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c07e:	d8e5      	bhi.n	800c04c <__multiply+0x10c>
 800c080:	9a01      	ldr	r2, [sp, #4]
 800c082:	50a9      	str	r1, [r5, r2]
 800c084:	3504      	adds	r5, #4
 800c086:	e799      	b.n	800bfbc <__multiply+0x7c>
 800c088:	3e01      	subs	r6, #1
 800c08a:	e79b      	b.n	800bfc4 <__multiply+0x84>
 800c08c:	0800f469 	.word	0x0800f469
 800c090:	0800f47a 	.word	0x0800f47a

0800c094 <__pow5mult>:
 800c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	4615      	mov	r5, r2
 800c09a:	f012 0203 	ands.w	r2, r2, #3
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	d007      	beq.n	800c0b4 <__pow5mult+0x20>
 800c0a4:	4c25      	ldr	r4, [pc, #148]	; (800c13c <__pow5mult+0xa8>)
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0ae:	f7ff fe53 	bl	800bd58 <__multadd>
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	10ad      	asrs	r5, r5, #2
 800c0b6:	d03d      	beq.n	800c134 <__pow5mult+0xa0>
 800c0b8:	69f4      	ldr	r4, [r6, #28]
 800c0ba:	b97c      	cbnz	r4, 800c0dc <__pow5mult+0x48>
 800c0bc:	2010      	movs	r0, #16
 800c0be:	f7ff fd35 	bl	800bb2c <malloc>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	61f0      	str	r0, [r6, #28]
 800c0c6:	b928      	cbnz	r0, 800c0d4 <__pow5mult+0x40>
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <__pow5mult+0xac>)
 800c0ca:	481e      	ldr	r0, [pc, #120]	; (800c144 <__pow5mult+0xb0>)
 800c0cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c0d0:	f001 fd56 	bl	800db80 <__assert_func>
 800c0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0d8:	6004      	str	r4, [r0, #0]
 800c0da:	60c4      	str	r4, [r0, #12]
 800c0dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0e4:	b94c      	cbnz	r4, 800c0fa <__pow5mult+0x66>
 800c0e6:	f240 2171 	movw	r1, #625	; 0x271
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7ff ff12 	bl	800bf14 <__i2b>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	f04f 0900 	mov.w	r9, #0
 800c0fe:	07eb      	lsls	r3, r5, #31
 800c100:	d50a      	bpl.n	800c118 <__pow5mult+0x84>
 800c102:	4639      	mov	r1, r7
 800c104:	4622      	mov	r2, r4
 800c106:	4630      	mov	r0, r6
 800c108:	f7ff ff1a 	bl	800bf40 <__multiply>
 800c10c:	4639      	mov	r1, r7
 800c10e:	4680      	mov	r8, r0
 800c110:	4630      	mov	r0, r6
 800c112:	f7ff fdff 	bl	800bd14 <_Bfree>
 800c116:	4647      	mov	r7, r8
 800c118:	106d      	asrs	r5, r5, #1
 800c11a:	d00b      	beq.n	800c134 <__pow5mult+0xa0>
 800c11c:	6820      	ldr	r0, [r4, #0]
 800c11e:	b938      	cbnz	r0, 800c130 <__pow5mult+0x9c>
 800c120:	4622      	mov	r2, r4
 800c122:	4621      	mov	r1, r4
 800c124:	4630      	mov	r0, r6
 800c126:	f7ff ff0b 	bl	800bf40 <__multiply>
 800c12a:	6020      	str	r0, [r4, #0]
 800c12c:	f8c0 9000 	str.w	r9, [r0]
 800c130:	4604      	mov	r4, r0
 800c132:	e7e4      	b.n	800c0fe <__pow5mult+0x6a>
 800c134:	4638      	mov	r0, r7
 800c136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13a:	bf00      	nop
 800c13c:	0800f5c8 	.word	0x0800f5c8
 800c140:	0800f3fa 	.word	0x0800f3fa
 800c144:	0800f47a 	.word	0x0800f47a

0800c148 <__lshift>:
 800c148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14c:	460c      	mov	r4, r1
 800c14e:	6849      	ldr	r1, [r1, #4]
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	4607      	mov	r7, r0
 800c15a:	4691      	mov	r9, r2
 800c15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c160:	f108 0601 	add.w	r6, r8, #1
 800c164:	42b3      	cmp	r3, r6
 800c166:	db0b      	blt.n	800c180 <__lshift+0x38>
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff fd93 	bl	800bc94 <_Balloc>
 800c16e:	4605      	mov	r5, r0
 800c170:	b948      	cbnz	r0, 800c186 <__lshift+0x3e>
 800c172:	4602      	mov	r2, r0
 800c174:	4b28      	ldr	r3, [pc, #160]	; (800c218 <__lshift+0xd0>)
 800c176:	4829      	ldr	r0, [pc, #164]	; (800c21c <__lshift+0xd4>)
 800c178:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c17c:	f001 fd00 	bl	800db80 <__assert_func>
 800c180:	3101      	adds	r1, #1
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	e7ee      	b.n	800c164 <__lshift+0x1c>
 800c186:	2300      	movs	r3, #0
 800c188:	f100 0114 	add.w	r1, r0, #20
 800c18c:	f100 0210 	add.w	r2, r0, #16
 800c190:	4618      	mov	r0, r3
 800c192:	4553      	cmp	r3, sl
 800c194:	db33      	blt.n	800c1fe <__lshift+0xb6>
 800c196:	6920      	ldr	r0, [r4, #16]
 800c198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c19c:	f104 0314 	add.w	r3, r4, #20
 800c1a0:	f019 091f 	ands.w	r9, r9, #31
 800c1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1ac:	d02b      	beq.n	800c206 <__lshift+0xbe>
 800c1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c1b2:	468a      	mov	sl, r1
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c1bc:	4310      	orrs	r0, r2
 800c1be:	f84a 0b04 	str.w	r0, [sl], #4
 800c1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c6:	459c      	cmp	ip, r3
 800c1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1cc:	d8f3      	bhi.n	800c1b6 <__lshift+0x6e>
 800c1ce:	ebac 0304 	sub.w	r3, ip, r4
 800c1d2:	3b15      	subs	r3, #21
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	3304      	adds	r3, #4
 800c1da:	f104 0015 	add.w	r0, r4, #21
 800c1de:	4584      	cmp	ip, r0
 800c1e0:	bf38      	it	cc
 800c1e2:	2304      	movcc	r3, #4
 800c1e4:	50ca      	str	r2, [r1, r3]
 800c1e6:	b10a      	cbz	r2, 800c1ec <__lshift+0xa4>
 800c1e8:	f108 0602 	add.w	r6, r8, #2
 800c1ec:	3e01      	subs	r6, #1
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	612e      	str	r6, [r5, #16]
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	f7ff fd8e 	bl	800bd14 <_Bfree>
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c202:	3301      	adds	r3, #1
 800c204:	e7c5      	b.n	800c192 <__lshift+0x4a>
 800c206:	3904      	subs	r1, #4
 800c208:	f853 2b04 	ldr.w	r2, [r3], #4
 800c20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c210:	459c      	cmp	ip, r3
 800c212:	d8f9      	bhi.n	800c208 <__lshift+0xc0>
 800c214:	e7ea      	b.n	800c1ec <__lshift+0xa4>
 800c216:	bf00      	nop
 800c218:	0800f469 	.word	0x0800f469
 800c21c:	0800f47a 	.word	0x0800f47a

0800c220 <__mcmp>:
 800c220:	b530      	push	{r4, r5, lr}
 800c222:	6902      	ldr	r2, [r0, #16]
 800c224:	690c      	ldr	r4, [r1, #16]
 800c226:	1b12      	subs	r2, r2, r4
 800c228:	d10e      	bne.n	800c248 <__mcmp+0x28>
 800c22a:	f100 0314 	add.w	r3, r0, #20
 800c22e:	3114      	adds	r1, #20
 800c230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c23c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c240:	42a5      	cmp	r5, r4
 800c242:	d003      	beq.n	800c24c <__mcmp+0x2c>
 800c244:	d305      	bcc.n	800c252 <__mcmp+0x32>
 800c246:	2201      	movs	r2, #1
 800c248:	4610      	mov	r0, r2
 800c24a:	bd30      	pop	{r4, r5, pc}
 800c24c:	4283      	cmp	r3, r0
 800c24e:	d3f3      	bcc.n	800c238 <__mcmp+0x18>
 800c250:	e7fa      	b.n	800c248 <__mcmp+0x28>
 800c252:	f04f 32ff 	mov.w	r2, #4294967295
 800c256:	e7f7      	b.n	800c248 <__mcmp+0x28>

0800c258 <__mdiff>:
 800c258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	4606      	mov	r6, r0
 800c260:	4611      	mov	r1, r2
 800c262:	4620      	mov	r0, r4
 800c264:	4690      	mov	r8, r2
 800c266:	f7ff ffdb 	bl	800c220 <__mcmp>
 800c26a:	1e05      	subs	r5, r0, #0
 800c26c:	d110      	bne.n	800c290 <__mdiff+0x38>
 800c26e:	4629      	mov	r1, r5
 800c270:	4630      	mov	r0, r6
 800c272:	f7ff fd0f 	bl	800bc94 <_Balloc>
 800c276:	b930      	cbnz	r0, 800c286 <__mdiff+0x2e>
 800c278:	4b3a      	ldr	r3, [pc, #232]	; (800c364 <__mdiff+0x10c>)
 800c27a:	4602      	mov	r2, r0
 800c27c:	f240 2137 	movw	r1, #567	; 0x237
 800c280:	4839      	ldr	r0, [pc, #228]	; (800c368 <__mdiff+0x110>)
 800c282:	f001 fc7d 	bl	800db80 <__assert_func>
 800c286:	2301      	movs	r3, #1
 800c288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c290:	bfa4      	itt	ge
 800c292:	4643      	movge	r3, r8
 800c294:	46a0      	movge	r8, r4
 800c296:	4630      	mov	r0, r6
 800c298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c29c:	bfa6      	itte	ge
 800c29e:	461c      	movge	r4, r3
 800c2a0:	2500      	movge	r5, #0
 800c2a2:	2501      	movlt	r5, #1
 800c2a4:	f7ff fcf6 	bl	800bc94 <_Balloc>
 800c2a8:	b920      	cbnz	r0, 800c2b4 <__mdiff+0x5c>
 800c2aa:	4b2e      	ldr	r3, [pc, #184]	; (800c364 <__mdiff+0x10c>)
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	f240 2145 	movw	r1, #581	; 0x245
 800c2b2:	e7e5      	b.n	800c280 <__mdiff+0x28>
 800c2b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c2b8:	6926      	ldr	r6, [r4, #16]
 800c2ba:	60c5      	str	r5, [r0, #12]
 800c2bc:	f104 0914 	add.w	r9, r4, #20
 800c2c0:	f108 0514 	add.w	r5, r8, #20
 800c2c4:	f100 0e14 	add.w	lr, r0, #20
 800c2c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c2cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2d0:	f108 0210 	add.w	r2, r8, #16
 800c2d4:	46f2      	mov	sl, lr
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2e0:	fa11 f88b 	uxtah	r8, r1, fp
 800c2e4:	b299      	uxth	r1, r3
 800c2e6:	0c1b      	lsrs	r3, r3, #16
 800c2e8:	eba8 0801 	sub.w	r8, r8, r1
 800c2ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2f4:	fa1f f888 	uxth.w	r8, r8
 800c2f8:	1419      	asrs	r1, r3, #16
 800c2fa:	454e      	cmp	r6, r9
 800c2fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c300:	f84a 3b04 	str.w	r3, [sl], #4
 800c304:	d8e8      	bhi.n	800c2d8 <__mdiff+0x80>
 800c306:	1b33      	subs	r3, r6, r4
 800c308:	3b15      	subs	r3, #21
 800c30a:	f023 0303 	bic.w	r3, r3, #3
 800c30e:	3304      	adds	r3, #4
 800c310:	3415      	adds	r4, #21
 800c312:	42a6      	cmp	r6, r4
 800c314:	bf38      	it	cc
 800c316:	2304      	movcc	r3, #4
 800c318:	441d      	add	r5, r3
 800c31a:	4473      	add	r3, lr
 800c31c:	469e      	mov	lr, r3
 800c31e:	462e      	mov	r6, r5
 800c320:	4566      	cmp	r6, ip
 800c322:	d30e      	bcc.n	800c342 <__mdiff+0xea>
 800c324:	f10c 0203 	add.w	r2, ip, #3
 800c328:	1b52      	subs	r2, r2, r5
 800c32a:	f022 0203 	bic.w	r2, r2, #3
 800c32e:	3d03      	subs	r5, #3
 800c330:	45ac      	cmp	ip, r5
 800c332:	bf38      	it	cc
 800c334:	2200      	movcc	r2, #0
 800c336:	4413      	add	r3, r2
 800c338:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c33c:	b17a      	cbz	r2, 800c35e <__mdiff+0x106>
 800c33e:	6107      	str	r7, [r0, #16]
 800c340:	e7a4      	b.n	800c28c <__mdiff+0x34>
 800c342:	f856 8b04 	ldr.w	r8, [r6], #4
 800c346:	fa11 f288 	uxtah	r2, r1, r8
 800c34a:	1414      	asrs	r4, r2, #16
 800c34c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c350:	b292      	uxth	r2, r2
 800c352:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c356:	f84e 2b04 	str.w	r2, [lr], #4
 800c35a:	1421      	asrs	r1, r4, #16
 800c35c:	e7e0      	b.n	800c320 <__mdiff+0xc8>
 800c35e:	3f01      	subs	r7, #1
 800c360:	e7ea      	b.n	800c338 <__mdiff+0xe0>
 800c362:	bf00      	nop
 800c364:	0800f469 	.word	0x0800f469
 800c368:	0800f47a 	.word	0x0800f47a

0800c36c <__ulp>:
 800c36c:	b082      	sub	sp, #8
 800c36e:	ed8d 0b00 	vstr	d0, [sp]
 800c372:	9a01      	ldr	r2, [sp, #4]
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <__ulp+0x48>)
 800c376:	4013      	ands	r3, r2
 800c378:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dc08      	bgt.n	800c392 <__ulp+0x26>
 800c380:	425b      	negs	r3, r3
 800c382:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c386:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c38a:	da04      	bge.n	800c396 <__ulp+0x2a>
 800c38c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c390:	4113      	asrs	r3, r2
 800c392:	2200      	movs	r2, #0
 800c394:	e008      	b.n	800c3a8 <__ulp+0x3c>
 800c396:	f1a2 0314 	sub.w	r3, r2, #20
 800c39a:	2b1e      	cmp	r3, #30
 800c39c:	bfda      	itte	le
 800c39e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c3a2:	40da      	lsrle	r2, r3
 800c3a4:	2201      	movgt	r2, #1
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	ec41 0b10 	vmov	d0, r0, r1
 800c3b0:	b002      	add	sp, #8
 800c3b2:	4770      	bx	lr
 800c3b4:	7ff00000 	.word	0x7ff00000

0800c3b8 <__b2d>:
 800c3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3bc:	6906      	ldr	r6, [r0, #16]
 800c3be:	f100 0814 	add.w	r8, r0, #20
 800c3c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c3c6:	1f37      	subs	r7, r6, #4
 800c3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	f7ff fd53 	bl	800be78 <__hi0bits>
 800c3d2:	f1c0 0320 	rsb	r3, r0, #32
 800c3d6:	280a      	cmp	r0, #10
 800c3d8:	600b      	str	r3, [r1, #0]
 800c3da:	491b      	ldr	r1, [pc, #108]	; (800c448 <__b2d+0x90>)
 800c3dc:	dc15      	bgt.n	800c40a <__b2d+0x52>
 800c3de:	f1c0 0c0b 	rsb	ip, r0, #11
 800c3e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c3e6:	45b8      	cmp	r8, r7
 800c3e8:	ea43 0501 	orr.w	r5, r3, r1
 800c3ec:	bf34      	ite	cc
 800c3ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3f2:	2300      	movcs	r3, #0
 800c3f4:	3015      	adds	r0, #21
 800c3f6:	fa02 f000 	lsl.w	r0, r2, r0
 800c3fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800c3fe:	4303      	orrs	r3, r0
 800c400:	461c      	mov	r4, r3
 800c402:	ec45 4b10 	vmov	d0, r4, r5
 800c406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40a:	45b8      	cmp	r8, r7
 800c40c:	bf3a      	itte	cc
 800c40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c412:	f1a6 0708 	subcc.w	r7, r6, #8
 800c416:	2300      	movcs	r3, #0
 800c418:	380b      	subs	r0, #11
 800c41a:	d012      	beq.n	800c442 <__b2d+0x8a>
 800c41c:	f1c0 0120 	rsb	r1, r0, #32
 800c420:	fa23 f401 	lsr.w	r4, r3, r1
 800c424:	4082      	lsls	r2, r0
 800c426:	4322      	orrs	r2, r4
 800c428:	4547      	cmp	r7, r8
 800c42a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c42e:	bf8c      	ite	hi
 800c430:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c434:	2200      	movls	r2, #0
 800c436:	4083      	lsls	r3, r0
 800c438:	40ca      	lsrs	r2, r1
 800c43a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c43e:	4313      	orrs	r3, r2
 800c440:	e7de      	b.n	800c400 <__b2d+0x48>
 800c442:	ea42 0501 	orr.w	r5, r2, r1
 800c446:	e7db      	b.n	800c400 <__b2d+0x48>
 800c448:	3ff00000 	.word	0x3ff00000

0800c44c <__d2b>:
 800c44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c450:	460f      	mov	r7, r1
 800c452:	2101      	movs	r1, #1
 800c454:	ec59 8b10 	vmov	r8, r9, d0
 800c458:	4616      	mov	r6, r2
 800c45a:	f7ff fc1b 	bl	800bc94 <_Balloc>
 800c45e:	4604      	mov	r4, r0
 800c460:	b930      	cbnz	r0, 800c470 <__d2b+0x24>
 800c462:	4602      	mov	r2, r0
 800c464:	4b24      	ldr	r3, [pc, #144]	; (800c4f8 <__d2b+0xac>)
 800c466:	4825      	ldr	r0, [pc, #148]	; (800c4fc <__d2b+0xb0>)
 800c468:	f240 310f 	movw	r1, #783	; 0x30f
 800c46c:	f001 fb88 	bl	800db80 <__assert_func>
 800c470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c478:	bb2d      	cbnz	r5, 800c4c6 <__d2b+0x7a>
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	f1b8 0300 	subs.w	r3, r8, #0
 800c480:	d026      	beq.n	800c4d0 <__d2b+0x84>
 800c482:	4668      	mov	r0, sp
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	f7ff fd17 	bl	800beb8 <__lo0bits>
 800c48a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c48e:	b1e8      	cbz	r0, 800c4cc <__d2b+0x80>
 800c490:	f1c0 0320 	rsb	r3, r0, #32
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	430b      	orrs	r3, r1
 800c49a:	40c2      	lsrs	r2, r0
 800c49c:	6163      	str	r3, [r4, #20]
 800c49e:	9201      	str	r2, [sp, #4]
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	61a3      	str	r3, [r4, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bf14      	ite	ne
 800c4a8:	2202      	movne	r2, #2
 800c4aa:	2201      	moveq	r2, #1
 800c4ac:	6122      	str	r2, [r4, #16]
 800c4ae:	b1bd      	cbz	r5, 800c4e0 <__d2b+0x94>
 800c4b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4b4:	4405      	add	r5, r0
 800c4b6:	603d      	str	r5, [r7, #0]
 800c4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4bc:	6030      	str	r0, [r6, #0]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	b003      	add	sp, #12
 800c4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4ca:	e7d6      	b.n	800c47a <__d2b+0x2e>
 800c4cc:	6161      	str	r1, [r4, #20]
 800c4ce:	e7e7      	b.n	800c4a0 <__d2b+0x54>
 800c4d0:	a801      	add	r0, sp, #4
 800c4d2:	f7ff fcf1 	bl	800beb8 <__lo0bits>
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	6163      	str	r3, [r4, #20]
 800c4da:	3020      	adds	r0, #32
 800c4dc:	2201      	movs	r2, #1
 800c4de:	e7e5      	b.n	800c4ac <__d2b+0x60>
 800c4e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4e8:	6038      	str	r0, [r7, #0]
 800c4ea:	6918      	ldr	r0, [r3, #16]
 800c4ec:	f7ff fcc4 	bl	800be78 <__hi0bits>
 800c4f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4f4:	e7e2      	b.n	800c4bc <__d2b+0x70>
 800c4f6:	bf00      	nop
 800c4f8:	0800f469 	.word	0x0800f469
 800c4fc:	0800f47a 	.word	0x0800f47a

0800c500 <__ratio>:
 800c500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	4688      	mov	r8, r1
 800c506:	4669      	mov	r1, sp
 800c508:	4681      	mov	r9, r0
 800c50a:	f7ff ff55 	bl	800c3b8 <__b2d>
 800c50e:	a901      	add	r1, sp, #4
 800c510:	4640      	mov	r0, r8
 800c512:	ec55 4b10 	vmov	r4, r5, d0
 800c516:	f7ff ff4f 	bl	800c3b8 <__b2d>
 800c51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c51e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c522:	eba3 0c02 	sub.w	ip, r3, r2
 800c526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c52a:	1a9b      	subs	r3, r3, r2
 800c52c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c530:	ec51 0b10 	vmov	r0, r1, d0
 800c534:	2b00      	cmp	r3, #0
 800c536:	bfd6      	itet	le
 800c538:	460a      	movle	r2, r1
 800c53a:	462a      	movgt	r2, r5
 800c53c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c540:	468b      	mov	fp, r1
 800c542:	462f      	mov	r7, r5
 800c544:	bfd4      	ite	le
 800c546:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c54a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c54e:	4620      	mov	r0, r4
 800c550:	ee10 2a10 	vmov	r2, s0
 800c554:	465b      	mov	r3, fp
 800c556:	4639      	mov	r1, r7
 800c558:	f7f4 f978 	bl	800084c <__aeabi_ddiv>
 800c55c:	ec41 0b10 	vmov	d0, r0, r1
 800c560:	b003      	add	sp, #12
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c566 <__copybits>:
 800c566:	3901      	subs	r1, #1
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	1149      	asrs	r1, r1, #5
 800c56c:	6914      	ldr	r4, [r2, #16]
 800c56e:	3101      	adds	r1, #1
 800c570:	f102 0314 	add.w	r3, r2, #20
 800c574:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c578:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c57c:	1f05      	subs	r5, r0, #4
 800c57e:	42a3      	cmp	r3, r4
 800c580:	d30c      	bcc.n	800c59c <__copybits+0x36>
 800c582:	1aa3      	subs	r3, r4, r2
 800c584:	3b11      	subs	r3, #17
 800c586:	f023 0303 	bic.w	r3, r3, #3
 800c58a:	3211      	adds	r2, #17
 800c58c:	42a2      	cmp	r2, r4
 800c58e:	bf88      	it	hi
 800c590:	2300      	movhi	r3, #0
 800c592:	4418      	add	r0, r3
 800c594:	2300      	movs	r3, #0
 800c596:	4288      	cmp	r0, r1
 800c598:	d305      	bcc.n	800c5a6 <__copybits+0x40>
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c5a4:	e7eb      	b.n	800c57e <__copybits+0x18>
 800c5a6:	f840 3b04 	str.w	r3, [r0], #4
 800c5aa:	e7f4      	b.n	800c596 <__copybits+0x30>

0800c5ac <__any_on>:
 800c5ac:	f100 0214 	add.w	r2, r0, #20
 800c5b0:	6900      	ldr	r0, [r0, #16]
 800c5b2:	114b      	asrs	r3, r1, #5
 800c5b4:	4298      	cmp	r0, r3
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	db11      	blt.n	800c5de <__any_on+0x32>
 800c5ba:	dd0a      	ble.n	800c5d2 <__any_on+0x26>
 800c5bc:	f011 011f 	ands.w	r1, r1, #31
 800c5c0:	d007      	beq.n	800c5d2 <__any_on+0x26>
 800c5c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5c6:	fa24 f001 	lsr.w	r0, r4, r1
 800c5ca:	fa00 f101 	lsl.w	r1, r0, r1
 800c5ce:	428c      	cmp	r4, r1
 800c5d0:	d10b      	bne.n	800c5ea <__any_on+0x3e>
 800c5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d803      	bhi.n	800c5e2 <__any_on+0x36>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	4603      	mov	r3, r0
 800c5e0:	e7f7      	b.n	800c5d2 <__any_on+0x26>
 800c5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	d0f5      	beq.n	800c5d6 <__any_on+0x2a>
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	e7f6      	b.n	800c5dc <__any_on+0x30>

0800c5ee <sulp>:
 800c5ee:	b570      	push	{r4, r5, r6, lr}
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	ec45 4b10 	vmov	d0, r4, r5
 800c5f8:	4616      	mov	r6, r2
 800c5fa:	f7ff feb7 	bl	800c36c <__ulp>
 800c5fe:	ec51 0b10 	vmov	r0, r1, d0
 800c602:	b17e      	cbz	r6, 800c624 <sulp+0x36>
 800c604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dd09      	ble.n	800c624 <sulp+0x36>
 800c610:	051b      	lsls	r3, r3, #20
 800c612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c616:	2400      	movs	r4, #0
 800c618:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c61c:	4622      	mov	r2, r4
 800c61e:	462b      	mov	r3, r5
 800c620:	f7f3 ffea 	bl	80005f8 <__aeabi_dmul>
 800c624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c628 <_strtod_l>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	ed2d 8b02 	vpush	{d8}
 800c630:	b09b      	sub	sp, #108	; 0x6c
 800c632:	4604      	mov	r4, r0
 800c634:	9213      	str	r2, [sp, #76]	; 0x4c
 800c636:	2200      	movs	r2, #0
 800c638:	9216      	str	r2, [sp, #88]	; 0x58
 800c63a:	460d      	mov	r5, r1
 800c63c:	f04f 0800 	mov.w	r8, #0
 800c640:	f04f 0900 	mov.w	r9, #0
 800c644:	460a      	mov	r2, r1
 800c646:	9215      	str	r2, [sp, #84]	; 0x54
 800c648:	7811      	ldrb	r1, [r2, #0]
 800c64a:	292b      	cmp	r1, #43	; 0x2b
 800c64c:	d04c      	beq.n	800c6e8 <_strtod_l+0xc0>
 800c64e:	d83a      	bhi.n	800c6c6 <_strtod_l+0x9e>
 800c650:	290d      	cmp	r1, #13
 800c652:	d834      	bhi.n	800c6be <_strtod_l+0x96>
 800c654:	2908      	cmp	r1, #8
 800c656:	d834      	bhi.n	800c6c2 <_strtod_l+0x9a>
 800c658:	2900      	cmp	r1, #0
 800c65a:	d03d      	beq.n	800c6d8 <_strtod_l+0xb0>
 800c65c:	2200      	movs	r2, #0
 800c65e:	920a      	str	r2, [sp, #40]	; 0x28
 800c660:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c662:	7832      	ldrb	r2, [r6, #0]
 800c664:	2a30      	cmp	r2, #48	; 0x30
 800c666:	f040 80b4 	bne.w	800c7d2 <_strtod_l+0x1aa>
 800c66a:	7872      	ldrb	r2, [r6, #1]
 800c66c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c670:	2a58      	cmp	r2, #88	; 0x58
 800c672:	d170      	bne.n	800c756 <_strtod_l+0x12e>
 800c674:	9302      	str	r3, [sp, #8]
 800c676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	ab16      	add	r3, sp, #88	; 0x58
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	4a8e      	ldr	r2, [pc, #568]	; (800c8b8 <_strtod_l+0x290>)
 800c680:	ab17      	add	r3, sp, #92	; 0x5c
 800c682:	a915      	add	r1, sp, #84	; 0x54
 800c684:	4620      	mov	r0, r4
 800c686:	f001 fb17 	bl	800dcb8 <__gethex>
 800c68a:	f010 070f 	ands.w	r7, r0, #15
 800c68e:	4605      	mov	r5, r0
 800c690:	d005      	beq.n	800c69e <_strtod_l+0x76>
 800c692:	2f06      	cmp	r7, #6
 800c694:	d12a      	bne.n	800c6ec <_strtod_l+0xc4>
 800c696:	3601      	adds	r6, #1
 800c698:	2300      	movs	r3, #0
 800c69a:	9615      	str	r6, [sp, #84]	; 0x54
 800c69c:	930a      	str	r3, [sp, #40]	; 0x28
 800c69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f040 857f 	bne.w	800d1a4 <_strtod_l+0xb7c>
 800c6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a8:	b1db      	cbz	r3, 800c6e2 <_strtod_l+0xba>
 800c6aa:	4642      	mov	r2, r8
 800c6ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6b0:	ec43 2b10 	vmov	d0, r2, r3
 800c6b4:	b01b      	add	sp, #108	; 0x6c
 800c6b6:	ecbd 8b02 	vpop	{d8}
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	2920      	cmp	r1, #32
 800c6c0:	d1cc      	bne.n	800c65c <_strtod_l+0x34>
 800c6c2:	3201      	adds	r2, #1
 800c6c4:	e7bf      	b.n	800c646 <_strtod_l+0x1e>
 800c6c6:	292d      	cmp	r1, #45	; 0x2d
 800c6c8:	d1c8      	bne.n	800c65c <_strtod_l+0x34>
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	910a      	str	r1, [sp, #40]	; 0x28
 800c6ce:	1c51      	adds	r1, r2, #1
 800c6d0:	9115      	str	r1, [sp, #84]	; 0x54
 800c6d2:	7852      	ldrb	r2, [r2, #1]
 800c6d4:	2a00      	cmp	r2, #0
 800c6d6:	d1c3      	bne.n	800c660 <_strtod_l+0x38>
 800c6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6da:	9515      	str	r5, [sp, #84]	; 0x54
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f040 855f 	bne.w	800d1a0 <_strtod_l+0xb78>
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	e7e3      	b.n	800c6b0 <_strtod_l+0x88>
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	e7ef      	b.n	800c6cc <_strtod_l+0xa4>
 800c6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c6ee:	b13a      	cbz	r2, 800c700 <_strtod_l+0xd8>
 800c6f0:	2135      	movs	r1, #53	; 0x35
 800c6f2:	a818      	add	r0, sp, #96	; 0x60
 800c6f4:	f7ff ff37 	bl	800c566 <__copybits>
 800c6f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f7ff fb0a 	bl	800bd14 <_Bfree>
 800c700:	3f01      	subs	r7, #1
 800c702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c704:	2f04      	cmp	r7, #4
 800c706:	d806      	bhi.n	800c716 <_strtod_l+0xee>
 800c708:	e8df f007 	tbb	[pc, r7]
 800c70c:	201d0314 	.word	0x201d0314
 800c710:	14          	.byte	0x14
 800c711:	00          	.byte	0x00
 800c712:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c716:	05e9      	lsls	r1, r5, #23
 800c718:	bf48      	it	mi
 800c71a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c722:	0d1b      	lsrs	r3, r3, #20
 800c724:	051b      	lsls	r3, r3, #20
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1b9      	bne.n	800c69e <_strtod_l+0x76>
 800c72a:	f7fe fb07 	bl	800ad3c <__errno>
 800c72e:	2322      	movs	r3, #34	; 0x22
 800c730:	6003      	str	r3, [r0, #0]
 800c732:	e7b4      	b.n	800c69e <_strtod_l+0x76>
 800c734:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c73c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c744:	e7e7      	b.n	800c716 <_strtod_l+0xee>
 800c746:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c8c0 <_strtod_l+0x298>
 800c74a:	e7e4      	b.n	800c716 <_strtod_l+0xee>
 800c74c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c750:	f04f 38ff 	mov.w	r8, #4294967295
 800c754:	e7df      	b.n	800c716 <_strtod_l+0xee>
 800c756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	9215      	str	r2, [sp, #84]	; 0x54
 800c75c:	785b      	ldrb	r3, [r3, #1]
 800c75e:	2b30      	cmp	r3, #48	; 0x30
 800c760:	d0f9      	beq.n	800c756 <_strtod_l+0x12e>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d09b      	beq.n	800c69e <_strtod_l+0x76>
 800c766:	2301      	movs	r3, #1
 800c768:	f04f 0a00 	mov.w	sl, #0
 800c76c:	9304      	str	r3, [sp, #16]
 800c76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c770:	930b      	str	r3, [sp, #44]	; 0x2c
 800c772:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c776:	46d3      	mov	fp, sl
 800c778:	220a      	movs	r2, #10
 800c77a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c77c:	7806      	ldrb	r6, [r0, #0]
 800c77e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c782:	b2d9      	uxtb	r1, r3
 800c784:	2909      	cmp	r1, #9
 800c786:	d926      	bls.n	800c7d6 <_strtod_l+0x1ae>
 800c788:	494c      	ldr	r1, [pc, #304]	; (800c8bc <_strtod_l+0x294>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	f001 f9c0 	bl	800db10 <strncmp>
 800c790:	2800      	cmp	r0, #0
 800c792:	d030      	beq.n	800c7f6 <_strtod_l+0x1ce>
 800c794:	2000      	movs	r0, #0
 800c796:	4632      	mov	r2, r6
 800c798:	9005      	str	r0, [sp, #20]
 800c79a:	465e      	mov	r6, fp
 800c79c:	4603      	mov	r3, r0
 800c79e:	2a65      	cmp	r2, #101	; 0x65
 800c7a0:	d001      	beq.n	800c7a6 <_strtod_l+0x17e>
 800c7a2:	2a45      	cmp	r2, #69	; 0x45
 800c7a4:	d113      	bne.n	800c7ce <_strtod_l+0x1a6>
 800c7a6:	b91e      	cbnz	r6, 800c7b0 <_strtod_l+0x188>
 800c7a8:	9a04      	ldr	r2, [sp, #16]
 800c7aa:	4302      	orrs	r2, r0
 800c7ac:	d094      	beq.n	800c6d8 <_strtod_l+0xb0>
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c7b2:	1c6a      	adds	r2, r5, #1
 800c7b4:	9215      	str	r2, [sp, #84]	; 0x54
 800c7b6:	786a      	ldrb	r2, [r5, #1]
 800c7b8:	2a2b      	cmp	r2, #43	; 0x2b
 800c7ba:	d074      	beq.n	800c8a6 <_strtod_l+0x27e>
 800c7bc:	2a2d      	cmp	r2, #45	; 0x2d
 800c7be:	d078      	beq.n	800c8b2 <_strtod_l+0x28a>
 800c7c0:	f04f 0c00 	mov.w	ip, #0
 800c7c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7c8:	2909      	cmp	r1, #9
 800c7ca:	d97f      	bls.n	800c8cc <_strtod_l+0x2a4>
 800c7cc:	9515      	str	r5, [sp, #84]	; 0x54
 800c7ce:	2700      	movs	r7, #0
 800c7d0:	e09e      	b.n	800c910 <_strtod_l+0x2e8>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e7c8      	b.n	800c768 <_strtod_l+0x140>
 800c7d6:	f1bb 0f08 	cmp.w	fp, #8
 800c7da:	bfd8      	it	le
 800c7dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c7de:	f100 0001 	add.w	r0, r0, #1
 800c7e2:	bfda      	itte	le
 800c7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800c7ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c7ee:	f10b 0b01 	add.w	fp, fp, #1
 800c7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800c7f4:	e7c1      	b.n	800c77a <_strtod_l+0x152>
 800c7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	9215      	str	r2, [sp, #84]	; 0x54
 800c7fc:	785a      	ldrb	r2, [r3, #1]
 800c7fe:	f1bb 0f00 	cmp.w	fp, #0
 800c802:	d037      	beq.n	800c874 <_strtod_l+0x24c>
 800c804:	9005      	str	r0, [sp, #20]
 800c806:	465e      	mov	r6, fp
 800c808:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d912      	bls.n	800c836 <_strtod_l+0x20e>
 800c810:	2301      	movs	r3, #1
 800c812:	e7c4      	b.n	800c79e <_strtod_l+0x176>
 800c814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	9215      	str	r2, [sp, #84]	; 0x54
 800c81a:	785a      	ldrb	r2, [r3, #1]
 800c81c:	3001      	adds	r0, #1
 800c81e:	2a30      	cmp	r2, #48	; 0x30
 800c820:	d0f8      	beq.n	800c814 <_strtod_l+0x1ec>
 800c822:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c826:	2b08      	cmp	r3, #8
 800c828:	f200 84c1 	bhi.w	800d1ae <_strtod_l+0xb86>
 800c82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c82e:	9005      	str	r0, [sp, #20]
 800c830:	2000      	movs	r0, #0
 800c832:	930b      	str	r3, [sp, #44]	; 0x2c
 800c834:	4606      	mov	r6, r0
 800c836:	3a30      	subs	r2, #48	; 0x30
 800c838:	f100 0301 	add.w	r3, r0, #1
 800c83c:	d014      	beq.n	800c868 <_strtod_l+0x240>
 800c83e:	9905      	ldr	r1, [sp, #20]
 800c840:	4419      	add	r1, r3
 800c842:	9105      	str	r1, [sp, #20]
 800c844:	4633      	mov	r3, r6
 800c846:	eb00 0c06 	add.w	ip, r0, r6
 800c84a:	210a      	movs	r1, #10
 800c84c:	4563      	cmp	r3, ip
 800c84e:	d113      	bne.n	800c878 <_strtod_l+0x250>
 800c850:	1833      	adds	r3, r6, r0
 800c852:	2b08      	cmp	r3, #8
 800c854:	f106 0601 	add.w	r6, r6, #1
 800c858:	4406      	add	r6, r0
 800c85a:	dc1a      	bgt.n	800c892 <_strtod_l+0x26a>
 800c85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c85e:	230a      	movs	r3, #10
 800c860:	fb03 2301 	mla	r3, r3, r1, r2
 800c864:	9309      	str	r3, [sp, #36]	; 0x24
 800c866:	2300      	movs	r3, #0
 800c868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c86a:	1c51      	adds	r1, r2, #1
 800c86c:	9115      	str	r1, [sp, #84]	; 0x54
 800c86e:	7852      	ldrb	r2, [r2, #1]
 800c870:	4618      	mov	r0, r3
 800c872:	e7c9      	b.n	800c808 <_strtod_l+0x1e0>
 800c874:	4658      	mov	r0, fp
 800c876:	e7d2      	b.n	800c81e <_strtod_l+0x1f6>
 800c878:	2b08      	cmp	r3, #8
 800c87a:	f103 0301 	add.w	r3, r3, #1
 800c87e:	dc03      	bgt.n	800c888 <_strtod_l+0x260>
 800c880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c882:	434f      	muls	r7, r1
 800c884:	9709      	str	r7, [sp, #36]	; 0x24
 800c886:	e7e1      	b.n	800c84c <_strtod_l+0x224>
 800c888:	2b10      	cmp	r3, #16
 800c88a:	bfd8      	it	le
 800c88c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c890:	e7dc      	b.n	800c84c <_strtod_l+0x224>
 800c892:	2e10      	cmp	r6, #16
 800c894:	bfdc      	itt	le
 800c896:	230a      	movle	r3, #10
 800c898:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c89c:	e7e3      	b.n	800c866 <_strtod_l+0x23e>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e780      	b.n	800c7a8 <_strtod_l+0x180>
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	1caa      	adds	r2, r5, #2
 800c8ac:	9215      	str	r2, [sp, #84]	; 0x54
 800c8ae:	78aa      	ldrb	r2, [r5, #2]
 800c8b0:	e788      	b.n	800c7c4 <_strtod_l+0x19c>
 800c8b2:	f04f 0c01 	mov.w	ip, #1
 800c8b6:	e7f8      	b.n	800c8aa <_strtod_l+0x282>
 800c8b8:	0800f5d8 	.word	0x0800f5d8
 800c8bc:	0800f5d4 	.word	0x0800f5d4
 800c8c0:	7ff00000 	.word	0x7ff00000
 800c8c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c8c6:	1c51      	adds	r1, r2, #1
 800c8c8:	9115      	str	r1, [sp, #84]	; 0x54
 800c8ca:	7852      	ldrb	r2, [r2, #1]
 800c8cc:	2a30      	cmp	r2, #48	; 0x30
 800c8ce:	d0f9      	beq.n	800c8c4 <_strtod_l+0x29c>
 800c8d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8d4:	2908      	cmp	r1, #8
 800c8d6:	f63f af7a 	bhi.w	800c7ce <_strtod_l+0x1a6>
 800c8da:	3a30      	subs	r2, #48	; 0x30
 800c8dc:	9208      	str	r2, [sp, #32]
 800c8de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c8e0:	920c      	str	r2, [sp, #48]	; 0x30
 800c8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c8e4:	1c57      	adds	r7, r2, #1
 800c8e6:	9715      	str	r7, [sp, #84]	; 0x54
 800c8e8:	7852      	ldrb	r2, [r2, #1]
 800c8ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c8ee:	f1be 0f09 	cmp.w	lr, #9
 800c8f2:	d938      	bls.n	800c966 <_strtod_l+0x33e>
 800c8f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8f6:	1a7f      	subs	r7, r7, r1
 800c8f8:	2f08      	cmp	r7, #8
 800c8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c8fe:	dc03      	bgt.n	800c908 <_strtod_l+0x2e0>
 800c900:	9908      	ldr	r1, [sp, #32]
 800c902:	428f      	cmp	r7, r1
 800c904:	bfa8      	it	ge
 800c906:	460f      	movge	r7, r1
 800c908:	f1bc 0f00 	cmp.w	ip, #0
 800c90c:	d000      	beq.n	800c910 <_strtod_l+0x2e8>
 800c90e:	427f      	negs	r7, r7
 800c910:	2e00      	cmp	r6, #0
 800c912:	d14f      	bne.n	800c9b4 <_strtod_l+0x38c>
 800c914:	9904      	ldr	r1, [sp, #16]
 800c916:	4301      	orrs	r1, r0
 800c918:	f47f aec1 	bne.w	800c69e <_strtod_l+0x76>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f47f aedb 	bne.w	800c6d8 <_strtod_l+0xb0>
 800c922:	2a69      	cmp	r2, #105	; 0x69
 800c924:	d029      	beq.n	800c97a <_strtod_l+0x352>
 800c926:	dc26      	bgt.n	800c976 <_strtod_l+0x34e>
 800c928:	2a49      	cmp	r2, #73	; 0x49
 800c92a:	d026      	beq.n	800c97a <_strtod_l+0x352>
 800c92c:	2a4e      	cmp	r2, #78	; 0x4e
 800c92e:	f47f aed3 	bne.w	800c6d8 <_strtod_l+0xb0>
 800c932:	499b      	ldr	r1, [pc, #620]	; (800cba0 <_strtod_l+0x578>)
 800c934:	a815      	add	r0, sp, #84	; 0x54
 800c936:	f001 fbff 	bl	800e138 <__match>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f43f aecc 	beq.w	800c6d8 <_strtod_l+0xb0>
 800c940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b28      	cmp	r3, #40	; 0x28
 800c946:	d12f      	bne.n	800c9a8 <_strtod_l+0x380>
 800c948:	4996      	ldr	r1, [pc, #600]	; (800cba4 <_strtod_l+0x57c>)
 800c94a:	aa18      	add	r2, sp, #96	; 0x60
 800c94c:	a815      	add	r0, sp, #84	; 0x54
 800c94e:	f001 fc07 	bl	800e160 <__hexnan>
 800c952:	2805      	cmp	r0, #5
 800c954:	d128      	bne.n	800c9a8 <_strtod_l+0x380>
 800c956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c964:	e69b      	b.n	800c69e <_strtod_l+0x76>
 800c966:	9f08      	ldr	r7, [sp, #32]
 800c968:	210a      	movs	r1, #10
 800c96a:	fb01 2107 	mla	r1, r1, r7, r2
 800c96e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c972:	9208      	str	r2, [sp, #32]
 800c974:	e7b5      	b.n	800c8e2 <_strtod_l+0x2ba>
 800c976:	2a6e      	cmp	r2, #110	; 0x6e
 800c978:	e7d9      	b.n	800c92e <_strtod_l+0x306>
 800c97a:	498b      	ldr	r1, [pc, #556]	; (800cba8 <_strtod_l+0x580>)
 800c97c:	a815      	add	r0, sp, #84	; 0x54
 800c97e:	f001 fbdb 	bl	800e138 <__match>
 800c982:	2800      	cmp	r0, #0
 800c984:	f43f aea8 	beq.w	800c6d8 <_strtod_l+0xb0>
 800c988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c98a:	4988      	ldr	r1, [pc, #544]	; (800cbac <_strtod_l+0x584>)
 800c98c:	3b01      	subs	r3, #1
 800c98e:	a815      	add	r0, sp, #84	; 0x54
 800c990:	9315      	str	r3, [sp, #84]	; 0x54
 800c992:	f001 fbd1 	bl	800e138 <__match>
 800c996:	b910      	cbnz	r0, 800c99e <_strtod_l+0x376>
 800c998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c99a:	3301      	adds	r3, #1
 800c99c:	9315      	str	r3, [sp, #84]	; 0x54
 800c99e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cbbc <_strtod_l+0x594>
 800c9a2:	f04f 0800 	mov.w	r8, #0
 800c9a6:	e67a      	b.n	800c69e <_strtod_l+0x76>
 800c9a8:	4881      	ldr	r0, [pc, #516]	; (800cbb0 <_strtod_l+0x588>)
 800c9aa:	f001 f8e1 	bl	800db70 <nan>
 800c9ae:	ec59 8b10 	vmov	r8, r9, d0
 800c9b2:	e674      	b.n	800c69e <_strtod_l+0x76>
 800c9b4:	9b05      	ldr	r3, [sp, #20]
 800c9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b8:	1afb      	subs	r3, r7, r3
 800c9ba:	f1bb 0f00 	cmp.w	fp, #0
 800c9be:	bf08      	it	eq
 800c9c0:	46b3      	moveq	fp, r6
 800c9c2:	2e10      	cmp	r6, #16
 800c9c4:	9308      	str	r3, [sp, #32]
 800c9c6:	4635      	mov	r5, r6
 800c9c8:	bfa8      	it	ge
 800c9ca:	2510      	movge	r5, #16
 800c9cc:	f7f3 fd9a 	bl	8000504 <__aeabi_ui2d>
 800c9d0:	2e09      	cmp	r6, #9
 800c9d2:	4680      	mov	r8, r0
 800c9d4:	4689      	mov	r9, r1
 800c9d6:	dd13      	ble.n	800ca00 <_strtod_l+0x3d8>
 800c9d8:	4b76      	ldr	r3, [pc, #472]	; (800cbb4 <_strtod_l+0x58c>)
 800c9da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c9de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9e2:	f7f3 fe09 	bl	80005f8 <__aeabi_dmul>
 800c9e6:	4680      	mov	r8, r0
 800c9e8:	4650      	mov	r0, sl
 800c9ea:	4689      	mov	r9, r1
 800c9ec:	f7f3 fd8a 	bl	8000504 <__aeabi_ui2d>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f7f3 fc48 	bl	800028c <__adddf3>
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	4689      	mov	r9, r1
 800ca00:	2e0f      	cmp	r6, #15
 800ca02:	dc38      	bgt.n	800ca76 <_strtod_l+0x44e>
 800ca04:	9b08      	ldr	r3, [sp, #32]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f43f ae49 	beq.w	800c69e <_strtod_l+0x76>
 800ca0c:	dd24      	ble.n	800ca58 <_strtod_l+0x430>
 800ca0e:	2b16      	cmp	r3, #22
 800ca10:	dc0b      	bgt.n	800ca2a <_strtod_l+0x402>
 800ca12:	4968      	ldr	r1, [pc, #416]	; (800cbb4 <_strtod_l+0x58c>)
 800ca14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	f7f3 fdea 	bl	80005f8 <__aeabi_dmul>
 800ca24:	4680      	mov	r8, r0
 800ca26:	4689      	mov	r9, r1
 800ca28:	e639      	b.n	800c69e <_strtod_l+0x76>
 800ca2a:	9a08      	ldr	r2, [sp, #32]
 800ca2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ca30:	4293      	cmp	r3, r2
 800ca32:	db20      	blt.n	800ca76 <_strtod_l+0x44e>
 800ca34:	4c5f      	ldr	r4, [pc, #380]	; (800cbb4 <_strtod_l+0x58c>)
 800ca36:	f1c6 060f 	rsb	r6, r6, #15
 800ca3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ca3e:	4642      	mov	r2, r8
 800ca40:	464b      	mov	r3, r9
 800ca42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca46:	f7f3 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ca4a:	9b08      	ldr	r3, [sp, #32]
 800ca4c:	1b9e      	subs	r6, r3, r6
 800ca4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ca52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca56:	e7e3      	b.n	800ca20 <_strtod_l+0x3f8>
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	3316      	adds	r3, #22
 800ca5c:	db0b      	blt.n	800ca76 <_strtod_l+0x44e>
 800ca5e:	9b05      	ldr	r3, [sp, #20]
 800ca60:	1bdf      	subs	r7, r3, r7
 800ca62:	4b54      	ldr	r3, [pc, #336]	; (800cbb4 <_strtod_l+0x58c>)
 800ca64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ca68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f3 feec 	bl	800084c <__aeabi_ddiv>
 800ca74:	e7d6      	b.n	800ca24 <_strtod_l+0x3fc>
 800ca76:	9b08      	ldr	r3, [sp, #32]
 800ca78:	1b75      	subs	r5, r6, r5
 800ca7a:	441d      	add	r5, r3
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	dd70      	ble.n	800cb62 <_strtod_l+0x53a>
 800ca80:	f015 030f 	ands.w	r3, r5, #15
 800ca84:	d00a      	beq.n	800ca9c <_strtod_l+0x474>
 800ca86:	494b      	ldr	r1, [pc, #300]	; (800cbb4 <_strtod_l+0x58c>)
 800ca88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	464b      	mov	r3, r9
 800ca90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca94:	f7f3 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ca98:	4680      	mov	r8, r0
 800ca9a:	4689      	mov	r9, r1
 800ca9c:	f035 050f 	bics.w	r5, r5, #15
 800caa0:	d04d      	beq.n	800cb3e <_strtod_l+0x516>
 800caa2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800caa6:	dd22      	ble.n	800caee <_strtod_l+0x4c6>
 800caa8:	2500      	movs	r5, #0
 800caaa:	46ab      	mov	fp, r5
 800caac:	9509      	str	r5, [sp, #36]	; 0x24
 800caae:	9505      	str	r5, [sp, #20]
 800cab0:	2322      	movs	r3, #34	; 0x22
 800cab2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cbbc <_strtod_l+0x594>
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	f04f 0800 	mov.w	r8, #0
 800cabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f43f aded 	beq.w	800c69e <_strtod_l+0x76>
 800cac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cac6:	4620      	mov	r0, r4
 800cac8:	f7ff f924 	bl	800bd14 <_Bfree>
 800cacc:	9905      	ldr	r1, [sp, #20]
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff f920 	bl	800bd14 <_Bfree>
 800cad4:	4659      	mov	r1, fp
 800cad6:	4620      	mov	r0, r4
 800cad8:	f7ff f91c 	bl	800bd14 <_Bfree>
 800cadc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff f918 	bl	800bd14 <_Bfree>
 800cae4:	4629      	mov	r1, r5
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7ff f914 	bl	800bd14 <_Bfree>
 800caec:	e5d7      	b.n	800c69e <_strtod_l+0x76>
 800caee:	4b32      	ldr	r3, [pc, #200]	; (800cbb8 <_strtod_l+0x590>)
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	2300      	movs	r3, #0
 800caf4:	112d      	asrs	r5, r5, #4
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	469a      	mov	sl, r3
 800cafc:	2d01      	cmp	r5, #1
 800cafe:	dc21      	bgt.n	800cb44 <_strtod_l+0x51c>
 800cb00:	b10b      	cbz	r3, 800cb06 <_strtod_l+0x4de>
 800cb02:	4680      	mov	r8, r0
 800cb04:	4689      	mov	r9, r1
 800cb06:	492c      	ldr	r1, [pc, #176]	; (800cbb8 <_strtod_l+0x590>)
 800cb08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cb0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cb10:	4642      	mov	r2, r8
 800cb12:	464b      	mov	r3, r9
 800cb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb18:	f7f3 fd6e 	bl	80005f8 <__aeabi_dmul>
 800cb1c:	4b27      	ldr	r3, [pc, #156]	; (800cbbc <_strtod_l+0x594>)
 800cb1e:	460a      	mov	r2, r1
 800cb20:	400b      	ands	r3, r1
 800cb22:	4927      	ldr	r1, [pc, #156]	; (800cbc0 <_strtod_l+0x598>)
 800cb24:	428b      	cmp	r3, r1
 800cb26:	4680      	mov	r8, r0
 800cb28:	d8be      	bhi.n	800caa8 <_strtod_l+0x480>
 800cb2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb2e:	428b      	cmp	r3, r1
 800cb30:	bf86      	itte	hi
 800cb32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cbc4 <_strtod_l+0x59c>
 800cb36:	f04f 38ff 	movhi.w	r8, #4294967295
 800cb3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9304      	str	r3, [sp, #16]
 800cb42:	e07b      	b.n	800cc3c <_strtod_l+0x614>
 800cb44:	07ea      	lsls	r2, r5, #31
 800cb46:	d505      	bpl.n	800cb54 <_strtod_l+0x52c>
 800cb48:	9b04      	ldr	r3, [sp, #16]
 800cb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4e:	f7f3 fd53 	bl	80005f8 <__aeabi_dmul>
 800cb52:	2301      	movs	r3, #1
 800cb54:	9a04      	ldr	r2, [sp, #16]
 800cb56:	3208      	adds	r2, #8
 800cb58:	f10a 0a01 	add.w	sl, sl, #1
 800cb5c:	106d      	asrs	r5, r5, #1
 800cb5e:	9204      	str	r2, [sp, #16]
 800cb60:	e7cc      	b.n	800cafc <_strtod_l+0x4d4>
 800cb62:	d0ec      	beq.n	800cb3e <_strtod_l+0x516>
 800cb64:	426d      	negs	r5, r5
 800cb66:	f015 020f 	ands.w	r2, r5, #15
 800cb6a:	d00a      	beq.n	800cb82 <_strtod_l+0x55a>
 800cb6c:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <_strtod_l+0x58c>)
 800cb6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fe67 	bl	800084c <__aeabi_ddiv>
 800cb7e:	4680      	mov	r8, r0
 800cb80:	4689      	mov	r9, r1
 800cb82:	112d      	asrs	r5, r5, #4
 800cb84:	d0db      	beq.n	800cb3e <_strtod_l+0x516>
 800cb86:	2d1f      	cmp	r5, #31
 800cb88:	dd1e      	ble.n	800cbc8 <_strtod_l+0x5a0>
 800cb8a:	2500      	movs	r5, #0
 800cb8c:	46ab      	mov	fp, r5
 800cb8e:	9509      	str	r5, [sp, #36]	; 0x24
 800cb90:	9505      	str	r5, [sp, #20]
 800cb92:	2322      	movs	r3, #34	; 0x22
 800cb94:	f04f 0800 	mov.w	r8, #0
 800cb98:	f04f 0900 	mov.w	r9, #0
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	e78d      	b.n	800cabc <_strtod_l+0x494>
 800cba0:	0800f3c1 	.word	0x0800f3c1
 800cba4:	0800f5ec 	.word	0x0800f5ec
 800cba8:	0800f3b9 	.word	0x0800f3b9
 800cbac:	0800f3f0 	.word	0x0800f3f0
 800cbb0:	0800f77d 	.word	0x0800f77d
 800cbb4:	0800f500 	.word	0x0800f500
 800cbb8:	0800f4d8 	.word	0x0800f4d8
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	7ca00000 	.word	0x7ca00000
 800cbc4:	7fefffff 	.word	0x7fefffff
 800cbc8:	f015 0310 	ands.w	r3, r5, #16
 800cbcc:	bf18      	it	ne
 800cbce:	236a      	movne	r3, #106	; 0x6a
 800cbd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800cf74 <_strtod_l+0x94c>
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	2300      	movs	r3, #0
 800cbdc:	07ea      	lsls	r2, r5, #31
 800cbde:	d504      	bpl.n	800cbea <_strtod_l+0x5c2>
 800cbe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800cbe4:	f7f3 fd08 	bl	80005f8 <__aeabi_dmul>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	106d      	asrs	r5, r5, #1
 800cbec:	f10a 0a08 	add.w	sl, sl, #8
 800cbf0:	d1f4      	bne.n	800cbdc <_strtod_l+0x5b4>
 800cbf2:	b10b      	cbz	r3, 800cbf8 <_strtod_l+0x5d0>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	4689      	mov	r9, r1
 800cbf8:	9b04      	ldr	r3, [sp, #16]
 800cbfa:	b1bb      	cbz	r3, 800cc2c <_strtod_l+0x604>
 800cbfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cc00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	4649      	mov	r1, r9
 800cc08:	dd10      	ble.n	800cc2c <_strtod_l+0x604>
 800cc0a:	2b1f      	cmp	r3, #31
 800cc0c:	f340 811e 	ble.w	800ce4c <_strtod_l+0x824>
 800cc10:	2b34      	cmp	r3, #52	; 0x34
 800cc12:	bfde      	ittt	le
 800cc14:	f04f 33ff 	movle.w	r3, #4294967295
 800cc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc1c:	4093      	lslle	r3, r2
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	bfcc      	ite	gt
 800cc24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cc28:	ea03 0901 	andle.w	r9, r3, r1
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4640      	mov	r0, r8
 800cc32:	4649      	mov	r1, r9
 800cc34:	f7f3 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d1a6      	bne.n	800cb8a <_strtod_l+0x562>
 800cc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc42:	4633      	mov	r3, r6
 800cc44:	465a      	mov	r2, fp
 800cc46:	4620      	mov	r0, r4
 800cc48:	f7ff f8cc 	bl	800bde4 <__s2b>
 800cc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	f43f af2a 	beq.w	800caa8 <_strtod_l+0x480>
 800cc54:	9a08      	ldr	r2, [sp, #32]
 800cc56:	9b05      	ldr	r3, [sp, #20]
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	eba3 0307 	sub.w	r3, r3, r7
 800cc5e:	bfa8      	it	ge
 800cc60:	2300      	movge	r3, #0
 800cc62:	930c      	str	r3, [sp, #48]	; 0x30
 800cc64:	2500      	movs	r5, #0
 800cc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800cc6c:	46ab      	mov	fp, r5
 800cc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc70:	4620      	mov	r0, r4
 800cc72:	6859      	ldr	r1, [r3, #4]
 800cc74:	f7ff f80e 	bl	800bc94 <_Balloc>
 800cc78:	9005      	str	r0, [sp, #20]
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f43f af18 	beq.w	800cab0 <_strtod_l+0x488>
 800cc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc82:	691a      	ldr	r2, [r3, #16]
 800cc84:	3202      	adds	r2, #2
 800cc86:	f103 010c 	add.w	r1, r3, #12
 800cc8a:	0092      	lsls	r2, r2, #2
 800cc8c:	300c      	adds	r0, #12
 800cc8e:	f000 ff61 	bl	800db54 <memcpy>
 800cc92:	ec49 8b10 	vmov	d0, r8, r9
 800cc96:	aa18      	add	r2, sp, #96	; 0x60
 800cc98:	a917      	add	r1, sp, #92	; 0x5c
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f7ff fbd6 	bl	800c44c <__d2b>
 800cca0:	ec49 8b18 	vmov	d8, r8, r9
 800cca4:	9016      	str	r0, [sp, #88]	; 0x58
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f af02 	beq.w	800cab0 <_strtod_l+0x488>
 800ccac:	2101      	movs	r1, #1
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f7ff f930 	bl	800bf14 <__i2b>
 800ccb4:	4683      	mov	fp, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f aefa 	beq.w	800cab0 <_strtod_l+0x488>
 800ccbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ccbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	bfab      	itete	ge
 800ccc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ccc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ccc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ccca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ccce:	bfac      	ite	ge
 800ccd0:	eb06 0a03 	addge.w	sl, r6, r3
 800ccd4:	1b9f      	sublt	r7, r3, r6
 800ccd6:	9b04      	ldr	r3, [sp, #16]
 800ccd8:	1af6      	subs	r6, r6, r3
 800ccda:	4416      	add	r6, r2
 800ccdc:	4ba0      	ldr	r3, [pc, #640]	; (800cf60 <_strtod_l+0x938>)
 800ccde:	3e01      	subs	r6, #1
 800cce0:	429e      	cmp	r6, r3
 800cce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cce6:	f280 80c4 	bge.w	800ce72 <_strtod_l+0x84a>
 800ccea:	1b9b      	subs	r3, r3, r6
 800ccec:	2b1f      	cmp	r3, #31
 800ccee:	eba2 0203 	sub.w	r2, r2, r3
 800ccf2:	f04f 0101 	mov.w	r1, #1
 800ccf6:	f300 80b0 	bgt.w	800ce5a <_strtod_l+0x832>
 800ccfa:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfe:	930e      	str	r3, [sp, #56]	; 0x38
 800cd00:	2300      	movs	r3, #0
 800cd02:	930d      	str	r3, [sp, #52]	; 0x34
 800cd04:	eb0a 0602 	add.w	r6, sl, r2
 800cd08:	9b04      	ldr	r3, [sp, #16]
 800cd0a:	45b2      	cmp	sl, r6
 800cd0c:	4417      	add	r7, r2
 800cd0e:	441f      	add	r7, r3
 800cd10:	4653      	mov	r3, sl
 800cd12:	bfa8      	it	ge
 800cd14:	4633      	movge	r3, r6
 800cd16:	42bb      	cmp	r3, r7
 800cd18:	bfa8      	it	ge
 800cd1a:	463b      	movge	r3, r7
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bfc2      	ittt	gt
 800cd20:	1af6      	subgt	r6, r6, r3
 800cd22:	1aff      	subgt	r7, r7, r3
 800cd24:	ebaa 0a03 	subgt.w	sl, sl, r3
 800cd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dd17      	ble.n	800cd5e <_strtod_l+0x736>
 800cd2e:	4659      	mov	r1, fp
 800cd30:	461a      	mov	r2, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7ff f9ae 	bl	800c094 <__pow5mult>
 800cd38:	4683      	mov	fp, r0
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	f43f aeb8 	beq.w	800cab0 <_strtod_l+0x488>
 800cd40:	4601      	mov	r1, r0
 800cd42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7ff f8fb 	bl	800bf40 <__multiply>
 800cd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f aeaf 	beq.w	800cab0 <_strtod_l+0x488>
 800cd52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cd54:	4620      	mov	r0, r4
 800cd56:	f7fe ffdd 	bl	800bd14 <_Bfree>
 800cd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5c:	9316      	str	r3, [sp, #88]	; 0x58
 800cd5e:	2e00      	cmp	r6, #0
 800cd60:	f300 808c 	bgt.w	800ce7c <_strtod_l+0x854>
 800cd64:	9b08      	ldr	r3, [sp, #32]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	dd08      	ble.n	800cd7c <_strtod_l+0x754>
 800cd6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd6c:	9905      	ldr	r1, [sp, #20]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7ff f990 	bl	800c094 <__pow5mult>
 800cd74:	9005      	str	r0, [sp, #20]
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f43f ae9a 	beq.w	800cab0 <_strtod_l+0x488>
 800cd7c:	2f00      	cmp	r7, #0
 800cd7e:	dd08      	ble.n	800cd92 <_strtod_l+0x76a>
 800cd80:	9905      	ldr	r1, [sp, #20]
 800cd82:	463a      	mov	r2, r7
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7ff f9df 	bl	800c148 <__lshift>
 800cd8a:	9005      	str	r0, [sp, #20]
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	f43f ae8f 	beq.w	800cab0 <_strtod_l+0x488>
 800cd92:	f1ba 0f00 	cmp.w	sl, #0
 800cd96:	dd08      	ble.n	800cdaa <_strtod_l+0x782>
 800cd98:	4659      	mov	r1, fp
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f7ff f9d3 	bl	800c148 <__lshift>
 800cda2:	4683      	mov	fp, r0
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f43f ae83 	beq.w	800cab0 <_strtod_l+0x488>
 800cdaa:	9a05      	ldr	r2, [sp, #20]
 800cdac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7ff fa52 	bl	800c258 <__mdiff>
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f ae7a 	beq.w	800cab0 <_strtod_l+0x488>
 800cdbc:	68c3      	ldr	r3, [r0, #12]
 800cdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60c3      	str	r3, [r0, #12]
 800cdc4:	4659      	mov	r1, fp
 800cdc6:	f7ff fa2b 	bl	800c220 <__mcmp>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	da60      	bge.n	800ce90 <_strtod_l+0x868>
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	ea53 0308 	orrs.w	r3, r3, r8
 800cdd4:	f040 8084 	bne.w	800cee0 <_strtod_l+0x8b8>
 800cdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d17f      	bne.n	800cee0 <_strtod_l+0x8b8>
 800cde0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cde4:	0d1b      	lsrs	r3, r3, #20
 800cde6:	051b      	lsls	r3, r3, #20
 800cde8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cdec:	d978      	bls.n	800cee0 <_strtod_l+0x8b8>
 800cdee:	696b      	ldr	r3, [r5, #20]
 800cdf0:	b913      	cbnz	r3, 800cdf8 <_strtod_l+0x7d0>
 800cdf2:	692b      	ldr	r3, [r5, #16]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	dd73      	ble.n	800cee0 <_strtod_l+0x8b8>
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7ff f9a3 	bl	800c148 <__lshift>
 800ce02:	4659      	mov	r1, fp
 800ce04:	4605      	mov	r5, r0
 800ce06:	f7ff fa0b 	bl	800c220 <__mcmp>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	dd68      	ble.n	800cee0 <_strtod_l+0x8b8>
 800ce0e:	9904      	ldr	r1, [sp, #16]
 800ce10:	4a54      	ldr	r2, [pc, #336]	; (800cf64 <_strtod_l+0x93c>)
 800ce12:	464b      	mov	r3, r9
 800ce14:	2900      	cmp	r1, #0
 800ce16:	f000 8084 	beq.w	800cf22 <_strtod_l+0x8fa>
 800ce1a:	ea02 0109 	and.w	r1, r2, r9
 800ce1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce22:	dc7e      	bgt.n	800cf22 <_strtod_l+0x8fa>
 800ce24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce28:	f77f aeb3 	ble.w	800cb92 <_strtod_l+0x56a>
 800ce2c:	4b4e      	ldr	r3, [pc, #312]	; (800cf68 <_strtod_l+0x940>)
 800ce2e:	4640      	mov	r0, r8
 800ce30:	4649      	mov	r1, r9
 800ce32:	2200      	movs	r2, #0
 800ce34:	f7f3 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ce38:	4b4a      	ldr	r3, [pc, #296]	; (800cf64 <_strtod_l+0x93c>)
 800ce3a:	400b      	ands	r3, r1
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	4689      	mov	r9, r1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f47f ae3f 	bne.w	800cac4 <_strtod_l+0x49c>
 800ce46:	2322      	movs	r3, #34	; 0x22
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	e63b      	b.n	800cac4 <_strtod_l+0x49c>
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	ea03 0808 	and.w	r8, r3, r8
 800ce58:	e6e8      	b.n	800cc2c <_strtod_l+0x604>
 800ce5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ce5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ce62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ce66:	36e2      	adds	r6, #226	; 0xe2
 800ce68:	fa01 f306 	lsl.w	r3, r1, r6
 800ce6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ce70:	e748      	b.n	800cd04 <_strtod_l+0x6dc>
 800ce72:	2100      	movs	r1, #0
 800ce74:	2301      	movs	r3, #1
 800ce76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ce7a:	e743      	b.n	800cd04 <_strtod_l+0x6dc>
 800ce7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce7e:	4632      	mov	r2, r6
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7ff f961 	bl	800c148 <__lshift>
 800ce86:	9016      	str	r0, [sp, #88]	; 0x58
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	f47f af6b 	bne.w	800cd64 <_strtod_l+0x73c>
 800ce8e:	e60f      	b.n	800cab0 <_strtod_l+0x488>
 800ce90:	46ca      	mov	sl, r9
 800ce92:	d171      	bne.n	800cf78 <_strtod_l+0x950>
 800ce94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce9a:	b352      	cbz	r2, 800cef2 <_strtod_l+0x8ca>
 800ce9c:	4a33      	ldr	r2, [pc, #204]	; (800cf6c <_strtod_l+0x944>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d12a      	bne.n	800cef8 <_strtod_l+0x8d0>
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	4641      	mov	r1, r8
 800cea6:	b1fb      	cbz	r3, 800cee8 <_strtod_l+0x8c0>
 800cea8:	4b2e      	ldr	r3, [pc, #184]	; (800cf64 <_strtod_l+0x93c>)
 800ceaa:	ea09 0303 	and.w	r3, r9, r3
 800ceae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ceb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb6:	d81a      	bhi.n	800ceee <_strtod_l+0x8c6>
 800ceb8:	0d1b      	lsrs	r3, r3, #20
 800ceba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cebe:	fa02 f303 	lsl.w	r3, r2, r3
 800cec2:	4299      	cmp	r1, r3
 800cec4:	d118      	bne.n	800cef8 <_strtod_l+0x8d0>
 800cec6:	4b2a      	ldr	r3, [pc, #168]	; (800cf70 <_strtod_l+0x948>)
 800cec8:	459a      	cmp	sl, r3
 800ceca:	d102      	bne.n	800ced2 <_strtod_l+0x8aa>
 800cecc:	3101      	adds	r1, #1
 800cece:	f43f adef 	beq.w	800cab0 <_strtod_l+0x488>
 800ced2:	4b24      	ldr	r3, [pc, #144]	; (800cf64 <_strtod_l+0x93c>)
 800ced4:	ea0a 0303 	and.w	r3, sl, r3
 800ced8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cedc:	f04f 0800 	mov.w	r8, #0
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1a2      	bne.n	800ce2c <_strtod_l+0x804>
 800cee6:	e5ed      	b.n	800cac4 <_strtod_l+0x49c>
 800cee8:	f04f 33ff 	mov.w	r3, #4294967295
 800ceec:	e7e9      	b.n	800cec2 <_strtod_l+0x89a>
 800ceee:	4613      	mov	r3, r2
 800cef0:	e7e7      	b.n	800cec2 <_strtod_l+0x89a>
 800cef2:	ea53 0308 	orrs.w	r3, r3, r8
 800cef6:	d08a      	beq.n	800ce0e <_strtod_l+0x7e6>
 800cef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cefa:	b1e3      	cbz	r3, 800cf36 <_strtod_l+0x90e>
 800cefc:	ea13 0f0a 	tst.w	r3, sl
 800cf00:	d0ee      	beq.n	800cee0 <_strtod_l+0x8b8>
 800cf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf04:	9a04      	ldr	r2, [sp, #16]
 800cf06:	4640      	mov	r0, r8
 800cf08:	4649      	mov	r1, r9
 800cf0a:	b1c3      	cbz	r3, 800cf3e <_strtod_l+0x916>
 800cf0c:	f7ff fb6f 	bl	800c5ee <sulp>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	ec51 0b18 	vmov	r0, r1, d8
 800cf18:	f7f3 f9b8 	bl	800028c <__adddf3>
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4689      	mov	r9, r1
 800cf20:	e7de      	b.n	800cee0 <_strtod_l+0x8b8>
 800cf22:	4013      	ands	r3, r2
 800cf24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cf2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cf30:	f04f 38ff 	mov.w	r8, #4294967295
 800cf34:	e7d4      	b.n	800cee0 <_strtod_l+0x8b8>
 800cf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf38:	ea13 0f08 	tst.w	r3, r8
 800cf3c:	e7e0      	b.n	800cf00 <_strtod_l+0x8d8>
 800cf3e:	f7ff fb56 	bl	800c5ee <sulp>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	ec51 0b18 	vmov	r0, r1, d8
 800cf4a:	f7f3 f99d 	bl	8000288 <__aeabi_dsub>
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2300      	movs	r3, #0
 800cf52:	4680      	mov	r8, r0
 800cf54:	4689      	mov	r9, r1
 800cf56:	f7f3 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d0c0      	beq.n	800cee0 <_strtod_l+0x8b8>
 800cf5e:	e618      	b.n	800cb92 <_strtod_l+0x56a>
 800cf60:	fffffc02 	.word	0xfffffc02
 800cf64:	7ff00000 	.word	0x7ff00000
 800cf68:	39500000 	.word	0x39500000
 800cf6c:	000fffff 	.word	0x000fffff
 800cf70:	7fefffff 	.word	0x7fefffff
 800cf74:	0800f600 	.word	0x0800f600
 800cf78:	4659      	mov	r1, fp
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	f7ff fac0 	bl	800c500 <__ratio>
 800cf80:	ec57 6b10 	vmov	r6, r7, d0
 800cf84:	ee10 0a10 	vmov	r0, s0
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fdae 	bl	8000af0 <__aeabi_dcmple>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d071      	beq.n	800d07c <_strtod_l+0xa54>
 800cf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d17c      	bne.n	800d098 <_strtod_l+0xa70>
 800cf9e:	f1b8 0f00 	cmp.w	r8, #0
 800cfa2:	d15a      	bne.n	800d05a <_strtod_l+0xa32>
 800cfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d15d      	bne.n	800d068 <_strtod_l+0xa40>
 800cfac:	4b90      	ldr	r3, [pc, #576]	; (800d1f0 <_strtod_l+0xbc8>)
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	f7f3 fd92 	bl	8000adc <__aeabi_dcmplt>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d15c      	bne.n	800d076 <_strtod_l+0xa4e>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	4b8c      	ldr	r3, [pc, #560]	; (800d1f4 <_strtod_l+0xbcc>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f7f3 fb18 	bl	80005f8 <__aeabi_dmul>
 800cfc8:	4606      	mov	r6, r0
 800cfca:	460f      	mov	r7, r1
 800cfcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cfd0:	9606      	str	r6, [sp, #24]
 800cfd2:	9307      	str	r3, [sp, #28]
 800cfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cfdc:	4b86      	ldr	r3, [pc, #536]	; (800d1f8 <_strtod_l+0xbd0>)
 800cfde:	ea0a 0303 	and.w	r3, sl, r3
 800cfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800cfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfe6:	4b85      	ldr	r3, [pc, #532]	; (800d1fc <_strtod_l+0xbd4>)
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	f040 8090 	bne.w	800d10e <_strtod_l+0xae6>
 800cfee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800cff2:	ec49 8b10 	vmov	d0, r8, r9
 800cff6:	f7ff f9b9 	bl	800c36c <__ulp>
 800cffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cffe:	ec51 0b10 	vmov	r0, r1, d0
 800d002:	f7f3 faf9 	bl	80005f8 <__aeabi_dmul>
 800d006:	4642      	mov	r2, r8
 800d008:	464b      	mov	r3, r9
 800d00a:	f7f3 f93f 	bl	800028c <__adddf3>
 800d00e:	460b      	mov	r3, r1
 800d010:	4979      	ldr	r1, [pc, #484]	; (800d1f8 <_strtod_l+0xbd0>)
 800d012:	4a7b      	ldr	r2, [pc, #492]	; (800d200 <_strtod_l+0xbd8>)
 800d014:	4019      	ands	r1, r3
 800d016:	4291      	cmp	r1, r2
 800d018:	4680      	mov	r8, r0
 800d01a:	d944      	bls.n	800d0a6 <_strtod_l+0xa7e>
 800d01c:	ee18 2a90 	vmov	r2, s17
 800d020:	4b78      	ldr	r3, [pc, #480]	; (800d204 <_strtod_l+0xbdc>)
 800d022:	429a      	cmp	r2, r3
 800d024:	d104      	bne.n	800d030 <_strtod_l+0xa08>
 800d026:	ee18 3a10 	vmov	r3, s16
 800d02a:	3301      	adds	r3, #1
 800d02c:	f43f ad40 	beq.w	800cab0 <_strtod_l+0x488>
 800d030:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d204 <_strtod_l+0xbdc>
 800d034:	f04f 38ff 	mov.w	r8, #4294967295
 800d038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7fe fe6a 	bl	800bd14 <_Bfree>
 800d040:	9905      	ldr	r1, [sp, #20]
 800d042:	4620      	mov	r0, r4
 800d044:	f7fe fe66 	bl	800bd14 <_Bfree>
 800d048:	4659      	mov	r1, fp
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7fe fe62 	bl	800bd14 <_Bfree>
 800d050:	4629      	mov	r1, r5
 800d052:	4620      	mov	r0, r4
 800d054:	f7fe fe5e 	bl	800bd14 <_Bfree>
 800d058:	e609      	b.n	800cc6e <_strtod_l+0x646>
 800d05a:	f1b8 0f01 	cmp.w	r8, #1
 800d05e:	d103      	bne.n	800d068 <_strtod_l+0xa40>
 800d060:	f1b9 0f00 	cmp.w	r9, #0
 800d064:	f43f ad95 	beq.w	800cb92 <_strtod_l+0x56a>
 800d068:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d1c0 <_strtod_l+0xb98>
 800d06c:	4f60      	ldr	r7, [pc, #384]	; (800d1f0 <_strtod_l+0xbc8>)
 800d06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d072:	2600      	movs	r6, #0
 800d074:	e7ae      	b.n	800cfd4 <_strtod_l+0x9ac>
 800d076:	4f5f      	ldr	r7, [pc, #380]	; (800d1f4 <_strtod_l+0xbcc>)
 800d078:	2600      	movs	r6, #0
 800d07a:	e7a7      	b.n	800cfcc <_strtod_l+0x9a4>
 800d07c:	4b5d      	ldr	r3, [pc, #372]	; (800d1f4 <_strtod_l+0xbcc>)
 800d07e:	4630      	mov	r0, r6
 800d080:	4639      	mov	r1, r7
 800d082:	2200      	movs	r2, #0
 800d084:	f7f3 fab8 	bl	80005f8 <__aeabi_dmul>
 800d088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d09c      	beq.n	800cfcc <_strtod_l+0x9a4>
 800d092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d096:	e79d      	b.n	800cfd4 <_strtod_l+0x9ac>
 800d098:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d1c8 <_strtod_l+0xba0>
 800d09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0a0:	ec57 6b17 	vmov	r6, r7, d7
 800d0a4:	e796      	b.n	800cfd4 <_strtod_l+0x9ac>
 800d0a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d0aa:	9b04      	ldr	r3, [sp, #16]
 800d0ac:	46ca      	mov	sl, r9
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1c2      	bne.n	800d038 <_strtod_l+0xa10>
 800d0b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0b8:	0d1b      	lsrs	r3, r3, #20
 800d0ba:	051b      	lsls	r3, r3, #20
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d1bb      	bne.n	800d038 <_strtod_l+0xa10>
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	f7f3 fde0 	bl	8000c88 <__aeabi_d2lz>
 800d0c8:	f7f3 fa68 	bl	800059c <__aeabi_l2d>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 f8d8 	bl	8000288 <__aeabi_dsub>
 800d0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0de:	ea43 0308 	orr.w	r3, r3, r8
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	d054      	beq.n	800d194 <_strtod_l+0xb6c>
 800d0ea:	a339      	add	r3, pc, #228	; (adr r3, 800d1d0 <_strtod_l+0xba8>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7f3 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	f47f ace5 	bne.w	800cac4 <_strtod_l+0x49c>
 800d0fa:	a337      	add	r3, pc, #220	; (adr r3, 800d1d8 <_strtod_l+0xbb0>)
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	4630      	mov	r0, r6
 800d102:	4639      	mov	r1, r7
 800d104:	f7f3 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d095      	beq.n	800d038 <_strtod_l+0xa10>
 800d10c:	e4da      	b.n	800cac4 <_strtod_l+0x49c>
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	b333      	cbz	r3, 800d160 <_strtod_l+0xb38>
 800d112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d118:	d822      	bhi.n	800d160 <_strtod_l+0xb38>
 800d11a:	a331      	add	r3, pc, #196	; (adr r3, 800d1e0 <_strtod_l+0xbb8>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	4630      	mov	r0, r6
 800d122:	4639      	mov	r1, r7
 800d124:	f7f3 fce4 	bl	8000af0 <__aeabi_dcmple>
 800d128:	b1a0      	cbz	r0, 800d154 <_strtod_l+0xb2c>
 800d12a:	4639      	mov	r1, r7
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7f3 fd3b 	bl	8000ba8 <__aeabi_d2uiz>
 800d132:	2801      	cmp	r0, #1
 800d134:	bf38      	it	cc
 800d136:	2001      	movcc	r0, #1
 800d138:	f7f3 f9e4 	bl	8000504 <__aeabi_ui2d>
 800d13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d13e:	4606      	mov	r6, r0
 800d140:	460f      	mov	r7, r1
 800d142:	bb23      	cbnz	r3, 800d18e <_strtod_l+0xb66>
 800d144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d148:	9010      	str	r0, [sp, #64]	; 0x40
 800d14a:	9311      	str	r3, [sp, #68]	; 0x44
 800d14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d15c:	1a9b      	subs	r3, r3, r2
 800d15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d164:	eeb0 0a48 	vmov.f32	s0, s16
 800d168:	eef0 0a68 	vmov.f32	s1, s17
 800d16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d170:	f7ff f8fc 	bl	800c36c <__ulp>
 800d174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d178:	ec53 2b10 	vmov	r2, r3, d0
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	ec53 2b18 	vmov	r2, r3, d8
 800d184:	f7f3 f882 	bl	800028c <__adddf3>
 800d188:	4680      	mov	r8, r0
 800d18a:	4689      	mov	r9, r1
 800d18c:	e78d      	b.n	800d0aa <_strtod_l+0xa82>
 800d18e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d192:	e7db      	b.n	800d14c <_strtod_l+0xb24>
 800d194:	a314      	add	r3, pc, #80	; (adr r3, 800d1e8 <_strtod_l+0xbc0>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f7f3 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800d19e:	e7b3      	b.n	800d108 <_strtod_l+0xae0>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	f7ff ba7c 	b.w	800c6a6 <_strtod_l+0x7e>
 800d1ae:	2a65      	cmp	r2, #101	; 0x65
 800d1b0:	f43f ab75 	beq.w	800c89e <_strtod_l+0x276>
 800d1b4:	2a45      	cmp	r2, #69	; 0x45
 800d1b6:	f43f ab72 	beq.w	800c89e <_strtod_l+0x276>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f7ff bbaa 	b.w	800c914 <_strtod_l+0x2ec>
 800d1c0:	00000000 	.word	0x00000000
 800d1c4:	bff00000 	.word	0xbff00000
 800d1c8:	00000000 	.word	0x00000000
 800d1cc:	3ff00000 	.word	0x3ff00000
 800d1d0:	94a03595 	.word	0x94a03595
 800d1d4:	3fdfffff 	.word	0x3fdfffff
 800d1d8:	35afe535 	.word	0x35afe535
 800d1dc:	3fe00000 	.word	0x3fe00000
 800d1e0:	ffc00000 	.word	0xffc00000
 800d1e4:	41dfffff 	.word	0x41dfffff
 800d1e8:	94a03595 	.word	0x94a03595
 800d1ec:	3fcfffff 	.word	0x3fcfffff
 800d1f0:	3ff00000 	.word	0x3ff00000
 800d1f4:	3fe00000 	.word	0x3fe00000
 800d1f8:	7ff00000 	.word	0x7ff00000
 800d1fc:	7fe00000 	.word	0x7fe00000
 800d200:	7c9fffff 	.word	0x7c9fffff
 800d204:	7fefffff 	.word	0x7fefffff

0800d208 <_strtod_r>:
 800d208:	4b01      	ldr	r3, [pc, #4]	; (800d210 <_strtod_r+0x8>)
 800d20a:	f7ff ba0d 	b.w	800c628 <_strtod_l>
 800d20e:	bf00      	nop
 800d210:	20000070 	.word	0x20000070

0800d214 <_strtol_l.constprop.0>:
 800d214:	2b01      	cmp	r3, #1
 800d216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21a:	d001      	beq.n	800d220 <_strtol_l.constprop.0+0xc>
 800d21c:	2b24      	cmp	r3, #36	; 0x24
 800d21e:	d906      	bls.n	800d22e <_strtol_l.constprop.0+0x1a>
 800d220:	f7fd fd8c 	bl	800ad3c <__errno>
 800d224:	2316      	movs	r3, #22
 800d226:	6003      	str	r3, [r0, #0]
 800d228:	2000      	movs	r0, #0
 800d22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d314 <_strtol_l.constprop.0+0x100>
 800d232:	460d      	mov	r5, r1
 800d234:	462e      	mov	r6, r5
 800d236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d23a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d23e:	f017 0708 	ands.w	r7, r7, #8
 800d242:	d1f7      	bne.n	800d234 <_strtol_l.constprop.0+0x20>
 800d244:	2c2d      	cmp	r4, #45	; 0x2d
 800d246:	d132      	bne.n	800d2ae <_strtol_l.constprop.0+0x9a>
 800d248:	782c      	ldrb	r4, [r5, #0]
 800d24a:	2701      	movs	r7, #1
 800d24c:	1cb5      	adds	r5, r6, #2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d05b      	beq.n	800d30a <_strtol_l.constprop.0+0xf6>
 800d252:	2b10      	cmp	r3, #16
 800d254:	d109      	bne.n	800d26a <_strtol_l.constprop.0+0x56>
 800d256:	2c30      	cmp	r4, #48	; 0x30
 800d258:	d107      	bne.n	800d26a <_strtol_l.constprop.0+0x56>
 800d25a:	782c      	ldrb	r4, [r5, #0]
 800d25c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d260:	2c58      	cmp	r4, #88	; 0x58
 800d262:	d14d      	bne.n	800d300 <_strtol_l.constprop.0+0xec>
 800d264:	786c      	ldrb	r4, [r5, #1]
 800d266:	2310      	movs	r3, #16
 800d268:	3502      	adds	r5, #2
 800d26a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d26e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d272:	f04f 0e00 	mov.w	lr, #0
 800d276:	fbb8 f9f3 	udiv	r9, r8, r3
 800d27a:	4676      	mov	r6, lr
 800d27c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d284:	f1bc 0f09 	cmp.w	ip, #9
 800d288:	d816      	bhi.n	800d2b8 <_strtol_l.constprop.0+0xa4>
 800d28a:	4664      	mov	r4, ip
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	dd24      	ble.n	800d2da <_strtol_l.constprop.0+0xc6>
 800d290:	f1be 3fff 	cmp.w	lr, #4294967295
 800d294:	d008      	beq.n	800d2a8 <_strtol_l.constprop.0+0x94>
 800d296:	45b1      	cmp	r9, r6
 800d298:	d31c      	bcc.n	800d2d4 <_strtol_l.constprop.0+0xc0>
 800d29a:	d101      	bne.n	800d2a0 <_strtol_l.constprop.0+0x8c>
 800d29c:	45a2      	cmp	sl, r4
 800d29e:	db19      	blt.n	800d2d4 <_strtol_l.constprop.0+0xc0>
 800d2a0:	fb06 4603 	mla	r6, r6, r3, r4
 800d2a4:	f04f 0e01 	mov.w	lr, #1
 800d2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2ac:	e7e8      	b.n	800d280 <_strtol_l.constprop.0+0x6c>
 800d2ae:	2c2b      	cmp	r4, #43	; 0x2b
 800d2b0:	bf04      	itt	eq
 800d2b2:	782c      	ldrbeq	r4, [r5, #0]
 800d2b4:	1cb5      	addeq	r5, r6, #2
 800d2b6:	e7ca      	b.n	800d24e <_strtol_l.constprop.0+0x3a>
 800d2b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d2bc:	f1bc 0f19 	cmp.w	ip, #25
 800d2c0:	d801      	bhi.n	800d2c6 <_strtol_l.constprop.0+0xb2>
 800d2c2:	3c37      	subs	r4, #55	; 0x37
 800d2c4:	e7e2      	b.n	800d28c <_strtol_l.constprop.0+0x78>
 800d2c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d2ca:	f1bc 0f19 	cmp.w	ip, #25
 800d2ce:	d804      	bhi.n	800d2da <_strtol_l.constprop.0+0xc6>
 800d2d0:	3c57      	subs	r4, #87	; 0x57
 800d2d2:	e7db      	b.n	800d28c <_strtol_l.constprop.0+0x78>
 800d2d4:	f04f 3eff 	mov.w	lr, #4294967295
 800d2d8:	e7e6      	b.n	800d2a8 <_strtol_l.constprop.0+0x94>
 800d2da:	f1be 3fff 	cmp.w	lr, #4294967295
 800d2de:	d105      	bne.n	800d2ec <_strtol_l.constprop.0+0xd8>
 800d2e0:	2322      	movs	r3, #34	; 0x22
 800d2e2:	6003      	str	r3, [r0, #0]
 800d2e4:	4646      	mov	r6, r8
 800d2e6:	b942      	cbnz	r2, 800d2fa <_strtol_l.constprop.0+0xe6>
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	e79e      	b.n	800d22a <_strtol_l.constprop.0+0x16>
 800d2ec:	b107      	cbz	r7, 800d2f0 <_strtol_l.constprop.0+0xdc>
 800d2ee:	4276      	negs	r6, r6
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d0f9      	beq.n	800d2e8 <_strtol_l.constprop.0+0xd4>
 800d2f4:	f1be 0f00 	cmp.w	lr, #0
 800d2f8:	d000      	beq.n	800d2fc <_strtol_l.constprop.0+0xe8>
 800d2fa:	1e69      	subs	r1, r5, #1
 800d2fc:	6011      	str	r1, [r2, #0]
 800d2fe:	e7f3      	b.n	800d2e8 <_strtol_l.constprop.0+0xd4>
 800d300:	2430      	movs	r4, #48	; 0x30
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1b1      	bne.n	800d26a <_strtol_l.constprop.0+0x56>
 800d306:	2308      	movs	r3, #8
 800d308:	e7af      	b.n	800d26a <_strtol_l.constprop.0+0x56>
 800d30a:	2c30      	cmp	r4, #48	; 0x30
 800d30c:	d0a5      	beq.n	800d25a <_strtol_l.constprop.0+0x46>
 800d30e:	230a      	movs	r3, #10
 800d310:	e7ab      	b.n	800d26a <_strtol_l.constprop.0+0x56>
 800d312:	bf00      	nop
 800d314:	0800f629 	.word	0x0800f629

0800d318 <_strtol_r>:
 800d318:	f7ff bf7c 	b.w	800d214 <_strtol_l.constprop.0>

0800d31c <__ssputs_r>:
 800d31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d320:	688e      	ldr	r6, [r1, #8]
 800d322:	461f      	mov	r7, r3
 800d324:	42be      	cmp	r6, r7
 800d326:	680b      	ldr	r3, [r1, #0]
 800d328:	4682      	mov	sl, r0
 800d32a:	460c      	mov	r4, r1
 800d32c:	4690      	mov	r8, r2
 800d32e:	d82c      	bhi.n	800d38a <__ssputs_r+0x6e>
 800d330:	898a      	ldrh	r2, [r1, #12]
 800d332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d336:	d026      	beq.n	800d386 <__ssputs_r+0x6a>
 800d338:	6965      	ldr	r5, [r4, #20]
 800d33a:	6909      	ldr	r1, [r1, #16]
 800d33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d340:	eba3 0901 	sub.w	r9, r3, r1
 800d344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d348:	1c7b      	adds	r3, r7, #1
 800d34a:	444b      	add	r3, r9
 800d34c:	106d      	asrs	r5, r5, #1
 800d34e:	429d      	cmp	r5, r3
 800d350:	bf38      	it	cc
 800d352:	461d      	movcc	r5, r3
 800d354:	0553      	lsls	r3, r2, #21
 800d356:	d527      	bpl.n	800d3a8 <__ssputs_r+0x8c>
 800d358:	4629      	mov	r1, r5
 800d35a:	f7fe fc0f 	bl	800bb7c <_malloc_r>
 800d35e:	4606      	mov	r6, r0
 800d360:	b360      	cbz	r0, 800d3bc <__ssputs_r+0xa0>
 800d362:	6921      	ldr	r1, [r4, #16]
 800d364:	464a      	mov	r2, r9
 800d366:	f000 fbf5 	bl	800db54 <memcpy>
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	6126      	str	r6, [r4, #16]
 800d378:	6165      	str	r5, [r4, #20]
 800d37a:	444e      	add	r6, r9
 800d37c:	eba5 0509 	sub.w	r5, r5, r9
 800d380:	6026      	str	r6, [r4, #0]
 800d382:	60a5      	str	r5, [r4, #8]
 800d384:	463e      	mov	r6, r7
 800d386:	42be      	cmp	r6, r7
 800d388:	d900      	bls.n	800d38c <__ssputs_r+0x70>
 800d38a:	463e      	mov	r6, r7
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	4632      	mov	r2, r6
 800d390:	4641      	mov	r1, r8
 800d392:	f000 fba3 	bl	800dadc <memmove>
 800d396:	68a3      	ldr	r3, [r4, #8]
 800d398:	1b9b      	subs	r3, r3, r6
 800d39a:	60a3      	str	r3, [r4, #8]
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	4433      	add	r3, r6
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	462a      	mov	r2, r5
 800d3aa:	f000 ff86 	bl	800e2ba <_realloc_r>
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d1e0      	bne.n	800d376 <__ssputs_r+0x5a>
 800d3b4:	6921      	ldr	r1, [r4, #16]
 800d3b6:	4650      	mov	r0, sl
 800d3b8:	f7fe fb6c 	bl	800ba94 <_free_r>
 800d3bc:	230c      	movs	r3, #12
 800d3be:	f8ca 3000 	str.w	r3, [sl]
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ce:	e7e9      	b.n	800d3a4 <__ssputs_r+0x88>

0800d3d0 <_svfiprintf_r>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	4698      	mov	r8, r3
 800d3d6:	898b      	ldrh	r3, [r1, #12]
 800d3d8:	061b      	lsls	r3, r3, #24
 800d3da:	b09d      	sub	sp, #116	; 0x74
 800d3dc:	4607      	mov	r7, r0
 800d3de:	460d      	mov	r5, r1
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	d50e      	bpl.n	800d402 <_svfiprintf_r+0x32>
 800d3e4:	690b      	ldr	r3, [r1, #16]
 800d3e6:	b963      	cbnz	r3, 800d402 <_svfiprintf_r+0x32>
 800d3e8:	2140      	movs	r1, #64	; 0x40
 800d3ea:	f7fe fbc7 	bl	800bb7c <_malloc_r>
 800d3ee:	6028      	str	r0, [r5, #0]
 800d3f0:	6128      	str	r0, [r5, #16]
 800d3f2:	b920      	cbnz	r0, 800d3fe <_svfiprintf_r+0x2e>
 800d3f4:	230c      	movs	r3, #12
 800d3f6:	603b      	str	r3, [r7, #0]
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fc:	e0d0      	b.n	800d5a0 <_svfiprintf_r+0x1d0>
 800d3fe:	2340      	movs	r3, #64	; 0x40
 800d400:	616b      	str	r3, [r5, #20]
 800d402:	2300      	movs	r3, #0
 800d404:	9309      	str	r3, [sp, #36]	; 0x24
 800d406:	2320      	movs	r3, #32
 800d408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d410:	2330      	movs	r3, #48	; 0x30
 800d412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5b8 <_svfiprintf_r+0x1e8>
 800d416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d41a:	f04f 0901 	mov.w	r9, #1
 800d41e:	4623      	mov	r3, r4
 800d420:	469a      	mov	sl, r3
 800d422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d426:	b10a      	cbz	r2, 800d42c <_svfiprintf_r+0x5c>
 800d428:	2a25      	cmp	r2, #37	; 0x25
 800d42a:	d1f9      	bne.n	800d420 <_svfiprintf_r+0x50>
 800d42c:	ebba 0b04 	subs.w	fp, sl, r4
 800d430:	d00b      	beq.n	800d44a <_svfiprintf_r+0x7a>
 800d432:	465b      	mov	r3, fp
 800d434:	4622      	mov	r2, r4
 800d436:	4629      	mov	r1, r5
 800d438:	4638      	mov	r0, r7
 800d43a:	f7ff ff6f 	bl	800d31c <__ssputs_r>
 800d43e:	3001      	adds	r0, #1
 800d440:	f000 80a9 	beq.w	800d596 <_svfiprintf_r+0x1c6>
 800d444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d446:	445a      	add	r2, fp
 800d448:	9209      	str	r2, [sp, #36]	; 0x24
 800d44a:	f89a 3000 	ldrb.w	r3, [sl]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 80a1 	beq.w	800d596 <_svfiprintf_r+0x1c6>
 800d454:	2300      	movs	r3, #0
 800d456:	f04f 32ff 	mov.w	r2, #4294967295
 800d45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d45e:	f10a 0a01 	add.w	sl, sl, #1
 800d462:	9304      	str	r3, [sp, #16]
 800d464:	9307      	str	r3, [sp, #28]
 800d466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d46a:	931a      	str	r3, [sp, #104]	; 0x68
 800d46c:	4654      	mov	r4, sl
 800d46e:	2205      	movs	r2, #5
 800d470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d474:	4850      	ldr	r0, [pc, #320]	; (800d5b8 <_svfiprintf_r+0x1e8>)
 800d476:	f7f2 feab 	bl	80001d0 <memchr>
 800d47a:	9a04      	ldr	r2, [sp, #16]
 800d47c:	b9d8      	cbnz	r0, 800d4b6 <_svfiprintf_r+0xe6>
 800d47e:	06d0      	lsls	r0, r2, #27
 800d480:	bf44      	itt	mi
 800d482:	2320      	movmi	r3, #32
 800d484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d488:	0711      	lsls	r1, r2, #28
 800d48a:	bf44      	itt	mi
 800d48c:	232b      	movmi	r3, #43	; 0x2b
 800d48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b2a      	cmp	r3, #42	; 0x2a
 800d498:	d015      	beq.n	800d4c6 <_svfiprintf_r+0xf6>
 800d49a:	9a07      	ldr	r2, [sp, #28]
 800d49c:	4654      	mov	r4, sl
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f04f 0c0a 	mov.w	ip, #10
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4aa:	3b30      	subs	r3, #48	; 0x30
 800d4ac:	2b09      	cmp	r3, #9
 800d4ae:	d94d      	bls.n	800d54c <_svfiprintf_r+0x17c>
 800d4b0:	b1b0      	cbz	r0, 800d4e0 <_svfiprintf_r+0x110>
 800d4b2:	9207      	str	r2, [sp, #28]
 800d4b4:	e014      	b.n	800d4e0 <_svfiprintf_r+0x110>
 800d4b6:	eba0 0308 	sub.w	r3, r0, r8
 800d4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	46a2      	mov	sl, r4
 800d4c4:	e7d2      	b.n	800d46c <_svfiprintf_r+0x9c>
 800d4c6:	9b03      	ldr	r3, [sp, #12]
 800d4c8:	1d19      	adds	r1, r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	bfbb      	ittet	lt
 800d4d2:	425b      	neglt	r3, r3
 800d4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d8:	9307      	strge	r3, [sp, #28]
 800d4da:	9307      	strlt	r3, [sp, #28]
 800d4dc:	bfb8      	it	lt
 800d4de:	9204      	strlt	r2, [sp, #16]
 800d4e0:	7823      	ldrb	r3, [r4, #0]
 800d4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4e4:	d10c      	bne.n	800d500 <_svfiprintf_r+0x130>
 800d4e6:	7863      	ldrb	r3, [r4, #1]
 800d4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ea:	d134      	bne.n	800d556 <_svfiprintf_r+0x186>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	1d1a      	adds	r2, r3, #4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	9203      	str	r2, [sp, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	bfb8      	it	lt
 800d4f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4fc:	3402      	adds	r4, #2
 800d4fe:	9305      	str	r3, [sp, #20]
 800d500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d5c8 <_svfiprintf_r+0x1f8>
 800d504:	7821      	ldrb	r1, [r4, #0]
 800d506:	2203      	movs	r2, #3
 800d508:	4650      	mov	r0, sl
 800d50a:	f7f2 fe61 	bl	80001d0 <memchr>
 800d50e:	b138      	cbz	r0, 800d520 <_svfiprintf_r+0x150>
 800d510:	9b04      	ldr	r3, [sp, #16]
 800d512:	eba0 000a 	sub.w	r0, r0, sl
 800d516:	2240      	movs	r2, #64	; 0x40
 800d518:	4082      	lsls	r2, r0
 800d51a:	4313      	orrs	r3, r2
 800d51c:	3401      	adds	r4, #1
 800d51e:	9304      	str	r3, [sp, #16]
 800d520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d524:	4825      	ldr	r0, [pc, #148]	; (800d5bc <_svfiprintf_r+0x1ec>)
 800d526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d52a:	2206      	movs	r2, #6
 800d52c:	f7f2 fe50 	bl	80001d0 <memchr>
 800d530:	2800      	cmp	r0, #0
 800d532:	d038      	beq.n	800d5a6 <_svfiprintf_r+0x1d6>
 800d534:	4b22      	ldr	r3, [pc, #136]	; (800d5c0 <_svfiprintf_r+0x1f0>)
 800d536:	bb1b      	cbnz	r3, 800d580 <_svfiprintf_r+0x1b0>
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	3307      	adds	r3, #7
 800d53c:	f023 0307 	bic.w	r3, r3, #7
 800d540:	3308      	adds	r3, #8
 800d542:	9303      	str	r3, [sp, #12]
 800d544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d546:	4433      	add	r3, r6
 800d548:	9309      	str	r3, [sp, #36]	; 0x24
 800d54a:	e768      	b.n	800d41e <_svfiprintf_r+0x4e>
 800d54c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d550:	460c      	mov	r4, r1
 800d552:	2001      	movs	r0, #1
 800d554:	e7a6      	b.n	800d4a4 <_svfiprintf_r+0xd4>
 800d556:	2300      	movs	r3, #0
 800d558:	3401      	adds	r4, #1
 800d55a:	9305      	str	r3, [sp, #20]
 800d55c:	4619      	mov	r1, r3
 800d55e:	f04f 0c0a 	mov.w	ip, #10
 800d562:	4620      	mov	r0, r4
 800d564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d568:	3a30      	subs	r2, #48	; 0x30
 800d56a:	2a09      	cmp	r2, #9
 800d56c:	d903      	bls.n	800d576 <_svfiprintf_r+0x1a6>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0c6      	beq.n	800d500 <_svfiprintf_r+0x130>
 800d572:	9105      	str	r1, [sp, #20]
 800d574:	e7c4      	b.n	800d500 <_svfiprintf_r+0x130>
 800d576:	fb0c 2101 	mla	r1, ip, r1, r2
 800d57a:	4604      	mov	r4, r0
 800d57c:	2301      	movs	r3, #1
 800d57e:	e7f0      	b.n	800d562 <_svfiprintf_r+0x192>
 800d580:	ab03      	add	r3, sp, #12
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	462a      	mov	r2, r5
 800d586:	4b0f      	ldr	r3, [pc, #60]	; (800d5c4 <_svfiprintf_r+0x1f4>)
 800d588:	a904      	add	r1, sp, #16
 800d58a:	4638      	mov	r0, r7
 800d58c:	f7fc fc88 	bl	8009ea0 <_printf_float>
 800d590:	1c42      	adds	r2, r0, #1
 800d592:	4606      	mov	r6, r0
 800d594:	d1d6      	bne.n	800d544 <_svfiprintf_r+0x174>
 800d596:	89ab      	ldrh	r3, [r5, #12]
 800d598:	065b      	lsls	r3, r3, #25
 800d59a:	f53f af2d 	bmi.w	800d3f8 <_svfiprintf_r+0x28>
 800d59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5a0:	b01d      	add	sp, #116	; 0x74
 800d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a6:	ab03      	add	r3, sp, #12
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	462a      	mov	r2, r5
 800d5ac:	4b05      	ldr	r3, [pc, #20]	; (800d5c4 <_svfiprintf_r+0x1f4>)
 800d5ae:	a904      	add	r1, sp, #16
 800d5b0:	4638      	mov	r0, r7
 800d5b2:	f7fc ff19 	bl	800a3e8 <_printf_i>
 800d5b6:	e7eb      	b.n	800d590 <_svfiprintf_r+0x1c0>
 800d5b8:	0800f729 	.word	0x0800f729
 800d5bc:	0800f733 	.word	0x0800f733
 800d5c0:	08009ea1 	.word	0x08009ea1
 800d5c4:	0800d31d 	.word	0x0800d31d
 800d5c8:	0800f72f 	.word	0x0800f72f

0800d5cc <__sfputc_r>:
 800d5cc:	6893      	ldr	r3, [r2, #8]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	b410      	push	{r4}
 800d5d4:	6093      	str	r3, [r2, #8]
 800d5d6:	da08      	bge.n	800d5ea <__sfputc_r+0x1e>
 800d5d8:	6994      	ldr	r4, [r2, #24]
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	db01      	blt.n	800d5e2 <__sfputc_r+0x16>
 800d5de:	290a      	cmp	r1, #10
 800d5e0:	d103      	bne.n	800d5ea <__sfputc_r+0x1e>
 800d5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e6:	f000 b9e3 	b.w	800d9b0 <__swbuf_r>
 800d5ea:	6813      	ldr	r3, [r2, #0]
 800d5ec:	1c58      	adds	r0, r3, #1
 800d5ee:	6010      	str	r0, [r2, #0]
 800d5f0:	7019      	strb	r1, [r3, #0]
 800d5f2:	4608      	mov	r0, r1
 800d5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <__sfputs_r>:
 800d5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	460f      	mov	r7, r1
 800d600:	4614      	mov	r4, r2
 800d602:	18d5      	adds	r5, r2, r3
 800d604:	42ac      	cmp	r4, r5
 800d606:	d101      	bne.n	800d60c <__sfputs_r+0x12>
 800d608:	2000      	movs	r0, #0
 800d60a:	e007      	b.n	800d61c <__sfputs_r+0x22>
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	463a      	mov	r2, r7
 800d612:	4630      	mov	r0, r6
 800d614:	f7ff ffda 	bl	800d5cc <__sfputc_r>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d1f3      	bne.n	800d604 <__sfputs_r+0xa>
 800d61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d620 <_vfiprintf_r>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	460d      	mov	r5, r1
 800d626:	b09d      	sub	sp, #116	; 0x74
 800d628:	4614      	mov	r4, r2
 800d62a:	4698      	mov	r8, r3
 800d62c:	4606      	mov	r6, r0
 800d62e:	b118      	cbz	r0, 800d638 <_vfiprintf_r+0x18>
 800d630:	6a03      	ldr	r3, [r0, #32]
 800d632:	b90b      	cbnz	r3, 800d638 <_vfiprintf_r+0x18>
 800d634:	f7fd fa84 	bl	800ab40 <__sinit>
 800d638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d63a:	07d9      	lsls	r1, r3, #31
 800d63c:	d405      	bmi.n	800d64a <_vfiprintf_r+0x2a>
 800d63e:	89ab      	ldrh	r3, [r5, #12]
 800d640:	059a      	lsls	r2, r3, #22
 800d642:	d402      	bmi.n	800d64a <_vfiprintf_r+0x2a>
 800d644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d646:	f7fd fba3 	bl	800ad90 <__retarget_lock_acquire_recursive>
 800d64a:	89ab      	ldrh	r3, [r5, #12]
 800d64c:	071b      	lsls	r3, r3, #28
 800d64e:	d501      	bpl.n	800d654 <_vfiprintf_r+0x34>
 800d650:	692b      	ldr	r3, [r5, #16]
 800d652:	b99b      	cbnz	r3, 800d67c <_vfiprintf_r+0x5c>
 800d654:	4629      	mov	r1, r5
 800d656:	4630      	mov	r0, r6
 800d658:	f000 f9e8 	bl	800da2c <__swsetup_r>
 800d65c:	b170      	cbz	r0, 800d67c <_vfiprintf_r+0x5c>
 800d65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d660:	07dc      	lsls	r4, r3, #31
 800d662:	d504      	bpl.n	800d66e <_vfiprintf_r+0x4e>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	b01d      	add	sp, #116	; 0x74
 800d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	0598      	lsls	r0, r3, #22
 800d672:	d4f7      	bmi.n	800d664 <_vfiprintf_r+0x44>
 800d674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d676:	f7fd fb8c 	bl	800ad92 <__retarget_lock_release_recursive>
 800d67a:	e7f3      	b.n	800d664 <_vfiprintf_r+0x44>
 800d67c:	2300      	movs	r3, #0
 800d67e:	9309      	str	r3, [sp, #36]	; 0x24
 800d680:	2320      	movs	r3, #32
 800d682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d686:	f8cd 800c 	str.w	r8, [sp, #12]
 800d68a:	2330      	movs	r3, #48	; 0x30
 800d68c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d840 <_vfiprintf_r+0x220>
 800d690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d694:	f04f 0901 	mov.w	r9, #1
 800d698:	4623      	mov	r3, r4
 800d69a:	469a      	mov	sl, r3
 800d69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6a0:	b10a      	cbz	r2, 800d6a6 <_vfiprintf_r+0x86>
 800d6a2:	2a25      	cmp	r2, #37	; 0x25
 800d6a4:	d1f9      	bne.n	800d69a <_vfiprintf_r+0x7a>
 800d6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6aa:	d00b      	beq.n	800d6c4 <_vfiprintf_r+0xa4>
 800d6ac:	465b      	mov	r3, fp
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f7ff ffa1 	bl	800d5fa <__sfputs_r>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	f000 80a9 	beq.w	800d810 <_vfiprintf_r+0x1f0>
 800d6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c0:	445a      	add	r2, fp
 800d6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 80a1 	beq.w	800d810 <_vfiprintf_r+0x1f0>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6d8:	f10a 0a01 	add.w	sl, sl, #1
 800d6dc:	9304      	str	r3, [sp, #16]
 800d6de:	9307      	str	r3, [sp, #28]
 800d6e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6e6:	4654      	mov	r4, sl
 800d6e8:	2205      	movs	r2, #5
 800d6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ee:	4854      	ldr	r0, [pc, #336]	; (800d840 <_vfiprintf_r+0x220>)
 800d6f0:	f7f2 fd6e 	bl	80001d0 <memchr>
 800d6f4:	9a04      	ldr	r2, [sp, #16]
 800d6f6:	b9d8      	cbnz	r0, 800d730 <_vfiprintf_r+0x110>
 800d6f8:	06d1      	lsls	r1, r2, #27
 800d6fa:	bf44      	itt	mi
 800d6fc:	2320      	movmi	r3, #32
 800d6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d702:	0713      	lsls	r3, r2, #28
 800d704:	bf44      	itt	mi
 800d706:	232b      	movmi	r3, #43	; 0x2b
 800d708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d70c:	f89a 3000 	ldrb.w	r3, [sl]
 800d710:	2b2a      	cmp	r3, #42	; 0x2a
 800d712:	d015      	beq.n	800d740 <_vfiprintf_r+0x120>
 800d714:	9a07      	ldr	r2, [sp, #28]
 800d716:	4654      	mov	r4, sl
 800d718:	2000      	movs	r0, #0
 800d71a:	f04f 0c0a 	mov.w	ip, #10
 800d71e:	4621      	mov	r1, r4
 800d720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d724:	3b30      	subs	r3, #48	; 0x30
 800d726:	2b09      	cmp	r3, #9
 800d728:	d94d      	bls.n	800d7c6 <_vfiprintf_r+0x1a6>
 800d72a:	b1b0      	cbz	r0, 800d75a <_vfiprintf_r+0x13a>
 800d72c:	9207      	str	r2, [sp, #28]
 800d72e:	e014      	b.n	800d75a <_vfiprintf_r+0x13a>
 800d730:	eba0 0308 	sub.w	r3, r0, r8
 800d734:	fa09 f303 	lsl.w	r3, r9, r3
 800d738:	4313      	orrs	r3, r2
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	46a2      	mov	sl, r4
 800d73e:	e7d2      	b.n	800d6e6 <_vfiprintf_r+0xc6>
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	1d19      	adds	r1, r3, #4
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	9103      	str	r1, [sp, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfbb      	ittet	lt
 800d74c:	425b      	neglt	r3, r3
 800d74e:	f042 0202 	orrlt.w	r2, r2, #2
 800d752:	9307      	strge	r3, [sp, #28]
 800d754:	9307      	strlt	r3, [sp, #28]
 800d756:	bfb8      	it	lt
 800d758:	9204      	strlt	r2, [sp, #16]
 800d75a:	7823      	ldrb	r3, [r4, #0]
 800d75c:	2b2e      	cmp	r3, #46	; 0x2e
 800d75e:	d10c      	bne.n	800d77a <_vfiprintf_r+0x15a>
 800d760:	7863      	ldrb	r3, [r4, #1]
 800d762:	2b2a      	cmp	r3, #42	; 0x2a
 800d764:	d134      	bne.n	800d7d0 <_vfiprintf_r+0x1b0>
 800d766:	9b03      	ldr	r3, [sp, #12]
 800d768:	1d1a      	adds	r2, r3, #4
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	9203      	str	r2, [sp, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	bfb8      	it	lt
 800d772:	f04f 33ff 	movlt.w	r3, #4294967295
 800d776:	3402      	adds	r4, #2
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d850 <_vfiprintf_r+0x230>
 800d77e:	7821      	ldrb	r1, [r4, #0]
 800d780:	2203      	movs	r2, #3
 800d782:	4650      	mov	r0, sl
 800d784:	f7f2 fd24 	bl	80001d0 <memchr>
 800d788:	b138      	cbz	r0, 800d79a <_vfiprintf_r+0x17a>
 800d78a:	9b04      	ldr	r3, [sp, #16]
 800d78c:	eba0 000a 	sub.w	r0, r0, sl
 800d790:	2240      	movs	r2, #64	; 0x40
 800d792:	4082      	lsls	r2, r0
 800d794:	4313      	orrs	r3, r2
 800d796:	3401      	adds	r4, #1
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d79e:	4829      	ldr	r0, [pc, #164]	; (800d844 <_vfiprintf_r+0x224>)
 800d7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7a4:	2206      	movs	r2, #6
 800d7a6:	f7f2 fd13 	bl	80001d0 <memchr>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d03f      	beq.n	800d82e <_vfiprintf_r+0x20e>
 800d7ae:	4b26      	ldr	r3, [pc, #152]	; (800d848 <_vfiprintf_r+0x228>)
 800d7b0:	bb1b      	cbnz	r3, 800d7fa <_vfiprintf_r+0x1da>
 800d7b2:	9b03      	ldr	r3, [sp, #12]
 800d7b4:	3307      	adds	r3, #7
 800d7b6:	f023 0307 	bic.w	r3, r3, #7
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	9303      	str	r3, [sp, #12]
 800d7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c0:	443b      	add	r3, r7
 800d7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c4:	e768      	b.n	800d698 <_vfiprintf_r+0x78>
 800d7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	e7a6      	b.n	800d71e <_vfiprintf_r+0xfe>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	3401      	adds	r4, #1
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f04f 0c0a 	mov.w	ip, #10
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7e2:	3a30      	subs	r2, #48	; 0x30
 800d7e4:	2a09      	cmp	r2, #9
 800d7e6:	d903      	bls.n	800d7f0 <_vfiprintf_r+0x1d0>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0c6      	beq.n	800d77a <_vfiprintf_r+0x15a>
 800d7ec:	9105      	str	r1, [sp, #20]
 800d7ee:	e7c4      	b.n	800d77a <_vfiprintf_r+0x15a>
 800d7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e7f0      	b.n	800d7dc <_vfiprintf_r+0x1bc>
 800d7fa:	ab03      	add	r3, sp, #12
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	462a      	mov	r2, r5
 800d800:	4b12      	ldr	r3, [pc, #72]	; (800d84c <_vfiprintf_r+0x22c>)
 800d802:	a904      	add	r1, sp, #16
 800d804:	4630      	mov	r0, r6
 800d806:	f7fc fb4b 	bl	8009ea0 <_printf_float>
 800d80a:	4607      	mov	r7, r0
 800d80c:	1c78      	adds	r0, r7, #1
 800d80e:	d1d6      	bne.n	800d7be <_vfiprintf_r+0x19e>
 800d810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d812:	07d9      	lsls	r1, r3, #31
 800d814:	d405      	bmi.n	800d822 <_vfiprintf_r+0x202>
 800d816:	89ab      	ldrh	r3, [r5, #12]
 800d818:	059a      	lsls	r2, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_vfiprintf_r+0x202>
 800d81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d81e:	f7fd fab8 	bl	800ad92 <__retarget_lock_release_recursive>
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	065b      	lsls	r3, r3, #25
 800d826:	f53f af1d 	bmi.w	800d664 <_vfiprintf_r+0x44>
 800d82a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d82c:	e71c      	b.n	800d668 <_vfiprintf_r+0x48>
 800d82e:	ab03      	add	r3, sp, #12
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	462a      	mov	r2, r5
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <_vfiprintf_r+0x22c>)
 800d836:	a904      	add	r1, sp, #16
 800d838:	4630      	mov	r0, r6
 800d83a:	f7fc fdd5 	bl	800a3e8 <_printf_i>
 800d83e:	e7e4      	b.n	800d80a <_vfiprintf_r+0x1ea>
 800d840:	0800f729 	.word	0x0800f729
 800d844:	0800f733 	.word	0x0800f733
 800d848:	08009ea1 	.word	0x08009ea1
 800d84c:	0800d5fb 	.word	0x0800d5fb
 800d850:	0800f72f 	.word	0x0800f72f

0800d854 <__sflush_r>:
 800d854:	898a      	ldrh	r2, [r1, #12]
 800d856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d85a:	4605      	mov	r5, r0
 800d85c:	0710      	lsls	r0, r2, #28
 800d85e:	460c      	mov	r4, r1
 800d860:	d458      	bmi.n	800d914 <__sflush_r+0xc0>
 800d862:	684b      	ldr	r3, [r1, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	dc05      	bgt.n	800d874 <__sflush_r+0x20>
 800d868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	dc02      	bgt.n	800d874 <__sflush_r+0x20>
 800d86e:	2000      	movs	r0, #0
 800d870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d876:	2e00      	cmp	r6, #0
 800d878:	d0f9      	beq.n	800d86e <__sflush_r+0x1a>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d880:	682f      	ldr	r7, [r5, #0]
 800d882:	6a21      	ldr	r1, [r4, #32]
 800d884:	602b      	str	r3, [r5, #0]
 800d886:	d032      	beq.n	800d8ee <__sflush_r+0x9a>
 800d888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	075a      	lsls	r2, r3, #29
 800d88e:	d505      	bpl.n	800d89c <__sflush_r+0x48>
 800d890:	6863      	ldr	r3, [r4, #4]
 800d892:	1ac0      	subs	r0, r0, r3
 800d894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d896:	b10b      	cbz	r3, 800d89c <__sflush_r+0x48>
 800d898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d89a:	1ac0      	subs	r0, r0, r3
 800d89c:	2300      	movs	r3, #0
 800d89e:	4602      	mov	r2, r0
 800d8a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8a2:	6a21      	ldr	r1, [r4, #32]
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b0      	blx	r6
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	d106      	bne.n	800d8bc <__sflush_r+0x68>
 800d8ae:	6829      	ldr	r1, [r5, #0]
 800d8b0:	291d      	cmp	r1, #29
 800d8b2:	d82b      	bhi.n	800d90c <__sflush_r+0xb8>
 800d8b4:	4a29      	ldr	r2, [pc, #164]	; (800d95c <__sflush_r+0x108>)
 800d8b6:	410a      	asrs	r2, r1
 800d8b8:	07d6      	lsls	r6, r2, #31
 800d8ba:	d427      	bmi.n	800d90c <__sflush_r+0xb8>
 800d8bc:	2200      	movs	r2, #0
 800d8be:	6062      	str	r2, [r4, #4]
 800d8c0:	04d9      	lsls	r1, r3, #19
 800d8c2:	6922      	ldr	r2, [r4, #16]
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	d504      	bpl.n	800d8d2 <__sflush_r+0x7e>
 800d8c8:	1c42      	adds	r2, r0, #1
 800d8ca:	d101      	bne.n	800d8d0 <__sflush_r+0x7c>
 800d8cc:	682b      	ldr	r3, [r5, #0]
 800d8ce:	b903      	cbnz	r3, 800d8d2 <__sflush_r+0x7e>
 800d8d0:	6560      	str	r0, [r4, #84]	; 0x54
 800d8d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8d4:	602f      	str	r7, [r5, #0]
 800d8d6:	2900      	cmp	r1, #0
 800d8d8:	d0c9      	beq.n	800d86e <__sflush_r+0x1a>
 800d8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8de:	4299      	cmp	r1, r3
 800d8e0:	d002      	beq.n	800d8e8 <__sflush_r+0x94>
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f7fe f8d6 	bl	800ba94 <_free_r>
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	6360      	str	r0, [r4, #52]	; 0x34
 800d8ec:	e7c0      	b.n	800d870 <__sflush_r+0x1c>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b0      	blx	r6
 800d8f4:	1c41      	adds	r1, r0, #1
 800d8f6:	d1c8      	bne.n	800d88a <__sflush_r+0x36>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d0c5      	beq.n	800d88a <__sflush_r+0x36>
 800d8fe:	2b1d      	cmp	r3, #29
 800d900:	d001      	beq.n	800d906 <__sflush_r+0xb2>
 800d902:	2b16      	cmp	r3, #22
 800d904:	d101      	bne.n	800d90a <__sflush_r+0xb6>
 800d906:	602f      	str	r7, [r5, #0]
 800d908:	e7b1      	b.n	800d86e <__sflush_r+0x1a>
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d910:	81a3      	strh	r3, [r4, #12]
 800d912:	e7ad      	b.n	800d870 <__sflush_r+0x1c>
 800d914:	690f      	ldr	r7, [r1, #16]
 800d916:	2f00      	cmp	r7, #0
 800d918:	d0a9      	beq.n	800d86e <__sflush_r+0x1a>
 800d91a:	0793      	lsls	r3, r2, #30
 800d91c:	680e      	ldr	r6, [r1, #0]
 800d91e:	bf08      	it	eq
 800d920:	694b      	ldreq	r3, [r1, #20]
 800d922:	600f      	str	r7, [r1, #0]
 800d924:	bf18      	it	ne
 800d926:	2300      	movne	r3, #0
 800d928:	eba6 0807 	sub.w	r8, r6, r7
 800d92c:	608b      	str	r3, [r1, #8]
 800d92e:	f1b8 0f00 	cmp.w	r8, #0
 800d932:	dd9c      	ble.n	800d86e <__sflush_r+0x1a>
 800d934:	6a21      	ldr	r1, [r4, #32]
 800d936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d938:	4643      	mov	r3, r8
 800d93a:	463a      	mov	r2, r7
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b0      	blx	r6
 800d940:	2800      	cmp	r0, #0
 800d942:	dc06      	bgt.n	800d952 <__sflush_r+0xfe>
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d94a:	81a3      	strh	r3, [r4, #12]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	e78e      	b.n	800d870 <__sflush_r+0x1c>
 800d952:	4407      	add	r7, r0
 800d954:	eba8 0800 	sub.w	r8, r8, r0
 800d958:	e7e9      	b.n	800d92e <__sflush_r+0xda>
 800d95a:	bf00      	nop
 800d95c:	dfbffffe 	.word	0xdfbffffe

0800d960 <_fflush_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	690b      	ldr	r3, [r1, #16]
 800d964:	4605      	mov	r5, r0
 800d966:	460c      	mov	r4, r1
 800d968:	b913      	cbnz	r3, 800d970 <_fflush_r+0x10>
 800d96a:	2500      	movs	r5, #0
 800d96c:	4628      	mov	r0, r5
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	b118      	cbz	r0, 800d97a <_fflush_r+0x1a>
 800d972:	6a03      	ldr	r3, [r0, #32]
 800d974:	b90b      	cbnz	r3, 800d97a <_fflush_r+0x1a>
 800d976:	f7fd f8e3 	bl	800ab40 <__sinit>
 800d97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d0f3      	beq.n	800d96a <_fflush_r+0xa>
 800d982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d984:	07d0      	lsls	r0, r2, #31
 800d986:	d404      	bmi.n	800d992 <_fflush_r+0x32>
 800d988:	0599      	lsls	r1, r3, #22
 800d98a:	d402      	bmi.n	800d992 <_fflush_r+0x32>
 800d98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d98e:	f7fd f9ff 	bl	800ad90 <__retarget_lock_acquire_recursive>
 800d992:	4628      	mov	r0, r5
 800d994:	4621      	mov	r1, r4
 800d996:	f7ff ff5d 	bl	800d854 <__sflush_r>
 800d99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d99c:	07da      	lsls	r2, r3, #31
 800d99e:	4605      	mov	r5, r0
 800d9a0:	d4e4      	bmi.n	800d96c <_fflush_r+0xc>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	059b      	lsls	r3, r3, #22
 800d9a6:	d4e1      	bmi.n	800d96c <_fflush_r+0xc>
 800d9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9aa:	f7fd f9f2 	bl	800ad92 <__retarget_lock_release_recursive>
 800d9ae:	e7dd      	b.n	800d96c <_fflush_r+0xc>

0800d9b0 <__swbuf_r>:
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b2:	460e      	mov	r6, r1
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	b118      	cbz	r0, 800d9c2 <__swbuf_r+0x12>
 800d9ba:	6a03      	ldr	r3, [r0, #32]
 800d9bc:	b90b      	cbnz	r3, 800d9c2 <__swbuf_r+0x12>
 800d9be:	f7fd f8bf 	bl	800ab40 <__sinit>
 800d9c2:	69a3      	ldr	r3, [r4, #24]
 800d9c4:	60a3      	str	r3, [r4, #8]
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	071a      	lsls	r2, r3, #28
 800d9ca:	d525      	bpl.n	800da18 <__swbuf_r+0x68>
 800d9cc:	6923      	ldr	r3, [r4, #16]
 800d9ce:	b31b      	cbz	r3, 800da18 <__swbuf_r+0x68>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	6922      	ldr	r2, [r4, #16]
 800d9d4:	1a98      	subs	r0, r3, r2
 800d9d6:	6963      	ldr	r3, [r4, #20]
 800d9d8:	b2f6      	uxtb	r6, r6
 800d9da:	4283      	cmp	r3, r0
 800d9dc:	4637      	mov	r7, r6
 800d9de:	dc04      	bgt.n	800d9ea <__swbuf_r+0x3a>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	f7ff ffbc 	bl	800d960 <_fflush_r>
 800d9e8:	b9e0      	cbnz	r0, 800da24 <__swbuf_r+0x74>
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	60a3      	str	r3, [r4, #8]
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	6022      	str	r2, [r4, #0]
 800d9f6:	701e      	strb	r6, [r3, #0]
 800d9f8:	6962      	ldr	r2, [r4, #20]
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d004      	beq.n	800da0a <__swbuf_r+0x5a>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	07db      	lsls	r3, r3, #31
 800da04:	d506      	bpl.n	800da14 <__swbuf_r+0x64>
 800da06:	2e0a      	cmp	r6, #10
 800da08:	d104      	bne.n	800da14 <__swbuf_r+0x64>
 800da0a:	4621      	mov	r1, r4
 800da0c:	4628      	mov	r0, r5
 800da0e:	f7ff ffa7 	bl	800d960 <_fflush_r>
 800da12:	b938      	cbnz	r0, 800da24 <__swbuf_r+0x74>
 800da14:	4638      	mov	r0, r7
 800da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da18:	4621      	mov	r1, r4
 800da1a:	4628      	mov	r0, r5
 800da1c:	f000 f806 	bl	800da2c <__swsetup_r>
 800da20:	2800      	cmp	r0, #0
 800da22:	d0d5      	beq.n	800d9d0 <__swbuf_r+0x20>
 800da24:	f04f 37ff 	mov.w	r7, #4294967295
 800da28:	e7f4      	b.n	800da14 <__swbuf_r+0x64>
	...

0800da2c <__swsetup_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4b2a      	ldr	r3, [pc, #168]	; (800dad8 <__swsetup_r+0xac>)
 800da30:	4605      	mov	r5, r0
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	460c      	mov	r4, r1
 800da36:	b118      	cbz	r0, 800da40 <__swsetup_r+0x14>
 800da38:	6a03      	ldr	r3, [r0, #32]
 800da3a:	b90b      	cbnz	r3, 800da40 <__swsetup_r+0x14>
 800da3c:	f7fd f880 	bl	800ab40 <__sinit>
 800da40:	89a3      	ldrh	r3, [r4, #12]
 800da42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da46:	0718      	lsls	r0, r3, #28
 800da48:	d422      	bmi.n	800da90 <__swsetup_r+0x64>
 800da4a:	06d9      	lsls	r1, r3, #27
 800da4c:	d407      	bmi.n	800da5e <__swsetup_r+0x32>
 800da4e:	2309      	movs	r3, #9
 800da50:	602b      	str	r3, [r5, #0]
 800da52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	e034      	b.n	800dac8 <__swsetup_r+0x9c>
 800da5e:	0758      	lsls	r0, r3, #29
 800da60:	d512      	bpl.n	800da88 <__swsetup_r+0x5c>
 800da62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da64:	b141      	cbz	r1, 800da78 <__swsetup_r+0x4c>
 800da66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da6a:	4299      	cmp	r1, r3
 800da6c:	d002      	beq.n	800da74 <__swsetup_r+0x48>
 800da6e:	4628      	mov	r0, r5
 800da70:	f7fe f810 	bl	800ba94 <_free_r>
 800da74:	2300      	movs	r3, #0
 800da76:	6363      	str	r3, [r4, #52]	; 0x34
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	2300      	movs	r3, #0
 800da82:	6063      	str	r3, [r4, #4]
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f043 0308 	orr.w	r3, r3, #8
 800da8e:	81a3      	strh	r3, [r4, #12]
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	b94b      	cbnz	r3, 800daa8 <__swsetup_r+0x7c>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da9e:	d003      	beq.n	800daa8 <__swsetup_r+0x7c>
 800daa0:	4621      	mov	r1, r4
 800daa2:	4628      	mov	r0, r5
 800daa4:	f000 fc7e 	bl	800e3a4 <__smakebuf_r>
 800daa8:	89a0      	ldrh	r0, [r4, #12]
 800daaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daae:	f010 0301 	ands.w	r3, r0, #1
 800dab2:	d00a      	beq.n	800daca <__swsetup_r+0x9e>
 800dab4:	2300      	movs	r3, #0
 800dab6:	60a3      	str	r3, [r4, #8]
 800dab8:	6963      	ldr	r3, [r4, #20]
 800daba:	425b      	negs	r3, r3
 800dabc:	61a3      	str	r3, [r4, #24]
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	b943      	cbnz	r3, 800dad4 <__swsetup_r+0xa8>
 800dac2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dac6:	d1c4      	bne.n	800da52 <__swsetup_r+0x26>
 800dac8:	bd38      	pop	{r3, r4, r5, pc}
 800daca:	0781      	lsls	r1, r0, #30
 800dacc:	bf58      	it	pl
 800dace:	6963      	ldrpl	r3, [r4, #20]
 800dad0:	60a3      	str	r3, [r4, #8]
 800dad2:	e7f4      	b.n	800dabe <__swsetup_r+0x92>
 800dad4:	2000      	movs	r0, #0
 800dad6:	e7f7      	b.n	800dac8 <__swsetup_r+0x9c>
 800dad8:	2000006c 	.word	0x2000006c

0800dadc <memmove>:
 800dadc:	4288      	cmp	r0, r1
 800dade:	b510      	push	{r4, lr}
 800dae0:	eb01 0402 	add.w	r4, r1, r2
 800dae4:	d902      	bls.n	800daec <memmove+0x10>
 800dae6:	4284      	cmp	r4, r0
 800dae8:	4623      	mov	r3, r4
 800daea:	d807      	bhi.n	800dafc <memmove+0x20>
 800daec:	1e43      	subs	r3, r0, #1
 800daee:	42a1      	cmp	r1, r4
 800daf0:	d008      	beq.n	800db04 <memmove+0x28>
 800daf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dafa:	e7f8      	b.n	800daee <memmove+0x12>
 800dafc:	4402      	add	r2, r0
 800dafe:	4601      	mov	r1, r0
 800db00:	428a      	cmp	r2, r1
 800db02:	d100      	bne.n	800db06 <memmove+0x2a>
 800db04:	bd10      	pop	{r4, pc}
 800db06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db0e:	e7f7      	b.n	800db00 <memmove+0x24>

0800db10 <strncmp>:
 800db10:	b510      	push	{r4, lr}
 800db12:	b16a      	cbz	r2, 800db30 <strncmp+0x20>
 800db14:	3901      	subs	r1, #1
 800db16:	1884      	adds	r4, r0, r2
 800db18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db20:	429a      	cmp	r2, r3
 800db22:	d103      	bne.n	800db2c <strncmp+0x1c>
 800db24:	42a0      	cmp	r0, r4
 800db26:	d001      	beq.n	800db2c <strncmp+0x1c>
 800db28:	2a00      	cmp	r2, #0
 800db2a:	d1f5      	bne.n	800db18 <strncmp+0x8>
 800db2c:	1ad0      	subs	r0, r2, r3
 800db2e:	bd10      	pop	{r4, pc}
 800db30:	4610      	mov	r0, r2
 800db32:	e7fc      	b.n	800db2e <strncmp+0x1e>

0800db34 <_sbrk_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d06      	ldr	r5, [pc, #24]	; (800db50 <_sbrk_r+0x1c>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	f7f4 fd7c 	bl	800263c <_sbrk>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_sbrk_r+0x1a>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_sbrk_r+0x1a>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20000b38 	.word	0x20000b38

0800db54 <memcpy>:
 800db54:	440a      	add	r2, r1
 800db56:	4291      	cmp	r1, r2
 800db58:	f100 33ff 	add.w	r3, r0, #4294967295
 800db5c:	d100      	bne.n	800db60 <memcpy+0xc>
 800db5e:	4770      	bx	lr
 800db60:	b510      	push	{r4, lr}
 800db62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db6a:	4291      	cmp	r1, r2
 800db6c:	d1f9      	bne.n	800db62 <memcpy+0xe>
 800db6e:	bd10      	pop	{r4, pc}

0800db70 <nan>:
 800db70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db78 <nan+0x8>
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	00000000 	.word	0x00000000
 800db7c:	7ff80000 	.word	0x7ff80000

0800db80 <__assert_func>:
 800db80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db82:	4614      	mov	r4, r2
 800db84:	461a      	mov	r2, r3
 800db86:	4b09      	ldr	r3, [pc, #36]	; (800dbac <__assert_func+0x2c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4605      	mov	r5, r0
 800db8c:	68d8      	ldr	r0, [r3, #12]
 800db8e:	b14c      	cbz	r4, 800dba4 <__assert_func+0x24>
 800db90:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <__assert_func+0x30>)
 800db92:	9100      	str	r1, [sp, #0]
 800db94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db98:	4906      	ldr	r1, [pc, #24]	; (800dbb4 <__assert_func+0x34>)
 800db9a:	462b      	mov	r3, r5
 800db9c:	f000 fbca 	bl	800e334 <fiprintf>
 800dba0:	f000 fc5e 	bl	800e460 <abort>
 800dba4:	4b04      	ldr	r3, [pc, #16]	; (800dbb8 <__assert_func+0x38>)
 800dba6:	461c      	mov	r4, r3
 800dba8:	e7f3      	b.n	800db92 <__assert_func+0x12>
 800dbaa:	bf00      	nop
 800dbac:	2000006c 	.word	0x2000006c
 800dbb0:	0800f742 	.word	0x0800f742
 800dbb4:	0800f74f 	.word	0x0800f74f
 800dbb8:	0800f77d 	.word	0x0800f77d

0800dbbc <_calloc_r>:
 800dbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbbe:	fba1 2402 	umull	r2, r4, r1, r2
 800dbc2:	b94c      	cbnz	r4, 800dbd8 <_calloc_r+0x1c>
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	9201      	str	r2, [sp, #4]
 800dbc8:	f7fd ffd8 	bl	800bb7c <_malloc_r>
 800dbcc:	9a01      	ldr	r2, [sp, #4]
 800dbce:	4605      	mov	r5, r0
 800dbd0:	b930      	cbnz	r0, 800dbe0 <_calloc_r+0x24>
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	b003      	add	sp, #12
 800dbd6:	bd30      	pop	{r4, r5, pc}
 800dbd8:	220c      	movs	r2, #12
 800dbda:	6002      	str	r2, [r0, #0]
 800dbdc:	2500      	movs	r5, #0
 800dbde:	e7f8      	b.n	800dbd2 <_calloc_r+0x16>
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	f7fd f858 	bl	800ac96 <memset>
 800dbe6:	e7f4      	b.n	800dbd2 <_calloc_r+0x16>

0800dbe8 <rshift>:
 800dbe8:	6903      	ldr	r3, [r0, #16]
 800dbea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dbee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dbf6:	f100 0414 	add.w	r4, r0, #20
 800dbfa:	dd45      	ble.n	800dc88 <rshift+0xa0>
 800dbfc:	f011 011f 	ands.w	r1, r1, #31
 800dc00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc08:	d10c      	bne.n	800dc24 <rshift+0x3c>
 800dc0a:	f100 0710 	add.w	r7, r0, #16
 800dc0e:	4629      	mov	r1, r5
 800dc10:	42b1      	cmp	r1, r6
 800dc12:	d334      	bcc.n	800dc7e <rshift+0x96>
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	1eea      	subs	r2, r5, #3
 800dc1a:	4296      	cmp	r6, r2
 800dc1c:	bf38      	it	cc
 800dc1e:	2300      	movcc	r3, #0
 800dc20:	4423      	add	r3, r4
 800dc22:	e015      	b.n	800dc50 <rshift+0x68>
 800dc24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc28:	f1c1 0820 	rsb	r8, r1, #32
 800dc2c:	40cf      	lsrs	r7, r1
 800dc2e:	f105 0e04 	add.w	lr, r5, #4
 800dc32:	46a1      	mov	r9, r4
 800dc34:	4576      	cmp	r6, lr
 800dc36:	46f4      	mov	ip, lr
 800dc38:	d815      	bhi.n	800dc66 <rshift+0x7e>
 800dc3a:	1a9a      	subs	r2, r3, r2
 800dc3c:	0092      	lsls	r2, r2, #2
 800dc3e:	3a04      	subs	r2, #4
 800dc40:	3501      	adds	r5, #1
 800dc42:	42ae      	cmp	r6, r5
 800dc44:	bf38      	it	cc
 800dc46:	2200      	movcc	r2, #0
 800dc48:	18a3      	adds	r3, r4, r2
 800dc4a:	50a7      	str	r7, [r4, r2]
 800dc4c:	b107      	cbz	r7, 800dc50 <rshift+0x68>
 800dc4e:	3304      	adds	r3, #4
 800dc50:	1b1a      	subs	r2, r3, r4
 800dc52:	42a3      	cmp	r3, r4
 800dc54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc58:	bf08      	it	eq
 800dc5a:	2300      	moveq	r3, #0
 800dc5c:	6102      	str	r2, [r0, #16]
 800dc5e:	bf08      	it	eq
 800dc60:	6143      	streq	r3, [r0, #20]
 800dc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc66:	f8dc c000 	ldr.w	ip, [ip]
 800dc6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc6e:	ea4c 0707 	orr.w	r7, ip, r7
 800dc72:	f849 7b04 	str.w	r7, [r9], #4
 800dc76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc7a:	40cf      	lsrs	r7, r1
 800dc7c:	e7da      	b.n	800dc34 <rshift+0x4c>
 800dc7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc82:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc86:	e7c3      	b.n	800dc10 <rshift+0x28>
 800dc88:	4623      	mov	r3, r4
 800dc8a:	e7e1      	b.n	800dc50 <rshift+0x68>

0800dc8c <__hexdig_fun>:
 800dc8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc90:	2b09      	cmp	r3, #9
 800dc92:	d802      	bhi.n	800dc9a <__hexdig_fun+0xe>
 800dc94:	3820      	subs	r0, #32
 800dc96:	b2c0      	uxtb	r0, r0
 800dc98:	4770      	bx	lr
 800dc9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d801      	bhi.n	800dca6 <__hexdig_fun+0x1a>
 800dca2:	3847      	subs	r0, #71	; 0x47
 800dca4:	e7f7      	b.n	800dc96 <__hexdig_fun+0xa>
 800dca6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dcaa:	2b05      	cmp	r3, #5
 800dcac:	d801      	bhi.n	800dcb2 <__hexdig_fun+0x26>
 800dcae:	3827      	subs	r0, #39	; 0x27
 800dcb0:	e7f1      	b.n	800dc96 <__hexdig_fun+0xa>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <__gethex>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	4617      	mov	r7, r2
 800dcbe:	680a      	ldr	r2, [r1, #0]
 800dcc0:	b085      	sub	sp, #20
 800dcc2:	f102 0b02 	add.w	fp, r2, #2
 800dcc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dcca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dcce:	4681      	mov	r9, r0
 800dcd0:	468a      	mov	sl, r1
 800dcd2:	9302      	str	r3, [sp, #8]
 800dcd4:	32fe      	adds	r2, #254	; 0xfe
 800dcd6:	eb02 030b 	add.w	r3, r2, fp
 800dcda:	46d8      	mov	r8, fp
 800dcdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	2830      	cmp	r0, #48	; 0x30
 800dce4:	d0f7      	beq.n	800dcd6 <__gethex+0x1e>
 800dce6:	f7ff ffd1 	bl	800dc8c <__hexdig_fun>
 800dcea:	4604      	mov	r4, r0
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d138      	bne.n	800dd62 <__gethex+0xaa>
 800dcf0:	49a7      	ldr	r1, [pc, #668]	; (800df90 <__gethex+0x2d8>)
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	f7ff ff0b 	bl	800db10 <strncmp>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d169      	bne.n	800ddd4 <__gethex+0x11c>
 800dd00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dd04:	465d      	mov	r5, fp
 800dd06:	f7ff ffc1 	bl	800dc8c <__hexdig_fun>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d064      	beq.n	800ddd8 <__gethex+0x120>
 800dd0e:	465a      	mov	r2, fp
 800dd10:	7810      	ldrb	r0, [r2, #0]
 800dd12:	2830      	cmp	r0, #48	; 0x30
 800dd14:	4690      	mov	r8, r2
 800dd16:	f102 0201 	add.w	r2, r2, #1
 800dd1a:	d0f9      	beq.n	800dd10 <__gethex+0x58>
 800dd1c:	f7ff ffb6 	bl	800dc8c <__hexdig_fun>
 800dd20:	2301      	movs	r3, #1
 800dd22:	fab0 f480 	clz	r4, r0
 800dd26:	0964      	lsrs	r4, r4, #5
 800dd28:	465e      	mov	r6, fp
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	4642      	mov	r2, r8
 800dd2e:	4615      	mov	r5, r2
 800dd30:	3201      	adds	r2, #1
 800dd32:	7828      	ldrb	r0, [r5, #0]
 800dd34:	f7ff ffaa 	bl	800dc8c <__hexdig_fun>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d1f8      	bne.n	800dd2e <__gethex+0x76>
 800dd3c:	4994      	ldr	r1, [pc, #592]	; (800df90 <__gethex+0x2d8>)
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4628      	mov	r0, r5
 800dd42:	f7ff fee5 	bl	800db10 <strncmp>
 800dd46:	b978      	cbnz	r0, 800dd68 <__gethex+0xb0>
 800dd48:	b946      	cbnz	r6, 800dd5c <__gethex+0xa4>
 800dd4a:	1c6e      	adds	r6, r5, #1
 800dd4c:	4632      	mov	r2, r6
 800dd4e:	4615      	mov	r5, r2
 800dd50:	3201      	adds	r2, #1
 800dd52:	7828      	ldrb	r0, [r5, #0]
 800dd54:	f7ff ff9a 	bl	800dc8c <__hexdig_fun>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d1f8      	bne.n	800dd4e <__gethex+0x96>
 800dd5c:	1b73      	subs	r3, r6, r5
 800dd5e:	009e      	lsls	r6, r3, #2
 800dd60:	e004      	b.n	800dd6c <__gethex+0xb4>
 800dd62:	2400      	movs	r4, #0
 800dd64:	4626      	mov	r6, r4
 800dd66:	e7e1      	b.n	800dd2c <__gethex+0x74>
 800dd68:	2e00      	cmp	r6, #0
 800dd6a:	d1f7      	bne.n	800dd5c <__gethex+0xa4>
 800dd6c:	782b      	ldrb	r3, [r5, #0]
 800dd6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd72:	2b50      	cmp	r3, #80	; 0x50
 800dd74:	d13d      	bne.n	800ddf2 <__gethex+0x13a>
 800dd76:	786b      	ldrb	r3, [r5, #1]
 800dd78:	2b2b      	cmp	r3, #43	; 0x2b
 800dd7a:	d02f      	beq.n	800dddc <__gethex+0x124>
 800dd7c:	2b2d      	cmp	r3, #45	; 0x2d
 800dd7e:	d031      	beq.n	800dde4 <__gethex+0x12c>
 800dd80:	1c69      	adds	r1, r5, #1
 800dd82:	f04f 0b00 	mov.w	fp, #0
 800dd86:	7808      	ldrb	r0, [r1, #0]
 800dd88:	f7ff ff80 	bl	800dc8c <__hexdig_fun>
 800dd8c:	1e42      	subs	r2, r0, #1
 800dd8e:	b2d2      	uxtb	r2, r2
 800dd90:	2a18      	cmp	r2, #24
 800dd92:	d82e      	bhi.n	800ddf2 <__gethex+0x13a>
 800dd94:	f1a0 0210 	sub.w	r2, r0, #16
 800dd98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd9c:	f7ff ff76 	bl	800dc8c <__hexdig_fun>
 800dda0:	f100 3cff 	add.w	ip, r0, #4294967295
 800dda4:	fa5f fc8c 	uxtb.w	ip, ip
 800dda8:	f1bc 0f18 	cmp.w	ip, #24
 800ddac:	d91d      	bls.n	800ddea <__gethex+0x132>
 800ddae:	f1bb 0f00 	cmp.w	fp, #0
 800ddb2:	d000      	beq.n	800ddb6 <__gethex+0xfe>
 800ddb4:	4252      	negs	r2, r2
 800ddb6:	4416      	add	r6, r2
 800ddb8:	f8ca 1000 	str.w	r1, [sl]
 800ddbc:	b1dc      	cbz	r4, 800ddf6 <__gethex+0x13e>
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	bf14      	ite	ne
 800ddc4:	f04f 0800 	movne.w	r8, #0
 800ddc8:	f04f 0806 	moveq.w	r8, #6
 800ddcc:	4640      	mov	r0, r8
 800ddce:	b005      	add	sp, #20
 800ddd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd4:	4645      	mov	r5, r8
 800ddd6:	4626      	mov	r6, r4
 800ddd8:	2401      	movs	r4, #1
 800ddda:	e7c7      	b.n	800dd6c <__gethex+0xb4>
 800dddc:	f04f 0b00 	mov.w	fp, #0
 800dde0:	1ca9      	adds	r1, r5, #2
 800dde2:	e7d0      	b.n	800dd86 <__gethex+0xce>
 800dde4:	f04f 0b01 	mov.w	fp, #1
 800dde8:	e7fa      	b.n	800dde0 <__gethex+0x128>
 800ddea:	230a      	movs	r3, #10
 800ddec:	fb03 0002 	mla	r0, r3, r2, r0
 800ddf0:	e7d0      	b.n	800dd94 <__gethex+0xdc>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	e7e0      	b.n	800ddb8 <__gethex+0x100>
 800ddf6:	eba5 0308 	sub.w	r3, r5, r8
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	2b07      	cmp	r3, #7
 800de00:	dc0a      	bgt.n	800de18 <__gethex+0x160>
 800de02:	4648      	mov	r0, r9
 800de04:	f7fd ff46 	bl	800bc94 <_Balloc>
 800de08:	4604      	mov	r4, r0
 800de0a:	b940      	cbnz	r0, 800de1e <__gethex+0x166>
 800de0c:	4b61      	ldr	r3, [pc, #388]	; (800df94 <__gethex+0x2dc>)
 800de0e:	4602      	mov	r2, r0
 800de10:	21e4      	movs	r1, #228	; 0xe4
 800de12:	4861      	ldr	r0, [pc, #388]	; (800df98 <__gethex+0x2e0>)
 800de14:	f7ff feb4 	bl	800db80 <__assert_func>
 800de18:	3101      	adds	r1, #1
 800de1a:	105b      	asrs	r3, r3, #1
 800de1c:	e7ef      	b.n	800ddfe <__gethex+0x146>
 800de1e:	f100 0a14 	add.w	sl, r0, #20
 800de22:	2300      	movs	r3, #0
 800de24:	495a      	ldr	r1, [pc, #360]	; (800df90 <__gethex+0x2d8>)
 800de26:	f8cd a004 	str.w	sl, [sp, #4]
 800de2a:	469b      	mov	fp, r3
 800de2c:	45a8      	cmp	r8, r5
 800de2e:	d342      	bcc.n	800deb6 <__gethex+0x1fe>
 800de30:	9801      	ldr	r0, [sp, #4]
 800de32:	f840 bb04 	str.w	fp, [r0], #4
 800de36:	eba0 000a 	sub.w	r0, r0, sl
 800de3a:	1080      	asrs	r0, r0, #2
 800de3c:	6120      	str	r0, [r4, #16]
 800de3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800de42:	4658      	mov	r0, fp
 800de44:	f7fe f818 	bl	800be78 <__hi0bits>
 800de48:	683d      	ldr	r5, [r7, #0]
 800de4a:	eba8 0000 	sub.w	r0, r8, r0
 800de4e:	42a8      	cmp	r0, r5
 800de50:	dd59      	ble.n	800df06 <__gethex+0x24e>
 800de52:	eba0 0805 	sub.w	r8, r0, r5
 800de56:	4641      	mov	r1, r8
 800de58:	4620      	mov	r0, r4
 800de5a:	f7fe fba7 	bl	800c5ac <__any_on>
 800de5e:	4683      	mov	fp, r0
 800de60:	b1b8      	cbz	r0, 800de92 <__gethex+0x1da>
 800de62:	f108 33ff 	add.w	r3, r8, #4294967295
 800de66:	1159      	asrs	r1, r3, #5
 800de68:	f003 021f 	and.w	r2, r3, #31
 800de6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de70:	f04f 0b01 	mov.w	fp, #1
 800de74:	fa0b f202 	lsl.w	r2, fp, r2
 800de78:	420a      	tst	r2, r1
 800de7a:	d00a      	beq.n	800de92 <__gethex+0x1da>
 800de7c:	455b      	cmp	r3, fp
 800de7e:	dd06      	ble.n	800de8e <__gethex+0x1d6>
 800de80:	f1a8 0102 	sub.w	r1, r8, #2
 800de84:	4620      	mov	r0, r4
 800de86:	f7fe fb91 	bl	800c5ac <__any_on>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d138      	bne.n	800df00 <__gethex+0x248>
 800de8e:	f04f 0b02 	mov.w	fp, #2
 800de92:	4641      	mov	r1, r8
 800de94:	4620      	mov	r0, r4
 800de96:	f7ff fea7 	bl	800dbe8 <rshift>
 800de9a:	4446      	add	r6, r8
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	42b3      	cmp	r3, r6
 800dea0:	da41      	bge.n	800df26 <__gethex+0x26e>
 800dea2:	4621      	mov	r1, r4
 800dea4:	4648      	mov	r0, r9
 800dea6:	f7fd ff35 	bl	800bd14 <_Bfree>
 800deaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deac:	2300      	movs	r3, #0
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800deb4:	e78a      	b.n	800ddcc <__gethex+0x114>
 800deb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800deba:	2a2e      	cmp	r2, #46	; 0x2e
 800debc:	d014      	beq.n	800dee8 <__gethex+0x230>
 800debe:	2b20      	cmp	r3, #32
 800dec0:	d106      	bne.n	800ded0 <__gethex+0x218>
 800dec2:	9b01      	ldr	r3, [sp, #4]
 800dec4:	f843 bb04 	str.w	fp, [r3], #4
 800dec8:	f04f 0b00 	mov.w	fp, #0
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	465b      	mov	r3, fp
 800ded0:	7828      	ldrb	r0, [r5, #0]
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	f7ff feda 	bl	800dc8c <__hexdig_fun>
 800ded8:	9b03      	ldr	r3, [sp, #12]
 800deda:	f000 000f 	and.w	r0, r0, #15
 800dede:	4098      	lsls	r0, r3
 800dee0:	ea4b 0b00 	orr.w	fp, fp, r0
 800dee4:	3304      	adds	r3, #4
 800dee6:	e7a1      	b.n	800de2c <__gethex+0x174>
 800dee8:	45a8      	cmp	r8, r5
 800deea:	d8e8      	bhi.n	800debe <__gethex+0x206>
 800deec:	2201      	movs	r2, #1
 800deee:	4628      	mov	r0, r5
 800def0:	9303      	str	r3, [sp, #12]
 800def2:	f7ff fe0d 	bl	800db10 <strncmp>
 800def6:	4926      	ldr	r1, [pc, #152]	; (800df90 <__gethex+0x2d8>)
 800def8:	9b03      	ldr	r3, [sp, #12]
 800defa:	2800      	cmp	r0, #0
 800defc:	d1df      	bne.n	800debe <__gethex+0x206>
 800defe:	e795      	b.n	800de2c <__gethex+0x174>
 800df00:	f04f 0b03 	mov.w	fp, #3
 800df04:	e7c5      	b.n	800de92 <__gethex+0x1da>
 800df06:	da0b      	bge.n	800df20 <__gethex+0x268>
 800df08:	eba5 0800 	sub.w	r8, r5, r0
 800df0c:	4621      	mov	r1, r4
 800df0e:	4642      	mov	r2, r8
 800df10:	4648      	mov	r0, r9
 800df12:	f7fe f919 	bl	800c148 <__lshift>
 800df16:	eba6 0608 	sub.w	r6, r6, r8
 800df1a:	4604      	mov	r4, r0
 800df1c:	f100 0a14 	add.w	sl, r0, #20
 800df20:	f04f 0b00 	mov.w	fp, #0
 800df24:	e7ba      	b.n	800de9c <__gethex+0x1e4>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	42b3      	cmp	r3, r6
 800df2a:	dd73      	ble.n	800e014 <__gethex+0x35c>
 800df2c:	1b9e      	subs	r6, r3, r6
 800df2e:	42b5      	cmp	r5, r6
 800df30:	dc34      	bgt.n	800df9c <__gethex+0x2e4>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d023      	beq.n	800df80 <__gethex+0x2c8>
 800df38:	2b03      	cmp	r3, #3
 800df3a:	d025      	beq.n	800df88 <__gethex+0x2d0>
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d115      	bne.n	800df6c <__gethex+0x2b4>
 800df40:	42b5      	cmp	r5, r6
 800df42:	d113      	bne.n	800df6c <__gethex+0x2b4>
 800df44:	2d01      	cmp	r5, #1
 800df46:	d10b      	bne.n	800df60 <__gethex+0x2a8>
 800df48:	9a02      	ldr	r2, [sp, #8]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	2301      	movs	r3, #1
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	f8ca 3000 	str.w	r3, [sl]
 800df56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df58:	f04f 0862 	mov.w	r8, #98	; 0x62
 800df5c:	601c      	str	r4, [r3, #0]
 800df5e:	e735      	b.n	800ddcc <__gethex+0x114>
 800df60:	1e69      	subs	r1, r5, #1
 800df62:	4620      	mov	r0, r4
 800df64:	f7fe fb22 	bl	800c5ac <__any_on>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d1ed      	bne.n	800df48 <__gethex+0x290>
 800df6c:	4621      	mov	r1, r4
 800df6e:	4648      	mov	r0, r9
 800df70:	f7fd fed0 	bl	800bd14 <_Bfree>
 800df74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df76:	2300      	movs	r3, #0
 800df78:	6013      	str	r3, [r2, #0]
 800df7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800df7e:	e725      	b.n	800ddcc <__gethex+0x114>
 800df80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1f2      	bne.n	800df6c <__gethex+0x2b4>
 800df86:	e7df      	b.n	800df48 <__gethex+0x290>
 800df88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1dc      	bne.n	800df48 <__gethex+0x290>
 800df8e:	e7ed      	b.n	800df6c <__gethex+0x2b4>
 800df90:	0800f5d4 	.word	0x0800f5d4
 800df94:	0800f469 	.word	0x0800f469
 800df98:	0800f77e 	.word	0x0800f77e
 800df9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800dfa0:	f1bb 0f00 	cmp.w	fp, #0
 800dfa4:	d133      	bne.n	800e00e <__gethex+0x356>
 800dfa6:	f1b8 0f00 	cmp.w	r8, #0
 800dfaa:	d004      	beq.n	800dfb6 <__gethex+0x2fe>
 800dfac:	4641      	mov	r1, r8
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7fe fafc 	bl	800c5ac <__any_on>
 800dfb4:	4683      	mov	fp, r0
 800dfb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dfba:	2301      	movs	r3, #1
 800dfbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfc0:	f008 081f 	and.w	r8, r8, #31
 800dfc4:	fa03 f308 	lsl.w	r3, r3, r8
 800dfc8:	4213      	tst	r3, r2
 800dfca:	4631      	mov	r1, r6
 800dfcc:	4620      	mov	r0, r4
 800dfce:	bf18      	it	ne
 800dfd0:	f04b 0b02 	orrne.w	fp, fp, #2
 800dfd4:	1bad      	subs	r5, r5, r6
 800dfd6:	f7ff fe07 	bl	800dbe8 <rshift>
 800dfda:	687e      	ldr	r6, [r7, #4]
 800dfdc:	f04f 0802 	mov.w	r8, #2
 800dfe0:	f1bb 0f00 	cmp.w	fp, #0
 800dfe4:	d04a      	beq.n	800e07c <__gethex+0x3c4>
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d016      	beq.n	800e01a <__gethex+0x362>
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d018      	beq.n	800e022 <__gethex+0x36a>
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d109      	bne.n	800e008 <__gethex+0x350>
 800dff4:	f01b 0f02 	tst.w	fp, #2
 800dff8:	d006      	beq.n	800e008 <__gethex+0x350>
 800dffa:	f8da 3000 	ldr.w	r3, [sl]
 800dffe:	ea4b 0b03 	orr.w	fp, fp, r3
 800e002:	f01b 0f01 	tst.w	fp, #1
 800e006:	d10f      	bne.n	800e028 <__gethex+0x370>
 800e008:	f048 0810 	orr.w	r8, r8, #16
 800e00c:	e036      	b.n	800e07c <__gethex+0x3c4>
 800e00e:	f04f 0b01 	mov.w	fp, #1
 800e012:	e7d0      	b.n	800dfb6 <__gethex+0x2fe>
 800e014:	f04f 0801 	mov.w	r8, #1
 800e018:	e7e2      	b.n	800dfe0 <__gethex+0x328>
 800e01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e01c:	f1c3 0301 	rsb	r3, r3, #1
 800e020:	930f      	str	r3, [sp, #60]	; 0x3c
 800e022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d0ef      	beq.n	800e008 <__gethex+0x350>
 800e028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e02c:	f104 0214 	add.w	r2, r4, #20
 800e030:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e03a:	2300      	movs	r3, #0
 800e03c:	4694      	mov	ip, r2
 800e03e:	f852 1b04 	ldr.w	r1, [r2], #4
 800e042:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e046:	d01e      	beq.n	800e086 <__gethex+0x3ce>
 800e048:	3101      	adds	r1, #1
 800e04a:	f8cc 1000 	str.w	r1, [ip]
 800e04e:	f1b8 0f02 	cmp.w	r8, #2
 800e052:	f104 0214 	add.w	r2, r4, #20
 800e056:	d13d      	bne.n	800e0d4 <__gethex+0x41c>
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	42ab      	cmp	r3, r5
 800e05e:	d10b      	bne.n	800e078 <__gethex+0x3c0>
 800e060:	1169      	asrs	r1, r5, #5
 800e062:	2301      	movs	r3, #1
 800e064:	f005 051f 	and.w	r5, r5, #31
 800e068:	fa03 f505 	lsl.w	r5, r3, r5
 800e06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e070:	421d      	tst	r5, r3
 800e072:	bf18      	it	ne
 800e074:	f04f 0801 	movne.w	r8, #1
 800e078:	f048 0820 	orr.w	r8, r8, #32
 800e07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e07e:	601c      	str	r4, [r3, #0]
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	601e      	str	r6, [r3, #0]
 800e084:	e6a2      	b.n	800ddcc <__gethex+0x114>
 800e086:	4290      	cmp	r0, r2
 800e088:	f842 3c04 	str.w	r3, [r2, #-4]
 800e08c:	d8d6      	bhi.n	800e03c <__gethex+0x384>
 800e08e:	68a2      	ldr	r2, [r4, #8]
 800e090:	4593      	cmp	fp, r2
 800e092:	db17      	blt.n	800e0c4 <__gethex+0x40c>
 800e094:	6861      	ldr	r1, [r4, #4]
 800e096:	4648      	mov	r0, r9
 800e098:	3101      	adds	r1, #1
 800e09a:	f7fd fdfb 	bl	800bc94 <_Balloc>
 800e09e:	4682      	mov	sl, r0
 800e0a0:	b918      	cbnz	r0, 800e0aa <__gethex+0x3f2>
 800e0a2:	4b1b      	ldr	r3, [pc, #108]	; (800e110 <__gethex+0x458>)
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	2184      	movs	r1, #132	; 0x84
 800e0a8:	e6b3      	b.n	800de12 <__gethex+0x15a>
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	3202      	adds	r2, #2
 800e0ae:	f104 010c 	add.w	r1, r4, #12
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	f7ff fd4d 	bl	800db54 <memcpy>
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4648      	mov	r0, r9
 800e0be:	f7fd fe29 	bl	800bd14 <_Bfree>
 800e0c2:	4654      	mov	r4, sl
 800e0c4:	6922      	ldr	r2, [r4, #16]
 800e0c6:	1c51      	adds	r1, r2, #1
 800e0c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e0cc:	6121      	str	r1, [r4, #16]
 800e0ce:	2101      	movs	r1, #1
 800e0d0:	6151      	str	r1, [r2, #20]
 800e0d2:	e7bc      	b.n	800e04e <__gethex+0x396>
 800e0d4:	6921      	ldr	r1, [r4, #16]
 800e0d6:	4559      	cmp	r1, fp
 800e0d8:	dd0b      	ble.n	800e0f2 <__gethex+0x43a>
 800e0da:	2101      	movs	r1, #1
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7ff fd83 	bl	800dbe8 <rshift>
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	3601      	adds	r6, #1
 800e0e6:	42b3      	cmp	r3, r6
 800e0e8:	f6ff aedb 	blt.w	800dea2 <__gethex+0x1ea>
 800e0ec:	f04f 0801 	mov.w	r8, #1
 800e0f0:	e7c2      	b.n	800e078 <__gethex+0x3c0>
 800e0f2:	f015 051f 	ands.w	r5, r5, #31
 800e0f6:	d0f9      	beq.n	800e0ec <__gethex+0x434>
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	441a      	add	r2, r3
 800e0fc:	f1c5 0520 	rsb	r5, r5, #32
 800e100:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e104:	f7fd feb8 	bl	800be78 <__hi0bits>
 800e108:	42a8      	cmp	r0, r5
 800e10a:	dbe6      	blt.n	800e0da <__gethex+0x422>
 800e10c:	e7ee      	b.n	800e0ec <__gethex+0x434>
 800e10e:	bf00      	nop
 800e110:	0800f469 	.word	0x0800f469

0800e114 <L_shift>:
 800e114:	f1c2 0208 	rsb	r2, r2, #8
 800e118:	0092      	lsls	r2, r2, #2
 800e11a:	b570      	push	{r4, r5, r6, lr}
 800e11c:	f1c2 0620 	rsb	r6, r2, #32
 800e120:	6843      	ldr	r3, [r0, #4]
 800e122:	6804      	ldr	r4, [r0, #0]
 800e124:	fa03 f506 	lsl.w	r5, r3, r6
 800e128:	432c      	orrs	r4, r5
 800e12a:	40d3      	lsrs	r3, r2
 800e12c:	6004      	str	r4, [r0, #0]
 800e12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e132:	4288      	cmp	r0, r1
 800e134:	d3f4      	bcc.n	800e120 <L_shift+0xc>
 800e136:	bd70      	pop	{r4, r5, r6, pc}

0800e138 <__match>:
 800e138:	b530      	push	{r4, r5, lr}
 800e13a:	6803      	ldr	r3, [r0, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e142:	b914      	cbnz	r4, 800e14a <__match+0x12>
 800e144:	6003      	str	r3, [r0, #0]
 800e146:	2001      	movs	r0, #1
 800e148:	bd30      	pop	{r4, r5, pc}
 800e14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e14e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e152:	2d19      	cmp	r5, #25
 800e154:	bf98      	it	ls
 800e156:	3220      	addls	r2, #32
 800e158:	42a2      	cmp	r2, r4
 800e15a:	d0f0      	beq.n	800e13e <__match+0x6>
 800e15c:	2000      	movs	r0, #0
 800e15e:	e7f3      	b.n	800e148 <__match+0x10>

0800e160 <__hexnan>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	680b      	ldr	r3, [r1, #0]
 800e166:	6801      	ldr	r1, [r0, #0]
 800e168:	115e      	asrs	r6, r3, #5
 800e16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e16e:	f013 031f 	ands.w	r3, r3, #31
 800e172:	b087      	sub	sp, #28
 800e174:	bf18      	it	ne
 800e176:	3604      	addne	r6, #4
 800e178:	2500      	movs	r5, #0
 800e17a:	1f37      	subs	r7, r6, #4
 800e17c:	4682      	mov	sl, r0
 800e17e:	4690      	mov	r8, r2
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	f846 5c04 	str.w	r5, [r6, #-4]
 800e186:	46b9      	mov	r9, r7
 800e188:	463c      	mov	r4, r7
 800e18a:	9502      	str	r5, [sp, #8]
 800e18c:	46ab      	mov	fp, r5
 800e18e:	784a      	ldrb	r2, [r1, #1]
 800e190:	1c4b      	adds	r3, r1, #1
 800e192:	9303      	str	r3, [sp, #12]
 800e194:	b342      	cbz	r2, 800e1e8 <__hexnan+0x88>
 800e196:	4610      	mov	r0, r2
 800e198:	9105      	str	r1, [sp, #20]
 800e19a:	9204      	str	r2, [sp, #16]
 800e19c:	f7ff fd76 	bl	800dc8c <__hexdig_fun>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d14f      	bne.n	800e244 <__hexnan+0xe4>
 800e1a4:	9a04      	ldr	r2, [sp, #16]
 800e1a6:	9905      	ldr	r1, [sp, #20]
 800e1a8:	2a20      	cmp	r2, #32
 800e1aa:	d818      	bhi.n	800e1de <__hexnan+0x7e>
 800e1ac:	9b02      	ldr	r3, [sp, #8]
 800e1ae:	459b      	cmp	fp, r3
 800e1b0:	dd13      	ble.n	800e1da <__hexnan+0x7a>
 800e1b2:	454c      	cmp	r4, r9
 800e1b4:	d206      	bcs.n	800e1c4 <__hexnan+0x64>
 800e1b6:	2d07      	cmp	r5, #7
 800e1b8:	dc04      	bgt.n	800e1c4 <__hexnan+0x64>
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4649      	mov	r1, r9
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f7ff ffa8 	bl	800e114 <L_shift>
 800e1c4:	4544      	cmp	r4, r8
 800e1c6:	d950      	bls.n	800e26a <__hexnan+0x10a>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800e1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800e1d6:	464c      	mov	r4, r9
 800e1d8:	461d      	mov	r5, r3
 800e1da:	9903      	ldr	r1, [sp, #12]
 800e1dc:	e7d7      	b.n	800e18e <__hexnan+0x2e>
 800e1de:	2a29      	cmp	r2, #41	; 0x29
 800e1e0:	d155      	bne.n	800e28e <__hexnan+0x12e>
 800e1e2:	3102      	adds	r1, #2
 800e1e4:	f8ca 1000 	str.w	r1, [sl]
 800e1e8:	f1bb 0f00 	cmp.w	fp, #0
 800e1ec:	d04f      	beq.n	800e28e <__hexnan+0x12e>
 800e1ee:	454c      	cmp	r4, r9
 800e1f0:	d206      	bcs.n	800e200 <__hexnan+0xa0>
 800e1f2:	2d07      	cmp	r5, #7
 800e1f4:	dc04      	bgt.n	800e200 <__hexnan+0xa0>
 800e1f6:	462a      	mov	r2, r5
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff ff8a 	bl	800e114 <L_shift>
 800e200:	4544      	cmp	r4, r8
 800e202:	d934      	bls.n	800e26e <__hexnan+0x10e>
 800e204:	f1a8 0204 	sub.w	r2, r8, #4
 800e208:	4623      	mov	r3, r4
 800e20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e212:	429f      	cmp	r7, r3
 800e214:	d2f9      	bcs.n	800e20a <__hexnan+0xaa>
 800e216:	1b3b      	subs	r3, r7, r4
 800e218:	f023 0303 	bic.w	r3, r3, #3
 800e21c:	3304      	adds	r3, #4
 800e21e:	3e03      	subs	r6, #3
 800e220:	3401      	adds	r4, #1
 800e222:	42a6      	cmp	r6, r4
 800e224:	bf38      	it	cc
 800e226:	2304      	movcc	r3, #4
 800e228:	4443      	add	r3, r8
 800e22a:	2200      	movs	r2, #0
 800e22c:	f843 2b04 	str.w	r2, [r3], #4
 800e230:	429f      	cmp	r7, r3
 800e232:	d2fb      	bcs.n	800e22c <__hexnan+0xcc>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	b91b      	cbnz	r3, 800e240 <__hexnan+0xe0>
 800e238:	4547      	cmp	r7, r8
 800e23a:	d126      	bne.n	800e28a <__hexnan+0x12a>
 800e23c:	2301      	movs	r3, #1
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	2005      	movs	r0, #5
 800e242:	e025      	b.n	800e290 <__hexnan+0x130>
 800e244:	3501      	adds	r5, #1
 800e246:	2d08      	cmp	r5, #8
 800e248:	f10b 0b01 	add.w	fp, fp, #1
 800e24c:	dd06      	ble.n	800e25c <__hexnan+0xfc>
 800e24e:	4544      	cmp	r4, r8
 800e250:	d9c3      	bls.n	800e1da <__hexnan+0x7a>
 800e252:	2300      	movs	r3, #0
 800e254:	f844 3c04 	str.w	r3, [r4, #-4]
 800e258:	2501      	movs	r5, #1
 800e25a:	3c04      	subs	r4, #4
 800e25c:	6822      	ldr	r2, [r4, #0]
 800e25e:	f000 000f 	and.w	r0, r0, #15
 800e262:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e266:	6020      	str	r0, [r4, #0]
 800e268:	e7b7      	b.n	800e1da <__hexnan+0x7a>
 800e26a:	2508      	movs	r5, #8
 800e26c:	e7b5      	b.n	800e1da <__hexnan+0x7a>
 800e26e:	9b01      	ldr	r3, [sp, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d0df      	beq.n	800e234 <__hexnan+0xd4>
 800e274:	f1c3 0320 	rsb	r3, r3, #32
 800e278:	f04f 32ff 	mov.w	r2, #4294967295
 800e27c:	40da      	lsrs	r2, r3
 800e27e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e282:	4013      	ands	r3, r2
 800e284:	f846 3c04 	str.w	r3, [r6, #-4]
 800e288:	e7d4      	b.n	800e234 <__hexnan+0xd4>
 800e28a:	3f04      	subs	r7, #4
 800e28c:	e7d2      	b.n	800e234 <__hexnan+0xd4>
 800e28e:	2004      	movs	r0, #4
 800e290:	b007      	add	sp, #28
 800e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e296 <__ascii_mbtowc>:
 800e296:	b082      	sub	sp, #8
 800e298:	b901      	cbnz	r1, 800e29c <__ascii_mbtowc+0x6>
 800e29a:	a901      	add	r1, sp, #4
 800e29c:	b142      	cbz	r2, 800e2b0 <__ascii_mbtowc+0x1a>
 800e29e:	b14b      	cbz	r3, 800e2b4 <__ascii_mbtowc+0x1e>
 800e2a0:	7813      	ldrb	r3, [r2, #0]
 800e2a2:	600b      	str	r3, [r1, #0]
 800e2a4:	7812      	ldrb	r2, [r2, #0]
 800e2a6:	1e10      	subs	r0, r2, #0
 800e2a8:	bf18      	it	ne
 800e2aa:	2001      	movne	r0, #1
 800e2ac:	b002      	add	sp, #8
 800e2ae:	4770      	bx	lr
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	e7fb      	b.n	800e2ac <__ascii_mbtowc+0x16>
 800e2b4:	f06f 0001 	mvn.w	r0, #1
 800e2b8:	e7f8      	b.n	800e2ac <__ascii_mbtowc+0x16>

0800e2ba <_realloc_r>:
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	4680      	mov	r8, r0
 800e2c0:	4614      	mov	r4, r2
 800e2c2:	460e      	mov	r6, r1
 800e2c4:	b921      	cbnz	r1, 800e2d0 <_realloc_r+0x16>
 800e2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	f7fd bc56 	b.w	800bb7c <_malloc_r>
 800e2d0:	b92a      	cbnz	r2, 800e2de <_realloc_r+0x24>
 800e2d2:	f7fd fbdf 	bl	800ba94 <_free_r>
 800e2d6:	4625      	mov	r5, r4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2de:	f000 f8c6 	bl	800e46e <_malloc_usable_size_r>
 800e2e2:	4284      	cmp	r4, r0
 800e2e4:	4607      	mov	r7, r0
 800e2e6:	d802      	bhi.n	800e2ee <_realloc_r+0x34>
 800e2e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2ec:	d812      	bhi.n	800e314 <_realloc_r+0x5a>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4640      	mov	r0, r8
 800e2f2:	f7fd fc43 	bl	800bb7c <_malloc_r>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d0ed      	beq.n	800e2d8 <_realloc_r+0x1e>
 800e2fc:	42bc      	cmp	r4, r7
 800e2fe:	4622      	mov	r2, r4
 800e300:	4631      	mov	r1, r6
 800e302:	bf28      	it	cs
 800e304:	463a      	movcs	r2, r7
 800e306:	f7ff fc25 	bl	800db54 <memcpy>
 800e30a:	4631      	mov	r1, r6
 800e30c:	4640      	mov	r0, r8
 800e30e:	f7fd fbc1 	bl	800ba94 <_free_r>
 800e312:	e7e1      	b.n	800e2d8 <_realloc_r+0x1e>
 800e314:	4635      	mov	r5, r6
 800e316:	e7df      	b.n	800e2d8 <_realloc_r+0x1e>

0800e318 <__ascii_wctomb>:
 800e318:	b149      	cbz	r1, 800e32e <__ascii_wctomb+0x16>
 800e31a:	2aff      	cmp	r2, #255	; 0xff
 800e31c:	bf85      	ittet	hi
 800e31e:	238a      	movhi	r3, #138	; 0x8a
 800e320:	6003      	strhi	r3, [r0, #0]
 800e322:	700a      	strbls	r2, [r1, #0]
 800e324:	f04f 30ff 	movhi.w	r0, #4294967295
 800e328:	bf98      	it	ls
 800e32a:	2001      	movls	r0, #1
 800e32c:	4770      	bx	lr
 800e32e:	4608      	mov	r0, r1
 800e330:	4770      	bx	lr
	...

0800e334 <fiprintf>:
 800e334:	b40e      	push	{r1, r2, r3}
 800e336:	b503      	push	{r0, r1, lr}
 800e338:	4601      	mov	r1, r0
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	4805      	ldr	r0, [pc, #20]	; (800e354 <fiprintf+0x20>)
 800e33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e342:	6800      	ldr	r0, [r0, #0]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	f7ff f96b 	bl	800d620 <_vfiprintf_r>
 800e34a:	b002      	add	sp, #8
 800e34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e350:	b003      	add	sp, #12
 800e352:	4770      	bx	lr
 800e354:	2000006c 	.word	0x2000006c

0800e358 <__swhatbuf_r>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	460c      	mov	r4, r1
 800e35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e360:	2900      	cmp	r1, #0
 800e362:	b096      	sub	sp, #88	; 0x58
 800e364:	4615      	mov	r5, r2
 800e366:	461e      	mov	r6, r3
 800e368:	da0d      	bge.n	800e386 <__swhatbuf_r+0x2e>
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e370:	f04f 0100 	mov.w	r1, #0
 800e374:	bf0c      	ite	eq
 800e376:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e37a:	2340      	movne	r3, #64	; 0x40
 800e37c:	2000      	movs	r0, #0
 800e37e:	6031      	str	r1, [r6, #0]
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	b016      	add	sp, #88	; 0x58
 800e384:	bd70      	pop	{r4, r5, r6, pc}
 800e386:	466a      	mov	r2, sp
 800e388:	f000 f848 	bl	800e41c <_fstat_r>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	dbec      	blt.n	800e36a <__swhatbuf_r+0x12>
 800e390:	9901      	ldr	r1, [sp, #4]
 800e392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e39a:	4259      	negs	r1, r3
 800e39c:	4159      	adcs	r1, r3
 800e39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a2:	e7eb      	b.n	800e37c <__swhatbuf_r+0x24>

0800e3a4 <__smakebuf_r>:
 800e3a4:	898b      	ldrh	r3, [r1, #12]
 800e3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3a8:	079d      	lsls	r5, r3, #30
 800e3aa:	4606      	mov	r6, r0
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	d507      	bpl.n	800e3c0 <__smakebuf_r+0x1c>
 800e3b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	6123      	str	r3, [r4, #16]
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	6163      	str	r3, [r4, #20]
 800e3bc:	b002      	add	sp, #8
 800e3be:	bd70      	pop	{r4, r5, r6, pc}
 800e3c0:	ab01      	add	r3, sp, #4
 800e3c2:	466a      	mov	r2, sp
 800e3c4:	f7ff ffc8 	bl	800e358 <__swhatbuf_r>
 800e3c8:	9900      	ldr	r1, [sp, #0]
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7fd fbd5 	bl	800bb7c <_malloc_r>
 800e3d2:	b948      	cbnz	r0, 800e3e8 <__smakebuf_r+0x44>
 800e3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d8:	059a      	lsls	r2, r3, #22
 800e3da:	d4ef      	bmi.n	800e3bc <__smakebuf_r+0x18>
 800e3dc:	f023 0303 	bic.w	r3, r3, #3
 800e3e0:	f043 0302 	orr.w	r3, r3, #2
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	e7e3      	b.n	800e3b0 <__smakebuf_r+0xc>
 800e3e8:	89a3      	ldrh	r3, [r4, #12]
 800e3ea:	6020      	str	r0, [r4, #0]
 800e3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	9b00      	ldr	r3, [sp, #0]
 800e3f4:	6163      	str	r3, [r4, #20]
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	6120      	str	r0, [r4, #16]
 800e3fa:	b15b      	cbz	r3, 800e414 <__smakebuf_r+0x70>
 800e3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e400:	4630      	mov	r0, r6
 800e402:	f000 f81d 	bl	800e440 <_isatty_r>
 800e406:	b128      	cbz	r0, 800e414 <__smakebuf_r+0x70>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f023 0303 	bic.w	r3, r3, #3
 800e40e:	f043 0301 	orr.w	r3, r3, #1
 800e412:	81a3      	strh	r3, [r4, #12]
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	431d      	orrs	r5, r3
 800e418:	81a5      	strh	r5, [r4, #12]
 800e41a:	e7cf      	b.n	800e3bc <__smakebuf_r+0x18>

0800e41c <_fstat_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4d07      	ldr	r5, [pc, #28]	; (800e43c <_fstat_r+0x20>)
 800e420:	2300      	movs	r3, #0
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	4611      	mov	r1, r2
 800e428:	602b      	str	r3, [r5, #0]
 800e42a:	f7f4 f8de 	bl	80025ea <_fstat>
 800e42e:	1c43      	adds	r3, r0, #1
 800e430:	d102      	bne.n	800e438 <_fstat_r+0x1c>
 800e432:	682b      	ldr	r3, [r5, #0]
 800e434:	b103      	cbz	r3, 800e438 <_fstat_r+0x1c>
 800e436:	6023      	str	r3, [r4, #0]
 800e438:	bd38      	pop	{r3, r4, r5, pc}
 800e43a:	bf00      	nop
 800e43c:	20000b38 	.word	0x20000b38

0800e440 <_isatty_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d06      	ldr	r5, [pc, #24]	; (800e45c <_isatty_r+0x1c>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	602b      	str	r3, [r5, #0]
 800e44c:	f7f4 f8dd 	bl	800260a <_isatty>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_isatty_r+0x1a>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_isatty_r+0x1a>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	20000b38 	.word	0x20000b38

0800e460 <abort>:
 800e460:	b508      	push	{r3, lr}
 800e462:	2006      	movs	r0, #6
 800e464:	f000 f834 	bl	800e4d0 <raise>
 800e468:	2001      	movs	r0, #1
 800e46a:	f7f4 f88b 	bl	8002584 <_exit>

0800e46e <_malloc_usable_size_r>:
 800e46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e472:	1f18      	subs	r0, r3, #4
 800e474:	2b00      	cmp	r3, #0
 800e476:	bfbc      	itt	lt
 800e478:	580b      	ldrlt	r3, [r1, r0]
 800e47a:	18c0      	addlt	r0, r0, r3
 800e47c:	4770      	bx	lr

0800e47e <_raise_r>:
 800e47e:	291f      	cmp	r1, #31
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4604      	mov	r4, r0
 800e484:	460d      	mov	r5, r1
 800e486:	d904      	bls.n	800e492 <_raise_r+0x14>
 800e488:	2316      	movs	r3, #22
 800e48a:	6003      	str	r3, [r0, #0]
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e494:	b112      	cbz	r2, 800e49c <_raise_r+0x1e>
 800e496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e49a:	b94b      	cbnz	r3, 800e4b0 <_raise_r+0x32>
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 f831 	bl	800e504 <_getpid_r>
 800e4a2:	462a      	mov	r2, r5
 800e4a4:	4601      	mov	r1, r0
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ac:	f000 b818 	b.w	800e4e0 <_kill_r>
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d00a      	beq.n	800e4ca <_raise_r+0x4c>
 800e4b4:	1c59      	adds	r1, r3, #1
 800e4b6:	d103      	bne.n	800e4c0 <_raise_r+0x42>
 800e4b8:	2316      	movs	r3, #22
 800e4ba:	6003      	str	r3, [r0, #0]
 800e4bc:	2001      	movs	r0, #1
 800e4be:	e7e7      	b.n	800e490 <_raise_r+0x12>
 800e4c0:	2400      	movs	r4, #0
 800e4c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	4798      	blx	r3
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	e7e0      	b.n	800e490 <_raise_r+0x12>
	...

0800e4d0 <raise>:
 800e4d0:	4b02      	ldr	r3, [pc, #8]	; (800e4dc <raise+0xc>)
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	6818      	ldr	r0, [r3, #0]
 800e4d6:	f7ff bfd2 	b.w	800e47e <_raise_r>
 800e4da:	bf00      	nop
 800e4dc:	2000006c 	.word	0x2000006c

0800e4e0 <_kill_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d07      	ldr	r5, [pc, #28]	; (800e500 <_kill_r+0x20>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	602b      	str	r3, [r5, #0]
 800e4ee:	f7f4 f839 	bl	8002564 <_kill>
 800e4f2:	1c43      	adds	r3, r0, #1
 800e4f4:	d102      	bne.n	800e4fc <_kill_r+0x1c>
 800e4f6:	682b      	ldr	r3, [r5, #0]
 800e4f8:	b103      	cbz	r3, 800e4fc <_kill_r+0x1c>
 800e4fa:	6023      	str	r3, [r4, #0]
 800e4fc:	bd38      	pop	{r3, r4, r5, pc}
 800e4fe:	bf00      	nop
 800e500:	20000b38 	.word	0x20000b38

0800e504 <_getpid_r>:
 800e504:	f7f4 b826 	b.w	8002554 <_getpid>

0800e508 <_init>:
 800e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50a:	bf00      	nop
 800e50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e50e:	bc08      	pop	{r3}
 800e510:	469e      	mov	lr, r3
 800e512:	4770      	bx	lr

0800e514 <_fini>:
 800e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e516:	bf00      	nop
 800e518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51a:	bc08      	pop	{r3}
 800e51c:	469e      	mov	lr, r3
 800e51e:	4770      	bx	lr
